// File generated by the K Framework Go backend. Timestamp: 2019-08-13 18:25:08.138

package ieletestinginterpreter 

import (
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-testing-kompiled/ieletestingmodel"
)

func (i *Interpreter) stepRHS1(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 1, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ne_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eafd48643973f6625f99186b62bf099bf2e0923ee155334ff1d2d7324e94bee5) contentStartColumn(10) contentStartLine(865) org.kframework.attributes.Location(Location(865,10,865,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS163(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 163, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ne_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_==Int_`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6c4f17b27d205f23128d62dea759d48eb6cc15afdaf8d715cbda6ef43844c6d) contentStartColumn(10) contentStartLine(866) org.kframework.attributes.Location(Location(866,10,866,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS9(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 9, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`eq_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6e45c17c6d0d662f1f5193e44837eca7ff517cf0ebe730684890450104283f4b) contentStartColumn(10) contentStartLine(864) org.kframework.attributes.Location(Location(864,10,864,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS474(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 474, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`eq_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_==Int_`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d1118955f68929235ddd92da49022849eb12b852d5017aae5ad6ce4bc999d334) contentStartColumn(10) contentStartLine(863) org.kframework.attributes.Location(Location(863,10,863,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS67(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 67, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`le_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3a385614982d24be6d872bdf1f845afa59d7f4ca68cad38023bb95ed85b7e9e3) contentStartColumn(10) contentStartLine(858) org.kframework.attributes.Location(Location(858,10,858,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS597(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 597, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`le_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(06513b3f303e9f2b0e7bb4fc6cc24cd2e83c0805a636f94356e8f07511d46204) contentStartColumn(10) contentStartLine(857) org.kframework.attributes.Location(Location(857,10,857,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS142(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 142, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ge_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0250876efda39a28b1acf6a2b52153e15db543d290ad9aa6445656a0a150751) contentStartColumn(10) contentStartLine(861) org.kframework.attributes.Location(Location(861,10,861,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS349(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 349, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ge_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0bbaa0ef491ab74de06ae8cc727e88ae6d60e4c8db4dc990ce90600e9b5e89ce) contentStartColumn(10) contentStartLine(862) org.kframework.attributes.Location(Location(862,10,862,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS143(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 143, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`gt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a7e778e557e6cd4c3f3ee50e85536168e6e2306ad80ba546297de19375282047) contentStartColumn(10) contentStartLine(859) org.kframework.attributes.Location(Location(859,10,859,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS286(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 286, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`gt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(44b84112dced08953a37137fd805ce5d04d02f6a895df40e23e6d29f8ae1c5a4) contentStartColumn(10) contentStartLine(860) org.kframework.attributes.Location(Location(860,10,860,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS235(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 235, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`lt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8a937131cb7c48f9f6451b453e01169e65d93e0901983be85161411f2916da23) contentStartColumn(10) contentStartLine(855) org.kframework.attributes.Location(Location(855,10,855,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS529(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 529, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`lt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W0,W1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5c62c78e94b5efeb7f604871040118b394a79c9e063e68177a22a66e6a5eb39f) contentStartColumn(10) contentStartLine(856) org.kframework.attributes.Location(Location(856,10,856,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS3(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 3, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_>>Int__INT`(W0,`_-Int__INT`(#token(\"0\",\"Int\"),W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0517a2c71287d8105df8f0207743a337b43f4766dc8927641ad42b5805c31a71) contentStartColumn(10) contentStartLine(853) org.kframework.attributes.Location(Location(853,10,853,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(#token("0","Int"),W1)
		/* rhs KToken */ m.IntZero,
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXgtXgtIntXuXuINT( // `_>>Int__INT`(W0,`_-Int__INT`(#token("0","Int"),W1))
		v[8 /*W0*/],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS567(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 567, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_<<Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bd5122a71fcb8b1d65885fdd9b8e314707b78131a1a30b39b03c465a3ca41924) contentStartColumn(10) contentStartLine(852) org.kframework.attributes.Location(Location(852,10,852,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXltXltIntXuXuINT( // `_<<Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS30(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 30, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`SHA256_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token(\"0\",\"Int\")),`_>=Int__INT`(DATA,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fadbcc760b666baee97cc9465a4bde4af72035b70e4029e5ac05d9a3b37a94e) contentStartColumn(10) contentStartLine(1651) org.kframework.attributes.Location(Location(1651,10,1653,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[92], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[92],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		v[89 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS213(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 213, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`SHA256_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_125=>operandList(#parseHexWord(`Sha256`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))),`.List{\"operandList\"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),isInts(_125)),`_andBool_`(`_>=Int__INT`(LEN,#token(\"0\",\"Int\")),`_>=Int__INT`(DATA,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(228bfdbb63f5d9335f4655749f4e3c9a4d30fc18643620b7ac0b72599d199b4b) contentStartColumn(10) contentStartLine(1646) org.kframework.attributes.Location(Location(1646,10,1649,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))
		v[46 /*LEN*/],
		v[49 /*DATA*/],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalBytes2String( // `Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList)))
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalSha256( // `Sha256`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(`Sha256`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList)))))
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_27*/],
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblOperandList, // as-is operandList
					v[95],
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
			),
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[46 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[49 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[52 /*_5*/],
				v[54 /*_6*/],
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_17*/],
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
		),
		v[90 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS32(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 32, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.timestamp\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,TS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,`<timestamp>`(TS),_13),_19) requires `_andBool_`(isLValue(REG),isInt(TS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5fb5601f3493276c92270fe002b7d252393032789a1221ae14b4d2c3a9ca9da3) contentStartColumn(10) contentStartLine(908) org.kframework.attributes.Location(Location(908,10,908,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[58 /*TS*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			v[51 /*_10*/],
			v[53 /*_11*/],
			v[55 /*_12*/],
			i.Model.NewKApply(m.LblXlttimestampXgt, // as-is <timestamp>
				v[58 /*TS*/],
			),
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS39(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 39, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.address\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,ACCT)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(ACCT),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f9465e1409974911d2b12b6baedf54db4a94872fed13f2a97ae3f7940ce65158) contentStartColumn(10) contentStartLine(912) org.kframework.attributes.Location(Location(912,10,912,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[47 /*ACCT*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[47 /*ACCT*/],
				),
				v[49 /*_3*/],
				v[51 /*_4*/],
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS108(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 108, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.msize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,`_<<Int__INT`(MU,#token(\"3\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(MU),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(MU),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(792739833b8717497be12f56d2dda7ceb61c90ffbe4b9a0b44db78ecce7c494c) contentStartColumn(10) contentStartLine(917) org.kframework.attributes.Location(Location(917,10,917,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXuXltXltIntXuXuINT( // `_<<Int__INT`(MU,#token("3","Int"))
		v[59 /*MU*/],
		/* rhs KToken */ constInt3,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[93],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[59 /*MU*/],
				),
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS109(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 109, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.beneficiary\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,CB)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(CB),_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(CB)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(82534eb721c1ea3b0cfb9012dd5d2514eb2bdf8a97b5d4e63302c02f1f509086) contentStartColumn(10) contentStartLine(907) org.kframework.attributes.Location(Location(907,10,907,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[48 /*CB*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[48 /*CB*/],
			),
			v[50 /*_8*/],
			v[52 /*_9*/],
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS111(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 111, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.codesize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,SIZE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,_2,_3,`<programSize>`(SIZE),_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(isLValue(REG),isInt(SIZE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2d5808daa62fe43520501b3647ea3c8e69e0c3358d857487ac6aef18d16094fe) contentStartColumn(10) contentStartLine(918) org.kframework.attributes.Location(Location(918,10,918,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[50 /*SIZE*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_33*/],
		v[22 /*_34*/],
		v[24 /*_35*/],
		v[26 /*_36*/],
		v[28 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_19*/],
			v[33 /*_20*/],
			v[35 /*_21*/],
			v[37 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[41 /*_0*/],
					v[43 /*_1*/],
					v[45 /*_2*/],
					v[47 /*_3*/],
					i.Model.NewKApply(m.LblXltprogramSizeXgt, // as-is <programSize>
						v[50 /*SIZE*/],
					),
					v[52 /*_4*/],
				),
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
				v[72 /*_14*/],
				v[74 /*_15*/],
				v[76 /*_16*/],
				v[78 /*_17*/],
				v[80 /*_18*/],
			),
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
			v[92 /*_28*/],
			v[94 /*_29*/],
			v[96 /*_30*/],
			v[98 /*_31*/],
			v[100 /*_32*/],
		),
		v[102 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS126(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 126, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.difficulty\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,DIFF)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<difficulty>`(DIFF),_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(DIFF),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(23f370691fd45d7be8dde5e40c284c2b4eac68bb000d49823d828c4832586986) contentStartColumn(10) contentStartLine(910) org.kframework.attributes.Location(Location(910,10,910,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[50 /*DIFF*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			i.Model.NewKApply(m.LblXltdifficultyXgt, // as-is <difficulty>
				v[50 /*DIFF*/],
			),
			v[52 /*_9*/],
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS147(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 147, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gas\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,`_/Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,`<schedule>`(SCHED),_30,_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_32) requires `_andBool_`(`_andBool_`(isLValue(REG),isSchedule(SCHED)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(30b6db8a6135f96655df4b4428a5143bc77b56e1130e0b81aae5cd2cafb1018e) contentStartColumn(10) contentStartLine(903) org.kframework.attributes.Location(Location(903,10,903,163)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[96], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[25 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[66 /*GAVAIL*/],
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[95],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[97],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[25 /*SCHED*/],
		),
		v[27 /*_30*/],
		v[29 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[66 /*GAVAIL*/],
				),
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS297(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 297, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.blockhash\",\"IeleName\")),operandList(N,`.List{\"operandList\"}`(.KList))))=>`#load___IELE`(REG,#blockhash(HASHES,N,`_-Int__INT`(HI,#token(\"1\",\"Int\")),#token(\"0\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_13,`<mode>`(`NORMAL`(.KList)),_14,_15,_16,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(HI),_10,_11,_12,`<blockhash>`(HASHES)),_17) requires `_andBool_`(`_andBool_`(`_andBool_`(isList(HASHES),isInt(HI)),isLValue(REG)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9d722153483710fd91e34a5b4d808f05446597fabf0790a6edea6d26fdf26c9a) contentStartColumn(10) contentStartLine(923) org.kframework.attributes.Location(Location(923,10,923,186)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[69], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(HI,#token("1","Int"))
		v[55 /*HI*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[68], i.evalErr = i.evalXhashblockhash( // #blockhash(HASHES,N,`_-Int__INT`(HI,#token("1","Int")),#token("0","Int"))
		v[64 /*HASHES*/],
		v[13 /*N*/],
		v[69],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[70], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[68],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[70],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_13*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblNORMAL, // as-is NORMAL
			),
		),
		v[27 /*_14*/],
		v[29 /*_15*/],
		v[31 /*_16*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[34 /*_0*/],
			v[36 /*_1*/],
			v[38 /*_2*/],
			v[40 /*_3*/],
			v[42 /*_4*/],
			v[44 /*_5*/],
			v[46 /*_6*/],
			v[48 /*_7*/],
			v[50 /*_8*/],
			v[52 /*_9*/],
			i.Model.NewKApply(m.LblXltnumberXgt, // as-is <number>
				v[55 /*HI*/],
			),
			v[57 /*_10*/],
			v[59 /*_11*/],
			v[61 /*_12*/],
			i.Model.NewKApply(m.LblXltblockhashXgt, // as-is <blockhash>
				v[64 /*HASHES*/],
			),
		),
		v[66 /*_17*/],
	), nil
}

func (i *Interpreter) stepRHS633(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 633, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.blockhash\",\"IeleName\")),operandList(N,`.List{\"operandList\"}`(.KList))))=>`#load___IELE`(REG,`#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_orBool__BOOL`(`_>=Int__INT`(N,HI),`_>Int__INT`(`_-Int__INT`(HI,#token(\"256\",\"Int\")),N)),`_<Int__INT`(N,#token(\"0\",\"Int\"))),#token(\"0\",\"Int\"),#parseHexWord(`Keccak256`(`Int2String`(N)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,`<mode>`(`VMTESTS_IELE-CONSTANTS`(.KList)),_15,_16,_17,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(HI),_10,_11,_12,_13),_18) requires `_andBool_`(`_andBool_`(isInt(HI),isLValue(REG)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(956b61af4df6a6f720fcbffa052236eff6ef4b84d3ff974e6e99835a9985e386) contentStartColumn(10) contentStartLine(922) org.kframework.attributes.Location(Location(922,10,922,234)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[70], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(N,HI)
		v[13 /*N*/],
		v[55 /*HI*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_orBool__BOOL`(`_>=Int__INT`(N,HI),`_>Int__INT`(`_-Int__INT`(HI,#token("256","Int")),N))
	v[69] = v[70]
	if !m.IsTrue(v[69]) {
		v[72], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(HI,#token("256","Int"))
			v[55 /*HI*/],
			/* rhs KToken */ constInt256,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[71], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(`_-Int__INT`(HI,#token("256","Int")),N)
			v[72],
			v[13 /*N*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[69] = v[71]
	}
	// `_orBool__BOOL`(`_orBool__BOOL`(`_>=Int__INT`(N,HI),`_>Int__INT`(`_-Int__INT`(HI,#token("256","Int")),N)),`_<Int__INT`(N,#token("0","Int")))
	v[68] = v[69]
	if !m.IsTrue(v[68]) {
		v[73], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(N,#token("0","Int"))
			v[13 /*N*/],
			/* rhs KToken */ m.IntZero,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[68] = v[73]
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_orBool__BOOL`(`_>=Int__INT`(N,HI),`_>Int__INT`(`_-Int__INT`(HI,#token("256","Int")),N)),`_<Int__INT`(N,#token("0","Int"))),#token("0","Int"),#parseHexWord(`Keccak256`(`Int2String`(N))))
	if m.IsTrue(v[68]) { // rhs if-then-else
		v[67] = /* rhs KToken */ m.IntZero
	} else {
		v[76], i.evalErr = i.evalInt2String( // `Int2String`(N)
			v[13 /*N*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[75], i.evalErr = i.evalKeccak256( // `Keccak256`(`Int2String`(N))
			v[76],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[74], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(`Keccak256`(`Int2String`(N)))
			v[75],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[67] = v[74]
	}
	v[77], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[67],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[77],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_14*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
			),
		),
		v[27 /*_15*/],
		v[29 /*_16*/],
		v[31 /*_17*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[34 /*_0*/],
			v[36 /*_1*/],
			v[38 /*_2*/],
			v[40 /*_3*/],
			v[42 /*_4*/],
			v[44 /*_5*/],
			v[46 /*_6*/],
			v[48 /*_7*/],
			v[50 /*_8*/],
			v[52 /*_9*/],
			i.Model.NewKApply(m.LblXltnumberXgt, // as-is <number>
				v[55 /*HI*/],
			),
			v[57 /*_10*/],
			v[59 /*_11*/],
			v[61 /*_12*/],
			v[63 /*_13*/],
		),
		v[65 /*_18*/],
	), nil
}

func (i *Interpreter) stepRHS408(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 408, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.number\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,NUMB)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(NUMB),_10,_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(NUMB)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(91a8e76212c823088b3ab89718c36de6a47990d6fc250354d00e7405deea2641) contentStartColumn(10) contentStartLine(909) org.kframework.attributes.Location(Location(909,10,909,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[52 /*NUMB*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			i.Model.NewKApply(m.LblXltnumberXgt, // as-is <number>
				v[52 /*NUMB*/],
			),
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS428(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 428, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gasprice\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,GPRICE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,`<gasPrice>`(GPRICE),_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(GPRICE),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(96784b9259bcdd238c364472a548013e59bc41f4fc2eedf998fb06d1c8d8bedb) contentStartColumn(10) contentStartLine(904) org.kframework.attributes.Location(Location(904,10,904,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[44 /*GPRICE*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			i.Model.NewKApply(m.LblXltgasPriceXgt, // as-is <gasPrice>
				v[44 /*GPRICE*/],
			),
			v[46 /*_6*/],
			v[48 /*_7*/],
			v[50 /*_8*/],
			v[52 /*_9*/],
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS435(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 435, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.origin\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,ORG)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,`<origin>`(ORG),_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(ORG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c58655d05872e057e91eded7e37db45c3cbc272e3d43f89c216251ed472f1dbf) contentStartColumn(10) contentStartLine(913) org.kframework.attributes.Location(Location(913,10,913,107)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[46 /*ORG*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			i.Model.NewKApply(m.LblXltoriginXgt, // as-is <origin>
				v[46 /*ORG*/],
			),
			v[48 /*_7*/],
			v[50 /*_8*/],
			v[52 /*_9*/],
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS578(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 578, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.callvalue\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,CV)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,`<callValue>`(CV),_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(CV),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c17530e6b765da83d3c660ec66c8106c2eb0ee213019031734fdaaf5c14017fe) contentStartColumn(10) contentStartLine(915) org.kframework.attributes.Location(Location(915,10,915,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[53 /*CV*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				i.Model.NewKApply(m.LblXltcallValueXgt, // as-is <callValue>
					v[53 /*CV*/],
				),
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS580(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 580, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.caller\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,CL)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,`<caller>`(CL),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isLValue(REG),isInt(CL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26f36059d7c34b23661f483a20c80fb24a7cbf69224addea5503cc4a3cb65491) contentStartColumn(10) contentStartLine(914) org.kframework.attributes.Location(Location(914,10,914,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[49 /*CL*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				i.Model.NewKApply(m.LblXltcallerXgt, // as-is <caller>
					v[49 /*CL*/],
				),
				v[51 /*_4*/],
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS649(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 649, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gaslimit\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#load___IELE`(REG,GLIMIT)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gasLimit>`(GLIMIT),_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(GLIMIT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6f0541c9bbcf8e72c9b10bc2babd2ad3aa2dccc37b1a2123a2038fbe628e8cf) contentStartColumn(10) contentStartLine(905) org.kframework.attributes.Location(Location(905,10,905,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[54 /*GLIMIT*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			v[51 /*_10*/],
			i.Model.NewKApply(m.LblXltgasLimitXgt, // as-is <gasLimit>
				v[54 /*GLIMIT*/],
			),
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS193(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 193, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_402,IDX,_403))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_403),isLValues(_402)),isInt(IDX)),isMap(LBLS)),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(adbd20c26dd2110a7c488716e0a12d3b129c702fba4e9fc2c0b47ee7df0d8e7e) contentStartColumn(10) contentStartLine(966) org.kframework.attributes.Location(Location(966,10,968,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[105], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt1,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[105],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_33*/],
		v[21 /*_34*/],
		v[23 /*_35*/],
		v[25 /*_36*/],
		v[27 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_19*/],
			v[32 /*_20*/],
			v[34 /*_21*/],
			v[36 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[40 /*_0*/],
					v[42 /*_1*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[45 /*LBLS*/],
					),
					v[47 /*_2*/],
					v[49 /*_3*/],
					v[51 /*_4*/],
				),
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
				v[71 /*_14*/],
				v[73 /*_15*/],
				v[75 /*_16*/],
				v[77 /*_17*/],
				v[79 /*_18*/],
			),
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
			v[91 /*_28*/],
			v[93 /*_29*/],
			v[95 /*_30*/],
			v[97 /*_31*/],
			v[99 /*_32*/],
		),
		v[101 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS327(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 327, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),operandList(ACCT,`.List{\"operandList\"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValues(REG),isSet(ACCTS)),isInt(ACCT)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(574d0ae7af1be618a31938861c8b0656a4259f14bf3995db7321a9d7d40aa90d) contentStartColumn(10) contentStartLine(1073) org.kframework.attributes.Location(Location(1073,10,1075,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[11 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*REG*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							/* rhs KToken */ constKTokenSortIeleNameieleXdotbalance,
						),
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*ACCT*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
		v[27 /*_7*/],
		v[29 /*_8*/],
		v[31 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[35 /*ACCTS*/],
			),
			v[37 /*_0*/],
			v[39 /*_1*/],
			v[41 /*_2*/],
			v[43 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS595(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 595, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_327,`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(ACCT,`.List{\"operandList\"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCT),isLValues(_327)),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fdde56edab4ed900b2ba299bb7f007f1e1e8f2f1e79d9842eaf8eac906d008ef) contentStartColumn(10) contentStartLine(1092) org.kframework.attributes.Location(Location(1092,10,1094,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[11 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*_327*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							/* rhs KToken */ constKTokenSortIeleNameieleXdotextcodesize,
						),
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*ACCT*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
		v[27 /*_7*/],
		v[29 /*_8*/],
		v[31 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[35 /*ACCTS*/],
			),
			v[37 /*_0*/],
			v[39 /*_1*/],
			v[41 /*_2*/],
			v[43 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS47(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 47, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`RIP160_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token(\"0\",\"Int\")),`_>=Int__INT`(DATA,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5a108c08d985500bee656abcee5cad9dd7bbc64bf4dd64a989df31dc4c21abaa) contentStartColumn(10) contentStartLine(1662) org.kframework.attributes.Location(Location(1662,10,1664,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[92], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[92],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		v[89 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS194(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 194, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`RIP160_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_131=>operandList(#parseHexWord(`RipEmd160`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))),`.List{\"operandList\"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isInts(_131)),isInt(DATA)),`_andBool_`(`_>=Int__INT`(LEN,#token(\"0\",\"Int\")),`_>=Int__INT`(DATA,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(93aab1bb7dc28b20a45077bfc902b3b054147043180d70dfb9cabf74a25dd18d) contentStartColumn(10) contentStartLine(1657) org.kframework.attributes.Location(Location(1657,10,1660,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))
		v[46 /*LEN*/],
		v[49 /*DATA*/],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalBytes2String( // `Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList)))
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalRipEmd160( // `RipEmd160`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(`RipEmd160`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList)))))
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_27*/],
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblOperandList, // as-is operandList
					v[95],
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
			),
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[46 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[49 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[52 /*_5*/],
				v[54 /*_6*/],
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_17*/],
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
		),
		v[90 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS65(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 65, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=xor_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_xorInt__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(22bcd4cadcc9d7782ea5dee1dfd2f23fecbd9b1d8ade3989f308d659ec472837) contentStartColumn(10) contentStartLine(851) org.kframework.attributes.Location(Location(851,10,851,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuxorIntXuXuINT( // `_xorInt__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS80(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 80, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=twos_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,twos(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isInt(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(90fe5c33eab9a294d76dae7348b53c7d9f8a07176aad12ba09f4532d350f6bd4) contentStartColumn(10) contentStartLine(842) org.kframework.attributes.Location(Location(842,10,842,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalTwos( // twos(chop(WIDTH),W)
		v[34],
		v[10 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS89(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 89, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mod_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_%Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c92cc7b1fd2a1947d8b4ae2beeb5270e0677f55dbbecfeda3cfcb342d9ece26a) contentStartColumn(10) contentStartLine(828) org.kframework.attributes.Location(Location(828,10,828,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXpercentIntXuXuINT( // `_%Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS160(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 160, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mod_,__IELE-COMMON`(REG,W0,_26))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),`_==Int_`(_26,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0acefb02ba6d9155eb3c5d599a8304aa2804bf808daf72ddbc63c88af82292a5) contentStartColumn(10) contentStartLine(829) org.kframework.attributes.Location(Location(829,10,829,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS93(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 93, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_^Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c8d81d7cadaa7ecf8ec0530c2a2d038ca9f5aa1c877f6162756063bc5b0b6b7f) contentStartColumn(10) contentStartLine(826) org.kframework.attributes.Location(Location(826,10,826,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXxorIntXuXuINT( // `_^Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS318(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 318, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isOperand(W0)),`_<Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(61810fe038b82dfcfab0114842fdcb4cf1213f15ce18a76eac94bd440c844794) contentStartColumn(10) contentStartLine(827) org.kframework.attributes.Location(Location(827,10,827,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS94(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 94, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(_380,CELL,_381,_34))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_380),isOperand(_381)),isMap(LM)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),`_==Int_`(_34,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0851110467ed04ecfdeaf84c9ffc75ab9de4bc61ac6524abc960273fb2fe2908) contentStartColumn(10) contentStartLine(776) org.kframework.attributes.Location(Location(776,10,778,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[98], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[98],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[58 /*LM*/],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS113(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 113, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,_38))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_38,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(17c807272b2a5875227f95228e9aa1df1cca4ca459a7abd56b8ebcc2b17730a3) contentStartColumn(10) contentStartLine(834) org.kframework.attributes.Location(Location(834,10,834,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS158(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 158, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,`_%Int__INT`(`_*Int__INT`(W0,W1),W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c25e1535251d12f630fc4336db6d193b1c7974e200d4fec1678d251265a8db9) contentStartColumn(10) contentStartLine(833) org.kframework.attributes.Location(Location(833,10,833,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[37], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXpercentIntXuXuINT( // `_%Int__INT`(`_*Int__INT`(W0,W1),W2)
		v[37],
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[36],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS183(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 183, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log__IELE-COMMON`(MEMINDEX))=>`#log___IELE`(MEMINDEX,`.List`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(MEMINDEX) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(73705a0ae6825e14cd200afea74cc2c23542a2095834844db753fa47f8f874ba) contentStartColumn(10) contentStartLine(1040) org.kframework.attributes.Location(Location(1040,10,1040,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[28], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlogXuXuXuIELE, // as-is #log___IELE
					v[6 /*MEMINDEX*/],
					v[28],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS184(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 184, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,operandList(W2,`.List{\"operandList\"}`(.KList))))))=>`#log___IELE`(MEMINDEX,`_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W2)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(93b7660ca1e8dc651b860dcf0ba5785b29ecc12a641780af8e6d08015f97b0d6) contentStartColumn(10) contentStartLine(1043) org.kframework.attributes.Location(Location(1043,10,1043,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalChop( // chop(W0)
		v[9 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalListItem( // `ListItem`(chop(W0))
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalChop( // chop(W1)
		v[12 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalListItem( // `ListItem`(chop(W1))
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1)))
		v[40],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalChop( // chop(W2)
		v[15 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalListItem( // `ListItem`(chop(W2))
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuListXu( // `_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2)))
		v[39],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlogXuXuXuIELE, // as-is #log___IELE
					v[6 /*MEMINDEX*/],
					v[38],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS389(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 389, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,operandList(W2,operandList(W3,`.List{\"operandList\"}`(.KList)))))))=>`#log___IELE`(MEMINDEX,`_List_`(`_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2))),`ListItem`(chop(W3))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W2)),isInt(W3)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7bc276a775acc34d1fe72094f574bc8ae35ddbef543f11cef214915edbdef7cf) contentStartColumn(10) contentStartLine(1044) org.kframework.attributes.Location(Location(1044,10,1044,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[45], i.evalErr = i.evalChop( // chop(W0)
		v[9 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalListItem( // `ListItem`(chop(W0))
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalChop( // chop(W1)
		v[12 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalListItem( // `ListItem`(chop(W1))
		v[47],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1)))
		v[44],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalChop( // chop(W2)
		v[15 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalListItem( // `ListItem`(chop(W2))
		v[49],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuListXu( // `_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2)))
		v[43],
		v[48],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalChop( // chop(W3)
		v[18 /*W3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalListItem( // `ListItem`(chop(W3))
		v[51],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXuListXu( // `_List_`(`_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2))),`ListItem`(chop(W3)))
		v[42],
		v[50],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlogXuXuXuIELE, // as-is #log___IELE
					v[6 /*MEMINDEX*/],
					v[41],
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[52],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_0*/],
		v[30 /*_1*/],
		v[32 /*_2*/],
		v[34 /*_3*/],
		v[36 /*_4*/],
		v[38 /*_5*/],
		v[40 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS420(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 420, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,`.List{\"operandList\"}`(.KList))))=>`#log___IELE`(MEMINDEX,`ListItem`(chop(W0)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(MEMINDEX),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b2cefe962f7d255db474c7355ef8ac226d13c4ba33f346fb56ba450f857a9acf) contentStartColumn(10) contentStartLine(1041) org.kframework.attributes.Location(Location(1041,10,1041,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalChop( // chop(W0)
		v[9 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalListItem( // `ListItem`(chop(W0))
		v[33],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlogXuXuXuIELE, // as-is #log___IELE
					v[6 /*MEMINDEX*/],
					v[32],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS617(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 617, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,`.List{\"operandList\"}`(.KList)))))=>`#log___IELE`(MEMINDEX,`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c9df21cc71e2866ec9af5419f264aebe403c056a62630ec756dfab8be1013aa9) contentStartColumn(10) contentStartLine(1042) org.kframework.attributes.Location(Location(1042,10,1042,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalChop( // chop(W0)
		v[9 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalListItem( // `ListItem`(chop(W0))
		v[37],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalChop( // chop(W1)
		v[12 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalListItem( // `ListItem`(chop(W1))
		v[39],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1)))
		v[36],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlogXuXuXuIELE, // as-is #log___IELE
					v[6 /*MEMINDEX*/],
					v[35],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS188(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 188, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=__IELE-COMMON`(REG1,`%__IELE-COMMON`(REG2)))=>`#load___IELE`(REG1,getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isArray(REGS),isInt(REG2)),isLValue(REG1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5318c1b2baef12917056f03d83d427dc98f51ae1b7994327d3fc6a6f1d77113d) contentStartColumn(10) contentStartLine(729) org.kframework.attributes.Location(Location(729,10,729,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[92], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG2)
		v[53 /*REGS*/],
		v[9 /*REG2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[91], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2))
		v[92],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG1*/],
					v[91],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_28*/],
		v[20 /*_29*/],
		v[22 /*_30*/],
		v[24 /*_31*/],
		v[26 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_14*/],
			v[31 /*_15*/],
			v[33 /*_16*/],
			v[35 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				v[40 /*_1*/],
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[53 /*REGS*/],
				),
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		v[89 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS475(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 475, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,W)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isInt(W)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bd21a345e2aa95a4d5139fce0c46c5a996921d2fbbd355c2e18608bbba4f8414) contentStartColumn(10) contentStartLine(727) org.kframework.attributes.Location(Location(727,10,727,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[8 /*W*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS199(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 199, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ID_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_134=>DATA),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(DATA),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(isInts(DATA),isInts(_134)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(727108eea978ae88b35a7040942a7179d1a93a6b47c25c897c1580dca87e6550) contentStartColumn(10) contentStartLine(1668) org.kframework.attributes.Location(Location(1668,10,1670,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[88], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[88],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_27*/],
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[45 /*DATA*/],
			),
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					v[45 /*DATA*/],
				),
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				v[53 /*_8*/],
				v[55 /*_9*/],
				v[57 /*_10*/],
				v[59 /*_11*/],
				v[61 /*_12*/],
				v[63 /*_13*/],
			),
			v[65 /*_17*/],
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
		),
		v[85 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS207(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 207, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=and_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_&Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c56169074ce837f5c2e92bc6ac7ceafd6475c5fc59b0dcd00883e046dcf85e30) contentStartColumn(10) contentStartLine(849) org.kframework.attributes.Location(Location(849,10,849,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuXampsIntXuXuINT( // `_&Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS214(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 214, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(_431,_432,ACCT))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_431),isInt(ACCT)),isSet(ACCTS)),isGlobalName(_432)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f68e3ac7406ad8742db8311664ea0546d9cf75c907d2329bb55adbc43df6bb69) contentStartColumn(10) contentStartLine(1096) org.kframework.attributes.Location(Location(1096,10,1098,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[10 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON, // as-is _=calladdress_at__IELE-COMMON
						v[6 /*_431*/],
						v[8 /*_432*/],
						v[10 /*ACCT*/],
					),
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_4*/],
		v[21 /*_5*/],
		v[23 /*_6*/],
		v[25 /*_7*/],
		v[27 /*_8*/],
		v[29 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[33 /*ACCTS*/],
			),
			v[35 /*_0*/],
			v[37 /*_1*/],
			v[39 /*_2*/],
			v[41 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS221(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 221, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br_,__IELE-COMMON`(_36,LABEL))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isIeleName(LABEL),`_==Int_`(_36,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5243a8529f2a9ae1d1266844675077d9d0b577e43adf72b62fecdacd9cc75c34) contentStartColumn(10) contentStartLine(949) org.kframework.attributes.Location(Location(949,10,949,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS233(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 233, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=addmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,`_%Int__INT`(`_+Int_`(W0,W1),W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(663c1a52e3b06b666554c733297d385b3a41672bb1221973cc1fa4ecc5e211b6) contentStartColumn(10) contentStartLine(831) org.kframework.attributes.Location(Location(831,10,831,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[37], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXpercentIntXuXuINT( // `_%Int__INT`(`_+Int_`(W0,W1),W2)
		v[37],
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[36],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS312(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 312, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=addmod_,_,__IELE-COMMON`(REG,W0,W1,_41))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_41,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed2f7fcf625004bfac52027ce2fff5d56dc39cb776f954fc220a3740c9734f34) contentStartColumn(10) contentStartLine(832) org.kframework.attributes.Location(Location(832,10,832,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS244(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 244, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECREC_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{\"operandList\"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(V),isInt(S)),isInt(R)),isInt(HASH)),`notBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token(\"0\",\"Int\")),`_>=Int__INT`(V,#token(\"0\",\"Int\"))),`_>=Int__INT`(R,#token(\"0\",\"Int\"))),`_>=Int__INT`(S,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9db2947531bc632546ecfd0be0f012f23668d2f63353750134c2488d60f501c1) contentStartColumn(10) contentStartLine(1635) org.kframework.attributes.Location(Location(1635,10,1637,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*HASH*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*V*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[51 /*R*/],
								i.Model.NewKApply(m.LblOperandList, // as-is operandList
									v[54 /*S*/],
									i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
									),
								),
							),
						),
					),
				),
				v[57 /*_5*/],
				v[59 /*_6*/],
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS481(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 481, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECREC_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_124=>#ecrec(#senderAux(`Bytes2String`(`Int2Bytes`(#token(\"32\",\"Int\"),HASH,bigEndianBytes(.KList))),V,`Bytes2String`(`Int2Bytes`(#token(\"32\",\"Int\"),R,bigEndianBytes(.KList))),`Bytes2String`(`Int2Bytes`(#token(\"32\",\"Int\"),S,bigEndianBytes(.KList)))))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{\"operandList\"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(V),isInt(S)),isInt(R)),isInt(HASH)),isInts(_124)),`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token(\"0\",\"Int\")),`_>=Int__INT`(V,#token(\"0\",\"Int\"))),`_>=Int__INT`(R,#token(\"0\",\"Int\"))),`_>=Int__INT`(S,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02dccfd01e5853c4f8384f30f1994257333a0bdc9e131ea258369569329141f9) contentStartColumn(10) contentStartLine(1630) org.kframework.attributes.Location(Location(1630,10,1633,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[102], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(#token("32","Int"),HASH,bigEndianBytes(.KList))
		/* rhs KToken */ constInt32,
		v[46 /*HASH*/],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalBytes2String( // `Bytes2String`(`Int2Bytes`(#token("32","Int"),HASH,bigEndianBytes(.KList)))
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(#token("32","Int"),R,bigEndianBytes(.KList))
		/* rhs KToken */ constInt32,
		v[52 /*R*/],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalBytes2String( // `Bytes2String`(`Int2Bytes`(#token("32","Int"),R,bigEndianBytes(.KList)))
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(#token("32","Int"),S,bigEndianBytes(.KList))
		/* rhs KToken */ constInt32,
		v[55 /*S*/],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalBytes2String( // `Bytes2String`(`Int2Bytes`(#token("32","Int"),S,bigEndianBytes(.KList)))
		v[110],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXhashsenderAux( // #senderAux(`Bytes2String`(`Int2Bytes`(#token("32","Int"),HASH,bigEndianBytes(.KList))),V,`Bytes2String`(`Int2Bytes`(#token("32","Int"),R,bigEndianBytes(.KList))),`Bytes2String`(`Int2Bytes`(#token("32","Int"),S,bigEndianBytes(.KList))))
		v[105],
		v[49 /*V*/],
		v[107],
		v[109],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXhashecrec( // #ecrec(#senderAux(`Bytes2String`(`Int2Bytes`(#token("32","Int"),HASH,bigEndianBytes(.KList))),V,`Bytes2String`(`Int2Bytes`(#token("32","Int"),R,bigEndianBytes(.KList))),`Bytes2String`(`Int2Bytes`(#token("32","Int"),S,bigEndianBytes(.KList)))))
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[102],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_27*/],
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[103],
			),
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[46 /*HASH*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[49 /*V*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[52 /*R*/],
								i.Model.NewKApply(m.LblOperandList, // as-is operandList
									v[55 /*S*/],
									i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
									),
								),
							),
						),
					),
				),
				v[58 /*_5*/],
				v[60 /*_6*/],
				v[62 /*_7*/],
				v[64 /*_8*/],
				v[66 /*_9*/],
				v[68 /*_10*/],
				v[70 /*_11*/],
				v[72 /*_12*/],
				v[74 /*_13*/],
			),
			v[76 /*_17*/],
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
			v[94 /*_26*/],
		),
		v[96 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS255(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 255, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,powmod(W0,W1,W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_andBool_`(`_=/=Int__INT`(W2,#token(\"0\",\"Int\")),`_orBool__BOOL`(`_>=Int__INT`(W1,#token(\"0\",\"Int\")),`_==Int_`(gcdInt(W0,W2),#token(\"1\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1885607fe23d4300050c7deee08e0b4781648f54ec838d6d3c6d206bf61b9e00) contentStartColumn(10) contentStartLine(835) org.kframework.attributes.Location(Location(835,10,835,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[39], i.evalErr = i.evalPowmod( // powmod(W0,W1,W2)
		v[8 /*W0*/],
		v[10 /*W1*/],
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[39],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS323(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 323, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,_27))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_27,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3350416190cd16222bd80c374bcc18da4b46d58c7e54f22040b9585b4ff0cbf) contentStartColumn(10) contentStartLine(836) org.kframework.attributes.Location(Location(836,10,836,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS581(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 581, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_andBool_`(`_<Int__INT`(W1,#token(\"0\",\"Int\")),`_=/=Int__INT`(gcdInt(W0,W2),#token(\"1\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(679cee29d8464c344e5d483e0c27d3f0865279255eafe96c09118e26fb8a4dcc) contentStartColumn(10) contentStartLine(837) org.kframework.attributes.Location(Location(837,10,837,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS263(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 263, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,VALUE,GCAP))=>`#checkCall____IELE`(ACCTFROM,VALUE,GCAP)~>`#call________IELE`(ACCTFROM,ACCTTO,LABEL,`Ccallgas`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,VALUE,#sizeLVals(REGS),`Ccallarg`(SCHED,ARGS)),VALUE,ARGS,#token(\"false\",\"Bool\"))~>`#return___IELE`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,`<schedule>`(SCHED),_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isConstant(LABEL),isInt(ACCTTO)),isInt(VALUE)),isLValue(REG)),isInt(GCAP)),isLValues(REGS)),isSchedule(SCHED)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb07bce6ec7da23cd1acdf5320331a4689e3e50dadf00ba29c62d958ec1bf290) contentStartColumn(10) contentStartLine(1315) org.kframework.attributes.Location(Location(1315,10,1323,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[108], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[33 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[19 /*GCAP*/],
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(REGS)
		v[9 /*REGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[33 /*SCHED*/],
		v[15 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckCallXuXuXuXuIELE, // as-is #checkCall____IELE
					v[56 /*ACCTFROM*/],
					v[17 /*VALUE*/],
					v[19 /*GCAP*/],
				),
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[56 /*ACCTFROM*/],
					v[13 /*ACCTTO*/],
					v[11 /*LABEL*/],
					i.Model.NewKApply(m.LblCcallgas, // as-is Ccallgas
						v[33 /*SCHED*/],
						i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
							v[13 /*ACCTTO*/],
						),
						v[107],
						v[77 /*GAVAIL*/],
						v[17 /*VALUE*/],
						v[109],
						v[110],
					),
					v[17 /*VALUE*/],
					v[15 /*ARGS*/],
					/* rhs KToken */ m.BoolFalse,
				),
				i.Model.NewKApply(m.LblXhashreturnXuXuXuIELE, // as-is #return___IELE
					v[9 /*REGS*/],
					v[7 /*REG*/],
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[111],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_27*/],
		v[30 /*_28*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[33 /*SCHED*/],
		),
		v[35 /*_29*/],
		v[37 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[40 /*_13*/],
			v[42 /*_14*/],
			v[44 /*_15*/],
			v[46 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[49 /*_0*/],
				v[51 /*_1*/],
				v[53 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[56 /*ACCTFROM*/],
				),
				v[58 /*_3*/],
				v[60 /*_4*/],
				v[62 /*_5*/],
				v[64 /*_6*/],
				v[66 /*_7*/],
				v[68 /*_8*/],
				v[70 /*_9*/],
				v[72 /*_10*/],
				v[74 /*_11*/],
				i.Model.NewKApply(m.LblXltpreviousGasXgt, // as-is <previousGas>
					v[77 /*GAVAIL*/],
				),
				v[79 /*_12*/],
			),
			v[81 /*_17*/],
			v[83 /*_18*/],
			v[85 /*_19*/],
			v[87 /*_20*/],
			v[89 /*_21*/],
			v[91 /*_22*/],
			v[93 /*_23*/],
			v[95 /*_24*/],
			v[97 /*_25*/],
			v[99 /*_26*/],
		),
		v[101 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS274(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 274, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sub_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_-Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(05f5360b14904d9574125ff41b40505a1e4434b6fe5e2599e98bc77472da9c51) contentStartColumn(10) contentStartLine(823) org.kframework.attributes.Location(Location(823,10,823,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS295(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 295, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=byte_,__IELE-COMMON`(REG,INDEX,W))=>`#load___IELE`(REG,byte(chop(INDEX),W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(INDEX),isInt(W)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7fbd5611187615e4a106f929b4c8e1cb61af8ff47dfbc007044a6cbb5dd6cd5d) contentStartColumn(10) contentStartLine(839) org.kframework.attributes.Location(Location(839,10,839,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalChop( // chop(INDEX)
		v[8 /*INDEX*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalByte( // byte(chop(INDEX),W)
		v[34],
		v[10 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS306(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 306, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(_337,_338,ACCT,_339,_340))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_337),isSet(ACCTS)),isOperands(_339)),isLValue(_338)),isOperand(_340)),isInt(ACCT)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ce07c9a4f7243ef9af7a29d2fdc8678f5fbbcea78f10565ae37216bece1ee392) contentStartColumn(10) contentStartLine(1523) org.kframework.attributes.Location(Location(1523,10,1523,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[51], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[10 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=copycreate_(_)send__IELE-COMMON
						v[6 /*_337*/],
						v[8 /*_338*/],
						v[10 /*ACCT*/],
						v[12 /*_339*/],
						v[14 /*_340*/],
					),
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[51],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
		v[29 /*_7*/],
		v[31 /*_8*/],
		v[33 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[37 /*ACCTS*/],
			),
			v[39 /*_0*/],
			v[41 /*_1*/],
			v[43 /*_2*/],
			v[45 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS307(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 307, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isMap(LM)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(08a7f198bd8704a3fb21dc0cc1dc653287b0933f30f037d0a769588ae1b3b51d) contentStartColumn(10) contentStartLine(765) org.kframework.attributes.Location(Location(765,10,767,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[92], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[92],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*LM*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS345(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 345, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=add_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_+Int_`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c91264bedf90bc097532c4837961dd6c115466c4ae723bfd1a1ff09a7f4cb7cb) contentStartColumn(10) contentStartLine(821) org.kframework.attributes.Location(Location(821,10,821,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS353(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 353, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=iszero__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W)),`_=/=K_`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cc6a5e08f25cf714fdd36fcec4f9db61a975c4190ee21596c42a886006ec6324) contentStartColumn(10) contentStartLine(818) org.kframework.attributes.Location(Location(818,10,818,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS628(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 628, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=iszero__IELE-COMMON`(REG,_35))=>`#load___IELE`(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),`_==Int_`(_35,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(896234d5d9ad2df05d1ace5b0902624f7b95db0e6f17d7af0413804343539e87) contentStartColumn(10) contentStartLine(817) org.kframework.attributes.Location(Location(817,10,817,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS365(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 365, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=div_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_/Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c05c37cb60424b998a15b60de7d68322bd564fbec74d8c03b6bda2f425763951) contentStartColumn(10) contentStartLine(824) org.kframework.attributes.Location(Location(824,10,824,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS493(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 493, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=div_,__IELE-COMMON`(REG,W0,_25))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),`_==Int_`(_25,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(600a9b17d37b3307c7ee0419e28e42f85b97154124c8f9b44a27b0d47387b0a1) contentStartColumn(10) contentStartLine(825) org.kframework.attributes.Location(Location(825,10,825,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS373(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 373, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=or_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_|Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00fcefe6f99d9a1b9fb9cdf2e50d7ed10245bffeee017a6efea9bdc2bb090f81) contentStartColumn(10) contentStartLine(850) org.kframework.attributes.Location(Location(850,10,850,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuXpipeIntXuXuINT( // `_|Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS396(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 396, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=log2__IELE-COMMON`(REG,W))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),`_<=Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cf2896ca8fd5a0fb57f85674b06edd0992740ef54aaa7c4c008b285d7c515fd5) contentStartColumn(10) contentStartLine(847) org.kframework.attributes.Location(Location(847,10,847,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS507(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 507, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=log2__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,log2Int(W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),`_>Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5f643a9264ae3e5c20ba3288e83df1ade94eeb72037f6096df58da65ea8c5dd) contentStartColumn(10) contentStartLine(846) org.kframework.attributes.Location(Location(846,10,846,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[32], i.evalErr = i.evalLog2Int( // log2Int(W)
		v[8 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[32],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS410(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 410, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECADD_IELE-PRECOMPILED`(.KList))=>#ecadd(`(_,_)_KRYPTO`(X1,Y1),`(_,_)_KRYPTO`(X2,Y2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{\"operandList\"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(Y2),isInt(X2)),isInt(X1)),isInt(Y1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fd0191d4329875325b0c8b588ce7bd18aa37f6f2356b0f4ab2540ff4a52f25e0) contentStartColumn(10) contentStartLine(1674) org.kframework.attributes.Location(Location(1674,10,1675,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[96], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashecadd, // as-is #ecadd
					i.Model.NewKApply(m.LblXlparenXuXcommaXuXrparenXuKRYPTO, // as-is (_,_)_KRYPTO
						v[45 /*X1*/],
						v[48 /*Y1*/],
					),
					i.Model.NewKApply(m.LblXlparenXuXcommaXuXrparenXuKRYPTO, // as-is (_,_)_KRYPTO
						v[51 /*X2*/],
						v[54 /*Y2*/],
					),
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[96],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*X1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*Y1*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[51 /*X2*/],
								i.Model.NewKApply(m.LblOperandList, // as-is operandList
									v[54 /*Y2*/],
									i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
									),
								),
							),
						),
					),
				),
				v[57 /*_5*/],
				v[59 /*_6*/],
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS426(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 426, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,bswap(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isInt(WIDTH)),`_>=Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ef53ebd089962b557ec5a88d14e4361df066db652d1e20692c437fd8f0d93cc) contentStartColumn(10) contentStartLine(843) org.kframework.attributes.Location(Location(843,10,843,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalBswap( // bswap(chop(WIDTH),W)
		v[35],
		v[10 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS524(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 524, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isOperand(WIDTH)),`_<Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f80a276375ba3738dc3bde634a141aeba43a9605a80bcdb106472b0505daf80d) contentStartColumn(10) contentStartLine(844) org.kframework.attributes.Location(Location(844,10,844,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS433(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 433, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECMUL_IELE-PRECOMPILED`(.KList))=>#ecmul(`(_,_)_KRYPTO`(X,Y),S)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X,operandList(Y,operandList(S,`.List{\"operandList\"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(S),isInt(Y)),isInt(X)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99c6cac22e3f14a7c3e05dbb0eb27331be47e25f4d675d1a76fb2781380453ba) contentStartColumn(10) contentStartLine(1686) org.kframework.attributes.Location(Location(1686,10,1687,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashecmul, // as-is #ecmul
					i.Model.NewKApply(m.LblXlparenXuXcommaXuXrparenXuKRYPTO, // as-is (_,_)_KRYPTO
						v[45 /*X*/],
						v[48 /*Y*/],
					),
					v[51 /*S*/],
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*X*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*Y*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[51 /*S*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS442(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 442, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ret__IELE-COMMON`(VALUES))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_321=>VALUES),_14,_15,_16,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(isNonEmptyInts(VALUES),isInts(_321)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fbfb34881b4d643527193392dac4f3a7a65e09e8ed1a30183fb2e3bab6c955a7) contentStartColumn(10) contentStartLine(1014) org.kframework.attributes.Location(Location(1014,10,1016,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[89], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[90], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[89],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_27*/],
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[6 /*VALUES*/],
			),
			v[29 /*_14*/],
			v[31 /*_15*/],
			v[33 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[90],
				),
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				v[52 /*_7*/],
				v[54 /*_8*/],
				v[56 /*_9*/],
				v[58 /*_10*/],
				v[60 /*_11*/],
				v[62 /*_12*/],
				v[64 /*_13*/],
			),
			v[66 /*_17*/],
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
		),
		v[86 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS446(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 446, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mul_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_*Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6553027c141100523cf3c2796b57d00993623af219530d8a9105c14b8cc3dd4b) contentStartColumn(10) contentStartLine(822) org.kframework.attributes.Location(Location(822,10,822,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(W0,W1)
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS461(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 461, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,__IELE-COMMON`(VALUE,CELL))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM=>`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==Int_`(VALUE,#token(\"0\",\"Int\")),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),LM,`_[_<-_]_MAP`(LM,CELL,`Int2BytesNoLen`(VALUE,littleEndianBytes(.KList),signedBytes(.KList))))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(VALUE),isMap(LM)),isOperand(CELL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d697886d832581c166bf2db0df49621b5bcb484ed0148a0e22703c2af7cdb79e) contentStartColumn(10) contentStartLine(780) org.kframework.attributes.Location(Location(780,10,781,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[90], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(VALUE,#token("0","Int"))
		v[6 /*VALUE*/],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_andBool_`(`_==Int_`(VALUE,#token("0","Int")),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
	v[92] = v[93]
	if m.IsTrue(v[92]) {
		v[95], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(CELL,LM)
			v[8 /*CELL*/],
			v[54 /*LM*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[94], i.evalErr = i.evalNotBoolXu( // `notBool_`(`_in_keys(_)_MAP`(CELL,LM))
			v[95],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[92] = v[94]
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==Int_`(VALUE,#token("0","Int")),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),LM,`_[_<-_]_MAP`(LM,CELL,`Int2BytesNoLen`(VALUE,littleEndianBytes(.KList),signedBytes(.KList))))
	if m.IsTrue(v[92]) { // rhs if-then-else
		v[91] = v[54 /*LM*/]
	} else {
		v[97], i.evalErr = i.evalInt2BytesNoLen( // `Int2BytesNoLen`(VALUE,littleEndianBytes(.KList),signedBytes(.KList))
			v[6 /*VALUE*/],
			i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
			),
			i.Model.NewKApply(m.LblSignedBytes, // as-is signedBytes
			),
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[96], i.evalErr = i.evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP( // `_[_<-_]_MAP`(LM,CELL,`Int2BytesNoLen`(VALUE,littleEndianBytes(.KList),signedBytes(.KList)))
			v[54 /*LM*/],
			v[8 /*CELL*/],
			v[97],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[91] = v[96]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[90],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[91],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS531(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 531, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,MEMINDEX))=>`#load___IELE`(REG,keccak(`.Bytes_BYTES-HOOKED`(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isMap(LM),isLValue(REG)),isOperand(MEMINDEX)),`notBool_`(`_in_keys(_)_MAP`(MEMINDEX,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a77cc2073c5064ef7c0cc4c7fbb4112aa330e9b35683e22c87729011bfe3a41) contentStartColumn(10) contentStartLine(878) org.kframework.attributes.Location(Location(878,10,880,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[93], i.evalErr = i.evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalKeccak( // keccak(`.Bytes_BYTES-HOOKED`(.KList))
		v[93],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[92],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*LM*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS571(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 571, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,GCAP))=>`#checkCall____IELE`(ACCTFROM,#token(\"0\",\"Int\"),GCAP)~>`#call________IELE`(ACCTFROM,ACCTTO,LABEL,`Ccallgas`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,#token(\"0\",\"Int\"),#sizeLVals(REGS),`Ccallarg`(SCHED,ARGS)),#token(\"0\",\"Int\"),ARGS,#token(\"true\",\"Bool\"))~>`#return___IELE`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,`<schedule>`(SCHED),_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isConstant(LABEL)),isInt(ACCTTO)),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd8fbfa85efaaa08bc779d953668fce03b7d63186e40cc2715e168dccfc9cd74) contentStartColumn(10) contentStartLine(1325) org.kframework.attributes.Location(Location(1325,10,1333,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[31 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[17 /*GCAP*/],
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(REGS)
		v[9 /*REGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[31 /*SCHED*/],
		v[15 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckCallXuXuXuXuIELE, // as-is #checkCall____IELE
					v[54 /*ACCTFROM*/],
					/* rhs KToken */ m.IntZero,
					v[17 /*GCAP*/],
				),
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[54 /*ACCTFROM*/],
					v[13 /*ACCTTO*/],
					v[11 /*LABEL*/],
					i.Model.NewKApply(m.LblCcallgas, // as-is Ccallgas
						v[31 /*SCHED*/],
						i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
							v[13 /*ACCTTO*/],
						),
						v[105],
						v[75 /*GAVAIL*/],
						/* rhs KToken */ m.IntZero,
						v[107],
						v[108],
					),
					/* rhs KToken */ m.IntZero,
					v[15 /*ARGS*/],
					/* rhs KToken */ m.BoolTrue,
				),
				i.Model.NewKApply(m.LblXhashreturnXuXuXuIELE, // as-is #return___IELE
					v[9 /*REGS*/],
					v[7 /*REG*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[109],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_27*/],
		v[28 /*_28*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[31 /*SCHED*/],
		),
		v[33 /*_29*/],
		v[35 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[38 /*_13*/],
			v[40 /*_14*/],
			v[42 /*_15*/],
			v[44 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[47 /*_0*/],
				v[49 /*_1*/],
				v[51 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[54 /*ACCTFROM*/],
				),
				v[56 /*_3*/],
				v[58 /*_4*/],
				v[60 /*_5*/],
				v[62 /*_6*/],
				v[64 /*_7*/],
				v[66 /*_8*/],
				v[68 /*_9*/],
				v[70 /*_10*/],
				v[72 /*_11*/],
				i.Model.NewKApply(m.LblXltpreviousGasXgt, // as-is <previousGas>
					v[75 /*GAVAIL*/],
				),
				v[77 /*_12*/],
			),
			v[79 /*_17*/],
			v[81 /*_18*/],
			v[83 /*_19*/],
			v[85 /*_20*/],
			v[87 /*_21*/],
			v[89 /*_22*/],
			v[91 /*_23*/],
			v[93 /*_24*/],
			v[95 /*_25*/],
			v[97 /*_26*/],
		),
		v[99 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS584(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 584, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sext_,__IELE-COMMON`(REG,WIDTH,W))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(df78406291c1f3447689ba9bf0fc66c5d47e44e1067cd10753d4ed1f9019973b) contentStartColumn(10) contentStartLine(841) org.kframework.attributes.Location(Location(841,10,841,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS646(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 646, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sext_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,signextend(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isInt(WIDTH)),`_>=Int__INT`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(47739eb87a1965fff5e2819bfc7031a28432d7a539f06ee4528031f9b06581e9) contentStartColumn(10) contentStartLine(840) org.kframework.attributes.Location(Location(840,10,840,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalSignextend( // signextend(chop(WIDTH),W)
		v[35],
		v[10 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS647(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 647, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=not__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,`~Int__INT`(W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(W),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(09e654ec202a157683ce36b92644aa180754640d4be529022fb905e67786151c) contentStartColumn(10) contentStartLine(819) org.kframework.attributes.Location(Location(819,10,819,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXtildeIntXuXuINT( // `~Int__INT`(W)
		v[8 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[31],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS656(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 656, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`#load___IELE`(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),isMap(LM)),isLValue(REG)),isOperand(WIDTH)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(78c71d20e7b0bdc265d6ccf99c0bd4f44e64fc3aed9395e0d8b01931b900488c) contentStartColumn(10) contentStartLine(758) org.kframework.attributes.Location(Location(758,10,760,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[98], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[98],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[58 /*LM*/],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS662(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 662, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#ecpairing(`.List`(.KList),`.List`(.KList),`Int2Bytes`(`_*Int__INT`(chop(LEN),#token(\"64\",\"Int\")),G1,littleEndianBytes(.KList)),`Int2Bytes`(`_*Int__INT`(chop(LEN),#token(\"128\",\"Int\")),G2,littleEndianBytes(.KList)),LEN)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(G1,operandList(G2,`.List{\"operandList\"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(G1)),isInt(G2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d81f60ef49358ba06c598f90a3eea23aedce9e26977610c0ba6d23bdb66c0311) contentStartColumn(10) contentStartLine(1702) org.kframework.attributes.Location(Location(1702,10,1703,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalChop( // chop(LEN)
		v[45 /*LEN*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(chop(LEN),#token("64","Int"))
		v[97],
		/* rhs KToken */ constInt64,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(`_*Int__INT`(chop(LEN),#token("64","Int")),G1,littleEndianBytes(.KList))
		v[96],
		v[48 /*G1*/],
		i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalChop( // chop(LEN)
		v[45 /*LEN*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(chop(LEN),#token("128","Int"))
		v[100],
		/* rhs KToken */ constInt128,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(`_*Int__INT`(chop(LEN),#token("128","Int")),G2,littleEndianBytes(.KList))
		v[99],
		v[51 /*G2*/],
		i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashecpairing, // as-is #ecpairing
					v[93],
					v[94],
					v[95],
					v[98],
					v[45 /*LEN*/],
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[101],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_28*/],
		v[15 /*_29*/],
		v[17 /*_30*/],
		v[19 /*_31*/],
		v[21 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[45 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[48 /*G1*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[51 /*G2*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS663(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 663, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`revert__IELE-COMMON`(VALUE))=>`#revert__IELE-INFRASTRUCTURE`(VALUE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_367=>`.List{\"operandList\"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(VALUE),isInts(_367)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(92e84c79a5de0c9df5604b95b1d1062f9c396c27e328ac57b5a9ff8d472acdb5) contentStartColumn(10) contentStartLine(1023) org.kframework.attributes.Location(Location(1023,10,1024,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[59], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashrevertXuXuIELEXhyphenINFRASTRUCTURE, // as-is #revert__IELE-INFRASTRUCTURE
					v[6 /*VALUE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[59],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_14*/],
		v[17 /*_15*/],
		v[19 /*_16*/],
		v[21 /*_17*/],
		v[23 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[29 /*_0*/],
			v[31 /*_1*/],
			v[33 /*_2*/],
			v[35 /*_3*/],
			v[37 /*_4*/],
			v[39 /*_5*/],
			v[41 /*_6*/],
			v[43 /*_7*/],
			v[45 /*_8*/],
			v[47 /*_9*/],
			v[49 /*_10*/],
			v[51 /*_11*/],
			v[53 /*_12*/],
			v[55 /*_13*/],
		),
		v[57 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS2(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 2, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_211,`@__IELE-COMMON`(#token(\"iele.difficulty\",\"IeleName\")),_212),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_211),isOperands(_212)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b34f881f2f51c6458d3e3e50b6847a48529ff88ca9eae4f5b0212f59e8508bd6) contentStartColumn(10) contentStartLine(525) org.kframework.attributes.Location(Location(525,10,525,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS41(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 41, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_234,`@__IELE-COMMON`(#token(\"iele.msize\",\"IeleName\")),_235),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_235),isSchedule(SCHED)),isLValues(_234)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85ed71093fe12ce5ece5842020acbb239ddf03dc4f9fc94348e25bca545d4bfe) contentStartColumn(10) contentStartLine(518) org.kframework.attributes.Location(Location(518,10,518,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS86(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 86, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_192,`@__IELE-COMMON`(#token(\"iele.beneficiary\",\"IeleName\")),_193),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_192),isSchedule(SCHED)),isOperands(_193)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b3f9cc50743c1ebd15516fa621bfe5ffe860f453313ebb212b279ff23c91618) contentStartColumn(10) contentStartLine(520) org.kframework.attributes.Location(Location(520,10,520,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS105(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 105, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_302,`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),_303),SCHED)=>`_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_302),isOperands(_303)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c7700e72dde2a324eff5793788d3a051fc2dfc5b5880b94ab72ffe89192bce9e) contentStartColumn(10) contentStartLine(541) org.kframework.attributes.Location(Location(541,10,541,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGextcodesizeXuIELEXhyphenGAS, // as-is Gextcodesize_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS125(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 125, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_186,`@__IELE-COMMON`(#token(\"iele.timestamp\",\"IeleName\")),_187),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_187),isLValues(_186)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ebbd71bf6ed077435377f4e82481c772df0661401b09151f5777d7f3a8ae2526) contentStartColumn(10) contentStartLine(524) org.kframework.attributes.Location(Location(524,10,524,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS139(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 139, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_246,`@__IELE-COMMON`(#token(\"iele.number\",\"IeleName\")),_247),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_247),isSchedule(SCHED)),isLValues(_246)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edc0873247078b6980306c023b834074a71b3c3563b2718e6041034184955885) contentStartColumn(10) contentStartLine(517) org.kframework.attributes.Location(Location(517,10,517,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS257(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 257, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_157,`@__IELE-COMMON`(#token(\"iele.gas\",\"IeleName\")),_158),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_157),isSchedule(SCHED)),isOperands(_158)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab2cb4e336450bff21266cf766401337df7d20eb70946405a14fedf9541d9e91) contentStartColumn(10) contentStartLine(514) org.kframework.attributes.Location(Location(514,10,514,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS272(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 272, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_266,`@__IELE-COMMON`(#token(\"iele.codesize\",\"IeleName\")),_267),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_267)),isLValues(_266)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f0ac6151737ee85098b646f501e2a18fa162e74810d940bb86e4ecdc3a430a8) contentStartColumn(10) contentStartLine(519) org.kframework.attributes.Location(Location(519,10,519,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS302(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 302, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_197,`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),_198),SCHED)=>`_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_197),isSchedule(SCHED)),isOperands(_198)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c32b6b7dacb24f3c83536036a2b0976018f32d53cff5a60e130fd8b8c3770775) contentStartColumn(10) contentStartLine(540) org.kframework.attributes.Location(Location(540,10,540,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbalanceXuIELEXhyphenGAS, // as-is Gbalance_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS333(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 333, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_219,`@__IELE-COMMON`(#token(\"iele.blockhash\",\"IeleName\")),_220),SCHED)=>`_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_220),isLValues(_219)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5149061a4ed61034010585d826242875f13ec125941a104eeb99dbf2e1378286) contentStartColumn(10) contentStartLine(532) org.kframework.attributes.Location(Location(532,10,532,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGblockhashXuIELEXhyphenGAS, // as-is Gblockhash_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS338(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 338, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_170,`@__IELE-COMMON`(#token(\"iele.callvalue\",\"IeleName\")),_171),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_170),isSchedule(SCHED)),isOperands(_171)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c0442fe5235eac42ab6535d01d8642e4b1503585a2d0916dd9c82e86be738d82) contentStartColumn(10) contentStartLine(526) org.kframework.attributes.Location(Location(526,10,526,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS348(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 348, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_163,`@__IELE-COMMON`(#token(\"iele.address\",\"IeleName\")),_164),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_164),isSchedule(SCHED)),isLValues(_163)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1c76474de8740d858d49f0dd8b790bd45542ce33a39f7937734a69d57ec110d5) contentStartColumn(10) contentStartLine(521) org.kframework.attributes.Location(Location(521,10,521,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS352(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 352, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_268,`@__IELE-COMMON`(#token(\"iele.origin\",\"IeleName\")),_269),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_269),isLValues(_268)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b266ed2c21591addbb03d3869bd7bebfb583470fd0e0349e55ef2fd3802b8825) contentStartColumn(10) contentStartLine(522) org.kframework.attributes.Location(Location(522,10,522,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS409(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 409, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_176,`@__IELE-COMMON`(#token(\"iele.gaslimit\",\"IeleName\")),_177),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_176),isOperands(_177)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e5cf82ef2468631f4e281a666798ca594c5e80cd84aa7278ec784acb553eb76d) contentStartColumn(10) contentStartLine(516) org.kframework.attributes.Location(Location(516,10,516,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS422(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 422, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_278,`@__IELE-COMMON`(#token(\"iele.gasprice\",\"IeleName\")),_279),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_279)),isLValues(_278)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5ba7cc010a6ee9440687b587924d4d91aa8a51c52c900f5220e6035b121d2cdf) contentStartColumn(10) contentStartLine(515) org.kframework.attributes.Location(Location(515,10,515,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS557(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 557, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_272,IDX,_273),_274)=>#token(\"0\",\"Int\")``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isOperands(_273)),isMap(LABELS)),isSchedule(_274)),isLValues(_272)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(49d6dcf9e77c7c9a62db19be2709b77a17243223d8fce27ee77fedb1a1bb98d4) contentStartColumn(10) contentStartLine(593) org.kframework.attributes.Location(Location(593,10,595,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[108], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				/* rhs KToken */ m.IntZero,
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[108],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_33*/],
		v[23 /*_34*/],
		v[25 /*_35*/],
		v[27 /*_36*/],
		v[29 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_19*/],
			v[34 /*_20*/],
			v[36 /*_21*/],
			v[38 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[42 /*_0*/],
					v[44 /*_1*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[47 /*LABELS*/],
					),
					v[49 /*_2*/],
					v[51 /*_3*/],
					v[53 /*_4*/],
				),
				v[55 /*_5*/],
				v[57 /*_6*/],
				v[59 /*_7*/],
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
				v[69 /*_12*/],
				v[71 /*_13*/],
				v[73 /*_14*/],
				v[75 /*_15*/],
				v[77 /*_16*/],
				v[79 /*_17*/],
				v[81 /*_18*/],
			),
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
			v[89 /*_26*/],
			v[91 /*_27*/],
			v[93 /*_28*/],
			v[95 /*_29*/],
			v[97 /*_30*/],
			v[99 /*_31*/],
			v[101 /*_32*/],
		),
		v[103 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS601(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 601, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_195,`@__IELE-COMMON`(#token(\"iele.caller\",\"IeleName\")),_196),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_195),isOperands(_196)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f5f0a744b6a1d6098338d2c22ffd52a72051fc4ad59b9ec7c2eac5c3205064fe) contentStartColumn(10) contentStartLine(523) org.kframework.attributes.Location(Location(523,10,523,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGreadstateXuIELEXhyphenGAS, // as-is Greadstate_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS18(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 18, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=addmod_,_,__IELE-COMMON`(_280,W0,W1,W2),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))),`Cdiv`(SCHED,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token(\"1\",\"Int\")),intSize(W2)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_280),isInt(W2)),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f3510f9203654a6db06f60a0682c51de051f2179adc502a34fd3d8c9cafee0f9) contentStartColumn(10) contentStartLine(479) org.kframework.attributes.Location(Location(479,10,479,204)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddXuIELEXhyphenGAS, // as-is Gadd_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[43],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddwordXuIELEXhyphenGAS, // as-is Gaddword_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))
		v[42],
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[49],
		v[50],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int"))
		v[48],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalCdiv( // `Cdiv`(SCHED,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int")),intSize(W2))
		v[14 /*SCHED*/],
		v[47],
		v[51],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))),`Cdiv`(SCHED,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int")),intSize(W2)))
		v[39],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[52],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS48(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 48, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sub_,__IELE-COMMON`(_144,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_144),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85703fc2f17ffaa2510b3e396cce59064b2164789c81a3da93edc1463505f1ef) contentStartColumn(10) contentStartLine(464) org.kframework.attributes.Location(Location(464,10,464,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddXuIELEXhyphenGAS, // as-is Gadd_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddwordXuIELEXhyphenGAS, // as-is Gaddword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS51(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 51, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=log2__IELE-COMMON`(_248,W),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(W),isSchedule(SCHED)),isLValue(_248)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(40eb7c960e2905e9e9a2d4ea01cc7b76bbe6679d2ed983b4c781299bd35d1c8d) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogarithmXuIELEXhyphenGAS, // as-is Glogarithm_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalIntSize( // intSize(W)
		v[8 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogarithmwordXuIELEXhyphenGAS, // as-is Glogarithmword_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),SCHED))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),SCHED)))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[34],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS87(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 87, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC),SCHED)=>`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),isInt(SRC)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8aca400983756184dc66d0528f7090648ff2e644665b57d8194280da12bf0f4c) contentStartColumn(10) contentStartLine(561) org.kframework.attributes.Location(Location(561,10,562,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[35],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS440(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 440, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)),SCHED)=>`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isSchedule(SCHED)),isInt(SRC)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c575dde974024689d5c9dd9e1e8a9e1d35c1e034ddfd160f80402f589536fa52) contentStartColumn(10) contentStartLine(554) org.kframework.attributes.Location(Location(554,10,556,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[95], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[11 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[95],
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[96],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[55 /*REGS*/],
				),
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS616(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 616, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)),SCHED)=>`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isSchedule(SCHED)),isInt(SRC)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6d39606ad932aa72395c084f8c862a10d80cc9b81685e7567bd4f3605fac93e) contentStartColumn(10) contentStartLine(550) org.kframework.attributes.Location(Location(550,10,552,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[96], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[11 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,SRC)
		v[55 /*REGS*/],
		v[9 /*SRC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalIntSize( // intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC)))
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))))
		v[96],
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[95],
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[55 /*REGS*/],
				),
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS459(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 459, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC),SCHED)=>`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(SRC))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),isInt(SRC)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(da4129394b90d6f599e3edf220e9ba6c1efbaea5889ca5949b9842e18d243529) contentStartColumn(10) contentStartLine(558) org.kframework.attributes.Location(Location(558,10,559,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[36], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalIntSize( // intSize(SRC)
		v[8 /*SRC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(SRC))
		v[36],
		v[37],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[35],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS114(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 114, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECREC_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d26c81071a211e621cb548ad4ae300ff1ecaba734f8625e5f3e9c99e60b46bbc) contentStartColumn(10) contentStartLine(728) org.kframework.attributes.Location(Location(728,10,728,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGecrecXuIELEXhyphenGAS, // as-is Gecrec_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[29],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS122(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 122, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`RIP160_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isSchedule(SCHED)),isInt(DATA)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2a875e68736e0ae7132a33767fb252b04e96856e4318946ff6ddb82f13119f85) contentStartColumn(10) contentStartLine(730) org.kframework.attributes.Location(Location(730,10,730,185)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[94], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGrip160XuIELEXhyphenGAS, // as-is Grip160_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGrip160wordXuIELEXhyphenGAS, // as-is Grip160word_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalIntSize( // intSize(DATA)
		v[50 /*DATA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(LEN,intSize(DATA))
		v[47 /*LEN*/],
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalBytesInWords( // bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA))))
		v[96],
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))
		v[94],
		v[95],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[93],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		v[23 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[47 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[50 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS132(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 132, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mod_,__IELE-COMMON`(_294,W0,W1),SCHED)=>`Cdiv`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_294)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fcf43211ca849c0ea5aa56e7b2568e172f991128573890c86bbda39b86c09bfd) contentStartColumn(10) contentStartLine(467) org.kframework.attributes.Location(Location(467,10,467,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalCdiv( // `Cdiv`(SCHED,intSize(W0),intSize(W1))
		v[12 /*SCHED*/],
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS144(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 144, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load__IELE-COMMON`(_277,INDEX),SCHED)=>`_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_277)),isMap(LM)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(531866a3b59e7fc7e612e132f145ec15ee6fdfda45bf9691c611e3f6695340f0) contentStartColumn(10) contentStartLine(656) org.kframework.attributes.Location(Location(656,10,658,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[95], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGloadcellXuIELEXhyphenGAS, // as-is Gloadcell_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[95],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[96],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_28*/],
		v[21 /*_29*/],
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[56 /*LM*/],
				),
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		v[90 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS148(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 148, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=bswap_,__IELE-COMMON`(_213,WIDTH,_214),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isSchedule(SCHED)),isLValue(_213)),isOperand(_214)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a20ad150443a384568781681599b9d22be4b1751b53df5479a0f3bf4226dda4c) contentStartColumn(10) contentStartLine(506) org.kframework.attributes.Location(Location(506,10,506,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbswapXuIELEXhyphenGAS, // as-is Gbswap_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH)))
		/* rhs KToken */ constInt1,
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbswapwordXuIELEXhyphenGAS, // as-is Gbswapword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),SCHED))
		v[40],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),SCHED)))
		v[38],
		v[39],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS170(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 170, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=calladdress_at__IELE-COMMON`(_173,_174,_175),SCHED)=>`_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_173),isSchedule(SCHED)),isOperand(_175)),isGlobalName(_174)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(20798a4e976f09370747b7b04b07e8d058b99434840ef1cf8abdf054a9e56dce) contentStartColumn(10) contentStartLine(542) org.kframework.attributes.Location(Location(542,10,542,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcalladdressXuIELEXhyphenGAS, // as-is Gcalladdress_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS171(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 171, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECADD_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c66d6d7ea9edb5b7fcaaf6cf3fcd811ff03c3a1bae24af2ee1f8642533f872d9) contentStartColumn(10) contentStartLine(733) org.kframework.attributes.Location(Location(733,10,733,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGecaddXuIELEXhyphenGAS, // as-is Gecadd_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[29],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS182(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 182, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECMUL_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b78c1fab651a88ea5f7b54e6dd68bad1a711051c367b1e7924e0c6333e2382fe) contentStartColumn(10) contentStartLine(734) org.kframework.attributes.Location(Location(734,10,734,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGecmulXuIELEXhyphenGAS, // as-is Gecmul_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[29],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS200(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 200, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_,_=copycreate_(_)send__IELE-COMMON`(_224,_225,_226,ARGS,_227),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_227),isLValue(_225)),isLValue(_224)),isOperands(ARGS)),isSchedule(SCHED)),isOperand(_226)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ea16c7e3142dc69b2a030945d9ab91ad9a83c2a1b23ffebb51946b27941177fb) contentStartColumn(10) contentStartLine(708) org.kframework.attributes.Location(Location(708,10,708,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[45], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcopycreateXuIELEXhyphenGAS, // as-is Gcopycreate_IELE-GAS
		),
		v[16 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[16 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[16 /*SCHED*/],
		v[12 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS))
		v[47],
		v[48],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))
		v[45],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[44],
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[49],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS204(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 204, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=or_,__IELE-COMMON`(_228,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(W1)),isLValue(_228)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1221b03c0b019efb743d0beccc712dbbff1b170c941bee661b55f0376ed543b6) contentStartColumn(10) contentStartLine(441) org.kframework.attributes.Location(Location(441,10,441,135)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwiseXuIELEXhyphenGAS, // as-is Gbitwise_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwisewordXuIELEXhyphenGAS, // as-is Gbitwiseword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS222(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 222, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=twos_,__IELE-COMMON`(_230,WIDTH,_231),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isSchedule(SCHED)),isOperand(_231)),isLValue(_230)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2486d95620602700bbb4241c30b51cefd17c6a3308264b7d312cb147f2e6c842) contentStartColumn(10) contentStartLine(504) org.kframework.attributes.Location(Location(504,10,504,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGtwosXuIELEXhyphenGAS, // as-is Gtwos_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH)))
		/* rhs KToken */ constInt1,
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGtwoswordXuIELEXhyphenGAS, // as-is Gtwosword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),SCHED))
		v[40],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),SCHED)))
		v[38],
		v[39],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS247(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 247, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=cmp__,__IELE-COMMON`(_238,_239,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_238),isSchedule(SCHED)),isInt(W1)),isInt(W0)),isPredicate(_239)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fba6613d83c7c2e09b04a4566b682b97563c75ac657eee1a90a41dea8c8cd35d) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcmpXuIELEXhyphenGAS, // as-is Gcmp_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalIntSize( // intSize(W0)
		v[10 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalIntSize( // intSize(W1)
		v[12 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[43],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcmpwordXuIELEXhyphenGAS, // as-is Gcmpword_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),SCHED))
		v[42],
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),SCHED)))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[39],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS252(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 252, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=exp_,__IELE-COMMON`(_223,W0,W1),SCHED)=>`Cexp`(SCHED,intSize(W0),W0,W1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(W1)),isInt(W0)),isLValue(_223)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a9e8d29c2d1e8ddfaf2a2de7fb2e37bcd56a2f2a05c391961c9ef0c38fab114) contentStartColumn(10) contentStartLine(468) org.kframework.attributes.Location(Location(468,10,468,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalCexp( // `Cexp`(SCHED,intSize(W0),W0,W1)
		v[12 /*SCHED*/],
		v[37],
		v[8 /*W0*/],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS258(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 258, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`store_,__IELE-COMMON`(VALUE,INDEX),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(VALUE),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(VALUE),isSchedule(SCHED)),isOperand(INDEX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d685f33d92471c33c23bfe42c51eccfe88f67adcbe0b7d9acdc8f7ff80e1bd5a) contentStartColumn(10) contentStartLine(662) org.kframework.attributes.Location(Location(662,10,662,119)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstorecellXuIELEXhyphenGAS, // as-is Gstorecell_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[6 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstorewordXuIELEXhyphenGAS, // as-is Gstoreword_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(intSize(VALUE),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(VALUE),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[34],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS279(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 279, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`revert__IELE-COMMON`(_301),SCHED)=>#token(\"0\",\"Int\")``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_301),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb5b80f7d94453ecf0545d406a71a2e63efbf4341aac139557464bf90af1a820) contentStartColumn(10) contentStartLine(610) org.kframework.attributes.Location(Location(610,10,610,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				/* rhs KToken */ m.IntZero,
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS284(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 284, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(VALUE,INDEX,OFFSET,WIDTH),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),isInt(WIDTH)),isSchedule(SCHED)),isOperand(OFFSET)),isOperand(INDEX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1e9281dfdf877cab45f5a636ae897e2bd86cab3c80984a23020bda28562664ae) contentStartColumn(10) contentStartLine(663) org.kframework.attributes.Location(Location(663,10,663,137)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstoreXuIELEXhyphenGAS, // as-is Gstore_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalBytesInWords( // bytesInWords(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstorewordXuIELEXhyphenGAS, // as-is Gstoreword_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED))
		v[43],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))
		v[41],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[40],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS291(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 291, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`br_,__IELE-COMMON`(_264,_265),SCHED)=>`_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_264),isSchedule(SCHED)),isIeleName(_265)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e5b250ef0820ee2d3f2488d9df26677e8c39b75abfb6786a1e10802e3ec2b97) contentStartColumn(10) contentStartLine(572) org.kframework.attributes.Location(Location(572,10,572,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbrcondXuIELEXhyphenGAS, // as-is Gbrcond_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[35],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS293(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 293, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(_283),SCHED)=>#token(\"0\",\"Int\")``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isNonEmptyInts(_283),isSchedule(SCHED)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ae77506f1c7d254b758bd713119d8ece290c4314bc1bf44cc215a2c682a607b3) contentStartColumn(10) contentStartLine(604) org.kframework.attributes.Location(Location(604,10,606,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				/* rhs KToken */ m.IntZero,
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[92],
				),
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				v[55 /*_8*/],
				v[57 /*_9*/],
				v[59 /*_10*/],
				v[61 /*_11*/],
				v[63 /*_12*/],
				v[65 /*_13*/],
			),
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
			v[85 /*_27*/],
		),
		v[87 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS455(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 455, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(_142),SCHED)=>#token(\"0\",\"Int\")``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_142)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(773bb74e4f197caa91c6d447ccb12612df544631b403206ffce7bb142f023115) contentStartColumn(10) contentStartLine(608) org.kframework.attributes.Location(Location(608,10,609,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				/* rhs KToken */ m.IntZero,
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS629(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 629, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(ARGS),SCHED)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),#sizeRegs(ARGS)),#token(\"8\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(_178),DotVar4)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyInts(ARGS),isSchedule(SCHED)),isKItem(_178)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(732a9f2370d0a17f8ed1485606df869853ee4d65ec0ea4ccfbf2d029ee9feda6) contentStartColumn(10) contentStartLine(601) org.kframework.attributes.Location(Location(601,10,603,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[97], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[8 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[6 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),#sizeRegs(ARGS))
		v[97],
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),#sizeRegs(ARGS)),#token("8","Int"))
		v[96],
		/* rhs KToken */ constInt8,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalListItem( // `ListItem`(_178)
		v[44 /*_178*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(_178),DotVar4)
		v[101],
		v[45 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[95],
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[99],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[100],
				),
				v[47 /*_2*/],
				v[49 /*_3*/],
				v[51 /*_4*/],
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS325(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 325, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=div_,__IELE-COMMON`(_232,W0,W1),SCHED)=>`Cdiv`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_232),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0bd25b369a1fcdd87c2aa70732481c0d014641bf021182d1f86b231d1a788068) contentStartColumn(10) contentStartLine(466) org.kframework.attributes.Location(Location(466,10,466,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalCdiv( // `Cdiv`(SCHED,intSize(W0),intSize(W1))
		v[12 /*SCHED*/],
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS335(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 335, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load_,_,__IELE-COMMON`(_155,INDEX,OFFSET,WIDTH),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isSchedule(SCHED)),isOperand(OFFSET)),isOperand(INDEX)),isLValue(_155)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2623170bdd86f653439e41d431938f82c9ed24fa6310bab5b3c9bd0771bf723f) contentStartColumn(10) contentStartLine(660) org.kframework.attributes.Location(Location(660,10,660,130)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGloadXuIELEXhyphenGAS, // as-is Gload_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalBytesInWords( // bytesInWords(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGloadwordXuIELEXhyphenGAS, // as-is Gloadword_IELE-GAS
		),
		v[14 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED))
		v[43],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))
		v[41],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[40],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS362(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 362, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sext_,__IELE-COMMON`(_254,WIDTH,_255),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_255),isLValue(_254)),isInt(WIDTH)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5a60916d7fd4084ca5572381b822102f7ec4995be0d49d4b461e6b847f80a4a6) contentStartColumn(10) contentStartLine(505) org.kframework.attributes.Location(Location(505,10,505,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsextXuIELEXhyphenGAS, // as-is Gsext_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH)))
		/* rhs KToken */ constInt1,
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsextwordXuIELEXhyphenGAS, // as-is Gsextword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),SCHED))
		v[40],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),SCHED)))
		v[38],
		v[39],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[37],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS372(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 372, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=add_,__IELE-COMMON`(_184,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(W1)),isLValue(_184)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(985a739ab95d50852c6232cf3a598fca1964ced68ef65526ac27fed60f401679) contentStartColumn(10) contentStartLine(463) org.kframework.attributes.Location(Location(463,10,463,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddXuIELEXhyphenGAS, // as-is Gadd_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGaddwordXuIELEXhyphenGAS, // as-is Gaddword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS394(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 394, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mulmod_,_,__IELE-COMMON`(_218,W0,W1,W2),SCHED)=>`_+Int_`(`Cmul`(SCHED,intSize(W0),intSize(W1)),`Cdiv`(SCHED,`_+Int_`(intSize(W0),intSize(W1)),intSize(W2)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isInt(W1)),isLValue(_218)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f64b7e08039007710d95d620b41146b5f567b41856581f01fdcd45a26d93226b) contentStartColumn(10) contentStartLine(480) org.kframework.attributes.Location(Location(480,10,480,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalCmul( // `Cmul`(SCHED,intSize(W0),intSize(W1))
		v[14 /*SCHED*/],
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(intSize(W0),intSize(W1))
		v[44],
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalCdiv( // `Cdiv`(SCHED,`_+Int_`(intSize(W0),intSize(W1)),intSize(W2))
		v[14 /*SCHED*/],
		v[43],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`Cmul`(SCHED,intSize(W0),intSize(W1)),`Cdiv`(SCHED,`_+Int_`(intSize(W0),intSize(W1)),intSize(W2)))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS398(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 398, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=shift_,__IELE-COMMON`(_161,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_161),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fabea1db37698e50452196e3bdcaba0be30fe5afde91f7fe6868633cac3bddb) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwiseXuIELEXhyphenGAS, // as-is Gbitwise_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalBitsInWords( // bitsInWords(W1,SCHED)
		v[10 /*W1*/],
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(intSize(W0),bitsInWords(W1,SCHED))
		v[41],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED)))
		/* rhs KToken */ constInt1,
		v[40],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwisewordXuIELEXhyphenGAS, // as-is Gbitwiseword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS424(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 424, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(_285,RETS),_286,ACCTTO,ARGS,GCAP),SCHED)=>`Ccall`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,#token(\"0\",\"Int\"),#sizeLVals(RETS),`Ccallarg`(SCHED,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isLValue(_285)),isOperand(_286)),isLValues(RETS)),isOperands(ARGS)),isInt(ACCTTO)),isSchedule(SCHED)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4bb7fa8d37090ef99476088c41df0d1b19004c369b43a83b6e04eff3e8775bd9) contentStartColumn(10) contentStartLine(625) org.kframework.attributes.Location(Location(625,10,626,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[19 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[17 /*GCAP*/],
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(RETS)
		v[9 /*RETS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[19 /*SCHED*/],
		v[15 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCcall, // as-is Ccall
					v[19 /*SCHED*/],
					i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
						v[13 /*ACCTTO*/],
					),
					v[105],
					v[73 /*GAVAIL*/],
					/* rhs KToken */ m.IntZero,
					v[107],
					v[108],
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[109],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_28*/],
		v[30 /*_29*/],
		v[32 /*_30*/],
		v[34 /*_31*/],
		v[36 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[39 /*_14*/],
			v[41 /*_15*/],
			v[43 /*_16*/],
			v[45 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[48 /*_0*/],
				v[50 /*_1*/],
				v[52 /*_2*/],
				v[54 /*_3*/],
				v[56 /*_4*/],
				v[58 /*_5*/],
				v[60 /*_6*/],
				v[62 /*_7*/],
				v[64 /*_8*/],
				v[66 /*_9*/],
				v[68 /*_10*/],
				v[70 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[73 /*GAVAIL*/],
				),
				v[75 /*_12*/],
				v[77 /*_13*/],
			),
			v[79 /*_18*/],
			v[81 /*_19*/],
			v[83 /*_20*/],
			v[85 /*_21*/],
			v[87 /*_22*/],
			v[89 /*_23*/],
			v[91 /*_24*/],
			v[93 /*_25*/],
			v[95 /*_26*/],
			v[97 /*_27*/],
		),
		v[99 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS448(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 448, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ID_IELE-PRECOMPILED`(.KList),SCHED)=>#token(\"0\",\"Int\")``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(81946d17d5377f7f954e34a39aaf39b92d2b1ed2936e2d9208b494ce775fa224) contentStartColumn(10) contentStartLine(731) org.kframework.attributes.Location(Location(731,10,731,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				/* rhs KToken */ m.IntZero,
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS454(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 454, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=xor_,__IELE-COMMON`(_182,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_182),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3158a0acbe6cde330499dd994c8ef2758556ba6e08d655d61588eec17ce43be4) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGnotXuIELEXhyphenGAS, // as-is Gnot_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGnotwordXuIELEXhyphenGAS, // as-is Gnotword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS464(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 464, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mul_,__IELE-COMMON`(_282,W0,W1),SCHED)=>`Cmul`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_282)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c610b5deccf8d1900032a68228707bf1ba6dcf94cb2d985330ec147d0a38f2a0) contentStartColumn(10) contentStartLine(465) org.kframework.attributes.Location(Location(465,10,465,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalCmul( // `Cmul`(SCHED,intSize(W0),intSize(W1))
		v[12 /*SCHED*/],
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS492(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 492, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=and_,__IELE-COMMON`(_229,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_229),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f5433d4507a34bae5ab33e0ca37e4122815fe6155cead3cc614ddebc83035055) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,135)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwiseXuIELEXhyphenGAS, // as-is Gbitwise_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[40],
		v[41],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbitwisewordXuIELEXhyphenGAS, // as-is Gbitwiseword_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED))
		v[39],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS501(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 501, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=not__IELE-COMMON`(_165,W),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(W),isSchedule(SCHED)),isLValue(_165)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8b77a8fa95960821e92d5d29a2018d755be5b6288ad4b0c927e9c02ef1841513) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGnotXuIELEXhyphenGAS, // as-is Gnot_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalIntSize( // intSize(W)
		v[8 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGnotwordXuIELEXhyphenGAS, // as-is Gnotword_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[34],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS517(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 517, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=expmod_,_,__IELE-COMMON`(_271,W0,W1,W2),SCHED)=>`Cexpmod`(SCHED,intSize(W0),intSize(W1),intSize(W2),W2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_271),isInt(W2)),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fb1aa8ca1254582133f79ecced2c18e4b632c1a648c53ee2ce609148563ea964) contentStartColumn(10) contentStartLine(481) org.kframework.attributes.Location(Location(481,10,481,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[39], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalCexpmod( // `Cexpmod`(SCHED,intSize(W0),intSize(W1),intSize(W2),W2)
		v[14 /*SCHED*/],
		v[39],
		v[40],
		v[41],
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38],
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS599(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 599, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`SHA256_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isSchedule(SCHED)),isInt(DATA)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0f43422b7d4c6b0651a6b9a263ec99dc129738dcc722606d020e4ae2927af7b1) contentStartColumn(10) contentStartLine(729) org.kframework.attributes.Location(Location(729,10,729,185)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[94], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsha256XuIELEXhyphenGAS, // as-is Gsha256_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsha256wordXuIELEXhyphenGAS, // as-is Gsha256word_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalIntSize( // intSize(DATA)
		v[50 /*DATA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(LEN,intSize(DATA))
		v[47 /*LEN*/],
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalBytesInWords( // bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA))))
		v[96],
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))
		v[94],
		v[95],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[93],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		v[23 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[47 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[50 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS606(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 606, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(_138,RETS),_139,ACCTTO,ARGS,VALUE,GCAP),SCHED)=>`Ccall`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,VALUE,#sizeLVals(RETS),`Ccallarg`(SCHED,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isLValue(_138)),isLValues(RETS)),isOperands(ARGS)),isInt(ACCTTO)),isInt(VALUE)),isSchedule(SCHED)),isOperand(_139)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7889944c6de8743f0839141277f74f8a5c1a93063684980e8b1cefbf36c53732) contentStartColumn(10) contentStartLine(622) org.kframework.attributes.Location(Location(622,10,623,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[108], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[21 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[19 /*GCAP*/],
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(RETS)
		v[9 /*RETS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[21 /*SCHED*/],
		v[15 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCcall, // as-is Ccall
					v[21 /*SCHED*/],
					i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
						v[13 /*ACCTTO*/],
					),
					v[107],
					v[75 /*GAVAIL*/],
					v[17 /*VALUE*/],
					v[109],
					v[110],
				),
				v[22 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[111],
				v[28 /*SREST*/],
			),
		),
		v[30 /*_28*/],
		v[32 /*_29*/],
		v[34 /*_30*/],
		v[36 /*_31*/],
		v[38 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[41 /*_14*/],
			v[43 /*_15*/],
			v[45 /*_16*/],
			v[47 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[50 /*_0*/],
				v[52 /*_1*/],
				v[54 /*_2*/],
				v[56 /*_3*/],
				v[58 /*_4*/],
				v[60 /*_5*/],
				v[62 /*_6*/],
				v[64 /*_7*/],
				v[66 /*_8*/],
				v[68 /*_9*/],
				v[70 /*_10*/],
				v[72 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[75 /*GAVAIL*/],
				),
				v[77 /*_12*/],
				v[79 /*_13*/],
			),
			v[81 /*_18*/],
			v[83 /*_19*/],
			v[85 /*_20*/],
			v[87 /*_21*/],
			v[89 /*_22*/],
			v[91 /*_23*/],
			v[93 /*_24*/],
			v[95 /*_25*/],
			v[97 /*_26*/],
			v[99 /*_27*/],
		),
		v[101 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS619(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 619, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_,_=create_(_)send__IELE-COMMON`(_148,_149,_150,ARGS,_151),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_148),isOperand(_151)),isLValue(_149)),isOperands(ARGS)),isSchedule(SCHED)),isIeleName(_150)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28301454735035aaa9a251abde72c86a4698b12187f2df35ab82772096d71883) contentStartColumn(10) contentStartLine(707) org.kframework.attributes.Location(Location(707,10,707,131)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[45], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcreateXuIELEXhyphenGAS, // as-is Gcreate_IELE-GAS
		),
		v[16 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[16 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalCcallarg( // `Ccallarg`(SCHED,ARGS)
		v[16 /*SCHED*/],
		v[12 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS))
		v[47],
		v[48],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))
		v[45],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[44],
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[49],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS620(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 620, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=iszero__IELE-COMMON`(_159,W),SCHED)=>`_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(_159),isSchedule(SCHED)),isOperand(W)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(896523b16484e83736001c87a64e52e10aae00c189c8c4faa5df0f68bf46d966) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGiszeroXuIELEXhyphenGAS, // as-is Giszero_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[35],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS631(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 631, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECPAIRING_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),SCHED),`_*Int__INT`(LEN,`_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,_166)),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInts(_166)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0dccd1da438cd28b5f9a29c49a0d3a1af489ba0bed0edcbc26c20d1156d5fca) contentStartColumn(10) contentStartLine(735) org.kframework.attributes.Location(Location(735,10,735,146)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGecpairingXuIELEXhyphenGAS, // as-is Gecpairing_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGecpairingpairXuIELEXhyphenGAS, // as-is Gecpairingpair_IELE-GAS
		),
		v[6 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(LEN,`_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),SCHED))
		v[47 /*LEN*/],
		v[95],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),SCHED),`_*Int__INT`(LEN,`_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),SCHED)))
		v[93],
		v[94],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[92],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[96],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		v[23 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[47 /*LEN*/],
						v[49 /*_166*/],
					),
				),
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		v[89 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS639(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 639, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`br__IELE-COMMON`(_233),SCHED)=>`_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isSchedule(SCHED),isIeleName(_233)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e82e2744952015fccd102d67bb1645960e22a49f62428c4258477daea3b339dd) contentStartColumn(10) contentStartLine(571) org.kframework.attributes.Location(Location(571,10,571,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbrXuIELEXhyphenGAS, // as-is Gbr_IELE-GAS
		),
		v[8 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[32],
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS651(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 651, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sha3__IELE-COMMON`(_240,W0),SCHED)=>`_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isLValue(_240)),isSchedule(SCHED)),isMap(LM)),`notBool_`(`_in_keys(_)_MAP`(W0,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a66b3446638a649ef9e34e4f1761b66e5678d79b2790e76b91ed5ad9e7f7ae82) contentStartColumn(10) contentStartLine(492) org.kframework.attributes.Location(Location(492,10,494,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[95], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsha3XuIELEXhyphenGAS, // as-is Gsha3_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[95],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[96],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_28*/],
		v[21 /*_29*/],
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[56 /*LM*/],
				),
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		v[90 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS658(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 658, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=byte_,__IELE-COMMON`(_205,_206,_207),SCHED)=>`_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_205),isSchedule(SCHED)),isOperand(_207)),isOperand(_206)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0565798cc2c15106405e1b04522f8472324e82c8d96ce9793d7d1aa8948798da) contentStartColumn(10) contentStartLine(503) org.kframework.attributes.Location(Location(503,10,503,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGbyteXuIELEXhyphenGAS, // as-is Gbyte_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS4(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 4, "{| rule `<generatedTop>`(`<k>`(`` `_:__IELE-COMMON`(NAME,BLOCK)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_4,_5,`<currentContract>`(_0,_1,_2,_3,`<currentFunction>`(DotVar4,`<labels>`(LABELS=>`_Set_`(LABELS,`SetItem`(NAME))),`<currentInstructions>`(``.K=>BLOCK``~>DotVar5)))),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInstructions(BLOCK)),isSet(LABELS)),`notBool_`(`Set:in`(NAME,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b6ba756b691784aa07920cf3dfd22a4836b7d9fa94120edd35d6e27ce8a017fe) contentStartColumn(10) contentStartLine(173) org.kframework.attributes.Location(Location(173,10,177,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[52], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
		v[5 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalXuSetXu( // `_Set_`(LABELS,`SetItem`(NAME))
		v[40 /*LABELS*/],
		v[52],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		v[10 /*_6*/],
		v[12 /*_7*/],
		v[14 /*_8*/],
		v[16 /*_9*/],
		v[18 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[23 /*_4*/],
			v[25 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[28 /*_0*/],
				v[30 /*_1*/],
				v[32 /*_2*/],
				v[34 /*_3*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					v[37 /*DotVar4*/],
					i.Model.NewKApply(m.LblXltlabelsXgt, // as-is <labels>
						v[51],
					),
					i.Model.NewKApply(m.LblXltcurrentInstructionsXgt, // as-is <currentInstructions>
						i.Model.AssembleKSequence(
							v[7 /*BLOCK*/],
							v[43 /*DotVar5*/],
						),
					),
				),
			),
		),
		v[45 /*_11*/],
		v[47 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS5(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 5, "{| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bd9d06e55d05f59cf4084842c2c77308d0b193084de782ec8d31fb1f8d9f2ff2) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=mulmod_,_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS605(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 605, "{| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d584829d0f49b682da2c3c0718ea3c6eeffba546de338215a3aaefc2255d406e) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=mulmod_,_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS259(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 259, "{| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_2`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad9b97fb980624095e0349db285bf9ee452458b947df577b310386989fb03da2) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=mulmod_,_,__IELE-COMMON1_2
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS7(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 7, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"logs\\\"\",\"String\"),LOGS),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(LOGS),isJSONKey(TESTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04ee9b9c9635a054a7b2d42a66d0215c3bb2c68dba681df7802dca0434210f10) contentStartColumn(10) contentStartLine(603) org.kframework.attributes.Location(Location(603,10,603,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[14 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS211(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 211, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"results\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(_776,`_,__IELE-DATA`(A,REST))=>`_,__IELE-DATA`(A,REST))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isJSON(A),isJSONKey(TESTID)),isJSON(_776)),isJSONList(REST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(544e164ab03680175e538398a4c8e0e902ce2f73d2cc79a65989d1cd6cf2b6c5) contentStartColumn(10) contentStartLine(593) org.kframework.attributes.Location(Location(593,10,593,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquoteresultsXquote,
									i.Model.NewKApply(m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, // as-is [_]_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											v[17 /*A*/],
											v[19 /*REST*/],
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[21 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[27 /*SREST*/],
			),
		),
		v[29 /*_0*/],
		v[31 /*_1*/],
		v[33 /*_2*/],
		v[35 /*_3*/],
		v[37 /*_4*/],
		v[39 /*_5*/],
		v[41 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS226(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 226, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"results\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(A,`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,A))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(A),isJSONKey(TESTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c21f8daffb01483bd7928a18f692dcb6b6d23594d71c9b97ad92a1156836deee) contentStartColumn(10) contentStartLine(594) org.kframework.attributes.Location(Location(594,10,594,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						v[14 /*A*/],
					),
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS35(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 35, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GLEFT))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,`<checkGas>`(#token(\"false\",\"Bool\")),_3,_4,_5) requires isJSON(GLEFT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c4662afff2ea8985aa26a82ee56896b9c250d8f1f458a1434cb524db99b1f98f) contentStartColumn(10) contentStartLine(630) org.kframework.attributes.Location(Location(630,10,630,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		i.Model.NewKApply(m.LblXltcheckGasXgt, // as-is <checkGas>
			/* rhs KToken */ m.BoolFalse,
		),
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS187(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 187, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GLEFT=>#parseWord(GLEFT)))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(GLEFT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(afb2f991464665f26962a9e8b8c635a8b2b61c10b22749c2a3cd4334357bce2a) contentStartColumn(10) contentStartLine(629) org.kframework.attributes.Location(Location(629,10,629,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashparseWord( // #parseWord(GLEFT)
		v[7 /*GLEFT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegasXquote,
						v[29],
					),
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS627(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 627, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GLEFT))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,`<checkGas>`(#token(\"true\",\"Bool\")),_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GLEFT),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_32) requires isInt(GLEFT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d855c308f9bba705923dcd9ee52c5315ccb9f4f4b37e0cdde864302de3edf0f5) contentStartColumn(10) contentStartLine(631) org.kframework.attributes.Location(Location(631,10,631,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[87], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[87],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		i.Model.NewKApply(m.LblXltcheckGasXgt, // as-is <checkGas>
			/* rhs KToken */ m.BoolTrue,
		),
		v[24 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			v[33 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				v[52 /*_8*/],
				v[54 /*_9*/],
				v[56 /*_10*/],
				v[58 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[7 /*GLEFT*/],
				),
				v[62 /*_12*/],
				v[64 /*_13*/],
			),
			v[66 /*_18*/],
			v[68 /*_19*/],
			v[70 /*_20*/],
			v[72 /*_21*/],
			v[74 /*_22*/],
			v[76 /*_23*/],
			v[78 /*_24*/],
			v[80 /*_25*/],
			v[82 /*_26*/],
			v[84 /*_27*/],
		),
		v[86 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS61(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 61, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(VAL),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2ba038aeaf8030d38959087555dd853c3d80e284d50b5a9578e0e37e23403147) contentStartColumn(10) contentStartLine(549) org.kframework.attributes.Location(Location(549,10,549,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[16 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotenonceXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS69(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 69, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE=>#parseByteStack(CODE)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(ACCT),isString(CODE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(03dc9e0885f7b7020c1ee7beb1bdd041dcf6125d8246a94b10535cb47a0c4e96) contentStartColumn(10) contentStartLine(550) org.kframework.attributes.Location(Location(550,10,550,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseByteStack( // #parseByteStack(CODE)
		v[16 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotecodeXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS186(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 186, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"balance\\\"\",\"String\"),VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(VAL),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9113f8e6fc1cd47ce6ebc0041b9fd2557743a768dc31cabd2ec7fd345fcd713f) contentStartColumn(10) contentStartLine(548) org.kframework.attributes.Location(Location(548,10,548,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[16 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotebalanceXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS304(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 304, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"storage\\\"\",\"String\"),`{_}_IELE-DATA`(STORAGE)=>#parseMap(`{_}_IELE-DATA`(STORAGE))),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSONList(STORAGE),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1c4b52ff318feb4c4703705a06ceded7ed8c297add66bd969bb962c5ee06016b) contentStartColumn(10) contentStartLine(551) org.kframework.attributes.Location(Location(551,10,551,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[42], i.evalErr = i.evalXhashparseMap( // #parseMap(`{_}_IELE-DATA`(STORAGE))
		i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
			v[17 /*STORAGE*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotestorageXquote,
												v[42],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_0*/],
		v[30 /*_1*/],
		v[32 /*_2*/],
		v[34 /*_3*/],
		v[36 /*_4*/],
		v[38 /*_5*/],
		v[40 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS336(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 336, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID=>#parseAddr(ACCTID),ACCT),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(ACCT),isString(ACCTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(34be3fa6d834a1fa3f0b3f504d75c1a957b68680709ed2b85581715c6d89bea9) contentStartColumn(10) contentStartLine(547) org.kframework.attributes.Location(Location(547,10,547,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashparseAddr( // #parseAddr(ACCTID)
		v[10 /*ACCTID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[36],
									v[12 /*ACCT*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS593(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 593, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(REST)),`.List{\"_,__IELE-DATA\"}`(.KList)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSONKey(ACCTID)),isJSONList(REST)),isJSON(VALUE)),`_=/=K_`(REST,`.List{\"_,__IELE-DATA\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51e60cabc6436da46bd384f21fd9a511cf3951a5aec0a57d7ab9f56e46e6638e) contentStartColumn(10) contentStartLine(545) org.kframework.attributes.Location(Location(545,10,545,184)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCTID*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												v[15 /*KEY*/],
												v[17 /*VALUE*/],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCTID*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										v[19 /*REST*/],
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[21 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[27 /*SREST*/],
			),
		),
		v[29 /*_0*/],
		v[31 /*_1*/],
		v[33 /*_2*/],
		v[35 /*_3*/],
		v[37 /*_4*/],
		v[39 /*_5*/],
		v[41 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS76(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 76, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"status\\\"\",\"String\"),STATUS),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"status\\\"\",\"String\"),STATUS))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(STATUS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9e3aab8309949377316228995855c2580aa6a9d43b1cb9d9b22170cb8ff1dfe4) contentStartColumn(10) contentStartLine(607) org.kframework.attributes.Location(Location(607,10,607,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotestatusXquote,
						v[12 /*STATUS*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS95(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 95, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"callcreates\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"data\\\"\",\"String\"),DATA),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"destination\\\"\",\"String\"),ACCTTO),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasLimit\\\"\",\"String\"),GLIMIT),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"value\\\"\",\"String\"),VAL),`.List{\"_,__IELE-DATA\"}`(.KList))))))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(VAL),isString(ACCTTO)),isString(DATA)),isString(GLIMIT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d437a1cdc6c5bb2c1daa4242bfd7e4bd9ca83294846b94949badb5bf2d9c0828) contentStartColumn(10) contentStartLine(635) org.kframework.attributes.Location(Location(635,10,636,11)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[49], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[28 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[49],
				v[34 /*SREST*/],
			),
		),
		v[36 /*_0*/],
		v[38 /*_1*/],
		v[40 /*_2*/],
		v[42 /*_3*/],
		v[44 /*_4*/],
		v[46 /*_5*/],
		v[48 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS116(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 116, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"refund\\\"\",\"String\"),REFUND))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_2,_3,_4,_5,_6,`<substate>`(_0,_1,`<refund>`(REFUND)),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires isInt(REFUND) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bcb9fef587a545768d44723c6206c4b872937c9b2220455e0b266b874fef9442) contentStartColumn(10) contentStartLine(615) org.kframework.attributes.Location(Location(615,10,615,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[63], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[63],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_16*/],
		v[18 /*_17*/],
		v[20 /*_18*/],
		v[22 /*_19*/],
		v[24 /*_20*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_2*/],
			v[29 /*_3*/],
			v[31 /*_4*/],
			v[33 /*_5*/],
			v[35 /*_6*/],
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[38 /*_0*/],
				v[40 /*_1*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					v[7 /*REFUND*/],
				),
			),
			v[44 /*_7*/],
			v[46 /*_8*/],
			v[48 /*_9*/],
			v[50 /*_10*/],
			v[52 /*_11*/],
			v[54 /*_12*/],
			v[56 /*_13*/],
			v[58 /*_14*/],
			v[60 /*_15*/],
		),
		v[62 /*_21*/],
	), nil
}

func (i *Interpreter) stepRHS303(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 303, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"refund\\\"\",\"String\"),REFUND=>#parseHexWord(REFUND)))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(REFUND) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6c3c25398b81607c7f3ac24c29c375bf23ae4ee6cb9c5ac00e3863eac08058ab) contentStartColumn(10) contentStartLine(614) org.kframework.attributes.Location(Location(614,10,614,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(REFUND)
		v[7 /*REFUND*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoterefundXquote,
						v[29],
					),
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS118(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 118, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(DATA),`_andBool_`(`_=/=String__STRING`(DATA,#token(\"\\\"ommerHeaders\\\"\",\"String\")),`_=/=String__STRING`(DATA,#token(\"\\\"out\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(269144473b94e19395fafe4e3972662a3c914be2591d3921d44df2e5b388b328) contentStartColumn(10) contentStartLine(538) org.kframework.attributes.Location(Location(538,10,538,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS128(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 128, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),BLOCKHEADER),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),BLOCKHEADER))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(BLOCKHEADER)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e777395e2e3255c5091db2da07c2e624378dea14daef3a0b64c95527a6ba24e5) contentStartColumn(10) contentStartLine(638) org.kframework.attributes.Location(Location(638,10,638,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegenesisBlockHeaderXquote,
						v[12 /*BLOCKHEADER*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS146(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 146, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"post\\\"\",\"String\"),POST),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),POST))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(POST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(425eb3a755748682f6d8e9cbd82841977815ab34e5ae8192d8498c2f5fc3e6dc) contentStartColumn(10) contentStartLine(544) org.kframework.attributes.Location(Location(544,10,544,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						v[12 /*POST*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS195(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 195, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"hash\\\"\",\"String\"),HASH=>#parseHexWord(HASH)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HASH) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c92a48974a85e3784b891be8fd452cfe68295bbc8490fe6c6923909eb9bf0187) contentStartColumn(10) contentStartLine(643) org.kframework.attributes.Location(Location(643,10,643,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HASH)
		v[11 /*HASH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegenesisBlockHeaderXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquotehashXquote,
									v[34],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS216(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 216, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(KEY),isJSON(VALUE)),`_=/=String__STRING`(KEY,#token(\"\\\"hash\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(208bf2274ac3dca13c21bfb52a69ad4b7a71e3b9c2a11c112bf3a7e5e9894b5d) contentStartColumn(10) contentStartLine(641) org.kframework.attributes.Location(Location(641,10,641,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[14 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS444(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 444, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSONList(REST)),isJSON(VALUE)),`_=/=K_`(REST,`.List{\"_,__IELE-DATA\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dff4f38bcc6d66c41e99a714a04d0ccc868c0a6f12d80a51d2cb9b6ae461a552) contentStartColumn(10) contentStartLine(640) org.kframework.attributes.Location(Location(640,10,640,179)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegenesisBlockHeaderXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*KEY*/],
									v[12 /*VALUE*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegenesisBlockHeaderXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[14 /*REST*/],
						),
					),
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS208(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 208, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),OUT))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(operandList(OUT,`.List{\"operandList\"}`(.KList))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires isInt(OUT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7fa15eb714639c1c99d2d5003fec28f8a70ee1179ccb44fb76b6fcc29ea0bb1f) contentStartColumn(10) contentStartLine(599) org.kframework.attributes.Location(Location(599,10,599,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[60], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[60],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_14*/],
		v[18 /*_15*/],
		v[20 /*_16*/],
		v[22 /*_17*/],
		v[24 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblOperandList, // as-is operandList
					v[7 /*OUT*/],
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
			),
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			v[51 /*_10*/],
			v[53 /*_11*/],
			v[55 /*_12*/],
			v[57 /*_13*/],
		),
		v[59 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS441(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 441, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),OUT=>#parseHexWord(OUT)))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(OUT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5c6311cc71d8254d7b757203eaabb37baf192f8d521a26a400d228d4ae6792bd) contentStartColumn(10) contentStartLine(598) org.kframework.attributes.Location(Location(598,10,598,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(OUT)
		v[7 /*OUT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteoutXquote,
						v[29],
					),
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS573(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 573, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),`[_]_IELE-DATA`(OUT)))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(OUTPUT),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(isInts(OUTPUT),isJSONList(OUT)),`_==K_`(#toInts(OUT),OUTPUT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(808c238720b2152b0fb38b9f8a9f240a80ee43783eeab21e1b367bb5170bf5a1) contentStartColumn(10) contentStartLine(601) org.kframework.attributes.Location(Location(601,10,601,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_14*/],
		v[19 /*_15*/],
		v[21 /*_16*/],
		v[23 /*_17*/],
		v[25 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[29 /*OUTPUT*/],
			),
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			v[51 /*_10*/],
			v[53 /*_11*/],
			v[55 /*_12*/],
			v[57 /*_13*/],
		),
		v[59 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS623(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 623, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),_137))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(`.List{\"operandList\"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_==Int_`(_137,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c022100e893ca0b8adef91c52c92f0fe2d625d76a207d50d166b8dd6b59058b1) contentStartColumn(10) contentStartLine(600) org.kframework.attributes.Location(Location(600,10,600,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[59], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[59],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_14*/],
		v[18 /*_15*/],
		v[20 /*_16*/],
		v[22 /*_17*/],
		v[24 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[29 /*_0*/],
			v[31 /*_1*/],
			v[33 /*_2*/],
			v[35 /*_3*/],
			v[37 /*_4*/],
			v[39 /*_5*/],
			v[41 /*_6*/],
			v[43 /*_7*/],
			v[45 /*_8*/],
			v[47 /*_9*/],
			v[49 /*_10*/],
			v[51 /*_11*/],
			v[53 /*_12*/],
			v[55 /*_13*/],
		),
		v[57 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS238(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 238, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(`_,__IELE-DATA`(`{_}_IELE-DATA`(TEST),REST))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(TEST)))~>`check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(DATA),isJSONList(REST)),isJSONList(TEST)),`_=/=String__STRING`(DATA,#token(\"\\\"transactions\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9604ab5d3c3e6ff90aca5acf552e8efb6db1c04fd915e85b8c61c3674b48ec59) contentStartColumn(10) contentStartLine(539) org.kframework.attributes.Location(Location(539,10,539,131)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[11 /*TEST*/],
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, // as-is [_]_IELE-DATA
							v[13 /*REST*/],
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS262(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 262, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"status\\\"\",\"String\"),STATUS))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isArray(REGS),isInt(STATUS)),`_==K_`(`_[_]_ARRAY-SYNTAX`(REGS,#token(\"0\",\"Int\")),STATUS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5b7b35f554198a3d2ea255597485c833d1f255e5cfbf3f6077d87f3a49634aa9) contentStartColumn(10) contentStartLine(610) org.kframework.attributes.Location(Location(610,10,610,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[90], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[90],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		v[24 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			v[33 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[51 /*REGS*/],
				),
				v[53 /*_7*/],
				v[55 /*_8*/],
				v[57 /*_9*/],
				v[59 /*_10*/],
				v[61 /*_11*/],
				v[63 /*_12*/],
				v[65 /*_13*/],
			),
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
			v[85 /*_27*/],
		),
		v[87 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS673(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 673, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"status\\\"\",\"String\"),STATUS=>#parseHexWord(STATUS)))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(STATUS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c970fd3afa1ced5ba9586ce0024f278b539a47af24791035d2c68436788250b) contentStartColumn(10) contentStartLine(609) org.kframework.attributes.Location(Location(609,10,609,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(STATUS)
		v[7 /*STATUS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotestatusXquote,
						v[29],
					),
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS310(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 310, "{| rule `<generatedTop>`(`<k>`(`check__IELE-TESTING`(`_:__IELE-DATA`(KEY,`{_}_IELE-DATA`(JS=>#sortJSONList(JS))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(KEY),isJSONList(JS)),`_andBool_`(`Set:in`(KEY,`SetItem`(#token(\"\\\"callcreates\\\"\",\"String\"))),`notBool_`(#isSorted(JS)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ef41b9bf5abfc879dd1614ad7e7c7e5bbb5d471b9aa5cf25bbea4029b4402b9b) contentStartColumn(10) contentStartLine(541) org.kframework.attributes.Location(Location(541,10,542,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXhashsortJSONList( // #sortJSONList(JS)
		v[9 /*JS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*KEY*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[35],
						),
					),
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS315(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 315, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>`check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(KEY),isJSONKey(DATA)),isJSONList(REST)),isJSON(VALUE)),`_andBool_`(`_=/=K_`(REST,`.List{\"_,__IELE-DATA\"}`(.KList)),`notBool_`(`Set:in`(DATA,`_Set_`(`SetItem`(#token(\"\\\"callcreates\\\"\",\"String\")),`SetItem`(#token(\"\\\"transactions\\\"\",\"String\"))))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3651b784f1ec835e913b5d90f50772815b3407df7b747a00cbd6b5cdf019a0a1) contentStartColumn(10) contentStartLine(535) org.kframework.attributes.Location(Location(535,10,536,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[11 /*KEY*/],
									v[13 /*VALUE*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS366(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 366, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"refund\\\"\",\"String\"),REFUND),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"refund\\\"\",\"String\"),REFUND))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(REFUND),isString(TESTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(346737f8c5a19fb384253deabbc3ef3d4a63559878aa5b938a33d816afcb6f84) contentStartColumn(10) contentStartLine(612) org.kframework.attributes.Location(Location(612,10,612,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoterefundXquote,
						v[12 /*REFUND*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS519(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 519, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GLEFT),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GLEFT))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(GLEFT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ec33c0492db89d4e47fc68a05d765bb0f6cf4851bfb01b77ef8c1f81e2d63cb6) contentStartColumn(10) contentStartLine(627) org.kframework.attributes.Location(Location(627,10,627,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotegasXquote,
						v[12 /*GLEFT*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS558(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 558, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),OUT),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"out\\\"\",\"String\"),OUT))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(OUT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a36770a6f2e424d789b1267f5eb935092c14eea2cea2e201dee106c66d785621) contentStartColumn(10) contentStartLine(596) org.kframework.attributes.Location(Location(596,10,596,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteoutXquote,
						v[12 /*OUT*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS608(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 608, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"callcreates\\\"\",\"String\"),CCREATES),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"callcreates\\\"\",\"String\"),CCREATES))~>`failure__IELE-TESTING`(TESTID)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(TESTID),isJSON(CCREATES)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6d1c889124ca6935152c7a3cc8105b7652078ff2afbd8f585ad67f4a58b7c8eb) contentStartColumn(10) contentStartLine(633) org.kframework.attributes.Location(Location(633,10,633,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotecallcreatesXquote,
						v[12 /*CCREATES*/],
					),
				),
				i.Model.NewKApply(m.LblFailureXuXuIELEXhyphenTESTING, // as-is failure__IELE-TESTING
					v[6 /*TESTID*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS672(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 672, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(DATA),`_=/=String__STRING`(DATA,#token(\"\\\"transactions\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(165501e0eb72eea211efa471d22b5b1c3a8d544f76383b72dd2c1765a1caa9cb) contentStartColumn(10) contentStartLine(534) org.kframework.attributes.Location(Location(534,10,534,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS8(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 8, "{| rule `<generatedTop>`(`<k>`(`` `externalcontract__IELE-COMMON`(NAME)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,_5,`<contracts>`(CONTRACTS),`<currentContract>`(_0,_1,`<declaredContracts>`(DECLARED=>`_Set_`(DECLARED,`SetItem`(NAME))),_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSet(CONTRACTS)),isSet(DECLARED)),`_andBool_`(`Set:in`(NAME,CONTRACTS),`notBool_`(`Set:in`(NAME,DECLARED)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1cddbf059f81fc67c906df07ba38c31adb64d2b0fc205acfb965f86bc6ae20cb) contentStartColumn(10) contentStartLine(104) org.kframework.attributes.Location(Location(104,10,107,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[45], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
		v[5 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuSetXu( // `_Set_`(DECLARED,`SetItem`(NAME))
		v[32 /*DECLARED*/],
		v[45],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		v[8 /*_6*/],
		v[10 /*_7*/],
		v[12 /*_8*/],
		v[14 /*_9*/],
		v[16 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[19 /*_4*/],
			v[21 /*_5*/],
			i.Model.NewKApply(m.LblXltcontractsXgt, // as-is <contracts>
				v[24 /*CONTRACTS*/],
			),
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[27 /*_0*/],
				v[29 /*_1*/],
				i.Model.NewKApply(m.LblXltdeclaredContractsXgt, // as-is <declaredContracts>
					v[44],
				),
				v[34 /*_2*/],
				v[36 /*_3*/],
			),
		),
		v[38 /*_11*/],
		v[40 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS11(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 11, "{| rule `<generatedTop>`(`<k>`(`` `.IELESimulation_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f0e62572743b28e0ea2a05c6405b32b42d7ea943d8a544df8fc487d9306cef43) contentStartColumn(10) contentStartLine(34) org.kframework.attributes.Location(Location(34,10,34,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[25], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[25],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS13(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 13, "{| rule `<generatedTop>`(`<k>`(`` `#popSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_19,_20,_21,_22,_23,`<iele>`(_6,_7,_8,`<substateStack>`(`_List_`(`ListItem`(`<substate>`(_3,_4,_5)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_9,`<substate>`(_0=>_3,_1=>_4,_2=>_5),_10,_11,_12,_13,_14,_15,_16,_17,_18),_24) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isSelfDestructCell(_3)),isRefundCell(_5)),isLogDataCell(_4)),`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9f00544db66dd3bcb8c79ef277b8afa31398aea3d781973d0c5d246e255b4398) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,309,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[74], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[76], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[75], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[76],
		v[38 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[74],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_19*/],
		v[14 /*_20*/],
		v[16 /*_21*/],
		v[18 /*_22*/],
		v[20 /*_23*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_6*/],
			v[25 /*_7*/],
			v[27 /*_8*/],
			i.Model.NewKApply(m.LblXltsubstateStackXgt, // as-is <substateStack>
				v[75],
			),
			v[40 /*_9*/],
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[33 /*_3*/],
				v[35 /*_4*/],
				v[37 /*_5*/],
			),
			v[49 /*_10*/],
			v[51 /*_11*/],
			v[53 /*_12*/],
			v[55 /*_13*/],
			v[57 /*_14*/],
			v[59 /*_15*/],
			v[61 /*_16*/],
			v[63 /*_17*/],
			v[65 /*_18*/],
		),
		v[67 /*_24*/],
	), nil
}

func (i *Interpreter) stepRHS15(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 15, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.blockhash\",\"IeleName\")),_281))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isOperands(_281),isSchedule(SCHED)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6c4115f47737137e3c714dceb0be65ba4b7de7954280640cb30fbd1f0b84aaa) contentStartColumn(10) contentStartLine(187) org.kframework.attributes.Location(Location(187,10,187,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[26 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[38],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[26 /*SCHED*/],
		),
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS99(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 99, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),_194))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isOperands(_194)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab2a62007d0fd50ff4835a7ec8a53302743df6ed7a73461e6c6bbc38b6b47fb8) contentStartColumn(10) contentStartLine(168) org.kframework.attributes.Location(Location(168,10,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS230(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 230, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.caller\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token(\"20\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(734a10f3e4e20a23f8937d7625087ac2ea059a46ceddd81ba0553bc9e55fb9a2) contentStartColumn(10) contentStartLine(178) org.kframework.attributes.Location(Location(178,10,178,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(#token("20","Int"))
		/* rhs KToken */ constInt20,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[34],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS237(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 237, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.callvalue\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(328e6f4786b36dc12b2276d085c619745b62085e91fbfce6380489abbd45208c) contentStartColumn(10) contentStartLine(186) org.kframework.attributes.Location(Location(186,10,186,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[25 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[36],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[25 /*SCHED*/],
		),
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS290(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 290, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.codesize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6c90b6daf7a0f78324e96697eafff6981de3c16b1228e2cac49f5c38a1d28dd) contentStartColumn(10) contentStartLine(167) org.kframework.attributes.Location(Location(167,10,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS332(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 332, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.address\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token(\"20\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(46051a120d1dca9bb4672ade3223fff3ab1560e448a4224d329223e08fe4230c) contentStartColumn(10) contentStartLine(176) org.kframework.attributes.Location(Location(176,10,176,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(#token("20","Int"))
		/* rhs KToken */ constInt20,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[34],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS342(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 342, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gas\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba487907ca78be8cf2d3f5d3b7b9347c5aaee8d0bbf8d9fb09608884cbb5f2f2) contentStartColumn(10) contentStartLine(162) org.kframework.attributes.Location(Location(162,10,162,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS346(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 346, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.beneficiary\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token(\"20\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2f79a5b7a3c99bbca7eed4ae36b8d5e5dc694ea0b3a173e73c50f4797d75ef21) contentStartColumn(10) contentStartLine(175) org.kframework.attributes.Location(Location(175,10,175,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(#token("20","Int"))
		/* rhs KToken */ constInt20,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[34],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS407(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 407, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.msize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c737765788e487eafebfcb743642901cea9a1f227477915a47a121ad04b7633c) contentStartColumn(10) contentStartLine(166) org.kframework.attributes.Location(Location(166,10,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS470(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 470, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.difficulty\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c3c2ff9a9a0900158403f27337652603a7cca3d3eea201dd30bafb252548b659) contentStartColumn(10) contentStartLine(185) org.kframework.attributes.Location(Location(185,10,185,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[25 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[36],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[25 /*SCHED*/],
		),
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS490(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 490, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.timestamp\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6a4771f74b22d7494fbd2b522a087a4f9fccee6487a812e95073a2a4674502c4) contentStartColumn(10) contentStartLine(184) org.kframework.attributes.Location(Location(184,10,184,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[25 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[36],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[25 /*SCHED*/],
		),
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS509(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 509, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.number\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c2d346d7a465916cb04c0e8d29f1acd530d3de8904d523e01e6fea61a7ff2e83) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS560(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 560, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.origin\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token(\"20\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5645c64a30f1de455876bbc10b180bc2aab84c8b9263b0113b6c931e9793e0a8) contentStartColumn(10) contentStartLine(177) org.kframework.attributes.Location(Location(177,10,177,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(#token("20","Int"))
		/* rhs KToken */ constInt20,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[34],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS569(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 569, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gasprice\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cb7c734cf744d677ebb15b33d40cc7218ec4219e56a75235cb74d9404cdc068a) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,163,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS594(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 594, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),_172))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isOperands(_172),isSchedule(SCHED)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b09472eca15630975e24c5b51cce6265847be17c1346c6889b8fb27757a3266b) contentStartColumn(10) contentStartLine(188) org.kframework.attributes.Location(Location(188,10,188,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[26 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					v[38],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[26 /*SCHED*/],
		),
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS596(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 596, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gaslimit\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6893bae743f0b692611acea5ed6a37a8696ee1a1a0892fa265f2d5fd1f05acb7) contentStartColumn(10) contentStartLine(164) org.kframework.attributes.Location(Location(164,10,164,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[7 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS164(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 164, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_190,IDX,_191))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isLValues(_190)),isMap(LABELS)),isOperands(_191)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1388a285e9a76439b0c5d481b9bd7af0231d9fdc91c5c9aaed6d74d968c1202c) contentStartColumn(10) contentStartLine(218) org.kframework.attributes.Location(Location(218,10,220,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[105], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[11 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[105],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_33*/],
		v[21 /*_34*/],
		v[23 /*_35*/],
		v[25 /*_36*/],
		v[27 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_19*/],
			v[32 /*_20*/],
			v[34 /*_21*/],
			v[36 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[40 /*_0*/],
					v[42 /*_1*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[45 /*LABELS*/],
					),
					v[47 /*_2*/],
					v[49 /*_3*/],
					v[51 /*_4*/],
				),
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
				v[71 /*_14*/],
				v[73 /*_15*/],
				v[75 /*_16*/],
				v[77 /*_17*/],
				v[79 /*_18*/],
			),
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
			v[91 /*_28*/],
			v[93 /*_29*/],
			v[95 /*_30*/],
			v[97 /*_31*/],
			v[99 /*_32*/],
		),
		v[101 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS16(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 16, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECMUL_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2e5874f6fff795e7add24fcc93d1eadc635d5e4a7ba6449a93621b597e9ef77) contentStartColumn(10) contentStartLine(326) org.kframework.attributes.Location(Location(326,10,326,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS25(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 25, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_,_=copycreate_(_)send__IELE-COMMON`(_241,_242,_243,_244,_245))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_243),isLValue(_242)),isOperands(_244)),isOperand(_245)),isLValue(_241)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cdf21ec3e2f343ea15ab1210451c092e0bb60eb85728dffa4df4afc9949db15e) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[15 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS27(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 27, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=byte_,__IELE-COMMON`(REG,INDEX,_210))=>#registerDelta(REG,bytesInWords(#token(\"1\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_210),isLValue(REG)),isOperand(INDEX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2304260006d1500e7459a0e135f90cb0be1dd5b84271276eed82f5992f5eef5c) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalBytesInWords( // bytesInWords(#token("1","Int"))
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[35],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS38(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 38, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6f96857395d4c4e8ceae360c187d9de27f4adb50de2c08daa2a7ec38ade87665) contentStartColumn(10) contentStartLine(327) org.kframework.attributes.Location(Location(327,10,327,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS63(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 63, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ID_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9b3c808ad732f529579169a7adf69d42494b7a852e5e3a364815535338abe4c8) contentStartColumn(10) contentStartLine(324) org.kframework.attributes.Location(Location(324,10,324,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS102(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 102, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=add_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token(\"1\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(44b825c0963e2e7c8251a45facafe0f79bcc88f5a592bb91c3f8d0fd3880cd7c) contentStartColumn(10) contentStartLine(117) org.kframework.attributes.Location(Location(117,10,117,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int"))
		v[34],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS123(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 123, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=log2__IELE-COMMON`(REG,W))=>#registerDelta(REG,#token(\"2\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isOperand(W)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f2e32c54448c50a757ef4409071741ca610fa3aae851187fc8eb7ae537bcd010) contentStartColumn(10) contentStartLine(90) org.kframework.attributes.Location(Location(90,10,90,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					/* rhs KToken */ constInt2,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS133(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 133, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECREC_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4fbeae61d9086e45359343fb30c4da03b2c1cbca64dca8026712c13807ad5ad1) contentStartColumn(10) contentStartLine(321) org.kframework.attributes.Location(Location(321,10,321,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS138(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 138, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load_,_,__IELE-COMMON`(REG,INDEX1,INDEX2,WIDTH))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isLValue(REG)),isOperand(INDEX1)),isOperand(INDEX2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37cd3be549a4c6982c3530a3d8cc711a16e85eee0146ba76f869999e79ebd3c3) contentStartColumn(10) contentStartLine(253) org.kframework.attributes.Location(Location(253,10,253,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalChop( // chop(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[37],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS156(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 156, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`br__IELE-COMMON`(_284))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isIeleName(_284) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f6247e530fa5b70cd0bafbcc97f09bedddc4eaa0b1e8752549744cca7e349a11) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,307,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS219(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 219, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_295,_296,_297,_298,_299,_300))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_300),isOperand(_296)),isLValues(_295)),isOperand(_297)),isOperand(_299)),isOperands(_298)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ea4474a16e33c3f89cf04b112f1446c24db896535abe3d7249b763360a844517) contentStartColumn(10) contentStartLine(316) org.kframework.attributes.Location(Location(316,10,316,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[17 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS223(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 223, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)))=>#registerDelta(DEST,intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isInt(SRC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1e65d99c54872f1fcbc4c5768e7052c942903f63695b40050fbd3b8e198edea8) contentStartColumn(10) contentStartLine(197) org.kframework.attributes.Location(Location(197,10,198,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,SRC)
		v[53 /*REGS*/],
		v[9 /*SRC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))
		v[93],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[91], i.evalErr = i.evalIntSize( // intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC)))
		v[92],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*DEST*/],
					v[91],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_28*/],
		v[20 /*_29*/],
		v[22 /*_30*/],
		v[24 /*_31*/],
		v[26 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_14*/],
			v[31 /*_15*/],
			v[33 /*_16*/],
			v[35 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				v[40 /*_1*/],
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[53 /*REGS*/],
				),
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		v[89 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS556(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 556, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC))=>#registerDelta(DEST,intSize(SRC))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(DEST),isInt(SRC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edbb720ce0feb3d3ef0c12726c645998783b84a4d052626d26060ddbe2dfc878) contentStartColumn(10) contentStartLine(199) org.kframework.attributes.Location(Location(199,10,199,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalIntSize( // intSize(SRC)
		v[8 /*SRC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*DEST*/],
					v[31],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS225(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 225, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=addmod_,_,__IELE-COMMON`(REG,_275,_276,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_276),isInt(W2)),isOperand(_275)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(24f60cdf514246752117655b2ce2a7fe2f735d616adb9b4f7e41276b06f0126f) contentStartColumn(10) contentStartLine(131) org.kframework.attributes.Location(Location(131,10,131,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[37],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS239(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 239, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`SHA256_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d7b69282253288c745d63989af1cd1419c97c97e01e2e1ee8e2e656e4fd4326b) contentStartColumn(10) contentStartLine(322) org.kframework.attributes.Location(Location(322,10,322,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS246(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 246, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sub_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token(\"1\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8da063efe3923f4f39537602c6763d6dba00308781e4fea75d982d8da067d28f) contentStartColumn(10) contentStartLine(118) org.kframework.attributes.Location(Location(118,10,118,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int"))
		v[34],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS322(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 322, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`revert__IELE-COMMON`(_293))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_293) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3998f83714212408225582e2e59025653371188b722410c98e7aa28c2e2ca34a) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS330(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 330, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isInt(W2)),isOperand(W1)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(67f1b0face88b9d3c4bdea853c3adad2267ed4b95695ae3d935b2b73c1384580) contentStartColumn(10) contentStartLine(132) org.kframework.attributes.Location(Location(132,10,132,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[37],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS337(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 337, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sext_,__IELE-COMMON`(REG,WIDTH,_188))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_188),isInt(WIDTH)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d1183d786c866e47feece2de6e9f566c893a4b5a6dd8679e44e9d8af29acd487) contentStartColumn(10) contentStartLine(152) org.kframework.attributes.Location(Location(152,10,152,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS355(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 355, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=iszero__IELE-COMMON`(REG,_162))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_162),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3e0db25bfde86e12fdd5b9456bad40400b38717b50b2c34f32312012055f1040) contentStartColumn(10) contentStartLine(98) org.kframework.attributes.Location(Location(98,10,98,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS375(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 375, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECADD_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a746ce8521657da70d4e9cf3f1df975b88f040d13c4b355fe440bfab4e684cbd) contentStartColumn(10) contentStartLine(325) org.kframework.attributes.Location(Location(325,10,325,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS385(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 385, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`log_,__IELE-COMMON`(_145,_146))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_145),isNonEmptyOperands(_146)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c3f2efedc113c324a68245be3897b8f2b2cb194bd46ed66c4f83b23aa3eeef0) contentStartColumn(10) contentStartLine(311) org.kframework.attributes.Location(Location(311,10,311,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS397(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 397, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`br_,__IELE-COMMON`(_152,_153))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isIeleName(_153),isOperand(_152)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c73b3fca08f29cb9833dfce402052ee8b40fd145f5ade0e94095325ea3e9325f) contentStartColumn(10) contentStartLine(308) org.kframework.attributes.Location(Location(308,10,308,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS401(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 401, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sha3__IELE-COMMON`(REG,_222))=>#registerDelta(REG,bitsInWords(#token(\"256\",\"Int\"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isOperand(_222)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(390a570798ab9888f35a59c9478ea33db9580e91ee3977b15f8a20437d652229) contentStartColumn(10) contentStartLine(141) org.kframework.attributes.Location(Location(141,10,141,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalBitsInWords( // bitsInWords(#token("256","Int"),SCHED)
		/* rhs KToken */ constInt256,
		v[22 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[34],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[22 /*SCHED*/],
		),
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS411(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 411, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=xor_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2838141fc180fa5becb824c1ce3b359255b211cfd060da303524fb2b579bc385) contentStartColumn(10) contentStartLine(88) org.kframework.attributes.Location(Location(88,10,88,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[34],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS417(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 417, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=not__IELE-COMMON`(REG,W))=>#registerDelta(REG,intSize(W))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(W),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9322a752d0fa1bcb5b78d8e6c0ac2ace13d1c9f4533d7bc6041fa0a883b19e7c) contentStartColumn(10) contentStartLine(85) org.kframework.attributes.Location(Location(85,10,85,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalIntSize( // intSize(W)
		v[8 /*W*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[31],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS437(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 437, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`RIP160_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aacbe86714293de644f503261830707498f3105c455c3953ab4557bd7f4efd95) contentStartColumn(10) contentStartLine(323) org.kframework.attributes.Location(Location(323,10,323,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS447(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 447, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=cmp__,__IELE-COMMON`(REG,_215,_216,_217))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_217),isLValue(REG)),isPredicate(_215)),isOperand(_216)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(399204a104f4e89f5290af6ec6d90d039aee84f3abdb442fd21dceb47b824498) contentStartColumn(10) contentStartLine(99) org.kframework.attributes.Location(Location(99,10,99,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS456(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 456, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mul_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(12cfe44aa2841eb3615c4c5b0ddda14b5a4015d507d63f9ee6a01cfc460da9d5) contentStartColumn(10) contentStartLine(119) org.kframework.attributes.Location(Location(119,10,119,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(intSize(W0),intSize(W1))
		v[34],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS472(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 472, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isMap(LM),isLValue(REG)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b1e24b53f1b7b465cc8d75b4b5fd662c1ffa957399b0e6f0a9636af645556358) contentStartColumn(10) contentStartLine(259) org.kframework.attributes.Location(Location(259,10,261,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[92], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[92],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*LM*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS485(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 485, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_,_=create_(_)send__IELE-COMMON`(_287,_288,_289,_290,_291))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_288),isOperands(_290)),isOperand(_291)),isIeleName(_289)),isLValue(_287)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c3d87f3eb13a49a2e8d69724c9920947fb760f6fa9990f7e2ffdc75927d3ddd) contentStartColumn(10) contentStartLine(318) org.kframework.attributes.Location(Location(318,10,318,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[15 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS488(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 488, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=calladdress_at__IELE-COMMON`(REG,_252,_253))=>#registerDelta(REG,#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_253),isGlobalName(_252)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bf1d02150ae11937cfa14b8aa7a371623bffb00a0b54f14a5e8a0b5d930d7805) contentStartColumn(10) contentStartLine(169) org.kframework.attributes.Location(Location(169,10,169,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS494(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 494, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(_200,_201,_202,_203,_204))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_202),isLValues(_200)),isOperand(_201)),isOperand(_204)),isOperands(_203)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5373b838af970959fe148ec2a7c8b606b05ed18a5e5032e9b89617450ac32431) contentStartColumn(10) contentStartLine(317) org.kframework.attributes.Location(Location(317,10,317,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[15 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS508(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 508, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,__IELE-COMMON`(VALUE,INDEX))=>#memoryDelta(INDEX,intSize(VALUE))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(INDEX),isInt(VALUE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c12b8a6a6f5261409f42f70f621ff9282d850553c1f629410c91bb2e0818a5b) contentStartColumn(10) contentStartLine(262) org.kframework.attributes.Location(Location(262,10,262,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[30], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[6 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashmemoryDelta, // as-is #memoryDelta
					v[8 /*INDEX*/],
					v[30],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS520(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 520, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,_292))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(WIDTH),isOperand(_292)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(071eed52767e65d22993a9edf481fd079c235f0c41b1de9e5fbd434f92a6ef45) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS521(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 521, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(_189,INDEX1,INDEX2,WIDTH))=>#memoryExpand(INDEX1,bytesInWords(`_+Int_`(chop(INDEX2),chop(WIDTH))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_189),isInt(INDEX1)),isInt(WIDTH)),isInt(INDEX2)),`_>Int__INT`(chop(WIDTH),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e1475da942e16eb42fab29a5fb25d9c40c0fae91f4cb2130063eca1b07411444) contentStartColumn(10) contentStartLine(254) org.kframework.attributes.Location(Location(254,10,254,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[39], i.evalErr = i.evalChop( // chop(INDEX2)
		v[10 /*INDEX2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalChop( // chop(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(chop(INDEX2),chop(WIDTH))
		v[39],
		v[40],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalBytesInWords( // bytesInWords(`_+Int_`(chop(INDEX2),chop(WIDTH)))
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashmemoryExpand, // as-is #memoryExpand
					v[8 /*INDEX1*/],
					v[37],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS634(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 634, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(_209,INDEX1,INDEX2,WIDTH))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isOperand(INDEX1)),isOperand(_209)),isOperand(INDEX2)),`_==Int_`(chop(WIDTH),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04212effe3da5404e78df279f8084c3dff8f8147c01b4e56a50ff27afdeacd1d) contentStartColumn(10) contentStartLine(255) org.kframework.attributes.Location(Location(255,10,255,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS522(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 522, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`log__IELE-COMMON`(_208))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_208) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b97388e8951180a22c5bbd004c1cba1c8a012af1c69fb0c0ab0972959a7eb368) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS523(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 523, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`sstore_,__IELE-COMMON`(_236,_237))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_237),isOperand(_236)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eb81bdf447b9e85dac1409a8fe454714499fcede7b008596f0ccaabd741f3746) contentStartColumn(10) contentStartLine(292) org.kframework.attributes.Location(Location(292,10,292,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS544(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 544, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=expmod_,_,__IELE-COMMON`(REG,_249,_250,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isOperand(_250)),isLValue(REG)),isOperand(_249)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d540865c8dbf103ee08da720dacc486f4200276303502caa9acd1504452bf8c) contentStartColumn(10) contentStartLine(133) org.kframework.attributes.Location(Location(133,10,133,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W2)
		v[12 /*W2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[37],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS548(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 548, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mod_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`minInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(89b2d23c9d5ed5e341081d9f3cf649dfd780be66edc3e38ec234430c6ce0b77f) contentStartColumn(10) contentStartLine(121) org.kframework.attributes.Location(Location(121,10,121,96)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[34],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS562(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 562, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=twos_,__IELE-COMMON`(REG,WIDTH,_156))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_156),isInt(WIDTH)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bd38cdf1695a22c5c09a20c1986a17eb3379ede248755831d211aa3a78063888) contentStartColumn(10) contentStartLine(153) org.kframework.attributes.Location(Location(153,10,153,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalChop( // chop(WIDTH)
		v[8 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalBytesInWords( // bytesInWords(chop(WIDTH))
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[34],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS572(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 572, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=and_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`minInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0480e88c371c6185968bbe13625dceb1b7d0a601a2fa28572ec326db3840fc9a) contentStartColumn(10) contentStartLine(86) org.kframework.attributes.Location(Location(86,10,86,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[34],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS576(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 576, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ret__IELE-COMMON`(_260))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires isNonEmptyOperands(_260) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63acce7906b9ae9d239574cbcb66c05d12ef8b5529cb8836135946767ca43452) contentStartColumn(10) contentStartLine(314) org.kframework.attributes.Location(Location(314,10,314,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[87], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[88], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[87],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		v[23 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[88],
				),
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				v[53 /*_8*/],
				v[55 /*_9*/],
				v[57 /*_10*/],
				v[59 /*_11*/],
				v[61 /*_12*/],
				v[63 /*_13*/],
			),
			v[65 /*_18*/],
			v[67 /*_19*/],
			v[69 /*_20*/],
			v[71 /*_21*/],
			v[73 /*_22*/],
			v[75 /*_23*/],
			v[77 /*_24*/],
			v[79 /*_25*/],
			v[81 /*_26*/],
			v[83 /*_27*/],
		),
		v[85 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS586(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 586, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=div_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),`_+Int_`(`_-Int__INT`(intSize(W0),intSize(W1)),#token(\"1\",\"Int\"))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c3227674c1d319c22e30d7ad3d2e0df5be7a07277081e75b2882f2cadf44cf91) contentStartColumn(10) contentStartLine(120) org.kframework.attributes.Location(Location(120,10,120,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(intSize(W0),intSize(W1))
		v[36],
		v[37],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(intSize(W0),intSize(W1)),#token("1","Int"))
		v[35],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(`_-Int__INT`(intSize(W0),intSize(W1)),#token("1","Int")))
		/* rhs KToken */ constInt1,
		v[34],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS591(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 591, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(503b57dde330e6df03698ffc44e3f4026b434969e6096d8bd67861ccb0127bbb) contentStartColumn(10) contentStartLine(89) org.kframework.attributes.Location(Location(89,10,89,158)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalBitsInWords( // bitsInWords(W1,SCHED)
		v[10 /*W1*/],
		v[24 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(intSize(W0),bitsInWords(W1,SCHED))
		v[37],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED)))
		/* rhs KToken */ constInt1,
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[35],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[24 /*SCHED*/],
		),
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS618(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 618, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=or_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bdc8df314acb9921bc0333b7d0f2530f837e985212b3e87e57df430f5ed254b5) contentStartColumn(10) contentStartLine(87) org.kframework.attributes.Location(Location(87,10,87,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalIntSize( // intSize(W1)
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(intSize(W0),intSize(W1))
		v[34],
		v[35],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS637(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 637, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`selfdestruct__IELE-COMMON`(_251))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_251) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bef2d90950574e4792bb31560c2181bbd2b9cc38f328cce5479170fe6dda800b) contentStartColumn(10) contentStartLine(312) org.kframework.attributes.Location(Location(312,10,312,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS669(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 669, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(intSize(W0),W0),W1),#token(\"64\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(afe52ae79d053ad8480a8078765a1db7f7b93ba8478ffa824b187c1d16cebf7f) contentStartColumn(10) contentStartLine(122) org.kframework.attributes.Location(Location(122,10,122,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalIntSize( // intSize(W0)
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashadjustedBitLength( // #adjustedBitLength(intSize(W0),W0)
		v[36],
		v[8 /*W0*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#adjustedBitLength(intSize(W0),W0),W1)
		v[35],
		v[10 /*W1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(#adjustedBitLength(intSize(W0),W0),W1),#token("64","Int"))
		v[34],
		/* rhs KToken */ constInt64,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[33],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS19(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 19, "{| rule `<generatedTop>`(`<k>`(``#deleteAccounts(`.List`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62e1f1bbaffd1776a90c061d5de0348420a62ffc0adc61b0addc485941134fc6) contentStartColumn(10) contentStartLine(698) org.kframework.attributes.Location(Location(698,10,698,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS20(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 20, "{| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(`.List{\"lvalueList\"}`(.KList),operandList(VALUE,VALUES))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"2\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(VALUE),isInts(VALUES)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edd7237518e0917746a6aae3339f9b082e5bc2dc4cd9edb08e7b7fb14c2e0f2e) contentStartColumn(10) contentStartLine(742) org.kframework.attributes.Location(Location(742,10,742,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt2,
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS28(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 28, "{| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(`.List{\"lvalueList\"}`(.KList),`.List{\"operandList\"}`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(629625a9ad8e8ebd3778ecd225c79b080892c073d1b0096a5d0fa1c10e8f4728) contentStartColumn(10) contentStartLine(740) org.kframework.attributes.Location(Location(740,10,740,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[27], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[27],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS232(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 232, "{| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(lvalueList(REG,REGS),operandList(VALUE,VALUES))=>`#load___IELE`(REG,VALUE)~>`#loads___IELE`(REGS,VALUES)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isLValue(REG)),isInts(VALUES)),isLValues(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fa10d2cf4c396cbcda330bec07de9fdadd300acb455863a7868d4db24cda13c1) contentStartColumn(10) contentStartLine(739) org.kframework.attributes.Location(Location(739,10,739,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[11 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[8 /*REGS*/],
					v[13 /*VALUES*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS675(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 675, "{| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(lvalueList(REG,REGS),`.List{\"operandList\"}`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"2\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValues(REGS),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99bddfad3114b87f23ed4ce710c739d48458e25c0c7ca1b4a6883e5224b9fa4d) contentStartColumn(10) contentStartLine(741) org.kframework.attributes.Location(Location(741,10,741,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt2,
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS21(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 21, "{| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(BLOCK,BLOCKS)=>BLOCKS``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(``.K=>BLOCK``~>DotVar5)))),_13,_14) requires `_andBool_`(isLabeledBlocks(BLOCKS),isUnlabeledBlock(BLOCK)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a0affca20a76e396297e4b55c54f33d2097eb521a77726c805fe4a9f6d76f33d) contentStartColumn(10) contentStartLine(164) org.kframework.attributes.Location(Location(164,10,166,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*BLOCKS*/],
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_8*/],
		v[12 /*_9*/],
		v[14 /*_10*/],
		v[16 /*_11*/],
		v[18 /*_12*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[23 /*_6*/],
			v[25 /*_7*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[28 /*_2*/],
				v[30 /*_3*/],
				v[32 /*_4*/],
				v[34 /*_5*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					v[37 /*_0*/],
					v[39 /*_1*/],
					i.Model.NewKApply(m.LblXltcurrentInstructionsXgt, // as-is <currentInstructions>
						i.Model.AssembleKSequence(
							v[5 /*BLOCK*/],
							v[42 /*DotVar5*/],
						),
					),
				),
			),
		),
		v[44 /*_13*/],
		v[46 /*_14*/],
	), nil
}

func (i *Interpreter) stepRHS477(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 477, "{| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(`.List{\"instructionList\"}`(.KList),BLOCKS)=>BLOCKS``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires isLabeledBlocks(BLOCKS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f0ebedea521b7e43704a441b32915ff4b8ea754d2d12a45bc39289b98839fe49) contentStartColumn(10) contentStartLine(589) org.kframework.attributes.Location(Location(589,10,590,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[6 /*BLOCKS*/],
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[26 /*_0*/],
			v[28 /*_1*/],
			v[30 /*_2*/],
		),
		v[32 /*_7*/],
		v[34 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS533(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 533, "{| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(instructionList(OP,OPS),BLOCKS)=>`#exceptional?[_]_IELE`(OP)~>OP~>`___IELE-COMMON`(OPS,BLOCKS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isInstruction(OP)),isInstructions(OPS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bd7291afe5c50568b1e673dfc6defca622d7581bd91eb64fc4054854b9770f7c) contentStartColumn(10) contentStartLine(578) org.kframework.attributes.Location(Location(578,10,583,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionalXquesXlsqbXuXrsqbXuIELE, // as-is #exceptional?[_]_IELE
					v[6 /*OP*/],
				),
				v[6 /*OP*/],
				i.Model.NewKApply(m.LblXuXuXuIELEXhyphenCOMMON, // as-is ___IELE-COMMON
					v[8 /*OPS*/],
					v[10 /*BLOCKS*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
		),
		v[36 /*_7*/],
		v[38 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS23(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 23, "{| rule `<generatedTop>`(`<k>`(`` `_=and_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=and_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc41756f8a5526395ef35f84321bd4e750c92e0dfd14f70a94391c2e41f3ba53) heat() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqandXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=and_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS609(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 609, "{| rule `<generatedTop>`(`<k>`(`` `_=and_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=and_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3a3296b552deec6c8e2cc2aa1430e14f53c33460a11afb7173841e5ce76391bc) heat() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqandXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=and_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS24(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 24, "{| rule `<generatedTop>`(`<k>`(`` `_=add_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=add_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(142a805f26e6a02290d1f8f004d5fc736a3ed9b5397f3e77b839fac40e65d2c7) heat() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1046665075) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=add_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS326(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 326, "{| rule `<generatedTop>`(`<k>`(`` `_=add_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=add_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5e74e15a9c1226ab5bf0b4c484838f88a0c32dc1eaf0606b1ef3c2e20872bb9a) heat() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1046665075) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=add_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS26(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 26, "{| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,HOLE,K3,K4)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_2`(K0,K1,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(de6daa1d6d7f4d3d2a43f06f39a1c780df8a40797dd859be6667a33b1a820424) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_,_=copycreate_(_)send__IELE-COMMON1_2
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS405(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 405, "{| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(73a9e7cfec81e5260b859dd16e25606c024d5970d0d0fce8a0719d780d83ec5a) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_,_=copycreate_(_)send__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS611(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 611, "{| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f6b9565a757125d448ad6c006fd539f35ef061710c54ee70e2af9a4633ef9dd0) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[13 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_,_=copycreate_(_)send__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS29(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 29, "{| rule `<generatedTop>`(`<k>`(`` `#gas[_]_IELE-INFRASTRUCTURE`(OP)=>`#memory[_]_IELE-GAS`(OP)~>`#compute[_,_]_IELE-GAS`(OP,SCHED)~>`#deductGas_IELE-GAS`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isInstruction(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8e06cf0c7a5ac69dd6630210e3a7e9de68f0d1070a15d269f24890ef7b37886b) contentStartColumn(10) contentStartLine(29) org.kframework.attributes.Location(Location(29,10,29,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS, // as-is #memory[_]_IELE-GAS
					v[5 /*OP*/],
				),
				i.Model.NewKApply(m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS, // as-is #compute[_,_]_IELE-GAS
					v[5 /*OP*/],
					v[19 /*SCHED*/],
				),
				i.Model.NewKApply(m.LblXhashdeductGasXuIELEXhyphenGAS, // as-is #deductGas_IELE-GAS
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[19 /*SCHED*/],
		),
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS31(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 31, "{| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(da8439c5b847a3691ab444f09822d12e3ca064c3525eaa4d7235c0d4443250d1) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=addmod_,_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS75(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 75, "{| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_2`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e33157551741e226e6f5999252c5d6583bccefe7f1c3bdc1b54771f5b0498a47) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=addmod_,_,__IELE-COMMON1_2
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS196(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 196, "{| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ace2a642ce6e9e3db38f132e90b29595a77ad57cad3d0061374875a4b0b7d6bc) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=addmod_,_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS37(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 37, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(VAL),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d9c43ebb23a60c4aaf42a3658cd365d748a942d2675093ca69719e611ff08423) contentStartColumn(10) contentStartLine(364) org.kframework.attributes.Location(Location(364,10,364,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[16 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotenonceXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS240(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 240, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"storage\\\"\",\"String\"),`{_}_IELE-DATA`(STORAGE)=>#parseMap(`{_}_IELE-DATA`(STORAGE))),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSONList(STORAGE),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9c1a5c9963677d11deb8cfbc01898754f394dc5ee6a8f4679f72e4af6df6bd3d) contentStartColumn(10) contentStartLine(366) org.kframework.attributes.Location(Location(366,10,366,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[42], i.evalErr = i.evalXhashparseMap( // #parseMap(`{_}_IELE-DATA`(STORAGE))
		i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
			v[17 /*STORAGE*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotestorageXquote,
												v[42],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_0*/],
		v[30 /*_1*/],
		v[32 /*_2*/],
		v[34 /*_3*/],
		v[36 /*_4*/],
		v[38 /*_5*/],
		v[40 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS271(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 271, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID=>#parseAddr(ACCTID),ACCT),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(ACCT),isString(ACCTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(82e4a5dd6cabf21299e6230e8433a4afae9a6c1a6af69b79a3c73151a6e981d9) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashparseAddr( // #parseAddr(ACCTID)
		v[10 /*ACCTID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[36],
									v[12 /*ACCT*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS370(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 370, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,`{_}_IELE-DATA`(REST)),`.List{\"_,__IELE-DATA\"}`(.KList)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSONKey(ACCTID)),isJSONList(REST)),isJSON(VALUE)),`_=/=K_`(REST,`.List{\"_,__IELE-DATA\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8273c037a7fb4a61071134d5856c40cdcb2e0cbddf02f1033c414a1d4418e619) contentStartColumn(10) contentStartLine(360) org.kframework.attributes.Location(Location(360,10,360,181)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCTID*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												v[15 /*KEY*/],
												v[17 /*VALUE*/],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCTID*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										v[19 /*REST*/],
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[21 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[27 /*SREST*/],
			),
		),
		v[29 /*_0*/],
		v[31 /*_1*/],
		v[33 /*_2*/],
		v[35 /*_3*/],
		v[37 /*_4*/],
		v[39 /*_5*/],
		v[41 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS615(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 615, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"balance\\\"\",\"String\"),VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isString(VAL),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a649da724c607911cd5db1686e69f31befb70459fe3135c6bab6da8c98f08d66) contentStartColumn(10) contentStartLine(363) org.kframework.attributes.Location(Location(363,10,363,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[16 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotebalanceXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS640(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 640, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE=>#parseByteStack(CODE)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(ACCT),isString(CODE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0895c213a9507d29f9089fcd30cde17d256e6086e803443e2614b17eeb42a1b8) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,107)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[40], i.evalErr = i.evalXhashparseByteStack( // #parseByteStack(CODE)
		v[16 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCT*/],
									i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
												/* rhs KToken */ constStringXquotecodeXquote,
												v[40],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS56(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 56, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasPrice\\\"\",\"String\"),GPRICE),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,`<gasPrice>`(_765=>GPRICE),_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(GPRICE),isInt(_765)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(71f09bd7c758e6ffc3855d13dff18951c04abdab3b0981d4c4f8e47b80b5db5b) contentStartColumn(10) contentStartLine(423) org.kframework.attributes.Location(Location(423,10,423,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			i.Model.NewKApply(m.LblXltgasPriceXgt, // as-is <gasPrice>
				v[11 /*GPRICE*/],
			),
			v[47 /*_6*/],
			v[49 /*_7*/],
			v[51 /*_8*/],
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS73(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 73, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"data\\\"\",\"String\"),DATA=>#parseByteStack(DATA)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(DATA) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1d88618bac79b72818ee2771820e55d30620fde72cc07bfc1bf6b46475898d8e) contentStartColumn(10) contentStartLine(432) org.kframework.attributes.Location(Location(432,10,432,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashparseByteStack( // #parseByteStack(DATA)
		v[11 /*DATA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquotedataXquote,
									v[34],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS268(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 268, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"data\\\"\",\"String\"),DATA=>`[_]_IELE-DATA`(`_,__IELE-DATA`(#asUnsigned(DATA),`_,__IELE-DATA`(#sizeWordStack(DATA),`.List{\"_,__IELE-DATA\"}`(.KList))))),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isWordStack(DATA) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85b51900994a8dded25eefa27a62ae3c43f1205bb432f4fe6417b83bc56923c4) contentStartColumn(10) contentStartLine(433) org.kframework.attributes.Location(Location(433,10,433,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashasUnsigned( // #asUnsigned(DATA)
		v[11 /*DATA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXhashsizeWordStack( // #sizeWordStack(DATA)
		v[11 /*DATA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquotedataXquote,
									i.Model.NewKApply(m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, // as-is [_]_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											v[35],
											i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
												v[36],
												i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
												),
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS414(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 414, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"data\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(DATA,`_,__IELE-DATA`(LEN,`.List{\"_,__IELE-DATA\"}`(.KList))))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(_777=>operandList(LEN,operandList(DATA,`.List{\"operandList\"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInts(_777)),isInt(DATA)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e0cec76d69f88c7b7bef8d0060bccaa906a72ae1d75b6ed190f46bc8a198b97c) contentStartColumn(10) contentStartLine(435) org.kframework.attributes.Location(Location(435,10,435,121)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_28*/],
		v[29 /*_29*/],
		v[31 /*_30*/],
		v[33 /*_31*/],
		v[35 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[38 /*_14*/],
			v[40 /*_15*/],
			v[42 /*_16*/],
			v[44 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[47 /*_0*/],
				v[49 /*_1*/],
				v[51 /*_2*/],
				v[53 /*_3*/],
				v[55 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[16 /*LEN*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[13 /*DATA*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[60 /*_5*/],
				v[62 /*_6*/],
				v[64 /*_7*/],
				v[66 /*_8*/],
				v[68 /*_9*/],
				v[70 /*_10*/],
				v[72 /*_11*/],
				v[74 /*_12*/],
				v[76 /*_13*/],
			),
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
			v[94 /*_26*/],
			v[96 /*_27*/],
		),
		v[98 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS92(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 92, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"caller\\\"\",\"String\"),ACCTFROM),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,`<caller>`(_729=>ACCTFROM),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(_729),isInt(ACCTFROM)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(53af381a2b87aa5ed25e267b02018984bf1ba53ecf62434ef45523dd9c8ab9a1) contentStartColumn(10) contentStartLine(426) org.kframework.attributes.Location(Location(426,10,426,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				i.Model.NewKApply(m.LblXltcallerXgt, // as-is <caller>
					v[11 /*ACCTFROM*/],
				),
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS275(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 275, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL=>#parseHexWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(VAL),isJSONKey(KEY)),`Set:in`(KEY,`_Set_`(`_Set_`(`SetItem`(#token(\"\\\"address\\\"\",\"String\")),`SetItem`(#token(\"\\\"caller\\\"\",\"String\"))),`SetItem`(#token(\"\\\"origin\\\"\",\"String\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9dc403ae5d72ff1aaffbf214c028775cabd8cf460948e40fd4c54d634b5e4546) contentStartColumn(10) contentStartLine(420) org.kframework.attributes.Location(Location(420,10,421,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[42], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(VAL)
		v[12 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*KEY*/],
									v[42],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS526(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 526, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(VAL),isJSONKey(KEY)),`Set:in`(KEY,`_Set_`(`_Set_`(`SetItem`(#token(\"\\\"gas\\\"\",\"String\")),`SetItem`(#token(\"\\\"gasPrice\\\"\",\"String\"))),`SetItem`(#token(\"\\\"value\\\"\",\"String\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(68be8cd1d3e106f059e26fe45d50c3fe4e0abc3f0fe77b83f7c19c6ee858066a) contentStartColumn(10) contentStartLine(418) org.kframework.attributes.Location(Location(418,10,419,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[42], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[12 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*KEY*/],
									v[42],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS324(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 324, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(_20,_21,_22,_23,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5)=>#loadCode(#dasmContract(CODE,#token(\"Main\",\"IeleName\"))),_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19),_24,_25,_26,_27,_28,_29,_30,_31,_32,_33),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)),isSchedule(SCHED)),isWordStack(CODE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1186afa0a5d66afc291530944eb3286dc896561193b7995a70d399562ad03723) contentStartColumn(10) contentStartLine(436) org.kframework.attributes.Location(Location(436,10,438,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[112], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[114], i.evalErr = i.evalXhashdasmContract( // #dasmContract(CODE,#token("Main","IeleName"))
		v[11 /*CODE*/],
		/* rhs KToken */ constKTokenSortIeleNameMain,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[113], i.evalErr = i.evalXhashloadCode( // #loadCode(#dasmContract(CODE,#token("Main","IeleName")))
		v[114],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[112],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_34*/],
		v[23 /*_35*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[26 /*SCHED*/],
		),
		v[28 /*_36*/],
		v[30 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[33 /*_20*/],
			v[35 /*_21*/],
			v[37 /*_22*/],
			v[39 /*_23*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[113],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
				v[71 /*_14*/],
				v[73 /*_15*/],
				v[75 /*_16*/],
				v[77 /*_17*/],
				v[79 /*_18*/],
				v[81 /*_19*/],
			),
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
			v[91 /*_28*/],
			v[93 /*_29*/],
			v[95 /*_30*/],
			v[97 /*_31*/],
			v[99 /*_32*/],
			v[101 /*_33*/],
		),
		v[103 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS457(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 457, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE=>#parseByteStack(CODE)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(CODE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(358e46f6964f71b613d3742dde86620ebd02be307c4a8307c78621884289f4b7) contentStartColumn(10) contentStartLine(430) org.kframework.attributes.Location(Location(430,10,430,96)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashparseByteStack( // #parseByteStack(CODE)
		v[11 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquotecodeXquote,
									v[34],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS360(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 360, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"address\\\"\",\"String\"),ACCTTO),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(_764=>ACCTTO),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(ACCTTO),isInt(_764)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a64d88409a13a1b34ad1a431b9dc0f56d6445a1cd233fcbf7bb90cce1ec26164) contentStartColumn(10) contentStartLine(425) org.kframework.attributes.Location(Location(425,10,425,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[11 /*ACCTTO*/],
				),
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS643(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 643, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gas\\\"\",\"String\"),GAVAIL),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(_752=>GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(_752),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28a3d35d258cf3943b43ab9cd64be8a6171225464177521d9ab446a7764d4ba8) contentStartColumn(10) contentStartLine(424) org.kframework.attributes.Location(Location(424,10,424,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[11 /*GAVAIL*/],
				),
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS657(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 657, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"origin\\\"\",\"String\"),ORIG),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,`<origin>`(_731=>ORIG),_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(_731),isInt(ORIG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fff9c3fbd9b124a90eda1668a5d12e2e80a9bb9e8b16fab071c0b289b96b56ad) contentStartColumn(10) contentStartLine(429) org.kframework.attributes.Location(Location(429,10,429,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			i.Model.NewKApply(m.LblXltoriginXgt, // as-is <origin>
				v[11 /*ORIG*/],
			),
			v[49 /*_7*/],
			v[51 /*_8*/],
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS674(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 674, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"value\\\"\",\"String\"),VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,`<callValue>`(_749=>VALUE),_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(VALUE),isInt(_749)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e9954edcf411af26b70acaa8a68ba96a15da3c7461cbae28c5a2f8483e6efe1) contentStartColumn(10) contentStartLine(428) org.kframework.attributes.Location(Location(428,10,428,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[93],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				i.Model.NewKApply(m.LblXltcallValueXgt, // as-is <callValue>
					v[11 /*VALUE*/],
				),
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS104(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 104, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"hash\\\"\",\"String\"),_747),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isJSON(_747) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7272e7c8f7814ff80825c41e731b13c50b2348295c3b72d0152bc6ca50c48ef7) contentStartColumn(10) contentStartLine(462) org.kframework.attributes.Location(Location(462,10,462,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS117(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 117, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"mixHash\\\"\",\"String\"),HM),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HM) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(56a81bc5901e195a5c4b4688ff91c5a317e4398e69c322151d463a9c22e53dd6) contentStartColumn(10) contentStartLine(464) org.kframework.attributes.Location(Location(464,10,464,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS174(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 174, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"transactionsTrie\\\"\",\"String\"),HT),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(90b8d2cf62c64b34847ea9e1fc5bbcbb80b673b0d50a3e98008a74d1f2de9d25) contentStartColumn(10) contentStartLine(468) org.kframework.attributes.Location(Location(468,10,468,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS215(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 215, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasUsed\\\"\",\"String\"),HG),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gasUsed>`(_775=>#parseHexWord(HG)),_12,_13),_19) requires `_andBool_`(isString(HG),isInt(_775)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6cff4ae46091d06142d162bda58172b8c6e18b440cce1f5f05456cab031fcf78) contentStartColumn(10) contentStartLine(486) org.kframework.attributes.Location(Location(486,10,487,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HG)
		v[11 /*HG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			v[54 /*_11*/],
			i.Model.NewKApply(m.LblXltgasUsedXgt, // as-is <gasUsed>
				v[65],
			),
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS249(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 249, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"stateRoot\\\"\",\"String\"),HR),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HR) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(75b0558ad9d6dfc84c73bd91ae5a5980cacb5ebb87ae3aba58692381f2716755) contentStartColumn(10) contentStartLine(467) org.kframework.attributes.Location(Location(467,10,467,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS292(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 292, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"receiptTrie\\\"\",\"String\"),HE),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(61349dda79ecd15ee411c3e2b1ff73c8d84af23d8a54ff880d5656fadcaa5ddf) contentStartColumn(10) contentStartLine(461) org.kframework.attributes.Location(Location(461,10,461,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS321(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 321, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"extraData\\\"\",\"String\"),HX),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HX) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6f5ea178381db918433a76c8bdfa2e46a2ccb294b9eb9cee1c1d4eefff728132) contentStartColumn(10) contentStartLine(466) org.kframework.attributes.Location(Location(466,10,466,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS358(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 358, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"bloom\\\"\",\"String\"),HB),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HB) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(206952c12ae8aad2e4e9564af13cd53b3e6997504f2845d610c94e3954945d56) contentStartColumn(10) contentStartLine(469) org.kframework.attributes.Location(Location(469,10,469,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS371(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 371, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"uncleHash\\\"\",\"String\"),HO),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HO) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e0f8be4daa1ef2cd47ee6101956160c15ccce2614aa8cefc2c8aa0832db49fd8) contentStartColumn(10) contentStartLine(463) org.kframework.attributes.Location(Location(463,10,463,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS418(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 418, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"difficulty\\\"\",\"String\"),HD),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<difficulty>`(_754=>#parseHexWord(HD)),_9,_10,_11,_12,_13),_19) requires `_andBool_`(isString(HD),isInt(_754)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(91ae65c0824ff222c92508f35113d75a7c04a283abeb6ab1e8eb63ef6a0acf83) contentStartColumn(10) contentStartLine(477) org.kframework.attributes.Location(Location(477,10,478,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HD)
		v[11 /*HD*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			i.Model.NewKApply(m.LblXltdifficultyXgt, // as-is <difficulty>
				v[65],
			),
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS463(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 463, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"parentHash\\\"\",\"String\"),HP),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ddc9cdf33fa74402f546946817960f344792d0c52742e61428794636e8c23185) contentStartColumn(10) contentStartLine(465) org.kframework.attributes.Location(Location(465,10,465,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS479(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 479, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasLimit\\\"\",\"String\"),HL),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gasLimit>`(_728=>#parseHexWord(HL)),_11,_12,_13),_19) requires `_andBool_`(isInt(_728),isString(HL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e465b9d3ec259613211834e28bee56702978f6ea308d855f1eee0f4354df1215) contentStartColumn(10) contentStartLine(471) org.kframework.attributes.Location(Location(471,10,472,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HL)
		v[11 /*HL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			i.Model.NewKApply(m.LblXltgasLimitXgt, // as-is <gasLimit>
				v[65],
			),
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS489(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 489, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"timestamp\\\"\",\"String\"),HS),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,`<timestamp>`(_778=>#parseHexWord(HS)),_13),_19) requires `_andBool_`(isInt(_778),isString(HS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(229bacd7b4ad275589cb5e09dd961dbf1c14736e0b227d7d80ab30fa9952e8a4) contentStartColumn(10) contentStartLine(480) org.kframework.attributes.Location(Location(480,10,481,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HS)
		v[11 /*HS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			v[54 /*_11*/],
			v[56 /*_12*/],
			i.Model.NewKApply(m.LblXlttimestampXgt, // as-is <timestamp>
				v[65],
			),
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS491(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 491, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),HN),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(HN) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(69be70df9e44df96d41a49eba03a0e1dc41abd721272f6e0ea35a748890c8ba3) contentStartColumn(10) contentStartLine(460) org.kframework.attributes.Location(Location(460,10,460,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS587(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 587, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"number\\\"\",\"String\"),HI),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(_751=>#parseHexWord(HI)),_10,_11,_12,_13),_19) requires `_andBool_`(isString(HI),isInt(_751)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1718d74696b96931182a6ddd4bd1ba7b57ace921dc0e4bbe1ce63451e40a26e7) contentStartColumn(10) contentStartLine(474) org.kframework.attributes.Location(Location(474,10,475,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HI)
		v[11 /*HI*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			i.Model.NewKApply(m.LblXltnumberXgt, // as-is <number>
				v[65],
			),
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS642(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 642, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"coinbase\\\"\",\"String\"),HC),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(_734=>#parseHexWord(HC)),_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isString(HC),isInt(_734)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b05b60135d304f7a6d71867437bdc50bebc61e24b32875a1a4375950901a251) contentStartColumn(10) contentStartLine(483) org.kframework.attributes.Location(Location(483,10,484,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(HC)
		v[11 /*HC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[65],
			),
			v[51 /*_8*/],
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS107(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 107, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL=>#parseWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(VAL),isJSONKey(KEY)),`Set:in`(KEY,`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token(\"\\\"currentTimestamp\\\"\",\"String\")),`SetItem`(#token(\"\\\"currentGasLimit\\\"\",\"String\"))),`SetItem`(#token(\"\\\"currentNumber\\\"\",\"String\"))),`SetItem`(#token(\"\\\"currentDifficulty\\\"\",\"String\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3fee2293ba4144bac708571cf2cd6ce0526bd3ad411ec0b7b9a3675b333160bf) contentStartColumn(10) contentStartLine(406) org.kframework.attributes.Location(Location(406,10,407,133)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[44], i.evalErr = i.evalXhashparseWord( // #parseWord(VAL)
		v[12 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteenvXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*KEY*/],
									v[44],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS347(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 347, "{| rule `<generatedTop>`(`<k>`(`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL=>#parseHexWord(VAL)),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isString(VAL),isJSONKey(KEY)),`Set:in`(KEY,`_Set_`(`SetItem`(#token(\"\\\"currentCoinbase\\\"\",\"String\")),`SetItem`(#token(\"\\\"previousHash\\\"\",\"String\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c85a2ca9cd264c34a7a83c46514e4258cc5c4414cb557729b9745054cb09af4b) contentStartColumn(10) contentStartLine(408) org.kframework.attributes.Location(Location(408,10,409,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[40], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(VAL)
		v[12 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteenvXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*KEY*/],
									v[40],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS189(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 189, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"currentCoinbase\\\"\",\"String\"),CB),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(_748=>CB),_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(_748),isInt(CB)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(15aad9af51c97be24775a46ae6bfd8fd7a76b9e04fa11e18d488f9f92b330bca) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[11 /*CB*/],
			),
			v[51 /*_8*/],
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS192(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 192, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"currentNumber\\\"\",\"String\"),NUM),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(_739=>NUM),_10,_11,_12,_13),_19) requires `_andBool_`(isInt(NUM),isInt(_739)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9e60b85d266833512677827ce3eb99d3f11d268fd969a59c6f71fd163a6eee26) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			i.Model.NewKApply(m.LblXltnumberXgt, // as-is <number>
				v[11 /*NUM*/],
			),
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS270(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 270, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"previousHash\\\"\",\"String\"),HASH),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(HASH) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8cbd25c52b9516cf09ab8c68c639e2b8b90b8de2783ceb0f72ad806b97437215) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS276(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 276, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"currentDifficulty\\\"\",\"String\"),DIFF),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<difficulty>`(_735=>DIFF),_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(DIFF),isInt(_735)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a149e3ab7a23bcc64d44cc56efb0d055c7128fbf95a4ccd3a86723be8af3828b) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			i.Model.NewKApply(m.LblXltdifficultyXgt, // as-is <difficulty>
				v[11 /*DIFF*/],
			),
			v[53 /*_9*/],
			v[55 /*_10*/],
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS450(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 450, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"currentGasLimit\\\"\",\"String\"),GLIMIT),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gasLimit>`(_780=>GLIMIT),_11,_12,_13),_19) requires `_andBool_`(isInt(_780),isInt(GLIMIT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fdfcdc07a693d2931fa21dadf647173a006a697b63ba02c2984cfc0de15b49cf) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			i.Model.NewKApply(m.LblXltgasLimitXgt, // as-is <gasLimit>
				v[11 /*GLIMIT*/],
			),
			v[57 /*_11*/],
			v[59 /*_12*/],
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS645(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 645, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"env\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"currentTimestamp\\\"\",\"String\"),TS),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,`<timestamp>`(_756=>TS),_13),_19) requires `_andBool_`(isInt(_756),isInt(TS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc6eb9b484d508cd046e0e0c0f83034d11966b252d60add21d0c7b2573abf866) contentStartColumn(10) contentStartLine(416) org.kframework.attributes.Location(Location(416,10,416,119)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			v[54 /*_11*/],
			v[56 /*_12*/],
			i.Model.NewKApply(m.LblXlttimestampXgt, // as-is <timestamp>
				v[11 /*TS*/],
			),
			v[61 /*_13*/],
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS250(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 250, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"blockhashes\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(VAL,VALS))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<blockhash>`(DotVar3=>`_List_`(DotVar3,`ListItem`(#parseHexWord(VAL))))),_19) requires `_andBool_`(isString(VAL),isJSONList(VALS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9e1b6e132a4d590e91d81c77914c1785488fedc1c8d63af7c3634f2a54400d75) contentStartColumn(10) contentStartLine(489) org.kframework.attributes.Location(Location(489,10,490,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[67], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(VAL)
		v[9 /*VAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[66], i.evalErr = i.evalListItem( // `ListItem`(#parseHexWord(VAL))
		v[67],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXuListXu( // `_List_`(DotVar3,`ListItem`(#parseHexWord(VAL)))
		v[60 /*DotVar3*/],
		v[66],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[12 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_0*/],
			v[33 /*_1*/],
			v[35 /*_2*/],
			v[37 /*_3*/],
			v[39 /*_4*/],
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
			v[47 /*_8*/],
			v[49 /*_9*/],
			v[51 /*_10*/],
			v[53 /*_11*/],
			v[55 /*_12*/],
			v[57 /*_13*/],
			i.Model.NewKApply(m.LblXltblockhashXgt, // as-is <blockhash>
				v[65],
			),
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS278(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 278, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"checkGas\\\"\",\"String\"),CHECKGAS))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,`<checkGas>`(_736=>CHECKGAS),_3,_4,_5) requires `_andBool_`(isBool(_736),isBool(CHECKGAS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c3e3d3f8bcabd0262ccd8edcf983fa886e18232bebb6dbb08fdbeada6550d9d7) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,454,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		i.Model.NewKApply(m.LblXltcheckGasXgt, // as-is <checkGas>
			v[7 /*CHECKGAS*/],
		),
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS363(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 363, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isJSONKey(DATA) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5888a48807840ebf5d55815d3a4ef1f5d89e075e018b144487906b6dac65112e) contentStartColumn(10) contentStartLine(352) org.kframework.attributes.Location(Location(352,10,352,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS483(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 483, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(`_,__IELE-DATA`(`{_}_IELE-DATA`(TEST),REST))))=>`load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(TEST)))~>`load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`[_]_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isJSONKey(DATA),isJSONList(REST)),isJSONList(TEST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c2cc8df81f17848d482b2ca540c1a67fd90fe4887ca763c60e62beedea1a917) contentStartColumn(10) contentStartLine(353) org.kframework.attributes.Location(Location(353,10,353,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[11 /*TEST*/],
						),
					),
				),
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, // as-is [_]_IELE-DATA
							v[13 /*REST*/],
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS579(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 579, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isJSONKey(DATA) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7fa1b0c8cc1e9055b0e0780322b273ac6c1876125b5f16214b0c9669ef89522d) contentStartColumn(10) contentStartLine(348) org.kframework.attributes.Location(Location(348,10,348,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS583(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 583, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"transactions\\\"\",\"String\"),`{_}_IELE-DATA`(TX)))=>`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"transactions\\\"\",\"String\"),`{_}_IELE-DATA`(#sortJSONList(TX))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSONList(TX),`notBool_`(#isSorted(TX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8923e86a2d1ce17fb6bf6937b658990ef95945c1ab2916aa72e7196f730f200d) contentStartColumn(10) contentStartLine(496) org.kframework.attributes.Location(Location(496,10,497,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[32], i.evalErr = i.evalXhashsortJSONList( // #sortJSONList(TX)
		v[8 /*TX*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquotetransactionsXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[32],
						),
					),
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS600(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 600, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"network\\\"\",\"String\"),SCHEDSTRING))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(_774=>#asScheduleString(SCHEDSTRING)),_2,_3,_4,_5) requires `_andBool_`(isString(SCHEDSTRING),isSchedule(_774)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e499d6ccecbd10df6ed95b7f8801036bea26bf32fdccfa5ae2ece4d5f8336a80) contentStartColumn(10) contentStartLine(445) org.kframework.attributes.Location(Location(445,10,446,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalXhashasScheduleString( // #asScheduleString(SCHEDSTRING)
		v[7 /*SCHEDSTRING*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[32],
		),
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS624(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 624, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"pre\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,ACCT),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`mkAcct__IELE-TESTING`(#parseAddr(ACCTID))~>`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCTID,ACCT),`.List{\"_,__IELE-DATA\"}`(.KList)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(ACCT),isString(ACCTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6e2bf5f33cab2db76436488ef0d174b5d7f8b083ded1b13137d87ceeeec7805) contentStartColumn(10) contentStartLine(359) org.kframework.attributes.Location(Location(359,10,359,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashparseAddr( // #parseAddr(ACCTID)
		v[10 /*ACCTID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblMkAcctXuXuIELEXhyphenTESTING, // as-is mkAcct__IELE-TESTING
					v[36],
				),
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteaccountXquote,
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[10 /*ACCTID*/],
									v[12 /*ACCT*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS652(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 652, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))))=>`load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),`.List{\"_,__IELE-DATA\"}`(.KList)))))~>`load__IELE-TESTING`(`_:__IELE-DATA`(DATA,`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isString(DATA)),isJSONList(REST)),isJSON(VALUE)),`_andBool_`(`_=/=K_`(REST,`.List{\"_,__IELE-DATA\"}`(.KList)),`_=/=String__STRING`(DATA,#token(\"\\\"transactions\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(922ca353a1d7126138b3b03996966d6f1b88c4127ef532a305a0d464681cf586) contentStartColumn(10) contentStartLine(349) org.kframework.attributes.Location(Location(349,10,350,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[11 /*KEY*/],
									v[13 /*VALUE*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*DATA*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS40(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 40, "{| rule `<generatedTop>`(`<k>`(`` `#checkContract__IELE`(CONTRACT)=>CONTRACT~>`#finishTypeChecking_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_315=>`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),`<well-formedness-schedule>`(SCHED),initContractsCell(.KList),initCurrentContractCell(.KList)),_3,_4) requires `_andBool_`(`_andBool_`(isWellFormednessCell(_315),isSchedule(SCHED)),isContract(CONTRACT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(12ccacffc4eef7795d64798b8ddb41c68cb108a0539a02fd24e797aed6e0d13f) contentStartColumn(10) contentStartLine(1371) org.kframework.attributes.Location(Location(1371,10,1378,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[32], i.evalErr = i.evalInitContractsCell(config, -1) // initContractsCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalInitCurrentContractCell(config, -1) // initCurrentContractCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*CONTRACT*/],
				i.Model.NewKApply(m.LblXhashfinishTypeCheckingXuIELE, // as-is #finishTypeChecking_IELE
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[19 /*SCHED*/],
		),
		v[21 /*_2*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			i.Model.NewKApply(m.LblXltwellXhyphenformednessXhyphenscheduleXgt, // as-is <well-formedness-schedule>
				v[19 /*SCHED*/],
			),
			v[32],
			v[33],
		),
		v[25 /*_3*/],
		v[27 /*_4*/],
	), nil
}

func (i *Interpreter) stepRHS45(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 45, "{| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_2`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(527a05284ca04dacb99017e915f5c8b73d70e0d5378b5d4a729525d7578122ea) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezerstore_,_,_,__IELE-COMMON1_2
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS340(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 340, "{| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a7bee0a5eddc74aac9534cdd09aced6c7b8b99f0cdabbe20ddb59c52dccb7f43) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerstore_,_,_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS357(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 357, "{| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9c4ded1b30a2c686bb400e380f3313b57be031965063c239b75c3b424a59a600) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezerstore_,_,_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS498(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 498, "{| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(HOLE,K1,K2,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_3`(K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b1aab81405cca7638b6613231c14c6ba31e24a82f8a76e0ed2b07e840a26f73) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3, // as-is #freezerstore_,_,_,__IELE-COMMON1_3
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS46(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 46, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST))))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(REST)))~>`check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),`.List{\"_,__IELE-DATA\"}`(.KList)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSON(VAL)),isJSONKey(TESTID)),isJSONList(REST)),`_andBool_`(`Set:in`(KEY,`#checkKeys_IELE-TESTING`(.KList)),`notBool_`(`Set:in`(KEY,`#allPostKeys_IELE-TESTING`(.KList))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(484048de0e190c3cc2352aaa847526d0dee1e88a02f9aa605d0101e94b680267) contentStartColumn(10) contentStartLine(304) org.kframework.attributes.Location(Location(304,10,304,173)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									v[11 /*KEY*/],
									v[13 /*VAL*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS400(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 400, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST))))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(REST)))~>`check__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"post\\\"\",\"String\"),VAL),`.List{\"_,__IELE-DATA\"}`(.KList)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSON(VAL)),isJSONKey(TESTID)),isJSONList(REST)),`Set:in`(KEY,`#allPostKeys_IELE-TESTING`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f987ef77e431aa72e613efab8ecb3eb898c655ebd2f2e5ae6ed257c141877438) contentStartColumn(10) contentStartLine(303) org.kframework.attributes.Location(Location(303,10,303,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquotepostXquote,
									v[13 /*VAL*/],
								),
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
								),
							),
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS528(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 528, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST))))=>`load__IELE-TESTING`(`_:__IELE-DATA`(KEY,VAL))~>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSON(VAL)),isJSONKey(TESTID)),isJSONList(REST)),`Set:in`(KEY,`#loadKeys_IELE-TESTING`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a5ff88e1dc110f485429c20f8a4c57cbbd425a5310715d0fb0e43f5af7ed0d25) contentStartColumn(10) contentStartLine(271) org.kframework.attributes.Location(Location(271,10,271,119)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[11 /*KEY*/],
						v[13 /*VAL*/],
					),
				),
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS497(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 497, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),`_,__IELE-DATA`(NEXT,REST)))))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(NEXT,`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST)))))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSON(NEXT),isJSONKey(KEY)),isJSON(VAL)),isJSONKey(TESTID)),isJSONList(REST)),`Set:in`(KEY,`#execKeys_IELE-TESTING`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(331bd6147fa8ff90342e1ae3ef2357612a5960ea6ea0b57a036efd5bfa3d7d5e) contentStartColumn(10) contentStartLine(284) org.kframework.attributes.Location(Location(284,10,284,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								v[16 /*NEXT*/],
								i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
									i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
										v[11 /*KEY*/],
										v[13 /*VAL*/],
									),
									v[18 /*REST*/],
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS130(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 130, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,_779),REST))))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSON(_779),isJSONKey(KEY)),isJSONKey(TESTID)),isJSONList(REST)),`Set:in`(KEY,`#discardKeys_IELE-TESTING`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ce07f9aacffd5cd220a6127769dbdb64747e15399ec46081b105bf298e458514) contentStartColumn(10) contentStartLine(314) org.kframework.attributes.Location(Location(314,10,314,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[15 /*REST*/],
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS191(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 191, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"lastblockhash\\\"\",\"String\"),HASH),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`startTx_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSONKey(TESTID),isString(HASH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(16a62542070f6a64cb04a14b9f987ed141d1653e6756a3042548894e7e6c3809) contentStartColumn(10) contentStartLine(287) org.kframework.attributes.Location(Location(287,10,287,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStartTxXuIELEXhyphenTESTING, // as-is startTx_IELE-TESTING
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS267(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 267, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),EXEC),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>`load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"exec\\\"\",\"String\"),EXEC))~>`start_IELE-TESTING`(.KList)~>`flush_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSON(EXEC),isJSONKey(TESTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b44e9434f3d0794d6e375e6b606a9ef91e90ef11628e5ffefea0c14c781bf2c8) contentStartColumn(10) contentStartLine(286) org.kframework.attributes.Location(Location(286,10,286,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadXuXuIELEXhyphenTESTING, // as-is load__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						/* rhs KToken */ constStringXquoteexecXquote,
						v[12 /*EXEC*/],
					),
				),
				i.Model.NewKApply(m.LblStartXuIELEXhyphenTESTING, // as-is start_IELE-TESTING
				),
				i.Model.NewKApply(m.LblFlushXuIELEXhyphenTESTING, // as-is flush_IELE-TESTING
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS368(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 368, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"blocks\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList)),`.List{\"_,__IELE-DATA\"}`(.KList)))),REST))))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(REST)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isJSONKey(TESTID),isJSONList(REST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1e41818a04991320746832f393a0da251d7cf21f3950fa673a88d432624837e9) contentStartColumn(10) contentStartLine(274) org.kframework.attributes.Location(Location(274,10,274,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[17 /*REST*/],
						),
					),
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS570(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 570, "{| rule `<generatedTop>`(`<k>`(`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"blocks\\\"\",\"String\"),`[_]_IELE-DATA`(`_,__IELE-DATA`(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST1)=>REST1),`.List{\"_,__IELE-DATA\"}`(.KList)))),REST2=>`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VAL),REST2)))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isJSONKey(KEY),isJSONList(REST2)),isJSON(VAL)),isJSONList(REST1)),isJSONKey(TESTID)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(34aedd731d6526b7cf119cc5eb40c064e460d5a4436cd5bb831efbef904ebc5e) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[51], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[6 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
								i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
									/* rhs KToken */ constStringXquoteblocksXquote,
									i.Model.NewKApply(m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, // as-is [_]_IELE-DATA
										i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
											i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
												v[21 /*REST1*/],
											),
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, // as-is .List{"_,__IELE-DATA"}
											),
										),
									),
								),
								i.Model.NewKApply(m.LblXuXcommaXuXuIELEXhyphenDATA, // as-is _,__IELE-DATA
									i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
										v[17 /*KEY*/],
										v[19 /*VAL*/],
									),
									v[24 /*REST2*/],
								),
							),
						),
					),
				),
				v[25 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[51],
				v[31 /*SREST*/],
			),
		),
		v[33 /*_0*/],
		v[35 /*_1*/],
		v[37 /*_2*/],
		v[39 /*_3*/],
		v[41 /*_4*/],
		v[43 /*_5*/],
		v[45 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS421(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 421, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList))))=>`startTx_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isJSONKey(TESTID) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(50b81b933cbc1832d26fdae9e80ffb11ab2c5d58de710c798618cc3ba16a2f63) contentStartColumn(10) contentStartLine(288) org.kframework.attributes.Location(Location(288,10,288,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStartTxXuIELEXhyphenTESTING, // as-is startTx_IELE-TESTING
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS135(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 135, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList)))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2fbb57c7c3aaace2f1e614c3d0800c55bf24cb518d4a5a98e540c00520e03c8) contentStartColumn(10) contentStartLine(251) org.kframework.attributes.Location(Location(251,10,251,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[27], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[27],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS350(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 350, "{| rule `<generatedTop>`(`<k>`(`` `run__IELE-TESTING`(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(TEST)),TESTS)))=>`run__IELE-TESTING`(`_:__IELE-DATA`(TESTID,`{_}_IELE-DATA`(#sortJSONList(TEST))))~>`#if_#then_#else_#fi_K-EQUAL`(`#hasPost?(_)_IELE-TESTING`(`{_}_IELE-DATA`(TEST)),.K,`exception_IELE-TESTING`(.KList))~>`clear_IELE-TESTING`(.KList)~>`run__IELE-TESTING`(`{_}_IELE-DATA`(TESTS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isJSONList(TESTS),isJSONKey(TESTID)),isJSONList(TEST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b84b30852fb87190b461b5871f4b95dd9269ba3adb0dc55229d00a9a9205fe12) contentStartColumn(10) contentStartLine(252) org.kframework.attributes.Location(Location(252,10,256,23)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalXhashsortJSONList( // #sortJSONList(TEST)
		v[11 /*TEST*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXhashhasPostXquesXlparenXuXrparenXuIELEXhyphenTESTING( // `#hasPost?(_)_IELE-TESTING`(`{_}_IELE-DATA`(TEST))
		i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
			v[11 /*TEST*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`#hasPost?(_)_IELE-TESTING`(`{_}_IELE-DATA`(TEST)),.K,`exception_IELE-TESTING`(.KList))
	if m.IsTrue(v[40]) { // rhs if-then-else
		v[39] = m.EmptyKSequence
	} else {
		v[39] = i.Model.NewKApply(m.LblExceptionXuIELEXhyphenTESTING, // as-is exception_IELE-TESTING
		)
	}
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXuXcolonXuXuIELEXhyphenDATA, // as-is _:__IELE-DATA
						v[8 /*TESTID*/],
						i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
							v[38],
						),
					),
				),
				v[39],
				i.Model.NewKApply(m.LblClearXuIELEXhyphenTESTING, // as-is clear_IELE-TESTING
				),
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					i.Model.NewKApply(m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, // as-is {_}_IELE-DATA
						v[13 /*TESTS*/],
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS50(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 50, "{| rule `<generatedTop>`(`<k>`(``instructionList(INSTR,INSTRS)=>`check_IELE-WELL-FORMEDNESS`(.KList)~>INSTR~>INSTRS``~>DotVar1),_3,_4,_5,_6,_7,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_0,_1,_2),_8,_9) requires `_andBool_`(isInstructions(INSTRS),isInstruction(INSTR)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(94c9b8b1fc9f9c4459e75fb280834f4ffdfaca602a2d540325cf4c6bead0bc2a) contentStartColumn(10) contentStartLine(179) org.kframework.attributes.Location(Location(179,10,180,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuIELEXhyphenWELLXhyphenFORMEDNESS, // as-is check_IELE-WELL-FORMEDNESS
				),
				v[5 /*INSTR*/],
				v[7 /*INSTRS*/],
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_3*/],
		v[12 /*_4*/],
		v[14 /*_5*/],
		v[16 /*_6*/],
		v[18 /*_7*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[23 /*_0*/],
			v[25 /*_1*/],
			v[27 /*_2*/],
		),
		v[29 /*_8*/],
		v[31 /*_9*/],
	), nil
}

func (i *Interpreter) stepRHS52(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 52, "{| rule `<generatedTop>`(`<k>`(`` `log__IELE-COMMON`(HOLE)=>HOLE~>`#freezerlog__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(10ede96b974da677f6b1d11cfb3a58f170a9d08cc1f173a8632e92e0effcad17) heat() hybrid() org.kframework.attributes.Location(Location(208,22,208,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(899929247) strict(1)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerlogXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerlog__IELE-COMMON0_
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS53(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 53, "{| rule `<generatedTop>`(`<k>`(``checkName(NAME)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isIeleName(NAME),`_orBool__BOOL`(`_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token(\"5\",\"Int\")),`_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token(\"0\",\"Int\"),#token(\"5\",\"Int\")),#token(\"\\\"iele.\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1ee9659d76451ce1745c736483c0defc40be210ab49b39d57c1888934a6607c3) contentStartColumn(10) contentStartLine(340) org.kframework.attributes.Location(Location(340,10,341,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		v[8 /*_0*/],
		v[10 /*_1*/],
		v[12 /*_2*/],
		v[14 /*_3*/],
		v[16 /*_4*/],
		v[18 /*_5*/],
		v[20 /*_6*/],
		v[22 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS57(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 57, "{| rule `<generatedTop>`(`<k>`(``checkNameArgs(`.List{\"localNameList\"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e6b811f7899bce6b05f443103581971ca494cb2648e83ef724d886819a53f361) contentStartColumn(10) contentStartLine(153) org.kframework.attributes.Location(Location(153,10,153,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		v[7 /*_0*/],
		v[9 /*_1*/],
		v[11 /*_2*/],
		v[13 /*_3*/],
		v[15 /*_4*/],
		v[17 /*_5*/],
		v[19 /*_6*/],
		v[21 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS431(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 431, "{| rule `<generatedTop>`(`<k>`(``checkNameArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkName(N)~>checkNameArgs(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(730ef917364f52e8fbd71094bf9502cd139149a69ab7d6c2f3dad387a8cb48df) contentStartColumn(10) contentStartLine(152) org.kframework.attributes.Location(Location(152,10,152,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[7 /*N*/],
				),
				i.Model.NewKApply(m.LblCheckNameArgs, // as-is checkNameArgs
					v[9 /*ARGS*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS58(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 58, "{| rule `<generatedTop>`(`<k>`(``#deductMemory(OLDPEAK)=>`_-Int__INT`(`Cmem`(SCHED,NEWPEAK),`Cmem`(SCHED,OLDPEAK))~>`#deductGas_IELE-GAS`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,`<schedule>`(SCHED),_30,_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(NEWPEAK),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_32) requires `_andBool_`(`_andBool_`(isInt(OLDPEAK),isSchedule(SCHED)),isInt(NEWPEAK)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c719e4fef3ade4bf30cc2c6a2fd652ca8f2c6900fdc42d8ed400f717466fb1c) contentStartColumn(10) contentStartLine(400) org.kframework.attributes.Location(Location(400,10,402,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[89], i.evalErr = i.evalCmem( // `Cmem`(SCHED,NEWPEAK)
		v[19 /*SCHED*/],
		v[54 /*NEWPEAK*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[90], i.evalErr = i.evalCmem( // `Cmem`(SCHED,OLDPEAK)
		v[19 /*SCHED*/],
		v[5 /*OLDPEAK*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[88], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`Cmem`(SCHED,NEWPEAK),`Cmem`(SCHED,OLDPEAK))
		v[89],
		v[90],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[88],
				i.Model.NewKApply(m.LblXhashdeductGasXuIELEXhyphenGAS, // as-is #deductGas_IELE-GAS
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_28*/],
		v[16 /*_29*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[19 /*SCHED*/],
		),
		v[21 /*_30*/],
		v[23 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				v[45 /*_5*/],
				v[47 /*_6*/],
				v[49 /*_7*/],
				v[51 /*_8*/],
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[54 /*NEWPEAK*/],
				),
				v[56 /*_9*/],
				v[58 /*_10*/],
				v[60 /*_11*/],
				v[62 /*_12*/],
				v[64 /*_13*/],
			),
			v[66 /*_18*/],
			v[68 /*_19*/],
			v[70 /*_20*/],
			v[72 /*_21*/],
			v[74 /*_22*/],
			v[76 /*_23*/],
			v[78 /*_24*/],
			v[80 /*_25*/],
			v[82 /*_26*/],
			v[84 /*_27*/],
		),
		v[86 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS59(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 59, "{| rule `<generatedTop>`(`<k>`(`` `_=shift_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=shift_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8445586802f28452ea09e0d7ab1cbcc773bc30ea75a2bea711e13065a95500b1) heat() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=shift_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS661(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 661, "{| rule `<generatedTop>`(`<k>`(`` `_=shift_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=shift_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ac3eacd19b7a732517892c40e9372a4a2d0da9d67082b148c58f5a4c47987a7d) heat() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=shift_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS62(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 62, "{| rule `<generatedTop>`(`<k>`(`` `_=bswap_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=bswap_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(787bd002050e50462d6039c2d21ff13a4def5d9f9219ef0126e04b9178254ebf) heat() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=bswap_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS141(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 141, "{| rule `<generatedTop>`(`<k>`(`` `_=bswap_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=bswap_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1d3d91add15c94fe384051005d6bf4c98687db9e938e8b8c55710de644138f26) heat() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=bswap_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS68(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 68, "{| rule `<generatedTop>`(`<k>`(`` `_=call_(_)_IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=call_(_)_IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7a73914af6642262dc802aa4be0e99ccec2a06ffdb959cd5e31bd5038f4fc574) heat() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(515809288) strict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=call_(_)_IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS589(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 589, "{| rule `<generatedTop>`(`<k>`(`` `_=call_(_)_IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=call_(_)_IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c2f2e29d8f364e4917fa732546edb197c5b96e6aeb30d875ec12e86d7abddd1) heat() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(515809288) strict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=call_(_)_IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS71(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 71, "{| rule `<generatedTop>`(`<k>`(`` `.List{\"instructionList\"}`(.KList)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bab10e606ce7f995d8e2fcd9ea52b4a6834324e99e458360c1c09a378e2a1344) contentStartColumn(10) contentStartLine(181) org.kframework.attributes.Location(Location(181,10,181,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		v[6 /*_0*/],
		v[8 /*_1*/],
		v[10 /*_2*/],
		v[12 /*_3*/],
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		v[20 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS74(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 74, "{| rule `<generatedTop>`(`<k>`(`` `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)=>checkName(NAME)~>checkArgs(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(NAME)~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),isMap(TYPES)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token(\"init\",\"IeleName\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f2f02630a21a3624fd9d2d4e98c07cea5411be9c3e81fc1305f184786b811d02) contentStartColumn(10) contentStartLine(123) org.kframework.attributes.Location(Location(123,10,126,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[55], i.evalErr = i.evalXhashsizeNames( // #sizeNames(ARGS)
		v[9 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[54], i.evalErr = i.evalInts( // ints(#sizeNames(ARGS))
		v[55],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[53], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList)))
		v[7 /*NAME*/],
		i.Model.NewKApply(m.LblFunType, // as-is funType
			v[54],
			i.Model.NewKApply(m.LblUnknownXuIELEXhyphenWELLXhyphenFORMEDNESS, // as-is unknown_IELE-WELL-FORMEDNESS
			),
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalXuMapXu( // `_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))
		v[33 /*TYPES*/],
		v[53],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[7 /*NAME*/],
				),
				i.Model.NewKApply(m.LblCheckArgs, // as-is checkArgs
					v[9 /*ARGS*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_6*/],
		v[16 /*_7*/],
		v[18 /*_8*/],
		v[20 /*_9*/],
		v[22 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[25 /*_3*/],
			v[27 /*_4*/],
			v[29 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[52],
				),
				v[35 /*_0*/],
				v[37 /*_1*/],
				i.Model.NewKApply(m.LblXltfunctionBodiesXgt, // as-is <functionBodies>
					i.Model.AssembleKSequence(
						i.Model.NewKApply(m.LblProcessFunction, // as-is processFunction
							v[7 /*NAME*/],
						),
						v[11 /*BLOCKS*/],
						v[40 /*DotVar4*/],
					),
				),
				v[42 /*_2*/],
			),
		),
		v[44 /*_11*/],
		v[46 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS79(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 79, "{| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(12c1ff599ca13410553e768b4a18a49c8c1554dd30ec075c6d9fc0902b26f5ce) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=load_,_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS384(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 384, "{| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c2cba54a0c0800d6dbc80a7a78b4a2436805c189d5a1b12b3ac96395e946b6d1) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=load_,_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS120(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 120, "{| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON1_2`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(125f8e5af36aa04f7f2ef263228dadbac836c207f7fdb56ab0e1cd69bfb2bd36) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=load_,_,__IELE-COMMON1_2
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS81(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 81, "{| rule `<generatedTop>`(`<k>`(``processFunction(NAME)=>.K``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,_2,_3,_27=>`<currentFunction>`(`<functionName>`(NAME),initLabelsCell(.KList),initCurrentInstructionsCell(.KList)))),_12,_13) requires `_andBool_`(isIeleName(NAME),isCurrentFunctionCell(_27)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed7f5c2e3d6d562c4ce92336cca8aa8023dc549faac602e41794d1b40020f94e) contentStartColumn(10) contentStartLine(130) org.kframework.attributes.Location(Location(130,10,134,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalInitLabelsCell(config, -1) // initLabelsCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalInitCurrentInstructionsCell(config, -1) // initCurrentInstructionsCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		v[8 /*_7*/],
		v[10 /*_8*/],
		v[12 /*_9*/],
		v[14 /*_10*/],
		v[16 /*_11*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[19 /*_4*/],
			v[21 /*_5*/],
			v[23 /*_6*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[26 /*_0*/],
				v[28 /*_1*/],
				v[30 /*_2*/],
				v[32 /*_3*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					i.Model.NewKApply(m.LblXltfunctionNameXgt, // as-is <functionName>
						v[5 /*NAME*/],
					),
					v[41],
					v[42],
				),
			),
		),
		v[36 /*_12*/],
		v[38 /*_13*/],
	), nil
}

func (i *Interpreter) stepRHS82(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 82, "{| rule `<generatedTop>`(`<k>`(`` `#pushCallStack_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_15,`<callStack>`(DotVar3=>`_List_`(`ListItem`(`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)),DotVar3)),_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c68276cfba34d7285e18d104c5c875086a46f9b6f7998426cd1c9ca28e1d3f6f) contentStartColumn(10) contentStartLine(252) org.kframework.attributes.Location(Location(252,10,254,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[99], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalListItem( // `ListItem`(`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14))
		i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
			v[33 /*_0*/],
			v[35 /*_1*/],
			v[37 /*_2*/],
			v[39 /*_3*/],
			v[41 /*_4*/],
			v[43 /*_5*/],
			v[45 /*_6*/],
			v[47 /*_7*/],
			v[49 /*_8*/],
			v[51 /*_9*/],
			v[53 /*_10*/],
			v[55 /*_11*/],
			v[57 /*_12*/],
			v[59 /*_13*/],
			v[61 /*_14*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)),DotVar3)
		v[101],
		v[26 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[99],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_28*/],
		v[14 /*_29*/],
		v[16 /*_30*/],
		v[18 /*_31*/],
		v[20 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_15*/],
			i.Model.NewKApply(m.LblXltcallStackXgt, // as-is <callStack>
				v[100],
			),
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				v[43 /*_5*/],
				v[45 /*_6*/],
				v[47 /*_7*/],
				v[49 /*_8*/],
				v[51 /*_9*/],
				v[53 /*_10*/],
				v[55 /*_11*/],
				v[57 /*_12*/],
				v[59 /*_13*/],
				v[61 /*_14*/],
			),
			v[63 /*_18*/],
			v[65 /*_19*/],
			v[67 /*_20*/],
			v[69 /*_21*/],
			v[71 /*_22*/],
			v[73 /*_23*/],
			v[75 /*_24*/],
			v[77 /*_25*/],
			v[79 /*_26*/],
			v[81 /*_27*/],
		),
		v[83 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS84(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 84, "{| rule `<generatedTop>`(`<k>`(`` `#dropSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,`<substateStack>`(`_List_`(`ListItem`(_105),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires isKItem(_105) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7a16dc757da5522b17cbf8e573528a584dd393207b506e3390d9dec2d3ecbbab) contentStartColumn(10) contentStartLine(313) org.kframework.attributes.Location(Location(313,10,313,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[58], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[60], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[59], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[60],
		v[33 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[58],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_14*/],
		v[14 /*_15*/],
		v[16 /*_16*/],
		v[18 /*_17*/],
		v[20 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_0*/],
			v[25 /*_1*/],
			v[27 /*_2*/],
			i.Model.NewKApply(m.LblXltsubstateStackXgt, // as-is <substateStack>
				v[59],
			),
			v[35 /*_3*/],
			v[37 /*_4*/],
			v[39 /*_5*/],
			v[41 /*_6*/],
			v[43 /*_7*/],
			v[45 /*_8*/],
			v[47 /*_9*/],
			v[49 /*_10*/],
			v[51 /*_11*/],
			v[53 /*_12*/],
			v[55 /*_13*/],
		),
		v[57 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS85(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 85, "{| rule `<generatedTop>`(`<k>`(`` `#finishTypeChecking_IELE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(_329=>#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires isBool(_329) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f0b4dd9074e58ba4092ced4a2189aa612769386ed43c7ce3e781acb6919e543) contentStartColumn(10) contentStartLine(1379) org.kframework.attributes.Location(Location(1379,10,1380,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_3*/],
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[24 /*_0*/],
			v[26 /*_1*/],
			v[28 /*_2*/],
		),
		v[30 /*_7*/],
		v[32 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS88(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 88, "{| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_`(K0,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c905854672dcdbab686d413d3ea97b676fdbba5f48650b48ac0039f9d59aefd1) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS395(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 395, "{| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fa236d995a4912acaaa96bfbdcf2b45649ff9b70ee940cba5959aa96c887dbb) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu3, // as-is #freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS592(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 592, "{| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d3e898ddb77b3f2e907df7dadf7f4cdcb5149b4ad69ef7a24d5fae96ae24541) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[13 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS539(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 539, "{| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(904426498c2f8ef9d345c05163b76fcca64982c2f650ae946d8e1038939ca4d5) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS96(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 96, "{| rule `<generatedTop>`(`<k>`(`` `log_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezerlog_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b4fb55e3296dff1c7e7bb37864dcaf62edb723918b7acd720cb41827502a645b) heat() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(949684105) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerlogXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerlog_,__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS154(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 154, "{| rule `<generatedTop>`(`<k>`(`` `log_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerlog_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6e4b90f76406434bb13ba6db7c0090ba3589eca6b0dd1a57be7ce2a87c6378b5) heat() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(949684105) seqstrict(1,2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerlogXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezerlog_,__IELE-COMMON1_
					v[7 /*K1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS98(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 98, "{| rule `<generatedTop>`(`<k>`(`` `_=sext_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=sext_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(145dd21f933950d0daa6abed195b63f17fac937caf296bff658bc213009d71f0) heat() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(418179060) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=sext_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS549(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 549, "{| rule `<generatedTop>`(`<k>`(`` `_=sext_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=sext_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d980f3e4e41c345c259ee138ca20f0e47d60ff13de85b990689cb0dfa2f10a3) heat() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(418179060) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=sext_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS101(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 101, "{| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c7ddf0613e023769eca7e0472e3794d80cfdc72f1e4a5dfebc21d77b6be0f61a) contentStartColumn(10) contentStartLine(782) org.kframework.attributes.Location(Location(782,10,783,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGselfdestructXuIELEXhyphenGAS, // as-is Gselfdestruct_IELE-GAS
		),
		v[5 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[34],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS351(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 351, "{| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_+Int_`(`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED),`_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`_andBool_`(`_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_=/=Int__INT`(BAL,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ab36ddf8802c5c4e48f574b6df2a59974862ab31796799841c78eff8cbd1c10) contentStartColumn(10) contentStartLine(780) org.kframework.attributes.Location(Location(780,10,781,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[35], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGselfdestructXuIELEXhyphenGAS, // as-is Gselfdestruct_IELE-GAS
		),
		v[5 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGnewaccountXuIELEXhyphenGAS, // as-is Gnewaccount_IELE-GAS
		),
		v[5 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED),`_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED))
		v[35],
		v[36],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[34],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[37],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS535(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 535, "{| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`notBool_`(ISEMPTY)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(da5131596cd65ae81f225584cd02dbcb6173af3f768e1961389d9266014617a1) contentStartColumn(10) contentStartLine(784) org.kframework.attributes.Location(Location(784,10,785,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[32], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGselfdestructXuIELEXhyphenGAS, // as-is Gselfdestruct_IELE-GAS
		),
		v[5 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[32],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS320(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 320, "{| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(K0,HOLE,K2)=>HOLE~>`#freezerCselfdestruct1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a36ec97a7469572171f1b504395d9c7ca44ac56d568dc2feeffc4b92f3150438) heat() klabel(Cselfdestruct) org.kframework.attributes.Location(Location(778,24,778,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(1309129055) strict(2)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerCselfdestruct1Xu, // as-is #freezerCselfdestruct1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS103(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 103, "{| rule `<generatedTop>`(`<k>`(`` `#create_______IELE`(ACCTFROM,ACCTTO,GAVAIL,VALUE,CODE,ARGS)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#initAccount__IELE-INFRASTRUCTURE`(ACCTTO)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCreate_______IELE`(ACCTFROM,ACCTTO,CODE,GAVAIL,VALUE,ARGS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCTTO)),isInt(VALUE)),isInt(ACCTFROM)),isInt(GAVAIL)),isInts(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5c158d56569b5ade473941241f5cf7ee07241244260be61a4db7f06e0eaa79cf) contentStartColumn(10) contentStartLine(1392) org.kframework.attributes.Location(Location(1392,10,1396,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashinitAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #initAccount__IELE-INFRASTRUCTURE
					v[7 /*ACCTTO*/],
				),
				i.Model.NewKApply(m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE, // as-is #transferFunds____IELE-INFRASTRUCTURE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[11 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashmkCreateXuXuXuXuXuXuXuIELE, // as-is #mkCreate_______IELE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[13 /*CODE*/],
					v[9 /*GAVAIL*/],
					v[11 /*VALUE*/],
					v[15 /*ARGS*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS106(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 106, "{| rule `<generatedTop>`(`<k>`(``checkLVals(lvalueList(LVAL,LVALS))=>checkLVal(LVAL)~>checkLVals(LVALS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValues(LVALS),isLValue(LVAL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(14ca7335de44425ec6c6a5d02d2e47cdbffc094b908c0fee3c4f020d4045dbf2) contentStartColumn(10) contentStartLine(387) org.kframework.attributes.Location(Location(387,10,387,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[6 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					v[8 /*LVALS*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		v[11 /*_0*/],
		v[13 /*_1*/],
		v[15 /*_2*/],
		v[17 /*_3*/],
		v[19 /*_4*/],
		v[21 /*_5*/],
		v[23 /*_6*/],
		v[25 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS559(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 559, "{| rule `<generatedTop>`(`<k>`(``checkLVals(`.List{\"lvalueList\"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bcd5f7590daee13b41df315a0d6cfb48d183f5eb284248ad7293e46bedb5d872) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,388,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		v[7 /*_0*/],
		v[9 /*_1*/],
		v[11 /*_2*/],
		v[13 /*_3*/],
		v[15 /*_4*/],
		v[17 /*_5*/],
		v[19 /*_6*/],
		v[21 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS110(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 110, "{| rule `<generatedTop>`(`<k>`(``#registerDelta(`%__IELE-COMMON`(REG),NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))))),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(REG)),isArray(REGS)),isInt(NEWSIZE)),isInt(CURR)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b09c6ef4a36919022d65a5b9964ca84dfbc01dfe48eb98dae576a61f7246b55d) contentStartColumn(10) contentStartLine(342) org.kframework.attributes.Location(Location(342,10,345,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[60 /*CURR*/],
		v[8 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[52 /*REGS*/],
		v[6 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalIntSize( // intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(CURR,NEWSIZE),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))))
		v[94],
		v[95],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))))
		v[57 /*PEAK*/],
		v[93],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[57 /*PEAK*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_26*/],
		v[19 /*_27*/],
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_12*/],
			v[30 /*_13*/],
			v[32 /*_14*/],
			v[34 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[52 /*REGS*/],
				),
				v[54 /*_7*/],
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[92],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[60 /*CURR*/],
				),
				v[62 /*_8*/],
				v[64 /*_9*/],
				v[66 /*_10*/],
				v[68 /*_11*/],
			),
			v[70 /*_16*/],
			v[72 /*_17*/],
			v[74 /*_18*/],
			v[76 /*_19*/],
			v[78 /*_20*/],
			v[80 /*_21*/],
			v[82 /*_22*/],
			v[84 /*_23*/],
			v[86 /*_24*/],
			v[88 /*_25*/],
		),
		v[90 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS112(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 112, "{| rule `<generatedTop>`(`<k>`(`` `ret__IELE-COMMON`(HOLE)=>HOLE~>`#freezerret__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5492444fb324452d7a90e2fa57caf3c8374c2b074e0dcf40771bade94c153df0) heat() hybrid() org.kframework.attributes.Location(Location(198,25,198,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(372469954) strict(1)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerretXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerret__IELE-COMMON0_
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS121(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 121, "{| rule `<generatedTop>`(`<k>`(`` `_=sub_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=sub_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3a96a7c79abad3550adca913f8c6ab257103393c86fc4a2f978552d04da24bdf) heat() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=sub_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS648(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 648, "{| rule `<generatedTop>`(`<k>`(`` `_=sub_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=sub_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3e0263f611fa84c6c03ee70338311c4759f2025de05013695b8275b31ae615e3) heat() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=sub_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS127(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 127, "{| rule `<generatedTop>`(`<k>`(`` `_=byte_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=byte_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(41c8f887977f11fbdc00a887d10c792b9b1ab6d96c130ca6dcaa2c22ae9cf753) heat() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(527829831) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=byte_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS468(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 468, "{| rule `<generatedTop>`(`<k>`(`` `_=byte_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=byte_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d8733c903caf3959831888ded665cef06a3ef315e54f0f030cb26579601e23a3) heat() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(527829831) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=byte_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS129(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 129, "{| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(OP),`_andBool_`(`notBool_`(isAccountCallInst(OP)),`notBool_`(isCreateInst(OP)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b926e28c6edd3e4bd27665bebbec1d651344ba490cd46287a094ee0c15a1ef6a) contentStartColumn(10) contentStartLine(640) org.kframework.attributes.Location(Location(640,10,640,121)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS190(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 190, "{| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_,_=create_(_)send__IELE-COMMON`(_427,_428,_429,_430,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token(\"0\",\"Int\")),`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\")),.K)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isOperands(_430)),isLValue(_428)),isLValue(_427)),isIeleName(_429)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(87c36d8fb01c3ec68d5149e8b45170e8f9d76edc3cbda50ba8dc1d35137b98f0) contentStartColumn(10) contentStartLine(645) org.kframework.attributes.Location(Location(645,10,645,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[103], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[59 /*REGS*/],
		v[15 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int"))
		v[102],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)
	if m.IsTrue(v[101]) { // rhs if-then-else
		v[100] = i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
			/* rhs KToken */ constInt4,
		)
	} else {
		v[100] = m.EmptyKSequence
	}
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[100],
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_28*/],
		v[26 /*_29*/],
		v[28 /*_30*/],
		v[30 /*_31*/],
		v[32 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_14*/],
			v[37 /*_15*/],
			v[39 /*_16*/],
			v[41 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[59 /*REGS*/],
				),
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS379(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 379, "{| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_459,_460,_461,_462,`%__IELE-COMMON`(REG1),`%__IELE-COMMON`(REG2)))=>`#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1)),#token(\"0\",\"Int\")),`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)),#token(\"0\",\"Int\"))),`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\")),.K)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_459),isArray(REGS)),isOperand(_460)),isOperands(_462)),isInt(REG2)),isInt(REG1)),isOperand(_461)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6bac27a2a4ede568502be5caf2afe2abfa8b2b75ba857b26f5dc7a5fc35ec783) contentStartColumn(10) contentStartLine(642) org.kframework.attributes.Location(Location(642,10,642,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[107], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG1)
		v[62 /*REGS*/],
		v[15 /*REG1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1))
		v[107],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1)),#token("0","Int"))
		v[106],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_orBool__BOOL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1)),#token("0","Int")),`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)),#token("0","Int")))
	v[104] = v[105]
	if !m.IsTrue(v[104]) {
		v[110], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG2)
			v[62 /*REGS*/],
			v[18 /*REG2*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[109], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2))
			v[110],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[108], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)),#token("0","Int"))
			v[109],
			/* rhs KToken */ m.IntZero,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[104] = v[108]
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1)),#token("0","Int")),`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)),#token("0","Int"))),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)
	if m.IsTrue(v[104]) { // rhs if-then-else
		v[103] = i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
			/* rhs KToken */ constInt4,
		)
	} else {
		v[103] = m.EmptyKSequence
	}
	v[111], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[103],
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[111],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_28*/],
		v[29 /*_29*/],
		v[31 /*_30*/],
		v[33 /*_31*/],
		v[35 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[38 /*_14*/],
			v[40 /*_15*/],
			v[42 /*_16*/],
			v[44 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[47 /*_0*/],
				v[49 /*_1*/],
				v[51 /*_2*/],
				v[53 /*_3*/],
				v[55 /*_4*/],
				v[57 /*_5*/],
				v[59 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[62 /*REGS*/],
				),
				v[64 /*_7*/],
				v[66 /*_8*/],
				v[68 /*_9*/],
				v[70 /*_10*/],
				v[72 /*_11*/],
				v[74 /*_12*/],
				v[76 /*_13*/],
			),
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
			v[94 /*_26*/],
			v[96 /*_27*/],
		),
		v[98 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS465(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 465, "{| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(_330,_331,_332,_333,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token(\"0\",\"Int\")),`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\")),.K)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isLValues(_330)),isOperand(_331)),isOperands(_333)),isOperand(_332)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(462d7a13680331bdd50e29856c446a41ce08dce3df61f5da4a810be4f36feaed) contentStartColumn(10) contentStartLine(644) org.kframework.attributes.Location(Location(644,10,644,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[103], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[59 /*REGS*/],
		v[15 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int"))
		v[102],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)
	if m.IsTrue(v[101]) { // rhs if-then-else
		v[100] = i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
			/* rhs KToken */ constInt4,
		)
	} else {
		v[100] = m.EmptyKSequence
	}
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[100],
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_28*/],
		v[26 /*_29*/],
		v[28 /*_30*/],
		v[30 /*_31*/],
		v[32 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_14*/],
			v[37 /*_15*/],
			v[39 /*_16*/],
			v[41 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[59 /*REGS*/],
				),
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS568(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 568, "{| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_,_=copycreate_(_)send__IELE-COMMON`(_322,_323,_324,_325,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token(\"0\",\"Int\")),`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\")),.K)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isOperand(_324)),isOperands(_325)),isLValue(_323)),isLValue(_322)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04097218c590035c77c00215721a532030013024e35c8c1ff655e65b816eb605) contentStartColumn(10) contentStartLine(646) org.kframework.attributes.Location(Location(646,10,646,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[103], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[59 /*REGS*/],
		v[15 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int"))
		v[102],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)
	if m.IsTrue(v[101]) { // rhs if-then-else
		v[100] = i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
			/* rhs KToken */ constInt4,
		)
	} else {
		v[100] = m.EmptyKSequence
	}
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[100],
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_28*/],
		v[26 /*_29*/],
		v[28 /*_30*/],
		v[30 /*_31*/],
		v[32 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_14*/],
			v[37 /*_15*/],
			v[39 /*_16*/],
			v[41 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[59 /*REGS*/],
				),
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS131(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 131, "{| rule `<generatedTop>`(`<k>`(`` `#pushWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_17,_18,_19,_20,_21,`<iele>`(_0,_1,`<interimStates>`(DotVar3=>`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(ACCTDATA),_14,_15,_16)) requires `_andBool_`(isSet(ACCTS),`_andBool_`(#token(\"true\",\"Bool\"),isAccountCellMap(ACCTDATA))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(27f96ccd1ae4721d69de9f7c73dd5380302f9a3f322fd515ab2ec040d7c72c3b) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,278,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[66], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[68], i.evalErr = i.evalListItem( // `ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS))
		i.Model.NewKApply(m.LblXlbracketXuXpipeXuXrbracketXuIELEXhyphenINFRASTRUCTURE, // as-is {_|_}_IELE-INFRASTRUCTURE
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[59 /*ACCTDATA*/],
			),
			v[56 /*ACCTS*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[67], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)
		v[68],
		v[28 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[66],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_17*/],
		v[14 /*_18*/],
		v[16 /*_19*/],
		v[18 /*_20*/],
		v[20 /*_21*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_0*/],
			v[25 /*_1*/],
			i.Model.NewKApply(m.LblXltinterimStatesXgt, // as-is <interimStates>
				v[67],
			),
			v[30 /*_2*/],
			v[32 /*_3*/],
			v[34 /*_4*/],
			v[36 /*_5*/],
			v[38 /*_6*/],
			v[40 /*_7*/],
			v[42 /*_8*/],
			v[44 /*_9*/],
			v[46 /*_10*/],
			v[48 /*_11*/],
			v[50 /*_12*/],
			v[52 /*_13*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[56 /*ACCTS*/],
			),
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[59 /*ACCTDATA*/],
			),
			v[61 /*_14*/],
			v[63 /*_15*/],
			v[65 /*_16*/],
		),
	), nil
}

func (i *Interpreter) stepRHS134(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 134, "{| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),IDX,GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_5,_6,_7,_8,_9,_10,_11) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isBool(STATIC)),isInt(IDX)),isInt(ACCTFROM)),isInts(ARGS)),isMap(LBLS)),isInt(GLIMIT)),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed12ae4b75be6b1c05c34aee647fc0e944006918ee8cf8973d5cc2f8f50c0dc6) contentStartColumn(10) contentStartLine(1207) org.kframework.attributes.Location(Location(1207,10,1209,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[55], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt1,
				),
				v[32 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[55],
				v[38 /*SREST*/],
			),
		),
		v[40 /*_5*/],
		v[42 /*_6*/],
		v[44 /*_7*/],
		v[46 /*_8*/],
		v[48 /*_9*/],
		v[50 /*_10*/],
		v[52 /*_11*/],
	), nil
}

func (i *Interpreter) stepRHS283(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 283, "{| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,CODE,`@__IELE-COMMON`(FUNC),GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(CODE),isInt(ACCTTO)),isInt(VALUE)),isInt(ACCTFROM)),isInts(ARGS)),isBool(STATIC)),isIeleName(FUNC)),isInt(GLIMIT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c860a70a83aa78e6c0e3ba7a297e95347ea7d017e2587d39978defbfc5836033) contentStartColumn(10) contentStartLine(1202) org.kframework.attributes.Location(Location(1202,10,1205,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE, // as-is #transferFunds____IELE-INFRASTRUCTURE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[16 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashmkCallXuXuXuXuXuXuXuXuXuIELE, // as-is #mkCall_________IELE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[9 /*CODE*/],
					v[12 /*FUNC*/],
					v[14 /*GLIMIT*/],
					v[16 /*VALUE*/],
					v[18 /*ARGS*/],
					v[20 /*STATIC*/],
				),
				v[21 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[27 /*SREST*/],
			),
		),
		v[29 /*_0*/],
		v[31 /*_1*/],
		v[33 /*_2*/],
		v[35 /*_3*/],
		v[37 /*_4*/],
		v[39 /*_5*/],
		v[41 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS140(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 140, "{| rule `<generatedTop>`(`<k>`(`` `#adjustGas_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,`<schedule>`(SCHED),`<checkGas>`(#token(\"true\",\"Bool\")),_30,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL=>ceilDiv(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_31) requires `_andBool_`(isSchedule(SCHED),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9bd21c6418fc0e6f52b2af27f1f811fc028975f00ad1bf4ab60782394011a8c9) contentStartColumn(10) contentStartLine(191) org.kframework.attributes.Location(Location(191,10,191,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[86], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[88], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[17 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[87], i.evalErr = i.evalCeilDiv( // ceilDiv(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[58 /*GAVAIL*/],
		v[88],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[86],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_28*/],
		v[14 /*_29*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[17 /*SCHED*/],
		),
		i.Model.NewKApply(m.LblXltcheckGasXgt, // as-is <checkGas>
			/* rhs KToken */ m.BoolTrue,
		),
		v[21 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_14*/],
			v[26 /*_15*/],
			v[28 /*_16*/],
			v[30 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				v[39 /*_3*/],
				v[41 /*_4*/],
				v[43 /*_5*/],
				v[45 /*_6*/],
				v[47 /*_7*/],
				v[49 /*_8*/],
				v[51 /*_9*/],
				v[53 /*_10*/],
				v[55 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[87],
				),
				v[60 /*_12*/],
				v[62 /*_13*/],
			),
			v[64 /*_18*/],
			v[66 /*_19*/],
			v[68 /*_20*/],
			v[70 /*_21*/],
			v[72 /*_22*/],
			v[74 /*_23*/],
			v[76 /*_24*/],
			v[78 /*_25*/],
			v[80 /*_26*/],
			v[82 /*_27*/],
		),
		v[84 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS145(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 145, "{| rule `<generatedTop>`(`<k>`(``checkArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkNameArgs(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26564b2ac3d979f0c705b6d892649a07bf8b3a7fa968cc8d0585ad28f225eb6b) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckNameArgs, // as-is checkNameArgs
					v[9 /*ARGS*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS563(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 563, "{| rule `<generatedTop>`(`<k>`(``checkArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkIntArgs(localNameList(`%__IELE-COMMON`(N),ARGS),#token(\"0\",\"Int\"))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isNumericIeleName(N),isLocalNames(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e8321c7d216ff7a446be659b024d95bfd611d9b9b77f45ade2d724b79a3e8c95) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckIntArgs, // as-is checkIntArgs
					i.Model.NewKApply(m.LblLocalNameList, // as-is localNameList
						i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
							v[7 /*N*/],
						),
						v[9 /*ARGS*/],
					),
					/* rhs KToken */ m.IntZero,
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS374(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 374, "{| rule `<generatedTop>`(`<k>`(``checkArgs(_34)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isInt(_34) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8cc198c93d2bcb35b491e19c9b8d53871b25cb028c79bc0ad3e74c4be2e402fb) contentStartColumn(10) contentStartLine(148) org.kframework.attributes.Location(Location(148,10,148,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		v[8 /*_0*/],
		v[10 /*_1*/],
		v[12 /*_2*/],
		v[14 /*_3*/],
		v[16 /*_4*/],
		v[18 /*_5*/],
		v[20 /*_6*/],
		v[22 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS638(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 638, "{| rule `<generatedTop>`(`<k>`(``checkArgs(`.List{\"localNameList\"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(421c2f2faa9a76593e6391a2d9d2f489ea0fb585d9ff2c2725b7f2c3ee3143da) contentStartColumn(10) contentStartLine(147) org.kframework.attributes.Location(Location(147,10,147,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		v[7 /*_0*/],
		v[9 /*_1*/],
		v[11 /*_2*/],
		v[13 /*_3*/],
		v[15 /*_4*/],
		v[17 /*_5*/],
		v[19 /*_6*/],
		v[21 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS151(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 151, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>#accountEmpty(ACCT)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(isInt(ACCT),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ffd943da3c89a5132a36988813269cb8f419a9300069569d24d3701c30ddd28f) contentStartColumn(10) contentStartLine(797) org.kframework.attributes.Location(Location(797,10,799,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[5 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
					v[5 /*ACCT*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		v[20 /*_7*/],
		v[22 /*_8*/],
		v[24 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[28 /*ACCTS*/],
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
			v[36 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS153(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 153, "{| rule `<generatedTop>`(`<k>`(`` `_=mul_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=mul_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dfa9517f48b380467bc16e0c6823f027460a4ba80a43c7fb1d9f69fa503efe93) heat() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1324829744) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=mul_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS354(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 354, "{| rule `<generatedTop>`(`<k>`(`` `_=mul_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=mul_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(736c773ddfc2f964dacd3a5e22a132ccedad8149b684d48853dff41b98399823) heat() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1324829744) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=mul_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS155(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 155, "{| rule `<generatedTop>`(`<k>`(``#registerDeltas(`.List{\"lvalueList\"}`(.KList),_185)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInts(_185) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00aa74df914b1eaa0755a787ef6ef44d51a1e0320c21235f595744d3eb668a9d) contentStartColumn(10) contentStartLine(355) org.kframework.attributes.Location(Location(355,10,355,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS159(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 159, "{| rule `<generatedTop>`(`<k>`(``#registerDeltas(_183,`.List{\"operandList\"}`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValues(_183) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(39b54e1b86cf138998e3c977bcd0ea891c4540e3d6f246e8e6ab1f52d9e2aa20) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS511(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 511, "{| rule `<generatedTop>`(`<k>`(``#registerDeltas(lvalueList(REG,REGS),operandList(INT,INTS))=>#registerDelta(REG,intSize(INT))~>#registerDeltas(REGS,INTS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInts(INTS),isInt(INT)),isLValues(REGS)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5b3f1f5ca11f3440fc6c4eaf7c0a525642e1cd1c459ce30c2b23049fc7b3a459) contentStartColumn(10) contentStartLine(354) org.kframework.attributes.Location(Location(354,10,354,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[38], i.evalErr = i.evalIntSize( // intSize(INT)
		v[11 /*INT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[38],
				),
				i.Model.NewKApply(m.LblXhashregisterDeltas, // as-is #registerDeltas
					v[8 /*REGS*/],
					v[13 /*INTS*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS157(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 157, "{| rule `<generatedTop>`(`<k>`(`` `start_IELE-TESTING`(.KList)=>`#loads___IELE`(#regRange(#sizeRegs(VALUES)),VALUES)~>`#execute_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,`<mode>`(`VMTESTS_IELE-CONSTANTS`(.KList)),_28,_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(VALUES),_5,_6,_7,_8,_9,`<fid>`(_755=>#token(\"deposit\",\"IeleName\")),_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(isInts(VALUES),isIeleName(_755)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(40513336d3c4590f2896b502b178e44d2e7ed1fffccde9527a375f074ea06d0a) contentStartColumn(10) contentStartLine(78) org.kframework.attributes.Location(Location(78,10,78,171)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[88], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(VALUES)
		v[43 /*VALUES*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[87], i.evalErr = i.evalXhashregRange( // #regRange(#sizeRegs(VALUES))
		v[88],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[89], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[87],
					v[43 /*VALUES*/],
				),
				i.Model.NewKApply(m.LblXhashexecuteXuIELE, // as-is #execute_IELE
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[89],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_27*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_13*/],
			v[25 /*_14*/],
			v[27 /*_15*/],
			v[29 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[32 /*_0*/],
				v[34 /*_1*/],
				v[36 /*_2*/],
				v[38 /*_3*/],
				v[40 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					v[43 /*VALUES*/],
				),
				v[45 /*_5*/],
				v[47 /*_6*/],
				v[49 /*_7*/],
				v[51 /*_8*/],
				v[53 /*_9*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					/* rhs KToken */ constKTokenSortIeleNamedeposit,
				),
				v[58 /*_10*/],
				v[60 /*_11*/],
				v[62 /*_12*/],
			),
			v[64 /*_17*/],
			v[66 /*_18*/],
			v[68 /*_19*/],
			v[70 /*_20*/],
			v[72 /*_21*/],
			v[74 /*_22*/],
			v[76 /*_23*/],
			v[78 /*_24*/],
			v[80 /*_25*/],
			v[82 /*_26*/],
		),
		v[84 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS449(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 449, "{| rule `<generatedTop>`(`<k>`(`` `start_IELE-TESTING`(.KList)=>`#loads___IELE`(#regRange(#sizeRegs(VALUES)),VALUES)~>`#execute_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,`<mode>`(`NORMAL`(.KList)),_28,_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(VALUES),_5,_6,_7,_8,_9,`<fid>`(_738=>#token(\"deposit\",\"IeleName\")),_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(isInts(VALUES),isIeleName(_738)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6c29678bf0ff6efc7d94e62f532cdb0bbf903baf67c3901e41dabdc4d0660f3b) contentStartColumn(10) contentStartLine(77) org.kframework.attributes.Location(Location(77,10,77,171)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[88], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(VALUES)
		v[43 /*VALUES*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[87], i.evalErr = i.evalXhashregRange( // #regRange(#sizeRegs(VALUES))
		v[88],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[89], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[87],
					v[43 /*VALUES*/],
				),
				i.Model.NewKApply(m.LblXhashexecuteXuIELE, // as-is #execute_IELE
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[89],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_27*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblNORMAL, // as-is NORMAL
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_13*/],
			v[25 /*_14*/],
			v[27 /*_15*/],
			v[29 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[32 /*_0*/],
				v[34 /*_1*/],
				v[36 /*_2*/],
				v[38 /*_3*/],
				v[40 /*_4*/],
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					v[43 /*VALUES*/],
				),
				v[45 /*_5*/],
				v[47 /*_6*/],
				v[49 /*_7*/],
				v[51 /*_8*/],
				v[53 /*_9*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					/* rhs KToken */ constKTokenSortIeleNamedeposit,
				),
				v[58 /*_10*/],
				v[60 /*_11*/],
				v[62 /*_12*/],
			),
			v[64 /*_17*/],
			v[66 /*_18*/],
			v[68 /*_19*/],
			v[70 /*_20*/],
			v[72 /*_21*/],
			v[74 /*_22*/],
			v[76 /*_23*/],
			v[78 /*_24*/],
			v[80 /*_25*/],
			v[82 /*_26*/],
		),
		v[84 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS161(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 161, "{| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token(\"true\",\"Bool\"))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isArray(REGS),isInstruction(OP)),`notBool_`(#changesState(OP,REGS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(90b59462ad0e192f871daf55346a1911c448e317620780f174b04f1389097b59) contentStartColumn(10) contentStartLine(620) org.kframework.attributes.Location(Location(620,10,620,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[88], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[88],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_27*/],
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_13*/],
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[49 /*REGS*/],
				),
				v[51 /*_7*/],
				v[53 /*_8*/],
				v[55 /*_9*/],
				v[57 /*_10*/],
				v[59 /*_11*/],
				v[61 /*_12*/],
				i.Model.NewKApply(m.LblXltstaticXgt, // as-is <static>
					/* rhs KToken */ m.BoolTrue,
				),
			),
			v[65 /*_17*/],
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
		),
		v[85 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS613(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 613, "{| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token(\"true\",\"Bool\"))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isArray(REGS),isInstruction(OP)),#changesState(OP,REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8463e85256d3be1c9cb6bcadc1b1e1860bf22af7917ba4fd8459fa67727cddde) contentStartColumn(10) contentStartLine(621) org.kframework.attributes.Location(Location(621,10,621,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[88], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[88],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_27*/],
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_13*/],
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[49 /*REGS*/],
				),
				v[51 /*_7*/],
				v[53 /*_8*/],
				v[55 /*_9*/],
				v[57 /*_10*/],
				v[59 /*_11*/],
				v[61 /*_12*/],
				i.Model.NewKApply(m.LblXltstaticXgt, // as-is <static>
					/* rhs KToken */ m.BoolTrue,
				),
			),
			v[65 /*_17*/],
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
		),
		v[85 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS314(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 314, "{| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<static>`(#token(\"false\",\"Bool\"))),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires isInstruction(OP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(604e7ec63998a1a6aba8fc4edacf35e204d71998cc55c46c5e59501d74f859a9) contentStartColumn(10) contentStartLine(619) org.kframework.attributes.Location(Location(619,10,619,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[86], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[86],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_28*/],
		v[16 /*_29*/],
		v[18 /*_30*/],
		v[20 /*_31*/],
		v[22 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_14*/],
			v[27 /*_15*/],
			v[29 /*_16*/],
			v[31 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				v[48 /*_7*/],
				v[50 /*_8*/],
				v[52 /*_9*/],
				v[54 /*_10*/],
				v[56 /*_11*/],
				v[58 /*_12*/],
				v[60 /*_13*/],
				i.Model.NewKApply(m.LblXltstaticXgt, // as-is <static>
					/* rhs KToken */ m.BoolFalse,
				),
			),
			v[64 /*_18*/],
			v[66 /*_19*/],
			v[68 /*_20*/],
			v[70 /*_21*/],
			v[72 /*_22*/],
			v[74 /*_23*/],
			v[76 /*_24*/],
			v[78 /*_25*/],
			v[80 /*_26*/],
			v[82 /*_27*/],
		),
		v[84 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS172(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 172, "{| rule `<generatedTop>`(`<k>`(`` `%__IELE-COMMON`(REG)=>`_[_]_ARRAY-SYNTAX`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_31,_32,_33,_34,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_28,_29,_30),`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_35) requires `_andBool_`(isInt(REG),isArray(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c06e5e53c845651652b037f5382c515762bc878c98c95c41b8b9a56e5b84672) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[93], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[56 /*REGS*/],
		v[5 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[93],
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_31*/],
		v[16 /*_32*/],
		v[18 /*_33*/],
		v[20 /*_34*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[25 /*_28*/],
			v[27 /*_29*/],
			v[29 /*_30*/],
		),
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[56 /*REGS*/],
				),
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_35*/],
	), nil
}

func (i *Interpreter) stepRHS175(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 175, "{| rule `<generatedTop>`(`<k>`(``.K=>#deleteAccounts(`Set2List`(ACCTS))``~>#finalizeTx(#token(\"true\",\"Bool\"))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_2,_3,_4,_5,_6,`<substate>`(`<selfDestruct>`(ACCTS=>`.Set`(.KList)),_0,_1),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_andBool_`(isSet(ACCTS),`_>Int__INT`(size(ACCTS),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3360294077c080741cc715637504b6d4bd17cbe560f6e5eea900ec54f9dbbde4) contentStartColumn(10) contentStartLine(682) org.kframework.attributes.Location(Location(682,10,684,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[63], i.evalErr = i.evalSet2List( // `Set2List`(ACCTS)
		v[36 /*ACCTS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXdotSet(config, -1) // `.Set`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeleteAccounts, // as-is #deleteAccounts
					v[63],
				),
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolTrue,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_16*/],
		v[15 /*_17*/],
		v[17 /*_18*/],
		v[19 /*_19*/],
		v[21 /*_20*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_2*/],
			v[26 /*_3*/],
			v[28 /*_4*/],
			v[30 /*_5*/],
			v[32 /*_6*/],
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				i.Model.NewKApply(m.LblXltselfDestructXgt, // as-is <selfDestruct>
					v[65],
				),
				v[38 /*_0*/],
				v[40 /*_1*/],
			),
			v[42 /*_7*/],
			v[44 /*_8*/],
			v[46 /*_9*/],
			v[48 /*_10*/],
			v[50 /*_11*/],
			v[52 /*_12*/],
			v[54 /*_13*/],
			v[56 /*_14*/],
			v[58 /*_15*/],
		),
		v[60 /*_21*/],
	), nil
}

func (i *Interpreter) stepRHS201(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 201, "{| rule `<generatedTop>`(`<k>`(``#finalizeTx(#token(\"true\",\"Bool\"))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_2,_3,_4,_5,_6,`<substate>`(`<selfDestruct>`(_22),_0,_1),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_==K_`(`.Set`(.KList),_22) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(47df3b9d60eca2fc121621fcec11fd1c1ec859578538e1d8162db3b405dac76a) contentStartColumn(10) contentStartLine(659) org.kframework.attributes.Location(Location(659,10,660,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[63], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[63],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_16*/],
		v[15 /*_17*/],
		v[17 /*_18*/],
		v[19 /*_19*/],
		v[21 /*_20*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_2*/],
			v[26 /*_3*/],
			v[28 /*_4*/],
			v[30 /*_5*/],
			v[32 /*_6*/],
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				i.Model.NewKApply(m.LblXltselfDestructXgt, // as-is <selfDestruct>
					v[36 /*_22*/],
				),
				v[38 /*_0*/],
				v[40 /*_1*/],
			),
			v[42 /*_7*/],
			v[44 /*_8*/],
			v[46 /*_9*/],
			v[48 /*_10*/],
			v[50 /*_11*/],
			v[52 /*_12*/],
			v[54 /*_13*/],
			v[56 /*_14*/],
			v[58 /*_15*/],
		),
		v[60 /*_21*/],
	), nil
}

func (i *Interpreter) stepRHS206(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 206, "{| rule `<generatedTop>`(`<k>`(#finalizeTx(#token(\"false\",\"Bool\")=>#token(\"true\",\"Bool\"))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,`<mode>`(`NORMAL`(.KList)),_5,_6,_7,_8,`<network>`(_0,_1,_2,`<txPending>`(`_List_`(`ListItem`(_458),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_3)) requires isKItem(_458) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c306dacd129a14cf52552fb4ca93250cb18afa7ee855ccaba78e03ae2c261126) contentStartColumn(10) contentStartLine(678) org.kframework.attributes.Location(Location(678,10,680,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[41],
		v[36 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolTrue,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_4*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblNORMAL, // as-is NORMAL
			),
		),
		v[17 /*_5*/],
		v[19 /*_6*/],
		v[21 /*_7*/],
		v[23 /*_8*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[26 /*_0*/],
			v[28 /*_1*/],
			v[30 /*_2*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[40],
			),
			v[38 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS654(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 654, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(MINER)``~>#finalizeTx(_400)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_18,`<mode>`(`NORMAL`(.KList)),_19,_20,_21,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(MINER),_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(ACCTS),_14,_15,_16,_17)) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(_400),isInt(MINER)),isSet(ACCTS)),`notBool_`(`Set:in`(MINER,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1609ef5bac765db9decf861028c278027abc7fc793322683e393358549bfe8f3) contentStartColumn(10) contentStartLine(672) org.kframework.attributes.Location(Location(672,10,676,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[68], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[42 /*MINER*/],
				),
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					v[5 /*_400*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[68],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_18*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblNORMAL, // as-is NORMAL
			),
		),
		v[18 /*_19*/],
		v[20 /*_20*/],
		v[22 /*_21*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_0*/],
			v[27 /*_1*/],
			v[29 /*_2*/],
			v[31 /*_3*/],
			v[33 /*_4*/],
			v[35 /*_5*/],
			v[37 /*_6*/],
			v[39 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[42 /*MINER*/],
			),
			v[44 /*_8*/],
			v[46 /*_9*/],
			v[48 /*_10*/],
			v[50 /*_11*/],
			v[52 /*_12*/],
			v[54 /*_13*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[58 /*ACCTS*/],
			),
			v[60 /*_14*/],
			v[62 /*_15*/],
			v[64 /*_16*/],
			v[66 /*_17*/],
		),
	), nil
}

func (i *Interpreter) stepRHS176(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 176, "{| rule `<generatedTop>`(`<k>`(`` `success_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),`<exit-code>`(_757=>#token(\"0\",\"Int\")),_0,_1,_2,_3,_4,_5) requires isInt(_757) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a56d38fe80f5253b3826b3ed0389bc11828c562c44222df52f84e983da2dd265) contentStartColumn(10) contentStartLine(238) org.kframework.attributes.Location(Location(238,10,238,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[26], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[26],
				v[10 /*SREST*/],
			),
		),
		i.Model.NewKApply(m.LblXltexitXhyphencodeXgt, // as-is <exit-code>
			/* rhs KToken */ m.IntZero,
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS177(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 177, "{| rule `<generatedTop>`(`<k>`(`` `_=exp_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=exp_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0841476cd32b6bbc6df05d5fad34b56860180498c0c10dbe7166512c04fa5248) heat() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=exp_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS660(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 660, "{| rule `<generatedTop>`(`<k>`(`` `_=exp_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=exp_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2a66108e12649113228c8b3a1dd91abacaf82369086e08e2d672baefb751a335) heat() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=exp_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS178(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 178, "{| rule `<generatedTop>`(`<k>`(``#ecadd(P1,P2)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_123=>#point(`BN128Add`(P1,P2))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isG1Point(P1),isG1Point(P2)),isInts(_123)),`_andBool_`(isValidPoint(P1),isValidPoint(P2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9eea85c44b6ced1bb155de3814a8a92b8da4fe819e6aa9783ae0179e6a250f5f) contentStartColumn(10) contentStartLine(1681) org.kframework.attributes.Location(Location(1681,10,1682,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[66], i.evalErr = i.evalBN128Add( // `BN128Add`(P1,P2)
		v[5 /*P1*/],
		v[7 /*P2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashpoint( // #point(`BN128Add`(P1,P2))
		v[66],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_14*/],
		v[18 /*_15*/],
		v[20 /*_16*/],
		v[22 /*_17*/],
		v[24 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[65],
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
			v[36 /*_3*/],
			v[38 /*_4*/],
			v[40 /*_5*/],
			v[42 /*_6*/],
			v[44 /*_7*/],
			v[46 /*_8*/],
			v[48 /*_9*/],
			v[50 /*_10*/],
			v[52 /*_11*/],
			v[54 /*_12*/],
			v[56 /*_13*/],
		),
		v[58 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS377(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 377, "{| rule `<generatedTop>`(`<k>`(``#ecadd(P1,P2)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isG1Point(P1),isG1Point(P2)),`_orBool__BOOL`(`notBool_`(isValidPoint(P1)),`notBool_`(isValidPoint(P2)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f0ec00ba8f74a3c949c966f04af733ad0152e5660084ad112f5de9ebd89be936) contentStartColumn(10) contentStartLine(1679) org.kframework.attributes.Location(Location(1679,10,1680,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS180(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 180, "{| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_2`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(723681663f263bb49bfd8f209c60305b5ec50a4403827ceddb65c7e601e8f5a6) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=expmod_,_,__IELE-COMMON1_2
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS513(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 513, "{| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37681ba6f022d90d05cae03aaac5b3ece5e12dd84b98a6153bf00325d4b425ae) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[40], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=expmod_,_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS565(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 565, "{| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e53209095e6de346c5191d2e818a496bb40b30cf1e0bb7c32dc4bfd6a9be1d7c) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=expmod_,_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS185(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 185, "{| rule `<generatedTop>`(`<k>`(`` `#exceptional?[_]_IELE`(OP)=>`#invalid?[_]_IELE`(OP)~>`#static?[_]_IELE`(OP)~>`#negativeCall?[_]_IELE`(OP)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInstruction(OP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3d0caa169775f15a52ae9b68425a4ad685a61a5a50ed51e079802856bca76496) contentStartColumn(10) contentStartLine(602) org.kframework.attributes.Location(Location(602,10,602,107)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[28], i.evalErr = i.evalXhashinvalidXquesXlsqbXuXrsqbXuIELE( // `#invalid?[_]_IELE`(OP)
		v[5 /*OP*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[28],
				i.Model.NewKApply(m.LblXhashstaticXquesXlsqbXuXrsqbXuIELE, // as-is #static?[_]_IELE
					v[5 /*OP*/],
				),
				i.Model.NewKApply(m.LblXhashnegativeCallXquesXlsqbXuXrsqbXuIELE, // as-is #negativeCall?[_]_IELE
					v[5 /*OP*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS197(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 197, "{| rule `<generatedTop>`(`<k>`(`` `___IELE-TESTING`(IEC,IES)=>IEC~>IES``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isIELESimulation(IES),isIELECommand(IEC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(809250e2ce6a6114766247a8a5522a05de8d9f2a2a43aa18b20420647ad14329) contentStartColumn(10) contentStartLine(35) org.kframework.attributes.Location(Location(35,10,35,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*IEC*/],
				v[7 /*IES*/],
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS202(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 202, "{| rule `<generatedTop>`(`<k>`(``contractDefinitionList(CONTRACT,`.List{\"contractDefinitionList\"}`(.KList))=>CONTRACT``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isContractDefinition(CONTRACT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(13d8b2eb25b70b2ea2f155f63a24ad75f4226678e18f819315d59009a044bca0) contentStartColumn(10) contentStartLine(84) org.kframework.attributes.Location(Location(84,10,84,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*CONTRACT*/],
				v[7 /*DotVar1*/],
			),
		),
		v[9 /*_0*/],
		v[11 /*_1*/],
		v[13 /*_2*/],
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		v[23 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS512(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 512, "{| rule `<generatedTop>`(`<k>`(``contractDefinitionList(CONTRACT1,contractDefinitionList(CONTRACT2,CONTRACTS))=>CONTRACT1~>contractDefinitionList(CONTRACT2,CONTRACTS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isContractDefinition(CONTRACT2),isContractDefinition(CONTRACT1)),isContract(CONTRACTS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eb44fa242721bdf54ed823529d80f50ec1d0ca9a9092ebe8152b2d6780bc4aec) contentStartColumn(10) contentStartLine(83) org.kframework.attributes.Location(Location(83,10,83,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*CONTRACT1*/],
				i.Model.NewKApply(m.LblContractDefinitionList, // as-is contractDefinitionList
					v[8 /*CONTRACT2*/],
					v[10 /*CONTRACTS*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
		v[27 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS203(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 203, "{| rule `<generatedTop>`(`<k>`(`` `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"init\",\"IeleName\")),ARGS),BLOCKS)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(#token(\"init\",\"IeleName\"),funType(ints(#sizeNames(ARGS)),`.List{\"typeList\"}`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(#token(\"init\",\"IeleName\"))~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isFunctionParameters(ARGS)),isMap(TYPES)),`notBool_`(`_in_keys(_)_MAP`(#token(\"init\",\"IeleName\"),TYPES))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4808cc363a72115f45f58cd5fe91c986e9dab8c1e721f594b295fb02e0d14339) contentStartColumn(10) contentStartLine(113) org.kframework.attributes.Location(Location(113,10,116,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[52], i.evalErr = i.evalXhashsizeNames( // #sizeNames(ARGS)
		v[8 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalInts( // ints(#sizeNames(ARGS))
		v[52],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("init","IeleName"),funType(ints(#sizeNames(ARGS)),`.List{"typeList"}`(.KList)))
		/* rhs KToken */ constKTokenSortIeleNameinit,
		i.Model.NewKApply(m.LblFunType, // as-is funType
			v[51],
			i.Model.NewKApply(m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, // as-is .List{"typeList"}
			),
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalXuMapXu( // `_Map_`(TYPES,`_|->_`(#token("init","IeleName"),funType(ints(#sizeNames(ARGS)),`.List{"typeList"}`(.KList))))
		v[32 /*TYPES*/],
		v[50],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[11 /*DotVar1*/],
		),
		v[13 /*_6*/],
		v[15 /*_7*/],
		v[17 /*_8*/],
		v[19 /*_9*/],
		v[21 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[24 /*_3*/],
			v[26 /*_4*/],
			v[28 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[49],
				),
				v[34 /*_0*/],
				v[36 /*_1*/],
				i.Model.NewKApply(m.LblXltfunctionBodiesXgt, // as-is <functionBodies>
					i.Model.AssembleKSequence(
						i.Model.NewKApply(m.LblProcessFunction, // as-is processFunction
							/* rhs KToken */ constKTokenSortIeleNameinit,
						),
						v[10 /*BLOCKS*/],
						v[39 /*DotVar4*/],
					),
				),
				v[41 /*_2*/],
			),
		),
		v[43 /*_11*/],
		v[45 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS590(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 590, "{| rule `<generatedTop>`(`<k>`(`` `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)=>checkName(NAME)~>checkArgs(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(NAME)~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),isMap(TYPES)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token(\"init\",\"IeleName\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(780ad67fd5aacaf082f52d641e34db9fdbf877ce6cf34ee38fb87d97fe1e7a46) contentStartColumn(10) contentStartLine(118) org.kframework.attributes.Location(Location(118,10,121,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[55], i.evalErr = i.evalXhashsizeNames( // #sizeNames(ARGS)
		v[9 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[54], i.evalErr = i.evalInts( // ints(#sizeNames(ARGS))
		v[55],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[53], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList)))
		v[7 /*NAME*/],
		i.Model.NewKApply(m.LblFunType, // as-is funType
			v[54],
			i.Model.NewKApply(m.LblUnknownXuIELEXhyphenWELLXhyphenFORMEDNESS, // as-is unknown_IELE-WELL-FORMEDNESS
			),
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalXuMapXu( // `_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))
		v[33 /*TYPES*/],
		v[53],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[7 /*NAME*/],
				),
				i.Model.NewKApply(m.LblCheckArgs, // as-is checkArgs
					v[9 /*ARGS*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_6*/],
		v[16 /*_7*/],
		v[18 /*_8*/],
		v[20 /*_9*/],
		v[22 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[25 /*_3*/],
			v[27 /*_4*/],
			v[29 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[52],
				),
				v[35 /*_0*/],
				v[37 /*_1*/],
				i.Model.NewKApply(m.LblXltfunctionBodiesXgt, // as-is <functionBodies>
					i.Model.AssembleKSequence(
						i.Model.NewKApply(m.LblProcessFunction, // as-is processFunction
							v[7 /*NAME*/],
						),
						v[11 /*BLOCKS*/],
						v[40 /*DotVar4*/],
					),
				),
				v[42 /*_2*/],
			),
		),
		v[44 /*_11*/],
		v[46 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS205(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 205, "{| rule `<generatedTop>`(`<k>`(`` `_=mod_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=mod_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c297e28903b3113077bcfa340c466b4dd36a887b601a4f550200e97a0a931fe8) heat() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=mod_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS541(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 541, "{| rule `<generatedTop>`(`<k>`(`` `_=mod_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=mod_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(38a45a57d1bed5e7ec821f1b712ff241eddbb4cebc47ef7d0c76916c1cae8e37) heat() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=mod_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS209(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 209, "{| rule `<generatedTop>`(`<k>`(`` `_=xor_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=xor_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9092dfe061ee69f16d8978a44779e2a011309d1c598a9c1f0b31462448ea577f) heat() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=xor_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS339(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 339, "{| rule `<generatedTop>`(`<k>`(`` `_=xor_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=xor_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(db0290aca9b06d8f2a2e25a7318e85ce0ddf71e875104c25dd032bf1a37ea622) heat() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=xor_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS212(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 212, "{| rule `<generatedTop>`(`<k>`(`` `mkAcct__IELE-TESTING`(ACCT)=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(ACCT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7975de978f2b896335d31ffc8cb25d38d3f3f2c47156af54b264f639be9f2ca5) contentStartColumn(10) contentStartLine(340) org.kframework.attributes.Location(Location(340,10,340,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[27], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[5 /*ACCT*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[27],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS217(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 217, "{| rule `<generatedTop>`(`<k>`(`` `store_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezerstore_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c5816cc2947a1167444b9f8b5ec6c46dfbf8563930992375cb4c9da36b891434) heat() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1408482749) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerstore_,__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS466(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 466, "{| rule `<generatedTop>`(`<k>`(`` `store_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerstore_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8a65351869965338e086fb8af43e6b53e43dfc1b1cac67c08eae0f95914f9000) heat() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1408482749) seqstrict(1,2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerstoreXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezerstore_,__IELE-COMMON1_
					v[7 /*K1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS218(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 218, "{| rule `<generatedTop>`(`<k>`(`` `_=sload__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=sload__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1907875a14ff55190230f2477613095437e26fb7a787e9cc1fbdf4bddff1ad82) heat() hybrid() org.kframework.attributes.Location(Location(137,24,137,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2103569237) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsloadXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=sload__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS220(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 220, "{| rule `<generatedTop>`(`<k>`(`` `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(isKResult(K3),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e04d53c2d1403984f82301edba128caadfa0a6d280204dec15a765d3b4b970df) heat() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(333040629) seqstrict(4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[13 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_,_=create_(_)send__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS296(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 296, "{| rule `<generatedTop>`(`<k>`(`` `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04e2b25577b0cf0898ac281e37aaa3144068fb275aed8565fa480a599f873ea5) heat() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(333040629) seqstrict(4,5)] |}")
	v[41], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_,_=create_(_)send__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[13 /*K4*/],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[41],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS236(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 236, "{| rule `<generatedTop>`(`<k>`(`` `#load___IELE`(`%__IELE-COMMON`(REG),VALUE)=>#loadAux(REG,VALUE,getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isInt(VALUE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b4705932d194dc1caf16353eb1e5c59b58847820fd767f045d08b2a005d9f2be) contentStartColumn(10) contentStartLine(734) org.kframework.attributes.Location(Location(734,10,734,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[90], i.evalErr = i.evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
		v[52 /*REGS*/],
		v[6 /*REG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[89], i.evalErr = i.evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
		v[90],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAux, // as-is #loadAux
					v[6 /*REG*/],
					v[8 /*VALUE*/],
					v[89],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[52 /*REGS*/],
				),
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS243(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 243, "{| rule `<generatedTop>`(`<k>`(`` `startTx_IELE-TESTING`(.KList)=>`#finalizeBlock_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(_0,_1,_2,`<txPending>`(`.List`(.KList)),_3)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(80248cd870dda3508bca63740b80c2bec0e8ece9972be50517e28ef21f5a8568) contentStartColumn(10) contentStartLine(95) org.kframework.attributes.Location(Location(95,10,96,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[34], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[35], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashfinalizeBlockXuIELEXhyphenTESTING, // as-is #finalizeBlock_IELE-TESTING
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[34],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_4*/],
		v[14 /*_5*/],
		v[16 /*_6*/],
		v[18 /*_7*/],
		v[20 /*_8*/],
		v[22 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[25 /*_0*/],
			v[27 /*_1*/],
			v[29 /*_2*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[35],
			),
			v[33 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS245(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 245, "{| rule `<generatedTop>`(`<k>`(`` `_=log2__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=log2__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51aa23b844841767dd306aa917b30118d70536da5a43898e4219d8a37e52e03f) heat() hybrid() org.kframework.attributes.Location(Location(160,24,160,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(567294307) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqlog2XuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=log2__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS261(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 261, "{| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,HOLE)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_`(K0,K1,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d22a8e5a752fc9a33627fad01aef9abe34e5784adb8ada0dd764b35df2a73e7e) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[48], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[15 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[48],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS622(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 622, "{| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2`(K0,K1,K2,K3,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a4c72589c0b5e80f054b5099a4fa7baeae028651986d9bd345e58f607cc78bd) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[13 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu2, // as-is #freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[15 /*K5*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS443(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 443, "{| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_`(K0,K1,K2,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(16215319f17023334f7f638d5eacab6fc3d8413e6c6761729ea1ca3477ec29b5) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[46], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[46],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS602(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 602, "{| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3`(K0,K1,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01f6f52371d4ba8654784ea0c570fe6cc4646e99ca551cbc1daf655b5b52da52) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu3, // as-is #freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS376(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 376, "{| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4`(K0,K2,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7295f1c16c39920e0f8e54697d377509de239f3459ee91907b50b8b6f4ec0734) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu4, // as-is #freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_0*/],
		v[26 /*_1*/],
		v[28 /*_2*/],
		v[30 /*_3*/],
		v[32 /*_4*/],
		v[34 /*_5*/],
		v[36 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS265(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 265, "{| rule `<generatedTop>`(`<k>`(``checkIntArgs(localNameList(`%__IELE-COMMON`(N),ARGS),I)=>checkIntArgs(ARGS,`_+Int_`(I,#token(\"1\",\"Int\")))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isIeleName(N)),isLocalNames(ARGS)),`_==Int_`(`String2Int`(`IeleName2String`(N)),I)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9e773fc9cdd4f6a110af5b26d7cf0b8ef51133d9bbb0eef021641dff20d10cc7) contentStartColumn(10) contentStartLine(155) org.kframework.attributes.Location(Location(155,10,156,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[34], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(I,#token("1","Int"))
		v[11 /*I*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckIntArgs, // as-is checkIntArgs
					v[9 /*ARGS*/],
					v[34],
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS344(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 344, "{| rule `<generatedTop>`(`<k>`(``checkIntArgs(`.List{\"localNameList\"}`(.KList),_35)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isInt(_35) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d038d4e1a5aa62ef3489c3235485c4ece44c7370fc50a017727ff4510421106b) contentStartColumn(10) contentStartLine(157) org.kframework.attributes.Location(Location(157,10,157,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		v[9 /*_0*/],
		v[11 /*_1*/],
		v[13 /*_2*/],
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		v[23 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS285(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 285, "{| rule `<generatedTop>`(`<k>`(`` `#refund__IELE`(HOLE)=>HOLE~>`#freezer#refund__IELE0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3b8e2c60d0b9230ccd678ffd883bab847088c10c4531cfabe8d3a3a62d5dc967) heat() org.kframework.attributes.Location(Location(1307,27,1307,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) productionID(406375608) strict()] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXhashrefundXuXuIELE0Xu, // as-is #freezer#refund__IELE0_
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS382(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 382, "{| rule `<generatedTop>`(`<k>`(`` `#refund__IELE`(G)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL=>`_+Int_`(GAVAIL,G)),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(G),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6693449a7b1acacc03dff54ab334af84f999560648c61e378c1f97d9123ae618) contentStartColumn(10) contentStartLine(1309) org.kframework.attributes.Location(Location(1309,10,1309,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[86], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[87], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(GAVAIL,G)
		v[59 /*GAVAIL*/],
		v[5 /*G*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[86],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_28*/],
		v[16 /*_29*/],
		v[18 /*_30*/],
		v[20 /*_31*/],
		v[22 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_14*/],
			v[27 /*_15*/],
			v[29 /*_16*/],
			v[31 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				v[48 /*_7*/],
				v[50 /*_8*/],
				v[52 /*_9*/],
				v[54 /*_10*/],
				v[56 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[87],
				),
				v[61 /*_12*/],
				v[63 /*_13*/],
			),
			v[65 /*_18*/],
			v[67 /*_19*/],
			v[69 /*_20*/],
			v[71 /*_21*/],
			v[73 /*_22*/],
			v[75 /*_23*/],
			v[77 /*_24*/],
			v[79 /*_25*/],
			v[81 /*_26*/],
			v[83 /*_27*/],
		),
		v[85 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS289(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 289, "{| rule `<generatedTop>`(`<k>`(``checkLVal(`%__IELE-COMMON`(NAME))=>checkName(NAME)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3cefbc4efbaaddf52f36a1aff74400e863bf5377e9a161b5dd38ec811633bfe0) contentStartColumn(10) contentStartLine(390) org.kframework.attributes.Location(Location(390,10,390,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[6 /*NAME*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		v[9 /*_0*/],
		v[11 /*_1*/],
		v[13 /*_2*/],
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		v[23 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS298(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 298, "{| rule `<generatedTop>`(`<k>`(``operandList(`%__IELE-COMMON`(REG),OPS)=>lookupRegisters(operandList(`%__IELE-COMMON`(REG),OPS),REGS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_31,_32,_33,_34,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_28,_29,_30),`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_35) requires `_andBool_`(`_andBool_`(isInt(REG),isOperands(OPS)),isArray(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bea8e3fb045aa76f117ec8504b59b8a2c35f23ece42143c14fb07045bb0a7917) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,132)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[97], i.evalErr = i.evalLookupRegisters( // lookupRegisters(operandList(`%__IELE-COMMON`(REG),OPS),REGS)
		i.Model.NewKApply(m.LblOperandList, // as-is operandList
			i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
				v[6 /*REG*/],
			),
			v[8 /*OPS*/],
		),
		v[59 /*REGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[97],
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[98],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_31*/],
		v[19 /*_32*/],
		v[21 /*_33*/],
		v[23 /*_34*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[28 /*_28*/],
			v[30 /*_29*/],
			v[32 /*_30*/],
		),
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_14*/],
			v[37 /*_15*/],
			v[39 /*_16*/],
			v[41 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[59 /*REGS*/],
				),
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_35*/],
	), nil
}

func (i *Interpreter) stepRHS301(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 301, "{| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(SCHED,ISEMPTY,GCAP,GAVAIL,VALUE,RETS,ARGS)=>`_+Int_`(`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)),`_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)),`_=/=K_`(VALUE,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(db424cc5acc2a598cd4af4a7dc4e3bc52915882c13701b2b04f9ff44271ec41b) contentStartColumn(10) contentStartLine(758) org.kframework.attributes.Location(Location(758,10,758,197)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[43], i.evalErr = i.evalCextra( // `Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)
		v[5 /*SCHED*/],
		v[7 /*ISEMPTY*/],
		v[13 /*VALUE*/],
		v[15 /*RETS*/],
		v[17 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalCgascap( // `Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS))
		v[5 /*SCHED*/],
		v[9 /*GCAP*/],
		v[11 /*GAVAIL*/],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcallstipendXuIELEXhyphenGAS, // as-is Gcallstipend_IELE-GAS
		),
		v[5 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)),`_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),SCHED))
		v[42],
		v[44],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[41],
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS554(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 554, "{| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(SCHED,ISEMPTY,GCAP,GAVAIL,_23,RETS,ARGS)=>`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,#token(\"0\",\"Int\"),RETS,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)),`_==Int_`(_23,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(16af43421d6861fc241cdf7583b1b691c9fe7107ecc88ca28382713a8d9ed6f8) contentStartColumn(10) contentStartLine(757) org.kframework.attributes.Location(Location(757,10,757,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[42], i.evalErr = i.evalCextra( // `Cextra`(SCHED,ISEMPTY,#token("0","Int"),RETS,ARGS)
		v[5 /*SCHED*/],
		v[7 /*ISEMPTY*/],
		/* rhs KToken */ m.IntZero,
		v[15 /*RETS*/],
		v[17 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalCgascap( // `Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,#token("0","Int"),RETS,ARGS))
		v[5 /*SCHED*/],
		v[9 /*GCAP*/],
		v[11 /*GAVAIL*/],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[41],
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS532(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 532, "{| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(K0,HOLE,K2,K3,K4,K5,K6)=>HOLE~>`#freezerCcallgas1_`(K0,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ba8fbb02711b19a19516621e39262f893dab56ae2cf72ea14843a1618f1a982) heat() klabel(Ccallgas) org.kframework.attributes.Location(Location(748,24,748,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(939199469) strict(2)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerCcallgas1Xu, // as-is #freezerCcallgas1_
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
					v[17 /*K6*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS305(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 305, "{| rule `<generatedTop>`(`<k>`(`` `.List{\"labeledBlockList\"}`(.KList)=>INSTRS``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(INSTRS)))),_13,_14) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fd571a5446da21e3d3e4ebe97df052cad79be2420d9b2c210479d2b6e2ff28c0) contentStartColumn(10) contentStartLine(169) org.kframework.attributes.Location(Location(169,10,171,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[38 /*INSTRS*/],
				v[4 /*DotVar1*/],
			),
		),
		v[6 /*_8*/],
		v[8 /*_9*/],
		v[10 /*_10*/],
		v[12 /*_11*/],
		v[14 /*_12*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[19 /*_6*/],
			v[21 /*_7*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[24 /*_2*/],
				v[26 /*_3*/],
				v[28 /*_4*/],
				v[30 /*_5*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					v[33 /*_0*/],
					v[35 /*_1*/],
					i.Model.NewKApply(m.LblXltcurrentInstructionsXgt, // as-is <currentInstructions>
						v[38 /*INSTRS*/],
					),
				),
			),
		),
		v[40 /*_13*/],
		v[42 /*_14*/],
	), nil
}

func (i *Interpreter) stepRHS551(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 551, "{| rule `<generatedTop>`(`<k>`(`` `.List{\"labeledBlockList\"}`(.KList)=>`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(64cfa54bec23351cd6e882f6e420e3b2e161c46d8c7ebe6305987c69ecf079e2) contentStartColumn(10) contentStartLine(570) org.kframework.attributes.Location(Location(570,10,571,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXuXuIELEXhyphenCOMMON, // as-is ___IELE-COMMON
					i.Model.NewKApply(m.LblInstructionList, // as-is instructionList
						i.Model.NewKApply(m.LblRetXuXuIELEXhyphenCOMMON, // as-is ret__IELE-COMMON
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
						i.Model.NewKApply(m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, // as-is .List{"instructionList"}
						),
					),
					i.Model.NewKApply(m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, // as-is .List{"labeledBlockList"}
					),
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_3*/],
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[23 /*_0*/],
			v[25 /*_1*/],
			v[27 /*_2*/],
		),
		v[29 /*_7*/],
		v[31 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS309(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 309, "{| rule `<generatedTop>`(`<k>`(`` `#mkCodeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)=>`#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`notBool_`(NEW)),.K,`_*Int__INT`(`_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),SCHED),LEN)~>`#deductGas_IELE-GAS`(.KList))~>`#finishCodeDeposit______IELE`(ACCT,CODE,STATUS,ACCTOUT,NEW)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,`<mode>`(EXECMODE),`<schedule>`(SCHED),_15,_16,`<iele>`(`<output>`(`.List{\"operandList\"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE)),isLValue(ACCTOUT)),isInt(ACCT)),isSchedule(SCHED)),isBool(NEW)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(39533463be993be2436e6ac9a94d933050856ad6e33ad27bf6ae0f0d654df451) contentStartColumn(10) contentStartLine(1433) org.kframework.attributes.Location(Location(1433,10,1440,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[75], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[27 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_orBool__BOOL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`notBool_`(NEW))
	v[74] = v[75]
	if !m.IsTrue(v[74]) {
		v[76], i.evalErr = i.evalNotBoolXu( // `notBool_`(NEW)
			v[15 /*NEW*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[74] = v[76]
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`notBool_`(NEW)),.K,`_*Int__INT`(`_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),SCHED),LEN)~>`#deductGas_IELE-GAS`(.KList))
	if m.IsTrue(v[74]) { // rhs if-then-else
		v[73] = m.EmptyKSequence
	} else {
		v[78], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),SCHED)
			i.Model.NewKApply(m.LblGcodedepositXuIELEXhyphenGAS, // as-is Gcodedeposit_IELE-GAS
			),
			v[30 /*SCHED*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[77], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),SCHED),LEN)
			v[78],
			v[7 /*LEN*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[73] = i.Model.AssembleKSequence(
			v[77],
			i.Model.NewKApply(m.LblXhashdeductGasXuIELEXhyphenGAS, // as-is #deductGas_IELE-GAS
			),
		)
	}
	v[79], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[73],
				i.Model.NewKApply(m.LblXhashfinishCodeDepositXuXuXuXuXuXuIELE, // as-is #finishCodeDeposit______IELE
					v[5 /*ACCT*/],
					v[9 /*CODE*/],
					v[11 /*STATUS*/],
					v[13 /*ACCTOUT*/],
					v[15 /*NEW*/],
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[79],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_14*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[27 /*EXECMODE*/],
		),
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[30 /*SCHED*/],
		),
		v[32 /*_15*/],
		v[34 /*_16*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[39 /*_0*/],
			v[41 /*_1*/],
			v[43 /*_2*/],
			v[45 /*_3*/],
			v[47 /*_4*/],
			v[49 /*_5*/],
			v[51 /*_6*/],
			v[53 /*_7*/],
			v[55 /*_8*/],
			v[57 /*_9*/],
			v[59 /*_10*/],
			v[61 /*_11*/],
			v[63 /*_12*/],
			v[65 /*_13*/],
		),
		v[67 /*_17*/],
	), nil
}

func (i *Interpreter) stepRHS313(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 313, "{| rule `<generatedTop>`(`<k>`(`` `_=twos_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=twos_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d128e4ea93ea66c37b93b8a0d81b81b223b1579e622e9f28d9d4d1b92e1cdaae) heat() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=twos_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS612(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 612, "{| rule `<generatedTop>`(`<k>`(`` `_=twos_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=twos_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(06b1abf6da0c54b905bfcbd9770e75c35c85d5b1f4fa66f9efdaf86abdb827e9) heat() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=twos_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS316(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 316, "{| rule `<generatedTop>`(`<k>`(`` `#pushSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_3,_4,_5,`<substateStack>`(DotVar3=>`_List_`(`ListItem`(`<substate>`(_0,_1,_2)),DotVar3)),_6,`<substate>`(_0,_1,_2),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0784e94b8898c1a0ac94dca4bfcbb89ebac747a122898b501579d53862410f12) contentStartColumn(10) contentStartLine(301) org.kframework.attributes.Location(Location(301,10,303,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[63], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalListItem( // `ListItem`(`<substate>`(_0,_1,_2))
		i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
			v[35 /*_0*/],
			v[37 /*_1*/],
			v[39 /*_2*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[64], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`<substate>`(_0,_1,_2)),DotVar3)
		v[65],
		v[30 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[63],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_16*/],
		v[14 /*_17*/],
		v[16 /*_18*/],
		v[18 /*_19*/],
		v[20 /*_20*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_3*/],
			v[25 /*_4*/],
			v[27 /*_5*/],
			i.Model.NewKApply(m.LblXltsubstateStackXgt, // as-is <substateStack>
				v[64],
			),
			v[32 /*_6*/],
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
			),
			v[41 /*_7*/],
			v[43 /*_8*/],
			v[45 /*_9*/],
			v[47 /*_10*/],
			v[49 /*_11*/],
			v[51 /*_12*/],
			v[53 /*_13*/],
			v[55 /*_14*/],
			v[57 /*_15*/],
		),
		v[59 /*_21*/],
	), nil
}

func (i *Interpreter) stepRHS331(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 331, "{| rule `<generatedTop>`(`<k>`(``globalDefinition(`@__IELE-COMMON`(NAME),_36)=>checkName(NAME)``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,`int_IELE-WELL-FORMEDNESS`(.KList)))),_0,_1,_2,_3)),_12,_13) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isIntConstant(_36)),isMap(TYPES)),`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fdc936410477fe1a2c3603b721f435128c7c8645766c8e1490b00539e9a7d83b) contentStartColumn(10) contentStartLine(109) org.kframework.attributes.Location(Location(109,10,111,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[47], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(NAME,`int_IELE-WELL-FORMEDNESS`(.KList))
		v[6 /*NAME*/],
		i.Model.NewKApply(m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, // as-is int_IELE-WELL-FORMEDNESS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalXuMapXu( // `_Map_`(TYPES,`_|->_`(NAME,`int_IELE-WELL-FORMEDNESS`(.KList)))
		v[30 /*TYPES*/],
		v[47],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[6 /*NAME*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		v[11 /*_7*/],
		v[13 /*_8*/],
		v[15 /*_9*/],
		v[17 /*_10*/],
		v[19 /*_11*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[22 /*_4*/],
			v[24 /*_5*/],
			v[26 /*_6*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[46],
				),
				v[32 /*_0*/],
				v[34 /*_1*/],
				v[36 /*_2*/],
				v[38 /*_3*/],
			),
		),
		v[40 /*_12*/],
		v[42 /*_13*/],
	), nil
}

func (i *Interpreter) stepRHS341(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 341, "{| rule `<generatedTop>`(`<k>`(``#memoryExpand(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))),`<currentMemory>`(CURR=>`_+Int_`(CURR,NEWSIZE)),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isInt(NEWSIZE)),isMap(LM)),isInt(CURR)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0dbdc40a82ecf092d38758794effddfc2b235e4183b00e0eea45255c82fbbea) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,381,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))
		v[56 /*PEAK*/],
		v[93],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[56 /*PEAK*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_26*/],
		v[18 /*_27*/],
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_12*/],
			v[29 /*_13*/],
			v[31 /*_14*/],
			v[33 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[53 /*LM*/],
				),
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[92],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[94],
				),
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
			),
			v[69 /*_16*/],
			v[71 /*_17*/],
			v[73 /*_18*/],
			v[75 /*_19*/],
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
		),
		v[89 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS359(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 359, "{| rule `<generatedTop>`(`<k>`(`` `_=cmp__,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=cmp__,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02ecfc57c2484d39c60b06ed40f62ba7bbf3bc22b3eda8b9f8992aaceee1c2f6) heat() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(748842359) seqstrict(3,4)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=cmp__,__IELE-COMMON1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[11 /*K3*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS393(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 393, "{| rule `<generatedTop>`(`<k>`(`` `_=cmp__,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(03fe408446d2e7e8ec10b3979e689b94d440e41eb3f4c90385e8b7661d606946) heat() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(748842359) seqstrict(3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=cmp__,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS383(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 383, "{| rule `<generatedTop>`(`<k>`(``#ecmul(P,S)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(S),isG1Point(P)),`notBool_`(isValidPoint(P))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6bc28688c712db9c4cd5f4c507e58e9dc9d061ba4a2210a03e1937c97be294db) contentStartColumn(10) contentStartLine(1691) org.kframework.attributes.Location(Location(1691,10,1692,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS677(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 677, "{| rule `<generatedTop>`(`<k>`(``#ecmul(P,S)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_122=>#point(`BN128Mul`(P,S))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(S),isInts(_122)),isG1Point(P)),isValidPoint(P)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18cc7a6a1d24018007e06f7db2650febe7aba0304655afd930bf7bd8ff963757) contentStartColumn(10) contentStartLine(1693) org.kframework.attributes.Location(Location(1693,10,1694,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[62], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[64], i.evalErr = i.evalBN128Mul( // `BN128Mul`(P,S)
		v[5 /*P*/],
		v[7 /*S*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[63], i.evalErr = i.evalXhashpoint( // #point(`BN128Mul`(P,S))
		v[64],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[62],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_14*/],
		v[18 /*_15*/],
		v[20 /*_16*/],
		v[22 /*_17*/],
		v[24 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[63],
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
			v[36 /*_3*/],
			v[38 /*_4*/],
			v[40 /*_5*/],
			v[42 /*_6*/],
			v[44 /*_7*/],
			v[46 /*_8*/],
			v[48 /*_9*/],
			v[50 /*_10*/],
			v[52 /*_11*/],
			v[54 /*_12*/],
			v[56 /*_13*/],
		),
		v[58 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS386(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 386, "{| rule `<generatedTop>`(`<k>`(`` `#dropWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(_112),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires isKItem(_112) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b8fb6418e9e726376ae5cc4f114a6d4c4b18b27e78b3f11e836b00145a4f99be) contentStartColumn(10) contentStartLine(289) org.kframework.attributes.Location(Location(289,10,289,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[58], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[60], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[59], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[60],
		v[31 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[58],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_14*/],
		v[14 /*_15*/],
		v[16 /*_16*/],
		v[18 /*_17*/],
		v[20 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_0*/],
			v[25 /*_1*/],
			i.Model.NewKApply(m.LblXltinterimStatesXgt, // as-is <interimStates>
				v[59],
			),
			v[33 /*_2*/],
			v[35 /*_3*/],
			v[37 /*_4*/],
			v[39 /*_5*/],
			v[41 /*_6*/],
			v[43 /*_7*/],
			v[45 /*_8*/],
			v[47 /*_9*/],
			v[49 /*_10*/],
			v[51 /*_11*/],
			v[53 /*_12*/],
			v[55 /*_13*/],
		),
		v[57 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS391(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 391, "{| rule `<generatedTop>`(`<k>`(`` `#popWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_17,_18,_19,_20,_21,`<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(_108=>ACCTS),`<accounts>`(_109=>ACCTDATA),_14,_15,_16)) requires `_andBool_`(`_andBool_`(`_andBool_`(isSet(_108),`_andBool_`(#token(\"true\",\"Bool\"),isAccountCellMap(ACCTDATA))),isSet(ACCTS)),`_andBool_`(#token(\"true\",\"Bool\"),isAccountCellMap(_109))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(21ac33f26096e27f8bd22730da88e821719a71efc426bfc884cd3acebef85bda) contentStartColumn(10) contentStartLine(282) org.kframework.attributes.Location(Location(282,10,285,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[73], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[75], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[74], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[75],
		v[35 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[73],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_17*/],
		v[14 /*_18*/],
		v[16 /*_19*/],
		v[18 /*_20*/],
		v[20 /*_21*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_0*/],
			v[25 /*_1*/],
			i.Model.NewKApply(m.LblXltinterimStatesXgt, // as-is <interimStates>
				v[74],
			),
			v[37 /*_2*/],
			v[39 /*_3*/],
			v[41 /*_4*/],
			v[43 /*_5*/],
			v[45 /*_6*/],
			v[47 /*_7*/],
			v[49 /*_8*/],
			v[51 /*_9*/],
			v[53 /*_10*/],
			v[55 /*_11*/],
			v[57 /*_12*/],
			v[59 /*_13*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[34 /*ACCTS*/],
			),
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[32 /*ACCTDATA*/],
			),
			v[68 /*_14*/],
			v[70 /*_15*/],
			v[72 /*_16*/],
		),
	), nil
}

func (i *Interpreter) stepRHS392(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 392, "{| rule `<generatedTop>`(`<k>`(``labeledBlockList(BLOCK,BLOCKS)=>BLOCK~>BLOCKS``~>DotVar1),_3,_4,_5,_6,_7,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_0,_1,_2),_8,_9) requires `_andBool_`(isLabeledBlocks(BLOCKS),isLabeledBlock(BLOCK)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(92b86ab054b1f1b1ed0547ddc4dccbaab3781111d1dc2940a25da0f2781297bf) contentStartColumn(10) contentStartLine(167) org.kframework.attributes.Location(Location(167,10,168,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*BLOCK*/],
				v[7 /*BLOCKS*/],
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_3*/],
		v[12 /*_4*/],
		v[14 /*_5*/],
		v[16 /*_6*/],
		v[18 /*_7*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[23 /*_0*/],
			v[25 /*_1*/],
			v[27 /*_2*/],
		),
		v[29 /*_8*/],
		v[31 /*_9*/],
	), nil
}

func (i *Interpreter) stepRHS566(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 566, "{| rule `<generatedTop>`(`<k>`(``labeledBlockList(`_:__IELE-COMMON`(_445,INSTRS),BLOCKS)=>`___IELE-COMMON`(INSTRS,BLOCKS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isIeleName(_445)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1e7e33d89d48943c4e690cb2e81dc4d6b1186638bc92201f77d9bddd7e577be2) contentStartColumn(10) contentStartLine(943) org.kframework.attributes.Location(Location(943,10,944,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXuXuIELEXhyphenCOMMON, // as-is ___IELE-COMMON
					v[8 /*INSTRS*/],
					v[10 /*BLOCKS*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
		),
		v[36 /*_7*/],
		v[38 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS399(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 399, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(MINER)``~>`#finalizeBlock_IELE-TESTING`(.KList)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_18,_19,_20,_21,_22,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(MINER),_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(ACCTS),_14,_15,_16,_17)) requires `_andBool_`(`_andBool_`(isSet(ACCTS),isInt(MINER)),`notBool_`(`Set:in`(MINER,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b429ae99246bc03ebfe08635e9df8cd6dd0c91b0b0a816f20547311eebe7fd34) contentStartColumn(10) contentStartLine(225) org.kframework.attributes.Location(Location(225,10,228,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[66], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[40 /*MINER*/],
				),
				i.Model.NewKApply(m.LblXhashfinalizeBlockXuIELEXhyphenTESTING, // as-is #finalizeBlock_IELE-TESTING
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[66],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_18*/],
		v[14 /*_19*/],
		v[16 /*_20*/],
		v[18 /*_21*/],
		v[20 /*_22*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_0*/],
			v[25 /*_1*/],
			v[27 /*_2*/],
			v[29 /*_3*/],
			v[31 /*_4*/],
			v[33 /*_5*/],
			v[35 /*_6*/],
			v[37 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[40 /*MINER*/],
			),
			v[42 /*_8*/],
			v[44 /*_9*/],
			v[46 /*_10*/],
			v[48 /*_11*/],
			v[50 /*_12*/],
			v[52 /*_13*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[56 /*ACCTS*/],
			),
			v[58 /*_14*/],
			v[60 /*_15*/],
			v[62 /*_16*/],
			v[64 /*_17*/],
		),
	), nil
}

func (i *Interpreter) stepRHS412(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 412, "{| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,_328,#token(\"false\",\"Bool\"))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"1\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_32,_33,_34,_35,_36,`<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,`<exported>`(FUNCS),_2,_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31),_37) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_328),isIeleName(LABEL)),isSet(FUNCS)),isSet(LABELS)),`_andBool_`(`notBool_`(`Set:in`(LABEL,FUNCS)),`Set:in`(LABEL,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b158f61d75341cf29b968b18cd8e60ee1b4bd01bfe56af83fd3a78af8627c781) contentStartColumn(10) contentStartLine(1246) org.kframework.attributes.Location(Location(1246,10,1250,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt1,
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_32*/],
		v[19 /*_33*/],
		v[21 /*_34*/],
		v[23 /*_35*/],
		v[25 /*_36*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_18*/],
			v[30 /*_19*/],
			v[32 /*_20*/],
			v[34 /*_21*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[38 /*_0*/],
					i.Model.NewKApply(m.LblXltfuncIDsXgt, // as-is <funcIds>
						v[41 /*LABELS*/],
					),
					v[43 /*_1*/],
					i.Model.NewKApply(m.LblXltexportedXgt, // as-is <exported>
						v[46 /*FUNCS*/],
					),
					v[48 /*_2*/],
					v[50 /*_3*/],
				),
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
				v[72 /*_14*/],
				v[74 /*_15*/],
				v[76 /*_16*/],
				v[78 /*_17*/],
			),
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
			v[92 /*_28*/],
			v[94 /*_29*/],
			v[96 /*_30*/],
			v[98 /*_31*/],
		),
		v[100 /*_37*/],
	), nil
}

func (i *Interpreter) stepRHS510(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 510, "{| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,_316,_317)=>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(SIZE,#token(\"0\",\"Int\")),#token(\"3\",\"Int\"),#token(\"1\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_32,_33,_34,_35,_36,`<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,_2,`<programSize>`(SIZE),_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31),_37) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_316),isInt(SIZE)),isIeleName(LABEL)),isSet(LABELS)),isBool(_317)),`notBool_`(`Set:in`(LABEL,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4ce6f91f59491b6e00bcd677b374c85cf26c27f549fbdcf1a66b5e1b379a5b4f) contentStartColumn(10) contentStartLine(1252) org.kframework.attributes.Location(Location(1252,10,1255,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[105], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(SIZE,#token("0","Int"))
		v[49 /*SIZE*/],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(SIZE,#token("0","Int")),#token("3","Int"),#token("1","Int"))
	if m.IsTrue(v[105]) { // rhs if-then-else
		v[104] = /* rhs KToken */ constInt3
	} else {
		v[104] = /* rhs KToken */ constInt1
	}
	v[106], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					v[104],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[106],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_32*/],
		v[20 /*_33*/],
		v[22 /*_34*/],
		v[24 /*_35*/],
		v[26 /*_36*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_18*/],
			v[31 /*_19*/],
			v[33 /*_20*/],
			v[35 /*_21*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[39 /*_0*/],
					i.Model.NewKApply(m.LblXltfuncIDsXgt, // as-is <funcIds>
						v[42 /*LABELS*/],
					),
					v[44 /*_1*/],
					v[46 /*_2*/],
					i.Model.NewKApply(m.LblXltprogramSizeXgt, // as-is <programSize>
						v[49 /*SIZE*/],
					),
					v[51 /*_3*/],
				),
				v[53 /*_4*/],
				v[55 /*_5*/],
				v[57 /*_6*/],
				v[59 /*_7*/],
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
				v[69 /*_12*/],
				v[71 /*_13*/],
				v[73 /*_14*/],
				v[75 /*_15*/],
				v[77 /*_16*/],
				v[79 /*_17*/],
			),
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
			v[89 /*_26*/],
			v[91 /*_27*/],
			v[93 /*_28*/],
			v[95 /*_29*/],
			v[97 /*_30*/],
			v[99 /*_31*/],
		),
		v[101 /*_37*/],
	), nil
}

func (i *Interpreter) stepRHS413(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 413, "{| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>`#callWithCode_________IELE`(ACCTFROM,ACCTTO,`#precompiled_IELE-PRECOMPILED`(.KList),FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isConstant(FUNC)),isBool(STATIC)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT)),`_==Int_`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(946e93db3dfb650f20bf939d166e39acf24b4b499b3abcc446d9cfc50b72b081) contentStartColumn(10) contentStartLine(1179) org.kframework.attributes.Location(Location(1179,10,1183,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[43], i.evalErr = i.evalXhashprecompiledXuIELEXhyphenPRECOMPILED(config, -1) // `#precompiled_IELE-PRECOMPILED`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcallWithCodeXuXuXuXuXuXuXuXuXuIELE, // as-is #callWithCode_________IELE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[43],
					v[9 /*FUNC*/],
					v[11 /*GLIMIT*/],
					v[13 /*VALUE*/],
					v[15 /*ARGS*/],
					v[17 /*STATIC*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS530(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 530, "{| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(K0,K1,K2,HOLE,K4,K5,K6)=>HOLE~>`#freezer#call________IELE1_`(K0,K1,K2,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K6),isInt(K0)),isConstant(K2)),isInt(K4)),isInt(K1)),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c426eaca46e6107b54fe03018e4c52c0f627b3cb7ab3e93bc80d0f7c99b62775) heat() org.kframework.attributes.Location(Location(1156,27,1156,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) productionID(1424698224) strict(4)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[11 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXhashcallXuXuXuXuXuXuXuXuIELE1Xu, // as-is #freezer#call________IELE1_
					v[5 /*K0*/],
					v[7 /*K1*/],
					v[9 /*K2*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
					v[17 /*K6*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS630(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 630, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#call________IELE`(_452,ACCT,_453,_454,_455,_456,_457)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(_457),isOperand(_454)),isInts(_456)),isSet(ACCTS)),isInt(_452)),isInt(ACCT)),isConstant(_453)),isInt(_455)),`_andBool_`(`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`notBool_`(`Set:in`(ACCT,ACCTS)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d2cd19ca7113bb2f1b5148fa5c15c323fc04cb43dcda055196b5da1d0089a378) contentStartColumn(10) contentStartLine(1198) org.kframework.attributes.Location(Location(1198,10,1200,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[55], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[7 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[5 /*_452*/],
					v[7 /*ACCT*/],
					v[9 /*_453*/],
					v[11 /*_454*/],
					v[13 /*_455*/],
					v[15 /*_456*/],
					v[17 /*_457*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[55],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
		v[32 /*_7*/],
		v[34 /*_8*/],
		v[36 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[40 /*ACCTS*/],
			),
			v[42 /*_0*/],
			v[44 /*_1*/],
			v[46 /*_2*/],
			v[48 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS425(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 425, "{| rule `<generatedTop>`(`<k>`(`` `contract_!__{_}_IELE-CONFIGURATION`(NAME,_75,_76,DEFS)=>`contract_{_}_IELE-COMMON`(NAME,DEFS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(NAME)),isInt(_75)),isString(_76)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba4436022b3e9f57f610496498485d77f583fe5288291c1c73fad7b4fe05f87e) contentStartColumn(10) contentStartLine(1732) org.kframework.attributes.Location(Location(1732,10,1732,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblContractXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, // as-is contract_{_}_IELE-COMMON
					v[5 /*NAME*/],
					v[11 /*DEFS*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_0*/],
		v[22 /*_1*/],
		v[24 /*_2*/],
		v[26 /*_3*/],
		v[28 /*_4*/],
		v[30 /*_5*/],
		v[32 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS429(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 429, "{| rule `<generatedTop>`(`<k>`(``checkOperands(operandList(OP,OPS))=>checkOperand(OP)~>checkOperands(OPS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperands(OPS),isOperand(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2020d0a2cce5dcbab90c5942c8d4c4bbe0cef546900f88c3c0ee353f9bcdce73) contentStartColumn(10) contentStartLine(372) org.kframework.attributes.Location(Location(372,10,372,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[6 /*OP*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[8 /*OPS*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		v[11 /*_0*/],
		v[13 /*_1*/],
		v[15 /*_2*/],
		v[17 /*_3*/],
		v[19 /*_4*/],
		v[21 /*_5*/],
		v[23 /*_6*/],
		v[25 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS482(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 482, "{| rule `<generatedTop>`(`<k>`(``checkOperands(`.List{\"operandList\"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c7790262821155ac59a1e297fc027d9cb14982d8c985c4b2766ba76d3cdbb4a2) contentStartColumn(10) contentStartLine(373) org.kframework.attributes.Location(Location(373,10,373,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[5 /*DotVar1*/],
		),
		v[7 /*_0*/],
		v[9 /*_1*/],
		v[11 /*_2*/],
		v[13 /*_3*/],
		v[15 /*_4*/],
		v[17 /*_5*/],
		v[19 /*_6*/],
		v[21 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS430(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 430, "{| rule `<generatedTop>`(`<k>`(`` `contract_{_}_IELE-COMMON`(NAME,DEFINITIONS)=>checkName(NAME)~>DEFINITIONS``~>DotVar1),_2,_3,_4,_5,_6,`<well-formedness>`(_0,_1,`<contracts>`(CONTRACTS=>`_Set_`(CONTRACTS,`SetItem`(NAME))),_32=>`<currentContract>`(initTypesCell(.KList),`<contractName>`(NAME),initDeclaredContractsCell(.KList),initFunctionBodiesCell(.KList),initCurrentFunctionCell(.KList))),_7,_8) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSet(CONTRACTS)),isTopLevelDefinitions(DEFINITIONS)),isCurrentContractCell(_32)),`notBool_`(`Set:in`(NAME,CONTRACTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d75cf544c6dca1cb35cf9f6385bbf7acdcc3f687192ec2d07cc3e74de4db2e8) contentStartColumn(10) contentStartLine(86) org.kframework.attributes.Location(Location(86,10,92,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[38], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
		v[5 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalXuSetXu( // `_Set_`(CONTRACTS,`SetItem`(NAME))
		v[26 /*CONTRACTS*/],
		v[38],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[39], i.evalErr = i.evalInitTypesCell(config, -1) // initTypesCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalInitDeclaredContractsCell(config, -1) // initDeclaredContractsCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalInitFunctionBodiesCell(config, -1) // initFunctionBodiesCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalInitCurrentFunctionCell(config, -1) // initCurrentFunctionCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckName, // as-is checkName
					v[5 /*NAME*/],
				),
				v[7 /*DEFINITIONS*/],
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_2*/],
		v[12 /*_3*/],
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[21 /*_0*/],
			v[23 /*_1*/],
			i.Model.NewKApply(m.LblXltcontractsXgt, // as-is <contracts>
				v[37],
			),
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[39],
				i.Model.NewKApply(m.LblXltcontractNameXgt, // as-is <contractName>
					v[5 /*NAME*/],
				),
				v[40],
				v[41],
				v[42],
			),
		),
		v[30 /*_7*/],
		v[32 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS438(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 438, "{| rule `<generatedTop>`(`<k>`(`` `br_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerbr_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a69b80583ef99f78e586d8fadff63148e69079399bf9b3099d101c3f9d3e79dd) heat() hybrid() org.kframework.attributes.Location(Location(183,27,183,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(749282235) strict(1)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerbrXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezerbr_,__IELE-COMMON1_
					v[7 /*K1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS452(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 452, "{| rule `<generatedTop>`(`<k>`(``#initVM(ARGS)=>`#loads___IELE`(#regRange(#sizeRegs(ARGS)),ARGS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_23,_24,_25,_26,_27,`<iele>`(`<output>`(_406=>`.List{\"operandList\"}`(.KList)),_10,_11,_12,`<callFrame>`(_0,_1,`<localCalls>`(_409=>`.List`(.KList)),_2,_3,_4,_5,`<regs>`(_407=>`.Array_IELE-DATA`(.KList)),`<localMem>`(_408=>`.Map`(.KList)),`<peakMemory>`(_405=>#token(\"0\",\"Int\")),`<currentMemory>`(_404=>#token(\"0\",\"Int\")),_6,_7,_8,_9),_13,_14,_15,_16,_17,_18,_19,_20,_21,_22),_28) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_404),isInts(_406)),isList(_409)),isInt(_405)),isInts(ARGS)),isMap(_408)),isArray(_407)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dde7e438c7b16175d65f338fea0f1d0c367d8557db8b5df732adedfb57a19006) contentStartColumn(10) contentStartLine(1238) org.kframework.attributes.Location(Location(1238,10,1244,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[94], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[5 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXhashregRange( // #regRange(#sizeRegs(ARGS))
		v[94],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalXdotArrayXuIELEXhyphenDATA(config, -1) // `.Array_IELE-DATA`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalXdotMap(config, -1) // `.Map`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[93],
					v[5 /*ARGS*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[95],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_23*/],
		v[16 /*_24*/],
		v[18 /*_25*/],
		v[20 /*_26*/],
		v[22 /*_27*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[28 /*_10*/],
			v[30 /*_11*/],
			v[32 /*_12*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[96],
				),
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[97],
				),
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[98],
				),
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					/* rhs KToken */ m.IntZero,
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					/* rhs KToken */ m.IntZero,
				),
				v[62 /*_6*/],
				v[64 /*_7*/],
				v[66 /*_8*/],
				v[68 /*_9*/],
			),
			v[70 /*_13*/],
			v[72 /*_14*/],
			v[74 /*_15*/],
			v[76 /*_16*/],
			v[78 /*_17*/],
			v[80 /*_18*/],
			v[82 /*_19*/],
			v[84 /*_20*/],
			v[86 /*_21*/],
			v[88 /*_22*/],
		),
		v[90 /*_28*/],
	), nil
}

func (i *Interpreter) stepRHS458(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 458, "{| rule `<generatedTop>`(`<k>`(`` `revert__IELE-COMMON`(HOLE)=>HOLE~>`#freezerrevert__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bff9415f47818d6da1de63dec5ad3a5ace07a89de87efd8c5ccb3bf74c8b362c) heat() hybrid() org.kframework.attributes.Location(Location(200,25,200,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2030411960) strict(1)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerrevertXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerrevert__IELE-COMMON0_
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS469(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 469, "{| rule `<generatedTop>`(`<k>`(`` `#popCallStack_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_43,_44,_45,_46,_47,`<iele>`(_30,`<callStack>`(`_List_`(`ListItem`(`<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_31,_32,`<callFrame>`(_0=>_15,_1=>_16,_2=>_17,_3=>_18,_4=>_19,_5=>_20,_6=>_21,_7=>_22,_8=>_23,_9=>_24,_10=>_25,_11=>_26,_12=>_27,_13=>_28,_14=>_29),_33,_34,_35,_36,_37,_38,_39,_40,_41,_42),_48) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27)),isCurrentMemoryCell(_25)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8e76eef966ee143fc476696d77b4167dec8792703b1d5fd86d629d629aaa84cd) contentStartColumn(10) contentStartLine(258) org.kframework.attributes.Location(Location(258,10,260,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[146], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[148], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[147], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar3)
		v[148],
		v[58 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[146],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_43*/],
		v[14 /*_44*/],
		v[16 /*_45*/],
		v[18 /*_46*/],
		v[20 /*_47*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_30*/],
			i.Model.NewKApply(m.LblXltcallStackXgt, // as-is <callStack>
				v[147],
			),
			v[60 /*_31*/],
			v[62 /*_32*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[29 /*_15*/],
				v[31 /*_16*/],
				v[33 /*_17*/],
				v[35 /*_18*/],
				v[37 /*_19*/],
				v[39 /*_20*/],
				v[41 /*_21*/],
				v[43 /*_22*/],
				v[45 /*_23*/],
				v[47 /*_24*/],
				v[49 /*_25*/],
				v[51 /*_26*/],
				v[53 /*_27*/],
				v[55 /*_28*/],
				v[57 /*_29*/],
			),
			v[95 /*_33*/],
			v[97 /*_34*/],
			v[99 /*_35*/],
			v[101 /*_36*/],
			v[103 /*_37*/],
			v[105 /*_38*/],
			v[107 /*_39*/],
			v[109 /*_40*/],
			v[111 /*_41*/],
			v[113 /*_42*/],
		),
		v[115 /*_48*/],
	), nil
}

func (i *Interpreter) stepRHS476(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 476, "{| rule `<generatedTop>`(`<k>`(``#memoryDelta(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))),`<currentMemory>`(CURR=>`_+Int_`(CURR,NEWSIZE)),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isInt(NEWSIZE)),isMap(LM)),isInt(CURR)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cdd862a77a9b28269900eb6611e6bdba2d3f22ffed5648e2f9acfaf5913f9aa7) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,392,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))
		v[56 /*PEAK*/],
		v[93],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[56 /*PEAK*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_26*/],
		v[18 /*_27*/],
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_12*/],
			v[29 /*_13*/],
			v[31 /*_14*/],
			v[33 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[53 /*LM*/],
				),
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[92],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[94],
				),
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
			),
			v[69 /*_16*/],
			v[71 /*_17*/],
			v[73 /*_18*/],
			v[75 /*_19*/],
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
		),
		v[89 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS478(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 478, "{| rule `<generatedTop>`(`<k>`(`` `sstore_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezersstore_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(47397f39224be7396ef530d624eadca37b4db55741014715fff8282fef80da11) heat() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(573200870) seqstrict(1,2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezersstoreXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezersstore_,__IELE-COMMON1_
					v[7 /*K1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS504(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 504, "{| rule `<generatedTop>`(`<k>`(`` `sstore_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezersstore_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26281bac3cf5872670a9ec783a0b70c5f029852e4cf8b06945ecc0e9eb626444) heat() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(573200870) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezersstoreXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezersstore_,__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS484(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 484, "{| rule `<generatedTop>`(`<k>`(`` `_=div_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=div_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cb3fc155083e2505118bfff9adce5d8eed862b80da051bf8bddb62500d4be2b3) heat() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=div_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS610(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 610, "{| rule `<generatedTop>`(`<k>`(`` `_=div_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=div_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fdf91b15874f9630125143d7cca2feb47cc9943a158738ad40f8d55afff80db7) heat() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=div_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS495(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 495, "{| rule `<generatedTop>`(`<k>`(``.K=>`#checkPoint_IELE-PRECOMPILED`(.KList)``~>#ecpairing(_132=>`_List_`(`ListItem`(`(_,_)_KRYPTO`(`Bytes2Int`(bytesRange(G1,#token(\"0\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G1,#token(\"32\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_132),_133=>`_List_`(`ListItem`(`(_x_,_x_)_KRYPTO`(`Bytes2Int`(bytesRange(G2,#token(\"32\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token(\"0\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token(\"96\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token(\"64\",\"Int\"),#token(\"32\",\"Int\")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_133),G1=>bytesRange(G1,#token(\"64\",\"Int\"),lengthBytes(G1)),G2=>bytesRange(G2,#token(\"128\",\"Int\"),lengthBytes(G2)),LEN=>`_-Int__INT`(LEN,#token(\"1\",\"Int\")))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isBytes(G1)),isList(_132)),isBytes(G2)),isList(_133)),`_>Int__INT`(LEN,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c1d2053b30aeaed2fab00a51b13438f86fcb71fbaafeb8cc29063a937362b0df) contentStartColumn(10) contentStartLine(1707) org.kframework.attributes.Location(Location(1707,10,1708,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[39], i.evalErr = i.evalBytesRange( // bytesRange(G1,#token("0","Int"),#token("32","Int"))
		v[9 /*G1*/],
		/* rhs KToken */ m.IntZero,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[38], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G1,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[39],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[41], i.evalErr = i.evalBytesRange( // bytesRange(G1,#token("32","Int"),#token("32","Int"))
		v[9 /*G1*/],
		/* rhs KToken */ constInt32,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G1,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[41],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[37], i.evalErr = i.evalListItem( // `ListItem`(`(_,_)_KRYPTO`(`Bytes2Int`(bytesRange(G1,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G1,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))))
		i.Model.NewKApply(m.LblXlparenXuXcommaXuXrparenXuKRYPTO, // as-is (_,_)_KRYPTO
			v[38],
			v[40],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[36], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`(_,_)_KRYPTO`(`Bytes2Int`(bytesRange(G1,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G1,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_132)
		v[37],
		v[5 /*_132*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalBytesRange( // bytesRange(G2,#token("32","Int"),#token("32","Int"))
		v[11 /*G2*/],
		/* rhs KToken */ constInt32,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G2,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[45],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalBytesRange( // bytesRange(G2,#token("0","Int"),#token("32","Int"))
		v[11 /*G2*/],
		/* rhs KToken */ m.IntZero,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G2,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[47],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalBytesRange( // bytesRange(G2,#token("96","Int"),#token("32","Int"))
		v[11 /*G2*/],
		/* rhs KToken */ constInt96,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G2,#token("96","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[49],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalBytesRange( // bytesRange(G2,#token("64","Int"),#token("32","Int"))
		v[11 /*G2*/],
		/* rhs KToken */ constInt64,
		/* rhs KToken */ constInt32,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(G2,#token("64","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))
		v[51],
		i.Model.NewKApply(m.LblBigEndianBytes, // as-is bigEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalListItem( // `ListItem`(`(_x_,_x_)_KRYPTO`(`Bytes2Int`(bytesRange(G2,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("96","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("64","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList))))
		i.Model.NewKApply(m.LblXlparenXuxXuXcommaXuxXuXrparenXuKRYPTO, // as-is (_x_,_x_)_KRYPTO
			v[44],
			v[46],
			v[48],
			v[50],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`(_x_,_x_)_KRYPTO`(`Bytes2Int`(bytesRange(G2,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("96","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("64","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_133)
		v[43],
		v[7 /*_133*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[53], i.evalErr = i.evalLengthBytes( // lengthBytes(G1)
		v[9 /*G1*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalBytesRange( // bytesRange(G1,#token("64","Int"),lengthBytes(G1))
		v[9 /*G1*/],
		/* rhs KToken */ constInt64,
		v[53],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[55], i.evalErr = i.evalLengthBytes( // lengthBytes(G2)
		v[11 /*G2*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[54], i.evalErr = i.evalBytesRange( // bytesRange(G2,#token("128","Int"),lengthBytes(G2))
		v[11 /*G2*/],
		/* rhs KToken */ constInt128,
		v[55],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[56], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(LEN,#token("1","Int"))
		v[13 /*LEN*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[57], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckPointXuIELEXhyphenPRECOMPILED, // as-is #checkPoint_IELE-PRECOMPILED
				),
				i.Model.NewKApply(m.LblXhashecpairing, // as-is #ecpairing
					v[36],
					v[42],
					v[52],
					v[54],
					v[56],
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[57],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_0*/],
		v[24 /*_1*/],
		v[26 /*_2*/],
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS518(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 518, "{| rule `<generatedTop>`(`<k>`(``#ecpairing(A,B,_135,_136,_20)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_137=>operandList(bool2Word(`BN128AtePairing`(A,B)),`.List{\"operandList\"}`(.KList))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(A),isBytes(_135)),isBytes(_136)),isInts(_137)),isList(B)),`_==Int_`(_20,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6e42b367853a9d473ce363e4645562d9ce52d68994a638babb30631ecfa00455) contentStartColumn(10) contentStartLine(1709) org.kframework.attributes.Location(Location(1709,10,1710,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[67], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[69], i.evalErr = i.evalBN128AtePairing( // `BN128AtePairing`(A,B)
		v[5 /*A*/],
		v[7 /*B*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[68], i.evalErr = i.evalBool2Word( // bool2Word(`BN128AtePairing`(A,B))
		v[69],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[67],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_14*/],
		v[24 /*_15*/],
		v[26 /*_16*/],
		v[28 /*_17*/],
		v[30 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblOperandList, // as-is operandList
					v[68],
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
			),
			v[36 /*_0*/],
			v[38 /*_1*/],
			v[40 /*_2*/],
			v[42 /*_3*/],
			v[44 /*_4*/],
			v[46 /*_5*/],
			v[48 /*_6*/],
			v[50 /*_7*/],
			v[52 /*_8*/],
			v[54 /*_9*/],
			v[56 /*_10*/],
			v[58 /*_11*/],
			v[60 /*_12*/],
			v[62 /*_13*/],
		),
		v[64 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS505(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 505, "{| rule `<generatedTop>`(`<k>`(``topLevelDefinitionList(DEF,DEFS)=>DEF~>DEFS``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isTopLevelDefinitions(DEFS),isTopLevelDefinition(DEF)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1752c4657025ddcb14d39c49ac01f96b19a2fc228c41d148a7c54deb0053c238) contentStartColumn(10) contentStartLine(94) org.kframework.attributes.Location(Location(94,10,94,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*DEF*/],
				v[7 /*DEFS*/],
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_0*/],
		v[12 /*_1*/],
		v[14 /*_2*/],
		v[16 /*_3*/],
		v[18 /*_4*/],
		v[20 /*_5*/],
		v[22 /*_6*/],
		v[24 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS525(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 525, "{| rule `<generatedTop>`(`<k>`(`` `selfdestruct__IELE-COMMON`(HOLE)=>HOLE~>`#freezerselfdestruct__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33e88d1f341947c0d5b94d8e263532f13b12aaad01836ac87419d1b5872a2465) heat() hybrid() org.kframework.attributes.Location(Location(220,31,220,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1822525972) strict(1)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[5 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerselfdestructXuXuIELEXhyphenCOMMON0Xu, // as-is #freezerselfdestruct__IELE-COMMON0_
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS538(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 538, "{| rule `<generatedTop>`(`<k>`(``checkOperand(_28)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIntConstant(_28) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99bf0fab57584b0c0650a7d95f6e8f426db7e94f8185cddb62646be33224b2d2) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		v[8 /*_0*/],
		v[10 /*_1*/],
		v[12 /*_2*/],
		v[14 /*_3*/],
		v[16 /*_4*/],
		v[18 /*_5*/],
		v[20 /*_6*/],
		v[22 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS545(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 545, "{| rule `<generatedTop>`(`<k>`(``checkOperand(`@__IELE-COMMON`(NAME))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5a3c5ffed06c7573b35d348ae0f8a73d4bd68a2cc9b1878b1db25c4fa8c4c6fd) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		v[9 /*_0*/],
		v[11 /*_1*/],
		v[13 /*_2*/],
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		v[23 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS564(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 564, "{| rule `<generatedTop>`(`<k>`(``checkOperand(`%__IELE-COMMON`(NAME))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(52a0a25099bd020056847201c3373c72d4b552f6981ce760d6b8d90de4f5734a) contentStartColumn(10) contentStartLine(375) org.kframework.attributes.Location(Location(375,10,375,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		v[9 /*_0*/],
		v[11 /*_1*/],
		v[13 /*_2*/],
		v[15 /*_3*/],
		v[17 /*_4*/],
		v[19 /*_5*/],
		v[21 /*_6*/],
		v[23 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS550(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 550, "{| rule `<generatedTop>`(`<k>`(``#loadAux(REG,VALUE,OLD)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS=>`_[_<-_]`(REGS,REG,VALUE)),_7,_8,`<currentMemory>`(CURR=>`_+Int_`(`_-Int__INT`(CURR,intSize(OLD)),intSize(VALUE))),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isInt(VALUE)),isInt(CURR)),isInt(OLD)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18722f451d56dad91857eee54e565ddb8bf484f6a5e9e70021c7e3a66231bfc3) contentStartColumn(10) contentStartLine(735) org.kframework.attributes.Location(Location(735,10,735,176)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[91], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[92], i.evalErr = i.evalXuXlsqbXuXltXhyphenXuXrsqb( // `_[_<-_]`(REGS,REG,VALUE)
		v[53 /*REGS*/],
		v[5 /*REG*/],
		v[7 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalIntSize( // intSize(OLD)
		v[9 /*OLD*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[94], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(CURR,intSize(OLD))
		v[60 /*CURR*/],
		v[95],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[7 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[93], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(CURR,intSize(OLD)),intSize(VALUE))
		v[94],
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[10 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[91],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_27*/],
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_13*/],
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				v[40 /*_1*/],
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[92],
				),
				v[55 /*_7*/],
				v[57 /*_8*/],
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[93],
				),
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
			),
			v[70 /*_17*/],
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
		),
		v[90 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS555(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 555, "{| rule `<generatedTop>`(`<k>`(`` `_=or_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=or_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(65681a06c243b36df843b80fd200e09201b6cd406627546d5d1c231f4fe1c0c2) heat() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqorXuXcommaXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=or_,__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS574(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 574, "{| rule `<generatedTop>`(`<k>`(`` `_=or_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=or_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(743e06bc4be892ad9dc9da48160706284364dc653e34b98f542b412117b7854c) heat() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqorXuXcommaXuXuIELEXhyphenCOMMON1Xu, // as-is #freezer_=or_,__IELE-COMMON1_
					v[5 /*K0*/],
					v[9 /*K2*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS582(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 582, "{| rule `<generatedTop>`(`<k>`(`` `_=load__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=load__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(caca8fc5cb3654c71704d1e54a2a23fca6595d4874ce61004be61789ea97e6e2) heat() hybrid() org.kframework.attributes.Location(Location(126,23,126,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1650813924) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqloadXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=load__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS598(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 598, "{| rule `<generatedTop>`(`<k>`(`` `_=iszero__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=iszero__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(df01fa0b5176af61faec93a59edbbf718e39ae0eff2793b521cb30f95140bf19) heat() hybrid() org.kframework.attributes.Location(Location(146,25,146,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1819940427) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqiszeroXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=iszero__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS603(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 603, "{| rule `<generatedTop>`(`<k>`(``OP=>`#gas[_]_IELE-INFRASTRUCTURE`(`#addr?(_)_IELE-INFRASTRUCTURE`(OP))~>`#exec__IELE-INFRASTRUCTURE`(`#addr?(_)_IELE-INFRASTRUCTURE`(OP))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(OP),isKResult(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a22fb615e7c978f6d701a4a86e83bd26afe1a2cad2d4fb595d400bd75decdfac) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[28], i.evalErr = i.evalXhashaddrXquesXlparenXuXrparenXuIELEXhyphenINFRASTRUCTURE( // `#addr?(_)_IELE-INFRASTRUCTURE`(OP)
		v[4 /*OP*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[29], i.evalErr = i.evalXhashaddrXquesXlparenXuXrparenXuIELEXhyphenINFRASTRUCTURE( // `#addr?(_)_IELE-INFRASTRUCTURE`(OP)
		v[4 /*OP*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashgasXlsqbXuXrsqbXuIELEXhyphenINFRASTRUCTURE, // as-is #gas[_]_IELE-INFRASTRUCTURE
					v[28],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					v[29],
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_0*/],
		v[15 /*_1*/],
		v[17 /*_2*/],
		v[19 /*_3*/],
		v[21 /*_4*/],
		v[23 /*_5*/],
		v[25 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS604(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 604, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#initAccount__IELE-INFRASTRUCTURE`(ACCT)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(isInt(ACCT),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9cdabf7b3db30c807b9115a90891c63ba399568b669c7de7cb17148e112ce84c) contentStartColumn(10) contentStartLine(451) org.kframework.attributes.Location(Location(451,10,453,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[38], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[5 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashinitAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #initAccount__IELE-INFRASTRUCTURE
					v[5 /*ACCT*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[38],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_4*/],
		v[16 /*_5*/],
		v[18 /*_6*/],
		v[20 /*_7*/],
		v[22 /*_8*/],
		v[24 /*_9*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[28 /*ACCTS*/],
			),
			v[30 /*_0*/],
			v[32 /*_1*/],
			v[34 /*_2*/],
			v[36 /*_3*/],
		),
	), nil
}

func (i *Interpreter) stepRHS625(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 625, "{| rule `<generatedTop>`(`<k>`(`` `_=not__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=not__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dc03bbed7bfadcd407bc2c64ae0710acf638fa152577b07d57ad08d350f0814c) heat() hybrid() org.kframework.attributes.Location(Location(147,25,147,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1277933280) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqnotXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=not__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS632(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 632, "{| rule `<generatedTop>`(`<k>`(`` `Ccall`(SCHED,ISEMPTY,GCAP,GAVAIL,VALUE,RETS,ARGS)=>`_+Int_`(`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS),`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(034757d0f44801e8dd2a5fb820283c0eb3a848bfb99a25b5d97bc23212421da1) contentStartColumn(10) contentStartLine(755) org.kframework.attributes.Location(Location(755,10,755,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[41], i.evalErr = i.evalCextra( // `Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)
		v[5 /*SCHED*/],
		v[7 /*ISEMPTY*/],
		v[13 /*VALUE*/],
		v[15 /*RETS*/],
		v[17 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[43], i.evalErr = i.evalCextra( // `Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)
		v[5 /*SCHED*/],
		v[7 /*ISEMPTY*/],
		v[13 /*VALUE*/],
		v[15 /*RETS*/],
		v[17 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[42], i.evalErr = i.evalCgascap( // `Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS))
		v[5 /*SCHED*/],
		v[9 /*GCAP*/],
		v[11 /*GAVAIL*/],
		v[43],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[40], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS),`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)))
		v[41],
		v[42],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[40],
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS670(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 670, "{| rule `<generatedTop>`(`<k>`(`` `Ccall`(K0,HOLE,K2,K3,K4,K5,K6)=>HOLE~>`#freezerCcall1_`(K0,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(66080670ff3a7708b56c3102707745f63b9ba88ff2b27ced7bc2ef00d166637a) heat() klabel(Ccall) org.kframework.attributes.Location(Location(747,24,747,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(616881582) strict(2)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerCcall1Xu, // as-is #freezerCcall1_
					v[5 /*K0*/],
					v[9 /*K2*/],
					v[11 /*K3*/],
					v[13 /*K4*/],
					v[15 /*K5*/],
					v[17 /*K6*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS641(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 641, "{| rule `<generatedTop>`(`<k>`(``memoryDirectDelta(DELTA)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,DELTA))),`<currentMemory>`(CURR=>`_+Int_`(CURR,DELTA)),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isInt(PEAK),isInt(DELTA)),isInt(CURR)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1ba18d22a9fb731653ff4becfa390cfe973efd5f48bbad1fb2d86a71707cd282) contentStartColumn(10) contentStartLine(394) org.kframework.attributes.Location(Location(394,10,396,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[87], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[89], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,DELTA)
		v[56 /*CURR*/],
		v[5 /*DELTA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[88], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,DELTA))
		v[53 /*PEAK*/],
		v[89],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[90], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,DELTA)
		v[56 /*CURR*/],
		v[5 /*DELTA*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[53 /*PEAK*/],
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[87],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_27*/],
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_13*/],
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				v[48 /*_7*/],
				v[50 /*_8*/],
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[88],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[90],
				),
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
			),
			v[66 /*_17*/],
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
		),
		v[86 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS650(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 650, "{| rule `<generatedTop>`(`<k>`(`` `_=sha3__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=sha3__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ef080ca4ba1f91d1be395b427b8c330881d1ff1a33269aecc8689415769b9fc) heat() hybrid() org.kframework.attributes.Location(Location(174,23,174,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1208532123) strict(2)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[7 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqsha3XuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=sha3__IELE-COMMON0_
					v[5 /*K0*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS653(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 653, "{| rule `<generatedTop>`(`<k>`(`` `#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>#initVM(ARGS)~>#initFun(FUNC,#sizeRegs(ARGS),#token(\"false\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5)=>CODE,`<callDepth>`(CD=>`_+Int_`(CD,#token(\"1\",\"Int\"))),_6,`<id>`(_351=>ACCTTO),`<caller>`(_353=>ACCTFROM),`<callData>`(_349=>ARGS),`<callValue>`(_350=>VALUE),_7,_8,_9,_10,_11,`<gas>`(_352=>GLIMIT),_12,`<static>`(OLDSTATIC=>`_orBool__BOOL`(OLDSTATIC,STATIC))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)),isInt(ACCTTO)),isInts(_349)),isInt(VALUE)),isInt(_353)),isInt(CD)),isBool(OLDSTATIC)),isBool(STATIC)),isInt(_350)),isIeleName(FUNC)),isProgramCell(CODE)),isInt(_352)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT)),isInt(_351)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1817e8f2e038965bf015dc0680dec928b568f245b6cee283c26aa24c4dedeb39) contentStartColumn(10) contentStartLine(1216) org.kframework.attributes.Location(Location(1216,10,1227,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[127], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[17 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[129], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CD,#token("1","Int"))
		v[62 /*CD*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_orBool__BOOL`(OLDSTATIC,STATIC)
	v[130] = v[94 /*OLDSTATIC*/]
	if !m.IsTrue(v[130]) {
		v[130] = v[19 /*STATIC*/]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashinitVM, // as-is #initVM
					v[17 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashinitFun, // as-is #initFun
					v[11 /*FUNC*/],
					v[127],
					/* rhs KToken */ m.BoolFalse,
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[128],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_27*/],
		v[30 /*_28*/],
		v[32 /*_29*/],
		v[34 /*_30*/],
		v[36 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[39 /*_13*/],
			v[41 /*_14*/],
			v[43 /*_15*/],
			v[45 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[9 /*CODE*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[129],
				),
				v[64 /*_6*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[7 /*ACCTTO*/],
				),
				i.Model.NewKApply(m.LblXltcallerXgt, // as-is <caller>
					v[5 /*ACCTFROM*/],
				),
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					v[17 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXltcallValueXgt, // as-is <callValue>
					v[15 /*VALUE*/],
				),
				v[78 /*_7*/],
				v[80 /*_8*/],
				v[82 /*_9*/],
				v[84 /*_10*/],
				v[86 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[13 /*GLIMIT*/],
				),
				v[91 /*_12*/],
				i.Model.NewKApply(m.LblXltstaticXgt, // as-is <static>
					v[130],
				),
			),
			v[96 /*_17*/],
			v[98 /*_18*/],
			v[100 /*_19*/],
			v[102 /*_20*/],
			v[104 /*_21*/],
			v[106 /*_22*/],
			v[108 /*_23*/],
			v[110 /*_24*/],
			v[112 /*_25*/],
			v[114 /*_26*/],
		),
		v[116 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS659(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 659, "{| rule `<generatedTop>`(`<k>`(`` `clear_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_15,_16,`<schedule>`(_740=>`DEFAULT_IELE-GAS`(.KList)),_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)=>`<iele>`(initOutputCell(.KList),initCallStackCell(.KList),initInterimStatesCell(.KList),initSubstateStackCell(.KList),initCallFrameCell(.KList),initSubstateCell(.KList),initGasPriceCell(.KList),initOriginCell(.KList),initBeneficiaryCell(.KList),initDifficultyCell(.KList),initNumberCell(.KList),initGasLimitCell(.KList),initGasUsedCell(.KList),initTimestampCell(.KList),initBlockhashCell(.KList)),_19) requires `_andBool_`(isSchedule(_740),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isBlockhashCell(_14)),isCallStackCell(_1)),isSubstateStackCell(_3)),isDifficultyCell(_9)),isNumberCell(_10)),isOutputCell(_0)),isCallFrameCell(_4)),isGasPriceCell(_6)),isBeneficiaryCell(_8)),isGasUsedCell(_12)),isTimestampCell(_13)),isSubstateCell(_5)),isInterimStatesCell(_2)),isOriginCell(_7)),isGasLimitCell(_11))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d79f38e7325b30c68d054f3bd8b8c7466ef65392758944268c84c1e988a6603) contentStartColumn(10) contentStartLine(327) org.kframework.attributes.Location(Location(327,10,329,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[71], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[72], i.evalErr = i.evalInitOutputCell(config, -1) // initOutputCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[73], i.evalErr = i.evalInitCallStackCell(config, -1) // initCallStackCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[74], i.evalErr = i.evalInitInterimStatesCell(config, -1) // initInterimStatesCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[75], i.evalErr = i.evalInitSubstateStackCell(config, -1) // initSubstateStackCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[76], i.evalErr = i.evalInitCallFrameCell(config, -1) // initCallFrameCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[77], i.evalErr = i.evalInitSubstateCell(config, -1) // initSubstateCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[78], i.evalErr = i.evalInitGasPriceCell(config, -1) // initGasPriceCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[79], i.evalErr = i.evalInitOriginCell(config, -1) // initOriginCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[80], i.evalErr = i.evalInitBeneficiaryCell(config, -1) // initBeneficiaryCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[81], i.evalErr = i.evalInitDifficultyCell(config, -1) // initDifficultyCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[82], i.evalErr = i.evalInitNumberCell(config, -1) // initNumberCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[83], i.evalErr = i.evalInitGasLimitCell(config, -1) // initGasLimitCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[84], i.evalErr = i.evalInitGasUsedCell(config, -1) // initGasUsedCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[85], i.evalErr = i.evalInitTimestampCell(config, -1) // initTimestampCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[86], i.evalErr = i.evalInitBlockhashCell(config, -1) // initBlockhashCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[71],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_15*/],
		v[14 /*_16*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			i.Model.NewKApply(m.LblDEFAULTXuIELEXhyphenGAS, // as-is DEFAULT_IELE-GAS
			),
		),
		v[19 /*_17*/],
		v[21 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[72],
			v[73],
			v[74],
			v[75],
			v[76],
			v[77],
			v[78],
			v[79],
			v[80],
			v[81],
			v[82],
			v[83],
			v[84],
			v[85],
			v[86],
		),
		v[54 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS664(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 664, "{| rule `<generatedTop>`(`<k>`(`` `failure__IELE-TESTING`(_730)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isString(_730) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f58b27882d7382501f350b6d4229d9845e63624697ca1c14494adce12fd61c4a) contentStartColumn(10) contentStartLine(239) org.kframework.attributes.Location(Location(239,10,239,24)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[27], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[27],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS665(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 665, "{| rule `<generatedTop>`(`<k>`(`` `_=calladdress_at__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=calladdress_at__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),`notBool_`(isKResult(HOLE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bbaea2e5229790a3f39818a7d30388e5d1fc590e1c194cace0961d99fc830414) heat() hybrid() org.kframework.attributes.Location(Location(196,30,196,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2112233878) strict(3)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[9 /*HOLE*/],
				i.Model.NewKApply(m.LblXhashfreezerXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON0Xu, // as-is #freezer_=calladdress_at__IELE-COMMON0_
					v[5 /*K0*/],
					v[7 /*K1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS6(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 6, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#return___IELE`(_393,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,#token(\"1\",\"Int\"))~>`#load___IELE`(REG,STATUS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_394=>`.List{\"operandList\"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValues(_393),isInt(STATUS)),isLValue(REG)),isInts(_394)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c21df3764fe03289a51607aab183ef49cef277cebdd855fb3a2145ae1f2f86c3) contentStartColumn(10) contentStartLine(1278) org.kframework.attributes.Location(Location(1278,10,1282,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[66], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[11 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[11 /*REG*/],
					v[7 /*STATUS*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[66],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_14*/],
		v[22 /*_15*/],
		v[24 /*_16*/],
		v[26 /*_17*/],
		v[28 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[34 /*_0*/],
			v[36 /*_1*/],
			v[38 /*_2*/],
			v[40 /*_3*/],
			v[42 /*_4*/],
			v[44 /*_5*/],
			v[46 /*_6*/],
			v[48 /*_7*/],
			v[50 /*_8*/],
			v[52 /*_9*/],
			v[54 /*_10*/],
			v[56 /*_11*/],
			v[58 /*_12*/],
			v[60 /*_13*/],
		),
		v[62 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS17(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 17, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#finishCodeDeposit______IELE`(_346,_347,REG,_348,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token(\"1\",\"Int\"))~>`#load___IELE`(REG,STATUS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_346),isContract(_347)),isLValue(REG)),isLValue(_348)),isInt(STATUS)),isBool(NEW)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0da8a0d6eb648643e2bace6de81fcd605408220cc0b405bab4177238605199e2) contentStartColumn(10) contentStartLine(1456) org.kframework.attributes.Location(Location(1456,10,1456,209)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	// `#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token("1","Int"))~>`#load___IELE`(REG,STATUS))
	if m.IsTrue(v[17 /*NEW*/]) { // rhs if-then-else
		v[42] = v[7 /*STATUS*/]
	} else {
		v[42] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
				v[13 /*REG*/],
				/* rhs KToken */ constInt1,
			),
			i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
				v[13 /*REG*/],
				v[7 /*STATUS*/],
			),
		)
	}
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				v[42],
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		v[28 /*_1*/],
		v[30 /*_2*/],
		v[32 /*_3*/],
		v[34 /*_4*/],
		v[36 /*_5*/],
		v[38 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS42(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 42, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(CODE)~>`check__IELE-TESTING`(J)=>`check__IELE-TESTING`(J)~>`#exception__IELE-INFRASTRUCTURE`(CODE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(CODE),isJSON(J)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cb431963cbe6e335477603278f902543e5158c179d34fecc3673316f91e2bcd0) contentStartColumn(10) contentStartLine(533) org.kframework.attributes.Location(Location(533,10,533,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[32], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckXuXuIELEXhyphenTESTING, // as-is check__IELE-TESTING
					v[9 /*J*/],
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					v[7 /*CODE*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[32],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS165(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 165, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(_767)~>`exception_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(_767) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(58dd6c72738d4fdf5abdc1bd397ca8c7e60e0914f6bb7bcab5e26671370df6d8) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS288(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 288, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#codeDeposit_______IELE`(_369,_370,_371,REG,_372,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token(\"1\",\"Int\"))~>`#load___IELE`(REG,STATUS))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_373=>`.List{\"operandList\"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_372),isContract(_371)),isLValue(REG)),isInts(_373)),isInt(_370)),isInt(STATUS)),isBool(NEW)),isInt(_369)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(257d50d8bc60407439ffee58fba6fa09356e70941cb206f63af7423b854c3747) contentStartColumn(10) contentStartLine(1426) org.kframework.attributes.Location(Location(1426,10,1426,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	// `#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token("1","Int"))~>`#load___IELE`(REG,STATUS))
	if m.IsTrue(v[19 /*NEW*/]) { // rhs if-then-else
		v[75] = v[7 /*STATUS*/]
	} else {
		v[75] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
				v[15 /*REG*/],
				/* rhs KToken */ constInt1,
			),
			i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
				v[15 /*REG*/],
				v[7 /*STATUS*/],
			),
		)
	}
	v[76], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				v[75],
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[76],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_14*/],
		v[30 /*_15*/],
		v[32 /*_16*/],
		v[34 /*_17*/],
		v[36 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[42 /*_0*/],
			v[44 /*_1*/],
			v[46 /*_2*/],
			v[48 /*_3*/],
			v[50 /*_4*/],
			v[52 /*_5*/],
			v[54 /*_6*/],
			v[56 /*_7*/],
			v[58 /*_8*/],
			v[60 /*_9*/],
			v[62 /*_10*/],
			v[64 /*_11*/],
			v[66 /*_12*/],
			v[68 /*_13*/],
		),
		v[70 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS423(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 423, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#finishTx_IELE-TESTING`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#load___IELE`(`%__IELE-COMMON`(#token(\"0\",\"Int\")),STATUS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(STATUS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0d4faed2c3c0b8259c0f9efad8bf423fb2d9950bbaf371ff25926e4abf0e2781) contentStartColumn(10) contentStartLine(196) org.kframework.attributes.Location(Location(196,10,196,123)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
						/* rhs KToken */ m.IntZero,
					),
					v[7 /*STATUS*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS607(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 607, "{| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(CODE)~>`flush_IELE-TESTING`(.KList)=>#finalizeTx(#token(\"false\",\"Bool\"))~>`#exception__IELE-INFRASTRUCTURE`(CODE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(CODE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(db6ddaccb291529e17b46b7b8b4342339c1af44e60c5be3d183f1ac97a7d16e5) contentStartColumn(10) contentStartLine(84) org.kframework.attributes.Location(Location(84,10,84,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolFalse,
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					v[7 /*CODE*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS10(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 10, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sha3__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c7c09ed23730410cee4f328d9d7906c925f42d9249ae616b4bc1fc798eca011d) contentStartColumn(10) contentStartLine(234) org.kframework.attributes.Location(Location(234,10,234,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS34(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 34, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=load__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a805d89729d1e042c0381d4bf06dec3653a11e8af557819a1d7cdf24fadfa560) contentStartColumn(10) contentStartLine(198) org.kframework.attributes.Location(Location(198,10,198,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS43(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 43, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sext_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2ab0391cdf8e43cd5554a920b5b9da80cb432506bd0955b4fa2af7c610f517db) contentStartColumn(10) contentStartLine(221) org.kframework.attributes.Location(Location(221,10,221,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS44(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 44, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`revert__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a1b5408675c7caf04e56e5de3e6339e6c90e9c3b6829c7e33c3c1842bea85ff0) contentStartColumn(10) contentStartLine(241) org.kframework.attributes.Location(Location(241,10,241,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[7 /*OP1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_0*/],
		v[12 /*_1*/],
		v[14 /*_2*/],
		v[16 /*_3*/],
		v[18 /*_4*/],
		v[20 /*_5*/],
		v[22 /*_6*/],
		v[24 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS66(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 66, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,OP3))=>checkOperands(operandList(OP1,operandList(OP2,OP3)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(OP3),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c03ddf29ad0d2a58e55a7f1ac1c918a58fe2f1537ae29490f2224c92a9d92ed1) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[10 /*OP2*/],
							v[12 /*OP3*/],
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
		v[29 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS137(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 137, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,operandList(OP3,operandList(OP4,OP5))))=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,operandList(OP4,OP5)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b51d4ec4400c98efe58adaebcbd0a2fce82f4c15f14a0787777ffb3750670e01) contentStartColumn(10) contentStartLine(239) org.kframework.attributes.Location(Location(239,10,239,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[10 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								i.Model.NewKApply(m.LblOperandList, // as-is operandList
									v[16 /*OP4*/],
									v[18 /*OP5*/],
								),
							),
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
		v[35 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS577(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 577, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,operandList(OP3,OP4)))=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,OP4))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99cd48edcb3ae19a1fa6cc098342df203ad280cad088ed18ae957b659260dd00) contentStartColumn(10) contentStartLine(238) org.kframework.attributes.Location(Location(238,10,238,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[10 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								v[15 /*OP4*/],
							),
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
		v[32 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS299(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 299, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,OP2))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isNonEmptyOperands(OP2),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(87b54334763551b561420b015d05fa3a0f6ce8fa9953caf66339f9003b1e735c) contentStartColumn(10) contentStartLine(236) org.kframework.attributes.Location(Location(236,10,236,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						v[9 /*OP2*/],
					),
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS70(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 70, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=and_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e8bc6bb5699a64093eac52aabcf19fadfad6466c7f95c3aca55d33208e841ff1) contentStartColumn(10) contentStartLine(227) org.kframework.attributes.Location(Location(227,10,227,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS72(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 72, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2,OP3)=>checkLVals(lvalueList(STATUS,RETS))~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,ARGS))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dc57de212183646801b6cd2d9ae458ddcaad2eb86a8dbd2c1ef081385a883c03) contentStartColumn(10) contentStartLine(274) org.kframework.attributes.Location(Location(274,10,274,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
						v[8 /*STATUS*/],
						v[10 /*RETS*/],
					),
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[14 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[18 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[20 /*OP3*/],
								v[16 /*ARGS*/],
							),
						),
					),
				),
				v[21 /*DotVar1*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
		v[37 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS83(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 83, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=xor_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b94c9e3e87f5823900f37c092e0b27cfdbe54cfa8d2831284b1a9bb0806da9b6) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS91(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 91, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2)=>checkLVals(lvalueList(STATUS,RETS))~>checkOperands(operandList(OP1,operandList(OP2,ARGS)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d497e2357709e036b7a5c822a60e327045d8ac4d4cc13589c8327c8f18e97230) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,275,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
						v[8 /*STATUS*/],
						v[10 /*RETS*/],
					),
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[14 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[18 /*OP2*/],
							v[16 /*ARGS*/],
						),
					),
				),
				v[19 /*DotVar1*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
		v[35 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS97(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 97, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`store_,_,_,__IELE-COMMON`(OP1,OP2,OP3,OP4)=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,operandList(OP4,`.List{\"operandList\"}`(.KList))))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85136bf778d4848bb45434939315e32f5133fac346f6b7dad7b034e923656eb3) contentStartColumn(10) contentStartLine(201) org.kframework.attributes.Location(Location(201,10,201,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[9 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[11 /*OP3*/],
								i.Model.NewKApply(m.LblOperandList, // as-is operandList
									v[13 /*OP4*/],
									i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
									),
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS136(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 136, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=cmp__,__IELE-COMMON`(LVAL,_38,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_38),isLValue(LVAL)),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00aaf3fab9ac44a52683a6d21dcaff90bd2be679e0bb633a0cf68c235445048f) contentStartColumn(10) contentStartLine(232) org.kframework.attributes.Location(Location(232,10,232,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[11 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[13 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS168(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 168, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`selfdestruct__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc1ddea196b77dd3e3d3e70a53b425a7e7473df2eeb66465c39ceb2e919aff04) contentStartColumn(10) contentStartLine(242) org.kframework.attributes.Location(Location(242,10,242,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[7 /*OP1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_0*/],
		v[12 /*_1*/],
		v[14 /*_2*/],
		v[16 /*_3*/],
		v[18 /*_4*/],
		v[20 /*_5*/],
		v[22 /*_6*/],
		v[24 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS181(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 181, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=twos_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(128183dd97e74a184234e756c4f3c365b749ce2c63e1d3ab2c039f59aaeb1867) contentStartColumn(10) contentStartLine(222) org.kframework.attributes.Location(Location(222,10,222,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS198(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 198, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba8721b09d92b594ceac4d51b2a89d2bdf7c852a8900967bc52244fd201978c9) contentStartColumn(10) contentStartLine(235) org.kframework.attributes.Location(Location(235,10,235,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[7 /*OP1*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_0*/],
		v[12 /*_1*/],
		v[14 /*_2*/],
		v[16 /*_3*/],
		v[18 /*_4*/],
		v[20 /*_5*/],
		v[22 /*_6*/],
		v[24 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS210(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 210, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=not__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd65afe71e686cfc886b277c2be773e783ea0cafcf2153bc163a3b295e6df217) contentStartColumn(10) contentStartLine(207) org.kframework.attributes.Location(Location(207,10,207,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS224(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 224, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=or_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5f7590245d8a38607c5dcea751e11672fc2cd4e9c5e7acc17f17ce936a334866) contentStartColumn(10) contentStartLine(228) org.kframework.attributes.Location(Location(228,10,228,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS231(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 231, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sub_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d16a6cfcc14c90b6c5193086a59761bd3a86ca876d3dd0adf4606457165a21eb) contentStartColumn(10) contentStartLine(211) org.kframework.attributes.Location(Location(211,10,211,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS256(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 256, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=add_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e18dab704589c40bd88414fc35e7b9c26e01a641b059ba3fac7168649c02711) contentStartColumn(10) contentStartLine(209) org.kframework.attributes.Location(Location(209,10,209,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS273(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 273, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,RET,OP1,ARGS,OP2)=>checkLVals(lvalueList(STATUS,lvalueList(RET,`.List{\"lvalueList\"}`(.KList))))~>checkOperands(operandList(OP1,operandList(OP2,ARGS)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9d649cb6212a6d702fb66554be0235e081c8abf4290f9ea914132ba095454d50) contentStartColumn(10) contentStartLine(297) org.kframework.attributes.Location(Location(297,10,297,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
						v[7 /*STATUS*/],
						i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
							v[9 /*RET*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, // as-is .List{"lvalueList"}
							),
						),
					),
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[11 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[15 /*OP2*/],
							v[13 /*ARGS*/],
						),
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		v[18 /*_0*/],
		v[20 /*_1*/],
		v[22 /*_2*/],
		v[24 /*_3*/],
		v[26 /*_4*/],
		v[28 /*_5*/],
		v[30 /*_6*/],
		v[32 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS277(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 277, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mod_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5df2c7b8bd0aa0f1a522cb549369369667749d3c07299fb76849d32e7ab128d5) contentStartColumn(10) contentStartLine(214) org.kframework.attributes.Location(Location(214,10,214,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS280(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 280, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sload__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b312fad7eb3ff4a1b0f038850a9658692508dc458d1a53b6b1a0efea66e21ca8) contentStartColumn(10) contentStartLine(203) org.kframework.attributes.Location(Location(203,10,203,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS381(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 381, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`store_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperand(OP1),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(defc9e8bac1ee5ec9ccd89b1687e344dfdea55dfc25018b67b08845e0cadbe13) contentStartColumn(10) contentStartLine(200) org.kframework.attributes.Location(Location(200,10,200,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[9 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS390(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 390, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=exp_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(97fb62c52ea934071b486283700b0401ac295dc75a1dc6a238d5b60b0815abf1) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS403(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 403, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=calladdress_at__IELE-COMMON`(RET,NAME,OP)=>checkLVal(RET)~>checkOperand(OP)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(RET),isGlobalName(NAME)),isOperand(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02e1686b57e4d64c561163e98e97e1ff3a7ac3cbe95caed557a19329b9f154a8) contentStartColumn(10) contentStartLine(277) org.kframework.attributes.Location(Location(277,10,277,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*RET*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[11 /*OP*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS406(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 406, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=expmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{\"operandList\"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1b49462180f8911c83ff3f7ba483f91af530fb579b3b4381354dd63fe44446b2) contentStartColumn(10) contentStartLine(218) org.kframework.attributes.Location(Location(218,10,218,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS439(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 439, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=iszero__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4bcbbaf6ce007b039783f8cfb0014a5f6ebbb27c34d5c9f14f43086f681e7abd) contentStartColumn(10) contentStartLine(206) org.kframework.attributes.Location(Location(206,10,206,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS460(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 460, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mulmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{\"operandList\"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d497d7cd0ad4b33bc0838ec7fcaf212fc0bde2a71a60461286c753ced24f437) contentStartColumn(10) contentStartLine(217) org.kframework.attributes.Location(Location(217,10,217,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS471(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 471, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1008d78cbc927d949c049fa81d9b95257e2cc4aa922b3f8f609321e98cc64528) contentStartColumn(10) contentStartLine(197) org.kframework.attributes.Location(Location(197,10,197,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[9 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS480(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 480, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=div_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f689f7dbcd828dabab78fe80d377e3a734648a71f57b47d3ed3ff24972c46f23) contentStartColumn(10) contentStartLine(212) org.kframework.attributes.Location(Location(212,10,212,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS506(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 506, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=bswap_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(634512dac32e78fab22c1e37ac5f320b172a1fc1ee53a821743f4b2178462f20) contentStartColumn(10) contentStartLine(223) org.kframework.attributes.Location(Location(223,10,223,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS534(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 534, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=shift_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2416e66f07e29c190f44d2d1d26d25bfef2ae3fb96610a00dd56461d6f8bedbd) contentStartColumn(10) contentStartLine(230) org.kframework.attributes.Location(Location(230,10,230,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS537(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 537, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`sstore_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperand(OP1),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(65700e25cab04f787355210b9b16f84747f2b24e6749de0b3ca7050cd62ca2e2) contentStartColumn(10) contentStartLine(204) org.kframework.attributes.Location(Location(204,10,204,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[7 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[9 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS546(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 546, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=log2__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,`.List{\"operandList\"}`(.KList)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(24076c49362d8e503e3218e6871bd0887f168f2d42cb2734cd64ea3e89ac5ed8) contentStartColumn(10) contentStartLine(225) org.kframework.attributes.Location(Location(225,10,225,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
						),
					),
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_0*/],
		v[14 /*_1*/],
		v[16 /*_2*/],
		v[18 /*_3*/],
		v[20 /*_4*/],
		v[22 /*_5*/],
		v[24 /*_6*/],
		v[26 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS575(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 575, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mul_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a4f50990611f9b815c308ed74e35fe45859b22f21b1ad3346f3e666e14f2e390) contentStartColumn(10) contentStartLine(210) org.kframework.attributes.Location(Location(210,10,210,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS588(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 588, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=load_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{\"operandList\"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(89f9e4eba8e2b198a2a02f1f7c0c387976705221a9ed528b76fb53058e5ebcc6) contentStartColumn(10) contentStartLine(199) org.kframework.attributes.Location(Location(199,10,199,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS626(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 626, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=addmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{\"operandList\"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f974e5860360c11127538171010aed9f0808deb53a898719d15fe5e3ee663fc0) contentStartColumn(10) contentStartLine(216) org.kframework.attributes.Location(Location(216,10,216,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblOperandList, // as-is operandList
								v[13 /*OP3*/],
								i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
								),
							),
						),
					),
				),
				v[14 /*DotVar1*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
		v[30 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS655(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 655, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=byte_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{\"operandList\"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c184a6a8e22b3acd7fba79dcf7651886adc642b2e17de1592e2576860eed372) contentStartColumn(10) contentStartLine(220) org.kframework.attributes.Location(Location(220,10,220,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVal, // as-is checkLVal
					v[7 /*LVAL*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[9 /*OP1*/],
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*OP2*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[12 /*DotVar1*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
		v[28 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS668(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 668, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`%__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f39ce82ab0d6a04cc60dbb9bece8da2fe69d4d8ede0db6ed2605dcbfeb3f225a) contentStartColumn(10) contentStartLine(272) org.kframework.attributes.Location(Location(272,10,272,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					v[7 /*RETS*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[12 /*ARGS*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
		v[29 /*_7*/],
	), nil
}

func (i *Interpreter) stepRHS12(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 12, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=exp_,__IELE-COMMON0_`(K0,K1)=>`_=exp_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e6f60debbd8ac460b4e30bcc0fb5b9d100df69ebe76cf2d8a8d64d8a590c075a) cool() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=exp_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS14(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 14, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerret__IELE-COMMON0_`(.KList)=>`ret__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(47591e2e38c3f86124331d00dc931369107b68b39a7dc3dd99dceae6d2da0b50) cool() hybrid() org.kframework.attributes.Location(Location(198,25,198,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(372469954) strict(1)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRetXuXuIELEXhyphenCOMMON, // as-is ret__IELE-COMMON
					v[6 /*HOLE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS22(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 22, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(258b6a41e1e7fc32817a3ca76c4c1b03a33cd9facbd47579e517cebb8ffabaed) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=copycreate_(_)send__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS36(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 36, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=load_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8f9b21102939553e5b5cfd35e1888fafd11a80fde2e7ec7fd4f5e2a7d5014186) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=load_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS49(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 49, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3`(K0,K1,K2,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cde926570ee5bc72645d718746dcb94a2f09d0c20d1ceded4c2349dc51ab4d23) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS54(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 54, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=not__IELE-COMMON0_`(K0)=>`_=not__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e321b001b92b77ac2053f15c8402fe343f6b4ad447d2cee57a3ad4e10e2c53f3) cool() hybrid() org.kframework.attributes.Location(Location(147,25,147,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1277933280) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqnotXuXuIELEXhyphenCOMMON, // as-is _=not__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS55(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 55, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load__IELE-COMMON0_`(K0)=>`_=load__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9baab7fd30fb4199cc25d488bcbaab6de0a0c07251aae4a82f1b903e8bb79493) cool() hybrid() org.kframework.attributes.Location(Location(126,23,126,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1650813924) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqloadXuXuIELEXhyphenCOMMON, // as-is _=load__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS60(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 60, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,__IELE-COMMON1_`(K1)=>`store_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(870ea52990199648ce7f1ec66db5978262b3ca414098c06040a894cf7fd80874) cool() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1408482749) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,__IELE-COMMON
					v[6 /*HOLE*/],
					v[8 /*K1*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS64(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 64, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_2`(K0,K2,K3)=>`_=mulmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02a990bd3b29cb9a0ca23ee29e23e0dc58493caa1305770d7f8c42835352c205) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mulmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS77(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 77, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2`(K0,K1,K2,K3,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a9c87023ce0bfe10404bc61240e890f3813bb9be9d3be1f25b7b8b57bc859487) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[14 /*K3*/],
					v[6 /*HOLE*/],
					v[16 /*K5*/],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS78(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 78, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezersstore_,__IELE-COMMON1_`(K1)=>`sstore_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f59318d465f48a03be0d48b6d1c9eaaf9020d344b32108a122a6c8234e2c162a) cool() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(573200870) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON, // as-is sstore_,__IELE-COMMON
					v[6 /*HOLE*/],
					v[8 /*K1*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS90(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 90, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_2`(K0,K1,K3)=>`_=expmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b381b1e7526e9fbcf6f08ec4c86907cb9b2f1c1d28681162be9659bd95a500f9) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=expmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS100(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 100, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_`(K0,K2,K3)=>`_=addmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aa7a6b4ba5362ba63271c558ec21c9cb9beebad757e3bdb75ceb2a8c93220d9d) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=addmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS115(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 115, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_`(K0,K1,K2,K3,K4)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(208aa8603040389406a54f12991f6963a0cef5fec6b38c74e6ea64d011f311ee) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[14 /*K3*/],
					v[16 /*K4*/],
					v[6 /*HOLE*/],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS119(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 119, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=or_,__IELE-COMMON1_`(K0,K2)=>`_=or_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1880a91d1bc2e543bdbb6c37f0ced364f01398f6d141eb8910884bfe36cc7760) cool() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=or_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS124(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 124, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_`(K0,K1,K3)=>`_=mulmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4eaa08d4291906668d5ad1ba538e2d3b12bbee11492a0c1a5c8c1b81d38d16a1) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mulmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS150(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 150, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4`(K0,K2,K3,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26d9cc24fae8f4c0143c56059503f4c4ede32e5a769852709df3f977b78a3100) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS152(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 152, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)=>`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c391f2887227a2a2f581a66a2872b500a019adc002e2bcd247f22878c7aa423) cool() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(333040629) seqstrict(4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=create_(_)send__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[14 /*K3*/],
					v[6 /*HOLE*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS162(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 162, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sub_,__IELE-COMMON0_`(K0,K1)=>`_=sub_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6758460117862cd6b82744c5298cd5bb9bbe9335cbc11b0b207a9add13901272) cool() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=sub_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS166(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 166, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_`(K0,K2,K3,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(323f9d4933ef5e1f7b35be7411a2bed3706c15e46a87aa63b85f28f20bb643e7) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS169(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 169, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_2`(K0,K2,K3)=>`store_,_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e0d0e0292794039c6511de66f8e9f03359fdbceb2f0c4e32f4364d7303734e3) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS173(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 173, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerrevert__IELE-COMMON0_`(.KList)=>`revert__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7071b55f6d16cb1d11ebf835f9441bd143445f73699a7c62996c599849b4b427) cool() hybrid() org.kframework.attributes.Location(Location(200,25,200,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2030411960) strict(1)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblRevertXuXuIELEXhyphenCOMMON, // as-is revert__IELE-COMMON
					v[6 /*HOLE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS179(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 179, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerbr_,__IELE-COMMON1_`(K1)=>`br_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4291c4c15f443e0837bce246ece1cac587733eb85e907061931e94cec8d5f2f8) cool() hybrid() org.kframework.attributes.Location(Location(183,27,183,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(749282235) strict(1)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblBrXuXcommaXuXuIELEXhyphenCOMMON, // as-is br_,__IELE-COMMON
					v[6 /*HOLE*/],
					v[8 /*K1*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS227(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 227, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=iszero__IELE-COMMON0_`(K0)=>`_=iszero__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fa8ea19e74c0ab4087e8cc175079e0d7c85e3f919d81229174c4c2ac2bbc2ec) cool() hybrid() org.kframework.attributes.Location(Location(146,25,146,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1819940427) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON, // as-is _=iszero__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS228(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 228, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sext_,__IELE-COMMON0_`(K0,K1)=>`_=sext_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6b750262fd1f286fba5d4dc9bb05159d20b929c17df0adc63af4790a064d620d) cool() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(418179060) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=sext_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS229(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 229, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(532d8f209b90862555be3b76f771122182f3ff1b1e7f9d6e1212cca8161f6cab) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=copycreate_(_)send__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[14 /*K3*/],
					v[6 /*HOLE*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS234(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 234, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sub_,__IELE-COMMON1_`(K0,K2)=>`_=sub_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(209979817283baa5d9ed62fb629d87df2be8d8d4df549fdb583ccb472e330c1e) cool() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=sub_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS241(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 241, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mul_,__IELE-COMMON1_`(K0,K2)=>`_=mul_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ca387f097815b490f89fb88fb470d44f13bbcbb0a3ff69c04f70282458286012) cool() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1324829744) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mul_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS242(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 242, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCcallgas1_`(K0,K2,K3,K4,K5,K6)=>`Ccallgas`(K0,HOLE,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8a27f1694ed782a04d08a480d57000dceb19c36cd7f166c01d763619b015007f) cool() klabel(Ccallgas) org.kframework.attributes.Location(Location(748,24,748,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(939199469) strict(2)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCcallgas, // as-is Ccallgas
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
					v[18 /*K6*/],
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS248(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 248, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_(_)_IELE-COMMON0_`(K0,K1)=>`_=call_(_)_IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d687324cdd9154aa91f158f56502e1242d2c254588fca037cc5e3fc4a19cfb8) cool() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(515809288) strict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS251(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 251, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=shift_,__IELE-COMMON0_`(K0,K1)=>`_=shift_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c3a04e19e1a9223130ee57352c33b856deb99fd6375e7681afa0e000c19455c) cool() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=shift_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS253(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 253, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer#refund__IELE0_`(.KList)=>`#refund__IELE`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4ef3f5da828d386585622e13e2645cd931973ee3191f1c898f94fba3214582e3) cool() org.kframework.attributes.Location(Location(1307,27,1307,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) productionID(406375608) strict()] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[6 /*HOLE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS254(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 254, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3`(K0,K1,K3,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8f896752d4ffb1f7f7ffa4847257b9b0043a43b15fb8e0ba6fc96faa285e6bbe) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS260(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 260, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=div_,__IELE-COMMON1_`(K0,K2)=>`_=div_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84def9542b2ec910eb14db6e4632dc7773d01ac3e337a380512f50ef8d41b670) cool() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=div_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS264(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 264, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(200cbf56d9e7964b49bdf1ac04cf594d567c7d38123df73803f5fbc83540a09a) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=addmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS266(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 266, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a757c549e17c02ee62eebd7c5c4f9d1d1d0f712c96774a2959e33f50e754c2d) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=expmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS269(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 269, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=exp_,__IELE-COMMON1_`(K0,K2)=>`_=exp_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2a9028caea14e0bb022de61873e23ba1cf7cbed32b952714f530de27ae6f47c5) cool() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=exp_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS281(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 281, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCcall1_`(K0,K2,K3,K4,K5,K6)=>`Ccall`(K0,HOLE,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd3bc9a6f156685acbdc0ab4791fc879039d690760d5d4dbe94d71e6a160f293) cool() klabel(Ccall) org.kframework.attributes.Location(Location(747,24,747,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(616881582) strict(2)] |}")
	v[43], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCcall, // as-is Ccall
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
					v[18 /*K6*/],
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[43],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS282(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 282, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=byte_,__IELE-COMMON1_`(K0,K2)=>`_=byte_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(920e2adfb8214cd015523fa0f59e0a3673d8852a9c72595c5d184e6f84e35720) cool() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(527829831) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=byte_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS287(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 287, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=and_,__IELE-COMMON1_`(K0,K2)=>`_=and_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(10321c917499b4daac3c6a8f4aa088e38bee19b33dbe81080405152deeeae92a) cool() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=and_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS300(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 300, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON0_`(K0,K1,K2)=>`store_,_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(db9e405e23abd5ce4a040b6238848d74d2c6f323e9763ef61cf542838d681b5c) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS308(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 308, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)=>`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85f1100595bb3f78b935b6183f00b757dc3a3afebd6c6f1bd7dfcfa56c1cd08c) cool() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(333040629) seqstrict(4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=create_(_)send__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS311(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 311, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,__IELE-COMMON0_`(K0)=>`store_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab4ae14e5428394002947585c8958ad4755d95d81fb15308ac05f980afb104af) cool() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1408482749) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS317(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 317, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_2`(K0,K1,K3)=>`_=addmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(323a0e7c12fd1ac2b627dd3917553e66114f5b261817bb0fddb9a15ae11a3c26) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1399701152) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=addmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS319(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 319, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=cmp__,__IELE-COMMON1_`(K0,K1,K3)=>`_=cmp__,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d03202fa0fd1d0b35b303c008f2c0e5f937c6f9db776db97ff1daf9fd855f74b) cool() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(748842359) seqstrict(3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=cmp__,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS334(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 334, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=xor_,__IELE-COMMON0_`(K0,K1)=>`_=xor_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8777763f469fb86a524c90f11f5b7e5f15f97ab900b8e0af580deaaae58766c7) cool() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=xor_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS343(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 343, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sext_,__IELE-COMMON1_`(K0,K2)=>`_=sext_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01ff786d2b0c61f0c42ca665db93c6293971e50d8661683b15208a4345b5ea79) cool() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(418179060) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=sext_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS364(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 364, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_`(K0,K1,K3)=>`store_,_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(936ff43fbeb71997fa798fbcd6accb05ad49f449e27d298ee8b06e4f77dc8c89) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS367(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 367, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer#call________IELE1_`(K0,K1,K2,K4,K5,K6)=>`#call________IELE`(K0,K1,K2,HOLE,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K6),isInt(K0)),isConstant(K2)),isInt(K4)),isInt(K1)),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51d32cb4ca229d37fabf194fef430aea82f1f35419539c5318d0386c85808c87) cool() org.kframework.attributes.Location(Location(1156,27,1156,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) productionID(1424698224) strict(4)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
					v[18 /*K6*/],
				),
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_0*/],
		v[29 /*_1*/],
		v[31 /*_2*/],
		v[33 /*_3*/],
		v[35 /*_4*/],
		v[37 /*_5*/],
		v[39 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS369(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 369, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=log2__IELE-COMMON0_`(K0)=>`_=log2__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dcb6d3ce9eb3e1b66ea24838e36050e0e3d8195bf21047c0f22044cddcfc4b9d) cool() hybrid() org.kframework.attributes.Location(Location(160,24,160,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(567294307) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqlog2XuXuIELEXhyphenCOMMON, // as-is _=log2__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS380(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 380, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=xor_,__IELE-COMMON1_`(K0,K2)=>`_=xor_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4b08369f17fe127d1102cdb60f03d606f0088e623b0b4ace668d95ba204a2499) cool() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=xor_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS404(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 404, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mod_,__IELE-COMMON0_`(K0,K1)=>`_=mod_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dcf30eca17fd4f18529031ff08ac3fd8159c0dddb579fe3316898fc16c5ba16f) cool() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mod_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS415(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 415, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=bswap_,__IELE-COMMON1_`(K0,K2)=>`_=bswap_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ee2c97a277b699a2ebf0e2a8bf464e0e65de5fdc62ae66d75db93e9b426ed2ab) cool() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=bswap_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS419(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 419, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=add_,__IELE-COMMON0_`(K0,K1)=>`_=add_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(147e02ebad1869d18360ff4b34cf6e5da026a0539429dbff9550a69303b6f565) cool() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1046665075) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=add_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS427(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 427, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sha3__IELE-COMMON0_`(K0)=>`_=sha3__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a0eb8693d18f21963586558db360681ba690834dbe46a4f802550c1cd740b545) cool() hybrid() org.kframework.attributes.Location(Location(174,23,174,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1208532123) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsha3XuXuIELEXhyphenCOMMON, // as-is _=sha3__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS432(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 432, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_2`(K0,K1,K3,K4)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,HOLE,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(58e65d9457792cd3110b0a3975e30fe127a61274dae64855da99b161ae9bc51d) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1200470358) seqstrict(3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=copycreate_(_)send__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS434(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 434, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=add_,__IELE-COMMON1_`(K0,K2)=>`_=add_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(519e70f681ef8467195b1f2a76f32912ec2dac82ead35881c19228f75750079b) cool() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1046665075) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=add_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS445(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 445, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_3`(K1,K2,K3)=>`store_,_,_,__IELE-COMMON`(HOLE,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(542d8f09966059a3baa413e2648c327f257c1f8a28020e89aefefbe5f1993c64) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(873634936) seqstrict(1,2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,_,_,__IELE-COMMON
					v[6 /*HOLE*/],
					v[8 /*K1*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS451(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 451, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON1_2`(K0,K2,K3)=>`_=load_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(294743508004b7428b8751912e9118ce1c6695a0384cc42bdaf3fe1d20866d09) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=load_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS453(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 453, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerselfdestruct__IELE-COMMON0_`(.KList)=>`selfdestruct__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3bd08da761f1794084eb33c7190b07b8292e48406c0e830f4f43ed5469e6529) cool() hybrid() org.kframework.attributes.Location(Location(220,31,220,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1822525972) strict(1)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblSelfdestructXuXuIELEXhyphenCOMMON, // as-is selfdestruct__IELE-COMMON
					v[6 /*HOLE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS462(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 462, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezersstore_,__IELE-COMMON0_`(K0)=>`sstore_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ef9b7dc185b438ae956cb9fc76572ae6f892b8dc64e5fd565588975a5a8005a) cool() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(573200870) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON, // as-is sstore_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS467(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 467, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)=>`_=cmp__,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(891ba76cbe4eadda57e4cddeca4da10eee11267ca6f3b0b40faa6980e97ae6ba) cool() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(748842359) seqstrict(3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=cmp__,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS496(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 496, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mul_,__IELE-COMMON0_`(K0,K1)=>`_=mul_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(da88e063234fb057409881d64eda253d2a8d1baf05b4428b172b2693850227ad) cool() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1324829744) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mul_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS499(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 499, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mod_,__IELE-COMMON1_`(K0,K2)=>`_=mod_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18d24fbe8587dc3658512f8d079580895ed9d10e5d93f266523f7b24f1799f57) cool() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mod_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS502(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 502, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog__IELE-COMMON0_`(.KList)=>`log__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f9a120555962bacf2c356012cf70d95f0c1baa820e954c6840fed75f7941c1d) cool() hybrid() org.kframework.attributes.Location(Location(208,22,208,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(899929247) strict(1)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLogXuXuIELEXhyphenCOMMON, // as-is log__IELE-COMMON
					v[6 /*HOLE*/],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS503(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 503, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCselfdestruct1_`(K0,K2)=>`Cselfdestruct`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),isInt(K2)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7da7561d3f789e2d82e0c553f747efcfbf2472efdf48f4d13339408d45680338) cool() klabel(Cselfdestruct) org.kframework.attributes.Location(Location(778,24,778,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) productionID(1309129055) strict(2)] |}")
	v[35], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCselfdestruct, // as-is Cselfdestruct
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[35],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS514(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 514, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=and_,__IELE-COMMON0_`(K0,K1)=>`_=and_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b9886b5fe3effdaa27d4370e813094d880dc8c9114865d0a63e8e6c490b63a18) cool() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=and_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS515(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 515, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=shift_,__IELE-COMMON1_`(K0,K2)=>`_=shift_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4ea77ba8c220af1c7c3b437bcb219740e43ec928e7b93f3050d6ae55e24e2866) cool() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=shift_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS516(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 516, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=or_,__IELE-COMMON0_`(K0,K1)=>`_=or_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(46ce28879a1594b1e7b1d75f54ce208b3057690ed2ddc1ba428c2a6314cfdc78) cool() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=or_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS536(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 536, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=div_,__IELE-COMMON0_`(K0,K1)=>`_=div_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e1cb412b1b927102f3a41d40350fc968065cc7ef4a12d4b9b4b368f984c3b364) cool() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=div_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS540(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 540, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=calladdress_at__IELE-COMMON0_`(K0,K1)=>`_=calladdress_at__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(77066cbb2ebaf0d33150b75b3e6d7bff22bd27b863417aecd7c450060a880e01) cool() hybrid() org.kframework.attributes.Location(Location(196,30,196,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2112233878) strict(3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON, // as-is _=calladdress_at__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS542(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 542, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog_,__IELE-COMMON1_`(K1)=>`log_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(36a77a722575f684c648db2b569ce81b65ce60f1a4c8e315bd9b9b6ca1898223) cool() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(949684105) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, // as-is log_,__IELE-COMMON
					v[6 /*HOLE*/],
					v[8 /*K1*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS543(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 543, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_(_)_IELE-COMMON1_`(K0,K2)=>`_=call_(_)_IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(def5d9755e084f20969804e39709b014c4e1318e7ac74bb3149089a4c527822b) cool() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(515809288) strict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS547(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 547, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=bswap_,__IELE-COMMON0_`(K0,K1)=>`_=bswap_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(189e6f8b06f5ec1dc425668f0ae4bc01cad46ec15b68707b5b2642503f74dd91) cool() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=bswap_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS552(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 552, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=twos_,__IELE-COMMON1_`(K0,K2)=>`_=twos_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4905b3e07a28804c0ebee3f68343dcc7d18609e3ebeb762b00fbf5dd8f83dde6) cool() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=twos_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS561(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 561, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=twos_,__IELE-COMMON0_`(K0,K1)=>`_=twos_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c50070e0db98470bbbb75bec96f32abb71ee1eef601e29b34df19eaff6005f0e) cool() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=twos_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS585(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 585, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog_,__IELE-COMMON0_`(K0)=>`log_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(15dcd970c3fd66da079724b23941fddf5156f8590b5beab078f04bc902db58ac) cool() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(949684105) seqstrict(1,2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, // as-is log_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS614(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 614, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=byte_,__IELE-COMMON0_`(K0,K1)=>`_=byte_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(359d907a295c05e1b71e83d7b5b8dcf0b7c63a11f95abb1bb58c580de12d5e63) cool() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(527829831) seqstrict(2,3)] |}")
	v[36], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=byte_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[36],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_0*/],
		v[21 /*_1*/],
		v[23 /*_2*/],
		v[25 /*_3*/],
		v[27 /*_4*/],
		v[29 /*_5*/],
		v[31 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS621(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 621, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b070ad4c7c628b807fd42a55f230ef07f4b24a28742fdadf3d002072cc76367a) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1204296383) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=mulmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS635(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 635, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_`(K0,K1,K2,K3)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1d75c6ff7eae857c689b5550feb5f9040a55a76806a51d6ec71aa56afa600665) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[14 /*K3*/],
					v[6 /*HOLE*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS636(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 636, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8b63739974943db07183e2ecce4185470bd2feba3b8fe1208b8f4cd71e2ea2ca) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(394785440) seqstrict(2,3,4,5)] |}")
	v[42], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
					v[14 /*K4*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[42],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_0*/],
		v[25 /*_1*/],
		v[27 /*_2*/],
		v[29 /*_3*/],
		v[31 /*_4*/],
		v[33 /*_5*/],
		v[35 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS644(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 644, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_`(K0,K2,K3)=>`_=expmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0cfb5d6249a1bdc0dd33c0e35cdff5386466be53c409f8d91c14dccce194b07d) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=expmod_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
					v[10 /*K2*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS666(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 666, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON1_`(K0,K1,K3)=>`_=load_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1694bb94ebdf021bb020a5abe28818f67de325ece21612264c558be42709cea3) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(400103862) seqstrict(2,3,4)] |}")
	v[39], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is _=load_,_,__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[6 /*HOLE*/],
					v[12 /*K3*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[39],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_0*/],
		v[23 /*_1*/],
		v[25 /*_2*/],
		v[27 /*_3*/],
		v[29 /*_4*/],
		v[31 /*_5*/],
		v[33 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS667(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 667, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_`(K0,K1,K2,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85c20232996a65fa8b4a05e1c9dc4390652c76b7ca7694b066b096bddc2da567) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(1926673338) seqstrict(2,3,4,5,6)] |}")
	v[45], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					v[8 /*K0*/],
					v[10 /*K1*/],
					v[12 /*K2*/],
					v[6 /*HOLE*/],
					v[14 /*K4*/],
					v[16 /*K5*/],
				),
				v[17 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[45],
				v[23 /*SREST*/],
			),
		),
		v[25 /*_0*/],
		v[27 /*_1*/],
		v[29 /*_2*/],
		v[31 /*_3*/],
		v[33 /*_4*/],
		v[35 /*_5*/],
		v[37 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS676(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 676, "{| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sload__IELE-COMMON0_`(K0)=>`_=sload__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token(\"true\",\"Bool\"),isKResult(HOLE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f01df7cc3b09448b3609c648e9b154d779bf34ead62549cc435817bf941a5e5) cool() hybrid() org.kframework.attributes.Location(Location(137,24,137,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-syntax.k)) productionID(2103569237) strict(2)] |}")
	v[33], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXuXeqsloadXuXuIELEXhyphenCOMMON, // as-is _=sload__IELE-COMMON
					v[8 /*K0*/],
					v[6 /*HOLE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[33],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_0*/],
		v[19 /*_1*/],
		v[21 /*_2*/],
		v[23 /*_3*/],
		v[25 /*_4*/],
		v[27 /*_5*/],
		v[29 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS33(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 33, "{| rule `<generatedTop>`(`<k>`(EX~>``_116=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(_116),isException(EX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a667e3f644abe5b18b9f34b5dcf90e056287d91cc75c52c46a38f829587c279) contentStartColumn(10) contentStartLine(327) org.kframework.attributes.Location(Location(327,10,327,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[6 /*EX*/],
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS149(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 149, "{| rule `<generatedTop>`(`<k>`(EX~>``_104=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isInternalOp(_104)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01c5b5c5895ce51c00d66bde8087db3cf8fb54a39e16f8feb765738cdc511b49) contentStartColumn(10) contentStartLine(329) org.kframework.attributes.Location(Location(329,10,329,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[6 /*EX*/],
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS361(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 361, "{| rule `<generatedTop>`(`<k>`(EX~>``_115=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isInt(_115)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(27563d92107cef3ac9ffced96d2e6b2ca2e210ed2b55c28773ae23343ab73bfd) contentStartColumn(10) contentStartLine(326) org.kframework.attributes.Location(Location(326,10,326,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[30], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[6 /*EX*/],
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[30],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS486(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 486, "{| rule `<generatedTop>`(`<k>`(EX~>``_110=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isBlocks(_110)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(276856d77bfe0930f8bd905783915de56994aadf311bf5c3f006225bd1ff9600) contentStartColumn(10) contentStartLine(328) org.kframework.attributes.Location(Location(328,10,328,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[31], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[6 /*EX*/],
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[31],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_0*/],
		v[18 /*_1*/],
		v[20 /*_2*/],
		v[22 /*_3*/],
		v[24 /*_4*/],
		v[26 /*_5*/],
		v[28 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS167(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 167, "{| rule `<generatedTop>`(`<k>`(`#illFormed_IELE`(.KList)~>``K=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isKItem(K),`_=/=K_`(K,`#finishTypeChecking_IELE`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b547df42dc7548abaef7a7d82c4c1e5005b638dfbe808e750cd6d0b6b24bfb3) contentStartColumn(10) contentStartLine(1386) org.kframework.attributes.Location(Location(1386,10,1387,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[29], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashillFormedXuIELE, // as-is #illFormed_IELE
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[29],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS294(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 294, "{| rule `<generatedTop>`(`<k>`(``G~>`#deductGas_IELE-GAS`(.KList)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"5\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(G),isInt(GAVAIL)),`_<Int__INT`(GAVAIL,G)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9c55c1fe5ceb0393d8aff1f5285ce64e0be375a77c4189fef098a636c37974ef) contentStartColumn(10) contentStartLine(31) org.kframework.attributes.Location(Location(31,10,31,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[88], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt5,
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[88],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_28*/],
		v[17 /*_29*/],
		v[19 /*_30*/],
		v[21 /*_31*/],
		v[23 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_14*/],
			v[28 /*_15*/],
			v[30 /*_16*/],
			v[32 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				v[45 /*_5*/],
				v[47 /*_6*/],
				v[49 /*_7*/],
				v[51 /*_8*/],
				v[53 /*_9*/],
				v[55 /*_10*/],
				v[57 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[60 /*GAVAIL*/],
				),
				v[62 /*_12*/],
				v[64 /*_13*/],
			),
			v[66 /*_18*/],
			v[68 /*_19*/],
			v[70 /*_20*/],
			v[72 /*_21*/],
			v[74 /*_22*/],
			v[76 /*_23*/],
			v[78 /*_24*/],
			v[80 /*_25*/],
			v[82 /*_26*/],
			v[84 /*_27*/],
		),
		v[86 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS329(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 329, "{| rule `<generatedTop>`(`<k>`(``STATUS~>`#adjustGas_IELE-TESTING`(.KList)=>`#load___IELE`(`%__IELE-COMMON`(#token(\"0\",\"Int\")),STATUS)~>`#adjustGas_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(STATUS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33e46edaad80fb3c59ece17ea5e73f616423adb8b81590a78d5912c7093c0c85) contentStartColumn(10) contentStartLine(192) org.kframework.attributes.Location(Location(192,10,192,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[28], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
						/* rhs KToken */ m.IntZero,
					),
					v[6 /*STATUS*/],
				),
				i.Model.NewKApply(m.LblXhashadjustGasXuIELEXhyphenTESTING, // as-is #adjustGas_IELE-TESTING
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[28],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_0*/],
		v[17 /*_1*/],
		v[19 /*_2*/],
		v[21 /*_3*/],
		v[23 /*_4*/],
		v[25 /*_5*/],
		v[27 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS356(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 356, "{| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(OUT)~>`#return___IELE`(_463,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,intSize(OUT))~>`#load___IELE`(REG,OUT)~>`#refund__IELE`(GAVAIL)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(OUT),isLValue(REG)),isInt(GAVAIL)),isLValues(_463)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(acea2f7387312803c35c9923ea36dec70a80f961b96091483dfd19e35e5052cf) contentStartColumn(10) contentStartLine(1284) org.kframework.attributes.Location(Location(1284,10,1292,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[94], i.evalErr = i.evalIntSize( // intSize(OUT)
		v[7 /*OUT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[11 /*REG*/],
					v[94],
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[11 /*REG*/],
					v[7 /*OUT*/],
				),
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[65 /*GAVAIL*/],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[95],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		v[26 /*_31*/],
		v[28 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_14*/],
			v[33 /*_15*/],
			v[35 /*_16*/],
			v[37 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[65 /*GAVAIL*/],
				),
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_18*/],
			v[73 /*_19*/],
			v[75 /*_20*/],
			v[77 /*_21*/],
			v[79 /*_22*/],
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
		),
		v[91 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS416(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 416, "{| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(STATUS)~>`#finishTx_IELE-TESTING`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(`%__IELE-COMMON`(#token(\"0\",\"Int\")),STATUS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(STATUS),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a68b07c8dbc5caca3e00adb0319bef14109943dd329523924df587fe9de23fa8) contentStartColumn(10) contentStartLine(197) org.kframework.attributes.Location(Location(197,10,197,161)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[88], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[61 /*GAVAIL*/],
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
						/* rhs KToken */ m.IntZero,
					),
					v[7 /*STATUS*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[88],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		v[24 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_14*/],
			v[29 /*_15*/],
			v[31 /*_16*/],
			v[33 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				v[52 /*_8*/],
				v[54 /*_9*/],
				v[56 /*_10*/],
				v[58 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[61 /*GAVAIL*/],
				),
				v[63 /*_12*/],
				v[65 /*_13*/],
			),
			v[67 /*_18*/],
			v[69 /*_19*/],
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			v[83 /*_26*/],
			v[85 /*_27*/],
		),
		v[87 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS436(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 436, "{| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(OUT)~>`#codeDeposit_______IELE`(_464,_465,_466,REG,_467,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>OUT,#registerDelta(REG,intSize(OUT))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(REG,OUT))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(OUT),isContract(_466)),isLValue(REG)),isInt(_465)),isLValue(_467)),isBool(NEW)),isInt(GAVAIL)),isInt(_464)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8db40c9c27fe0b65a0c3e56a5207d5aa5415ddb8f4fe4ce5f89deb81f547c62b) contentStartColumn(10) contentStartLine(1427) org.kframework.attributes.Location(Location(1427,10,1428,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	// `#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>OUT,#registerDelta(REG,intSize(OUT))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(REG,OUT))
	if m.IsTrue(v[19 /*NEW*/]) { // rhs if-then-else
		v[103] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
				v[73 /*GAVAIL*/],
			),
			v[7 /*OUT*/],
		)
	} else {
		v[104], i.evalErr = i.evalIntSize( // intSize(OUT)
			v[7 /*OUT*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[103] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
				v[15 /*REG*/],
				v[104],
			),
			i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
				v[73 /*GAVAIL*/],
			),
			i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
				v[15 /*REG*/],
				v[7 /*OUT*/],
			),
		)
	}
	v[105], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #popSubstate_IELE-INFRASTRUCTURE
				),
				v[103],
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[105],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_28*/],
		v[30 /*_29*/],
		v[32 /*_30*/],
		v[34 /*_31*/],
		v[36 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[39 /*_14*/],
			v[41 /*_15*/],
			v[43 /*_16*/],
			v[45 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[48 /*_0*/],
				v[50 /*_1*/],
				v[52 /*_2*/],
				v[54 /*_3*/],
				v[56 /*_4*/],
				v[58 /*_5*/],
				v[60 /*_6*/],
				v[62 /*_7*/],
				v[64 /*_8*/],
				v[66 /*_9*/],
				v[68 /*_10*/],
				v[70 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[73 /*GAVAIL*/],
				),
				v[75 /*_12*/],
				v[77 /*_13*/],
			),
			v[79 /*_18*/],
			v[81 /*_19*/],
			v[83 /*_20*/],
			v[85 /*_21*/],
			v[87 /*_22*/],
			v[89 /*_23*/],
			v[91 /*_24*/],
			v[93 /*_25*/],
			v[95 /*_26*/],
			v[97 /*_27*/],
		),
		v[99 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS378(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 378, "{| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#codeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)=>`#mkCodeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,`<mode>`(EXECMODE),_1,_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE)),isLValue(ACCTOUT)),isInt(ACCT)),isBool(NEW)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(76fec47502da83429ff17f782c2d8737b8070bbd293fa84d3d309af37c27078b) contentStartColumn(10) contentStartLine(1430) org.kframework.attributes.Location(Location(1430,10,1431,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashmkCodeDepositXuXuXuXuXuXuXuIELE, // as-is #mkCodeDeposit_______IELE
					v[7 /*ACCT*/],
					v[9 /*LEN*/],
					v[11 /*CODE*/],
					v[13 /*STATUS*/],
					v[15 /*ACCTOUT*/],
					v[17 /*NEW*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_0*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[29 /*EXECMODE*/],
		),
		v[31 /*_1*/],
		v[33 /*_2*/],
		v[35 /*_3*/],
		v[37 /*_4*/],
		v[39 /*_5*/],
	), nil
}

func (i *Interpreter) stepRHS387(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 387, "{| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`flush_IELE-TESTING`(.KList)=>#finalizeTx(#token(\"false\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b3a2ae4571b3b7f199a35b0b8f5f712493f0ceeff48276d9036bf9f051a29f66) contentStartColumn(10) contentStartLine(83) org.kframework.attributes.Location(Location(83,10,83,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[27], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolFalse,
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[27],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_0*/],
		v[16 /*_1*/],
		v[18 /*_2*/],
		v[20 /*_3*/],
		v[22 /*_4*/],
		v[24 /*_5*/],
		v[26 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS487(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 487, "{| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#return___IELE`(REGS,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,#token(\"1\",\"Int\"))~>#registerDeltas(REGS,OUT)~>`#load___IELE`(REG,#token(\"0\",\"Int\"))~>`#refund__IELE`(GAVAIL)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),.K,`#loads___IELE`(REGS,OUT))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,`<mode>`(EXECMODE),_28,_29,_30,`<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(REGS),isMode(EXECMODE)),isLValue(REG)),isInts(OUT)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fcef7423d6ff0515e57af8d54807483b219c37f78ab47c90e1e047396db2fb5) contentStartColumn(10) contentStartLine(1294) org.kframework.attributes.Location(Location(1294,10,1305,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[97], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[21 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))
	if m.IsTrue(v[97]) { // rhs if-then-else
		v[96] = i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
		)
	} else {
		v[96] = i.Model.NewKApply(m.LblXhashdropWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropWorldState_IELE-INFRASTRUCTURE
		)
	}
	v[99], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[21 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),.K,`#loads___IELE`(REGS,OUT))
	if m.IsTrue(v[99]) { // rhs if-then-else
		v[98] = m.EmptyKSequence
	} else {
		v[98] = i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
			v[7 /*REGS*/],
			v[31 /*OUT*/],
		)
	}
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				v[96],
				i.Model.NewKApply(m.LblXhashdropSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[9 /*REG*/],
					/* rhs KToken */ constInt1,
				),
				i.Model.NewKApply(m.LblXhashregisterDeltas, // as-is #registerDeltas
					v[7 /*REGS*/],
					v[31 /*OUT*/],
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[9 /*REG*/],
					/* rhs KToken */ m.IntZero,
				),
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[65 /*GAVAIL*/],
				),
				v[98],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_27*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[21 /*EXECMODE*/],
		),
		v[23 /*_28*/],
		v[25 /*_29*/],
		v[27 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				v[31 /*OUT*/],
			),
			v[33 /*_14*/],
			v[35 /*_15*/],
			v[37 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[40 /*_0*/],
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[65 /*GAVAIL*/],
				),
				v[67 /*_12*/],
				v[69 /*_13*/],
			),
			v[71 /*_17*/],
			v[73 /*_18*/],
			v[75 /*_19*/],
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
			v[89 /*_26*/],
		),
		v[91 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS388(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 388, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(RETURNS,`@__IELE-COMMON`(LABEL),ARGS))~>OPS=>`#loads___IELE`(#regRange(#sizeRegs(ARGS)),ARGS)~>`#execute_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(DotVar4=>`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)),_2,_3,_4,_5,`<regs>`(REGS=>`.Array_IELE-DATA`(.KList)),_6,_7,_8,`<fid>`(FUNC=>LABEL),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isArray(REGS)),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL)),isInts(ARGS)),`notBool_`(isIeleBuiltin(LABEL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9f58b2c5f57d6aa541fd45c7b19e527da584893e6fb57acc798ad24377e56003) contentStartColumn(10) contentStartLine(954) org.kframework.attributes.Location(Location(954,10,958,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[104], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[13 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXhashregRange( // #regRange(#sizeRegs(ARGS))
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalListItem( // `ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS))
		i.Model.NewKApply(m.LblXlbracketXuXpipeXuXpipeXuXpipeXuXrbracketXuIELE, // as-is {_|_|_|_}_IELE
			v[14 /*OPS*/],
			v[68 /*FUNC*/],
			v[8 /*RETURNS*/],
			v[59 /*REGS*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)
		v[107],
		v[48 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalXdotArrayXuIELEXhyphenDATA(config, -1) // `.Array_IELE-DATA`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[103],
					v[13 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashexecuteXuIELE, // as-is #execute_IELE
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[105],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_26*/],
		v[25 /*_27*/],
		v[27 /*_28*/],
		v[29 /*_29*/],
		v[31 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[34 /*_12*/],
			v[36 /*_13*/],
			v[38 /*_14*/],
			v[40 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[43 /*_0*/],
				v[45 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[106],
				),
				v[50 /*_2*/],
				v[52 /*_3*/],
				v[54 /*_4*/],
				v[56 /*_5*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[108],
				),
				v[61 /*_6*/],
				v[63 /*_7*/],
				v[65 /*_8*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[11 /*LABEL*/],
				),
				v[70 /*_9*/],
				v[72 /*_10*/],
				v[74 /*_11*/],
			),
			v[76 /*_16*/],
			v[78 /*_17*/],
			v[80 /*_18*/],
			v[82 /*_19*/],
			v[84 /*_20*/],
			v[86 /*_21*/],
			v[88 /*_22*/],
			v[90 /*_23*/],
			v[92 /*_24*/],
			v[94 /*_25*/],
		),
		v[96 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS402(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 402, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ret__IELE-COMMON`(VALUES))~>_424=>#registerDeltas(RETURNS,VALUES)~>`#loads___IELE`(RETURNS,VALUES)~>OPS``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)=>`_List_`(`.List`(.KList),DotVar4)),_2,_3,_4,_5,`<regs>`(_426=>REGS),_6,_7,_8,`<fid>`(_425=>FUNC),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isIeleName(_425)),isNonEmptyInts(VALUES)),isArray(REGS)),isLValues(RETURNS)),isIeleName(FUNC)),isBlocks(_424)),isArray(_426)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc16de12b4b17d3bc80493c9f71ba1cf296258f5a05d14673414bc96c1f7ea61) contentStartColumn(10) contentStartLine(1018) org.kframework.attributes.Location(Location(1018,10,1021,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[108], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXuListXu( // `_List_`(`.List`(.KList),DotVar4)
		v[110],
		v[53 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDeltas, // as-is #registerDeltas
					v[50 /*RETURNS*/],
					v[8 /*VALUES*/],
				),
				i.Model.NewKApply(m.LblXhashloadsXuXuXuIELE, // as-is #loads___IELE
					v[50 /*RETURNS*/],
					v[8 /*VALUES*/],
				),
				v[46 /*OPS*/],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[108],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_26*/],
		v[20 /*_27*/],
		v[22 /*_28*/],
		v[24 /*_29*/],
		v[26 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_12*/],
			v[31 /*_13*/],
			v[33 /*_14*/],
			v[35 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				v[40 /*_1*/],
				i.Model.NewKApply(m.LblXltlocalCallsXgt, // as-is <localCalls>
					v[109],
				),
				v[55 /*_2*/],
				v[57 /*_3*/],
				v[59 /*_4*/],
				v[61 /*_5*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[52 /*REGS*/],
				),
				v[66 /*_6*/],
				v[68 /*_7*/],
				v[70 /*_8*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[48 /*FUNC*/],
				),
				v[75 /*_9*/],
				v[77 /*_10*/],
				v[79 /*_11*/],
			),
			v[81 /*_16*/],
			v[83 /*_17*/],
			v[85 /*_18*/],
			v[87 /*_19*/],
			v[89 /*_20*/],
			v[91 /*_21*/],
			v[93 /*_22*/],
			v[95 /*_23*/],
			v[97 /*_24*/],
			v[99 /*_25*/],
		),
		v[101 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS500(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 500, "{| rule `<generatedTop>`(`<k>`(`` `#checkPoint_IELE-PRECOMPILED`(.KList)~>#ecpairing(`_List_`(`ListItem`(AK),_117),`_List_`(`ListItem`(BK),_118),_119,_120,_121)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(_117),isBytes(_119)),isG2Point(BK)),isG1Point(AK)),isList(_118)),isBytes(_120)),isInt(_121)),`_orBool__BOOL`(`notBool_`(isValidPoint(AK)),`notBool_`(isValidG2Point(BK)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4be2e5667c8c12e70819832a638dd7d368f561fa2f37bc97b8c60be06271eecc) contentStartColumn(10) contentStartLine(1716) org.kframework.attributes.Location(Location(1716,10,1717,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[47], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt4,
				),
				v[22 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[47],
				v[28 /*SREST*/],
			),
		),
		v[30 /*_0*/],
		v[32 /*_1*/],
		v[34 /*_2*/],
		v[36 /*_3*/],
		v[38 /*_4*/],
		v[40 /*_5*/],
		v[42 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS527(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 527, "{| rule `<generatedTop>`(`<k>`(`` `#checkPoint_IELE-PRECOMPILED`(.KList)=>.K``~>#ecpairing(`_List_`(`ListItem`(AK),_126),`_List_`(`ListItem`(BK),_127),_128,_129,_130)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(_127),isInt(_130)),isG2Point(BK)),isBytes(_129)),isG1Point(AK)),isBytes(_128)),isList(_126)),`_andBool_`(isValidPoint(AK),isValidG2Point(BK))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dd7ed6c945ddfb2f5d3fb875dae3ff64c37bbcc8436374efc39ff3c5078bfa9b) contentStartColumn(10) contentStartLine(1714) org.kframework.attributes.Location(Location(1714,10,1715,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[48], i.evalErr = i.evalListItem( // `ListItem`(AK)
		v[9 /*AK*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(AK),_126)
		v[48],
		v[10 /*_126*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalListItem( // `ListItem`(BK)
		v[14 /*BK*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(BK),_127)
		v[50],
		v[15 /*_127*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashecpairing, // as-is #ecpairing
					v[47],
					v[49],
					v[17 /*_128*/],
					v[19 /*_129*/],
					v[21 /*_130*/],
				),
				v[22 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[51],
				v[28 /*SREST*/],
			),
		),
		v[30 /*_0*/],
		v[32 /*_1*/],
		v[34 /*_2*/],
		v[36 /*_3*/],
		v[38 /*_4*/],
		v[40 /*_5*/],
		v[42 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS671(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 671, "{| rule `<generatedTop>`(`<k>`(``G~>`#deductGas_IELE-GAS`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL=>`_-Int__INT`(GAVAIL,G)),`<previousGas>`(_199=>GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(G),isInt(_199)),isInt(GAVAIL)),`_>=Int__INT`(GAVAIL,G)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2dee5ca6ffa3ca9e4784ecfe15f0eb654c78cca89a1eb62e1c45f0c8d2b4daed) contentStartColumn(10) contentStartLine(32) org.kframework.attributes.Location(Location(32,10,32,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[89], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[90], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(GAVAIL,G)
		v[60 /*GAVAIL*/],
		v[6 /*G*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[7 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[89],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_27*/],
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_13*/],
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				v[37 /*_1*/],
				v[39 /*_2*/],
				v[41 /*_3*/],
				v[43 /*_4*/],
				v[45 /*_5*/],
				v[47 /*_6*/],
				v[49 /*_7*/],
				v[51 /*_8*/],
				v[53 /*_9*/],
				v[55 /*_10*/],
				v[57 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[90],
				),
				i.Model.NewKApply(m.LblXltpreviousGasXgt, // as-is <previousGas>
					v[60 /*GAVAIL*/],
				),
				v[65 /*_12*/],
			),
			v[67 /*_17*/],
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
		),
		v[87 /*_32*/],
	), nil
}

func (i *Interpreter) stepRHS328(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 328, "{| rule `<generatedTop>`(`<k>`(``.K=>`#illFormed_IELE`(.KList)``~>DotVar1),`<s>`(``#STUCK(.KList)=>.K``~>DotVar2),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")),_0,_1,_2),_7,_8) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7839e83b27967ee97d76a17c9d2dfd242ced355799e66af2a4a70e39c42c6468) contentStartColumn(10) contentStartLine(1382) org.kframework.attributes.Location(Location(1382,10,1384,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashillFormedXuIELE, // as-is #illFormed_IELE
				),
				v[2 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>/* rhs KSequence size=1 */ 
			v[7 /*DotVar2*/],
		),
		v[9 /*_3*/],
		v[11 /*_4*/],
		v[13 /*_5*/],
		v[15 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolTrue,
			),
			v[20 /*_0*/],
			v[22 /*_1*/],
			v[24 /*_2*/],
		),
		v[26 /*_7*/],
		v[28 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS473(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 473, "{| rule `<generatedTop>`(`<k>`(`` `#illFormed_IELE`(.KList)~>`#finishTypeChecking_IELE`(.KList)~>`#create_______IELE`(_413,_414,GAVAIL,_415,_416,_417)=>`#refund__IELE`(GAVAIL)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(#token(\"9\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token(\"true\",\"Bool\")=>#token(\"false\",\"Bool\")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_415),isContract(_416)),isInt(_414)),isInt(_413)),isInt(GAVAIL)),isInts(_417)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a0c8c0f153de16e4a6c2b64707e380d1b5929ffb217b3b31a155d233ddfba782) contentStartColumn(10) contentStartLine(1389) org.kframework.attributes.Location(Location(1389,10,1390,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[50], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[13 /*GAVAIL*/],
				),
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt9,
				),
				v[20 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[50],
				v[26 /*SREST*/],
			),
		),
		v[28 /*_3*/],
		v[30 /*_4*/],
		v[32 /*_5*/],
		v[34 /*_6*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			i.Model.NewKApply(m.LblXlttypeCheckingXgt, // as-is <typeChecking>
				/* rhs KToken */ m.BoolFalse,
			),
			v[39 /*_0*/],
			v[41 /*_1*/],
			v[43 /*_2*/],
		),
		v[45 /*_7*/],
		v[47 /*_8*/],
	), nil
}

func (i *Interpreter) stepRHS553(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 553, "{| rule `<generatedTop>`(`<k>`(JSONINPUT=>`___IELE-TESTING`(`run__IELE-TESTING`(JSONINPUT),`___IELE-TESTING`(`success_IELE-TESTING`(.KList),`.IELESimulation_IELE-TESTING`(.KList)))),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isJSON(JSONINPUT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b29fa2628d88f2d74f9ff92ca0581a034314ba9bd88d4e8ed215dbf1a892088) contentStartColumn(10) contentStartLine(39) org.kframework.attributes.Location(Location(39,10,39,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[24], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.NewKApply(m.LblXuXuXuIELEXhyphenTESTING, // as-is ___IELE-TESTING
				i.Model.NewKApply(m.LblRunXuXuIELEXhyphenTESTING, // as-is run__IELE-TESTING
					v[2 /*JSONINPUT*/],
				),
				i.Model.NewKApply(m.LblXuXuXuIELEXhyphenTESTING, // as-is ___IELE-TESTING
					i.Model.NewKApply(m.LblSuccessXuIELEXhyphenTESTING, // as-is success_IELE-TESTING
					),
					i.Model.NewKApply(m.LblXdotIELESimulationXuIELEXhyphenTESTING, // as-is .IELESimulation_IELE-TESTING
					),
				),
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[24],
				v[8 /*SREST*/],
			),
		),
		v[10 /*_0*/],
		v[12 /*_1*/],
		v[14 /*_2*/],
		v[16 /*_3*/],
		v[18 /*_4*/],
		v[20 /*_5*/],
		v[22 /*_6*/],
	), nil
}

func (i *Interpreter) stepRHS768(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 768, "{| rule `<generatedTop>`(`<k>`(``#accountEmpty(ACCT)=>`notBool_`(EXISTS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(EXISTS)),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isBool(EXISTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1b409742250989f80b07ac43713e37f48f9282277c7e019a31415cbabe34d8ad) contentStartColumn(10) contentStartLine(791) org.kframework.attributes.Location(Location(791,10,796,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[56], i.evalErr = i.evalNotBoolXu( // `notBool_`(EXISTS)
		v[51 /*EXISTS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[57], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[56],
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[57],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_8*/],
		v[16 /*_9*/],
		v[18 /*_10*/],
		v[20 /*_11*/],
		v[22 /*_12*/],
		v[24 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[27 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[30 /*_14*/],
			),
			v[32 /*_5*/],
			v[34 /*_6*/],
			v[36 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS769(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 769, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(`_|->_`(CELL,assignBytesRange(LM,OFFSET,`Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList)))),DotVar4)),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isBytes(LM)),isInt(WIDTH)),isInt(OFFSET)),isOperand(CELL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9ef5bcf50f74f6ce332b9c029412d6d9560ca1043c2078e8b1274e36436b0ab3) contentStartColumn(10) contentStartLine(769) org.kframework.attributes.Location(Location(769,10,770,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[101], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalChop( // chop(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalChop( // chop(WIDTH)
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalTwos( // twos(chop(WIDTH),VALUE)
		v[108],
		v[6 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalInt2Bytes( // `Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList))
		v[106],
		v[107],
		i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalAssignBytesRange( // assignBytesRange(LM,OFFSET,`Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList)))
		v[95 /*LM*/],
		v[10 /*OFFSET*/],
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(CELL,assignBytesRange(LM,OFFSET,`Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList))))
		v[8 /*CELL*/],
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalXuMapXu( // `_Map_`(`_|->_`(CELL,assignBytesRange(LM,OFFSET,`Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList)))),DotVar4)
		v[103],
		v[98 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[101],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[102],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS771(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 771, "{| rule `<generatedTop>`(`<k>`(`#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(_473,CELL,_474,WIDTH))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(CELL,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_473),isOperand(_474)),isInt(WIDTH)),isMap(LM)),isOperand(CELL)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(CELL,LM)),`_=/=Int__INT`(WIDTH,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b048999b1db31a7e00832f491d4898abaf94b4726ddec25115b24de49742a8f6) contentStartColumn(10) contentStartLine(772) org.kframework.attributes.Location(Location(772,10,774,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[101], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(CELL,`.Bytes_BYTES-HOOKED`(.KList))
		v[8 /*CELL*/],
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalXuMapXu( // `_Map_`(LM,`_|->_`(CELL,`.Bytes_BYTES-HOOKED`(.KList)))
		v[94 /*LM*/],
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, // as-is store_,_,_,__IELE-COMMON
						v[6 /*_473*/],
						v[8 /*CELL*/],
						v[10 /*_474*/],
						v[12 /*WIDTH*/],
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[101],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[102],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS678(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 678, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(_443,_444,ACCT))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{\"contractDefinitionList\"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isGlobalName(_444),isInt(ACCT)),isLValue(_443))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7e55859355165e1a9d0588e6ece7e2310ba26387bb167086b0f3f94f56cfb834) contentStartColumn(10) contentStartLine(1100) org.kframework.attributes.Location(Location(1100,10,1105,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[61], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupCode, // as-is #lookupCode
					v[10 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON, // as-is _=calladdress_at__IELE-COMMON
						v[6 /*_443*/],
						v[8 /*_444*/],
						v[10 /*ACCT*/],
					),
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[61],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_8*/],
		v[21 /*_9*/],
		v[23 /*_10*/],
		v[25 /*_11*/],
		v[27 /*_12*/],
		v[29 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[32 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[35 /*_14*/],
			),
			v[37 /*_5*/],
			v[39 /*_6*/],
			v[41 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS738(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 738, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(REG,`@__IELE-COMMON`(NAME),ACCT))=>`#load___IELE`(REG,#callAddress(CODE,#mainContract(CODE),NAME))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValue(REG)),isContract(CODE)),isInt(ACCT)),`_=/=K_`(CODE,`.List{\"contractDefinitionList\"}`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2e35b4a18260ebd08b72387b6fb9b3f3c57a011eaf2f3672fdc9d9c7b8294e6a) contentStartColumn(10) contentStartLine(1107) org.kframework.attributes.Location(Location(1107,10,1113,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[66], i.evalErr = i.evalXhashmainContract( // #mainContract(CODE)
		v[51 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXhashcallAddress( // #callAddress(CODE,#mainContract(CODE),NAME)
		v[51 /*CODE*/],
		v[66],
		v[9 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[67], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[65],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[67],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_8*/],
		v[22 /*_9*/],
		v[24 /*_10*/],
		v[26 /*_11*/],
		v[28 /*_12*/],
		v[30 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[33 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[36 /*_14*/],
			),
			v[38 /*_5*/],
			v[40 /*_6*/],
			v[42 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS684(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 684, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sload__IELE-COMMON`(REG,INDEX))=>`#load___IELE`(REG,VALUE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isLValue(REG)),isOperand(INDEX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f175e12a63ded52a4a7a1ce4b333f77b5973a48579e27f233f8871af3e188922) contentStartColumn(10) contentStartLine(1124) org.kframework.attributes.Location(Location(1124,10,1130,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[126], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[119 /*VALUE*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[126],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_36*/],
		v[19 /*_37*/],
		v[21 /*_38*/],
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[44 /*ACCT*/],
				),
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[89 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[92 /*_42*/],
			),
			v[94 /*_33*/],
			v[96 /*_34*/],
			v[98 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS693(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 693, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(ACCT))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(`<output>`(_336=>`.List{\"operandList\"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38=>`_Set_`(SDS,`SetItem`(ACCT))),DotVar4,`<refund>`(RF=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))))),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_30,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(#token(\"0\",\"Int\")),_26,_27,_28,_29)),DotVar6)),_31,_32,_33)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(SDS,_38),#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))),#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSet(SDS),isInt(BALFROM)),isInt(RF)),isInts(_336)),isInt(ACCT)),isSchedule(SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fd83d35c80a4bc6d60beff77167db51166bcab02629fe83fcb351a8c60ea15a) contentStartColumn(10) contentStartLine(1543) org.kframework.attributes.Location(Location(1543,10,1553,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[129], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[131], i.evalErr = i.evalSetItem( // `SetItem`(ACCT)
		v[6 /*ACCT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[130], i.evalErr = i.evalXuSetXu( // `_Set_`(SDS,`SetItem`(ACCT))
		v[106 /*SDS*/],
		v[131],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,SDS)
		v[6 /*ACCT*/],
		v[106 /*SDS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED)))
	if m.IsTrue(v[133]) { // rhs if-then-else
		v[132] = v[74 /*RF*/]
	} else {
		v[135], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED)
			i.Model.NewKApply(m.LblRselfdestructXuIELEXhyphenGAS, // as-is Rselfdestruct_IELE-GAS
			),
			v[20 /*SCHED*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[134], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))
			v[74 /*RF*/],
			v[135],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[132] = v[134]
	}
	v[137], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(#token("0","Int")),_26,_27,_28,_29))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[6 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[6 /*ACCT*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				/* rhs KToken */ m.IntZero,
			),
			v[115 /*_26*/],
			v[117 /*_27*/],
			v[119 /*_28*/],
			v[121 /*_29*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[136], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(#token("0","Int")),_26,_27,_28,_29)),DotVar6)
		v[137],
		v[124 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[129],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_34*/],
		v[17 /*_35*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[20 /*SCHED*/],
		),
		v[22 /*_36*/],
		v[24 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[6 /*ACCT*/],
				),
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				v[55 /*_8*/],
				v[57 /*_9*/],
				v[59 /*_10*/],
				v[61 /*_11*/],
				v[63 /*_12*/],
				v[65 /*_13*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				i.Model.NewKApply(m.LblXltselfDestructXgt, // as-is <selfDestruct>
					v[130],
				),
				v[71 /*DotVar4*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					v[132],
				),
			),
			v[76 /*_17*/],
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[95 /*_30*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[136],
			),
			v[100 /*_31*/],
			v[102 /*_32*/],
			v[104 /*_33*/],
		),
	), nil
}

func (i *Interpreter) stepRHS706(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 706, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(ACCTTO))=>`#transferFunds____IELE-INFRASTRUCTURE`(ACCT,ACCTTO,BALFROM)~>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(`<output>`(_326=>`.List{\"operandList\"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38=>`_Set_`(SDS,`SetItem`(ACCT))),DotVar4,`<refund>`(RF=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))))),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_30,`<accounts>`(_39),_31,_32,_33)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(SDS,_38),#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))),#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInts(_326)),isInt(BALFROM)),isSet(SDS)),isInt(RF)),isInt(ACCT)),isSchedule(SCHED)),`_=/=Int__INT`(ACCT,ACCTTO))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba203c3b0592b5433f232f0c527f42779128c019343f2dcdfd1b9183d232c48c) contentStartColumn(10) contentStartLine(1530) org.kframework.attributes.Location(Location(1530,10,1541,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[131], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalSetItem( // `SetItem`(ACCT)
		v[44 /*ACCT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[132], i.evalErr = i.evalXuSetXu( // `_Set_`(SDS,`SetItem`(ACCT))
		v[107 /*SDS*/],
		v[133],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,SDS)
		v[44 /*ACCT*/],
		v[107 /*SDS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED)))
	if m.IsTrue(v[135]) { // rhs if-then-else
		v[134] = v[75 /*RF*/]
	} else {
		v[137], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED)
			i.Model.NewKApply(m.LblRselfdestructXuIELEXhyphenGAS, // as-is Rselfdestruct_IELE-GAS
			),
			v[20 /*SCHED*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[136], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))
			v[75 /*RF*/],
			v[137],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[134] = v[136]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE, // as-is #transferFunds____IELE-INFRASTRUCTURE
					v[44 /*ACCT*/],
					v[6 /*ACCTTO*/],
					v[114 /*BALFROM*/],
				),
				i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[131],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_34*/],
		v[17 /*_35*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[20 /*SCHED*/],
		),
		v[22 /*_36*/],
		v[24 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[44 /*ACCT*/],
				),
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				i.Model.NewKApply(m.LblXltselfDestructXgt, // as-is <selfDestruct>
					v[132],
				),
				v[72 /*DotVar4*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					v[134],
				),
			),
			v[77 /*_17*/],
			v[79 /*_18*/],
			v[81 /*_19*/],
			v[83 /*_20*/],
			v[85 /*_21*/],
			v[87 /*_22*/],
			v[89 /*_23*/],
			v[91 /*_24*/],
			v[93 /*_25*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[96 /*_30*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[99 /*_39*/],
			),
			v[101 /*_31*/],
			v[103 /*_32*/],
			v[105 /*_33*/],
		),
	), nil
}

func (i *Interpreter) stepRHS697(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 697, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCTCODE)``~>`#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(_395,_396,ACCTCODE,_397,_398))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTCODE),_0,`<code>`(`.List{\"contractDefinitionList\"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTCODE))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTCODE)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_395),isOperands(_397)),isLValue(_396)),isOperand(_398)),isInt(ACCTCODE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5de398fdcaee9a6da6457af2fd7e2a797f1b954774f176971a317553d377778e) contentStartColumn(10) contentStartLine(1500) org.kframework.attributes.Location(Location(1500,10,1505,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[67], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupCode, // as-is #lookupCode
					v[10 /*ACCTCODE*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, // as-is _,_=copycreate_(_)send__IELE-COMMON
						v[6 /*_395*/],
						v[8 /*_396*/],
						v[10 /*ACCTCODE*/],
						v[12 /*_397*/],
						v[14 /*_398*/],
					),
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[67],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_8*/],
		v[25 /*_9*/],
		v[27 /*_10*/],
		v[29 /*_11*/],
		v[31 /*_12*/],
		v[33 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[36 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[39 /*_14*/],
			),
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS748(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 748, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,ACCTOUT,ACCT,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,CODE,ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,#mainContract(CODE)),CODE,STATUS,ACCTOUT,#token(\"false\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token(\"0\",\"Int\"),`_/Int__INT`(GAVAIL,#token(\"64\",\"Int\")))),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_30,`<accounts>`(_38),_31,_32,_33)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,`<nonce>`(NONCE),_29),`Map:lookup`(_38,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_38,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),isInt(VALUE)),isLValue(ACCTOUT)),isContract(CODE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),isInt(GAVAIL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fba2164eb5ce85acff34681759788ff9b7200c639e827b31ac1dfa83133c928) contentStartColumn(10) contentStartLine(1507) org.kframework.attributes.Location(Location(1507,10,1521,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[131], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[10 /*ACCT*/],
		v[119 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL))
	if m.IsTrue(v[133]) { // rhs if-then-else
		v[132] = v[69 /*GAVAIL*/]
	} else {
		v[134], i.evalErr = i.evalXhashallBut64th( // #allBut64th(GAVAIL)
			v[69 /*GAVAIL*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[132] = v[134]
	}
	v[135], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[10 /*ACCT*/],
		v[119 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[137], i.evalErr = i.evalXhashmainContract( // #mainContract(CODE)
		v[114 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[136], i.evalErr = i.evalXhashcontractSize( // #contractSize(CODE,#mainContract(CODE))
		v[114 /*CODE*/],
		v[137],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[138], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[140], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))
	if m.IsTrue(v[140]) { // rhs if-then-else
		v[139] = /* rhs KToken */ m.IntZero
	} else {
		v[141], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(GAVAIL,#token("64","Int"))
			v[69 /*GAVAIL*/],
			/* rhs KToken */ constInt64,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[139] = v[141]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckCreateXuXuXuIELE, // as-is #checkCreate___IELE
					v[10 /*ACCT*/],
					v[14 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashcreateXuXuXuXuXuXuXuIELE, // as-is #create_______IELE
					v[10 /*ACCT*/],
					v[131],
					v[132],
					v[14 /*VALUE*/],
					v[114 /*CODE*/],
					v[12 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashcodeDepositXuXuXuXuXuXuXuIELE, // as-is #codeDeposit_______IELE
					v[135],
					v[136],
					v[114 /*CODE*/],
					v[6 /*STATUS*/],
					v[8 /*ACCTOUT*/],
					/* rhs KToken */ m.BoolFalse,
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[138],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_34*/],
		v[25 /*_35*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[28 /*SCHED*/],
		),
		v[30 /*_36*/],
		v[32 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_13*/],
			v[37 /*_14*/],
			v[39 /*_15*/],
			v[41 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[10 /*ACCT*/],
				),
				v[52 /*_3*/],
				v[54 /*_4*/],
				v[56 /*_5*/],
				v[58 /*_6*/],
				v[60 /*_7*/],
				v[62 /*_8*/],
				v[64 /*_9*/],
				v[66 /*_10*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[139],
				),
				v[71 /*_11*/],
				v[73 /*_12*/],
			),
			v[75 /*_17*/],
			v[77 /*_18*/],
			v[79 /*_19*/],
			v[81 /*_20*/],
			v[83 /*_21*/],
			v[85 /*_22*/],
			v[87 /*_23*/],
			v[89 /*_24*/],
			v[91 /*_25*/],
			v[93 /*_26*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[96 /*_30*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[99 /*_38*/],
			),
			v[101 /*_31*/],
			v[103 /*_32*/],
			v[105 /*_33*/],
		),
	), nil
}

func (i *Interpreter) stepRHS762(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 762, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,ACCTOUT,ACCTCODE,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,CODE,ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,#mainContract(CODE)),CODE,STATUS,ACCTOUT,#token(\"false\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_39,_40,`<schedule>`(SCHED),_41,_42,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token(\"0\",\"Int\"),`_/Int__INT`(GAVAIL,#token(\"64\",\"Int\")))),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_35,`<accounts>`(_43),_36,_37,_38)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_43,`<acctID>`(ACCT))),#match(`<account>`(`<acctID>`(ACCTCODE),_31,`<code>`(CODE),_32,_33,_34),`Map:lookup`(_43,`<acctID>`(ACCTCODE)))),#match(DotVar5,`_[_<-undef]`(`_[_<-undef]`(_43,`<acctID>`(ACCT)),`<acctID>`(ACCTCODE)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),isInt(VALUE)),isLValue(ACCTOUT)),isContract(CODE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInt(ACCTCODE)),isInts(ARGS)),isInt(GAVAIL)),`_andBool_`(`_=/=Int__INT`(ACCT,ACCTCODE),`_=/=K_`(CODE,`.List{\"contractDefinitionList\"}`(.KList))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a6964b1a991ebba9b2a31b97459c310e0b891028806b9a069d1fcc07fda733f1) contentStartColumn(10) contentStartLine(1479) org.kframework.attributes.Location(Location(1479,10,1498,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[149], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[51 /*ACCT*/],
		v[119 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[151], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL))
	if m.IsTrue(v[151]) { // rhs if-then-else
		v[150] = v[70 /*GAVAIL*/]
	} else {
		v[152], i.evalErr = i.evalXhashallBut64th( // #allBut64th(GAVAIL)
			v[70 /*GAVAIL*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[150] = v[152]
	}
	v[153], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[51 /*ACCT*/],
		v[119 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[155], i.evalErr = i.evalXhashmainContract( // #mainContract(CODE)
		v[130 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[154], i.evalErr = i.evalXhashcontractSize( // #contractSize(CODE,#mainContract(CODE))
		v[130 /*CODE*/],
		v[155],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[156], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[158], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))
	if m.IsTrue(v[158]) { // rhs if-then-else
		v[157] = /* rhs KToken */ m.IntZero
	} else {
		v[159], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(GAVAIL,#token("64","Int"))
			v[70 /*GAVAIL*/],
			/* rhs KToken */ constInt64,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[157] = v[159]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckCreateXuXuXuIELE, // as-is #checkCreate___IELE
					v[51 /*ACCT*/],
					v[14 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashcreateXuXuXuXuXuXuXuIELE, // as-is #create_______IELE
					v[51 /*ACCT*/],
					v[149],
					v[150],
					v[14 /*VALUE*/],
					v[130 /*CODE*/],
					v[12 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashcodeDepositXuXuXuXuXuXuXuIELE, // as-is #codeDeposit_______IELE
					v[153],
					v[154],
					v[130 /*CODE*/],
					v[6 /*STATUS*/],
					v[8 /*ACCTOUT*/],
					/* rhs KToken */ m.BoolFalse,
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[156],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[28 /*SCHED*/],
		),
		v[30 /*_41*/],
		v[32 /*_42*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_13*/],
			v[37 /*_14*/],
			v[39 /*_15*/],
			v[41 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[51 /*ACCT*/],
				),
				v[53 /*_3*/],
				v[55 /*_4*/],
				v[57 /*_5*/],
				v[59 /*_6*/],
				v[61 /*_7*/],
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[157],
				),
				v[72 /*_11*/],
				v[74 /*_12*/],
			),
			v[76 /*_17*/],
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
			v[94 /*_26*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[97 /*_35*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[100 /*_43*/],
			),
			v[102 /*_36*/],
			v[104 /*_37*/],
			v[106 /*_38*/],
		),
	), nil
}

func (i *Interpreter) stepRHS705(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 705, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),operandList(ACCT,`.List{\"operandList\"}`(.KList))))=>`#load___IELE`(REG,BAL)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCT)),isLValue(REG))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4fc8af9ba6fb2f1c411692a463705e9c2d22e4697a2c3fab5c4be653a47eaabc) contentStartColumn(10) contentStartLine(1066) org.kframework.attributes.Location(Location(1066,10,1071,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[66], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[52 /*BAL*/],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[66],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_8*/],
		v[25 /*_9*/],
		v[27 /*_10*/],
		v[29 /*_11*/],
		v[31 /*_12*/],
		v[33 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[36 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[39 /*_14*/],
			),
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS729(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 729, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(ACCT,`.List{\"operandList\"}`(.KList))))=>`#load___IELE`(REG,#contractSize(CODE,#mainContract(CODE)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCT)),isLValue(REG)),`_=/=K_`(CODE,`.List{\"contractDefinitionList\"}`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5eb93aaf12f28275320974743ed35bcb16454bf8d57da0a63094cc618addd0fa) contentStartColumn(10) contentStartLine(1077) org.kframework.attributes.Location(Location(1077,10,1083,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[68], i.evalErr = i.evalXhashmainContract( // #mainContract(CODE)
		v[54 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[67], i.evalErr = i.evalXhashcontractSize( // #contractSize(CODE,#mainContract(CODE))
		v[54 /*CODE*/],
		v[68],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[69], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[7 /*REG*/],
					v[67],
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[69],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_8*/],
		v[25 /*_9*/],
		v[27 /*_10*/],
		v[29 /*_11*/],
		v[31 /*_12*/],
		v[33 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[36 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[39 /*_14*/],
			),
			v[41 /*_5*/],
			v[43 /*_6*/],
			v[45 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS707(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 707, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_399,`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(ACCT,`.List{\"operandList\"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{\"contractDefinitionList\"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isLValues(_399))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4e543553af0d39b1a2ee30a591dd97995cd74780d1b6c61eb078e5fd88ef275f) contentStartColumn(10) contentStartLine(1085) org.kframework.attributes.Location(Location(1085,10,1090,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[62], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupCode, // as-is #lookupCode
					v[11 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*_399*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							/* rhs KToken */ constKTokenSortIeleNameieleXdotextcodesize,
						),
						i.Model.NewKApply(m.LblOperandList, // as-is operandList
							v[11 /*ACCT*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
							),
						),
					),
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[62],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_8*/],
		v[23 /*_9*/],
		v[25 /*_10*/],
		v[27 /*_11*/],
		v[29 /*_12*/],
		v[31 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[34 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[37 /*_14*/],
			),
			v[39 /*_5*/],
			v[41 /*_6*/],
			v[43 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS710(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 710, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_433,IDX,ARGS))=>`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==K_`(LABEL,#token(\"init\",\"IeleName\")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))),#token(\"1\",\"Int\"),`#exception__IELE-INFRASTRUCTURE`(#token(\"2\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,`<schedule>`(SCHED),_37,_38,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_40),_3,`<funcLabels>`(_41),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_39) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_41,IDX)),#match(LABEL,`Map:lookup`(_41,IDX))),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_40,`<funcId>`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_40,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),isInt(IDX)),isLValues(_433)),isOperands(ARGS)),isIeleName(LABEL)),isSchedule(SCHED)),`_orBool__BOOL`(`_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS),`_andBool_`(`_==K_`(LABEL,#token(\"init\",\"IeleName\")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c63612d18d7be9a62a5b23baaaab505f6a8c1e910e2c5f63719c7da9491099fb) contentStartColumn(10) contentStartLine(970) org.kframework.attributes.Location(Location(970,10,975,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[137], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(LABEL,#token("init","IeleName"))
		v[109 /*LABEL*/],
		/* rhs KToken */ constKTokenSortIeleNameinit,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)))
	v[136] = v[137]
	if m.IsTrue(v[136]) {
		v[138], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))
			v[24 /*SCHED*/],
			i.Model.NewKApply(m.LblALBEXuIELEXhyphenCONSTANTS, // as-is ALBE_IELE-CONSTANTS
			),
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[136] = v[138]
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))),#token("1","Int"),`#exception__IELE-INFRASTRUCTURE`(#token("2","Int")))
	if m.IsTrue(v[136]) { // rhs if-then-else
		v[135] = /* rhs KToken */ constInt1
	} else {
		v[135] = i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
			/* rhs KToken */ constInt2,
		)
	}
	v[139], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[135],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[139],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_35*/],
		v[21 /*_36*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[24 /*SCHED*/],
		),
		v[26 /*_37*/],
		v[28 /*_38*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_21*/],
			v[33 /*_22*/],
			v[35 /*_23*/],
			v[37 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[42 /*_40*/],
					),
					v[44 /*_3*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[47 /*_41*/],
					),
					v[49 /*_4*/],
					v[51 /*_5*/],
					v[53 /*_6*/],
				),
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
				v[69 /*_14*/],
				v[71 /*_15*/],
				v[73 /*_16*/],
				v[75 /*_17*/],
				v[77 /*_18*/],
				v[79 /*_19*/],
				v[81 /*_20*/],
			),
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
			v[89 /*_28*/],
			v[91 /*_29*/],
			v[93 /*_30*/],
			v[95 /*_31*/],
			v[97 /*_32*/],
			v[99 /*_33*/],
			v[101 /*_34*/],
		),
		v[103 /*_39*/],
	), nil
}

func (i *Interpreter) stepRHS733(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 733, "{| rule `<generatedTop>`(`<k>`(`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_368,IDX=>`@__IELE-COMMON`(LABEL),ARGS))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,`<funcLabels>`(_42),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_42,IDX)),#match(LABEL,`Map:lookup`(_42,IDX))),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_41,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isOperands(ARGS)),isIeleName(LABEL)),isLValues(_368)),isInt(NPARAMS)),`_==Int_`(#sizeRegs(ARGS),NPARAMS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ce749200959fa0bb67e40a453520bedc0da55ed23527ef76ee911b7f87b5e437) contentStartColumn(10) contentStartLine(960) org.kframework.attributes.Location(Location(960,10,964,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[131], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exec__IELE-INFRASTRUCTURE
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*_368*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							v[108 /*LABEL*/],
						),
						v[10 /*ARGS*/],
					),
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[131],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_35*/],
		v[21 /*_36*/],
		v[23 /*_37*/],
		v[25 /*_38*/],
		v[27 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_21*/],
			v[32 /*_22*/],
			v[34 /*_23*/],
			v[36 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[41 /*_41*/],
					),
					v[43 /*_3*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[46 /*_42*/],
					),
					v[48 /*_4*/],
					v[50 /*_5*/],
					v[52 /*_6*/],
				),
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
				v[68 /*_14*/],
				v[70 /*_15*/],
				v[72 /*_16*/],
				v[74 /*_17*/],
				v[76 /*_18*/],
				v[78 /*_19*/],
				v[80 /*_20*/],
			),
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
			v[88 /*_28*/],
			v[90 /*_29*/],
			v[92 /*_30*/],
			v[94 /*_31*/],
			v[96 /*_32*/],
			v[98 /*_33*/],
			v[100 /*_34*/],
		),
		v[102 /*_40*/],
	), nil
}

func (i *Interpreter) stepRHS717(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 717, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`#load___IELE`(REG,`Bytes2Int`(LM,littleEndianBytes(.KList),signedBytes(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(isLValue(REG),isBytes(LM)),isOperand(CELL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18e83a3e57c69941ba9156811fd1937796f0768df8d663aa9bb39f2afd56a7bd) contentStartColumn(10) contentStartLine(762) org.kframework.attributes.Location(Location(762,10,763,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[98], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(LM,littleEndianBytes(.KList),signedBytes(.KList))
		v[91 /*LM*/],
		i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
		),
		i.Model.NewKApply(m.LblSignedBytes, // as-is signedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[98],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[99],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*_34*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS721(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 721, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,MEMINDEX))=>`#load___IELE`(REG,keccak(LM))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,MEMINDEX)),#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))),`_andBool_`(`_andBool_`(isLValue(REG),isOperand(MEMINDEX)),isBytes(LM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a415385544e527c5ccacb3e48e80f898335c6d86fef49279326702c56fc777d9) contentStartColumn(10) contentStartLine(876) org.kframework.attributes.Location(Location(876,10,877,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[98], i.evalErr = i.evalKeccak( // keccak(LM)
		v[91 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[98],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[99],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*_34*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS751(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 751, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`sstore_,__IELE-COMMON`(VALUE,INDEX))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_37,_38,`<schedule>`(SCHED),_39,_40,`<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(R=>`_+Int_`(R,`_*Int__INT`(`_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),SCHED),`maxInt(_,_)_INT`(#token(\"0\",\"Int\"),`_-Int__INT`(intSize(OLD),intSize(VALUE))))))),_20,_21,_22,_23,_24,_25,_26,_27,_28),`<network>`(_33,`<accounts>`(_42=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(`_Map_`(`_|->_`(INDEX,VALUE),DotVar8)),_31,_32)),DotVar6)),_34,_35,_36)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(_41),_31,_32),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar8,`_[_<-undef]`(_41,INDEX))),#match(DotVar6,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(OLD,`Map:lookup`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isOperand(INDEX)),isInt(ACCT)),isInt(R)),isSchedule(SCHED)),isInt(OLD))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(de4e1369f30c0223853d2f3e82b922ecb050b42bbcd0bb4bece2faeb29af787f) contentStartColumn(10) contentStartLine(1132) org.kframework.attributes.Location(Location(1132,10,1140,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[133], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[136], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblRsstoresetXuIELEXhyphenGAS, // as-is Rsstoreset_IELE-GAS
		),
		v[22 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[139], i.evalErr = i.evalIntSize( // intSize(OLD)
		v[129 /*OLD*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[140], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[6 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[138], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(intSize(OLD),intSize(VALUE))
		v[139],
		v[140],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[137], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(intSize(OLD),intSize(VALUE)))
		/* rhs KToken */ m.IntZero,
		v[138],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),SCHED),`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(intSize(OLD),intSize(VALUE))))
		v[136],
		v[137],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[134], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(R,`_*Int__INT`(`_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),SCHED),`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(intSize(OLD),intSize(VALUE)))))
		v[75 /*R*/],
		v[135],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[144], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(INDEX,VALUE)
		v[8 /*INDEX*/],
		v[6 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[143], i.evalErr = i.evalXuMapXu( // `_Map_`(`_|->_`(INDEX,VALUE),DotVar8)
		v[144],
		v[123 /*DotVar8*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[142], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(`_Map_`(`_|->_`(INDEX,VALUE),DotVar8)),_31,_32))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[45 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[45 /*ACCT*/],
			),
			v[111 /*_29*/],
			v[113 /*_30*/],
			i.Model.NewKApply(m.LblXltstorageXgt, // as-is <storage>
				v[143],
			),
			v[118 /*_31*/],
			v[120 /*_32*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[141], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(`_Map_`(`_|->_`(INDEX,VALUE),DotVar8)),_31,_32)),DotVar6)
		v[142],
		v[126 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[133],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_37*/],
		v[19 /*_38*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[22 /*SCHED*/],
		),
		v[24 /*_39*/],
		v[26 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_16*/],
			v[31 /*_17*/],
			v[33 /*_18*/],
			v[35 /*_19*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				v[40 /*_1*/],
				v[42 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[45 /*ACCT*/],
				),
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[70 /*_14*/],
				v[72 /*_15*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					v[134],
				),
			),
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
			v[89 /*_26*/],
			v[91 /*_27*/],
			v[93 /*_28*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[96 /*_33*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[141],
			),
			v[101 /*_34*/],
			v[103 /*_35*/],
			v[105 /*_36*/],
		),
	), nil
}

func (i *Interpreter) stepRHS753(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 753, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=create_(_)send__IELE-COMMON`(STATUS,ACCTOUT,NAME,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,#subcontract(CODE,NAME),ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,NAME),#subcontract(CODE,NAME),STATUS,ACCTOUT,#token(\"false\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_39,_40,`<schedule>`(SCHED),_41,_42,`<iele>`(_17,_18,_19,_20,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,`<contractCode>`(CODE)),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,_12,_13,_14,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token(\"0\",\"Int\"),`_/Int__INT`(GAVAIL,#token(\"64\",\"Int\")))),_15,_16),_21,_22,_23,_24,_25,_26,_27,_28,_29,_30),`<network>`(_35,`<accounts>`(_43),_36,_37,_38)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_31,_32,_33,`<nonce>`(NONCE),_34),`Map:lookup`(_43,`<acctID>`(ACCT))),#match(DotVar6,`_[_<-undef]`(_43,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValue(STATUS)),isInt(VALUE)),isLValue(ACCTOUT)),isContract(CODE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),isInt(GAVAIL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bbc2abd69062058575c5536b5070eba178dd21f04de8f273c92609210f3071c3) contentStartColumn(10) contentStartLine(1463) org.kframework.attributes.Location(Location(1463,10,1477,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[144], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[63 /*ACCT*/],
		v[131 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[146], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL))
	if m.IsTrue(v[146]) { // rhs if-then-else
		v[145] = v[82 /*GAVAIL*/]
	} else {
		v[147], i.evalErr = i.evalXhashallBut64th( // #allBut64th(GAVAIL)
			v[82 /*GAVAIL*/],
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[145] = v[147]
	}
	v[148], i.evalErr = i.evalXhashsubcontract( // #subcontract(CODE,NAME)
		v[56 /*CODE*/],
		v[10 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[149], i.evalErr = i.evalXhashnewAddr( // #newAddr(ACCT,NONCE)
		v[63 /*ACCT*/],
		v[131 /*NONCE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[150], i.evalErr = i.evalXhashcontractSize( // #contractSize(CODE,NAME)
		v[56 /*CODE*/],
		v[10 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[151], i.evalErr = i.evalXhashsubcontract( // #subcontract(CODE,NAME)
		v[56 /*CODE*/],
		v[10 /*NAME*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[152], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[154], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGstaticcalldepthXuIELEXhyphenGAS, // as-is Gstaticcalldepth_IELE-GAS
		),
		v[28 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))
	if m.IsTrue(v[154]) { // rhs if-then-else
		v[153] = /* rhs KToken */ m.IntZero
	} else {
		v[155], i.evalErr = i.evalXuXslashIntXuXuINT( // `_/Int__INT`(GAVAIL,#token("64","Int"))
			v[82 /*GAVAIL*/],
			/* rhs KToken */ constInt64,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[153] = v[155]
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcheckCreateXuXuXuIELE, // as-is #checkCreate___IELE
					v[63 /*ACCT*/],
					v[14 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashcreateXuXuXuXuXuXuXuIELE, // as-is #create_______IELE
					v[63 /*ACCT*/],
					v[144],
					v[145],
					v[14 /*VALUE*/],
					v[148],
					v[12 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashcodeDepositXuXuXuXuXuXuXuIELE, // as-is #codeDeposit_______IELE
					v[149],
					v[150],
					v[151],
					v[6 /*STATUS*/],
					v[8 /*ACCTOUT*/],
					/* rhs KToken */ m.BoolFalse,
				),
				v[15 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[152],
				v[21 /*SREST*/],
			),
		),
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[28 /*SCHED*/],
		),
		v[30 /*_41*/],
		v[32 /*_42*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_17*/],
			v[37 /*_18*/],
			v[39 /*_19*/],
			v[41 /*_20*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[45 /*_0*/],
					v[47 /*_1*/],
					v[49 /*_2*/],
					v[51 /*_3*/],
					v[53 /*_4*/],
					i.Model.NewKApply(m.LblXltcontractCodeXgt, // as-is <contractCode>
						v[56 /*CODE*/],
					),
				),
				v[58 /*_5*/],
				v[60 /*_6*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[63 /*ACCT*/],
				),
				v[65 /*_7*/],
				v[67 /*_8*/],
				v[69 /*_9*/],
				v[71 /*_10*/],
				v[73 /*_11*/],
				v[75 /*_12*/],
				v[77 /*_13*/],
				v[79 /*_14*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[153],
				),
				v[84 /*_15*/],
				v[86 /*_16*/],
			),
			v[88 /*_21*/],
			v[90 /*_22*/],
			v[92 /*_23*/],
			v[94 /*_24*/],
			v[96 /*_25*/],
			v[98 /*_26*/],
			v[100 /*_27*/],
			v[102 /*_28*/],
			v[104 /*_29*/],
			v[106 /*_30*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[109 /*_35*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[112 /*_43*/],
			),
			v[114 /*_36*/],
			v[116 /*_37*/],
			v[118 /*_38*/],
		),
	), nil
}

func (i *Interpreter) stepRHS766(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 766, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`#load___IELE`(REG,`Bytes2Int`(bytesRange(LM,OFFSET,WIDTH),littleEndianBytes(.KList),unsignedBytes(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isBytes(LM)),isInt(WIDTH)),isInt(OFFSET)),isOperand(CELL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edbbc36687c6637f889769453669d51b8e44cc285f960c29a29663839b79ecc6) contentStartColumn(10) contentStartLine(755) org.kframework.attributes.Location(Location(755,10,756,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[103], i.evalErr = i.evalBytesRange( // bytesRange(LM,OFFSET,WIDTH)
		v[95 /*LM*/],
		v[10 /*OFFSET*/],
		v[12 /*WIDTH*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalBytes2Int( // `Bytes2Int`(bytesRange(LM,OFFSET,WIDTH),littleEndianBytes(.KList),unsignedBytes(.KList))
		v[103],
		i.Model.NewKApply(m.LblLittleEndianBytes, // as-is littleEndianBytes
		),
		i.Model.NewKApply(m.LblUnsignedBytes, // as-is unsignedBytes
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					v[6 /*REG*/],
					v[102],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[104],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[58 /*_34*/],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS770(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 770, "{| rule `<generatedTop>`(`<k>`(`` `#finalizeBlock_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_22,_23,`<schedule>`(SCHED),_24,_25,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(MINER),_8,_9,_10,_11,_12,_13),`<network>`(_18,`<accounts>`(_26=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(MINER),`<account>`(`<acctID>`(MINER),`<balance>`(`_+Int_`(MINBAL,`_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),SCHED))),_14,_15,_16,_17)),DotVar4)),_19,_20,_21)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(MINER),`<balance>`(MINBAL),_14,_15,_16,_17),`Map:lookup`(_26,`<acctID>`(MINER))),#match(DotVar4,`_[_<-undef]`(_26,`<acctID>`(MINER)))),`_andBool_`(`_andBool_`(isInt(MINER),isInt(MINBAL)),isSchedule(SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e5954b708341b043cbc3f95b1a94e0f3af5eef9df663d091659a784059a1290b) contentStartColumn(10) contentStartLine(216) org.kframework.attributes.Location(Location(216,10,223,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[86], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[90], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblRbXuIELEXhyphenGAS, // as-is Rb_IELE-GAS
		),
		v[17 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[89], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(MINBAL,`_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),SCHED))
		v[72 /*MINBAL*/],
		v[90],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[88], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(MINER),`<account>`(`<acctID>`(MINER),`<balance>`(`_+Int_`(MINBAL,`_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),SCHED))),_14,_15,_16,_17))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[41 /*MINER*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[41 /*MINER*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[89],
			),
			v[74 /*_14*/],
			v[76 /*_15*/],
			v[78 /*_16*/],
			v[80 /*_17*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[87], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(MINER),`<account>`(`<acctID>`(MINER),`<balance>`(`_+Int_`(MINBAL,`_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),SCHED))),_14,_15,_16,_17)),DotVar4)
		v[88],
		v[83 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[86],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_22*/],
		v[14 /*_23*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[17 /*SCHED*/],
		),
		v[19 /*_24*/],
		v[21 /*_25*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_0*/],
			v[26 /*_1*/],
			v[28 /*_2*/],
			v[30 /*_3*/],
			v[32 /*_4*/],
			v[34 /*_5*/],
			v[36 /*_6*/],
			v[38 /*_7*/],
			i.Model.NewKApply(m.LblXltbeneficiaryXgt, // as-is <beneficiary>
				v[41 /*MINER*/],
			),
			v[43 /*_8*/],
			v[45 /*_9*/],
			v[47 /*_10*/],
			v[49 /*_11*/],
			v[51 /*_12*/],
			v[53 /*_13*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[56 /*_18*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[87],
			),
			v[61 /*_19*/],
			v[63 /*_20*/],
			v[65 /*_21*/],
		),
	), nil
}

func (i *Interpreter) stepRHS772(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 772, "{| rule `<generatedTop>`(`<k>`(``#memoryExpand(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,`maxInt(_,_)_INT`(#token(\"0\",\"Int\"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM))))))),`<currentMemory>`(CURR=>`_+Int_`(CURR,`maxInt(_,_)_INT`(#token(\"0\",\"Int\"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))))),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_32,INDEX)),#match(LM,`Map:lookup`(_32,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isBytes(LM)),isInt(NEWSIZE)),isInt(CURR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8209c358db4dd653145cba3facdbd71bd7c30939d471a570923d8649fefc124a) contentStartColumn(10) contentStartLine(372) org.kframework.attributes.Location(Location(372,10,375,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[97], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[95 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))
		v[7 /*NEWSIZE*/],
		v[102],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM))))
		/* rhs KToken */ m.IntZero,
		v[101],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))))
		v[59 /*CURR*/],
		v[100],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM))))))
		v[56 /*PEAK*/],
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[95 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))
		v[7 /*NEWSIZE*/],
		v[107],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM))))
		/* rhs KToken */ m.IntZero,
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))))
		v[59 /*CURR*/],
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[56 /*PEAK*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[97],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_26*/],
		v[18 /*_27*/],
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_12*/],
			v[29 /*_13*/],
			v[31 /*_14*/],
			v[33 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[53 /*_32*/],
				),
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[98],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[104],
				),
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
			),
			v[69 /*_16*/],
			v[71 /*_17*/],
			v[73 /*_18*/],
			v[75 /*_19*/],
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
		),
		v[89 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS773(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 773, "{| rule `<generatedTop>`(`<k>`(`` `#checkCreate___IELE`(ACCT,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,`<mode>`(EXECMODE),_36,_37,_38,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_31,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),NONCE,`_+Int_`(NONCE,#token(\"1\",\"Int\")))),_30)),DotVar5)),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_39,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(CD)),isMode(EXECMODE)),isInt(BAL)),isInt(ACCT)),isInt(NONCE)),`notBool_`(`_orBool__BOOL`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token(\"0\",\"Int\"))),`_>=Int__INT`(CD,#token(\"1024\",\"Int\")))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f98cc24455fc657c47a6ebfd351333f42a5a9f6ed08b8afea50634def3c84f80) contentStartColumn(10) contentStartLine(1360) org.kframework.attributes.Location(Location(1360,10,1369,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[124], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[19 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),NONCE,`_+Int_`(NONCE,#token("1","Int")))
	if m.IsTrue(v[128]) { // rhs if-then-else
		v[127] = v[112 /*NONCE*/]
	} else {
		v[129], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(NONCE,#token("1","Int"))
			v[112 /*NONCE*/],
			/* rhs KToken */ constInt1,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[127] = v[129]
	}
	v[126], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),NONCE,`_+Int_`(NONCE,#token("1","Int")))),_30))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCT*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[105 /*BAL*/],
			),
			v[107 /*_28*/],
			v[109 /*_29*/],
			i.Model.NewKApply(m.LblXltnonceXgt, // as-is <nonce>
				v[127],
			),
			v[114 /*_30*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[125], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),NONCE,`_+Int_`(NONCE,#token("1","Int")))),_30)),DotVar5)
		v[126],
		v[117 /*DotVar5*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[124],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_35*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[19 /*EXECMODE*/],
		),
		v[21 /*_36*/],
		v[23 /*_37*/],
		v[25 /*_38*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[40 /*CD*/],
				),
				v[42 /*_1*/],
				v[44 /*_2*/],
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[89 /*_31*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[125],
			),
			v[94 /*_32*/],
			v[96 /*_33*/],
			v[98 /*_34*/],
		),
	), nil
}

func (i *Interpreter) stepRHS679(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 679, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_167,operandList(_168,operandList(_169,`.List{\"operandList\"}`(.KList))))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token(\"3\",\"Int\"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_168),isBytes(LM)),isInt(_169)),isInt(_167)),isSchedule(SCHED)),isOperand(IDX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b906dd7a5557e94868f02e6ae4cb85d27c589b6db5f3d4041371826ef9b14ef) contentStartColumn(10) contentStartLine(637) org.kframework.attributes.Location(Location(637,10,637,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[110], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogXuIELEXhyphenGAS, // as-is Glog_IELE-GAS
		),
		v[18 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[112], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogdataXuIELEXhyphenGAS, // as-is Glogdata_IELE-GAS
		),
		v[18 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[114], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[101 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[113], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[114],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))
		v[112],
		v[113],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM))))
		v[110],
		v[111],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[116], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogtopicXuIELEXhyphenGAS, // as-is Glogtopic_IELE-GAS
		),
		v[18 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[115], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("3","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED))
		/* rhs KToken */ constInt3,
		v[116],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("3","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))
		v[109],
		v[115],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[117], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[108],
				v[19 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[117],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_28*/],
		v[29 /*_29*/],
		v[31 /*_30*/],
		v[33 /*_31*/],
		v[35 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[38 /*_14*/],
			v[40 /*_15*/],
			v[42 /*_16*/],
			v[44 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[47 /*_0*/],
				v[49 /*_1*/],
				v[51 /*_2*/],
				v[53 /*_3*/],
				v[55 /*_4*/],
				v[57 /*_5*/],
				v[59 /*_6*/],
				v[61 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[64 /*_34*/],
				),
				v[66 /*_8*/],
				v[68 /*_9*/],
				v[70 /*_10*/],
				v[72 /*_11*/],
				v[74 /*_12*/],
				v[76 /*_13*/],
			),
			v[78 /*_18*/],
			v[80 /*_19*/],
			v[82 /*_20*/],
			v[84 /*_21*/],
			v[86 /*_22*/],
			v[88 /*_23*/],
			v[90 /*_24*/],
			v[92 /*_25*/],
			v[94 /*_26*/],
			v[96 /*_27*/],
		),
		v[98 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS683(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 683, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_140,operandList(_141,`.List{\"operandList\"}`(.KList)))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token(\"2\",\"Int\"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_141),isBytes(LM)),isSchedule(SCHED)),isInt(_140)),isOperand(IDX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c7e01da0792226f0dd258ba5f26b8866dd491265d1d502b29c873fd7f68b88f) contentStartColumn(10) contentStartLine(636) org.kframework.attributes.Location(Location(636,10,636,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[107], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogXuIELEXhyphenGAS, // as-is Glog_IELE-GAS
		),
		v[15 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogdataXuIELEXhyphenGAS, // as-is Glogdata_IELE-GAS
		),
		v[15 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[98 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[111],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))
		v[109],
		v[110],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM))))
		v[107],
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[113], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogtopicXuIELEXhyphenGAS, // as-is Glogtopic_IELE-GAS
		),
		v[15 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[112], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("2","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED))
		/* rhs KToken */ constInt2,
		v[113],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("2","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))
		v[106],
		v[112],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[114], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[105],
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[114],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_28*/],
		v[26 /*_29*/],
		v[28 /*_30*/],
		v[30 /*_31*/],
		v[32 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[35 /*_14*/],
			v[37 /*_15*/],
			v[39 /*_16*/],
			v[41 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[61 /*_34*/],
				),
				v[63 /*_8*/],
				v[65 /*_9*/],
				v[67 /*_10*/],
				v[69 /*_11*/],
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_18*/],
			v[77 /*_19*/],
			v[79 /*_20*/],
			v[81 /*_21*/],
			v[83 /*_22*/],
			v[85 /*_23*/],
			v[87 /*_24*/],
			v[89 /*_25*/],
			v[91 /*_26*/],
			v[93 /*_27*/],
		),
		v[95 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS702(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 702, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_256,operandList(_257,operandList(_258,operandList(_259,`.List{\"operandList\"}`(.KList)))))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token(\"4\",\"Int\"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_258),isBytes(LM)),isInt(_259)),isInt(_257)),isSchedule(SCHED)),isOperand(IDX)),isInt(_256))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(995cc5851d1531ff2a3399e4b3969ecf790d466b52a6709ec8384a9ee9402ed3) contentStartColumn(10) contentStartLine(638) org.kframework.attributes.Location(Location(638,10,638,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[113], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogXuIELEXhyphenGAS, // as-is Glog_IELE-GAS
		),
		v[21 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[115], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogdataXuIELEXhyphenGAS, // as-is Glogdata_IELE-GAS
		),
		v[21 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[117], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[104 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[116], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[117],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[114], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))
		v[115],
		v[116],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[112], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM))))
		v[113],
		v[114],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[119], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogtopicXuIELEXhyphenGAS, // as-is Glogtopic_IELE-GAS
		),
		v[21 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[118], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("4","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED))
		/* rhs KToken */ constInt4,
		v[119],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("4","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))
		v[112],
		v[118],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[120], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[111],
				v[22 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[120],
				v[28 /*SREST*/],
			),
		),
		v[30 /*_28*/],
		v[32 /*_29*/],
		v[34 /*_30*/],
		v[36 /*_31*/],
		v[38 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[41 /*_14*/],
			v[43 /*_15*/],
			v[45 /*_16*/],
			v[47 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[50 /*_0*/],
				v[52 /*_1*/],
				v[54 /*_2*/],
				v[56 /*_3*/],
				v[58 /*_4*/],
				v[60 /*_5*/],
				v[62 /*_6*/],
				v[64 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[67 /*_34*/],
				),
				v[69 /*_8*/],
				v[71 /*_9*/],
				v[73 /*_10*/],
				v[75 /*_11*/],
				v[77 /*_12*/],
				v[79 /*_13*/],
			),
			v[81 /*_18*/],
			v[83 /*_19*/],
			v[85 /*_20*/],
			v[87 /*_21*/],
			v[89 /*_22*/],
			v[91 /*_23*/],
			v[93 /*_24*/],
			v[95 /*_25*/],
			v[97 /*_26*/],
			v[99 /*_27*/],
		),
		v[101 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS760(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 760, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_261,`.List{\"operandList\"}`(.KList))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token(\"1\",\"Int\"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isInt(_261)),isOperand(IDX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84f9ecd3dec3d8c0d5dce378a1cd6e0298628f66baaa4854a8993c565db2efaf) contentStartColumn(10) contentStartLine(635) org.kframework.attributes.Location(Location(635,10,635,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[104], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogXuIELEXhyphenGAS, // as-is Glog_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogdataXuIELEXhyphenGAS, // as-is Glogdata_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[95 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[108],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))
		v[106],
		v[107],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM))))
		v[104],
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[110], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogtopicXuIELEXhyphenGAS, // as-is Glogtopic_IELE-GAS
		),
		v[12 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("1","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED))
		/* rhs KToken */ constInt1,
		v[110],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("1","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))
		v[103],
		v[109],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[111], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[102],
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[111],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_28*/],
		v[23 /*_29*/],
		v[25 /*_30*/],
		v[27 /*_31*/],
		v[29 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_14*/],
			v[34 /*_15*/],
			v[36 /*_16*/],
			v[38 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[41 /*_0*/],
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[58 /*_34*/],
				),
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				v[68 /*_12*/],
				v[70 /*_13*/],
			),
			v[72 /*_18*/],
			v[74 /*_19*/],
			v[76 /*_20*/],
			v[78 /*_21*/],
			v[80 /*_22*/],
			v[82 /*_23*/],
			v[84 /*_24*/],
			v[86 /*_25*/],
			v[88 /*_26*/],
			v[90 /*_27*/],
		),
		v[92 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS736(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 736, "{| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,_270),SCHED)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(_270),isSchedule(SCHED)),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bf77889de644a7cfc15162b2b9ffe05f15f65eacce3420bc8e0e2841174ae93f) contentStartColumn(10) contentStartLine(643) org.kframework.attributes.Location(Location(643,10,645,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[98], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList))
		v[6 /*IDX*/],
		v[101],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuMapXu( // `_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))
		v[92 /*LM*/],
		v[100],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS, // as-is #compute[_,_]_IELE-GAS
					i.Model.NewKApply(m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, // as-is log_,__IELE-COMMON
						v[6 /*IDX*/],
						v[8 /*_270*/],
					),
					v[10 /*SCHED*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[98],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_28*/],
		v[21 /*_29*/],
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[99],
				),
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		v[90 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS689(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 689, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`selfdestruct__IELE-COMMON`(ACCTTO),SCHED)=>`Cselfdestruct`(SCHED,#accountEmpty(ACCTTO),BAL)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCTFROM))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCTTO)),isSchedule(SCHED)),isInt(ACCTFROM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(130890e8fce1da0e41ee48ed1d962fdd3c68941492e1508ed76db55aa59a3ab5) contentStartColumn(10) contentStartLine(714) org.kframework.attributes.Location(Location(714,10,720,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[119], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCselfdestruct, // as-is Cselfdestruct
					v[8 /*SCHED*/],
					i.Model.NewKApply(m.LblXhashaccountEmpty, // as-is #accountEmpty
						v[6 /*ACCTTO*/],
					),
					v[105 /*BAL*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[119],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_36*/],
		v[19 /*_37*/],
		v[21 /*_38*/],
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[44 /*ACCTFROM*/],
				),
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[89 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[92 /*_41*/],
			),
			v[94 /*_33*/],
			v[96 /*_34*/],
			v[98 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS691(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 691, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupStorage(ACCT,INDEX)``~>`#compute[_,_]_IELE-GAS`(`sstore_,__IELE-COMMON`(VALUE,INDEX),_304)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isOperand(VALUE)),isInt(INDEX)),isSchedule(_304)),isInt(ACCT)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad8725d1549a85ccf14cfca631aa75ab8f53237c1499d3d8b3c70df2a40bd0d1) contentStartColumn(10) contentStartLine(691) org.kframework.attributes.Location(Location(691,10,698,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[123], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupStorage, // as-is #lookupStorage
					v[46 /*ACCT*/],
					v[8 /*INDEX*/],
				),
				i.Model.NewKApply(m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS, // as-is #compute[_,_]_IELE-GAS
					i.Model.NewKApply(m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON, // as-is sstore_,__IELE-COMMON
						v[6 /*VALUE*/],
						v[8 /*INDEX*/],
					),
					v[10 /*_304*/],
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[123],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_36*/],
		v[21 /*_37*/],
		v[23 /*_38*/],
		v[25 /*_39*/],
		v[27 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[46 /*ACCT*/],
				),
				v[48 /*_3*/],
				v[50 /*_4*/],
				v[52 /*_5*/],
				v[54 /*_6*/],
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[91 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[94 /*_41*/],
			),
			v[96 /*_33*/],
			v[98 /*_34*/],
			v[100 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS704(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 704, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`sstore_,__IELE-COMMON`(VALUE,INDEX),SCHED)=>`Csstore`(SCHED,INDEX,VALUE,OLDVALUE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(OLDVALUE,`Map:lookup`(_41,INDEX))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(ACCT)),isInt(OLDVALUE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(116dcb1251c0ec681581870490708790d3877d48f4c6fa1797e6f182f49fbc07) contentStartColumn(10) contentStartLine(683) org.kframework.attributes.Location(Location(683,10,689,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[127], i.evalErr = i.evalCsstore( // `Csstore`(SCHED,INDEX,VALUE,OLDVALUE)
		v[10 /*SCHED*/],
		v[8 /*INDEX*/],
		v[6 /*VALUE*/],
		v[118 /*OLDVALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[127],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[128],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_36*/],
		v[21 /*_37*/],
		v[23 /*_38*/],
		v[25 /*_39*/],
		v[27 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[46 /*ACCT*/],
				),
				v[48 /*_3*/],
				v[50 /*_4*/],
				v[52 /*_5*/],
				v[54 /*_6*/],
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[91 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[94 /*_42*/],
			),
			v[96 /*_33*/],
			v[98 /*_34*/],
			v[100 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS695(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 695, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load__IELE-COMMON`(_147,INDEX),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,INDEX)),#match(DotVar4,`_[_<-undef]`(_34,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_147),isBytes(LM)),isSchedule(SCHED)),isOperand(INDEX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1fbc5f1a7b1e9199a246cd4a74b05837dccf518416d3f7df08c3b7830fd10bf3) contentStartColumn(10) contentStartLine(654) org.kframework.attributes.Location(Location(654,10,655,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[102], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGloadcellXuIELEXhyphenGAS, // as-is Gloadcell_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[93 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGloadwordXuIELEXhyphenGAS, // as-is Gloadword_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED))
		v[104],
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))
		v[102],
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[101],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[107],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_28*/],
		v[21 /*_29*/],
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[56 /*_34*/],
				),
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		v[90 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS700(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 700, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_305,`@__IELE-COMMON`(NAME),ARGS),SCHED)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_*Int__INT`(intSizes(ARGS),`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED))),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_41) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_305),isIeleName(NAME)),isSchedule(SCHED)),isInts(ARGS)),isInt(REGISTERS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(539d428be0fda46cf38e843403cb3ce936c7898bc802d0351a76b92844427194) contentStartColumn(10) contentStartLine(581) org.kframework.attributes.Location(Location(581,10,584,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[130], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcallregXuIELEXhyphenGAS, // as-is Gcallreg_IELE-GAS
		),
		v[13 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[129], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS)
		v[130],
		v[117 /*REGISTERS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[132], i.evalErr = i.evalIntSizes( // intSizes(ARGS)
		v[11 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGmoveXuIELEXhyphenGAS, // as-is Gmove_IELE-GAS
		),
		v[13 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[131], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(intSizes(ARGS),`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED))
		v[132],
		v[133],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_*Int__INT`(intSizes(ARGS),`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)))
		v[129],
		v[131],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[134], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlocalcallXuIELEXhyphenGAS, // as-is Glocalcall_IELE-GAS
		),
		v[13 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[127], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_*Int__INT`(intSizes(ARGS),`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED))),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))
		v[128],
		v[134],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[127],
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[135],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_36*/],
		v[24 /*_37*/],
		v[26 /*_38*/],
		v[28 /*_39*/],
		v[30 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[33 /*_22*/],
			v[35 /*_23*/],
			v[37 /*_24*/],
			v[39 /*_25*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[44 /*_42*/],
					),
					v[46 /*_3*/],
					v[48 /*_4*/],
					v[50 /*_5*/],
					v[52 /*_6*/],
					v[54 /*_7*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
				v[68 /*_14*/],
				v[70 /*_15*/],
				v[72 /*_16*/],
				v[74 /*_17*/],
				v[76 /*_18*/],
				v[78 /*_19*/],
				v[80 /*_20*/],
				v[82 /*_21*/],
			),
			v[84 /*_26*/],
			v[86 /*_27*/],
			v[88 /*_28*/],
			v[90 /*_29*/],
			v[92 /*_30*/],
			v[94 /*_31*/],
			v[96 /*_32*/],
			v[98 /*_33*/],
			v[100 /*_34*/],
			v[102 /*_35*/],
		),
		v[104 /*_41*/],
	), nil
}

func (i *Interpreter) stepRHS750(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 750, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_154,`@__IELE-COMMON`(NAME),ARGS),SCHED)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_41) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_154),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37de00831ad5f49f03e2b58a9d0e78bd5c10500b9fd97dfacd9f82f1e675b975) contentStartColumn(10) contentStartLine(585) org.kframework.attributes.Location(Location(585,10,588,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[129], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcallregXuIELEXhyphenGAS, // as-is Gcallreg_IELE-GAS
		),
		v[13 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS)
		v[129],
		v[117 /*REGISTERS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[130], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlocalcallXuIELEXhyphenGAS, // as-is Glocalcall_IELE-GAS
		),
		v[13 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[127], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))
		v[128],
		v[130],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[131], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[127],
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[131],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_36*/],
		v[24 /*_37*/],
		v[26 /*_38*/],
		v[28 /*_39*/],
		v[30 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[33 /*_22*/],
			v[35 /*_23*/],
			v[37 /*_24*/],
			v[39 /*_25*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[44 /*_42*/],
					),
					v[46 /*_3*/],
					v[48 /*_4*/],
					v[50 /*_5*/],
					v[52 /*_6*/],
					v[54 /*_7*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
				v[68 /*_14*/],
				v[70 /*_15*/],
				v[72 /*_16*/],
				v[74 /*_17*/],
				v[76 /*_18*/],
				v[78 /*_19*/],
				v[80 /*_20*/],
				v[82 /*_21*/],
			),
			v[84 /*_26*/],
			v[86 /*_27*/],
			v[88 /*_28*/],
			v[90 /*_29*/],
			v[92 /*_30*/],
			v[94 /*_31*/],
			v[96 /*_32*/],
			v[98 /*_33*/],
			v[100 /*_34*/],
			v[102 /*_35*/],
		),
		v[104 /*_41*/],
	), nil
}

func (i *Interpreter) stepRHS757(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 757, "{| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_179,IDX=>`@__IELE-COMMON`(FUNC),_180),_181)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_39,IDX)),#match(FUNC,`Map:lookup`(_39,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(_181),isInt(IDX)),isOperands(_180)),isIeleName(FUNC)),isLValues(_179))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d8e25e037ffeae066b6898eda915d8797ad4931f2ccabafb2de4e1395de93c93) contentStartColumn(10) contentStartLine(590) org.kframework.attributes.Location(Location(590,10,591,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[114], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS, // as-is #compute[_,_]_IELE-GAS
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*_179*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							v[109 /*FUNC*/],
						),
						v[10 /*_180*/],
					),
					v[12 /*_181*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[114],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_33*/],
		v[23 /*_34*/],
		v[25 /*_35*/],
		v[27 /*_36*/],
		v[29 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_19*/],
			v[34 /*_20*/],
			v[36 /*_21*/],
			v[38 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[42 /*_0*/],
					v[44 /*_1*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[47 /*_39*/],
					),
					v[49 /*_2*/],
					v[51 /*_3*/],
					v[53 /*_4*/],
				),
				v[55 /*_5*/],
				v[57 /*_6*/],
				v[59 /*_7*/],
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
				v[69 /*_12*/],
				v[71 /*_13*/],
				v[73 /*_14*/],
				v[75 /*_15*/],
				v[77 /*_16*/],
				v[79 /*_17*/],
				v[81 /*_18*/],
			),
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
			v[89 /*_26*/],
			v[91 /*_27*/],
			v[93 /*_28*/],
			v[95 /*_29*/],
			v[97 /*_30*/],
			v[99 /*_31*/],
			v[101 /*_32*/],
		),
		v[103 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS708(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 708, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sha3__IELE-COMMON`(_221,W0),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,W0)),#match(DotVar4,`_[_<-undef]`(_34,W0))),`_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isBytes(LM)),isSchedule(SCHED)),isLValue(_221))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e7d3d82d61088aca1ba51c2e441016dd654d79937aa4a56bc00b7e3ba21f5aa3) contentStartColumn(10) contentStartLine(489) org.kframework.attributes.Location(Location(489,10,490,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[102], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsha3XuIELEXhyphenGAS, // as-is Gsha3_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[93 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsha3wordXuIELEXhyphenGAS, // as-is Gsha3word_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),SCHED))
		v[104],
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),SCHED)))
		v[102],
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[101],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[107],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_28*/],
		v[21 /*_29*/],
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				v[53 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[56 /*_34*/],
				),
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		v[90 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS735(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 735, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sload__IELE-COMMON`(_143,INDEX),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),SCHED),intSize(VALUE)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(ACCT)),isLValue(_143))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ecd117117b92a269786e5018ce72025b4920d4d51691ee2497e544aa9b6dc9d4) contentStartColumn(14) contentStartLine(671) org.kframework.attributes.Location(Location(671,14,677,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[130], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsloadXuIELEXhyphenGAS, // as-is Gsload_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[132], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsloadkeyXuIELEXhyphenGAS, // as-is Gsloadkey_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalIntSize( // intSize(INDEX)
		v[8 /*INDEX*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[131], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED),intSize(INDEX))
		v[132],
		v[133],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[129], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)))
		v[130],
		v[131],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGsloadwordXuIELEXhyphenGAS, // as-is Gsloadword_IELE-GAS
		),
		v[10 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[136], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[121 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[134], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),SCHED),intSize(VALUE))
		v[135],
		v[136],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[128], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),SCHED),intSize(VALUE)))
		v[129],
		v[134],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[137], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[128],
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[137],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_36*/],
		v[21 /*_37*/],
		v[23 /*_38*/],
		v[25 /*_39*/],
		v[27 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_14*/],
			v[32 /*_15*/],
			v[34 /*_16*/],
			v[36 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[39 /*_0*/],
				v[41 /*_1*/],
				v[43 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[46 /*ACCT*/],
				),
				v[48 /*_3*/],
				v[50 /*_4*/],
				v[52 /*_5*/],
				v[54 /*_6*/],
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
				v[68 /*_13*/],
			),
			v[70 /*_18*/],
			v[72 /*_19*/],
			v[74 /*_20*/],
			v[76 /*_21*/],
			v[78 /*_22*/],
			v[80 /*_23*/],
			v[82 /*_24*/],
			v[84 /*_25*/],
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[91 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[94 /*_42*/],
			),
			v[96 /*_33*/],
			v[98 /*_34*/],
			v[100 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS746(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 746, "{| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log__IELE-COMMON`(IDX),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token(\"0\",\"Int\"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(IDX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d9706dfda8b47657b8d5aa0e0f2d62d5a961bc312e8a43444332c5aba3664e08) contentStartColumn(10) contentStartLine(634) org.kframework.attributes.Location(Location(634,10,634,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[100], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogXuIELEXhyphenGAS, // as-is Glog_IELE-GAS
		),
		v[8 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogdataXuIELEXhyphenGAS, // as-is Glogdata_IELE-GAS
		),
		v[8 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[91 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))
		v[102],
		v[103],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM))))
		v[100],
		v[101],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGlogtopicXuIELEXhyphenGAS, // as-is Glogtopic_IELE-GAS
		),
		v[8 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("0","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED))
		/* rhs KToken */ m.IntZero,
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("0","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))
		v[99],
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[98],
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[107],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*_34*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS765(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 765, "{| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`log__IELE-COMMON`(IDX),SCHED)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb6127a4a05f3e96a3a6115b2a79ecd28b9cc3fcc9498ad553c0ef40aadd5b8d) contentStartColumn(10) contentStartLine(640) org.kframework.attributes.Location(Location(640,10,642,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[95], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList))
		v[6 /*IDX*/],
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalXuMapXu( // `_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))
		v[90 /*LM*/],
		v[97],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS, // as-is #compute[_,_]_IELE-GAS
					i.Model.NewKApply(m.LblLogXuXuIELEXhyphenCOMMON, // as-is log__IELE-COMMON
						v[6 /*IDX*/],
					),
					v[8 /*SCHED*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[95],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[96],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS680(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 680, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"balance\\\"\",\"String\"),BAL),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(_753),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isInt(_753),isInt(BAL)),isInt(ACCT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2ae6d64d80ad0bf322df2b3def1e57596ac53f378ac4bc986ac74f45c56fd19a) contentStartColumn(10) contentStartLine(373) org.kframework.attributes.Location(Location(373,10,378,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[69], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[71], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[10 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[10 /*ACCT*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[16 /*BAL*/],
			),
			v[58 /*_0*/],
			v[60 /*_1*/],
			v[62 /*_2*/],
			v[64 /*_3*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[70], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3)),DotVar3)
		v[71],
		v[67 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[69],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[70],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS688(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 688, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(#dasmContract(CODE,#token(\"Main\",\"IeleName\"))),_1,_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(_743),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isContract(_743),isInt(ACCT)),isWordStack(CODE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f2dfdab718412f1b679b9afd2b6707c5da15c6f094a408f1eb135e2e9c170a5) contentStartColumn(10) contentStartLine(380) org.kframework.attributes.Location(Location(380,10,385,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[70], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[73], i.evalErr = i.evalXhashdasmContract( // #dasmContract(CODE,#token("Main","IeleName"))
		v[16 /*CODE*/],
		/* rhs KToken */ constKTokenSortIeleNameMain,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[72], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(#dasmContract(CODE,#token("Main","IeleName"))),_1,_2,_3))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[10 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[10 /*ACCT*/],
			),
			v[55 /*_0*/],
			i.Model.NewKApply(m.LblXltcodeXgt, // as-is <code>
				v[73],
			),
			v[60 /*_1*/],
			v[62 /*_2*/],
			v[64 /*_3*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[71], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(#dasmContract(CODE,#token("Main","IeleName"))),_1,_2,_3)),DotVar3)
		v[72],
		v[67 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[70],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[71],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS742(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 742, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"storage\\\"\",\"String\"),STORAGE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(_766),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isMap(STORAGE),isMap(_766)),isInt(ACCT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5c71e87ee128e8f59043cbbad595a96979f9a024c49564d518d961668116d8eb) contentStartColumn(10) contentStartLine(395) org.kframework.attributes.Location(Location(395,10,400,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[69], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[71], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[10 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[10 /*ACCT*/],
			),
			v[55 /*_0*/],
			v[57 /*_1*/],
			i.Model.NewKApply(m.LblXltstorageXgt, // as-is <storage>
				v[16 /*STORAGE*/],
			),
			v[62 /*_2*/],
			v[64 /*_3*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[70], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3)),DotVar3)
		v[71],
		v[67 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[69],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[70],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS763(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 763, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),NONCE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_7,_8,_9,_10,_11,_12,`<network>`(_3,`<accounts>`(_13=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,_2,`<nonce>`(NONCE),`<exists>`(#token(\"true\",\"Bool\")))),DotVar3)),_4,_5,_6)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,`<nonce>`(_732),`<exists>`(_733)),`Map:lookup`(_13,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_13,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isBool(_733),isInt(_732)),isInt(ACCT)),isInt(NONCE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0eaeea8acf148efc0b8df88a8248b733b080e19ecbd50135f47e10d9322e226e) contentStartColumn(10) contentStartLine(387) org.kframework.attributes.Location(Location(387,10,393,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[71], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[73], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,_2,`<nonce>`(NONCE),`<exists>`(#token("true","Bool"))))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[10 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[10 /*ACCT*/],
			),
			v[55 /*_0*/],
			v[57 /*_1*/],
			v[59 /*_2*/],
			i.Model.NewKApply(m.LblXltnonceXgt, // as-is <nonce>
				v[16 /*NONCE*/],
			),
			i.Model.NewKApply(m.LblXltexistsXgt, // as-is <exists>
				/* rhs KToken */ m.BoolTrue,
			),
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[72], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,_2,`<nonce>`(NONCE),`<exists>`(#token("true","Bool")))),DotVar3)
		v[73],
		v[68 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[71],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_7*/],
		v[29 /*_8*/],
		v[31 /*_9*/],
		v[33 /*_10*/],
		v[35 /*_11*/],
		v[37 /*_12*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_3*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[72],
			),
			v[45 /*_4*/],
			v[47 /*_5*/],
			v[49 /*_6*/],
		),
	), nil
}

func (i *Interpreter) stepRHS698(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 698, "{| rule `<generatedTop>`(`<k>`(`` `load__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"transactions\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"arguments\\\"\",\"String\"),`[_]_IELE-DATA`(ARGS)),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"contractCode\\\"\",\"String\"),TI),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"from\\\"\",\"String\"),FROM),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"function\\\"\",\"String\"),FUNC),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasLimit\\\"\",\"String\"),TG),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"gasPrice\\\"\",\"String\"),TP),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),TN),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"to\\\"\",\"String\"),TT),`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"value\\\"\",\"String\"),TV),`.List{\"_,__IELE-DATA\"}`(.KList)))))))))))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_2,_3,_4,_5,_6,_7,`<network>`(_0,_1,`<txOrder>`(DotVar3=>`_List_`(DotVar3,`ListItem`(!ID))),`<txPending>`(DotVar4=>`_List_`(DotVar4,`ListItem`(!ID))),`<messages>`(_8=>`_MessageCellMap_`(`MessageCellMapItem`(`<msgID>`(!ID),`<message>`(`<msgID>`(!ID),`<txNonce>`(#parseHexWord(TN)),`<txGasPrice>`(#parseHexWord(TP)),`<txGasLimit>`(#parseHexWord(TG)),`<sendto>`(#asAccount(TT)),`<func>`(`String2IeleName`(FUNC)),`<value>`(#parseHexWord(TV)),`<from>`(#parseHexWord(FROM)),`<data>`(#parseByteStack(TI)),`<args>`(#toInts(ARGS)))),DotVar5)))) requires `_andBool_`(#match(DotVar5,_8),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(TT),isString(TV)),isJSONList(ARGS)),isString(TP)),isString(TI)),isString(TG)),isString(TN)),isInt(!ID)),isString(FUNC)),isString(FROM)),#match(!ID,#fresh(#token(\"\\\"Int\\\"\",\"String\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51ed698f486f25b88b553253c7badc20a003b1670fd42f88b239a52064bfc392) contentStartColumn(10) contentStartLine(499) org.kframework.attributes.Location(Location(499,10,518,21)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[94], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[96], i.evalErr = i.evalListItem( // `ListItem`(!ID)
		v[91 /*!ID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[95], i.evalErr = i.evalXuListXu( // `_List_`(DotVar3,`ListItem`(!ID))
		v[80 /*DotVar3*/],
		v[96],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalListItem( // `ListItem`(!ID)
		v[91 /*!ID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[97], i.evalErr = i.evalXuListXu( // `_List_`(DotVar4,`ListItem`(!ID))
		v[83 /*DotVar4*/],
		v[98],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(TN)
		v[42 /*TN*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(TP)
		v[37 /*TP*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(TG)
		v[32 /*TG*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXhashasAccount( // #asAccount(TT)
		v[47 /*TT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalString2IeleName( // `String2IeleName`(FUNC)
		v[27 /*FUNC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(TV)
		v[52 /*TV*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[107], i.evalErr = i.evalXhashparseHexWord( // #parseHexWord(FROM)
		v[22 /*FROM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[108], i.evalErr = i.evalXhashparseByteStack( // #parseByteStack(TI)
		v[17 /*TI*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[109], i.evalErr = i.evalXhashtoInts( // #toInts(ARGS)
		v[12 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalMessageCellMapItem( // `MessageCellMapItem`(`<msgID>`(!ID),`<message>`(`<msgID>`(!ID),`<txNonce>`(#parseHexWord(TN)),`<txGasPrice>`(#parseHexWord(TP)),`<txGasLimit>`(#parseHexWord(TG)),`<sendto>`(#asAccount(TT)),`<func>`(`String2IeleName`(FUNC)),`<value>`(#parseHexWord(TV)),`<from>`(#parseHexWord(FROM)),`<data>`(#parseByteStack(TI)),`<args>`(#toInts(ARGS))))
		i.Model.NewKApply(m.LblXltmsgIDXgt, // as-is <msgID>
			v[91 /*!ID*/],
		),
		i.Model.NewKApply(m.LblXltmessageXgt, // as-is <message>
			i.Model.NewKApply(m.LblXltmsgIDXgt, // as-is <msgID>
				v[91 /*!ID*/],
			),
			i.Model.NewKApply(m.LblXlttxNonceXgt, // as-is <txNonce>
				v[101],
			),
			i.Model.NewKApply(m.LblXlttxGasPriceXgt, // as-is <txGasPrice>
				v[102],
			),
			i.Model.NewKApply(m.LblXlttxGasLimitXgt, // as-is <txGasLimit>
				v[103],
			),
			i.Model.NewKApply(m.LblXltsendtoXgt, // as-is <sendto>
				v[104],
			),
			i.Model.NewKApply(m.LblXltfuncXgt, // as-is <func>
				v[105],
			),
			i.Model.NewKApply(m.LblXltvalueXgt, // as-is <value>
				v[106],
			),
			i.Model.NewKApply(m.LblXltfromXgt, // as-is <from>
				v[107],
			),
			i.Model.NewKApply(m.LblXltdataXgt, // as-is <data>
				v[108],
			),
			i.Model.NewKApply(m.LblXltargsXgt, // as-is <args>
				v[109],
			),
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuMessageCellMapXu( // `_MessageCellMap_`(`MessageCellMapItem`(`<msgID>`(!ID),`<message>`(`<msgID>`(!ID),`<txNonce>`(#parseHexWord(TN)),`<txGasPrice>`(#parseHexWord(TP)),`<txGasLimit>`(#parseHexWord(TG)),`<sendto>`(#asAccount(TT)),`<func>`(`String2IeleName`(FUNC)),`<value>`(#parseHexWord(TV)),`<from>`(#parseHexWord(FROM)),`<data>`(#parseByteStack(TI)),`<args>`(#toInts(ARGS)))),DotVar5)
		v[100],
		v[88 /*DotVar5*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[54 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[94],
				v[60 /*SREST*/],
			),
		),
		v[62 /*_2*/],
		v[64 /*_3*/],
		v[66 /*_4*/],
		v[68 /*_5*/],
		v[70 /*_6*/],
		v[72 /*_7*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[75 /*_0*/],
			v[77 /*_1*/],
			i.Model.NewKApply(m.LblXlttxOrderXgt, // as-is <txOrder>
				v[95],
			),
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[97],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[99],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS682(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 682, "{| rule `<generatedTop>`(`<k>`(`` `#adjustGas_IELE-TESTING`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_39,_40,_41,`<checkGas>`(#token(\"false\",\"Bool\")),_42,`<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(_745=>`_-Int__INT`(GLIMIT,GUSED)),_12,_13),`<substate>`(_14,_15,`<refund>`(_746=>#token(\"0\",\"Int\"))),_20,_21,_22,_23,_24,_25,`<gasUsed>`(GUSED),_26,_27),`<network>`(_36,_37,_38,`<txPending>`(`_List_`(`ListItem`(TXID),DotVar6)),`<messages>`(_43))) requires `_andBool_`(`_andBool_`(#match(`<message>`(`<msgID>`(TXID),_28,_29,`<txGasLimit>`(GLIMIT),_30,_31,_32,_33,_34,_35),`Map:lookup`(_43,`<msgID>`(TXID))),#match(DotVar7,`_[_<-undef]`(_43,`<msgID>`(TXID)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_746),isInt(_745)),isInt(TXID)),isInt(GUSED)),isInt(GLIMIT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(271cc50e4cb470124de3963434ce62dedd59e9aa782c037c0d11b37ff7312a15) contentStartColumn(10) contentStartLine(179) org.kframework.attributes.Location(Location(179,10,189,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[132], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[133], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(GLIMIT,GUSED)
		v[115 /*GLIMIT*/],
		v[84 /*GUSED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalListItem( // `ListItem`(TXID)
		v[100 /*TXID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[134], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(TXID),DotVar6)
		v[135],
		v[101 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[4 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[132],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_39*/],
		v[14 /*_40*/],
		v[16 /*_41*/],
		i.Model.NewKApply(m.LblXltcheckGasXgt, // as-is <checkGas>
			/* rhs KToken */ m.BoolFalse,
		),
		v[20 /*_42*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_16*/],
			v[25 /*_17*/],
			v[27 /*_18*/],
			v[29 /*_19*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[32 /*_0*/],
				v[34 /*_1*/],
				v[36 /*_2*/],
				v[38 /*_3*/],
				v[40 /*_4*/],
				v[42 /*_5*/],
				v[44 /*_6*/],
				v[46 /*_7*/],
				v[48 /*_8*/],
				v[50 /*_9*/],
				v[52 /*_10*/],
				v[54 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[133],
				),
				v[59 /*_12*/],
				v[61 /*_13*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[64 /*_14*/],
				v[66 /*_15*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					/* rhs KToken */ m.IntZero,
				),
			),
			v[71 /*_20*/],
			v[73 /*_21*/],
			v[75 /*_22*/],
			v[77 /*_23*/],
			v[79 /*_24*/],
			v[81 /*_25*/],
			i.Model.NewKApply(m.LblXltgasUsedXgt, // as-is <gasUsed>
				v[84 /*GUSED*/],
			),
			v[86 /*_26*/],
			v[88 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[91 /*_36*/],
			v[93 /*_37*/],
			v[95 /*_38*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[134],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[104 /*_43*/],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS685(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 685, "{| rule `<generatedTop>`(`<k>`(`` `#checkCall____IELE`(ACCT,VALUE,GCAP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(CD)),isInt(GCAP)),isInt(BAL)),isInt(ACCT)),`notBool_`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token(\"1024\",\"Int\")))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(74f715fdd8925e17495c49343c4085d626b0e05ac83d1aada55bac7856e287cc) contentStartColumn(11) contentStartLine(1170) org.kframework.attributes.Location(Location(1170,11,1177,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[121], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[10 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[121],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_36*/],
		v[20 /*_37*/],
		v[22 /*_38*/],
		v[24 /*_39*/],
		v[26 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_14*/],
			v[31 /*_15*/],
			v[33 /*_16*/],
			v[35 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[38 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[41 /*CD*/],
				),
				v[43 /*_1*/],
				v[45 /*_2*/],
				v[47 /*_3*/],
				v[49 /*_4*/],
				v[51 /*_5*/],
				v[53 /*_6*/],
				v[55 /*_7*/],
				v[57 /*_8*/],
				v[59 /*_9*/],
				v[61 /*_10*/],
				v[63 /*_11*/],
				v[65 /*_12*/],
				v[67 /*_13*/],
			),
			v[69 /*_18*/],
			v[71 /*_19*/],
			v[73 /*_20*/],
			v[75 /*_21*/],
			v[77 /*_22*/],
			v[79 /*_23*/],
			v[81 /*_24*/],
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[90 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[93 /*_41*/],
			),
			v[95 /*_33*/],
			v[97 /*_34*/],
			v[99 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS686(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 686, "{| rule `<generatedTop>`(`<k>`(`` `#log___IELE`(MEMINDEX,TOPICS)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_15,_16,_17,_18,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,`<localMem>`(_34),_7,_8,_9,_10,_11,_12),`<substate>`(_13,`<logData>`(DotVar6=>`_List_`(DotVar6,`ListItem`(logEntry(ACCT,TOPICS,LM)))),_14),_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,MEMINDEX)),#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isList(TOPICS),isBytes(LM)),isInt(MEMINDEX)),isInt(ACCT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(58394788c15248e31b0000a5880fd3eb9677fac92a63a2feb869245e0a665aa7) contentStartColumn(10) contentStartLine(1048) org.kframework.attributes.Location(Location(1048,10,1051,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[102], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalListItem( // `ListItem`(logEntry(ACCT,TOPICS,LM))
		i.Model.NewKApply(m.LblLogEntry, // as-is logEntry
			v[43 /*ACCT*/],
			v[7 /*TOPICS*/],
			v[97 /*LM*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuListXu( // `_List_`(DotVar6,`ListItem`(logEntry(ACCT,TOPICS,LM)))
		v[72 /*DotVar6*/],
		v[104],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[102],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_28*/],
		v[18 /*_29*/],
		v[20 /*_30*/],
		v[22 /*_31*/],
		v[24 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_15*/],
			v[29 /*_16*/],
			v[31 /*_17*/],
			v[33 /*_18*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[43 /*ACCT*/],
				),
				v[45 /*_3*/],
				v[47 /*_4*/],
				v[49 /*_5*/],
				v[51 /*_6*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*_34*/],
				),
				v[56 /*_7*/],
				v[58 /*_8*/],
				v[60 /*_9*/],
				v[62 /*_10*/],
				v[64 /*_11*/],
				v[66 /*_12*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[69 /*_13*/],
				i.Model.NewKApply(m.LblXltlogDataXgt, // as-is <logData>
					v[103],
				),
				v[74 /*_14*/],
			),
			v[76 /*_19*/],
			v[78 /*_20*/],
			v[80 /*_21*/],
			v[82 /*_22*/],
			v[84 /*_23*/],
			v[86 /*_24*/],
			v[88 /*_25*/],
			v[90 /*_26*/],
			v[92 /*_27*/],
		),
		v[94 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS687(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 687, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,bytesInWords(lengthBytes(LM)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,INDEX)),#match(DotVar4,`_[_<-undef]`(_34,INDEX))),`_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(INDEX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3f23ec2c3228141824012b2d67cf62d548e313f1412bf074dc94846769fc31ab) contentStartColumn(10) contentStartLine(257) org.kframework.attributes.Location(Location(257,10,258,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[99], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[91 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[98],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[100],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_28*/],
		v[19 /*_29*/],
		v[21 /*_30*/],
		v[23 /*_31*/],
		v[25 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
				v[45 /*_4*/],
				v[47 /*_5*/],
				v[49 /*_6*/],
				v[51 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[54 /*_34*/],
				),
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		v[88 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS722(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 722, "{| rule `<generatedTop>`(`<k>`(`#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_262,IDX=>`@__IELE-COMMON`(FUNC),_263))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_39,IDX)),#match(FUNC,`Map:lookup`(_39,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_263),isLValues(_262)),isInt(IDX)),isIeleName(FUNC))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cee05022dd6d8ee51619c8d7f63c1aa41035702b0f7cc748fa8ceb277a9e95ab) contentStartColumn(10) contentStartLine(215) org.kframework.attributes.Location(Location(215,10,216,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[111], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS, // as-is #memory[_]_IELE-GAS
					i.Model.NewKApply(m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _=call_(_)_IELE-COMMON
						v[6 /*_262*/],
						i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
							v[107 /*FUNC*/],
						),
						v[10 /*_263*/],
					),
				),
				v[11 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[111],
				v[17 /*SREST*/],
			),
		),
		v[19 /*_33*/],
		v[21 /*_34*/],
		v[23 /*_35*/],
		v[25 /*_36*/],
		v[27 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_19*/],
			v[32 /*_20*/],
			v[34 /*_21*/],
			v[36 /*_22*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					v[40 /*_0*/],
					v[42 /*_1*/],
					i.Model.NewKApply(m.LblXltfuncLabelsXgt, // as-is <funcLabels>
						v[45 /*_39*/],
					),
					v[47 /*_2*/],
					v[49 /*_3*/],
					v[51 /*_4*/],
				),
				v[53 /*_5*/],
				v[55 /*_6*/],
				v[57 /*_7*/],
				v[59 /*_8*/],
				v[61 /*_9*/],
				v[63 /*_10*/],
				v[65 /*_11*/],
				v[67 /*_12*/],
				v[69 /*_13*/],
				v[71 /*_14*/],
				v[73 /*_15*/],
				v[75 /*_16*/],
				v[77 /*_17*/],
				v[79 /*_18*/],
			),
			v[81 /*_23*/],
			v[83 /*_24*/],
			v[85 /*_25*/],
			v[87 /*_26*/],
			v[89 /*_27*/],
			v[91 /*_28*/],
			v[93 /*_29*/],
			v[95 /*_30*/],
			v[97 /*_31*/],
			v[99 /*_32*/],
		),
		v[101 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS756(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 756, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(REGS,`@__IELE-COMMON`(NAME),ARGS))=>memoryDirectDelta(`_+Int_`(`_+Int_`(`_-Int__INT`(REGISTERS,#sizeRegs(ARGS)),intSizes(ARGS)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,`<schedule>`(SCHED),_38,_39,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_41,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED)),isInts(ARGS)),isInt(REGISTERS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0d6495f461054a2c874c7dede36a68000ba777126a2d0a758473e6eac5d8c4fe) contentStartColumn(10) contentStartLine(210) org.kframework.attributes.Location(Location(210,10,213,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[128], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[11 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[127], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(REGISTERS,#sizeRegs(ARGS))
		v[116 /*REGISTERS*/],
		v[128],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[129], i.evalErr = i.evalIntSizes( // intSizes(ARGS)
		v[11 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[126], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(REGISTERS,#sizeRegs(ARGS)),intSizes(ARGS))
		v[127],
		v[129],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[130], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcallmemoryXuIELEXhyphenGAS, // as-is Gcallmemory_IELE-GAS
		),
		v[25 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[125], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_-Int__INT`(REGISTERS,#sizeRegs(ARGS)),intSizes(ARGS)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED))
		v[126],
		v[130],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[131], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblMemoryDirectDelta, // as-is memoryDirectDelta
					v[125],
				),
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[131],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_36*/],
		v[22 /*_37*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[25 /*SCHED*/],
		),
		v[27 /*_38*/],
		v[29 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_22*/],
			v[34 /*_23*/],
			v[36 /*_24*/],
			v[38 /*_25*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[43 /*_41*/],
					),
					v[45 /*_3*/],
					v[47 /*_4*/],
					v[49 /*_5*/],
					v[51 /*_6*/],
					v[53 /*_7*/],
				),
				v[55 /*_8*/],
				v[57 /*_9*/],
				v[59 /*_10*/],
				v[61 /*_11*/],
				v[63 /*_12*/],
				v[65 /*_13*/],
				v[67 /*_14*/],
				v[69 /*_15*/],
				v[71 /*_16*/],
				v[73 /*_17*/],
				v[75 /*_18*/],
				v[77 /*_19*/],
				v[79 /*_20*/],
				v[81 /*_21*/],
			),
			v[83 /*_26*/],
			v[85 /*_27*/],
			v[87 /*_28*/],
			v[89 /*_29*/],
			v[91 /*_30*/],
			v[93 /*_31*/],
			v[95 /*_32*/],
			v[97 /*_33*/],
			v[99 /*_34*/],
			v[101 /*_35*/],
		),
		v[103 /*_40*/],
	), nil
}

func (i *Interpreter) stepRHS724(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 724, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sload__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,intSize(VALUE))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isLValue(REG)),isOperand(INDEX))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(91450da9cef587915f95a8da9bb32efc39033cc799911c4cde261d956f4d2098) contentStartColumn(10) contentStartLine(271) org.kframework.attributes.Location(Location(271,10,277,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[126], i.evalErr = i.evalIntSize( // intSize(VALUE)
		v[119 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[127], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
					v[6 /*REG*/],
					v[126],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[127],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_36*/],
		v[19 /*_37*/],
		v[21 /*_38*/],
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[44 /*ACCT*/],
				),
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[89 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[92 /*_42*/],
			),
			v[94 /*_33*/],
			v[96 /*_34*/],
			v[98 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS737(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 737, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupStorage(ACCT,INDEX)``~>`#memory[_]_IELE-GAS`(`_=sload__IELE-COMMON`(_160,INDEX))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isInt(ACCT)),isLValue(_160)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(904deae227e2eec03e201f84b5a3c234564e71e50a582ba750cffea9cdabb677) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,286,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[120], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupStorage, // as-is #lookupStorage
					v[44 /*ACCT*/],
					v[8 /*INDEX*/],
				),
				i.Model.NewKApply(m.LblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS, // as-is #memory[_]_IELE-GAS
					i.Model.NewKApply(m.LblXuXeqsloadXuXuIELEXhyphenCOMMON, // as-is _=sload__IELE-COMMON
						v[6 /*_160*/],
						v[8 /*INDEX*/],
					),
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[120],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_36*/],
		v[19 /*_37*/],
		v[21 /*_38*/],
		v[23 /*_39*/],
		v[25 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[44 /*ACCT*/],
				),
				v[46 /*_3*/],
				v[48 /*_4*/],
				v[50 /*_5*/],
				v[52 /*_6*/],
				v[54 /*_7*/],
				v[56 /*_8*/],
				v[58 /*_9*/],
				v[60 /*_10*/],
				v[62 /*_11*/],
				v[64 /*_12*/],
				v[66 /*_13*/],
			),
			v[68 /*_18*/],
			v[70 /*_19*/],
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[89 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[92 /*_41*/],
			),
			v[94 /*_33*/],
			v[96 /*_34*/],
			v[98 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS731(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 731, "{| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ret__IELE-COMMON`(ARGS))=>memoryDirectDelta(`_-Int__INT`(`_-Int__INT`(#token(\"0\",\"Int\"),intSizesArr(REGS,NREGS,SCHED)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(_20,_21,_22,_23,`<callFrame>`(`<program>`(`<functions>`(_39),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,`<regs>`(REGS),_14,_15,_16,`<fid>`(NAME),_17,_18,_19),_24,_25,_26,_27,_28,_29,_30,_31,_32,_33),_38) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(NREGS)),`Map:lookup`(_39,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_39,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isIeleName(NAME)),isInt(NREGS)),isSchedule(SCHED)),isNonEmptyOperands(ARGS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4d8037f4a1e80b8f0e82f0103d9eb87b4dd7f1a2e9f37c6adc9c33fd76cd0ec1) contentStartColumn(10) contentStartLine(231) org.kframework.attributes.Location(Location(231,10,236,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[123], i.evalErr = i.evalIntSizesArr( // intSizesArr(REGS,NREGS,SCHED)
		v[63 /*REGS*/],
		v[113 /*NREGS*/],
		v[20 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[122], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(#token("0","Int"),intSizesArr(REGS,NREGS,SCHED))
		/* rhs KToken */ m.IntZero,
		v[123],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[124], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblGcallmemoryXuIELEXhyphenGAS, // as-is Gcallmemory_IELE-GAS
		),
		v[20 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[121], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(#token("0","Int"),intSizesArr(REGS,NREGS,SCHED)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED))
		v[122],
		v[124],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[125], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblMemoryDirectDelta, // as-is memoryDirectDelta
					v[121],
				),
				v[7 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[125],
				v[13 /*SREST*/],
			),
		),
		v[15 /*_34*/],
		v[17 /*_35*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[20 /*SCHED*/],
		),
		v[22 /*_36*/],
		v[24 /*_37*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_20*/],
			v[29 /*_21*/],
			v[31 /*_22*/],
			v[33 /*_23*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[38 /*_39*/],
					),
					v[40 /*_3*/],
					v[42 /*_4*/],
					v[44 /*_5*/],
					v[46 /*_6*/],
					v[48 /*_7*/],
				),
				v[50 /*_8*/],
				v[52 /*_9*/],
				v[54 /*_10*/],
				v[56 /*_11*/],
				v[58 /*_12*/],
				v[60 /*_13*/],
				i.Model.NewKApply(m.LblXltregsXgt, // as-is <regs>
					v[63 /*REGS*/],
				),
				v[65 /*_14*/],
				v[67 /*_15*/],
				v[69 /*_16*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[72 /*NAME*/],
				),
				v[74 /*_17*/],
				v[76 /*_18*/],
				v[78 /*_19*/],
			),
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
			v[88 /*_28*/],
			v[90 /*_29*/],
			v[92 /*_30*/],
			v[94 /*_31*/],
			v[96 /*_32*/],
			v[98 /*_33*/],
		),
		v[100 /*_38*/],
	), nil
}

func (i *Interpreter) stepRHS690(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 690, "{| rule `<generatedTop>`(`<k>`(`` `startTx_IELE-TESTING`(.KList)=>loadTx(TS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_5,_6,_7,_8,_9,_10,`<network>`(_2,_3,_4,`<txPending>`(`_List_`(`ListItem`(TXID),DotVar3)),`<messages>`(_11))) requires `_andBool_`(`_andBool_`(#match(`<message>`(`<msgID>`(TXID),`<txNonce>`(TN),`<txGasPrice>`(TP),`<txGasLimit>`(TG),`<sendto>`(TT),_0,`<value>`(TV),`<from>`(TS),`<data>`(DATA),_1),`Map:lookup`(_11,`<msgID>`(TXID))),#match(DotVar4,`_[_<-undef]`(_11,`<msgID>`(TXID)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(TP),isInt(TV)),isWordStack(DATA)),isAccount(TT)),isInt(TXID)),isInt(TN)),isInt(TG)),isInt(TS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fa1f643629c87d39a594aac0221ccf25a0f1289b2e61c85b6d7190b71983ddb4) contentStartColumn(10) contentStartLine(98) org.kframework.attributes.Location(Location(98,10,110,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[78], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[80], i.evalErr = i.evalListItem( // `ListItem`(TXID)
		v[34 /*TXID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[79], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(TXID),DotVar3)
		v[80],
		v[35 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblLoadTx, // as-is loadTx
					v[62 /*TS*/],
				),
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[78],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_5*/],
		v[14 /*_6*/],
		v[16 /*_7*/],
		v[18 /*_8*/],
		v[20 /*_9*/],
		v[22 /*_10*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[25 /*_2*/],
			v[27 /*_3*/],
			v[29 /*_4*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[79],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[38 /*_11*/],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS694(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 694, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"storage\\\"\",\"String\"),STORAGE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(ACCTSTORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isMap(ACCTSTORAGE)),isInt(ACCT)),`_==K_`(#removeZeros(ACCTSTORAGE),STORAGE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a7f95dbb27dd3ad07f80a3662274b6e8772f9c94ed67943765a8af2b6f3540b3) contentStartColumn(10) contentStartLine(568) org.kframework.attributes.Location(Location(568,10,574,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[71], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[71],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[43 /*_14*/],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS712(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 712, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),`.WordStack_IELE-DATA`(.KList)),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_9,_10,_11,_12,_13,_14,`<network>`(_5,`<accounts>`(_15),_6,_7,_8)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,_4),`Map:lookup`(_15,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_15,`<acctID>`(ACCT)))),isInt(ACCT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b8fb434d883623be78731ef78bb3fcfb0ce41c5f7be7d47d450b81674ea63060) contentStartColumn(10) contentStartLine(583) org.kframework.attributes.Location(Location(583,10,587,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[66], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[18 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[66],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_9*/],
		v[28 /*_10*/],
		v[30 /*_11*/],
		v[32 /*_12*/],
		v[34 /*_13*/],
		v[36 /*_14*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[39 /*_5*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[42 /*_15*/],
			),
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
		),
	), nil
}

func (i *Interpreter) stepRHS715(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 715, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"nonce\\\"\",\"String\"),NONCE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,`<nonce>`(NONCE),_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isInt(NONCE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(221b7a696f1b08fa3bc90f5f08be7cd3b9fbf2d911105f9070f9d432cfc5721b) contentStartColumn(10) contentStartLine(561) org.kframework.attributes.Location(Location(561,10,566,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[67], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[67],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[43 /*_14*/],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS752(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 752, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"code\\\"\",\"String\"),CODE),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CONTRACT),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCT),isWordStack(CODE)),isContract(CONTRACT)),`_==K_`(#dasmContract(CODE,#mainContract(CONTRACT)),CONTRACT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d562ca9eb992771891d21fca0464edce1873353f38c3cf1e18b1cd21c90b4ef) contentStartColumn(10) contentStartLine(576) org.kframework.attributes.Location(Location(576,10,582,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[73], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[73],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[43 /*_14*/],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS764(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 764, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"account\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(ACCT,`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"balance\\\"\",\"String\"),BAL),`.List{\"_,__IELE-DATA\"}`(.KList)))),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(BAL),isInt(ACCT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(35d7c225f4ccc2e78dfef7189ef03c3bed4294cbf72d253329b6dae08277df04) contentStartColumn(10) contentStartLine(554) org.kframework.attributes.Location(Location(554,10,559,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[67], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[19 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[67],
				v[25 /*SREST*/],
			),
		),
		v[27 /*_8*/],
		v[29 /*_9*/],
		v[31 /*_10*/],
		v[33 /*_11*/],
		v[35 /*_12*/],
		v[37 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[40 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[43 /*_14*/],
			),
			v[45 /*_5*/],
			v[47 /*_6*/],
			v[49 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS703(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 703, "{| rule `<generatedTop>`(`<k>`(`` `check__IELE-TESTING`(`_:__IELE-DATA`(#token(\"\\\"genesisBlockHeader\\\"\",\"String\"),`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(#token(\"\\\"hash\\\"\",\"String\"),HASH),`.List{\"_,__IELE-DATA\"}`(.KList)))))=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<blockhash>`(_20)),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(DotVar3,`List:range`(_20,#token(\"0\",\"Int\"),#token(\"2\",\"Int\"))),#match(_781,`List:get`(_20,#token(\"-1\",\"Int\")))),#match(HASH,`List:get`(_20,#token(\"-2\",\"Int\")))),`_andBool_`(isJSON(HASH),isKItem(_781))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b102be60a17de64e9da71d8b8e096858ddb9b5ac066e4e3c0fa9e92547ba0903) contentStartColumn(10) contentStartLine(644) org.kframework.attributes.Location(Location(644,10,645,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[73], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[13 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[73],
				v[19 /*SREST*/],
			),
		),
		v[21 /*_14*/],
		v[23 /*_15*/],
		v[25 /*_16*/],
		v[27 /*_17*/],
		v[29 /*_18*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[32 /*_0*/],
			v[34 /*_1*/],
			v[36 /*_2*/],
			v[38 /*_3*/],
			v[40 /*_4*/],
			v[42 /*_5*/],
			v[44 /*_6*/],
			v[46 /*_7*/],
			v[48 /*_8*/],
			v[50 /*_9*/],
			v[52 /*_10*/],
			v[54 /*_11*/],
			v[56 /*_12*/],
			v[58 /*_13*/],
			i.Model.NewKApply(m.LblXltblockhashXgt, // as-is <blockhash>
				v[61 /*_20*/],
			),
		),
		v[63 /*_19*/],
	), nil
}

func (i *Interpreter) stepRHS696(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 696, "{| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_12,_13,_14,_15,_16,_17,`<network>`(_8,`<accounts>`(_18=>`_AccountCellMap_`(`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(ORIGFROM,VALUE)),_0,_1,_2,_3)),`AccountCellMapItem`(`<acctID>`(ACCTTO),`<account>`(`<acctID>`(ACCTTO),`<balance>`(`_+Int_`(ORIGTO,VALUE)),_4,_5,_6,_7))),DotVar3)),_9,_10,_11)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),`<balance>`(ORIGTO),_4,_5,_6,_7),`Map:lookup`(_18,`<acctID>`(ACCTTO))),#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_18,`<acctID>`(ACCTFROM)))),#match(DotVar3,`_[_<-undef]`(`_[_<-undef]`(_18,`<acctID>`(ACCTFROM)),`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isInt(ACCTFROM)),isInt(ORIGFROM)),isInt(ORIGTO)),`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`_<=Int__INT`(VALUE,ORIGFROM)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e4a5b8a9ab3d48d007ae64872e89dfd7ee3ae29c22e7dfe151629da743a95d9f) contentStartColumn(10) contentStartLine(507) org.kframework.attributes.Location(Location(507,10,518,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[79], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[83], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(ORIGFROM,VALUE)
		v[62 /*ORIGFROM*/],
		v[9 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[82], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(ORIGFROM,VALUE)),_0,_1,_2,_3))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCTFROM*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCTFROM*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[83],
			),
			v[64 /*_0*/],
			v[66 /*_1*/],
			v[68 /*_2*/],
			v[70 /*_3*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[85], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(ORIGTO,VALUE)
		v[47 /*ORIGTO*/],
		v[9 /*VALUE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[84], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCTTO),`<account>`(`<acctID>`(ACCTTO),`<balance>`(`_+Int_`(ORIGTO,VALUE)),_4,_5,_6,_7))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[7 /*ACCTTO*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[7 /*ACCTTO*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[85],
			),
			v[49 /*_4*/],
			v[51 /*_5*/],
			v[53 /*_6*/],
			v[55 /*_7*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[81], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(ORIGFROM,VALUE)),_0,_1,_2,_3)),`AccountCellMapItem`(`<acctID>`(ACCTTO),`<account>`(`<acctID>`(ACCTTO),`<balance>`(`_+Int_`(ORIGTO,VALUE)),_4,_5,_6,_7)))
		v[82],
		v[84],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[80], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(ORIGFROM,VALUE)),_0,_1,_2,_3)),`AccountCellMapItem`(`<acctID>`(ACCTTO),`<account>`(`<acctID>`(ACCTTO),`<balance>`(`_+Int_`(ORIGTO,VALUE)),_4,_5,_6,_7))),DotVar3)
		v[81],
		v[74 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[10 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[79],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_12*/],
		v[20 /*_13*/],
		v[22 /*_14*/],
		v[24 /*_15*/],
		v[26 /*_16*/],
		v[28 /*_17*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[31 /*_8*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[80],
			),
			v[36 /*_9*/],
			v[38 /*_10*/],
			v[40 /*_11*/],
		),
	), nil
}

func (i *Interpreter) stepRHS711(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 711, "{| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCT,ACCT,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isInt(ORIGFROM)),`_<=Int__INT`(VALUE,ORIGFROM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e32d3ca8e622e46ed12d122b8c96a250847e21975db202dd5c94746ab40d5514) contentStartColumn(10) contentStartLine(537) org.kframework.attributes.Location(Location(537,10,543,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[60], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[9 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[60],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_8*/],
		v[19 /*_9*/],
		v[21 /*_10*/],
		v[23 /*_11*/],
		v[25 /*_12*/],
		v[27 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[30 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[33 /*_14*/],
			),
			v[35 /*_5*/],
			v[37 /*_6*/],
			v[39 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS716(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 716, "{| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCTTO)``~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_7,_8,_9,_10,_11,_12,`<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(_13),_4,_5,_6)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_13,`<acctID>`(ACCTFROM))),#match(DotVar3,`_[_<-undef]`(_13,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isInt(ACCTFROM)),isSet(ACCTS)),isInt(ORIGFROM)),`_andBool_`(`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS))),`_<=Int__INT`(VALUE,ORIGFROM)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c33779f3383edf26d8c4af59f237e521534e609f758861f144adab74efc0f6f0) contentStartColumn(10) contentStartLine(528) org.kframework.attributes.Location(Location(528,10,535,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[64], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE, // as-is #loadAccount__IELE-INFRASTRUCTURE
					v[7 /*ACCTTO*/],
				),
				i.Model.NewKApply(m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE, // as-is #transferFunds____IELE-INFRASTRUCTURE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[9 /*VALUE*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[64],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_7*/],
		v[20 /*_8*/],
		v[22 /*_9*/],
		v[24 /*_10*/],
		v[26 /*_11*/],
		v[28 /*_12*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[32 /*ACCTS*/],
			),
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[35 /*_13*/],
			),
			v[37 /*_4*/],
			v[39 /*_5*/],
			v[41 /*_6*/],
		),
	), nil
}

func (i *Interpreter) stepRHS723(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 723, "{| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"7\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTFROM))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isInt(ACCTFROM)),isInt(ORIGFROM)),`_>Int__INT`(VALUE,ORIGFROM))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5607b5b79c7175d85968e3c6acc4f87e64369a4cea37988cb317c924aaa59e5) contentStartColumn(10) contentStartLine(520) org.kframework.attributes.Location(Location(520,10,526,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[61], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt7,
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[61],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_8*/],
		v[20 /*_9*/],
		v[22 /*_10*/],
		v[24 /*_11*/],
		v[26 /*_12*/],
		v[28 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[31 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[34 /*_14*/],
			),
			v[36 /*_5*/],
			v[38 /*_6*/],
			v[40 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS701(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 701, "{| rule `<generatedTop>`(`<k>`(``#lookupStorage(ACCT,INDEX)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isInt(ACCT)),`_in_keys(_)_MAP`(INDEX,STORAGE))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(005ad422c35036fb2698655f509aa4037de8992d3b6ab689b1d0dcabafb6018f) contentStartColumn(10) contentStartLine(476) org.kframework.attributes.Location(Location(476,10,482,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[59], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[59],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_8*/],
		v[18 /*_9*/],
		v[20 /*_10*/],
		v[22 /*_11*/],
		v[24 /*_12*/],
		v[26 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[29 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[32 /*_14*/],
			),
			v[34 /*_5*/],
			v[36 /*_6*/],
			v[38 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS740(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 740, "{| rule `<generatedTop>`(`<k>`(``#lookupStorage(ACCT,INDEX)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(`_[_<-_]_MAP`(STORAGE,INDEX,#token(\"0\",\"Int\"))),_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isInt(ACCT)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62522a0461594f0a0764feb433dcee929a7b24e75c5a5ef9a0152edfb910bc87) contentStartColumn(10) contentStartLine(486) org.kframework.attributes.Location(Location(486,10,492,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[59], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[62], i.evalErr = i.evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP( // `_[_<-_]_MAP`(STORAGE,INDEX,#token("0","Int"))
		v[49 /*STORAGE*/],
		v[7 /*INDEX*/],
		/* rhs KToken */ m.IntZero,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[61], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(`_[_<-_]_MAP`(STORAGE,INDEX,#token("0","Int"))),_2,_3))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCT*/],
			),
			v[44 /*_0*/],
			v[46 /*_1*/],
			i.Model.NewKApply(m.LblXltstorageXgt, // as-is <storage>
				v[62],
			),
			v[51 /*_2*/],
			v[53 /*_3*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[60], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(`_[_<-_]_MAP`(STORAGE,INDEX,#token("0","Int"))),_2,_3)),DotVar3)
		v[61],
		v[56 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[59],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_8*/],
		v[18 /*_9*/],
		v[20 /*_10*/],
		v[22 /*_11*/],
		v[24 /*_12*/],
		v[26 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[29 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[60],
			),
			v[34 /*_5*/],
			v[36 /*_6*/],
			v[38 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS709(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 709, "{| rule `<generatedTop>`(`<k>`(`` `#initAccount__IELE-INFRASTRUCTURE`(ACCT)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_6,_7,_8,_9,_10,_11,`<network>`(_2,`<accounts>`(_12=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),#token(\"0\",\"Int\"),#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),#token(\"0\",\"Int\")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList))),`<storage>`(`.Map`(.KList)),`<nonce>`(#token(\"0\",\"Int\")),_1)),DotVar3)),_3,_4,_5)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),_13,#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),_14),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList))),`<storage>`(_113),`<nonce>`(_15),_1),`Map:lookup`(_12,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_12,`<acctID>`(ACCT)))),`_andBool_`(isMap(_113),isInt(ACCT))),`_andBool_`(`_andBool_`(`_==Int_`(_13,#token(\"0\",\"Int\")),`_==Int_`(_14,#token(\"0\",\"Int\"))),`_==Int_`(_15,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(22ea51c67a7e7778e41040d8cd8437cd9229a01e74ac79f87e97de2e1d3c2543) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,449,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[80], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[83], i.evalErr = i.evalXdotMap(config, -1) // `.Map`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[82], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(`.Map`(.KList)),`<nonce>`(#token("0","Int")),_1))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCT*/],
			),
			v[42 /*_0*/],
			i.Model.NewKApply(m.LblXltcodeXgt, // as-is <code>
				i.Model.NewKApply(m.LblContractDefinitionList, // as-is contractDefinitionList
					i.Model.NewKApply(m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, // as-is contract_!__{_}_IELE-CONFIGURATION
						/* rhs KToken */ constKTokenSortIeleNameieleXdotWallet,
						/* rhs KToken */ m.IntZero,
						/* rhs KToken */ constStringXquoteXquote,
						i.Model.NewKApply(m.LblTopLevelDefinitionList, // as-is topLevelDefinitionList
							i.Model.NewKApply(m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, // as-is definepublic_{_}_IELE-COMMON
								i.Model.NewKApply(m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _(_)_IELE-COMMON
									i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
										/* rhs KToken */ constKTokenSortIeleNamedeposit,
									),
									/* rhs KToken */ m.IntZero,
								),
								i.Model.NewKApply(m.LblXuXuXuIELEXhyphenCOMMON, // as-is ___IELE-COMMON
									i.Model.NewKApply(m.LblInstructionList, // as-is instructionList
										i.Model.NewKApply(m.LblRetXuXuIELEXhyphenCOMMON, // as-is ret__IELE-COMMON
											i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
											),
										),
										i.Model.NewKApply(m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, // as-is .List{"instructionList"}
										),
									),
									i.Model.NewKApply(m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, // as-is .List{"labeledBlockList"}
									),
								),
							),
							i.Model.NewKApply(m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, // as-is .List{"topLevelDefinitionList"}
							),
						),
					),
					i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
					),
				),
			),
			i.Model.NewKApply(m.LblXltstorageXgt, // as-is <storage>
				v[83],
			),
			i.Model.NewKApply(m.LblXltnonceXgt, // as-is <nonce>
				/* rhs KToken */ m.IntZero,
			),
			v[72 /*_1*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[81], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(`.Map`(.KList)),`<nonce>`(#token("0","Int")),_1)),DotVar3)
		v[82],
		v[75 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[80],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_6*/],
		v[16 /*_7*/],
		v[18 /*_8*/],
		v[20 /*_9*/],
		v[22 /*_10*/],
		v[24 /*_11*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[27 /*_2*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[81],
			),
			v[32 /*_3*/],
			v[34 /*_4*/],
			v[36 /*_5*/],
		),
	), nil
}

func (i *Interpreter) stepRHS745(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 745, "{| rule `<generatedTop>`(`<k>`(`` `#initAccount__IELE-INFRASTRUCTURE`(ACCT)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"6\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_7,_8,_9,_10,_11,_12,`<network>`(_3,`<accounts>`(_13),_4,_5,_6)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,`<nonce>`(NONCE),_2),`Map:lookup`(_13,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_13,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCT)),isInt(NONCE)),`_orBool__BOOL`(`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),#token(\"0\",\"Int\"),#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),#token(\"0\",\"Int\")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList))),`_=/=K_`(NONCE,#token(\"0\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad1f271fcfc54bc8e4240ada4e83c3f1cdf118d9399b58945658298f656e2de5) contentStartColumn(10) contentStartLine(433) org.kframework.attributes.Location(Location(433,10,440,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[60], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt6,
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[60],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_7*/],
		v[16 /*_8*/],
		v[18 /*_9*/],
		v[20 /*_10*/],
		v[22 /*_11*/],
		v[24 /*_12*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[27 /*_3*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[30 /*_13*/],
			),
			v[32 /*_4*/],
			v[34 /*_5*/],
			v[36 /*_6*/],
		),
	), nil
}

func (i *Interpreter) stepRHS714(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 714, "{| rule `<generatedTop>`(`<k>`(`` `#finishCodeDeposit______IELE`(ACCT,CODE,STATUS,ACCTOUT,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>#token(\"0\",\"Int\"),#registerDelta(STATUS,#token(\"1\",\"Int\"))~>#registerDelta(ACCTOUT,#token(\"3\",\"Int\"))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(STATUS,#token(\"0\",\"Int\"))~>`#load___IELE`(ACCTOUT,ACCT))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,`<mode>`(EXECMODE),_36,_37,_38,`<iele>`(`<output>`(_313=>operandList(ACCT,`.List{\"operandList\"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,_29,_30)),DotVar5)),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(_314),_28,_29,_30),`Map:lookup`(_39,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInts(_313),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS)),isInt(ACCT)),isMode(EXECMODE)),isBool(NEW)),isInt(GAVAIL)),isContract(_314))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(06b100c5152e9ae1dcc919961147f6b13b6b4ef5804987df9b133d81528c6f3d) contentStartColumn(10) contentStartLine(1442) org.kframework.attributes.Location(Location(1442,10,1454,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[131], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[25 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))
	if m.IsTrue(v[131]) { // rhs if-then-else
		v[130] = i.Model.NewKApply(m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #popWorldState_IELE-INFRASTRUCTURE
		)
	} else {
		v[130] = i.Model.NewKApply(m.LblXhashdropWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropWorldState_IELE-INFRASTRUCTURE
		)
	}
	// `#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>#token("0","Int"),#registerDelta(STATUS,#token("1","Int"))~>#registerDelta(ACCTOUT,#token("3","Int"))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(STATUS,#token("0","Int"))~>`#load___IELE`(ACCTOUT,ACCT))
	if m.IsTrue(v[13 /*NEW*/]) { // rhs if-then-else
		v[132] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
				v[69 /*GAVAIL*/],
			),
			/* rhs KToken */ m.IntZero,
		)
	} else {
		v[132] = i.Model.AssembleKSequence(
			i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
				v[9 /*STATUS*/],
				/* rhs KToken */ constInt1,
			),
			i.Model.NewKApply(m.LblXhashregisterDelta, // as-is #registerDelta
				v[11 /*ACCTOUT*/],
				/* rhs KToken */ constInt3,
			),
			i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
				v[69 /*GAVAIL*/],
			),
			i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
				v[9 /*STATUS*/],
				/* rhs KToken */ m.IntZero,
			),
			i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
				v[11 /*ACCTOUT*/],
				v[5 /*ACCT*/],
			),
		)
	}
	v[133], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[135], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,_29,_30))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCT*/],
			),
			v[111 /*_27*/],
			i.Model.NewKApply(m.LblXltcodeXgt, // as-is <code>
				v[7 /*CODE*/],
			),
			v[116 /*_28*/],
			v[118 /*_29*/],
			v[120 /*_30*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[134], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,_29,_30)),DotVar5)
		v[135],
		v[123 /*DotVar5*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				v[130],
				i.Model.NewKApply(m.LblXhashdropSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropSubstate_IELE-INFRASTRUCTURE
				),
				v[132],
				v[14 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[133],
				v[20 /*SREST*/],
			),
		),
		v[22 /*_35*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[25 /*EXECMODE*/],
		),
		v[27 /*_36*/],
		v[29 /*_37*/],
		v[31 /*_38*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblOperandList, // as-is operandList
					v[5 /*ACCT*/],
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
			),
			v[37 /*_14*/],
			v[39 /*_15*/],
			v[41 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[44 /*_0*/],
				v[46 /*_1*/],
				v[48 /*_2*/],
				v[50 /*_3*/],
				v[52 /*_4*/],
				v[54 /*_5*/],
				v[56 /*_6*/],
				v[58 /*_7*/],
				v[60 /*_8*/],
				v[62 /*_9*/],
				v[64 /*_10*/],
				v[66 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[69 /*GAVAIL*/],
				),
				v[71 /*_12*/],
				v[73 /*_13*/],
			),
			v[75 /*_17*/],
			v[77 /*_18*/],
			v[79 /*_19*/],
			v[81 /*_20*/],
			v[83 /*_21*/],
			v[85 /*_22*/],
			v[87 /*_23*/],
			v[89 /*_24*/],
			v[91 /*_25*/],
			v[93 /*_26*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[96 /*_31*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[134],
			),
			v[101 /*_32*/],
			v[103 /*_33*/],
			v[105 /*_34*/],
		),
	), nil
}

func (i *Interpreter) stepRHS719(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 719, "{| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(_12),_2,_3,_4) #as CODE,IDX,GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_5,_6,_7,_8,_9,_10,_11) requires `_andBool_`(`_andBool_`(#match(FUNC,`Map:lookup`(_12,IDX)),#match(DotVar3,`_[_<-undef]`(_12,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isProgramCell(CODE)),isInt(ACCTTO)),isInt(VALUE)),isInt(ACCTFROM)),isInts(ARGS)),isBool(STATIC)),isIeleName(FUNC)),isInt(GLIMIT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(46a3064fbeae49771738a516cc4c4510f049ba12e2885c68e23619b5285ef169) contentStartColumn(10) contentStartLine(1211) org.kframework.attributes.Location(Location(1211,10,1214,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[62], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE, // as-is #transferFunds____IELE-INFRASTRUCTURE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[27 /*VALUE*/],
				),
				i.Model.NewKApply(m.LblXhashmkCallXuXuXuXuXuXuXuXuXuIELE, // as-is #mkCall_________IELE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[8],
					v[55 /*FUNC*/],
					v[25 /*GLIMIT*/],
					v[27 /*VALUE*/],
					v[29 /*ARGS*/],
					v[31 /*STATIC*/],
				),
				v[32 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[62],
				v[38 /*SREST*/],
			),
		),
		v[40 /*_5*/],
		v[42 /*_6*/],
		v[44 /*_7*/],
		v[46 /*_8*/],
		v[48 /*_9*/],
		v[50 /*_10*/],
		v[52 /*_11*/],
	), nil
}

func (i *Interpreter) stepRHS720(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 720, "{| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,NARGS,_382)=>`#exception__IELE-INFRASTRUCTURE`(#token(\"2\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,`<id>`(ACCT),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NARGS),isInt(NPARAMS)),isBool(_382)),isIeleName(LABEL)),isInt(ACCT)),`_=/=Int__INT`(NARGS,NPARAMS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84fd1058a4f5f683027b8a2baae1b7c981a0201a52c0ef931e97c8bf0e014491) contentStartColumn(10) contentStartLine(1257) org.kframework.attributes.Location(Location(1257,10,1261,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[121], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					/* rhs KToken */ constInt2,
				),
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[121],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_35*/],
		v[20 /*_36*/],
		v[22 /*_37*/],
		v[24 /*_38*/],
		v[26 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_21*/],
			v[31 /*_22*/],
			v[33 /*_23*/],
			v[35 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[40 /*_41*/],
					),
					v[42 /*_3*/],
					v[44 /*_4*/],
					v[46 /*_5*/],
					v[48 /*_6*/],
					v[50 /*_7*/],
				),
				v[52 /*_8*/],
				v[54 /*_9*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[57 /*ACCT*/],
				),
				v[59 /*_10*/],
				v[61 /*_11*/],
				v[63 /*_12*/],
				v[65 /*_13*/],
				v[67 /*_14*/],
				v[69 /*_15*/],
				v[71 /*_16*/],
				v[73 /*_17*/],
				v[75 /*_18*/],
				v[77 /*_19*/],
				v[79 /*_20*/],
			),
			v[81 /*_25*/],
			v[83 /*_26*/],
			v[85 /*_27*/],
			v[87 /*_28*/],
			v[89 /*_29*/],
			v[91 /*_30*/],
			v[93 /*_31*/],
			v[95 /*_32*/],
			v[97 /*_33*/],
			v[99 /*_34*/],
		),
		v[101 /*_40*/],
	), nil
}

func (i *Interpreter) stepRHS743(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 743, "{| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,NARGS,ISCREATE)=>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#end_IELE-INFRASTRUCTURE`(.KList),`#execute_IELE`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_29,`<mode>`(EXECMODE),_30,_31,_32,`<iele>`(_15,_16,_17,_18,`<callFrame>`(`<program>`(`<functions>`(_34),`<funcIds>`(_35),_2,`<exported>`(FUNCS),_3,_4),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,`<peakMemory>`(_412=>REGISTERS),`<currentMemory>`(_411=>REGISTERS),`<fid>`(_410=>LABEL),_12,_13,_14),_19,_20,_21,_22,_23,_24,_25,_26,_27,_28),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#setChoice(LABEL,_35),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,`<nregs>`(REGISTERS)),`Map:lookup`(_34,`<funcId>`(LABEL)))),#match(DotVar5,`Set:difference`(_35,`SetItem`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_34,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMode(EXECMODE),isInt(_412)),isIeleName(_410)),isInt(NARGS)),isInt(NPARAMS)),isIeleName(LABEL)),isSet(FUNCS)),isInt(ACCT)),isBool(ISCREATE)),isInt(REGISTERS)),isInt(_411)),`_andBool_`(`_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE),`_==Int_`(NPARAMS,NARGS)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(47f06131b02146e8ef479d8aea55e7e4cf767c6158dbbdddf8237bb1e22e4be5) contentStartColumn(10) contentStartLine(1263) org.kframework.attributes.Location(Location(1263,10,1274,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[137], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList))
		v[21 /*EXECMODE*/],
		i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#end_IELE-INFRASTRUCTURE`(.KList),`#execute_IELE`(.KList))
	if m.IsTrue(v[137]) { // rhs if-then-else
		v[136] = i.Model.NewKApply(m.LblXhashendXuIELEXhyphenINFRASTRUCTURE, // as-is #end_IELE-INFRASTRUCTURE
		)
	} else {
		v[136] = i.Model.NewKApply(m.LblXhashexecuteXuIELE, // as-is #execute_IELE
		)
	}
	v[138], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[136],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[138],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_29*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[21 /*EXECMODE*/],
		),
		v[23 /*_30*/],
		v[25 /*_31*/],
		v[27 /*_32*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[30 /*_15*/],
			v[32 /*_16*/],
			v[34 /*_17*/],
			v[36 /*_18*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[41 /*_34*/],
					),
					i.Model.NewKApply(m.LblXltfuncIDsXgt, // as-is <funcIds>
						v[44 /*_35*/],
					),
					v[46 /*_2*/],
					i.Model.NewKApply(m.LblXltexportedXgt, // as-is <exported>
						v[49 /*FUNCS*/],
					),
					v[51 /*_3*/],
					v[53 /*_4*/],
				),
				v[55 /*_5*/],
				v[57 /*_6*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[60 /*ACCT*/],
				),
				v[62 /*_7*/],
				v[64 /*_8*/],
				v[66 /*_9*/],
				v[68 /*_10*/],
				v[70 /*_11*/],
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[121 /*REGISTERS*/],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[121 /*REGISTERS*/],
				),
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[5 /*LABEL*/],
				),
				v[81 /*_12*/],
				v[83 /*_13*/],
				v[85 /*_14*/],
			),
			v[87 /*_19*/],
			v[89 /*_20*/],
			v[91 /*_21*/],
			v[93 /*_22*/],
			v[95 /*_23*/],
			v[97 /*_24*/],
			v[99 /*_25*/],
			v[101 /*_26*/],
			v[103 /*_27*/],
			v[105 /*_28*/],
		),
		v[107 /*_33*/],
	), nil
}

func (i *Interpreter) stepRHS725(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 725, "{| rule `<generatedTop>`(`<k>`(``#deleteAccounts(`_List_`(`ListItem`(ACCT),ACCTS))=>#deleteAccounts(ACCTS)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(`<activeAccounts>`(_14=>`_Set_`(`.Set`(.KList),DotVar3)),`<accounts>`(_15=>`_AccountCellMap_`(`.AccountCellMap`(.KList),DotVar4)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#setChoice(ACCT,_14),#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,_4),`Map:lookup`(_15,`<acctID>`(ACCT)))),#match(DotVar3,`Set:difference`(_14,`SetItem`(ACCT)))),#match(DotVar4,`_[_<-undef]`(_15,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isList(ACCTS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(427acb6922392dbbb12ecd973b382a1d66e7a25a6127c772dcdc9159aa9b837e) contentStartColumn(10) contentStartLine(686) org.kframework.attributes.Location(Location(686,10,696,21)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[62], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[64], i.evalErr = i.evalXdotSet(config, -1) // `.Set`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[63], i.evalErr = i.evalXuSetXu( // `_Set_`(`.Set`(.KList),DotVar3)
		v[64],
		v[58 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[66], i.evalErr = i.evalXdotAccountCellMap(config, -1) // `.AccountCellMap`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`.AccountCellMap`(.KList),DotVar4)
		v[66],
		v[61 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeleteAccounts, // as-is #deleteAccounts
					v[8 /*ACCTS*/],
				),
				v[9 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[62],
				v[15 /*SREST*/],
			),
		),
		v[17 /*_8*/],
		v[19 /*_9*/],
		v[21 /*_10*/],
		v[23 /*_11*/],
		v[25 /*_12*/],
		v[27 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[63],
			),
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[65],
			),
			v[36 /*_5*/],
			v[38 /*_6*/],
			v[40 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS730(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 730, "{| rule `<generatedTop>`(`<k>`(`` `.List{\"topLevelDefinitionList\"}`(.KList)=>BODIES``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(_13),_0,_1,`<functionBodies>`(BODIES),_2)),_11,_12) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_13,#token(\"init\",\"IeleName\"))),#match(funType(_37,`.List{\"typeList\"}`(.KList)),`Map:lookup`(_13,#token(\"init\",\"IeleName\")))),isTypes(_37)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(424398d327c4b97b9e7fe17e3d7dac4ae1aa455363a73e7c4f3e68cd46139a15) contentStartColumn(10) contentStartLine(95) org.kframework.attributes.Location(Location(95,10,97,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[32 /*BODIES*/],
				v[4 /*DotVar1*/],
			),
		),
		v[6 /*_6*/],
		v[8 /*_7*/],
		v[10 /*_8*/],
		v[12 /*_9*/],
		v[14 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[17 /*_3*/],
			v[19 /*_4*/],
			v[21 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[25 /*_13*/],
				),
				v[27 /*_0*/],
				v[29 /*_1*/],
				i.Model.NewKApply(m.LblXltfunctionBodiesXgt, // as-is <functionBodies>
					v[32 /*BODIES*/],
				),
				v[34 /*_2*/],
			),
		),
		v[36 /*_11*/],
		v[38 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS739(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 739, "{| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#call________IELE`(_446,ACCT,_447,_448,_449,_450,_451)~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{\"contractDefinitionList\"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInts(_450),isBool(_451)),isInt(_449)),isConstant(_447)),isInt(ACCT)),isOperand(_448)),isInt(_446)),`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a85b801be0c2719b408c80edc73c5ab8556e4f346136deb8934162abbe6381bf) contentStartColumn(10) contentStartLine(1193) org.kframework.attributes.Location(Location(1193,10,1196,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[71], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashlookupCode, // as-is #lookupCode
					v[7 /*ACCT*/],
				),
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[5 /*_446*/],
					v[7 /*ACCT*/],
					v[9 /*_447*/],
					v[11 /*_448*/],
					v[13 /*_449*/],
					v[15 /*_450*/],
					v[17 /*_451*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[71],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_8*/],
		v[28 /*_9*/],
		v[30 /*_10*/],
		v[32 /*_11*/],
		v[34 /*_12*/],
		v[36 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[39 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[42 /*_14*/],
			),
			v[44 /*_5*/],
			v[46 /*_6*/],
			v[48 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS744(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 744, "{| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>`#callWithCode_________IELE`(ACCTFROM,ACCTTO,#loadCode(CODE),FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTTO))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isConstant(FUNC)),isBool(STATIC)),isContract(CODE)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT)),`_andBool_`(`_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`_=/=K_`(CODE,`.List{\"contractDefinitionList\"}`(.KList))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0e7fb32c41fb0bd13a74150a4fcc6b02bce6268141b57ce14e7b90fde1deddf) contentStartColumn(10) contentStartLine(1185) org.kframework.attributes.Location(Location(1185,10,1191,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[73], i.evalErr = i.evalXhashloadCode( // #loadCode(CODE)
		v[57 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[74], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcallWithCodeXuXuXuXuXuXuXuXuXuIELE, // as-is #callWithCode_________IELE
					v[5 /*ACCTFROM*/],
					v[7 /*ACCTTO*/],
					v[73],
					v[9 /*FUNC*/],
					v[11 /*GLIMIT*/],
					v[13 /*VALUE*/],
					v[15 /*ARGS*/],
					v[17 /*STATIC*/],
				),
				v[18 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[74],
				v[24 /*SREST*/],
			),
		),
		v[26 /*_8*/],
		v[28 /*_9*/],
		v[30 /*_10*/],
		v[32 /*_11*/],
		v[34 /*_12*/],
		v[36 /*_13*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[39 /*_4*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[42 /*_14*/],
			),
			v[44 /*_5*/],
			v[46 /*_6*/],
			v[48 /*_7*/],
		),
	), nil
}

func (i *Interpreter) stepRHS741(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 741, "{| rule `<generatedTop>`(`<k>`(`` `#loadAccount__IELE-INFRASTRUCTURE`(ACCT)=>.K``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_3,_4,_5,_6,_7,_8,`<network>`(`<activeAccounts>`(_9=>`_Set_`(ACCTS,`SetItem`(ACCT))),`<accounts>`(_10=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList),initExistsCell(.KList))),DotVar3)),_0,_1,_2)) requires `_andBool_`(`_andBool_`(#match(ACCTS,_9),#match(DotVar3,_10)),`_andBool_`(`_andBool_`(isInt(ACCT),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(421be50627a9cb562d6c003bec3a6e624a91a0dd8b2bc5714f5191ffd4a19c6e) contentStartColumn(10) contentStartLine(457) org.kframework.attributes.Location(Location(457,10,468,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[44], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[46], i.evalErr = i.evalSetItem( // `SetItem`(ACCT)
		v[5 /*ACCT*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[45], i.evalErr = i.evalXuSetXu( // `_Set_`(ACCTS,`SetItem`(ACCT))
		v[39 /*ACCTS*/],
		v[46],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[49], i.evalErr = i.evalInitBalanceCell(config, -1) // initBalanceCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[50], i.evalErr = i.evalInitCodeCell(config, -1) // initCodeCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[51], i.evalErr = i.evalInitStorageCell(config, -1) // initStorageCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[52], i.evalErr = i.evalInitNonceCell(config, -1) // initNonceCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[53], i.evalErr = i.evalInitExistsCell(config, -1) // initExistsCell(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[48], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList),initExistsCell(.KList)))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCT*/],
			),
			v[49],
			v[50],
			v[51],
			v[52],
			v[53],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[47], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList),initExistsCell(.KList))),DotVar3)
		v[48],
		v[41 /*DotVar3*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[6 /*DotVar1*/],
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[44],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_3*/],
		v[16 /*_4*/],
		v[18 /*_5*/],
		v[20 /*_6*/],
		v[22 /*_7*/],
		v[24 /*_8*/],
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			i.Model.NewKApply(m.LblXltactiveAccountsXgt, // as-is <activeAccounts>
				v[45],
			),
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[47],
			),
			v[33 /*_0*/],
			v[35 /*_1*/],
			v[37 /*_2*/],
		),
	), nil
}

func (i *Interpreter) stepRHS749(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 749, "{| rule `<generatedTop>`(`<k>`(``#memoryDelta(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM))))),`<currentMemory>`(CURR=>`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM)))),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_32,INDEX)),#match(LM,`Map:lookup`(_32,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isBytes(LM)),isInt(NEWSIZE)),isInt(CURR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(995a6eb06f406e9d613544e3d7d4a1b9240f0b913bf5213a02d2f9bf2ceebe31) contentStartColumn(10) contentStartLine(383) org.kframework.attributes.Location(Location(383,10,386,113)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[97], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[100], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[102], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[95 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[101], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[102],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[99], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM)))
		v[100],
		v[101],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[98], i.evalErr = i.evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM))))
		v[56 /*PEAK*/],
		v[99],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[104], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURR,NEWSIZE)
		v[59 /*CURR*/],
		v[7 /*NEWSIZE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[106], i.evalErr = i.evalLengthBytes( // lengthBytes(LM)
		v[95 /*LM*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[105], i.evalErr = i.evalBytesInWords( // bytesInWords(lengthBytes(LM))
		v[106],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[103], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM)))
		v[104],
		v[105],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashdeductMemory, // as-is #deductMemory
					v[56 /*PEAK*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[97],
				v[14 /*SREST*/],
			),
		),
		v[16 /*_26*/],
		v[18 /*_27*/],
		v[20 /*_28*/],
		v[22 /*_29*/],
		v[24 /*_30*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[27 /*_12*/],
			v[29 /*_13*/],
			v[31 /*_14*/],
			v[33 /*_15*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[36 /*_0*/],
				v[38 /*_1*/],
				v[40 /*_2*/],
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				i.Model.NewKApply(m.LblXltlocalMemXgt, // as-is <localMem>
					v[53 /*_32*/],
				),
				i.Model.NewKApply(m.LblXltpeakMemoryXgt, // as-is <peakMemory>
					v[98],
				),
				i.Model.NewKApply(m.LblXltcurrentMemoryXgt, // as-is <currentMemory>
					v[103],
				),
				v[61 /*_8*/],
				v[63 /*_9*/],
				v[65 /*_10*/],
				v[67 /*_11*/],
			),
			v[69 /*_16*/],
			v[71 /*_17*/],
			v[73 /*_18*/],
			v[75 /*_19*/],
			v[77 /*_20*/],
			v[79 /*_21*/],
			v[81 /*_22*/],
			v[83 /*_23*/],
			v[85 /*_24*/],
			v[87 /*_25*/],
		),
		v[89 /*_31*/],
	), nil
}

func (i *Interpreter) stepRHS754(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 754, "{| rule `<generatedTop>`(`<k>`(`` `#execute_IELE`(.KList)=>CODE``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,`<instructions>`(CODE),_1,_2),`Map:lookup`(_41,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(FUNC)))),`_andBool_`(isBlocks(CODE),isIeleName(FUNC))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f44fa0d6d463806cccf8807adcab0f5e398137552e715f54d4f38349a31591fe) contentStartColumn(10) contentStartLine(562) org.kframework.attributes.Location(Location(562,10,562,138)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[114], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[104 /*CODE*/],
				v[4 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[114],
				v[10 /*SREST*/],
			),
		),
		v[12 /*_35*/],
		v[14 /*_36*/],
		v[16 /*_37*/],
		v[18 /*_38*/],
		v[20 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[23 /*_21*/],
			v[25 /*_22*/],
			v[27 /*_23*/],
			v[29 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[34 /*_41*/],
					),
					v[36 /*_3*/],
					v[38 /*_4*/],
					v[40 /*_5*/],
					v[42 /*_6*/],
					v[44 /*_7*/],
				),
				v[46 /*_8*/],
				v[48 /*_9*/],
				v[50 /*_10*/],
				v[52 /*_11*/],
				v[54 /*_12*/],
				v[56 /*_13*/],
				v[58 /*_14*/],
				v[60 /*_15*/],
				v[62 /*_16*/],
				v[64 /*_17*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[67 /*FUNC*/],
				),
				v[69 /*_18*/],
				v[71 /*_19*/],
				v[73 /*_20*/],
			),
			v[75 /*_25*/],
			v[77 /*_26*/],
			v[79 /*_27*/],
			v[81 /*_28*/],
			v[83 /*_29*/],
			v[85 /*_30*/],
			v[87 /*_31*/],
			v[89 /*_32*/],
			v[91 /*_33*/],
			v[93 /*_34*/],
		),
		v[95 /*_40*/],
	), nil
}

func (i *Interpreter) stepRHS755(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 755, "{| rule `<generatedTop>`(`<k>`(#finalizeTx(#token(\"false\",\"Bool\")=>#token(\"true\",\"Bool\"))~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_37,`<mode>`(`VMTESTS_IELE-CONSTANTS`(.KList)),_38,_39,_40,`<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(BAL=>#token(\"0\",\"Int\"))),_20,_21,_22,_23,_24,_25,_26,_27,_28),`<network>`(_33,`<accounts>`(_41=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(`_+Int_`(CURRBAL,BAL)),_29,_30,_31,_32)),DotVar6)),_34,_35,_36)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(CURRBAL),_29,_30,_31,_32),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar6,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCT)),isInt(CURRBAL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(adc6c32db869e1c7e76b320eb3b446ca6c6c69bce1b211a1d1935cc3ddcaa3a0) contentStartColumn(10) contentStartLine(662) org.kframework.attributes.Location(Location(662,10,670,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[120], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[123], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CURRBAL,BAL)
		v[107 /*CURRBAL*/],
		v[70 /*BAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[122], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(`_+Int_`(CURRBAL,BAL)),_29,_30,_31,_32))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[40 /*ACCT*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[40 /*ACCT*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[123],
			),
			v[109 /*_29*/],
			v[111 /*_30*/],
			v[113 /*_31*/],
			v[115 /*_32*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[121], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(`_+Int_`(CURRBAL,BAL)),_29,_30,_31,_32)),DotVar6)
		v[122],
		v[118 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolTrue,
				),
				v[5 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[120],
				v[11 /*SREST*/],
			),
		),
		v[13 /*_37*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			i.Model.NewKApply(m.LblVMTESTSXuIELEXhyphenCONSTANTS, // as-is VMTESTS_IELE-CONSTANTS
			),
		),
		v[17 /*_38*/],
		v[19 /*_39*/],
		v[21 /*_40*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[24 /*_16*/],
			v[26 /*_17*/],
			v[28 /*_18*/],
			v[30 /*_19*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[33 /*_0*/],
				v[35 /*_1*/],
				v[37 /*_2*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[40 /*ACCT*/],
				),
				v[42 /*_3*/],
				v[44 /*_4*/],
				v[46 /*_5*/],
				v[48 /*_6*/],
				v[50 /*_7*/],
				v[52 /*_8*/],
				v[54 /*_9*/],
				v[56 /*_10*/],
				v[58 /*_11*/],
				v[60 /*_12*/],
				v[62 /*_13*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[65 /*_14*/],
				v[67 /*_15*/],
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					/* rhs KToken */ m.IntZero,
				),
			),
			v[72 /*_20*/],
			v[74 /*_21*/],
			v[76 /*_22*/],
			v[78 /*_23*/],
			v[80 /*_24*/],
			v[82 /*_25*/],
			v[84 /*_26*/],
			v[86 /*_27*/],
			v[88 /*_28*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[91 /*_33*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[121],
			),
			v[96 /*_34*/],
			v[98 /*_35*/],
			v[100 /*_36*/],
		),
	), nil
}

func (i *Interpreter) stepRHS759(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 759, "{| rule `<generatedTop>`(`<k>`(``loadTx(ACCTFROM)=>`#lambda__3`(`#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token(\"Main\",\"IeleName\")),`#illFormed_IELE`(.KList)),ACCTFROM,ACCTFROM,NONCE,GLIMIT,SCHED,CODE,ARGS,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_32,_33,`<schedule>`(SCHED),_34,_35,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(_770=>#token(\"-1\",\"Int\")),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(_771=>#token(\"0\",\"Int\")),_11,_12),`<substate>`(DotVar4,`<logData>`(_773=>`.List`(.KList)),`<refund>`(_772=>#token(\"0\",\"Int\"))),`<gasPrice>`(_768=>GPRICE),`<origin>`(_769=>ACCTFROM),_17,_18,_19,_20,_21,_22,_23),`<network>`(_30,`<accounts>`(_36=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token(\"1\",\"Int\"))),_26)),DotVar7)),_31,`<txPending>`(`_List_`(`ListItem`(TXID),DotVar6)),`<messages>`(_37))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_24,_25,`<nonce>`(NONCE),_26),`Map:lookup`(_36,`<acctID>`(ACCTFROM))),#match(`<message>`(`<msgID>`(TXID),_27,`<txGasPrice>`(GPRICE),`<txGasLimit>`(GLIMIT),`<sendto>`(`.Account_IELE-DATA`(.KList)),_28,`<value>`(VALUE),_29,`<data>`(CODE),`<args>`(ARGS)),`Map:lookup`(_37,`<msgID>`(TXID)))),#match(DotVar7,`_[_<-undef]`(_36,`<acctID>`(ACCTFROM)))),#match(DotVar9,`_[_<-undef]`(_37,`<msgID>`(TXID)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_769),isList(_773)),isInt(GPRICE)),isInt(VALUE)),isInt(_770)),isInt(_772)),isInt(_768)),isInt(TXID)),isInt(BAL)),isInt(_771)),isSchedule(SCHED)),isWordStack(CODE)),isInt(NONCE)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(587a503ac09867b5d0e487ca95c3fa9e0e2f126e9e6b3ca1a9a25e759602e43a) contentStartColumn(10) contentStartLine(114) org.kframework.attributes.Location(Location(114,10,144,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[171], i.evalErr = i.evalXhashisValidContract( // #isValidContract(CODE)
		v[151 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token("Main","IeleName")),`#illFormed_IELE`(.KList))
	if m.IsTrue(v[171]) { // rhs if-then-else
		v[172], i.evalErr = i.evalXhashdasmContract( // #dasmContract(CODE,#token("Main","IeleName"))
			v[151 /*CODE*/],
			/* rhs KToken */ constKTokenSortIeleNameMain,
			config, -1)
		if i.evalErr != nil {
			return m.NoResult, i.evalErr
		}
		v[170] = v[172]
	} else {
		v[170] = i.Model.NewKApply(m.LblXhashillFormedXuIELE, // as-is #illFormed_IELE
		)
	}
	v[169], i.evalErr = i.evalXhashlambdaXuXu3( // `#lambda__3`(`#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token("Main","IeleName")),`#illFormed_IELE`(.KList)),ACCTFROM,ACCTFROM,NONCE,GLIMIT,SCHED,CODE,ARGS,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE)
		v[170],
		v[5 /*ACCTFROM*/],
		v[5 /*ACCTFROM*/],
		v[125 /*NONCE*/],
		v[139 /*GLIMIT*/],
		v[19 /*SCHED*/],
		v[151 /*CODE*/],
		v[154 /*ARGS*/],
		v[19 /*SCHED*/],
		v[146 /*VALUE*/],
		v[154 /*ARGS*/],
		v[5 /*ACCTFROM*/],
		v[125 /*NONCE*/],
		v[151 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[173], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[174], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[178], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GLIMIT,GPRICE)
		v[139 /*GLIMIT*/],
		v[136 /*GPRICE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[177], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))
		v[118 /*BAL*/],
		v[178],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[179], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(NONCE,#token("1","Int"))
		v[125 /*NONCE*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[176], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token("1","Int"))),_26))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCTFROM*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCTFROM*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[177],
			),
			v[120 /*_24*/],
			v[122 /*_25*/],
			i.Model.NewKApply(m.LblXltnonceXgt, // as-is <nonce>
				v[179],
			),
			v[127 /*_26*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[175], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token("1","Int"))),_26)),DotVar7)
		v[176],
		v[157 /*DotVar7*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[181], i.evalErr = i.evalListItem( // `ListItem`(TXID)
		v[107 /*TXID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[180], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(TXID),DotVar6)
		v[181],
		v[108 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[169],
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[173],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_32*/],
		v[16 /*_33*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[19 /*SCHED*/],
		),
		v[21 /*_34*/],
		v[23 /*_35*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_13*/],
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					/* rhs KToken */ constIntXhyphen1,
				),
				v[40 /*_1*/],
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				v[52 /*_7*/],
				v[54 /*_8*/],
				v[56 /*_9*/],
				v[58 /*_10*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					/* rhs KToken */ m.IntZero,
				),
				v[63 /*_11*/],
				v[65 /*_12*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[68 /*DotVar4*/],
				i.Model.NewKApply(m.LblXltlogDataXgt, // as-is <logData>
					v[174],
				),
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					/* rhs KToken */ m.IntZero,
				),
			),
			i.Model.NewKApply(m.LblXltgasPriceXgt, // as-is <gasPrice>
				v[136 /*GPRICE*/],
			),
			i.Model.NewKApply(m.LblXltoriginXgt, // as-is <origin>
				v[5 /*ACCTFROM*/],
			),
			v[82 /*_17*/],
			v[84 /*_18*/],
			v[86 /*_19*/],
			v[88 /*_20*/],
			v[90 /*_21*/],
			v[92 /*_22*/],
			v[94 /*_23*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[97 /*_30*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[175],
			),
			v[102 /*_31*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[180],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[111 /*_37*/],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS761(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 761, "{| rule `<generatedTop>`(`<k>`(``loadTx(ACCTFROM)=>`#call________IELE`(ACCTFROM,ACCTTO,`@__IELE-COMMON`(FUNC),`_*Int__INT`(`_-Int__INT`(GLIMIT,`G0call`(SCHED,`IeleName2String`(FUNC),ARGS)),`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),VALUE,ARGS,#token(\"false\",\"Bool\"))~>`#finishTx_IELE-TESTING`(.KList)~>`#adjustGas_IELE-TESTING`(.KList)~>#finalizeTx(#token(\"false\",\"Bool\"))~>`startTx_IELE-TESTING`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_32,_33,`<schedule>`(SCHED),_34,_35,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(_760=>#token(\"-1\",\"Int\")),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(_761=>#token(\"0\",\"Int\")),_11,_12),`<substate>`(DotVar4,`<logData>`(_763=>`.List`(.KList)),`<refund>`(_762=>#token(\"0\",\"Int\"))),`<gasPrice>`(_758=>GPRICE),`<origin>`(_759=>ACCTFROM),_17,_18,_19,_20,_21,_22,_23),`<network>`(_30,`<accounts>`(_36=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token(\"1\",\"Int\"))),_26)),DotVar7)),_31,`<txPending>`(`_List_`(`ListItem`(TXID),DotVar6)),`<messages>`(_37))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_24,_25,`<nonce>`(NONCE),_26),`Map:lookup`(_36,`<acctID>`(ACCTFROM))),#match(`<message>`(`<msgID>`(TXID),_27,`<txGasPrice>`(GPRICE),`<txGasLimit>`(GLIMIT),`<sendto>`(ACCTTO),`<func>`(FUNC),`<value>`(VALUE),_28,_29,`<args>`(ARGS)),`Map:lookup`(_37,`<msgID>`(TXID)))),#match(DotVar7,`_[_<-undef]`(_36,`<acctID>`(ACCTFROM)))),#match(DotVar9,`_[_<-undef]`(_37,`<msgID>`(TXID)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GPRICE),isInt(ACCTTO)),isInt(VALUE)),isInt(_758)),isIeleName(FUNC)),isInt(_762)),isInt(_759)),isInt(_760)),isInt(TXID)),isInt(BAL)),isSchedule(SCHED)),isList(_763)),isInt(NONCE)),isInt(ACCTFROM)),isInts(ARGS)),isInt(_761)),isInt(GLIMIT)),`_=/=K_`(ACCTTO,`.Account_IELE-DATA`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ac3cf53c52802e050379c928358a0cc87e996c6501e92b14ddbbdbc2217306d1) contentStartColumn(10) contentStartLine(146) org.kframework.attributes.Location(Location(146,10,175,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[175], i.evalErr = i.evalIeleName2String( // `IeleName2String`(FUNC)
		v[145 /*FUNC*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[174], i.evalErr = i.evalG0call( // `G0call`(SCHED,`IeleName2String`(FUNC),ARGS)
		v[19 /*SCHED*/],
		v[175],
		v[155 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[173], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(GLIMIT,`G0call`(SCHED,`IeleName2String`(FUNC),ARGS))
		v[139 /*GLIMIT*/],
		v[174],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[176], i.evalErr = i.evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
		i.Model.NewKApply(m.LblSgasdivisorXuIELEXhyphenGAS, // as-is Sgasdivisor_IELE-GAS
		),
		v[19 /*SCHED*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[172], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(`_-Int__INT`(GLIMIT,`G0call`(SCHED,`IeleName2String`(FUNC),ARGS)),`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
		v[173],
		v[176],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[177], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[178], i.evalErr = i.evalXdotList(config, -1) // `.List`(.KList)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[182], i.evalErr = i.evalXuXstarIntXuXuINT( // `_*Int__INT`(GLIMIT,GPRICE)
		v[139 /*GLIMIT*/],
		v[136 /*GPRICE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[181], i.evalErr = i.evalXuXhyphenIntXuXuINT( // `_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))
		v[118 /*BAL*/],
		v[182],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[183], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(NONCE,#token("1","Int"))
		v[125 /*NONCE*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[180], i.evalErr = i.evalAccountCellMapItem( // `AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token("1","Int"))),_26))
		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
			v[5 /*ACCTFROM*/],
		),
		i.Model.NewKApply(m.LblXltaccountXgt, // as-is <account>
			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
				v[5 /*ACCTFROM*/],
			),
			i.Model.NewKApply(m.LblXltbalanceXgt, // as-is <balance>
				v[181],
			),
			v[120 /*_24*/],
			v[122 /*_25*/],
			i.Model.NewKApply(m.LblXltnonceXgt, // as-is <nonce>
				v[183],
			),
			v[127 /*_26*/],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[179], i.evalErr = i.evalXuAccountCellMapXu( // `_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(BAL,`_*Int__INT`(GLIMIT,GPRICE))),_24,_25,`<nonce>`(`_+Int_`(NONCE,#token("1","Int"))),_26)),DotVar7)
		v[180],
		v[158 /*DotVar7*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[185], i.evalErr = i.evalListItem( // `ListItem`(TXID)
		v[107 /*TXID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[184], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(TXID),DotVar6)
		v[185],
		v[108 /*DotVar6*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashcallXuXuXuXuXuXuXuXuIELE, // as-is #call________IELE
					v[5 /*ACCTFROM*/],
					v[142 /*ACCTTO*/],
					i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
						v[145 /*FUNC*/],
					),
					v[172],
					v[148 /*VALUE*/],
					v[155 /*ARGS*/],
					/* rhs KToken */ m.BoolFalse,
				),
				i.Model.NewKApply(m.LblXhashfinishTxXuIELEXhyphenTESTING, // as-is #finishTx_IELE-TESTING
				),
				i.Model.NewKApply(m.LblXhashadjustGasXuIELEXhyphenTESTING, // as-is #adjustGas_IELE-TESTING
				),
				i.Model.NewKApply(m.LblXhashfinalizeTx, // as-is #finalizeTx
					/* rhs KToken */ m.BoolFalse,
				),
				i.Model.NewKApply(m.LblStartTxXuIELEXhyphenTESTING, // as-is startTx_IELE-TESTING
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[177],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_32*/],
		v[16 /*_33*/],
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[19 /*SCHED*/],
		),
		v[21 /*_34*/],
		v[23 /*_35*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[26 /*_13*/],
			v[28 /*_14*/],
			v[30 /*_15*/],
			v[32 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[35 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					/* rhs KToken */ constIntXhyphen1,
				),
				v[40 /*_1*/],
				v[42 /*_2*/],
				v[44 /*_3*/],
				v[46 /*_4*/],
				v[48 /*_5*/],
				v[50 /*_6*/],
				v[52 /*_7*/],
				v[54 /*_8*/],
				v[56 /*_9*/],
				v[58 /*_10*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					/* rhs KToken */ m.IntZero,
				),
				v[63 /*_11*/],
				v[65 /*_12*/],
			),
			i.Model.NewKApply(m.LblXltsubstateXgt, // as-is <substate>
				v[68 /*DotVar4*/],
				i.Model.NewKApply(m.LblXltlogDataXgt, // as-is <logData>
					v[178],
				),
				i.Model.NewKApply(m.LblXltrefundXgt, // as-is <refund>
					/* rhs KToken */ m.IntZero,
				),
			),
			i.Model.NewKApply(m.LblXltgasPriceXgt, // as-is <gasPrice>
				v[136 /*GPRICE*/],
			),
			i.Model.NewKApply(m.LblXltoriginXgt, // as-is <origin>
				v[5 /*ACCTFROM*/],
			),
			v[82 /*_17*/],
			v[84 /*_18*/],
			v[86 /*_19*/],
			v[88 /*_20*/],
			v[90 /*_21*/],
			v[92 /*_22*/],
			v[94 /*_23*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[97 /*_30*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[179],
			),
			v[102 /*_31*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[184],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[111 /*_37*/],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS767(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 767, "{| rule `<generatedTop>`(`<k>`(`` `#mkCreate_______IELE`(ACCTFROM,ACCTTO,CODE,GAVAIL,VALUE,ARGS)=>#initVM(ARGS)~>#initFun(#token(\"init\",\"IeleName\"),#sizeRegs(ARGS),#token(\"true\",\"Bool\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_36,`<mode>`(EXECMODE),`<schedule>`(SCHED),_37,_38,`<iele>`(_14,_15,_16,_17,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5)=>#loadCode(CODE),`<callDepth>`(CD=>`_+Int_`(CD,#token(\"1\",\"Int\"))),_6,`<id>`(ACCT=>ACCTTO),`<caller>`(_343=>ACCTFROM),`<callData>`(_344=>`.List{\"operandList\"}`(.KList)),`<callValue>`(_345=>VALUE),_7,_8,_9,_10,_11,`<gas>`(OLDGAVAIL=>GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_39),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),_28,_29,_30,`<nonce>`(_40),_31),`Map:lookup`(_39,`<acctID>`(ACCTTO))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_345),isInt(OLDGAVAIL)),isInt(ACCTTO)),isInt(VALUE)),isInt(CD)),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),isInt(ACCT)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isInt(ACCTFROM)),isInt(GAVAIL)),isInts(ARGS)),isInt(_343)),isInts(_344))),`_==Int_`(_40,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04a5c2e8409a43d5748a02af7e709d9fd4b84c96f550c66ef15fe4a134f0e3b0) contentStartColumn(10) contentStartLine(1398) org.kframework.attributes.Location(Location(1398,10,1415,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[154], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
		v[15 /*ARGS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[155], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[156], i.evalErr = i.evalXhashloadCode( // #loadCode(CODE)
		v[9 /*CODE*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[157], i.evalErr = i.evalXuXplusIntXu( // `_+Int_`(CD,#token("1","Int"))
		v[60 /*CD*/],
		/* rhs KToken */ constInt1,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashinitVM, // as-is #initVM
					v[15 /*ARGS*/],
				),
				i.Model.NewKApply(m.LblXhashinitFun, // as-is #initFun
					/* rhs KToken */ constKTokenSortIeleNameinit,
					v[154],
					/* rhs KToken */ m.BoolTrue,
				),
				v[16 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[155],
				v[22 /*SREST*/],
			),
		),
		v[24 /*_36*/],
		i.Model.NewKApply(m.LblXltmodeXgt, // as-is <mode>
			v[27 /*EXECMODE*/],
		),
		i.Model.NewKApply(m.LblXltscheduleXgt, // as-is <schedule>
			v[30 /*SCHED*/],
		),
		v[32 /*_37*/],
		v[34 /*_38*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[37 /*_14*/],
			v[39 /*_15*/],
			v[41 /*_16*/],
			v[43 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[156],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[157],
				),
				v[62 /*_6*/],
				i.Model.NewKApply(m.LblXltidXgt, // as-is <id>
					v[7 /*ACCTTO*/],
				),
				i.Model.NewKApply(m.LblXltcallerXgt, // as-is <caller>
					v[5 /*ACCTFROM*/],
				),
				i.Model.NewKApply(m.LblXltcallDataXgt, // as-is <callData>
					i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
					),
				),
				i.Model.NewKApply(m.LblXltcallValueXgt, // as-is <callValue>
					v[13 /*VALUE*/],
				),
				v[76 /*_7*/],
				v[78 /*_8*/],
				v[80 /*_9*/],
				v[82 /*_10*/],
				v[84 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[11 /*GAVAIL*/],
				),
				v[89 /*_12*/],
				v[91 /*_13*/],
			),
			v[93 /*_18*/],
			v[95 /*_19*/],
			v[97 /*_20*/],
			v[99 /*_21*/],
			v[101 /*_22*/],
			v[103 /*_23*/],
			v[105 /*_24*/],
			v[107 /*_25*/],
			v[109 /*_26*/],
			v[111 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[114 /*_32*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[117 /*_39*/],
			),
			v[119 /*_33*/],
			v[121 /*_34*/],
			v[123 /*_35*/],
		),
	), nil
}

func (i *Interpreter) stepRHS681(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 681, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_,_=create_(_)send__IELE-COMMON`(STATUS,RET,NAME,ARGS,OP1)=>checkLVals(lvalueList(STATUS,lvalueList(RET,`.List{\"lvalueList\"}`(.KList))))~>checkOperands(operandList(OP1,ARGS))``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,`<declaredContracts>`(_14),_2,_3)),_12,_13) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_14),#match(DotVar4,`Set:difference`(_14,`SetItem`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e958e3e77b6e82a4bb267296458f1c6d75fdaae280b8a012849fb0a60c533393) contentStartColumn(10) contentStartLine(294) org.kframework.attributes.Location(Location(294,10,295,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
						v[7 /*STATUS*/],
						i.Model.NewKApply(m.LblLvalueList, // as-is lvalueList
							v[9 /*RET*/],
							i.Model.NewKApply(m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, // as-is .List{"lvalueList"}
							),
						),
					),
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					i.Model.NewKApply(m.LblOperandList, // as-is operandList
						v[15 /*OP1*/],
						v[13 /*ARGS*/],
					),
				),
				v[16 /*DotVar1*/],
			),
		),
		v[18 /*_7*/],
		v[20 /*_8*/],
		v[22 /*_9*/],
		v[24 /*_10*/],
		v[26 /*_11*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[29 /*_4*/],
			v[31 /*_5*/],
			v[33 /*_6*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[36 /*_0*/],
				v[38 /*_1*/],
				i.Model.NewKApply(m.LblXltdeclaredContractsXgt, // as-is <declaredContracts>
					v[41 /*_14*/],
				),
				v[43 /*_2*/],
				v[45 /*_3*/],
			),
		),
		v[47 /*_12*/],
		v[49 /*_13*/],
	), nil
}

func (i *Interpreter) stepRHS692(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 692, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`@__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,`<well-formedness-schedule>`(SCHED),_5,`<currentContract>`(`<types>`(_13=>`_Map_`(`_|->_`(NAME,funType(ARGTYPES,ints(#sizeLVals(RETS)))),DotVar4)),_0,_1,_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_13,NAME)),#match(funType(ARGTYPES,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_13,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),checkInit(NAME,SCHED)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a9a65f4939f3e9eae8d29c4c5a4918666790e0bee8b474be00660dd349b228ec) contentStartColumn(10) contentStartLine(267) org.kframework.attributes.Location(Location(267,10,270,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[68], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(RETS)
		v[7 /*RETS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[67], i.evalErr = i.evalInts( // ints(#sizeLVals(RETS))
		v[68],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[66], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(NAME,funType(ARGTYPES,ints(#sizeLVals(RETS))))
		v[10 /*NAME*/],
		i.Model.NewKApply(m.LblFunType, // as-is funType
			v[54 /*ARGTYPES*/],
			v[67],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[65], i.evalErr = i.evalXuMapXu( // `_Map_`(`_|->_`(NAME,funType(ARGTYPES,ints(#sizeLVals(RETS)))),DotVar4)
		v[66],
		v[50 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					v[7 /*RETS*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[12 /*ARGS*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		v[15 /*_6*/],
		v[17 /*_7*/],
		v[19 /*_8*/],
		v[21 /*_9*/],
		v[23 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[26 /*_4*/],
			i.Model.NewKApply(m.LblXltwellXhyphenformednessXhyphenscheduleXgt, // as-is <well-formedness-schedule>
				v[29 /*SCHED*/],
			),
			v[31 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[65],
				),
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
			),
		),
		v[45 /*_11*/],
		v[47 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS732(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 732, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`@__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,`<well-formedness-schedule>`(SCHED),_5,`<currentContract>`(`<types>`(_13),_0,_1,_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(#match(funType(ARGTYPES,RETTYPES),`Map:lookup`(_13,NAME)),#match(DotVar4,`_[_<-undef]`(_13,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES)),checkInit(NAME,SCHED)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bfa965546cb7679ba81aec9988629fcdc1cdef691965335ee2ceb6080b05078c) contentStartColumn(10) contentStartLine(262) org.kframework.attributes.Location(Location(262,10,265,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckLVals, // as-is checkLVals
					v[7 /*RETS*/],
				),
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[12 /*ARGS*/],
				),
				v[13 /*DotVar1*/],
			),
		),
		v[15 /*_6*/],
		v[17 /*_7*/],
		v[19 /*_8*/],
		v[21 /*_9*/],
		v[23 /*_10*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[26 /*_4*/],
			i.Model.NewKApply(m.LblXltwellXhyphenformednessXhyphenscheduleXgt, // as-is <well-formedness-schedule>
				v[29 /*SCHED*/],
			),
			v[31 /*_5*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[35 /*_13*/],
				),
				v[37 /*_0*/],
				v[39 /*_1*/],
				v[41 /*_2*/],
				v[43 /*_3*/],
			),
		),
		v[45 /*_11*/],
		v[47 /*_12*/],
	), nil
}

func (i *Interpreter) stepRHS699(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 699, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`ret__IELE-COMMON`(OPS)=>checkOperands(OPS)``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(_5,_6,_7,`<currentContract>`(`<types>`(_15=>`_Map_`(`_|->_`(NAME,funType(_33,ints(#sizeRegs(OPS)))),DotVar4)),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1))),_13,_14) requires `_andBool_`(`_andBool_`(#match(funType(_33,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_15,NAME)),#match(DotVar4,`_[_<-undef]`(_15,NAME))),`_andBool_`(`_andBool_`(isIeleName(NAME),isNonEmptyOperands(OPS)),isTypes(_33))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(97ec40d983a2099aa9ef981655814a4d8524ec1660cd493d17ce3dcef20f0827) contentStartColumn(10) contentStartLine(284) org.kframework.attributes.Location(Location(284,10,286,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[62], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(OPS)
		v[7 /*OPS*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[61], i.evalErr = i.evalInts( // ints(#sizeRegs(OPS))
		v[62],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[60], i.evalErr = i.evalXuXpipeXhyphenXgtXu( // `_|->_`(NAME,funType(_33,ints(#sizeRegs(OPS))))
		v[39 /*NAME*/],
		i.Model.NewKApply(m.LblFunType, // as-is funType
			v[51 /*_33*/],
			v[61],
		),
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[59], i.evalErr = i.evalXuMapXu( // `_Map_`(`_|->_`(NAME,funType(_33,ints(#sizeRegs(OPS)))),DotVar4)
		v[60],
		v[55 /*DotVar4*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[7 /*OPS*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_8*/],
		v[12 /*_9*/],
		v[14 /*_10*/],
		v[16 /*_11*/],
		v[18 /*_12*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[21 /*_5*/],
			v[23 /*_6*/],
			v[25 /*_7*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[59],
				),
				v[31 /*_2*/],
				v[33 /*_3*/],
				v[35 /*_4*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					i.Model.NewKApply(m.LblXltfunctionNameXgt, // as-is <functionName>
						v[39 /*NAME*/],
					),
					v[41 /*_0*/],
					v[43 /*_1*/],
				),
			),
		),
		v[45 /*_13*/],
		v[47 /*_14*/],
	), nil
}

func (i *Interpreter) stepRHS713(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 713, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`ret__IELE-COMMON`(OPS)=>checkOperands(OPS)``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(_5,_6,_7,`<currentContract>`(`<types>`(_15),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1))),_13,_14) requires `_andBool_`(`_andBool_`(#match(funType(_29,RETTYPES),`Map:lookup`(_15,NAME)),#match(DotVar4,`_[_<-undef]`(_15,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypes(_29),isIeleName(NAME)),isTypes(RETTYPES)),isNonEmptyOperands(OPS)),`_==K_`(ints(#sizeRegs(OPS)),RETTYPES))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a67a9e03b16633b1b43c2019fe5a11584a58c579d4d0b3eac65099e578f12ea3) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,282,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperands, // as-is checkOperands
					v[7 /*OPS*/],
				),
				v[8 /*DotVar1*/],
			),
		),
		v[10 /*_8*/],
		v[12 /*_9*/],
		v[14 /*_10*/],
		v[16 /*_11*/],
		v[18 /*_12*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[21 /*_5*/],
			v[23 /*_6*/],
			v[25 /*_7*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				i.Model.NewKApply(m.LblXlttypesXgt, // as-is <types>
					v[29 /*_15*/],
				),
				v[31 /*_2*/],
				v[33 /*_3*/],
				v[35 /*_4*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					i.Model.NewKApply(m.LblXltfunctionNameXgt, // as-is <functionName>
						v[39 /*NAME*/],
					),
					v[41 /*_0*/],
					v[43 /*_1*/],
				),
			),
		),
		v[45 /*_13*/],
		v[47 /*_14*/],
	), nil
}

func (i *Interpreter) stepRHS728(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 728, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`br_,__IELE-COMMON`(OP1,NAME)=>checkOperand(OP1)``~>DotVar1),_9,_10,_11,_12,_13,`<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))),_14,_15) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_16),#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))),`_andBool_`(isIeleName(NAME),isOperand(OP1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02149ead6ed4c71274144038607dc7de6765536e6132f0e43d733ddd3e49248f) contentStartColumn(10) contentStartLine(253) org.kframework.attributes.Location(Location(253,10,254,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblCheckOperand, // as-is checkOperand
					v[7 /*OP1*/],
				),
				v[10 /*DotVar1*/],
			),
		),
		v[12 /*_9*/],
		v[14 /*_10*/],
		v[16 /*_11*/],
		v[18 /*_12*/],
		v[20 /*_13*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[23 /*_6*/],
			v[25 /*_7*/],
			v[27 /*_8*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[30 /*_2*/],
				v[32 /*_3*/],
				v[34 /*_4*/],
				v[36 /*_5*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					v[39 /*_0*/],
					i.Model.NewKApply(m.LblXltlabelsXgt, // as-is <labels>
						v[42 /*_16*/],
					),
					v[44 /*_1*/],
				),
			),
		),
		v[46 /*_14*/],
		v[48 /*_15*/],
	), nil
}

func (i *Interpreter) stepRHS747(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 747, "{| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`br__IELE-COMMON`(NAME)=>.K``~>DotVar1),_9,_10,_11,_12,_13,`<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))),_14,_15) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_16),#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))),isIeleName(NAME)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4567ee1de3a9f92d3216645c90e1fd4d672503267db9f77c7c5e71849676d973) contentStartColumn(10) contentStartLine(250) org.kframework.attributes.Location(Location(250,10,251,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>/* rhs KSequence size=1 */ 
			v[8 /*DotVar1*/],
		),
		v[10 /*_9*/],
		v[12 /*_10*/],
		v[14 /*_11*/],
		v[16 /*_12*/],
		v[18 /*_13*/],
		i.Model.NewKApply(m.LblXltwellXhyphenformednessXgt, // as-is <well-formedness>
			v[21 /*_6*/],
			v[23 /*_7*/],
			v[25 /*_8*/],
			i.Model.NewKApply(m.LblXltcurrentContractXgt, // as-is <currentContract>
				v[28 /*_2*/],
				v[30 /*_3*/],
				v[32 /*_4*/],
				v[34 /*_5*/],
				i.Model.NewKApply(m.LblXltcurrentFunctionXgt, // as-is <currentFunction>
					v[37 /*_0*/],
					i.Model.NewKApply(m.LblXltlabelsXgt, // as-is <labels>
						v[40 /*_16*/],
					),
					v[42 /*_1*/],
				),
			),
		),
		v[44 /*_14*/],
		v[46 /*_15*/],
	), nil
}

func (i *Interpreter) stepRHS718(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 718, "{| rule `<generatedTop>`(`<k>`(`` `#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(_383,_384,GAVAIL,_385,_386,_387)=>`#refund__IELE`(GAVAIL)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token(\"7\",\"Int\"),#token(\"8\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(`<output>`(_388=>`.List{\"operandList\"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_40),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_384),isInt(VALUE)),isInt(CD)),isInts(_388)),isInt(_383)),isInt(BAL)),isInt(_385)),isInt(ACCT)),isInts(_387)),isInt(GAVAIL)),isContract(_386)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token(\"1024\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f8ef358095a90a619a839fb7c482da85406255da8793902e151fbb8209f44adb) contentStartColumn(10) contentStartLine(1350) org.kframework.attributes.Location(Location(1350,10,1358,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[138], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
		v[9 /*VALUE*/],
		v[119 /*BAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token("7","Int"),#token("8","Int"))
	if m.IsTrue(v[138]) { // rhs if-then-else
		v[137] = /* rhs KToken */ constInt7
	} else {
		v[137] = /* rhs KToken */ constInt8
	}
	v[139], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[15 /*GAVAIL*/],
				),
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					v[137],
				),
				v[22 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[139],
				v[28 /*SREST*/],
			),
		),
		v[30 /*_35*/],
		v[32 /*_36*/],
		v[34 /*_37*/],
		v[36 /*_38*/],
		v[38 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[44 /*_14*/],
			v[46 /*_15*/],
			v[48 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[51 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[54 /*CD*/],
				),
				v[56 /*_1*/],
				v[58 /*_2*/],
				v[60 /*_3*/],
				v[62 /*_4*/],
				v[64 /*_5*/],
				v[66 /*_6*/],
				v[68 /*_7*/],
				v[70 /*_8*/],
				v[72 /*_9*/],
				v[74 /*_10*/],
				v[76 /*_11*/],
				v[78 /*_12*/],
				v[80 /*_13*/],
			),
			v[82 /*_17*/],
			v[84 /*_18*/],
			v[86 /*_19*/],
			v[88 /*_20*/],
			v[90 /*_21*/],
			v[92 /*_22*/],
			v[94 /*_23*/],
			v[96 /*_24*/],
			v[98 /*_25*/],
			v[100 /*_26*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[103 /*_31*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[106 /*_40*/],
			),
			v[108 /*_32*/],
			v[110 /*_33*/],
			v[112 /*_34*/],
		),
	), nil
}

func (i *Interpreter) stepRHS726(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 726, "{| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#finishTx_IELE-TESTING`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#dropWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(`%__IELE-COMMON`(#token(\"0\",\"Int\")),#token(\"0\",\"Int\"))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_39,_40,_41,_42,_43,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_36,_37,_38,`<txPending>`(`_List_`(`ListItem`(TXID),DotVar5)),`<messages>`(_44))) requires `_andBool_`(`_andBool_`(#match(`<message>`(`<msgID>`(TXID),_28,_29,_30,`<sendto>`(TT),_31,_32,_33,_34,_35),`Map:lookup`(_44,`<msgID>`(TXID))),#match(DotVar6,`_[_<-undef]`(_44,`<msgID>`(TXID)))),`_andBool_`(`_andBool_`(`_andBool_`(isAccount(TT),isInt(TXID)),isInt(GAVAIL)),`_=/=K_`(TT,`.Account_IELE-DATA`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7ddd362bce8e53417ed539937a7679facd83c3f43ba58171a05c6240dda71c89) contentStartColumn(10) contentStartLine(199) org.kframework.attributes.Location(Location(199,10,207,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/./iele-testing.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[128], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[130], i.evalErr = i.evalListItem( // `ListItem`(TXID)
		v[95 /*TXID*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	v[129], i.evalErr = i.evalXuListXu( // `_List_`(`ListItem`(TXID),DotVar5)
		v[130],
		v[96 /*DotVar5*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #popCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashdropWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashdropSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #dropSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[59 /*GAVAIL*/],
				),
				i.Model.NewKApply(m.LblXhashloadXuXuXuIELE, // as-is #load___IELE
					i.Model.NewKApply(m.LblXpercentXuXuIELEXhyphenCOMMON, // as-is %__IELE-COMMON
						/* rhs KToken */ m.IntZero,
					),
					/* rhs KToken */ m.IntZero,
				),
				v[6 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[128],
				v[12 /*SREST*/],
			),
		),
		v[14 /*_39*/],
		v[16 /*_40*/],
		v[18 /*_41*/],
		v[20 /*_42*/],
		v[22 /*_43*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[25 /*_14*/],
			v[27 /*_15*/],
			v[29 /*_16*/],
			v[31 /*_17*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[34 /*_0*/],
				v[36 /*_1*/],
				v[38 /*_2*/],
				v[40 /*_3*/],
				v[42 /*_4*/],
				v[44 /*_5*/],
				v[46 /*_6*/],
				v[48 /*_7*/],
				v[50 /*_8*/],
				v[52 /*_9*/],
				v[54 /*_10*/],
				v[56 /*_11*/],
				i.Model.NewKApply(m.LblXltgasXgt, // as-is <gas>
					v[59 /*GAVAIL*/],
				),
				v[61 /*_12*/],
				v[63 /*_13*/],
			),
			v[65 /*_18*/],
			v[67 /*_19*/],
			v[69 /*_20*/],
			v[71 /*_21*/],
			v[73 /*_22*/],
			v[75 /*_23*/],
			v[77 /*_24*/],
			v[79 /*_25*/],
			v[81 /*_26*/],
			v[83 /*_27*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[86 /*_36*/],
			v[88 /*_37*/],
			v[90 /*_38*/],
			i.Model.NewKApply(m.LblXlttxPendingXgt, // as-is <txPending>
				v[129],
			),
			i.Model.NewKApply(m.LblXltmessagesXgt, // as-is <messages>
				v[99 /*_44*/],
			),
		),
	), nil
}

func (i *Interpreter) stepRHS727(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 727, "{| rule `<generatedTop>`(`<k>`(`` `#checkCall____IELE`(ACCT,VALUE,GCAP)~>`#call________IELE`(_306,_307,_308,GLIMIT,_309,_310,_311)=>`#refund__IELE`(GLIMIT)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token(\"7\",\"Int\"),#token(\"8\",\"Int\")))``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(`<output>`(_312=>`.List{\"operandList\"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_40),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInts(_312)),isInt(CD)),isInt(_309)),isInt(GCAP)),isOperand(GLIMIT)),isInt(BAL)),isInt(ACCT)),isInt(_306)),isInts(_310)),isBool(_311)),isInt(_307)),isConstant(_308)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token(\"1024\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5af5ce6982efb8891421b62a3be4e7644cca8a27a0a1f1d412ffa56e9489526a) contentStartColumn(10) contentStartLine(1160) org.kframework.attributes.Location(Location(1160,10,1168,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[143], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
		v[9 /*VALUE*/],
		v[123 /*BAL*/],
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	// `#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token("7","Int"),#token("8","Int"))
	if m.IsTrue(v[143]) { // rhs if-then-else
		v[142] = /* rhs KToken */ constInt7
	} else {
		v[142] = /* rhs KToken */ constInt8
	}
	v[144], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				i.Model.NewKApply(m.LblXhashrefundXuXuIELE, // as-is #refund__IELE
					v[19 /*GLIMIT*/],
				),
				i.Model.NewKApply(m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE, // as-is #pushCallStack_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushWorldState_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE, // as-is #pushSubstate_IELE-INFRASTRUCTURE
				),
				i.Model.NewKApply(m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, // as-is #exception__IELE-INFRASTRUCTURE
					v[142],
				),
				v[26 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[144],
				v[32 /*SREST*/],
			),
		),
		v[34 /*_35*/],
		v[36 /*_36*/],
		v[38 /*_37*/],
		v[40 /*_38*/],
		v[42 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			i.Model.NewKApply(m.LblXltoutputXgt, // as-is <output>
				i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
				),
			),
			v[48 /*_14*/],
			v[50 /*_15*/],
			v[52 /*_16*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				v[55 /*_0*/],
				i.Model.NewKApply(m.LblXltcallDepthXgt, // as-is <callDepth>
					v[58 /*CD*/],
				),
				v[60 /*_1*/],
				v[62 /*_2*/],
				v[64 /*_3*/],
				v[66 /*_4*/],
				v[68 /*_5*/],
				v[70 /*_6*/],
				v[72 /*_7*/],
				v[74 /*_8*/],
				v[76 /*_9*/],
				v[78 /*_10*/],
				v[80 /*_11*/],
				v[82 /*_12*/],
				v[84 /*_13*/],
			),
			v[86 /*_17*/],
			v[88 /*_18*/],
			v[90 /*_19*/],
			v[92 /*_20*/],
			v[94 /*_21*/],
			v[96 /*_22*/],
			v[98 /*_23*/],
			v[100 /*_24*/],
			v[102 /*_25*/],
			v[104 /*_26*/],
		),
		i.Model.NewKApply(m.LblXltnetworkXgt, // as-is <network>
			v[107 /*_31*/],
			i.Model.NewKApply(m.LblXltaccountsXgt, // as-is <accounts>
				v[110 /*_40*/],
			),
			v[112 /*_32*/],
			v[114 /*_33*/],
			v[116 /*_34*/],
		),
	), nil
}

func (i *Interpreter) stepRHS734(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 734, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br__IELE-COMMON`(LABEL))~>_437=>CODE``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))),#match(CODE,`Map:lookup`(_41,LABEL))),#match(DotVar7,`_[_<-undef]`(_41,LABEL))),`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_437),isKItem(CODE)),isIeleName(FUNC)),isIeleName(LABEL))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(73e99a939dc32e262b518e10f36bd8bc86c282ed35f00aaba68e19ef8e78da07) contentStartColumn(10) contentStartLine(946) org.kframework.attributes.Location(Location(946,10,946,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	v[127], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[120 /*CODE*/],
				v[10 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[127],
				v[16 /*SREST*/],
			),
		),
		v[18 /*_35*/],
		v[20 /*_36*/],
		v[22 /*_37*/],
		v[24 /*_38*/],
		v[26 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[29 /*_21*/],
			v[31 /*_22*/],
			v[33 /*_23*/],
			v[35 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[40 /*_42*/],
					),
					v[42 /*_3*/],
					v[44 /*_4*/],
					v[46 /*_5*/],
					v[48 /*_6*/],
					v[50 /*_7*/],
				),
				v[52 /*_8*/],
				v[54 /*_9*/],
				v[56 /*_10*/],
				v[58 /*_11*/],
				v[60 /*_12*/],
				v[62 /*_13*/],
				v[64 /*_14*/],
				v[66 /*_15*/],
				v[68 /*_16*/],
				v[70 /*_17*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[73 /*FUNC*/],
				),
				v[75 /*_18*/],
				v[77 /*_19*/],
				v[79 /*_20*/],
			),
			v[81 /*_25*/],
			v[83 /*_26*/],
			v[85 /*_27*/],
			v[87 /*_28*/],
			v[89 /*_29*/],
			v[91 /*_30*/],
			v[93 /*_31*/],
			v[95 /*_32*/],
			v[97 /*_33*/],
			v[99 /*_34*/],
		),
		v[101 /*_40*/],
	), nil
}

func (i *Interpreter) stepRHS758(v []m.KReference, bv []bool, config KReference) (m.KReference, error) {
	i.traceRuleApply("STEP", 758, "{| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br_,__IELE-COMMON`(I,LABEL))~>_341=>CODE``~>DotVar1),`<s>`(``#applyRule(#token(\"regular\",\"#RuleTag\"))=>#appliedRule(#token(\"regular\",\"#RuleTag\"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))),#match(CODE,`Map:lookup`(_41,LABEL))),#match(DotVar7,`_[_<-undef]`(_41,LABEL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKItem(CODE),isIeleName(FUNC)),isInt(I)),isIeleName(LABEL)),isBlocks(_341)),`_=/=K_`(I,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(29e8d48ac8b7e10576a511699704d91a1b447037dfe3c999533e924fb531d82d) contentStartColumn(10) contentStartLine(948) org.kframework.attributes.Location(Location(948,10,948,195)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/standalone/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
	v[130], i.evalErr = i.evalXhashappliedRule( // #appliedRule(#token("regular","#RuleTag"))
		/* rhs KToken */ constKTokenSortXhashRuleTagregular,
		config, -1)
	if i.evalErr != nil {
		return m.NoResult, i.evalErr
	}
	return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
		i.Model.NewKApply(m.LblXltkXgt, // as-is <k>
			i.Model.AssembleKSequence(
				v[122 /*CODE*/],
				v[12 /*DotVar1*/],
			),
		),
		i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
			i.Model.AssembleKSequence(
				v[130],
				v[18 /*SREST*/],
			),
		),
		v[20 /*_35*/],
		v[22 /*_36*/],
		v[24 /*_37*/],
		v[26 /*_38*/],
		v[28 /*_39*/],
		i.Model.NewKApply(m.LblXltieleXgt, // as-is <iele>
			v[31 /*_21*/],
			v[33 /*_22*/],
			v[35 /*_23*/],
			v[37 /*_24*/],
			i.Model.NewKApply(m.LblXltcallFrameXgt, // as-is <callFrame>
				i.Model.NewKApply(m.LblXltprogramXgt, // as-is <program>
					i.Model.NewKApply(m.LblXltfunctionsXgt, // as-is <functions>
						v[42 /*_42*/],
					),
					v[44 /*_3*/],
					v[46 /*_4*/],
					v[48 /*_5*/],
					v[50 /*_6*/],
					v[52 /*_7*/],
				),
				v[54 /*_8*/],
				v[56 /*_9*/],
				v[58 /*_10*/],
				v[60 /*_11*/],
				v[62 /*_12*/],
				v[64 /*_13*/],
				v[66 /*_14*/],
				v[68 /*_15*/],
				v[70 /*_16*/],
				v[72 /*_17*/],
				i.Model.NewKApply(m.LblXltfidXgt, // as-is <fid>
					v[75 /*FUNC*/],
				),
				v[77 /*_18*/],
				v[79 /*_19*/],
				v[81 /*_20*/],
			),
			v[83 /*_25*/],
			v[85 /*_26*/],
			v[87 /*_27*/],
			v[89 /*_28*/],
			v[91 /*_29*/],
			v[93 /*_30*/],
			v[95 /*_31*/],
			v[97 /*_32*/],
			v[99 /*_33*/],
			v[101 /*_34*/],
		),
		v[103 /*_40*/],
	), nil
}

