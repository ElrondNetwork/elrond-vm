// File generated by the K Framework Go backend. Timestamp: 2019-07-05 04:12:39.818

package ieletestinginterpreter 

import (
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-testing-kompiled/ieletestingmodel"
)

func (i *Interpreter) makeStuck(c m.KReference, config m.KReference) (m.KReference, error) {
	matched := false
	// rule #-1
	// source: ? @?
	// {| rule `<generatedTop>`(_0,`<s>`(``.K=>#STUCK(.KList)``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [] |}
	if !matched {
		// LHS
		if kapp0, t := i.Model.CastKApply(c); t && i.Model.KApplyLabel(kapp0) == m.LblXltgeneratedTopXgt && i.Model.KApplyArity(kapp0) == 9 { // `<generatedTop>`(_0,`<s>`(DotVar1),_1,_2,_3,_4,_5,_6,_7)
			varXu0 := i.Model.KApplyArg(kapp0, 0) // lhs KVariable _0
			if kapp1, t := i.Model.CastKApply(i.Model.KApplyArg(kapp0, 1)); t && i.Model.KApplyLabel(kapp1) == m.LblXltsXgt && i.Model.KApplyArity(kapp1) == 1 { // `<s>`(DotVar1)
				// KSequence, size 1:DotVar1
				varDotVar1 := i.Model.KApplyArg(kapp1, 0) // lhs KVariable DotVar1
				varXu1 := i.Model.KApplyArg(kapp0, 2) // lhs KVariable _1
				varXu2 := i.Model.KApplyArg(kapp0, 3) // lhs KVariable _2
				varXu3 := i.Model.KApplyArg(kapp0, 4) // lhs KVariable _3
				varXu4 := i.Model.KApplyArg(kapp0, 5) // lhs KVariable _4
				varXu5 := i.Model.KApplyArg(kapp0, 6) // lhs KVariable _5
				varXu6 := i.Model.KApplyArg(kapp0, 7) // lhs KVariable _6
				varXu7 := i.Model.KApplyArg(kapp0, 8) // lhs KVariable _7
				// RHS
				i.traceRuleApply("STEP", -1, "{| rule `<generatedTop>`(_0,`<s>`(``.K=>#STUCK(.KList)``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
				return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
					varXu0,
					i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
						i.Model.AssembleKSequence(
							i.Model.NewKApply(m.LblXhashSTUCK, // as-is #STUCK
							),
							varDotVar1,
						),
					),
					varXu1,
					varXu2,
					varXu3,
					varXu4,
					varXu5,
					varXu6,
					varXu7,
				), nil
			}
		}
	}

	return c, nil
}

func (i *Interpreter) makeUnstuck(c m.KReference, config m.KReference) (m.KReference, error) {
	matched := false
	// rule #-1
	// source: ? @?
	// {| rule `<generatedTop>`(_0,`<s>`(``#STUCK(.KList)=>.K``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [] |}
	if !matched {
		// LHS
		if kapp0, t := i.Model.CastKApply(c); t && i.Model.KApplyLabel(kapp0) == m.LblXltgeneratedTopXgt && i.Model.KApplyArity(kapp0) == 9 { // `<generatedTop>`(_0,`<s>`(#STUCK(.KList)~>DotVar1),_1,_2,_3,_4,_5,_6,_7)
			varXu0 := i.Model.KApplyArg(kapp0, 0) // lhs KVariable _0
			if kapp1, t := i.Model.CastKApply(i.Model.KApplyArg(kapp0, 1)); t && i.Model.KApplyLabel(kapp1) == m.LblXltsXgt && i.Model.KApplyArity(kapp1) == 1 { // `<s>`(#STUCK(.KList)~>DotVar1)
				if ok, kseq2Head, kseq2Tail := i.Model.KSequenceSplitHeadTail(i.Model.KApplyArg(kapp1, 0)); ok { // #STUCK(.KList)~>DotVar1
					if kapp3, t := i.Model.CastKApply(kseq2Head); t && i.Model.KApplyLabel(kapp3) == m.LblXhashSTUCK && i.Model.KApplyArity(kapp3) == 0 { // #STUCK(.KList)
						varDotVar1 := kseq2Tail // lhs KVariable DotVar1
						varXu1 := i.Model.KApplyArg(kapp0, 2) // lhs KVariable _1
						varXu2 := i.Model.KApplyArg(kapp0, 3) // lhs KVariable _2
						varXu3 := i.Model.KApplyArg(kapp0, 4) // lhs KVariable _3
						varXu4 := i.Model.KApplyArg(kapp0, 5) // lhs KVariable _4
						varXu5 := i.Model.KApplyArg(kapp0, 6) // lhs KVariable _5
						varXu6 := i.Model.KApplyArg(kapp0, 7) // lhs KVariable _6
						varXu7 := i.Model.KApplyArg(kapp0, 8) // lhs KVariable _7
						// RHS
						i.traceRuleApply("STEP", -1, "{| rule `<generatedTop>`(_0,`<s>`(``#STUCK(.KList)=>.K``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
						return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
							varXu0,
							i.Model.NewKApply(m.LblXltsXgt, // as-is <s>/* rhs KSequence size=1 */ 
								varDotVar1,
							),
							varXu1,
							varXu2,
							varXu3,
							varXu4,
							varXu5,
							varXu6,
							varXu7,
						), nil
					}
				}
			}
		}
	}

	return c, nil
}

