// File generated by the K Framework Go backend. Timestamp: 2019-08-28 22:25:14.706

package ieletestinginterpreter 

import (
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-testing-kompiled/ieletestingmodel"
)

func (i *Interpreter) makeStuck(c m.KReference, config m.KReference) (m.KReference, error) {
	var v [makeStuckFuncNrVars]KReference
	var bv [makeStuckFuncNrBoolVars]bool
	// all rules: -1
	if c&kapplyMatchMask == kapplyMatchLblXltgeneratedTopXgt9 { // `<generatedTop>`(_0,`<s>`(DotVar1),_1,_2,_3,_4,_5,_6,_7)
		v[0] = i.Model.KApplyArg(c, 0)
		// KVariable _0 = v[0]
		v[1] = i.Model.KApplyArg(c, 1)
		if v[1]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(DotVar1)
			v[2] = i.Model.KApplyArg(v[1], 0)
			// KSequence, size 1:DotVar1
			// KVariable DotVar1 = v[2]
			v[3] = i.Model.KApplyArg(c, 2)
			// KVariable _1 = v[3]
			v[4] = i.Model.KApplyArg(c, 3)
			// KVariable _2 = v[4]
			v[5] = i.Model.KApplyArg(c, 4)
			// KVariable _3 = v[5]
			v[6] = i.Model.KApplyArg(c, 5)
			// KVariable _4 = v[6]
			v[7] = i.Model.KApplyArg(c, 6)
			// KVariable _5 = v[7]
			v[8] = i.Model.KApplyArg(c, 7)
			// KVariable _6 = v[8]
			v[9] = i.Model.KApplyArg(c, 8)
			// KVariable _7 = v[9]
			// rule #-1
			// source: ? @?
			// {| rule `<generatedTop>`(_0,`<s>`(``.K=>#STUCK(.KList)``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [] |}
			// RHS
			i.traceRuleApply("STEP", -1, "{| rule `<generatedTop>`(_0,`<s>`(``.K=>#STUCK(.KList)``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
			return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
				v[0] /*_0*/,
				i.Model.NewKApply(m.LblXltsXgt, // as-is <s>
					i.Model.AssembleKSequence(
						constKapply0XhashSTUCK,
						v[2] /*DotVar1*/,
					),
				),
				v[3] /*_1*/,
				v[4] /*_2*/,
				v[5] /*_3*/,
				v[6] /*_4*/,
				v[7] /*_5*/,
				v[8] /*_6*/,
				v[9] /*_7*/,
			), nil
		}
	}

	doNothingWithVars(len(v), len(bv))
	return c, nil
}

func (i *Interpreter) makeUnstuck(c m.KReference, config m.KReference) (m.KReference, error) {
	var v [makeStuckFuncNrVars]KReference
	var bv [makeStuckFuncNrBoolVars]bool
	// all rules: -1
	if c&kapplyMatchMask == kapplyMatchLblXltgeneratedTopXgt9 { // `<generatedTop>`(_0,`<s>`(#STUCK(.KList)~>DotVar1),_1,_2,_3,_4,_5,_6,_7)
		v[0] = i.Model.KApplyArg(c, 0)
		// KVariable _0 = v[0]
		v[1] = i.Model.KApplyArg(c, 1)
		if v[1]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#STUCK(.KList)~>DotVar1)
			v[2] = i.Model.KApplyArg(v[1], 0)
			if v[2]>>refTypeShift != refEmptyKseqTypeAsUint { // #STUCK(.KList)~>DotVar1
				_, v[3], v[4] = i.Model.KSequenceSplitHeadTail(v[2]) // #STUCK(.KList) ~> ...
				if v[3]&kapplyMatchMask == kapplyMatchLblXhashSTUCK0 { // #STUCK(.KList)
					// KVariable DotVar1 = v[4]
					v[5] = i.Model.KApplyArg(c, 2)
					// KVariable _1 = v[5]
					v[6] = i.Model.KApplyArg(c, 3)
					// KVariable _2 = v[6]
					v[7] = i.Model.KApplyArg(c, 4)
					// KVariable _3 = v[7]
					v[8] = i.Model.KApplyArg(c, 5)
					// KVariable _4 = v[8]
					v[9] = i.Model.KApplyArg(c, 6)
					// KVariable _5 = v[9]
					v[10] = i.Model.KApplyArg(c, 7)
					// KVariable _6 = v[10]
					v[11] = i.Model.KApplyArg(c, 8)
					// KVariable _7 = v[11]
					// rule #-1
					// source: ? @?
					// {| rule `<generatedTop>`(_0,`<s>`(``#STUCK(.KList)=>.K``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [] |}
					// RHS
					i.traceRuleApply("STEP", -1, "{| rule `<generatedTop>`(_0,`<s>`(``#STUCK(.KList)=>.K``~>DotVar1),_1,_2,_3,_4,_5,_6,_7) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
					return i.Model.NewKApply(m.LblXltgeneratedTopXgt, // as-is <generatedTop>
						v[0] /*_0*/,
						i.Model.NewKApply(m.LblXltsXgt, // as-is <s>/* rhs KSequence size=1 */ 
							v[4] /*DotVar1*/,
						),
						v[5] /*_1*/,
						v[6] /*_2*/,
						v[7] /*_3*/,
						v[8] /*_4*/,
						v[9] /*_5*/,
						v[10] /*_6*/,
						v[11] /*_7*/,
					), nil
				}
			}
		}
	}

	doNothingWithVars(len(v), len(bv))
	return c, nil
}

const makeStuckFuncNrVars = 12
const makeStuckFuncNrBoolVars = 0

