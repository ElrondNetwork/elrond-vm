// File generated by the K Framework Go backend. Timestamp: 2019-08-28 22:25:14.706

package ieletestinginterpreter

import (
	blockchain "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/hookadapter/blockchain"
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-testing-kompiled/ieletestingmodel"
	krypto "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/hookadapter/krypto"
)

// Interpreter is a container with a reference to model and basic options
type Interpreter struct {
	Model             *m.ModelState
	MaxSteps          int
	currentStep       int
	checksSinceLastGc int
	stepTempVars      []m.KReference // temporary variables, used during execution
	stepTempBoolVars  []bool // temporary bool evaluation results, used during execution
	evalErr           error // used during execution
	tempTypeVar       uint64 // used during execution
	tempBoolVar       bool // used during execution
	state             m.KReference
	traceHandlers     []traceHandler
	Verbose           bool

	blockchainRef *blockchain.Blockchain
	kryptoRef *krypto.Krypto
}
// NewInterpreter creates a new interpreter instance
func NewInterpreter(blockchainRef *blockchain.Blockchain, kryptoRef *krypto.Krypto) *Interpreter {

	return &Interpreter {
		Model:             m.NewModel(),
		MaxSteps:          0,
		currentStep:       -1, // meaning that no processing started yet
		checksSinceLastGc: 0,
		stepTempVars:      make([]m.KReference, stepMaxVarCount),
		stepTempBoolVars:  make([]bool, stepMaxBoolVarCount),
		evalErr:           nil,
		state:             m.NullReference,
		traceHandlers:     nil,
		Verbose:           false,
		blockchainRef: blockchainRef,
		kryptoRef: kryptoRef,
	}
}
