// File generated by the K Framework Go backend. Timestamp: 2019-05-20 22:38:10.632

package ieletestinginterpreter

import (
	blockchain "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/hookadapter/blockchain"
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-testing-kompiled/ieletestingmodel"
	krypto "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/hookadapter/krypto"
)

func evalIsSStoreInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1
	// source: ? @?
	// {| rule isSStoreInst(`sstore_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval0, err0 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err0 != nil {
			return m.NoResult, err0
		}
		eval1, err1 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1 != nil {
			return m.NoResult, err1
		}
		if (m.IsTrue(eval0)) &&
		   (m.IsTrue(eval1)) {
			// RHS
			traceRuleApply("FUNC", 1, "{| rule isSStoreInst(`sstore_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2
	// source: ? @?
	// {| rule isSStoreInst(#KToken(#token("SStoreInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSStoreInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2, "{| rule isSStoreInst(#KToken(#token(\"SStoreInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #3
	// source: ? @?
	// {| rule isSStoreInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 3, "{| rule isSStoreInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashargv(config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.argv
	lbl := m.LblXhashargv // #argv
	sort := m.SortList
	if hookRes, hookErr := kreflectionHooks.argv(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.argv, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashargv", args: nil}
}

//var constXhashargv K = evalXhashargv(m.InternedBottom)

func evalIsCallValueCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #4
	// source: ? @?
	// {| rule isCallValueCell(#KToken(#token("CallValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 4, "{| rule isCallValueCell(#KToken(#token(\"CallValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #5
	// source: ? @?
	// {| rule isCallValueCell(`<callValue>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallValueXgt && len(kapp0.List) == 1 { // `<callValue>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 5, "{| rule isCallValueCell(`<callValue>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #6
	// source: ? @?
	// {| rule isCallValueCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 6, "{| rule isCallValueCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMapXcolonlookup(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.lookup
	lbl := m.LblMapXcolonlookup // Map:lookup
	sort := m.SortKItem
	if hookRes, hookErr := mapHooks.lookup(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.lookup, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMapXcolonlookup", args: []m.K{c1, c2}}
}

func evalXhashrlpEncodeIntsAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #7
	// source: data.k @517
	// {| rule #rlpEncodeIntsAux(BUF=>`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(`Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList))))),operandList(I,INTS)=>INTS) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isInts(INTS)),isStringBuffer(BUF)),`_=/=Int__INT`(I,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5f53fe86bc39772afb9bac76ba25be23d75163450f89d8a8f954bfdef19f7957) contentStartColumn(10) contentStartLine(517) org.kframework.attributes.Location(Location(517,10,517,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varBUF, t := c1.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(I,INTS)
			if varI, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varINTS := kapp0.List[1] // lhs KVariable INTS
				// REQUIRES
				eval2, err2 := evalIsInts( // isInts(INTS)
					varINTS,
					config, -1)
				if err2 != nil {
					return m.NoResult, err2
				}
				eval3, err3 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(I,#token("0","Int"))
					varI,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err3 != nil {
					return m.NoResult, err3
				}
				if (/* rhs precomputed isInt(I) */ /* && */
				   m.IsTrue(eval2) /* && */ /* rhs precomputed isStringBuffer(BUF) */ ) &&
				   (m.IsTrue(eval3)) {
					// RHS
					traceRuleApply("FUNC", 7, "{| rule #rlpEncodeIntsAux(BUF=>`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(`Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList))))),operandList(I,INTS)=>INTS) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isInts(INTS)),isStringBuffer(BUF)),`_=/=Int__INT`(I,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5f53fe86bc39772afb9bac76ba25be23d75163450f89d8a8f954bfdef19f7957) contentStartColumn(10) contentStartLine(517) org.kframework.attributes.Location(Location(517,10,517,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval8, err8 := evalInt2BytesNoLen( // `Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList))
						varI,
						&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
						}},
						&m.KApply{Label: m.LblSignedBytes, List: []m.K{ // as-is signedBytes
						}},
						config, -1)
					if err8 != nil {
						return m.NoResult, err8
					}
					eval7, err7 := evalBytes2String( // `Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList)))
						eval8,
						config, -1)
					if err7 != nil {
						return m.NoResult, err7
					}
					eval6, err6 := evalXhashrlpEncodeString( // #rlpEncodeString(`Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList))))
						eval7,
						config, -1)
					if err6 != nil {
						return m.NoResult, err6
					}
					eval5, err5 := evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED( // `_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(`Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList)))))
						varBUF,
						eval6,
						config, -1)
					if err5 != nil {
						return m.NoResult, err5
					}
					eval4, err4 := evalXhashrlpEncodeIntsAux( // #rlpEncodeIntsAux(`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(`Bytes2String`(`Int2BytesNoLen`(I,bigEndianBytes(.KList),signedBytes(.KList))))),INTS)
						eval5,
						varINTS,
						config, -1)
					if err4 != nil {
						return m.NoResult, err4
					}
					return eval4, nil
				}
			}
		}
	}

	// rule #8
	// source: data.k @518
	// {| rule #rlpEncodeIntsAux(BUF=>`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(#token("\"\\x00\"","String"))),operandList(_4,INTS)=>INTS) requires `_andBool_`(`_andBool_`(isInts(INTS),isStringBuffer(BUF)),`_==Int_`(_4,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b9214ff44744880230e4532594d5036e6add46fdc5ffcfcfc4f611f049165b50) contentStartColumn(10) contentStartLine(518) org.kframework.attributes.Location(Location(518,10,518,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varBUF, t := c1.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(_4,INTS)
			if varXu4, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varINTS := kapp0.List[1] // lhs KVariable INTS
				// REQUIRES
				eval9, err9 := evalIsInts( // isInts(INTS)
					varINTS,
					config, -1)
				if err9 != nil {
					return m.NoResult, err9
				}
				eval10, err10 := evalXuXeqXeqIntXu( // `_==Int_`(_4,#token("0","Int"))
					varXu4,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err10 != nil {
					return m.NoResult, err10
				}
				if (m.IsTrue(eval9) /* && */ /* rhs precomputed isStringBuffer(BUF) */ ) &&
				   (m.IsTrue(eval10)) {
					// RHS
					traceRuleApply("FUNC", 8, "{| rule #rlpEncodeIntsAux(BUF=>`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(#token(\"\\\"\\\\x00\\\"\",\"String\"))),operandList(_4,INTS)=>INTS) requires `_andBool_`(`_andBool_`(isInts(INTS),isStringBuffer(BUF)),`_==Int_`(_4,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b9214ff44744880230e4532594d5036e6add46fdc5ffcfcfc4f611f049165b50) contentStartColumn(10) contentStartLine(518) org.kframework.attributes.Location(Location(518,10,518,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval13, err13 := evalXhashrlpEncodeString( // #rlpEncodeString(#token("\"\\x00\"","String"))
						/* rhs KToken */ m.NewString("\x00"),
						config, -1)
					if err13 != nil {
						return m.NoResult, err13
					}
					eval12, err12 := evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED( // `_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(#token("\"\\x00\"","String")))
						varBUF,
						eval13,
						config, -1)
					if err12 != nil {
						return m.NoResult, err12
					}
					eval11, err11 := evalXhashrlpEncodeIntsAux( // #rlpEncodeIntsAux(`_+String__STRING-BUFFER-HOOKED`(BUF,#rlpEncodeString(#token("\"\\x00\"","String"))),INTS)
						eval12,
						varINTS,
						config, -1)
					if err11 != nil {
						return m.NoResult, err11
					}
					return eval11, nil
				}
			}
		}
	}

	// rule #9
	// source: data.k @519
	// {| rule #rlpEncodeIntsAux(BUF,`.List{"operandList"}`(.KList))=>#rlpEncodeLength(`StringBuffer2String`(BUF),#token("192","Int")) requires isStringBuffer(BUF) ensures #token("true","Bool") [UNIQUE_ID(3951a64940e95ea197f1186b3ae0b2b4a92837cbb3e481edfcc0b569b6bdea11) contentStartColumn(10) contentStartLine(519) org.kframework.attributes.Location(Location(519,10,519,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varBUF, t := c1.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
			// REQUIRES precomputed isStringBuffer(BUF)
			// RHS
			traceRuleApply("FUNC", 9, "{| rule #rlpEncodeIntsAux(BUF,`.List{\"operandList\"}`(.KList))=>#rlpEncodeLength(`StringBuffer2String`(BUF),#token(\"192\",\"Int\")) requires isStringBuffer(BUF) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3951a64940e95ea197f1186b3ae0b2b4a92837cbb3e481edfcc0b569b6bdea11) contentStartColumn(10) contentStartLine(519) org.kframework.attributes.Location(Location(519,10,519,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval15, err15 := evalStringBuffer2String( // `StringBuffer2String`(BUF)
				varBUF,
				config, -1)
			if err15 != nil {
				return m.NoResult, err15
			}
			eval14, err14 := evalXhashrlpEncodeLength( // #rlpEncodeLength(`StringBuffer2String`(BUF),#token("192","Int"))
				eval15,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err14 != nil {
				return m.NoResult, err14
			}
			return eval14, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeIntsAux", args: []m.K{c1, c2}}
}

func evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.lookup
	lbl := m.LblXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX // _[_]_ARRAY-SYNTAX
	sort := m.SortKItem
	if hookRes, hookErr := arrayHooks.lookup(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.lookup, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX", args: []m.K{c1, c2}}
}

func evalXhashpadToWidth(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #10
	// source: data.k @320
	// {| rule #padToWidth(N,WS)=>#padToWidth(N,`_:__IELE-DATA`(#token("0","Int"),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`_<Int__INT`(#sizeWordStack(WS),N)) ensures #token("true","Bool") [UNIQUE_ID(05cec6910bcad08b8125af7725d6aee4d96e0ac5dac9c1effa2bbd2e45289fac) contentStartColumn(10) contentStartLine(320) org.kframework.attributes.Location(Location(320,10,320,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varWS := c2 // lhs KVariable WS
		// REQUIRES
		eval16, err16 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err16 != nil {
			return m.NoResult, err16
		}
		eval18, err18 := evalXhashsizeWordStack( // #sizeWordStack(WS)
			varWS,
			config, -1)
		if err18 != nil {
			return m.NoResult, err18
		}
		eval17, err17 := evalXuXltIntXuXuINT( // `_<Int__INT`(#sizeWordStack(WS),N)
			eval18,
			varN,
			config, -1)
		if err17 != nil {
			return m.NoResult, err17
		}
		if (m.IsTrue(eval16) /* && */ /* rhs precomputed isInt(N) */ ) &&
		   (m.IsTrue(eval17)) {
			// RHS
			traceRuleApply("FUNC", 10, "{| rule #padToWidth(N,WS)=>#padToWidth(N,`_:__IELE-DATA`(#token(\"0\",\"Int\"),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`_<Int__INT`(#sizeWordStack(WS),N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(05cec6910bcad08b8125af7725d6aee4d96e0ac5dac9c1effa2bbd2e45289fac) contentStartColumn(10) contentStartLine(320) org.kframework.attributes.Location(Location(320,10,320,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval19, err19 := evalXhashpadToWidth( // #padToWidth(N,`_:__IELE-DATA`(#token("0","Int"),WS))
				varN,
				&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
					/* rhs KToken */ m.NewIntFromString("0"),
					varWS,
				}},
				config, -1)
			if err19 != nil {
				return m.NoResult, err19
			}
			return eval19, nil
		}
	}

	// rule #11
	// source: data.k @319
	// {| rule #padToWidth(N,WS)=>WS requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`notBool_`(`_<Int__INT`(#sizeWordStack(WS),N))) ensures #token("true","Bool") [UNIQUE_ID(6df4583b9e398db655b751b09b41aaa6be6eb250dbdf976ff32f984a9653cb01) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varWS := c2 // lhs KVariable WS
		// REQUIRES
		eval20, err20 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err20 != nil {
			return m.NoResult, err20
		}
		eval22, err22 := evalXhashsizeWordStack( // #sizeWordStack(WS)
			varWS,
			config, -1)
		if err22 != nil {
			return m.NoResult, err22
		}
		eval21, err21 := evalXuXltIntXuXuINT( // `_<Int__INT`(#sizeWordStack(WS),N)
			eval22,
			varN,
			config, -1)
		if err21 != nil {
			return m.NoResult, err21
		}
		if (m.IsTrue(eval20) /* && */ /* rhs precomputed isInt(N) */ ) &&
		   (!(m.IsTrue(eval21))) {
			// RHS
			traceRuleApply("FUNC", 11, "{| rule #padToWidth(N,WS)=>WS requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`notBool_`(`_<Int__INT`(#sizeWordStack(WS),N))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6df4583b9e398db655b751b09b41aaa6be6eb250dbdf976ff32f984a9653cb01) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return varWS, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashpadToWidth", args: []m.K{c1, c2}}
}

func evalIsNregsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #12
	// source: ? @?
	// {| rule isNregsCellOpt(`<nregs>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnregsXgt && len(kapp0.List) == 1 { // `<nregs>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 12, "{| rule isNregsCellOpt(`<nregs>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #13
	// source: ? @?
	// {| rule isNregsCellOpt(#KToken(#token("NregsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNregsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 13, "{| rule isNregsCellOpt(#KToken(#token(\"NregsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #14
	// source: ? @?
	// {| rule isNregsCellOpt(#KToken(#token("NregsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNregsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 14, "{| rule isNregsCellOpt(#KToken(#token(\"NregsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #15
	// source: ? @?
	// {| rule isNregsCellOpt(noNregsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoNregsCell && len(kapp0.List) == 0 { // noNregsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 15, "{| rule isNregsCellOpt(noNregsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #16
	// source: ? @?
	// {| rule isNregsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 16, "{| rule isNregsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFuncIDCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #17
	// source: ? @?
	// {| rule isFuncIdCellOpt(#KToken(#token("FuncIdCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 17, "{| rule isFuncIdCellOpt(#KToken(#token(\"FuncIdCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #18
	// source: ? @?
	// {| rule isFuncIdCellOpt(noFuncIdCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFuncIDCell && len(kapp0.List) == 0 { // noFuncIdCell(.KList)
		// RHS
		traceRuleApply("FUNC", 18, "{| rule isFuncIdCellOpt(noFuncIdCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #19
	// source: ? @?
	// {| rule isFuncIdCellOpt(`<funcId>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDXgt && len(kapp0.List) == 1 { // `<funcId>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval23, err23 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err23 != nil {
			return m.NoResult, err23
		}
		if m.IsTrue(eval23) {
			// RHS
			traceRuleApply("FUNC", 19, "{| rule isFuncIdCellOpt(`<funcId>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #20
	// source: ? @?
	// {| rule isFuncIdCellOpt(#KToken(#token("FuncIdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 20, "{| rule isFuncIdCellOpt(#KToken(#token(\"FuncIdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #21
	// source: ? @?
	// {| rule isFuncIdCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 21, "{| rule isFuncIdCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIntSize(c m.K, config m.K, guard int) (m.K, error) {
	// rule #22
	// source: data.k @150
	// {| rule intSize(_9)=>#token("1","Int") requires `_==Int_`(_9,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(7f05b22f385c8d08a4263442eece455422f0b7ca6e29d5ae8d0c3a9330753430) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,25)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu9, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval24, err24 := evalXuXeqXeqIntXu( // `_==Int_`(_9,#token("0","Int"))
			varXu9,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err24 != nil {
			return m.NoResult, err24
		}
		if m.IsTrue(eval24) {
			// RHS
			traceRuleApply("FUNC", 22, "{| rule intSize(_9)=>#token(\"1\",\"Int\") requires `_==Int_`(_9,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f05b22f385c8d08a4263442eece455422f0b7ca6e29d5ae8d0c3a9330753430) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,25)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #23
	// source: data.k @151
	// {| rule intSize(N)=>intSize(`~Int__INT`(N)) requires `_andBool_`(isInt(N),`_<Int__INT`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(9ae2da105d6b8b761ddd430403e2ed6afa754efc1ca59974489dbbc7b02ef047) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval25, err25 := evalXuXltIntXuXuINT( // `_<Int__INT`(N,#token("0","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err25 != nil {
			return m.NoResult, err25
		}
		if /* rhs precomputed isInt(N) */ /* && */
		   m.IsTrue(eval25) {
			// RHS
			traceRuleApply("FUNC", 23, "{| rule intSize(N)=>intSize(`~Int__INT`(N)) requires `_andBool_`(isInt(N),`_<Int__INT`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9ae2da105d6b8b761ddd430403e2ed6afa754efc1ca59974489dbbc7b02ef047) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval27, err27 := evalXtildeIntXuXuINT( // `~Int__INT`(N)
				varN,
				config, -1)
			if err27 != nil {
				return m.NoResult, err27
			}
			eval26, err26 := evalIntSize( // intSize(`~Int__INT`(N))
				eval27,
				config, -1)
			if err26 != nil {
				return m.NoResult, err26
			}
			return eval26, nil
		}
	}

	// rule #24
	// source: data.k @149
	// {| rule intSize(N)=>ceilDiv(`_+Int_`(log2Int(N),#token("2","Int")),#token("64","Int")) requires `_andBool_`(isInt(N),`_>Int__INT`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(8759f325d03eb6e2902c8dbb7556e56cd88d796f0c27d2e69bbe639d39490141) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval28, err28 := evalXuXgtIntXuXuINT( // `_>Int__INT`(N,#token("0","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err28 != nil {
			return m.NoResult, err28
		}
		if /* rhs precomputed isInt(N) */ /* && */
		   m.IsTrue(eval28) {
			// RHS
			traceRuleApply("FUNC", 24, "{| rule intSize(N)=>ceilDiv(`_+Int_`(log2Int(N),#token(\"2\",\"Int\")),#token(\"64\",\"Int\")) requires `_andBool_`(isInt(N),`_>Int__INT`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8759f325d03eb6e2902c8dbb7556e56cd88d796f0c27d2e69bbe639d39490141) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval31, err31 := evalLog2Int( // log2Int(N)
				varN,
				config, -1)
			if err31 != nil {
				return m.NoResult, err31
			}
			eval30, err30 := evalXuXplusIntXu( // `_+Int_`(log2Int(N),#token("2","Int"))
				eval31,
				/* rhs KToken */ m.NewIntFromString("2"),
				config, -1)
			if err30 != nil {
				return m.NoResult, err30
			}
			eval29, err29 := evalCeilDiv( // ceilDiv(`_+Int_`(log2Int(N),#token("2","Int")),#token("64","Int"))
				eval30,
				/* rhs KToken */ m.NewIntFromString("64"),
				config, -1)
			if err29 != nil {
				return m.NoResult, err29
			}
			return eval29, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIntSize", args: []m.K{c}}
}

func evalIsAssignInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #25
	// source: ? @?
	// {| rule isAssignInst(#KToken(#token("AssignInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAssignInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 25, "{| rule isAssignInst(#KToken(#token(\"AssignInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #26
	// source: ? @?
	// {| rule isAssignInst(`_=__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval32, err32 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err32 != nil {
			return m.NoResult, err32
		}
		eval33, err33 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err33 != nil {
			return m.NoResult, err33
		}
		if (m.IsTrue(eval32)) &&
		   (m.IsTrue(eval33)) {
			// RHS
			traceRuleApply("FUNC", 26, "{| rule isAssignInst(`_=__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #27
	// source: ? @?
	// {| rule isAssignInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 27, "{| rule isAssignInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsArray(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: ARRAY.Array
	if arr, t := c.(*m.Array); t && arr.Sort == m.SortArray {
		return m.BoolTrue, nil
	}
	// rule #28
	// source: ? @?
	// {| rule isArray(#KToken(#token("Array","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortArray { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 28, "{| rule isArray(#KToken(#token(\"Array\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #29
	// source: ? @?
	// {| rule isArray(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 29, "{| rule isArray(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXltXeqSetXuXuSET(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.inclusion
	lbl := m.LblXuXltXeqSetXuXuSET // _<=Set__SET
	sort := m.SortBool
	if hookRes, hookErr := setHooks.inclusion(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.inclusion, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXeqSetXuXuSET", args: []m.K{c1, c2}}
}

func evalIsTxGasPriceCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #30
	// source: ? @?
	// {| rule isTxGasPriceCellOpt(#KToken(#token("TxGasPriceCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasPriceCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 30, "{| rule isTxGasPriceCellOpt(#KToken(#token(\"TxGasPriceCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #31
	// source: ? @?
	// {| rule isTxGasPriceCellOpt(noTxGasPriceCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTxGasPriceCell && len(kapp0.List) == 0 { // noTxGasPriceCell(.KList)
		// RHS
		traceRuleApply("FUNC", 31, "{| rule isTxGasPriceCellOpt(noTxGasPriceCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #32
	// source: ? @?
	// {| rule isTxGasPriceCellOpt(`<txGasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasPriceXgt && len(kapp0.List) == 1 { // `<txGasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 32, "{| rule isTxGasPriceCellOpt(`<txGasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #33
	// source: ? @?
	// {| rule isTxGasPriceCellOpt(#KToken(#token("TxGasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 33, "{| rule isTxGasPriceCellOpt(#KToken(#token(\"TxGasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #34
	// source: ? @?
	// {| rule isTxGasPriceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 34, "{| rule isTxGasPriceCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsIOError(c m.K, config m.K, guard int) (m.K, error) {
	// rule #35
	// source: ? @?
	// {| rule isIOError(#unknownIOError(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashunknownIOError && len(kapp0.List) == 1 { // #unknownIOError(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 35, "{| rule isIOError(#unknownIOError(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #36
	// source: ? @?
	// {| rule isIOError(`#ETOOMANYREFS_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashETOOMANYREFSXuKXhyphenIO && len(kapp0.List) == 0 { // `#ETOOMANYREFS_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 36, "{| rule isIOError(`#ETOOMANYREFS_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #37
	// source: ? @?
	// {| rule isIOError(`#EOPNOTSUPP_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEOPNOTSUPPXuKXhyphenIO && len(kapp0.List) == 0 { // `#EOPNOTSUPP_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 37, "{| rule isIOError(`#EOPNOTSUPP_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #38
	// source: ? @?
	// {| rule isIOError(`#ENOBUFS_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOBUFSXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOBUFS_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 38, "{| rule isIOError(`#ENOBUFS_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #39
	// source: ? @?
	// {| rule isIOError(`#ENOTCONN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOTCONNXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOTCONN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 39, "{| rule isIOError(`#ENOTCONN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #40
	// source: ? @?
	// {| rule isIOError(`#ESHUTDOWN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashESHUTDOWNXuKXhyphenIO && len(kapp0.List) == 0 { // `#ESHUTDOWN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 40, "{| rule isIOError(`#ESHUTDOWN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #41
	// source: ? @?
	// {| rule isIOError(`#EBUSY_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEBUSYXuKXhyphenIO && len(kapp0.List) == 0 { // `#EBUSY_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 41, "{| rule isIOError(`#EBUSY_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #42
	// source: ? @?
	// {| rule isIOError(#KToken(#token("IOError","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIOError { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 42, "{| rule isIOError(#KToken(#token(\"IOError\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #43
	// source: ? @?
	// {| rule isIOError(`#EPROTONOSUPPORT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEPROTONOSUPPORTXuKXhyphenIO && len(kapp0.List) == 0 { // `#EPROTONOSUPPORT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 43, "{| rule isIOError(`#EPROTONOSUPPORT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #44
	// source: ? @?
	// {| rule isIOError(`#ENOSPC_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOSPCXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOSPC_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 44, "{| rule isIOError(`#ENOSPC_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #45
	// source: ? @?
	// {| rule isIOError(`#ERANGE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashERANGEXuKXhyphenIO && len(kapp0.List) == 0 { // `#ERANGE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 45, "{| rule isIOError(`#ERANGE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #46
	// source: ? @?
	// {| rule isIOError(`#EWOULDBLOCK_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEWOULDBLOCKXuKXhyphenIO && len(kapp0.List) == 0 { // `#EWOULDBLOCK_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 46, "{| rule isIOError(`#EWOULDBLOCK_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #47
	// source: ? @?
	// {| rule isIOError(`#EBADF_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEBADFXuKXhyphenIO && len(kapp0.List) == 0 { // `#EBADF_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 47, "{| rule isIOError(`#EBADF_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #48
	// source: ? @?
	// {| rule isIOError(`#EDEADLK_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEDEADLKXuKXhyphenIO && len(kapp0.List) == 0 { // `#EDEADLK_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 48, "{| rule isIOError(`#EDEADLK_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #49
	// source: ? @?
	// {| rule isIOError(`#ESOCKTNOSUPPORT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashESOCKTNOSUPPORTXuKXhyphenIO && len(kapp0.List) == 0 { // `#ESOCKTNOSUPPORT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 49, "{| rule isIOError(`#ESOCKTNOSUPPORT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #50
	// source: ? @?
	// {| rule isIOError(`#ENOPROTOOPT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOPROTOOPTXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOPROTOOPT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 50, "{| rule isIOError(`#ENOPROTOOPT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #51
	// source: ? @?
	// {| rule isIOError(`#EINPROGRESS_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEINPROGRESSXuKXhyphenIO && len(kapp0.List) == 0 { // `#EINPROGRESS_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 51, "{| rule isIOError(`#EINPROGRESS_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #52
	// source: ? @?
	// {| rule isIOError(`#EMSGSIZE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEMSGSIZEXuKXhyphenIO && len(kapp0.List) == 0 { // `#EMSGSIZE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 52, "{| rule isIOError(`#EMSGSIZE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #53
	// source: ? @?
	// {| rule isIOError(`#EHOSTDOWN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEHOSTDOWNXuKXhyphenIO && len(kapp0.List) == 0 { // `#EHOSTDOWN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 53, "{| rule isIOError(`#EHOSTDOWN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #54
	// source: ? @?
	// {| rule isIOError(`#EDESTADDRREQ_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEDESTADDRREQXuKXhyphenIO && len(kapp0.List) == 0 { // `#EDESTADDRREQ_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 54, "{| rule isIOError(`#EDESTADDRREQ_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #55
	// source: ? @?
	// {| rule isIOError(`#EACCES_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEACCESXuKXhyphenIO && len(kapp0.List) == 0 { // `#EACCES_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 55, "{| rule isIOError(`#EACCES_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #56
	// source: ? @?
	// {| rule isIOError(`#ESRCH_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashESRCHXuKXhyphenIO && len(kapp0.List) == 0 { // `#ESRCH_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 56, "{| rule isIOError(`#ESRCH_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #57
	// source: ? @?
	// {| rule isIOError(`#EPERM_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEPERMXuKXhyphenIO && len(kapp0.List) == 0 { // `#EPERM_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 57, "{| rule isIOError(`#EPERM_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #58
	// source: ? @?
	// {| rule isIOError(`#ENETRESET_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENETRESETXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENETRESET_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 58, "{| rule isIOError(`#ENETRESET_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #59
	// source: ? @?
	// {| rule isIOError(`#EPIPE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEPIPEXuKXhyphenIO && len(kapp0.List) == 0 { // `#EPIPE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 59, "{| rule isIOError(`#EPIPE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #60
	// source: ? @?
	// {| rule isIOError(`#ENFILE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENFILEXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENFILE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 60, "{| rule isIOError(`#ENFILE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #61
	// source: ? @?
	// {| rule isIOError(`#ELOOP_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashELOOPXuKXhyphenIO && len(kapp0.List) == 0 { // `#ELOOP_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 61, "{| rule isIOError(`#ELOOP_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #62
	// source: ? @?
	// {| rule isIOError(`#ENOSYS_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOSYSXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOSYS_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 62, "{| rule isIOError(`#ENOSYS_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #63
	// source: ? @?
	// {| rule isIOError(`#noparse_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashnoparseXuKXhyphenIO && len(kapp0.List) == 0 { // `#noparse_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 63, "{| rule isIOError(`#noparse_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #64
	// source: ? @?
	// {| rule isIOError(`#ENAMETOOLONG_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENAMETOOLONGXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENAMETOOLONG_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 64, "{| rule isIOError(`#ENAMETOOLONG_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #65
	// source: ? @?
	// {| rule isIOError(`#EAFNOSUPPORT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEAFNOSUPPORTXuKXhyphenIO && len(kapp0.List) == 0 { // `#EAFNOSUPPORT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 65, "{| rule isIOError(`#EAFNOSUPPORT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #66
	// source: ? @?
	// {| rule isIOError(`#EPFNOSUPPORT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEPFNOSUPPORTXuKXhyphenIO && len(kapp0.List) == 0 { // `#EPFNOSUPPORT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 66, "{| rule isIOError(`#EPFNOSUPPORT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #67
	// source: ? @?
	// {| rule isIOError(`#EISCONN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEISCONNXuKXhyphenIO && len(kapp0.List) == 0 { // `#EISCONN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 67, "{| rule isIOError(`#EISCONN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #68
	// source: ? @?
	// {| rule isIOError(`#EDOM_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEDOMXuKXhyphenIO && len(kapp0.List) == 0 { // `#EDOM_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 68, "{| rule isIOError(`#EDOM_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #69
	// source: ? @?
	// {| rule isIOError(`#ESPIPE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashESPIPEXuKXhyphenIO && len(kapp0.List) == 0 { // `#ESPIPE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 69, "{| rule isIOError(`#ESPIPE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #70
	// source: ? @?
	// {| rule isIOError(`#EAGAIN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEAGAINXuKXhyphenIO && len(kapp0.List) == 0 { // `#EAGAIN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 70, "{| rule isIOError(`#EAGAIN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #71
	// source: ? @?
	// {| rule isIOError(`#ENETDOWN_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENETDOWNXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENETDOWN_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 71, "{| rule isIOError(`#ENETDOWN_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #72
	// source: ? @?
	// {| rule isIOError(`#EIO_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEIOXuKXhyphenIO && len(kapp0.List) == 0 { // `#EIO_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 72, "{| rule isIOError(`#EIO_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #73
	// source: ? @?
	// {| rule isIOError(`#EPROTOTYPE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEPROTOTYPEXuKXhyphenIO && len(kapp0.List) == 0 { // `#EPROTOTYPE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 73, "{| rule isIOError(`#EPROTOTYPE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #74
	// source: ? @?
	// {| rule isIOError(`#EHOSTUNREACH_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEHOSTUNREACHXuKXhyphenIO && len(kapp0.List) == 0 { // `#EHOSTUNREACH_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 74, "{| rule isIOError(`#EHOSTUNREACH_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #75
	// source: ? @?
	// {| rule isIOError(`#EOF_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEOFXuKXhyphenIO && len(kapp0.List) == 0 { // `#EOF_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 75, "{| rule isIOError(`#EOF_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #76
	// source: ? @?
	// {| rule isIOError(`#EINVAL_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEINVALXuKXhyphenIO && len(kapp0.List) == 0 { // `#EINVAL_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 76, "{| rule isIOError(`#EINVAL_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #77
	// source: ? @?
	// {| rule isIOError(`#EISDIR_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEISDIRXuKXhyphenIO && len(kapp0.List) == 0 { // `#EISDIR_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 77, "{| rule isIOError(`#EISDIR_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #78
	// source: ? @?
	// {| rule isIOError(`#ENOENT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOENTXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOENT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 78, "{| rule isIOError(`#ENOENT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #79
	// source: ? @?
	// {| rule isIOError(`#EALREADY_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEALREADYXuKXhyphenIO && len(kapp0.List) == 0 { // `#EALREADY_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 79, "{| rule isIOError(`#EALREADY_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #80
	// source: ? @?
	// {| rule isIOError(`#ECONNRESET_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashECONNRESETXuKXhyphenIO && len(kapp0.List) == 0 { // `#ECONNRESET_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 80, "{| rule isIOError(`#ECONNRESET_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #81
	// source: ? @?
	// {| rule isIOError(`#ENXIO_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENXIOXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENXIO_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 81, "{| rule isIOError(`#ENXIO_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #82
	// source: ? @?
	// {| rule isIOError(`#ENOTTY_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOTTYXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOTTY_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 82, "{| rule isIOError(`#ENOTTY_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #83
	// source: ? @?
	// {| rule isIOError(`#EINTR_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEINTRXuKXhyphenIO && len(kapp0.List) == 0 { // `#EINTR_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 83, "{| rule isIOError(`#EINTR_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #84
	// source: ? @?
	// {| rule isIOError(`#EOVERFLOW_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEOVERFLOWXuKXhyphenIO && len(kapp0.List) == 0 { // `#EOVERFLOW_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 84, "{| rule isIOError(`#EOVERFLOW_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #85
	// source: ? @?
	// {| rule isIOError(`#EFBIG_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEFBIGXuKXhyphenIO && len(kapp0.List) == 0 { // `#EFBIG_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 85, "{| rule isIOError(`#EFBIG_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #86
	// source: ? @?
	// {| rule isIOError(`#ENOTSOCK_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOTSOCKXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOTSOCK_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 86, "{| rule isIOError(`#ENOTSOCK_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #87
	// source: ? @?
	// {| rule isIOError(`#EADDRINUSE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEADDRINUSEXuKXhyphenIO && len(kapp0.List) == 0 { // `#EADDRINUSE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 87, "{| rule isIOError(`#EADDRINUSE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #88
	// source: ? @?
	// {| rule isIOError(`#EMLINK_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEMLINKXuKXhyphenIO && len(kapp0.List) == 0 { // `#EMLINK_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 88, "{| rule isIOError(`#EMLINK_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #89
	// source: ? @?
	// {| rule isIOError(`#EROFS_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEROFSXuKXhyphenIO && len(kapp0.List) == 0 { // `#EROFS_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 89, "{| rule isIOError(`#EROFS_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #90
	// source: ? @?
	// {| rule isIOError(`#ETIMEDOUT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashETIMEDOUTXuKXhyphenIO && len(kapp0.List) == 0 { // `#ETIMEDOUT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 90, "{| rule isIOError(`#ETIMEDOUT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #91
	// source: ? @?
	// {| rule isIOError(`#ECONNABORTED_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashECONNABORTEDXuKXhyphenIO && len(kapp0.List) == 0 { // `#ECONNABORTED_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 91, "{| rule isIOError(`#ECONNABORTED_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #92
	// source: ? @?
	// {| rule isIOError(`#ENOMEM_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOMEMXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOMEM_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 92, "{| rule isIOError(`#ENOMEM_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #93
	// source: ? @?
	// {| rule isIOError(`#ENETUNREACH_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENETUNREACHXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENETUNREACH_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 93, "{| rule isIOError(`#ENETUNREACH_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #94
	// source: ? @?
	// {| rule isIOError(`#ENOEXEC_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOEXECXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOEXEC_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 94, "{| rule isIOError(`#ENOEXEC_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #95
	// source: ? @?
	// {| rule isIOError(`#ENOLCK_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOLCKXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOLCK_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 95, "{| rule isIOError(`#ENOLCK_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #96
	// source: ? @?
	// {| rule isIOError(`#EXDEV_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEXDEVXuKXhyphenIO && len(kapp0.List) == 0 { // `#EXDEV_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 96, "{| rule isIOError(`#EXDEV_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #97
	// source: ? @?
	// {| rule isIOError(`#EFAULT_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEFAULTXuKXhyphenIO && len(kapp0.List) == 0 { // `#EFAULT_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 97, "{| rule isIOError(`#EFAULT_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #98
	// source: ? @?
	// {| rule isIOError(`#E2BIG_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashE2BIGXuKXhyphenIO && len(kapp0.List) == 0 { // `#E2BIG_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 98, "{| rule isIOError(`#E2BIG_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #99
	// source: ? @?
	// {| rule isIOError(`#EADDRNOTAVAIL_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEADDRNOTAVAILXuKXhyphenIO && len(kapp0.List) == 0 { // `#EADDRNOTAVAIL_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 99, "{| rule isIOError(`#EADDRNOTAVAIL_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #100
	// source: ? @?
	// {| rule isIOError(`#ENODEV_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENODEVXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENODEV_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 100, "{| rule isIOError(`#ENODEV_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #101
	// source: ? @?
	// {| rule isIOError(`#ENOTDIR_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOTDIRXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOTDIR_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 101, "{| rule isIOError(`#ENOTDIR_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #102
	// source: ? @?
	// {| rule isIOError(`#ENOTEMPTY_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashENOTEMPTYXuKXhyphenIO && len(kapp0.List) == 0 { // `#ENOTEMPTY_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 102, "{| rule isIOError(`#ENOTEMPTY_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #103
	// source: ? @?
	// {| rule isIOError(`#EMFILE_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEMFILEXuKXhyphenIO && len(kapp0.List) == 0 { // `#EMFILE_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 103, "{| rule isIOError(`#EMFILE_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #104
	// source: ? @?
	// {| rule isIOError(`#ECHILD_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashECHILDXuKXhyphenIO && len(kapp0.List) == 0 { // `#ECHILD_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 104, "{| rule isIOError(`#ECHILD_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #105
	// source: ? @?
	// {| rule isIOError(`#EEXIST_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashEEXISTXuKXhyphenIO && len(kapp0.List) == 0 { // `#EEXIST_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 105, "{| rule isIOError(`#EEXIST_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #106
	// source: ? @?
	// {| rule isIOError(`#ECONNREFUSED_K-IO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashECONNREFUSEDXuKXhyphenIO && len(kapp0.List) == 0 { // `#ECONNREFUSED_K-IO`(.KList)
		// RHS
		traceRuleApply("FUNC", 106, "{| rule isIOError(`#ECONNREFUSED_K-IO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #107
	// source: ? @?
	// {| rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 107, "{| rule isIOError(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsDataCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #108
	// source: ? @?
	// {| rule isDataCellOpt(#KToken(#token("DataCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDataCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 108, "{| rule isDataCellOpt(#KToken(#token(\"DataCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #109
	// source: ? @?
	// {| rule isDataCellOpt(noDataCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoDataCell && len(kapp0.List) == 0 { // noDataCell(.KList)
		// RHS
		traceRuleApply("FUNC", 109, "{| rule isDataCellOpt(noDataCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #110
	// source: ? @?
	// {| rule isDataCellOpt(#KToken(#token("DataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 110, "{| rule isDataCellOpt(#KToken(#token(\"DataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #111
	// source: ? @?
	// {| rule isDataCellOpt(`<data>`(K0))=>#token("true","Bool") requires isWordStack(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdataXgt && len(kapp0.List) == 1 { // `<data>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval34, err34 := evalIsWordStack( // isWordStack(K0)
			varK0,
			config, -1)
		if err34 != nil {
			return m.NoResult, err34
		}
		if m.IsTrue(eval34) {
			// RHS
			traceRuleApply("FUNC", 111, "{| rule isDataCellOpt(`<data>`(K0))=>#token(\"true\",\"Bool\") requires isWordStack(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #112
	// source: ? @?
	// {| rule isDataCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 112, "{| rule isDataCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsOrInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #113
	// source: ? @?
	// {| rule isOrInst(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=or_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval35, err35 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err35 != nil {
			return m.NoResult, err35
		}
		eval36, err36 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err36 != nil {
			return m.NoResult, err36
		}
		eval37, err37 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err37 != nil {
			return m.NoResult, err37
		}
		if ((m.IsTrue(eval35)) &&
		   (m.IsTrue(eval36))) &&
		   (m.IsTrue(eval37)) {
			// RHS
			traceRuleApply("FUNC", 113, "{| rule isOrInst(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #114
	// source: ? @?
	// {| rule isOrInst(#KToken(#token("OrInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOrInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 114, "{| rule isOrInst(#KToken(#token(\"OrInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #115
	// source: ? @?
	// {| rule isOrInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 115, "{| rule isOrInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMakeList(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.make
	lbl := m.LblMakeList // makeList
	sort := m.SortList
	if hookRes, hookErr := listHooks.make(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.make, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMakeList", args: []m.K{c1, c2}}
}

func evalXhashisValidLoad(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #116
	// source: iele-binary.k @196
	// {| rule #isValidLoad(WS,SIZE)=>`_>=Int__INT`(SIZE,`_+Int_`(#loadLen(WS),#loadOffset(WS))) requires `_andBool_`(isWordStack(WS),isInt(SIZE)) ensures #token("true","Bool") [UNIQUE_ID(0703c8ff77f9636bb53e287491ea0818871520baf9883e33d89eb12d2401e249) contentStartColumn(10) contentStartLine(196) org.kframework.attributes.Location(Location(196,10,196,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c1 // lhs KVariable WS
		if varSIZE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval38, err38 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err38 != nil {
				return m.NoResult, err38
			}
			if m.IsTrue(eval38) /* && */ /* rhs precomputed isInt(SIZE) */  {
				// RHS
				traceRuleApply("FUNC", 116, "{| rule #isValidLoad(WS,SIZE)=>`_>=Int__INT`(SIZE,`_+Int_`(#loadLen(WS),#loadOffset(WS))) requires `_andBool_`(isWordStack(WS),isInt(SIZE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0703c8ff77f9636bb53e287491ea0818871520baf9883e33d89eb12d2401e249) contentStartColumn(10) contentStartLine(196) org.kframework.attributes.Location(Location(196,10,196,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval41, err41 := evalXhashloadLen( // #loadLen(WS)
					varWS,
					config, -1)
				if err41 != nil {
					return m.NoResult, err41
				}
				eval42, err42 := evalXhashloadOffset( // #loadOffset(WS)
					varWS,
					config, -1)
				if err42 != nil {
					return m.NoResult, err42
				}
				eval40, err40 := evalXuXplusIntXu( // `_+Int_`(#loadLen(WS),#loadOffset(WS))
					eval41,
					eval42,
					config, -1)
				if err40 != nil {
					return m.NoResult, err40
				}
				eval39, err39 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(SIZE,`_+Int_`(#loadLen(WS),#loadOffset(WS)))
					varSIZE,
					eval40,
					config, -1)
				if err39 != nil {
					return m.NoResult, err39
				}
				return eval39, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidLoad", args: []m.K{c1, c2}}
}

func evalIsLabeledBlocks(c m.K, config m.K, guard int) (m.K, error) {
	// rule #117
	// source: ? @?
	// {| rule isLabeledBlocks(labeledBlockList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLabeledBlock(K0),isLabeledBlocks(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLabeledBlockList && len(kapp0.List) == 2 { // labeledBlockList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval43, err43 := evalIsLabeledBlock( // isLabeledBlock(K0)
			varK0,
			config, -1)
		if err43 != nil {
			return m.NoResult, err43
		}
		eval44, err44 := evalIsLabeledBlocks( // isLabeledBlocks(K1)
			varK1,
			config, -1)
		if err44 != nil {
			return m.NoResult, err44
		}
		if (m.IsTrue(eval43)) &&
		   (m.IsTrue(eval44)) {
			// RHS
			traceRuleApply("FUNC", 117, "{| rule isLabeledBlocks(labeledBlockList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLabeledBlock(K0),isLabeledBlocks(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #118
	// source: ? @?
	// {| rule isLabeledBlocks(`.List{"labeledBlockList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 118, "{| rule isLabeledBlocks(`.List{\"labeledBlockList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #119
	// source: ? @?
	// {| rule isLabeledBlocks(#KToken(#token("LabeledBlocks","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabeledBlocks { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 119, "{| rule isLabeledBlocks(#KToken(#token(\"LabeledBlocks\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #120
	// source: ? @?
	// {| rule isLabeledBlocks(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 120, "{| rule isLabeledBlocks(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsMulModInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #121
	// source: ? @?
	// {| rule isMulModInst(#KToken(#token("MulModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMulModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 121, "{| rule isMulModInst(#KToken(#token(\"MulModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #122
	// source: ? @?
	// {| rule isMulModInst(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval45, err45 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err45 != nil {
			return m.NoResult, err45
		}
		eval46, err46 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err46 != nil {
			return m.NoResult, err46
		}
		eval47, err47 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err47 != nil {
			return m.NoResult, err47
		}
		eval48, err48 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err48 != nil {
			return m.NoResult, err48
		}
		if (((m.IsTrue(eval45)) &&
		   (m.IsTrue(eval46))) &&
		   (m.IsTrue(eval47))) &&
		   (m.IsTrue(eval48)) {
			// RHS
			traceRuleApply("FUNC", 122, "{| rule isMulModInst(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #123
	// source: ? @?
	// {| rule isMulModInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 123, "{| rule isMulModInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCurrentInstructionsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #124
	// source: ? @?
	// {| rule isCurrentInstructionsCellOpt(#KToken(#token("CurrentInstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 124, "{| rule isCurrentInstructionsCellOpt(#KToken(#token(\"CurrentInstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #125
	// source: ? @?
	// {| rule isCurrentInstructionsCellOpt(`<currentInstructions>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentInstructionsXgt && len(kapp0.List) == 1 { // `<currentInstructions>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 125, "{| rule isCurrentInstructionsCellOpt(`<currentInstructions>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #126
	// source: ? @?
	// {| rule isCurrentInstructionsCellOpt(noCurrentInstructionsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCurrentInstructionsCell && len(kapp0.List) == 0 { // noCurrentInstructionsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 126, "{| rule isCurrentInstructionsCellOpt(noCurrentInstructionsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #127
	// source: ? @?
	// {| rule isCurrentInstructionsCellOpt(#KToken(#token("CurrentInstructionsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentInstructionsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 127, "{| rule isCurrentInstructionsCellOpt(#KToken(#token(\"CurrentInstructionsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #128
	// source: ? @?
	// {| rule isCurrentInstructionsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 128, "{| rule isCurrentInstructionsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdasmContract(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #129
	// source: iele-binary.k @134
	// {| rule #dasmContract(`.WordStack_IELE-DATA`(.KList),_545)=>contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)) requires isIeleName(_545) ensures #token("true","Bool") [UNIQUE_ID(efc34e9a3aa949707f9d357e4e66b4736f8f7f33ae465c8d588b48e51f3059ba) contentStartColumn(10) contentStartLine(134) org.kframework.attributes.Location(Location(134,10,134,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		varXu545 := c2 // lhs KVariable _545
		// REQUIRES
		eval49, err49 := evalIsIeleName( // isIeleName(_545)
			varXu545,
			config, -1)
		if err49 != nil {
			return m.NoResult, err49
		}
		if m.IsTrue(eval49) {
			// RHS
			traceRuleApply("FUNC", 129, "{| rule #dasmContract(`.WordStack_IELE-DATA`(.KList),_545)=>contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),#token(\"0\",\"Int\"),#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),#token(\"0\",\"Int\")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList)) requires isIeleName(_545) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(efc34e9a3aa949707f9d357e4e66b4736f8f7f33ae465c8d588b48e51f3059ba) contentStartColumn(10) contentStartLine(134) org.kframework.attributes.Location(Location(134,10,134,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return &m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
				&m.KApply{Label: m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, List: []m.K{ // as-is contract_!__{_}_IELE-CONFIGURATION
					/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.Wallet"},
					/* rhs KToken */ m.NewIntFromString("0"),
					/* rhs KToken */ m.NewString(""),
					&m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
						&m.KApply{Label: m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is definepublic_{_}_IELE-COMMON
							&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
								}},
								/* rhs KToken */ m.NewIntFromString("0"),
							}},
							&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
								&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
									&m.KApply{Label: m.LblRetXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ret__IELE-COMMON
										&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
										}},
									}},
									&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
									}},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
								}},
							}},
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
						}},
					}},
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
				}},
			}}, nil
		}
	}

	// rule #130
	// source: iele-binary.k @135
	// {| rule #dasmContract(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS))))),NAME)=>#dasmContractAux1(`_:__IELE-DATA`(#token("99","Int"),#take(`_-Int__INT`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),#token("1","Int")),WS)),NAME,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_98,#token("99","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0946dd7cc7b4cb0ba1adb02aa9e38752d2329252ad8fd298c087690bad6915e1) contentStartColumn(10) contentStartLine(135) org.kframework.attributes.Location(Location(135,10,135,201)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS)))))
		if varW1, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS))))
				if varW2, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS)))
						if varW3, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS))
								if varW4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(_98,WS)
										if varXu98, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											varNAME := c2 // lhs KVariable NAME
											// REQUIRES
											eval50, err50 := evalIsWordStack( // isWordStack(WS)
												varWS,
												config, -1)
											if err50 != nil {
												return m.NoResult, err50
											}
											eval51, err51 := evalIsIeleName( // isIeleName(NAME)
												varNAME,
												config, -1)
											if err51 != nil {
												return m.NoResult, err51
											}
											eval52, err52 := evalXuXeqXeqIntXu( // `_==Int_`(_98,#token("99","Int"))
												varXu98,
												/* rhs KToken */ m.NewIntFromString("99"),
												config, -1)
											if err52 != nil {
												return m.NoResult, err52
											}
											if ((/* rhs precomputed isInt(W4) */ /* && */
											   m.IsTrue(eval50)) &&
											   (m.IsTrue(eval51)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
											   (m.IsTrue(eval52)) {
												// RHS
												traceRuleApply("FUNC", 130, "{| rule #dasmContract(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_98,WS))))),NAME)=>#dasmContractAux1(`_:__IELE-DATA`(#token(\"99\",\"Int\"),#take(`_-Int__INT`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token(\"16777216\",\"Int\")),`_*Int__INT`(W2,#token(\"65536\",\"Int\"))),`_*Int__INT`(W3,#token(\"256\",\"Int\"))),W4),#token(\"1\",\"Int\")),WS)),NAME,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_98,#token(\"99\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0946dd7cc7b4cb0ba1adb02aa9e38752d2329252ad8fd298c087690bad6915e1) contentStartColumn(10) contentStartLine(135) org.kframework.attributes.Location(Location(135,10,135,201)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
												eval59, err59 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("16777216","Int"))
													varW1,
													/* rhs KToken */ m.NewIntFromString("16777216"),
													config, -1)
												if err59 != nil {
													return m.NoResult, err59
												}
												eval60, err60 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W2,#token("65536","Int"))
													varW2,
													/* rhs KToken */ m.NewIntFromString("65536"),
													config, -1)
												if err60 != nil {
													return m.NoResult, err60
												}
												eval58, err58 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int")))
													eval59,
													eval60,
													config, -1)
												if err58 != nil {
													return m.NoResult, err58
												}
												eval61, err61 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
													varW3,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err61 != nil {
													return m.NoResult, err61
												}
												eval57, err57 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int")))
													eval58,
													eval61,
													config, -1)
												if err57 != nil {
													return m.NoResult, err57
												}
												eval56, err56 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4)
													eval57,
													varW4,
													config, -1)
												if err56 != nil {
													return m.NoResult, err56
												}
												eval55, err55 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),#token("1","Int"))
													eval56,
													/* rhs KToken */ m.NewIntFromString("1"),
													config, -1)
												if err55 != nil {
													return m.NoResult, err55
												}
												eval54, err54 := evalXhashtake( // #take(`_-Int__INT`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),#token("1","Int")),WS)
													eval55,
													varWS,
													config, -1)
												if err54 != nil {
													return m.NoResult, err54
												}
												eval53, err53 := evalXhashdasmContractAux1( // #dasmContractAux1(`_:__IELE-DATA`(#token("99","Int"),#take(`_-Int__INT`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),#token("1","Int")),WS)),NAME,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList))))))
													&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
														/* rhs KToken */ m.NewIntFromString("99"),
														eval54,
													}},
													varNAME,
													&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
														varW1,
														&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
															varW2,
															&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																varW3,
																&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																	varW4,
																	&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
																	}},
																}},
															}},
														}},
													}},
													config, -1)
												if err53 != nil {
													return m.NoResult, err53
												}
												return eval53, nil
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmContract", args: []m.K{c1, c2}}
}

func evalXhashunlockXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.unlock
	lbl := m.LblXhashunlockXlparenXuXcommaXuXrparenXuKXhyphenIO // #unlock(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.unlock(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.unlock, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashunlockXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalIsActiveAccountsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #131
	// source: ? @?
	// {| rule isActiveAccountsCellOpt(#KToken(#token("ActiveAccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortActiveAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 131, "{| rule isActiveAccountsCellOpt(#KToken(#token(\"ActiveAccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #132
	// source: ? @?
	// {| rule isActiveAccountsCellOpt(noActiveAccountsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoActiveAccountsCell && len(kapp0.List) == 0 { // noActiveAccountsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 132, "{| rule isActiveAccountsCellOpt(noActiveAccountsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #133
	// source: ? @?
	// {| rule isActiveAccountsCellOpt(#KToken(#token("ActiveAccountsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortActiveAccountsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 133, "{| rule isActiveAccountsCellOpt(#KToken(#token(\"ActiveAccountsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #134
	// source: ? @?
	// {| rule isActiveAccountsCellOpt(`<activeAccounts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltactiveAccountsXgt && len(kapp0.List) == 1 { // `<activeAccounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 134, "{| rule isActiveAccountsCellOpt(`<activeAccounts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #135
	// source: ? @?
	// {| rule isActiveAccountsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 135, "{| rule isActiveAccountsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNonceCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #136
	// source: ? @?
	// {| rule isNonceCellOpt(noNonceCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoNonceCell && len(kapp0.List) == 0 { // noNonceCell(.KList)
		// RHS
		traceRuleApply("FUNC", 136, "{| rule isNonceCellOpt(noNonceCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #137
	// source: ? @?
	// {| rule isNonceCellOpt(#KToken(#token("NonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 137, "{| rule isNonceCellOpt(#KToken(#token(\"NonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #138
	// source: ? @?
	// {| rule isNonceCellOpt(`<nonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnonceXgt && len(kapp0.List) == 1 { // `<nonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 138, "{| rule isNonceCellOpt(`<nonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #139
	// source: ? @?
	// {| rule isNonceCellOpt(#KToken(#token("NonceCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonceCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 139, "{| rule isNonceCellOpt(#KToken(#token(\"NonceCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #140
	// source: ? @?
	// {| rule isNonceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 140, "{| rule isNonceCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashparseMap(c m.K, config m.K, guard int) (m.K, error) {
	// rule #141
	// source: data.k @461
	// {| rule #parseMap(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(_26,VALUE),REST)))=>#parseMap(`{_}_IELE-DATA`(REST)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(VALUE),isJSONKey(_26)),isJSONList(REST)),`_==K_`(#parseHexWord(VALUE),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(764ca5c06e7a724c2850b60b25474e4ee9723044125531c7b2e18b2316e5ac79) contentStartColumn(10) contentStartLine(461) org.kframework.attributes.Location(Location(461,10,461,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXrbracketXuIELEXhyphenDATA && len(kapp0.List) == 1 { // `{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(_26,VALUE),REST))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXuXcommaXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_,__IELE-DATA`(`_:__IELE-DATA`(_26,VALUE),REST)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(_26,VALUE)
				varXu26 := kapp2.List[0] // lhs KVariable _26
				if varVALUE, t := kapp2.List[1].(*m.String); t { // lhs KVariable with hook:STRING.String
					varREST := kapp1.List[1] // lhs KVariable REST
					// REQUIRES
					eval62, err62 := evalIsJSONKey( // isJSONKey(_26)
						varXu26,
						config, -1)
					if err62 != nil {
						return m.NoResult, err62
					}
					eval63, err63 := evalIsJSONList( // isJSONList(REST)
						varREST,
						config, -1)
					if err63 != nil {
						return m.NoResult, err63
					}
					eval65, err65 := evalXhashparseHexWord( // #parseHexWord(VALUE)
						varVALUE,
						config, -1)
					if err65 != nil {
						return m.NoResult, err65
					}
					eval64, err64 := evalXuXeqXeqKXu( // `_==K_`(#parseHexWord(VALUE),#token("0","Int"))
						eval65,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err64 != nil {
						return m.NoResult, err64
					}
					if ((/* rhs precomputed isString(VALUE) */ /* && */
					   m.IsTrue(eval62)) &&
					   (m.IsTrue(eval63))) &&
					   (m.IsTrue(eval64)) {
						// RHS
						traceRuleApply("FUNC", 141, "{| rule #parseMap(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(_26,VALUE),REST)))=>#parseMap(`{_}_IELE-DATA`(REST)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(VALUE),isJSONKey(_26)),isJSONList(REST)),`_==K_`(#parseHexWord(VALUE),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(764ca5c06e7a724c2850b60b25474e4ee9723044125531c7b2e18b2316e5ac79) contentStartColumn(10) contentStartLine(461) org.kframework.attributes.Location(Location(461,10,461,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval66, err66 := evalXhashparseMap( // #parseMap(`{_}_IELE-DATA`(REST))
							&m.KApply{Label: m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, List: []m.K{ // as-is {_}_IELE-DATA
								varREST,
							}},
							config, -1)
						if err66 != nil {
							return m.NoResult, err66
						}
						return eval66, nil
					}
				}
			}
		}
	}

	// rule #142
	// source: data.k @462
	// {| rule #parseMap(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST)))=>`_[_<-_]_MAP`(#parseMap(`{_}_IELE-DATA`(REST)),#parseHexWord(KEY),#parseHexWord(VALUE)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(VALUE),isJSONList(REST)),isString(KEY)),`_=/=K_`(#parseHexWord(VALUE),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6893c7ba38907d57ec9e5d0051a6ea3d98b7d8de0eb3f3994d316d6f21496f29) contentStartColumn(10) contentStartLine(462) org.kframework.attributes.Location(Location(462,10,462,161)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXrbracketXuIELEXhyphenDATA && len(kapp0.List) == 1 { // `{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXuXcommaXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(KEY,VALUE)
				if varKEY, t := kapp2.List[0].(*m.String); t { // lhs KVariable with hook:STRING.String
					if varVALUE, t := kapp2.List[1].(*m.String); t { // lhs KVariable with hook:STRING.String
						varREST := kapp1.List[1] // lhs KVariable REST
						// REQUIRES
						eval67, err67 := evalIsJSONList( // isJSONList(REST)
							varREST,
							config, -1)
						if err67 != nil {
							return m.NoResult, err67
						}
						eval69, err69 := evalXhashparseHexWord( // #parseHexWord(VALUE)
							varVALUE,
							config, -1)
						if err69 != nil {
							return m.NoResult, err69
						}
						eval68, err68 := evalXuXeqXslashXeqKXu( // `_=/=K_`(#parseHexWord(VALUE),#token("0","Int"))
							eval69,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err68 != nil {
							return m.NoResult, err68
						}
						if (/* rhs precomputed isString(VALUE) */ /* && */
						   m.IsTrue(eval67) /* && */ /* rhs precomputed isString(KEY) */ ) &&
						   (m.IsTrue(eval68)) {
							// RHS
							traceRuleApply("FUNC", 142, "{| rule #parseMap(`{_}_IELE-DATA`(`_,__IELE-DATA`(`_:__IELE-DATA`(KEY,VALUE),REST)))=>`_[_<-_]_MAP`(#parseMap(`{_}_IELE-DATA`(REST)),#parseHexWord(KEY),#parseHexWord(VALUE)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(VALUE),isJSONList(REST)),isString(KEY)),`_=/=K_`(#parseHexWord(VALUE),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6893c7ba38907d57ec9e5d0051a6ea3d98b7d8de0eb3f3994d316d6f21496f29) contentStartColumn(10) contentStartLine(462) org.kframework.attributes.Location(Location(462,10,462,161)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
							eval71, err71 := evalXhashparseMap( // #parseMap(`{_}_IELE-DATA`(REST))
								&m.KApply{Label: m.LblXlbracketXuXrbracketXuIELEXhyphenDATA, List: []m.K{ // as-is {_}_IELE-DATA
									varREST,
								}},
								config, -1)
							if err71 != nil {
								return m.NoResult, err71
							}
							eval72, err72 := evalXhashparseHexWord( // #parseHexWord(KEY)
								varKEY,
								config, -1)
							if err72 != nil {
								return m.NoResult, err72
							}
							eval73, err73 := evalXhashparseHexWord( // #parseHexWord(VALUE)
								varVALUE,
								config, -1)
							if err73 != nil {
								return m.NoResult, err73
							}
							eval70, err70 := evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP( // `_[_<-_]_MAP`(#parseMap(`{_}_IELE-DATA`(REST)),#parseHexWord(KEY),#parseHexWord(VALUE))
								eval71,
								eval72,
								eval73,
								config, -1)
							if err70 != nil {
								return m.NoResult, err70
							}
							return eval70, nil
						}
					}
				}
			}
		}
	}

	// rule #143
	// source: data.k @460
	// {| rule #parseMap(`{_}_IELE-DATA`(`.List{"_,__IELE-DATA"}`(.KList)))=>`.Map`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bc80a77bb719dab6b6d6195722aa4b1a8f38a74cdb29c8f22ec3e7b910c3bac7) contentStartColumn(10) contentStartLine(460) org.kframework.attributes.Location(Location(460,10,460,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXrbracketXuIELEXhyphenDATA && len(kapp0.List) == 1 { // `{_}_IELE-DATA`(`.List{"_,__IELE-DATA"}`(.KList))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket && len(kapp1.List) == 0 { // `.List{"_,__IELE-DATA"}`(.KList)
			// RHS
			traceRuleApply("FUNC", 143, "{| rule #parseMap(`{_}_IELE-DATA`(`.List{\"_,__IELE-DATA\"}`(.KList)))=>`.Map`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc80a77bb719dab6b6d6195722aa4b1a8f38a74cdb29c8f22ec3e7b910c3bac7) contentStartColumn(10) contentStartLine(460) org.kframework.attributes.Location(Location(460,10,460,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval74, err74 := evalXdotMap(config, -1) // `.Map`(.KList)
			if err74 != nil {
				return m.NoResult, err74
			}
			return eval74, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseMap", args: []m.K{c}}
}

func evalIsCurrentMemoryCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #144
	// source: ? @?
	// {| rule isCurrentMemoryCellOpt(#KToken(#token("CurrentMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 144, "{| rule isCurrentMemoryCellOpt(#KToken(#token(\"CurrentMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #145
	// source: ? @?
	// {| rule isCurrentMemoryCellOpt(#KToken(#token("CurrentMemoryCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentMemoryCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 145, "{| rule isCurrentMemoryCellOpt(#KToken(#token(\"CurrentMemoryCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #146
	// source: ? @?
	// {| rule isCurrentMemoryCellOpt(noCurrentMemoryCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCurrentMemoryCell && len(kapp0.List) == 0 { // noCurrentMemoryCell(.KList)
		// RHS
		traceRuleApply("FUNC", 146, "{| rule isCurrentMemoryCellOpt(noCurrentMemoryCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #147
	// source: ? @?
	// {| rule isCurrentMemoryCellOpt(`<currentMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentMemoryXgt && len(kapp0.List) == 1 { // `<currentMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 147, "{| rule isCurrentMemoryCellOpt(`<currentMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #148
	// source: ? @?
	// {| rule isCurrentMemoryCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 148, "{| rule isCurrentMemoryCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashecrec(c m.K, config m.K, guard int) (m.K, error) {
	// rule #149
	// source: iele.k @1641
	// {| rule #ecrec(N)=>operandList(N,`.List{"operandList"}`(.KList)) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(38f482cc3220f11c86602a98f4b3de9de51bb3c11dd59485b34949910a018c2e) contentStartColumn(10) contentStartLine(1641) org.kframework.attributes.Location(Location(1641,10,1641,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 149, "{| rule #ecrec(N)=>operandList(N,`.List{\"operandList\"}`(.KList)) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(38f482cc3220f11c86602a98f4b3de9de51bb3c11dd59485b34949910a018c2e) contentStartColumn(10) contentStartLine(1641) org.kframework.attributes.Location(Location(1641,10,1641,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
			varN,
			&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
			}},
		}}, nil
	}

	// rule #150
	// source: iele.k @1640
	// {| rule #ecrec(`.Account_IELE-DATA`(.KList))=>operandList(#token("-1","Int"),`.List{"operandList"}`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(18b7472246506f54dc73d67206d4015a043b97eb1552629aab9e6e485a6bc335) contentStartColumn(10) contentStartLine(1640) org.kframework.attributes.Location(Location(1640,10,1640,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotAccountXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.Account_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 150, "{| rule #ecrec(`.Account_IELE-DATA`(.KList))=>operandList(#token(\"-1\",\"Int\"),`.List{\"operandList\"}`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18b7472246506f54dc73d67206d4015a043b97eb1552629aab9e6e485a6bc335) contentStartColumn(10) contentStartLine(1640) org.kframework.attributes.Location(Location(1640,10,1640,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
			/* rhs KToken */ m.NewIntFromString("-1"),
			&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
			}},
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashecrec", args: []m.K{c}}
}

func evalIsLocalCallInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #151
	// source: ? @?
	// {| rule isLocalCallInst(#KToken(#token("LocalCallInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 151, "{| rule isLocalCallInst(#KToken(#token(\"LocalCallInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #152
	// source: ? @?
	// {| rule isLocalCallInst(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperands(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval75, err75 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err75 != nil {
			return m.NoResult, err75
		}
		eval76, err76 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err76 != nil {
			return m.NoResult, err76
		}
		eval77, err77 := evalIsOperands( // isOperands(K2)
			varK2,
			config, -1)
		if err77 != nil {
			return m.NoResult, err77
		}
		if ((m.IsTrue(eval75)) &&
		   (m.IsTrue(eval76))) &&
		   (m.IsTrue(eval77)) {
			// RHS
			traceRuleApply("FUNC", 152, "{| rule isLocalCallInst(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperands(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #153
	// source: ? @?
	// {| rule isLocalCallInst(`call_(_)_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `call_(_)_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval78, err78 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err78 != nil {
			return m.NoResult, err78
		}
		eval79, err79 := evalIsOperands( // isOperands(K1)
			varK1,
			config, -1)
		if err79 != nil {
			return m.NoResult, err79
		}
		if (m.IsTrue(eval78)) &&
		   (m.IsTrue(eval79)) {
			// RHS
			traceRuleApply("FUNC", 153, "{| rule isLocalCallInst(`call_(_)_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #154
	// source: ? @?
	// {| rule isLocalCallInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 154, "{| rule isLocalCallInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsContractDeclaration(c m.K, config m.K, guard int) (m.K, error) {
	// rule #155
	// source: ? @?
	// {| rule isContractDeclaration(#KToken(#token("ContractDeclaration","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractDeclaration { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 155, "{| rule isContractDeclaration(#KToken(#token(\"ContractDeclaration\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #156
	// source: ? @?
	// {| rule isContractDeclaration(`externalcontract__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblExternalcontractXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `externalcontract__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval80, err80 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err80 != nil {
			return m.NoResult, err80
		}
		if m.IsTrue(eval80) {
			// RHS
			traceRuleApply("FUNC", 156, "{| rule isContractDeclaration(`externalcontract__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #157
	// source: ? @?
	// {| rule isContractDeclaration(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 157, "{| rule isContractDeclaration(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNumberCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #158
	// source: ? @?
	// {| rule isNumberCell(`<number>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnumberXgt && len(kapp0.List) == 1 { // `<number>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 158, "{| rule isNumberCell(`<number>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #159
	// source: ? @?
	// {| rule isNumberCell(#KToken(#token("NumberCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumberCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 159, "{| rule isNumberCell(#KToken(#token(\"NumberCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #160
	// source: ? @?
	// {| rule isNumberCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 160, "{| rule isNumberCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLabelsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #161
	// source: ? @?
	// {| rule isLabelsCellOpt(#KToken(#token("LabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 161, "{| rule isLabelsCellOpt(#KToken(#token(\"LabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #162
	// source: ? @?
	// {| rule isLabelsCellOpt(noLabelsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoLabelsCell && len(kapp0.List) == 0 { // noLabelsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 162, "{| rule isLabelsCellOpt(noLabelsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #163
	// source: ? @?
	// {| rule isLabelsCellOpt(`<labels>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlabelsXgt && len(kapp0.List) == 1 { // `<labels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 163, "{| rule isLabelsCellOpt(`<labels>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #164
	// source: ? @?
	// {| rule isLabelsCellOpt(#KToken(#token("LabelsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabelsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 164, "{| rule isLabelsCellOpt(#KToken(#token(\"LabelsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #165
	// source: ? @?
	// {| rule isLabelsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 165, "{| rule isLabelsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsInstructionsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #166
	// source: ? @?
	// {| rule isInstructionsCellOpt(noInstructionsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoInstructionsCell && len(kapp0.List) == 0 { // noInstructionsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 166, "{| rule isInstructionsCellOpt(noInstructionsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #167
	// source: ? @?
	// {| rule isInstructionsCellOpt(#KToken(#token("InstructionsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructionsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 167, "{| rule isInstructionsCellOpt(#KToken(#token(\"InstructionsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #168
	// source: ? @?
	// {| rule isInstructionsCellOpt(#KToken(#token("InstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 168, "{| rule isInstructionsCellOpt(#KToken(#token(\"InstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #169
	// source: ? @?
	// {| rule isInstructionsCellOpt(`<instructions>`(K0))=>#token("true","Bool") requires isBlocks(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinstructionsXgt && len(kapp0.List) == 1 { // `<instructions>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval81, err81 := evalIsBlocks( // isBlocks(K0)
			varK0,
			config, -1)
		if err81 != nil {
			return m.NoResult, err81
		}
		if m.IsTrue(eval81) {
			// RHS
			traceRuleApply("FUNC", 169, "{| rule isInstructionsCellOpt(`<instructions>`(K0))=>#token(\"true\",\"Bool\") requires isBlocks(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #170
	// source: ? @?
	// {| rule isInstructionsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 170, "{| rule isInstructionsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashloadLen(c m.K, config m.K, guard int) (m.K, error) {
	// rule #171
	// source: data.k @545
	// {| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>#asUnsigned(#take(`_-Int__INT`(B0,#token("183","Int")),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("184","Int")),`_<Int__INT`(B0,#token("192","Int")))) ensures #token("true","Bool") [UNIQUE_ID(7b6cda1914e6a4b65bb58fc9fe378a0e198e979e29bd431e3985eaf443369ba9) contentStartColumn(10) contentStartLine(545) org.kframework.attributes.Location(Location(545,10,545,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval82, err82 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err82 != nil {
				return m.NoResult, err82
			}
			eval83, err83 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("184","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("184"),
				config, -1)
			if err83 != nil {
				return m.NoResult, err83
			}
			eval84, err84 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("192","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err84 != nil {
				return m.NoResult, err84
			}
			if (m.IsTrue(eval82) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval83)) &&
			   (m.IsTrue(eval84))) {
				// RHS
				traceRuleApply("FUNC", 171, "{| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>#asUnsigned(#take(`_-Int__INT`(B0,#token(\"183\",\"Int\")),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"184\",\"Int\")),`_<Int__INT`(B0,#token(\"192\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b6cda1914e6a4b65bb58fc9fe378a0e198e979e29bd431e3985eaf443369ba9) contentStartColumn(10) contentStartLine(545) org.kframework.attributes.Location(Location(545,10,545,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval87, err87 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("183","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("183"),
					config, -1)
				if err87 != nil {
					return m.NoResult, err87
				}
				eval86, err86 := evalXhashtake( // #take(`_-Int__INT`(B0,#token("183","Int")),WS)
					eval87,
					varWS,
					config, -1)
				if err86 != nil {
					return m.NoResult, err86
				}
				eval85, err85 := evalXhashasUnsigned( // #asUnsigned(#take(`_-Int__INT`(B0,#token("183","Int")),WS))
					eval86,
					config, -1)
				if err85 != nil {
					return m.NoResult, err85
				}
				return eval85, nil
			}
		}
	}

	// rule #172
	// source: data.k @544
	// {| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>`_-Int__INT`(B0,#token("128","Int")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("128","Int")),`_<Int__INT`(B0,#token("184","Int")))) ensures #token("true","Bool") [UNIQUE_ID(6a8c4497dd475badb2b40765faff3106e61df8e60eee7e734e7c2e5fd3431f29) contentStartColumn(10) contentStartLine(544) org.kframework.attributes.Location(Location(544,10,544,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval88, err88 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err88 != nil {
				return m.NoResult, err88
			}
			eval89, err89 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("128","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("128"),
				config, -1)
			if err89 != nil {
				return m.NoResult, err89
			}
			eval90, err90 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("184","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("184"),
				config, -1)
			if err90 != nil {
				return m.NoResult, err90
			}
			if (m.IsTrue(eval88) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval89)) &&
			   (m.IsTrue(eval90))) {
				// RHS
				traceRuleApply("FUNC", 172, "{| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>`_-Int__INT`(B0,#token(\"128\",\"Int\")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"128\",\"Int\")),`_<Int__INT`(B0,#token(\"184\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6a8c4497dd475badb2b40765faff3106e61df8e60eee7e734e7c2e5fd3431f29) contentStartColumn(10) contentStartLine(544) org.kframework.attributes.Location(Location(544,10,544,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval91, err91 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("128","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("128"),
					config, -1)
				if err91 != nil {
					return m.NoResult, err91
				}
				return eval91, nil
			}
		}
	}

	// rule #173
	// source: data.k @543
	// {| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>#token("1","Int") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_orBool__BOOL`(`_<Int__INT`(B0,#token("128","Int")),`_>=Int__INT`(B0,#token("192","Int")))) ensures #token("true","Bool") [UNIQUE_ID(24af372df15366e2a3d3dbc72ba214a07cb799911a818b457a2a8e3310b924ec) contentStartColumn(10) contentStartLine(543) org.kframework.attributes.Location(Location(543,10,543,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval92, err92 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err92 != nil {
				return m.NoResult, err92
			}
			eval93, err93 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("128","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("128"),
				config, -1)
			if err93 != nil {
				return m.NoResult, err93
			}
			eval94, err94 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("192","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err94 != nil {
				return m.NoResult, err94
			}
			if (m.IsTrue(eval92) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval93)) || (m.IsTrue(eval94))) {
				// RHS
				traceRuleApply("FUNC", 173, "{| rule #loadLen(`_:__IELE-DATA`(B0,WS))=>#token(\"1\",\"Int\") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_orBool__BOOL`(`_<Int__INT`(B0,#token(\"128\",\"Int\")),`_>=Int__INT`(B0,#token(\"192\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(24af372df15366e2a3d3dbc72ba214a07cb799911a818b457a2a8e3310b924ec) contentStartColumn(10) contentStartLine(543) org.kframework.attributes.Location(Location(543,10,543,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return /* rhs KToken */ m.NewIntFromString("1"), nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadLen", args: []m.K{c}}
}

func evalIsOutputCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #174
	// source: ? @?
	// {| rule isOutputCellOpt(`<output>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoutputXgt && len(kapp0.List) == 1 { // `<output>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval95, err95 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err95 != nil {
			return m.NoResult, err95
		}
		if m.IsTrue(eval95) {
			// RHS
			traceRuleApply("FUNC", 174, "{| rule isOutputCellOpt(`<output>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #175
	// source: ? @?
	// {| rule isOutputCellOpt(noOutputCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoOutputCell && len(kapp0.List) == 0 { // noOutputCell(.KList)
		// RHS
		traceRuleApply("FUNC", 175, "{| rule isOutputCellOpt(noOutputCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #176
	// source: ? @?
	// {| rule isOutputCellOpt(#KToken(#token("OutputCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOutputCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 176, "{| rule isOutputCellOpt(#KToken(#token(\"OutputCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #177
	// source: ? @?
	// {| rule isOutputCellOpt(#KToken(#token("OutputCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOutputCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 177, "{| rule isOutputCellOpt(#KToken(#token(\"OutputCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #178
	// source: ? @?
	// {| rule isOutputCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 178, "{| rule isOutputCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCexpmod(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, config m.K, guard int) (m.K, error) {
	// rule #179
	// source: iele-gas.k @877
	// {| rule `Cexpmod`(SCHED,LB,LEX,LM,EX)=>`_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEX),isInt(EX)),isSchedule(SCHED)),isInt(LM)),isInt(LB)),`_<=Int__INT`(LB,LM)) ensures #token("true","Bool") [UNIQUE_ID(fcde220a9c760c775976bc4f3d029ce9153ff2ae9916e1afcb704cc2e6ede6a3) contentStartColumn(10) contentStartLine(877) org.kframework.attributes.Location(Location(877,10,882,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varLB, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varLM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varEX, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval96, err96 := evalIsSchedule( // isSchedule(SCHED)
							varSCHED,
							config, -1)
						if err96 != nil {
							return m.NoResult, err96
						}
						eval97, err97 := evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(LB,LM)
							varLB,
							varLM,
							config, -1)
						if err97 != nil {
							return m.NoResult, err97
						}
						if (/* rhs precomputed isInt(LEX) && isInt(EX) */ /* && */
						   m.IsTrue(eval96) /* && */ /* rhs precomputed isInt(LM) */  /* && */ /* rhs precomputed isInt(LB) */ ) &&
						   (m.IsTrue(eval97)) {
							// RHS
							traceRuleApply("FUNC", 179, "{| rule `Cexpmod`(SCHED,LB,LEX,LM,EX)=>`_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token(\"10\",\"Int\")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEX),isInt(EX)),isSchedule(SCHED)),isInt(LM)),isInt(LB)),`_<=Int__INT`(LB,LM)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fcde220a9c760c775976bc4f3d029ce9153ff2ae9916e1afcb704cc2e6ede6a3) contentStartColumn(10) contentStartLine(877) org.kframework.attributes.Location(Location(877,10,882,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
							eval104, err104 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodkara_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err104 != nil {
								return m.NoResult, err104
							}
							eval105, err105 := evalXhashoverApproxKara( // #overApproxKara(LM)
								varLM,
								config, -1)
							if err105 != nil {
								return m.NoResult, err105
							}
							eval103, err103 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM))
								eval104,
								eval105,
								config, -1)
							if err103 != nil {
								return m.NoResult, err103
							}
							eval106, err106 := evalXhashadjustedBitLength( // #adjustedBitLength(LEX,EX)
								varLEX,
								varEX,
								config, -1)
							if err106 != nil {
								return m.NoResult, err106
							}
							eval102, err102 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX))
								eval103,
								eval106,
								config, -1)
							if err102 != nil {
								return m.NoResult, err102
							}
							eval101, err101 := evalCeilDiv( // ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int"))
								eval102,
								/* rhs KToken */ m.NewIntFromString("10"),
								config, -1)
							if err101 != nil {
								return m.NoResult, err101
							}
							eval108, err108 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodmodXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodmod_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err108 != nil {
								return m.NoResult, err108
							}
							eval107, err107 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)
								eval108,
								varLM,
								config, -1)
							if err107 != nil {
								return m.NoResult, err107
							}
							eval100, err100 := evalXuXplusIntXu( // `_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM))
								eval101,
								eval107,
								config, -1)
							if err100 != nil {
								return m.NoResult, err100
							}
							eval110, err110 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodexpXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodexp_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err110 != nil {
								return m.NoResult, err110
							}
							eval111, err111 := evalXhashadjustedBitLength( // #adjustedBitLength(LEX,EX)
								varLEX,
								varEX,
								config, -1)
							if err111 != nil {
								return m.NoResult, err111
							}
							eval109, err109 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))
								eval110,
								eval111,
								config, -1)
							if err109 != nil {
								return m.NoResult, err109
							}
							eval99, err99 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX)))
								eval100,
								eval109,
								config, -1)
							if err99 != nil {
								return m.NoResult, err99
							}
							eval112, err112 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmod_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err112 != nil {
								return m.NoResult, err112
							}
							eval98, err98 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED))
								eval99,
								eval112,
								config, -1)
							if err98 != nil {
								return m.NoResult, err98
							}
							return eval98, nil
						}
					}
				}
			}
		}
	}

	// rule #180
	// source: iele-gas.k @884
	// {| rule `Cexpmod`(SCHED,LB,LEX,LM,EX)=>`_+Int_`(`_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`Cdiv`(SCHED,LB,LM)),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEX),isInt(EX)),isSchedule(SCHED)),isInt(LM)),isInt(LB)) ensures #token("true","Bool") [UNIQUE_ID(d5640433a5f27073038745930ff2b6cb2a68f73f7a69f7ce8545100cfcecf287) contentStartColumn(10) contentStartLine(884) org.kframework.attributes.Location(Location(884,10,889,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varLB, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varLM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varEX, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval113, err113 := evalIsSchedule( // isSchedule(SCHED)
							varSCHED,
							config, -1)
						if err113 != nil {
							return m.NoResult, err113
						}
						if /* rhs precomputed isInt(LEX) && isInt(EX) */ /* && */
						   m.IsTrue(eval113) /* && */ /* rhs precomputed isInt(LM) */  /* && */ /* rhs precomputed isInt(LB) */  {
							// RHS
							traceRuleApply("FUNC", 180, "{| rule `Cexpmod`(SCHED,LB,LEX,LM,EX)=>`_+Int_`(`_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token(\"10\",\"Int\")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`Cdiv`(SCHED,LB,LM)),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEX),isInt(EX)),isSchedule(SCHED)),isInt(LM)),isInt(LB)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5640433a5f27073038745930ff2b6cb2a68f73f7a69f7ce8545100cfcecf287) contentStartColumn(10) contentStartLine(884) org.kframework.attributes.Location(Location(884,10,889,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
							eval121, err121 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodkara_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err121 != nil {
								return m.NoResult, err121
							}
							eval122, err122 := evalXhashoverApproxKara( // #overApproxKara(LM)
								varLM,
								config, -1)
							if err122 != nil {
								return m.NoResult, err122
							}
							eval120, err120 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM))
								eval121,
								eval122,
								config, -1)
							if err120 != nil {
								return m.NoResult, err120
							}
							eval123, err123 := evalXhashadjustedBitLength( // #adjustedBitLength(LEX,EX)
								varLEX,
								varEX,
								config, -1)
							if err123 != nil {
								return m.NoResult, err123
							}
							eval119, err119 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX))
								eval120,
								eval123,
								config, -1)
							if err119 != nil {
								return m.NoResult, err119
							}
							eval118, err118 := evalCeilDiv( // ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int"))
								eval119,
								/* rhs KToken */ m.NewIntFromString("10"),
								config, -1)
							if err118 != nil {
								return m.NoResult, err118
							}
							eval125, err125 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodmodXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodmod_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err125 != nil {
								return m.NoResult, err125
							}
							eval124, err124 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)
								eval125,
								varLM,
								config, -1)
							if err124 != nil {
								return m.NoResult, err124
							}
							eval117, err117 := evalXuXplusIntXu( // `_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM))
								eval118,
								eval124,
								config, -1)
							if err117 != nil {
								return m.NoResult, err117
							}
							eval127, err127 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodexpXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmodexp_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err127 != nil {
								return m.NoResult, err127
							}
							eval128, err128 := evalXhashadjustedBitLength( // #adjustedBitLength(LEX,EX)
								varLEX,
								varEX,
								config, -1)
							if err128 != nil {
								return m.NoResult, err128
							}
							eval126, err126 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))
								eval127,
								eval128,
								config, -1)
							if err126 != nil {
								return m.NoResult, err126
							}
							eval116, err116 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX)))
								eval117,
								eval126,
								config, -1)
							if err116 != nil {
								return m.NoResult, err116
							}
							eval129, err129 := evalCdiv( // `Cdiv`(SCHED,LB,LM)
								varSCHED,
								varLB,
								varLM,
								config, -1)
							if err129 != nil {
								return m.NoResult, err129
							}
							eval115, err115 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`Cdiv`(SCHED,LB,LM))
								eval116,
								eval129,
								config, -1)
							if err115 != nil {
								return m.NoResult, err115
							}
							eval130, err130 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGexpmodXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpmod_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err130 != nil {
								return m.NoResult, err130
							}
							eval114, err114 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(`_+Int_`(ceilDiv(`_*Int__INT`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),SCHED),#overApproxKara(LM)),#adjustedBitLength(LEX,EX)),#token("10","Int")),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),SCHED),LM)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),SCHED),#adjustedBitLength(LEX,EX))),`Cdiv`(SCHED,LB,LM)),`_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),SCHED))
								eval115,
								eval130,
								config, -1)
							if err114 != nil {
								return m.NoResult, err114
							}
							return eval114, nil
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCexpmod", args: []m.K{c1, c2, c3, c4, c5}}
}

func evalProjectXcolonMode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #181
	// source: ? @?
	// {| rule `project:Mode`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d1dc064198bc5d1039fa4757892e5b565dc5da72d777d6e7635063bae4a77bdf) projection()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varK := c // lhs KVariable K
		// RHS
		traceRuleApply("FUNC", 181, "{| rule `project:Mode`(K)=>K requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d1dc064198bc5d1039fa4757892e5b565dc5da72d777d6e7635063bae4a77bdf) projection()] |}")
		return varK, nil
	}

}

func evalIsFunctionParameters(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #182
	// source: ? @?
	// {| rule isFunctionParameters(localNameList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLocalName(K0),isLocalNames(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLocalNameList && len(kapp0.List) == 2 { // localNameList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval131, err131 := evalIsLocalName( // isLocalName(K0)
			varK0,
			config, -1)
		if err131 != nil {
			return m.NoResult, err131
		}
		eval132, err132 := evalIsLocalNames( // isLocalNames(K1)
			varK1,
			config, -1)
		if err132 != nil {
			return m.NoResult, err132
		}
		if (m.IsTrue(eval131)) &&
		   (m.IsTrue(eval132)) {
			// RHS
			traceRuleApply("FUNC", 182, "{| rule isFunctionParameters(localNameList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLocalName(K0),isLocalNames(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #183
	// source: ? @?
	// {| rule isFunctionParameters(`.List{"localNameList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelocalNameListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"localNameList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 183, "{| rule isFunctionParameters(`.List{\"localNameList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #184
	// source: ? @?
	// {| rule isFunctionParameters(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 184, "{| rule isFunctionParameters(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #185
	// source: ? @?
	// {| rule isFunctionParameters(#KToken(#token("LocalNames","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalNames { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 185, "{| rule isFunctionParameters(#KToken(#token(\"LocalNames\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #186
	// source: ? @?
	// {| rule isFunctionParameters(#KToken(#token("FunctionParameters","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionParameters { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 186, "{| rule isFunctionParameters(#KToken(#token(\"FunctionParameters\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #187
	// source: ? @?
	// {| rule isFunctionParameters(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 187, "{| rule isFunctionParameters(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #188
	// source: ? @?
	// {| rule isFunctionParameters(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 188, "{| rule isFunctionParameters(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #189
	// source: ? @?
	// {| rule isFunctionParameters(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 189, "{| rule isFunctionParameters(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #190
	// source: ? @?
	// {| rule isFunctionParameters(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 190, "{| rule isFunctionParameters(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #191
	// source: ? @?
	// {| rule isFunctionParameters(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 191, "{| rule isFunctionParameters(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #192
	// source: ? @?
	// {| rule isFunctionParameters(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 192, "{| rule isFunctionParameters(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #193
	// source: ? @?
	// {| rule isFunctionParameters(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 193, "{| rule isFunctionParameters(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #194
	// source: ? @?
	// {| rule isFunctionParameters(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 194, "{| rule isFunctionParameters(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #195
	// source: ? @?
	// {| rule isFunctionParameters(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 195, "{| rule isFunctionParameters(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #196
	// source: ? @?
	// {| rule isFunctionParameters(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 196, "{| rule isFunctionParameters(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashcomputeNRegs(c m.K, config m.K, guard int) (m.K, error) {
	// rule #197
	// source: iele.k @1814
	// {| rule #computeNRegs(BLOCKS)=>#computeNRegsAux(BLOCKS,#token("0","Int")) requires isBlocks(BLOCKS) ensures #token("true","Bool") [UNIQUE_ID(bedfcc23c6688f11bb7285fde8fd71c3e9230afb32e848ed2fb2b3ce9d9d9161) contentStartColumn(10) contentStartLine(1814) org.kframework.attributes.Location(Location(1814,10,1814,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varBLOCKS := c // lhs KVariable BLOCKS
		// REQUIRES
		eval133, err133 := evalIsBlocks( // isBlocks(BLOCKS)
			varBLOCKS,
			config, -1)
		if err133 != nil {
			return m.NoResult, err133
		}
		if m.IsTrue(eval133) {
			// RHS
			traceRuleApply("FUNC", 197, "{| rule #computeNRegs(BLOCKS)=>#computeNRegsAux(BLOCKS,#token(\"0\",\"Int\")) requires isBlocks(BLOCKS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bedfcc23c6688f11bb7285fde8fd71c3e9230afb32e848ed2fb2b3ce9d9d9161) contentStartColumn(10) contentStartLine(1814) org.kframework.attributes.Location(Location(1814,10,1814,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval134, err134 := evalXhashcomputeNRegsAux( // #computeNRegsAux(BLOCKS,#token("0","Int"))
				varBLOCKS,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err134 != nil {
				return m.NoResult, err134
			}
			return eval134, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcomputeNRegs", args: []m.K{c}}
}

func evalTopLevelAppend(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #198
	// source: iele-binary.k @165
	// {| rule topLevelAppend(`.List{"topLevelDefinitionList"}`(.KList),Ds)=>Ds requires isTopLevelDefinitions(Ds) ensures #token("true","Bool") [UNIQUE_ID(b3e7919904c1817f4ecece826c6d2278c58073ca01798944cec8f9f515edf9d1) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"topLevelDefinitionList"}`(.KList)
		varDs := c2 // lhs KVariable Ds
		// REQUIRES
		eval135, err135 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(Ds)
			varDs,
			config, -1)
		if err135 != nil {
			return m.NoResult, err135
		}
		if m.IsTrue(eval135) {
			// RHS
			traceRuleApply("FUNC", 198, "{| rule topLevelAppend(`.List{\"topLevelDefinitionList\"}`(.KList),Ds)=>Ds requires isTopLevelDefinitions(Ds) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b3e7919904c1817f4ecece826c6d2278c58073ca01798944cec8f9f515edf9d1) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varDs, nil
		}
	}

	// rule #199
	// source: iele-binary.k @166
	// {| rule topLevelAppend(topLevelDefinitionList(D,Ds),Ds')=>topLevelDefinitionList(D,topLevelAppend(Ds,Ds')) requires `_andBool_`(`_andBool_`(isTopLevelDefinitions(Ds'),isTopLevelDefinition(D)),isTopLevelDefinitions(Ds)) ensures #token("true","Bool") [UNIQUE_ID(5d6f31d14fc9ea1a2b4ed13cb7c0a7b00faef8a55063f94664ebd3fb0c3140b7) contentStartColumn(10) contentStartLine(166) org.kframework.attributes.Location(Location(166,10,166,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(D,Ds)
		varD := kapp0.List[0] // lhs KVariable D
		varDs := kapp0.List[1] // lhs KVariable Ds
		varDsXapos := c2 // lhs KVariable Ds'
		// REQUIRES
		eval136, err136 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(Ds')
			varDsXapos,
			config, -1)
		if err136 != nil {
			return m.NoResult, err136
		}
		eval137, err137 := evalIsTopLevelDefinition( // isTopLevelDefinition(D)
			varD,
			config, -1)
		if err137 != nil {
			return m.NoResult, err137
		}
		eval138, err138 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(Ds)
			varDs,
			config, -1)
		if err138 != nil {
			return m.NoResult, err138
		}
		if ((m.IsTrue(eval136)) &&
		   (m.IsTrue(eval137))) &&
		   (m.IsTrue(eval138)) {
			// RHS
			traceRuleApply("FUNC", 199, "{| rule topLevelAppend(topLevelDefinitionList(D,Ds),Ds')=>topLevelDefinitionList(D,topLevelAppend(Ds,Ds')) requires `_andBool_`(`_andBool_`(isTopLevelDefinitions(Ds'),isTopLevelDefinition(D)),isTopLevelDefinitions(Ds)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d6f31d14fc9ea1a2b4ed13cb7c0a7b00faef8a55063f94664ebd3fb0c3140b7) contentStartColumn(10) contentStartLine(166) org.kframework.attributes.Location(Location(166,10,166,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval139, err139 := evalTopLevelAppend( // topLevelAppend(Ds,Ds')
				varDs,
				varDsXapos,
				config, -1)
			if err139 != nil {
				return m.NoResult, err139
			}
			return &m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
				varD,
				eval139,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalTopLevelAppend", args: []m.K{c1, c2}}
}

func evalIsCurrentContractCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #200
	// source: ? @?
	// {| rule isCurrentContractCellFragment(#KToken(#token("CurrentContractCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentContractCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 200, "{| rule isCurrentContractCellFragment(#KToken(#token(\"CurrentContractCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #201
	// source: ? @?
	// {| rule isCurrentContractCellFragment(`<currentContract>-fragment`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCellOpt(K0),isContractNameCellOpt(K1)),isDeclaredContractsCellOpt(K2)),isFunctionBodiesCellOpt(K3)),isCurrentFunctionCellOpt(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentContractXgtXhyphenfragment && len(kapp0.List) == 5 { // `<currentContract>-fragment`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval140, err140 := evalIsTypesCellOpt( // isTypesCellOpt(K0)
			varK0,
			config, -1)
		if err140 != nil {
			return m.NoResult, err140
		}
		eval141, err141 := evalIsContractNameCellOpt( // isContractNameCellOpt(K1)
			varK1,
			config, -1)
		if err141 != nil {
			return m.NoResult, err141
		}
		eval142, err142 := evalIsDeclaredContractsCellOpt( // isDeclaredContractsCellOpt(K2)
			varK2,
			config, -1)
		if err142 != nil {
			return m.NoResult, err142
		}
		eval143, err143 := evalIsFunctionBodiesCellOpt( // isFunctionBodiesCellOpt(K3)
			varK3,
			config, -1)
		if err143 != nil {
			return m.NoResult, err143
		}
		eval144, err144 := evalIsCurrentFunctionCellOpt( // isCurrentFunctionCellOpt(K4)
			varK4,
			config, -1)
		if err144 != nil {
			return m.NoResult, err144
		}
		if ((((m.IsTrue(eval140)) &&
		   (m.IsTrue(eval141))) &&
		   (m.IsTrue(eval142))) &&
		   (m.IsTrue(eval143))) &&
		   (m.IsTrue(eval144)) {
			// RHS
			traceRuleApply("FUNC", 201, "{| rule isCurrentContractCellFragment(`<currentContract>-fragment`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCellOpt(K0),isContractNameCellOpt(K1)),isDeclaredContractsCellOpt(K2)),isFunctionBodiesCellOpt(K3)),isCurrentFunctionCellOpt(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #202
	// source: ? @?
	// {| rule isCurrentContractCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 202, "{| rule isCurrentContractCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #203
	// source: ? @?
	// {| rule isCell(`<regs>`(K0))=>#token("true","Bool") requires isArray(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltregsXgt && len(kapp0.List) == 1 { // `<regs>`(K0)
		if varK0, t := kapp0.List[0].(*m.Array); t && varK0.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES precomputed isArray(K0)
			// RHS
			traceRuleApply("FUNC", 203, "{| rule isCell(`<regs>`(K0))=>#token(\"true\",\"Bool\") requires isArray(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #204
	// source: ? @?
	// {| rule isCell(#KToken(#token("ProgramCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 204, "{| rule isCell(#KToken(#token(\"ProgramCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #205
	// source: ? @?
	// {| rule isCell(#KToken(#token("CurrentContractCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentContractCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 205, "{| rule isCell(#KToken(#token(\"CurrentContractCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #206
	// source: ? @?
	// {| rule isCell(`<txGasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasLimitXgt && len(kapp0.List) == 1 { // `<txGasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 206, "{| rule isCell(`<txGasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #207
	// source: ? @?
	// {| rule isCell(#KToken(#token("TxNonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 207, "{| rule isCell(#KToken(#token(\"TxNonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #208
	// source: ? @?
	// {| rule isCell(`<peakMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpeakMemoryXgt && len(kapp0.List) == 1 { // `<peakMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 208, "{| rule isCell(`<peakMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #209
	// source: ? @?
	// {| rule isCell(`<txNonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxNonceXgt && len(kapp0.List) == 1 { // `<txNonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 209, "{| rule isCell(`<txNonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #210
	// source: ? @?
	// {| rule isCell(`<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCell(K0),isSCell(K1)),isExitCodeCell(K2)),isModeCell(K3)),isScheduleCell(K4)),isCheckGasCell(K5)),isWellFormednessCell(K6)),isIeleCell(K7)),isNetworkCell(K8)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgeneratedTopXgt && len(kapp0.List) == 9 { // `<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		// REQUIRES
		eval145, err145 := evalIsKCell( // isKCell(K0)
			varK0,
			config, -1)
		if err145 != nil {
			return m.NoResult, err145
		}
		eval146, err146 := evalIsSCell( // isSCell(K1)
			varK1,
			config, -1)
		if err146 != nil {
			return m.NoResult, err146
		}
		eval147, err147 := evalIsExitCodeCell( // isExitCodeCell(K2)
			varK2,
			config, -1)
		if err147 != nil {
			return m.NoResult, err147
		}
		eval148, err148 := evalIsModeCell( // isModeCell(K3)
			varK3,
			config, -1)
		if err148 != nil {
			return m.NoResult, err148
		}
		eval149, err149 := evalIsScheduleCell( // isScheduleCell(K4)
			varK4,
			config, -1)
		if err149 != nil {
			return m.NoResult, err149
		}
		eval150, err150 := evalIsCheckGasCell( // isCheckGasCell(K5)
			varK5,
			config, -1)
		if err150 != nil {
			return m.NoResult, err150
		}
		eval151, err151 := evalIsWellFormednessCell( // isWellFormednessCell(K6)
			varK6,
			config, -1)
		if err151 != nil {
			return m.NoResult, err151
		}
		eval152, err152 := evalIsIeleCell( // isIeleCell(K7)
			varK7,
			config, -1)
		if err152 != nil {
			return m.NoResult, err152
		}
		eval153, err153 := evalIsNetworkCell( // isNetworkCell(K8)
			varK8,
			config, -1)
		if err153 != nil {
			return m.NoResult, err153
		}
		if ((((((((m.IsTrue(eval145)) &&
		   (m.IsTrue(eval146))) &&
		   (m.IsTrue(eval147))) &&
		   (m.IsTrue(eval148))) &&
		   (m.IsTrue(eval149))) &&
		   (m.IsTrue(eval150))) &&
		   (m.IsTrue(eval151))) &&
		   (m.IsTrue(eval152))) &&
		   (m.IsTrue(eval153)) {
			// RHS
			traceRuleApply("FUNC", 210, "{| rule isCell(`<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCell(K0),isSCell(K1)),isExitCodeCell(K2)),isModeCell(K3)),isScheduleCell(K4)),isCheckGasCell(K5)),isWellFormednessCell(K6)),isIeleCell(K7)),isNetworkCell(K8)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #211
	// source: ? @?
	// {| rule isCell(#KToken(#token("PeakMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPeakMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 211, "{| rule isCell(#KToken(#token(\"PeakMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #212
	// source: ? @?
	// {| rule isCell(`<exported>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexportedXgt && len(kapp0.List) == 1 { // `<exported>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 212, "{| rule isCell(`<exported>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #213
	// source: ? @?
	// {| rule isCell(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltieleXgt && len(kapp0.List) == 15 { // `<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval154, err154 := evalIsOutputCell( // isOutputCell(K0)
			varK0,
			config, -1)
		if err154 != nil {
			return m.NoResult, err154
		}
		eval155, err155 := evalIsCallStackCell( // isCallStackCell(K1)
			varK1,
			config, -1)
		if err155 != nil {
			return m.NoResult, err155
		}
		eval156, err156 := evalIsInterimStatesCell( // isInterimStatesCell(K2)
			varK2,
			config, -1)
		if err156 != nil {
			return m.NoResult, err156
		}
		eval157, err157 := evalIsSubstateStackCell( // isSubstateStackCell(K3)
			varK3,
			config, -1)
		if err157 != nil {
			return m.NoResult, err157
		}
		eval158, err158 := evalIsCallFrameCell( // isCallFrameCell(K4)
			varK4,
			config, -1)
		if err158 != nil {
			return m.NoResult, err158
		}
		eval159, err159 := evalIsSubstateCell( // isSubstateCell(K5)
			varK5,
			config, -1)
		if err159 != nil {
			return m.NoResult, err159
		}
		eval160, err160 := evalIsGasPriceCell( // isGasPriceCell(K6)
			varK6,
			config, -1)
		if err160 != nil {
			return m.NoResult, err160
		}
		eval161, err161 := evalIsOriginCell( // isOriginCell(K7)
			varK7,
			config, -1)
		if err161 != nil {
			return m.NoResult, err161
		}
		eval162, err162 := evalIsBeneficiaryCell( // isBeneficiaryCell(K8)
			varK8,
			config, -1)
		if err162 != nil {
			return m.NoResult, err162
		}
		eval163, err163 := evalIsDifficultyCell( // isDifficultyCell(K9)
			varK9,
			config, -1)
		if err163 != nil {
			return m.NoResult, err163
		}
		eval164, err164 := evalIsNumberCell( // isNumberCell(K10)
			varK10,
			config, -1)
		if err164 != nil {
			return m.NoResult, err164
		}
		eval165, err165 := evalIsGasLimitCell( // isGasLimitCell(K11)
			varK11,
			config, -1)
		if err165 != nil {
			return m.NoResult, err165
		}
		eval166, err166 := evalIsGasUsedCell( // isGasUsedCell(K12)
			varK12,
			config, -1)
		if err166 != nil {
			return m.NoResult, err166
		}
		eval167, err167 := evalIsTimestampCell( // isTimestampCell(K13)
			varK13,
			config, -1)
		if err167 != nil {
			return m.NoResult, err167
		}
		eval168, err168 := evalIsBlockhashCell( // isBlockhashCell(K14)
			varK14,
			config, -1)
		if err168 != nil {
			return m.NoResult, err168
		}
		if ((((((((((((((m.IsTrue(eval154)) &&
		   (m.IsTrue(eval155))) &&
		   (m.IsTrue(eval156))) &&
		   (m.IsTrue(eval157))) &&
		   (m.IsTrue(eval158))) &&
		   (m.IsTrue(eval159))) &&
		   (m.IsTrue(eval160))) &&
		   (m.IsTrue(eval161))) &&
		   (m.IsTrue(eval162))) &&
		   (m.IsTrue(eval163))) &&
		   (m.IsTrue(eval164))) &&
		   (m.IsTrue(eval165))) &&
		   (m.IsTrue(eval166))) &&
		   (m.IsTrue(eval167))) &&
		   (m.IsTrue(eval168)) {
			// RHS
			traceRuleApply("FUNC", 213, "{| rule isCell(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #214
	// source: ? @?
	// {| rule isCell(`<k>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltkXgt && len(kapp0.List) == 1 { // `<k>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 214, "{| rule isCell(`<k>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #215
	// source: ? @?
	// {| rule isCell(#KToken(#token("GasUsedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasUsedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 215, "{| rule isCell(#KToken(#token(\"GasUsedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #216
	// source: ? @?
	// {| rule isCell(#KToken(#token("RegsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRegsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 216, "{| rule isCell(#KToken(#token(\"RegsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #217
	// source: ? @?
	// {| rule isCell(`<well-formedness>`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXgt && len(kapp0.List) == 4 { // `<well-formedness>`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval169, err169 := evalIsTypeCheckingCell( // isTypeCheckingCell(K0)
			varK0,
			config, -1)
		if err169 != nil {
			return m.NoResult, err169
		}
		eval170, err170 := evalIsWellFormednessScheduleCell( // isWellFormednessScheduleCell(K1)
			varK1,
			config, -1)
		if err170 != nil {
			return m.NoResult, err170
		}
		eval171, err171 := evalIsContractsCell( // isContractsCell(K2)
			varK2,
			config, -1)
		if err171 != nil {
			return m.NoResult, err171
		}
		eval172, err172 := evalIsCurrentContractCell( // isCurrentContractCell(K3)
			varK3,
			config, -1)
		if err172 != nil {
			return m.NoResult, err172
		}
		if (((m.IsTrue(eval169)) &&
		   (m.IsTrue(eval170))) &&
		   (m.IsTrue(eval171))) &&
		   (m.IsTrue(eval172)) {
			// RHS
			traceRuleApply("FUNC", 217, "{| rule isCell(`<well-formedness>`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #218
	// source: ? @?
	// {| rule isCell(`<messages>`(K0))=>#token("true","Bool") requires isMessageCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessagesXgt && len(kapp0.List) == 1 { // `<messages>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMessageCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMessageCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 218, "{| rule isCell(`<messages>`(K0))=>#token(\"true\",\"Bool\") requires isMessageCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #219
	// source: ? @?
	// {| rule isCell(`<beneficiary>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbeneficiaryXgt && len(kapp0.List) == 1 { // `<beneficiary>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 219, "{| rule isCell(`<beneficiary>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #220
	// source: ? @?
	// {| rule isCell(`<substate>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateXgt && len(kapp0.List) == 3 { // `<substate>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval173, err173 := evalIsSelfDestructCell( // isSelfDestructCell(K0)
			varK0,
			config, -1)
		if err173 != nil {
			return m.NoResult, err173
		}
		eval174, err174 := evalIsLogDataCell( // isLogDataCell(K1)
			varK1,
			config, -1)
		if err174 != nil {
			return m.NoResult, err174
		}
		eval175, err175 := evalIsRefundCell( // isRefundCell(K2)
			varK2,
			config, -1)
		if err175 != nil {
			return m.NoResult, err175
		}
		if ((m.IsTrue(eval173)) &&
		   (m.IsTrue(eval174))) &&
		   (m.IsTrue(eval175)) {
			// RHS
			traceRuleApply("FUNC", 220, "{| rule isCell(`<substate>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #221
	// source: ? @?
	// {| rule isCell(`<id>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltidXgt && len(kapp0.List) == 1 { // `<id>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 221, "{| rule isCell(`<id>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #222
	// source: ? @?
	// {| rule isCell(#KToken(#token("AccountCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 222, "{| rule isCell(#KToken(#token(\"AccountCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #223
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 223, "{| rule isCell(#KToken(#token(\"CallValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #224
	// source: ? @?
	// {| rule isCell(`<funcId>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDXgt && len(kapp0.List) == 1 { // `<funcId>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval176, err176 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err176 != nil {
			return m.NoResult, err176
		}
		if m.IsTrue(eval176) {
			// RHS
			traceRuleApply("FUNC", 224, "{| rule isCell(`<funcId>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #225
	// source: ? @?
	// {| rule isCell(#KToken(#token("TxPendingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxPendingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 225, "{| rule isCell(#KToken(#token(\"TxPendingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #226
	// source: ? @?
	// {| rule isCell(#KToken(#token("NetworkCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNetworkCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 226, "{| rule isCell(#KToken(#token(\"NetworkCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #227
	// source: ? @?
	// {| rule isCell(#KToken(#token("KCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 227, "{| rule isCell(#KToken(#token(\"KCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #228
	// source: ? @?
	// {| rule isCell(#KToken(#token("OutputCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOutputCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 228, "{| rule isCell(#KToken(#token(\"OutputCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #229
	// source: ? @?
	// {| rule isCell(#KToken(#token("DataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 229, "{| rule isCell(#KToken(#token(\"DataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #230
	// source: ? @?
	// {| rule isCell(#KToken(#token("BalanceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBalanceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 230, "{| rule isCell(#KToken(#token(\"BalanceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #231
	// source: ? @?
	// {| rule isCell(#KToken(#token("GasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 231, "{| rule isCell(#KToken(#token(\"GasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #232
	// source: ? @?
	// {| rule isCell(#KToken(#token("TxOrderCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxOrderCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 232, "{| rule isCell(#KToken(#token(\"TxOrderCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #233
	// source: ? @?
	// {| rule isCell(`<functionBodies>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionBodiesXgt && len(kapp0.List) == 1 { // `<functionBodies>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 233, "{| rule isCell(`<functionBodies>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #234
	// source: ? @?
	// {| rule isCell(#KToken(#token("ActiveAccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortActiveAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 234, "{| rule isCell(#KToken(#token(\"ActiveAccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #235
	// source: ? @?
	// {| rule isCell(`<timestamp>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttimestampXgt && len(kapp0.List) == 1 { // `<timestamp>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 235, "{| rule isCell(`<timestamp>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #236
	// source: ? @?
	// {| rule isCell(#KToken(#token("IdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 236, "{| rule isCell(#KToken(#token(\"IdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #237
	// source: ? @?
	// {| rule isCell(#KToken(#token("ScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 237, "{| rule isCell(#KToken(#token(\"ScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #238
	// source: ? @?
	// {| rule isCell(#KToken(#token("DifficultyCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDifficultyCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 238, "{| rule isCell(#KToken(#token(\"DifficultyCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #239
	// source: ? @?
	// {| rule isCell(`<blockhash>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltblockhashXgt && len(kapp0.List) == 1 { // `<blockhash>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 239, "{| rule isCell(`<blockhash>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #240
	// source: ? @?
	// {| rule isCell(`<difficulty>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdifficultyXgt && len(kapp0.List) == 1 { // `<difficulty>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 240, "{| rule isCell(`<difficulty>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #241
	// source: ? @?
	// {| rule isCell(`<program>`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramXgt && len(kapp0.List) == 6 { // `<program>`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval177, err177 := evalIsFunctionsCell( // isFunctionsCell(K0)
			varK0,
			config, -1)
		if err177 != nil {
			return m.NoResult, err177
		}
		eval178, err178 := evalIsFuncIDsCell( // isFuncIdsCell(K1)
			varK1,
			config, -1)
		if err178 != nil {
			return m.NoResult, err178
		}
		eval179, err179 := evalIsFuncLabelsCell( // isFuncLabelsCell(K2)
			varK2,
			config, -1)
		if err179 != nil {
			return m.NoResult, err179
		}
		eval180, err180 := evalIsExportedCell( // isExportedCell(K3)
			varK3,
			config, -1)
		if err180 != nil {
			return m.NoResult, err180
		}
		eval181, err181 := evalIsProgramSizeCell( // isProgramSizeCell(K4)
			varK4,
			config, -1)
		if err181 != nil {
			return m.NoResult, err181
		}
		eval182, err182 := evalIsContractCodeCell( // isContractCodeCell(K5)
			varK5,
			config, -1)
		if err182 != nil {
			return m.NoResult, err182
		}
		if (((((m.IsTrue(eval177)) &&
		   (m.IsTrue(eval178))) &&
		   (m.IsTrue(eval179))) &&
		   (m.IsTrue(eval180))) &&
		   (m.IsTrue(eval181))) &&
		   (m.IsTrue(eval182)) {
			// RHS
			traceRuleApply("FUNC", 241, "{| rule isCell(`<program>`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #242
	// source: ? @?
	// {| rule isCell(#KToken(#token("TxGasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 242, "{| rule isCell(#KToken(#token(\"TxGasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #243
	// source: ? @?
	// {| rule isCell(`<substateStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateStackXgt && len(kapp0.List) == 1 { // `<substateStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 243, "{| rule isCell(`<substateStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #244
	// source: ? @?
	// {| rule isCell(`<declaredContracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdeclaredContractsXgt && len(kapp0.List) == 1 { // `<declaredContracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 244, "{| rule isCell(`<declaredContracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #245
	// source: ? @?
	// {| rule isCell(#KToken(#token("ArgsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortArgsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 245, "{| rule isCell(#KToken(#token(\"ArgsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #246
	// source: ? @?
	// {| rule isCell(`<balance>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbalanceXgt && len(kapp0.List) == 1 { // `<balance>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 246, "{| rule isCell(`<balance>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #247
	// source: ? @?
	// {| rule isCell(`<output>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoutputXgt && len(kapp0.List) == 1 { // `<output>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval183, err183 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err183 != nil {
			return m.NoResult, err183
		}
		if m.IsTrue(eval183) {
			// RHS
			traceRuleApply("FUNC", 247, "{| rule isCell(`<output>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #248
	// source: ? @?
	// {| rule isCell(#KToken(#token("ValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 248, "{| rule isCell(#KToken(#token(\"ValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #249
	// source: ? @?
	// {| rule isCell(`<labels>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlabelsXgt && len(kapp0.List) == 1 { // `<labels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 249, "{| rule isCell(`<labels>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #250
	// source: ? @?
	// {| rule isCell(#KToken(#token("TypesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 250, "{| rule isCell(#KToken(#token(\"TypesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #251
	// source: ? @?
	// {| rule isCell(#KToken(#token("AcctIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAcctIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 251, "{| rule isCell(#KToken(#token(\"AcctIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #252
	// source: ? @?
	// {| rule isCell(#KToken(#token("FuncLabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 252, "{| rule isCell(#KToken(#token(\"FuncLabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #253
	// source: ? @?
	// {| rule isCell(`<callStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallStackXgt && len(kapp0.List) == 1 { // `<callStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 253, "{| rule isCell(`<callStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #254
	// source: ? @?
	// {| rule isCell(`<code>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcodeXgt && len(kapp0.List) == 1 { // `<code>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval184, err184 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err184 != nil {
			return m.NoResult, err184
		}
		if m.IsTrue(eval184) {
			// RHS
			traceRuleApply("FUNC", 254, "{| rule isCell(`<code>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #255
	// source: ? @?
	// {| rule isCell(`<typeChecking>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypeCheckingXgt && len(kapp0.List) == 1 { // `<typeChecking>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 255, "{| rule isCell(`<typeChecking>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #256
	// source: ? @?
	// {| rule isCell(`<well-formedness-schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXhyphenscheduleXgt && len(kapp0.List) == 1 { // `<well-formedness-schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval185, err185 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err185 != nil {
			return m.NoResult, err185
		}
		if m.IsTrue(eval185) {
			// RHS
			traceRuleApply("FUNC", 256, "{| rule isCell(`<well-formedness-schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #257
	// source: ? @?
	// {| rule isCell(#KToken(#token("SubstateStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 257, "{| rule isCell(#KToken(#token(\"SubstateStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #258
	// source: ? @?
	// {| rule isCell(`<storage>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstorageXgt && len(kapp0.List) == 1 { // `<storage>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 258, "{| rule isCell(`<storage>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #259
	// source: ? @?
	// {| rule isCell(`<args>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltargsXgt && len(kapp0.List) == 1 { // `<args>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval186, err186 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err186 != nil {
			return m.NoResult, err186
		}
		if m.IsTrue(eval186) {
			// RHS
			traceRuleApply("FUNC", 259, "{| rule isCell(`<args>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #260
	// source: ? @?
	// {| rule isCell(`<accounts>`(K0))=>#token("true","Bool") requires isAccountCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountsXgt && len(kapp0.List) == 1 { // `<accounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortAccountCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isAccountCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 260, "{| rule isCell(`<accounts>`(K0))=>#token(\"true\",\"Bool\") requires isAccountCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #261
	// source: ? @?
	// {| rule isCell(`<activeAccounts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltactiveAccountsXgt && len(kapp0.List) == 1 { // `<activeAccounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 261, "{| rule isCell(`<activeAccounts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #262
	// source: ? @?
	// {| rule isCell(`<currentMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentMemoryXgt && len(kapp0.List) == 1 { // `<currentMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 262, "{| rule isCell(`<currentMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #263
	// source: ? @?
	// {| rule isCell(#KToken(#token("FunctionNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 263, "{| rule isCell(#KToken(#token(\"FunctionNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #264
	// source: ? @?
	// {| rule isCell(`<functionName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionNameXgt && len(kapp0.List) == 1 { // `<functionName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval187, err187 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err187 != nil {
			return m.NoResult, err187
		}
		if m.IsTrue(eval187) {
			// RHS
			traceRuleApply("FUNC", 264, "{| rule isCell(`<functionName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #265
	// source: ? @?
	// {| rule isCell(#KToken(#token("NparamsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNparamsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 265, "{| rule isCell(#KToken(#token(\"NparamsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #266
	// source: ? @?
	// {| rule isCell(#KToken(#token("MessagesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessagesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 266, "{| rule isCell(#KToken(#token(\"MessagesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #267
	// source: ? @?
	// {| rule isCell(#KToken(#token("InstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 267, "{| rule isCell(#KToken(#token(\"InstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #268
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallerCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallerCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 268, "{| rule isCell(#KToken(#token(\"CallerCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #269
	// source: ? @?
	// {| rule isCell(#KToken(#token("ExportedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExportedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 269, "{| rule isCell(#KToken(#token(\"ExportedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #270
	// source: ? @?
	// {| rule isCell(#KToken(#token("FunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 270, "{| rule isCell(#KToken(#token(\"FunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #271
	// source: ? @?
	// {| rule isCell(#KToken(#token("NregsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNregsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 271, "{| rule isCell(#KToken(#token(\"NregsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #272
	// source: ? @?
	// {| rule isCell(#KToken(#token("RefundCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRefundCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 272, "{| rule isCell(#KToken(#token(\"RefundCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #273
	// source: ? @?
	// {| rule isCell(`<contracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractsXgt && len(kapp0.List) == 1 { // `<contracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 273, "{| rule isCell(`<contracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #274
	// source: ? @?
	// {| rule isCell(`<fid>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfidXgt && len(kapp0.List) == 1 { // `<fid>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval188, err188 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err188 != nil {
			return m.NoResult, err188
		}
		if m.IsTrue(eval188) {
			// RHS
			traceRuleApply("FUNC", 274, "{| rule isCell(`<fid>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #275
	// source: ? @?
	// {| rule isCell(`<currentContract>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentContractXgt && len(kapp0.List) == 5 { // `<currentContract>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval189, err189 := evalIsTypesCell( // isTypesCell(K0)
			varK0,
			config, -1)
		if err189 != nil {
			return m.NoResult, err189
		}
		eval190, err190 := evalIsContractNameCell( // isContractNameCell(K1)
			varK1,
			config, -1)
		if err190 != nil {
			return m.NoResult, err190
		}
		eval191, err191 := evalIsDeclaredContractsCell( // isDeclaredContractsCell(K2)
			varK2,
			config, -1)
		if err191 != nil {
			return m.NoResult, err191
		}
		eval192, err192 := evalIsFunctionBodiesCell( // isFunctionBodiesCell(K3)
			varK3,
			config, -1)
		if err192 != nil {
			return m.NoResult, err192
		}
		eval193, err193 := evalIsCurrentFunctionCell( // isCurrentFunctionCell(K4)
			varK4,
			config, -1)
		if err193 != nil {
			return m.NoResult, err193
		}
		if ((((m.IsTrue(eval189)) &&
		   (m.IsTrue(eval190))) &&
		   (m.IsTrue(eval191))) &&
		   (m.IsTrue(eval192))) &&
		   (m.IsTrue(eval193)) {
			// RHS
			traceRuleApply("FUNC", 275, "{| rule isCell(`<currentContract>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #276
	// source: ? @?
	// {| rule isCell(#KToken(#token("LocalCallsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 276, "{| rule isCell(#KToken(#token(\"LocalCallsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #277
	// source: ? @?
	// {| rule isCell(#KToken(#token("InterimStatesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInterimStatesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 277, "{| rule isCell(#KToken(#token(\"InterimStatesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #278
	// source: ? @?
	// {| rule isCell(`<sendto>`(K0))=>#token("true","Bool") requires isAccount(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsendtoXgt && len(kapp0.List) == 1 { // `<sendto>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval194, err194 := evalIsAccount( // isAccount(K0)
			varK0,
			config, -1)
		if err194 != nil {
			return m.NoResult, err194
		}
		if m.IsTrue(eval194) {
			// RHS
			traceRuleApply("FUNC", 278, "{| rule isCell(`<sendto>`(K0))=>#token(\"true\",\"Bool\") requires isAccount(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #279
	// source: ? @?
	// {| rule isCell(`<number>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnumberXgt && len(kapp0.List) == 1 { // `<number>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 279, "{| rule isCell(`<number>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #280
	// source: ? @?
	// {| rule isCell(`<data>`(K0))=>#token("true","Bool") requires isWordStack(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdataXgt && len(kapp0.List) == 1 { // `<data>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval195, err195 := evalIsWordStack( // isWordStack(K0)
			varK0,
			config, -1)
		if err195 != nil {
			return m.NoResult, err195
		}
		if m.IsTrue(eval195) {
			// RHS
			traceRuleApply("FUNC", 280, "{| rule isCell(`<data>`(K0))=>#token(\"true\",\"Bool\") requires isWordStack(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #281
	// source: ? @?
	// {| rule isCell(`<gas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasXgt && len(kapp0.List) == 1 { // `<gas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 281, "{| rule isCell(`<gas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #282
	// source: ? @?
	// {| rule isCell(`<programSize>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramSizeXgt && len(kapp0.List) == 1 { // `<programSize>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 282, "{| rule isCell(`<programSize>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #283
	// source: ? @?
	// {| rule isCell(#KToken(#token("CodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 283, "{| rule isCell(#KToken(#token(\"CodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #284
	// source: ? @?
	// {| rule isCell(#KToken(#token("ProgramSizeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramSizeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 284, "{| rule isCell(#KToken(#token(\"ProgramSizeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #285
	// source: ? @?
	// {| rule isCell(`<static>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstaticXgt && len(kapp0.List) == 1 { // `<static>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 285, "{| rule isCell(`<static>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #286
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallFrameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallFrameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 286, "{| rule isCell(#KToken(#token(\"CallFrameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #287
	// source: ? @?
	// {| rule isCell(`<instructions>`(K0))=>#token("true","Bool") requires isBlocks(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinstructionsXgt && len(kapp0.List) == 1 { // `<instructions>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval196, err196 := evalIsBlocks( // isBlocks(K0)
			varK0,
			config, -1)
		if err196 != nil {
			return m.NoResult, err196
		}
		if m.IsTrue(eval196) {
			// RHS
			traceRuleApply("FUNC", 287, "{| rule isCell(`<instructions>`(K0))=>#token(\"true\",\"Bool\") requires isBlocks(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #288
	// source: ? @?
	// {| rule isCell(`<txPending>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxPendingXgt && len(kapp0.List) == 1 { // `<txPending>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 288, "{| rule isCell(`<txPending>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #289
	// source: ? @?
	// {| rule isCell(#KToken(#token("ExitCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExitCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 289, "{| rule isCell(#KToken(#token(\"ExitCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #290
	// source: ? @?
	// {| rule isCell(`<callData>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDataXgt && len(kapp0.List) == 1 { // `<callData>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval197, err197 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err197 != nil {
			return m.NoResult, err197
		}
		if m.IsTrue(eval197) {
			// RHS
			traceRuleApply("FUNC", 290, "{| rule isCell(`<callData>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #291
	// source: ? @?
	// {| rule isCell(#KToken(#token("LabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 291, "{| rule isCell(#KToken(#token(\"LabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #292
	// source: ? @?
	// {| rule isCell(#KToken(#token("FidCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFidCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 292, "{| rule isCell(#KToken(#token(\"FidCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #293
	// source: ? @?
	// {| rule isCell(`<jumpTable>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltjumpTableXgt && len(kapp0.List) == 1 { // `<jumpTable>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 293, "{| rule isCell(`<jumpTable>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #294
	// source: ? @?
	// {| rule isCell(`<currentInstructions>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentInstructionsXgt && len(kapp0.List) == 1 { // `<currentInstructions>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 294, "{| rule isCell(`<currentInstructions>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #295
	// source: ? @?
	// {| rule isCell(#KToken(#token("SCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 295, "{| rule isCell(#KToken(#token(\"SCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #296
	// source: ? @?
	// {| rule isCell(#KToken(#token("SelfDestructCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfDestructCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 296, "{| rule isCell(#KToken(#token(\"SelfDestructCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #297
	// source: ? @?
	// {| rule isCell(#KToken(#token("PreviousGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPreviousGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 297, "{| rule isCell(#KToken(#token(\"PreviousGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #298
	// source: ? @?
	// {| rule isCell(#KToken(#token("FuncIdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 298, "{| rule isCell(#KToken(#token(\"FuncIdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #299
	// source: ? @?
	// {| rule isCell(`<gasUsed>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasUsedXgt && len(kapp0.List) == 1 { // `<gasUsed>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 299, "{| rule isCell(`<gasUsed>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #300
	// source: ? @?
	// {| rule isCell(`<function>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionXgt && len(kapp0.List) == 5 { // `<function>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval198, err198 := evalIsFuncIDCell( // isFuncIdCell(K0)
			varK0,
			config, -1)
		if err198 != nil {
			return m.NoResult, err198
		}
		eval199, err199 := evalIsNparamsCell( // isNparamsCell(K1)
			varK1,
			config, -1)
		if err199 != nil {
			return m.NoResult, err199
		}
		eval200, err200 := evalIsInstructionsCell( // isInstructionsCell(K2)
			varK2,
			config, -1)
		if err200 != nil {
			return m.NoResult, err200
		}
		eval201, err201 := evalIsJumpTableCell( // isJumpTableCell(K3)
			varK3,
			config, -1)
		if err201 != nil {
			return m.NoResult, err201
		}
		eval202, err202 := evalIsNregsCell( // isNregsCell(K4)
			varK4,
			config, -1)
		if err202 != nil {
			return m.NoResult, err202
		}
		if ((((m.IsTrue(eval198)) &&
		   (m.IsTrue(eval199))) &&
		   (m.IsTrue(eval200))) &&
		   (m.IsTrue(eval201))) &&
		   (m.IsTrue(eval202)) {
			// RHS
			traceRuleApply("FUNC", 300, "{| rule isCell(`<function>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #301
	// source: ? @?
	// {| rule isCell(#KToken(#token("ContractCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 301, "{| rule isCell(#KToken(#token(\"ContractCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #302
	// source: ? @?
	// {| rule isCell(#KToken(#token("MsgIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMsgIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 302, "{| rule isCell(#KToken(#token(\"MsgIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #303
	// source: ? @?
	// {| rule isCell(#KToken(#token("BeneficiaryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBeneficiaryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 303, "{| rule isCell(#KToken(#token(\"BeneficiaryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #304
	// source: ? @?
	// {| rule isCell(`<gasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasPriceXgt && len(kapp0.List) == 1 { // `<gasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 304, "{| rule isCell(`<gasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #305
	// source: ? @?
	// {| rule isCell(`<localMem>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalMemXgt && len(kapp0.List) == 1 { // `<localMem>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 305, "{| rule isCell(`<localMem>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #306
	// source: ? @?
	// {| rule isCell(#KToken(#token("FunctionBodiesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionBodiesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 306, "{| rule isCell(#KToken(#token(\"FunctionBodiesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #307
	// source: ? @?
	// {| rule isCell(#KToken(#token("StaticCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStaticCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 307, "{| rule isCell(#KToken(#token(\"StaticCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #308
	// source: ? @?
	// {| rule isCell(#KToken(#token("AccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 308, "{| rule isCell(#KToken(#token(\"AccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #309
	// source: ? @?
	// {| rule isCell(`<nregs>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnregsXgt && len(kapp0.List) == 1 { // `<nregs>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 309, "{| rule isCell(`<nregs>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #310
	// source: ? @?
	// {| rule isCell(`<mode>`(K0))=>#token("true","Bool") requires isMode(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmodeXgt && len(kapp0.List) == 1 { // `<mode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval203, err203 := evalIsMode( // isMode(K0)
			varK0,
			config, -1)
		if err203 != nil {
			return m.NoResult, err203
		}
		if m.IsTrue(eval203) {
			// RHS
			traceRuleApply("FUNC", 310, "{| rule isCell(`<mode>`(K0))=>#token(\"true\",\"Bool\") requires isMode(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #311
	// source: ? @?
	// {| rule isCell(`<gasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasLimitXgt && len(kapp0.List) == 1 { // `<gasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 311, "{| rule isCell(`<gasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #312
	// source: ? @?
	// {| rule isCell(`<previousGas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpreviousGasXgt && len(kapp0.List) == 1 { // `<previousGas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 312, "{| rule isCell(`<previousGas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #313
	// source: ? @?
	// {| rule isCell(`<selfDestruct>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltselfDestructXgt && len(kapp0.List) == 1 { // `<selfDestruct>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 313, "{| rule isCell(`<selfDestruct>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #314
	// source: ? @?
	// {| rule isCell(#KToken(#token("CurrentInstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 314, "{| rule isCell(#KToken(#token(\"CurrentInstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #315
	// source: ? @?
	// {| rule isCell(`<network>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnetworkXgt && len(kapp0.List) == 5 { // `<network>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval204, err204 := evalIsActiveAccountsCell( // isActiveAccountsCell(K0)
			varK0,
			config, -1)
		if err204 != nil {
			return m.NoResult, err204
		}
		eval205, err205 := evalIsAccountsCell( // isAccountsCell(K1)
			varK1,
			config, -1)
		if err205 != nil {
			return m.NoResult, err205
		}
		eval206, err206 := evalIsTxOrderCell( // isTxOrderCell(K2)
			varK2,
			config, -1)
		if err206 != nil {
			return m.NoResult, err206
		}
		eval207, err207 := evalIsTxPendingCell( // isTxPendingCell(K3)
			varK3,
			config, -1)
		if err207 != nil {
			return m.NoResult, err207
		}
		eval208, err208 := evalIsMessagesCell( // isMessagesCell(K4)
			varK4,
			config, -1)
		if err208 != nil {
			return m.NoResult, err208
		}
		if ((((m.IsTrue(eval204)) &&
		   (m.IsTrue(eval205))) &&
		   (m.IsTrue(eval206))) &&
		   (m.IsTrue(eval207))) &&
		   (m.IsTrue(eval208)) {
			// RHS
			traceRuleApply("FUNC", 315, "{| rule isCell(`<network>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #316
	// source: ? @?
	// {| rule isCell(`<txGasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasPriceXgt && len(kapp0.List) == 1 { // `<txGasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 316, "{| rule isCell(`<txGasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #317
	// source: ? @?
	// {| rule isCell(#KToken(#token("TypeCheckingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypeCheckingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 317, "{| rule isCell(#KToken(#token(\"TypeCheckingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #318
	// source: ? @?
	// {| rule isCell(#KToken(#token("SendtoCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSendtoCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 318, "{| rule isCell(#KToken(#token(\"SendtoCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #319
	// source: ? @?
	// {| rule isCell(`<origin>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoriginXgt && len(kapp0.List) == 1 { // `<origin>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 319, "{| rule isCell(`<origin>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #320
	// source: ? @?
	// {| rule isCell(`<types>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypesXgt && len(kapp0.List) == 1 { // `<types>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 320, "{| rule isCell(`<types>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #321
	// source: ? @?
	// {| rule isCell(#KToken(#token("FunctionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 321, "{| rule isCell(#KToken(#token(\"FunctionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #322
	// source: ? @?
	// {| rule isCell(`<contractCode>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractCodeXgt && len(kapp0.List) == 1 { // `<contractCode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval209, err209 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err209 != nil {
			return m.NoResult, err209
		}
		if m.IsTrue(eval209) {
			// RHS
			traceRuleApply("FUNC", 322, "{| rule isCell(`<contractCode>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #323
	// source: ? @?
	// {| rule isCell(#KToken(#token("FuncIdsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 323, "{| rule isCell(#KToken(#token(\"FuncIdsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #324
	// source: ? @?
	// {| rule isCell(#KToken(#token("MessageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 324, "{| rule isCell(#KToken(#token(\"MessageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #325
	// source: ? @?
	// {| rule isCell(#KToken(#token("WellFormednessScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 325, "{| rule isCell(#KToken(#token(\"WellFormednessScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #326
	// source: ? @?
	// {| rule isCell(#KToken(#token("NonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 326, "{| rule isCell(#KToken(#token(\"NonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #327
	// source: ? @?
	// {| rule isCell(`<localCalls>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalCallsXgt && len(kapp0.List) == 1 { // `<localCalls>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 327, "{| rule isCell(`<localCalls>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #328
	// source: ? @?
	// {| rule isCell(`<from>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfromXgt && len(kapp0.List) == 1 { // `<from>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 328, "{| rule isCell(`<from>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #329
	// source: ? @?
	// {| rule isCell(`<nparams>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnparamsXgt && len(kapp0.List) == 1 { // `<nparams>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 329, "{| rule isCell(`<nparams>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #330
	// source: ? @?
	// {| rule isCell(`<refund>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltrefundXgt && len(kapp0.List) == 1 { // `<refund>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 330, "{| rule isCell(`<refund>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #331
	// source: ? @?
	// {| rule isCell(`<callDepth>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDepthXgt && len(kapp0.List) == 1 { // `<callDepth>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 331, "{| rule isCell(`<callDepth>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #332
	// source: ? @?
	// {| rule isCell(`<account>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountXgt && len(kapp0.List) == 5 { // `<account>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval210, err210 := evalIsAcctIDCell( // isAcctIDCell(K0)
			varK0,
			config, -1)
		if err210 != nil {
			return m.NoResult, err210
		}
		eval211, err211 := evalIsBalanceCell( // isBalanceCell(K1)
			varK1,
			config, -1)
		if err211 != nil {
			return m.NoResult, err211
		}
		eval212, err212 := evalIsCodeCell( // isCodeCell(K2)
			varK2,
			config, -1)
		if err212 != nil {
			return m.NoResult, err212
		}
		eval213, err213 := evalIsStorageCell( // isStorageCell(K3)
			varK3,
			config, -1)
		if err213 != nil {
			return m.NoResult, err213
		}
		eval214, err214 := evalIsNonceCell( // isNonceCell(K4)
			varK4,
			config, -1)
		if err214 != nil {
			return m.NoResult, err214
		}
		if ((((m.IsTrue(eval210)) &&
		   (m.IsTrue(eval211))) &&
		   (m.IsTrue(eval212))) &&
		   (m.IsTrue(eval213))) &&
		   (m.IsTrue(eval214)) {
			// RHS
			traceRuleApply("FUNC", 332, "{| rule isCell(`<account>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #333
	// source: ? @?
	// {| rule isCell(#KToken(#token("LocalMemCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalMemCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 333, "{| rule isCell(#KToken(#token(\"LocalMemCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #334
	// source: ? @?
	// {| rule isCell(`<currentFunction>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentFunctionXgt && len(kapp0.List) == 3 { // `<currentFunction>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval215, err215 := evalIsFunctionNameCell( // isFunctionNameCell(K0)
			varK0,
			config, -1)
		if err215 != nil {
			return m.NoResult, err215
		}
		eval216, err216 := evalIsLabelsCell( // isLabelsCell(K1)
			varK1,
			config, -1)
		if err216 != nil {
			return m.NoResult, err216
		}
		eval217, err217 := evalIsCurrentInstructionsCell( // isCurrentInstructionsCell(K2)
			varK2,
			config, -1)
		if err217 != nil {
			return m.NoResult, err217
		}
		if ((m.IsTrue(eval215)) &&
		   (m.IsTrue(eval216))) &&
		   (m.IsTrue(eval217)) {
			// RHS
			traceRuleApply("FUNC", 334, "{| rule isCell(`<currentFunction>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #335
	// source: ? @?
	// {| rule isCell(#KToken(#token("ModeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 335, "{| rule isCell(#KToken(#token(\"ModeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #336
	// source: ? @?
	// {| rule isCell(`<functions>`(K0))=>#token("true","Bool") requires isFunctionCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionsXgt && len(kapp0.List) == 1 { // `<functions>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortFunctionCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isFunctionCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 336, "{| rule isCell(`<functions>`(K0))=>#token(\"true\",\"Bool\") requires isFunctionCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #337
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 337, "{| rule isCell(#KToken(#token(\"CallStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #338
	// source: ? @?
	// {| rule isCell(`<nonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnonceXgt && len(kapp0.List) == 1 { // `<nonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 338, "{| rule isCell(`<nonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #339
	// source: ? @?
	// {| rule isCell(`<callValue>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallValueXgt && len(kapp0.List) == 1 { // `<callValue>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 339, "{| rule isCell(`<callValue>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #340
	// source: ? @?
	// {| rule isCell(`<s>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsXgt && len(kapp0.List) == 1 { // `<s>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 340, "{| rule isCell(`<s>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #341
	// source: ? @?
	// {| rule isCell(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallFrameXgt && len(kapp0.List) == 15 { // `<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval218, err218 := evalIsProgramCell( // isProgramCell(K0)
			varK0,
			config, -1)
		if err218 != nil {
			return m.NoResult, err218
		}
		eval219, err219 := evalIsCallDepthCell( // isCallDepthCell(K1)
			varK1,
			config, -1)
		if err219 != nil {
			return m.NoResult, err219
		}
		eval220, err220 := evalIsLocalCallsCell( // isLocalCallsCell(K2)
			varK2,
			config, -1)
		if err220 != nil {
			return m.NoResult, err220
		}
		eval221, err221 := evalIsIDCell( // isIdCell(K3)
			varK3,
			config, -1)
		if err221 != nil {
			return m.NoResult, err221
		}
		eval222, err222 := evalIsCallerCell( // isCallerCell(K4)
			varK4,
			config, -1)
		if err222 != nil {
			return m.NoResult, err222
		}
		eval223, err223 := evalIsCallDataCell( // isCallDataCell(K5)
			varK5,
			config, -1)
		if err223 != nil {
			return m.NoResult, err223
		}
		eval224, err224 := evalIsCallValueCell( // isCallValueCell(K6)
			varK6,
			config, -1)
		if err224 != nil {
			return m.NoResult, err224
		}
		eval225, err225 := evalIsRegsCell( // isRegsCell(K7)
			varK7,
			config, -1)
		if err225 != nil {
			return m.NoResult, err225
		}
		eval226, err226 := evalIsLocalMemCell( // isLocalMemCell(K8)
			varK8,
			config, -1)
		if err226 != nil {
			return m.NoResult, err226
		}
		eval227, err227 := evalIsPeakMemoryCell( // isPeakMemoryCell(K9)
			varK9,
			config, -1)
		if err227 != nil {
			return m.NoResult, err227
		}
		eval228, err228 := evalIsCurrentMemoryCell( // isCurrentMemoryCell(K10)
			varK10,
			config, -1)
		if err228 != nil {
			return m.NoResult, err228
		}
		eval229, err229 := evalIsFidCell( // isFidCell(K11)
			varK11,
			config, -1)
		if err229 != nil {
			return m.NoResult, err229
		}
		eval230, err230 := evalIsGasCell( // isGasCell(K12)
			varK12,
			config, -1)
		if err230 != nil {
			return m.NoResult, err230
		}
		eval231, err231 := evalIsPreviousGasCell( // isPreviousGasCell(K13)
			varK13,
			config, -1)
		if err231 != nil {
			return m.NoResult, err231
		}
		eval232, err232 := evalIsStaticCell( // isStaticCell(K14)
			varK14,
			config, -1)
		if err232 != nil {
			return m.NoResult, err232
		}
		if ((((((((((((((m.IsTrue(eval218)) &&
		   (m.IsTrue(eval219))) &&
		   (m.IsTrue(eval220))) &&
		   (m.IsTrue(eval221))) &&
		   (m.IsTrue(eval222))) &&
		   (m.IsTrue(eval223))) &&
		   (m.IsTrue(eval224))) &&
		   (m.IsTrue(eval225))) &&
		   (m.IsTrue(eval226))) &&
		   (m.IsTrue(eval227))) &&
		   (m.IsTrue(eval228))) &&
		   (m.IsTrue(eval229))) &&
		   (m.IsTrue(eval230))) &&
		   (m.IsTrue(eval231))) &&
		   (m.IsTrue(eval232)) {
			// RHS
			traceRuleApply("FUNC", 341, "{| rule isCell(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #342
	// source: ? @?
	// {| rule isCell(#KToken(#token("ContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 342, "{| rule isCell(#KToken(#token(\"ContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #343
	// source: ? @?
	// {| rule isCell(`<interimStates>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinterimStatesXgt && len(kapp0.List) == 1 { // `<interimStates>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 343, "{| rule isCell(`<interimStates>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #344
	// source: ? @?
	// {| rule isCell(#KToken(#token("TimestampCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTimestampCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 344, "{| rule isCell(#KToken(#token(\"TimestampCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #345
	// source: ? @?
	// {| rule isCell(`<msgID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmsgIDXgt && len(kapp0.List) == 1 { // `<msgID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 345, "{| rule isCell(`<msgID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #346
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallDepthCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDepthCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 346, "{| rule isCell(#KToken(#token(\"CallDepthCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #347
	// source: ? @?
	// {| rule isCell(#KToken(#token("TxGasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 347, "{| rule isCell(#KToken(#token(\"TxGasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #348
	// source: ? @?
	// {| rule isCell(`<contractName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractNameXgt && len(kapp0.List) == 1 { // `<contractName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval233, err233 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err233 != nil {
			return m.NoResult, err233
		}
		if m.IsTrue(eval233) {
			// RHS
			traceRuleApply("FUNC", 348, "{| rule isCell(`<contractName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #349
	// source: ? @?
	// {| rule isCell(#KToken(#token("LogDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 349, "{| rule isCell(#KToken(#token(\"LogDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #350
	// source: ? @?
	// {| rule isCell(#KToken(#token("WellFormednessCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 350, "{| rule isCell(#KToken(#token(\"WellFormednessCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #351
	// source: ? @?
	// {| rule isCell(#KToken(#token("BlockhashCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBlockhashCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 351, "{| rule isCell(#KToken(#token(\"BlockhashCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #352
	// source: ? @?
	// {| rule isCell(#KToken(#token("GeneratedTopCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGeneratedTopCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 352, "{| rule isCell(#KToken(#token(\"GeneratedTopCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #353
	// source: ? @?
	// {| rule isCell(#KToken(#token("FuncCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 353, "{| rule isCell(#KToken(#token(\"FuncCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #354
	// source: ? @?
	// {| rule isCell(#KToken(#token("JumpTableCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpTableCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 354, "{| rule isCell(#KToken(#token(\"JumpTableCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #355
	// source: ? @?
	// {| rule isCell(`<acctID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltacctIDXgt && len(kapp0.List) == 1 { // `<acctID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 355, "{| rule isCell(`<acctID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #356
	// source: ? @?
	// {| rule isCell(`<caller>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallerXgt && len(kapp0.List) == 1 { // `<caller>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 356, "{| rule isCell(`<caller>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #357
	// source: ? @?
	// {| rule isCell(#KToken(#token("GasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 357, "{| rule isCell(#KToken(#token(\"GasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #358
	// source: ? @?
	// {| rule isCell(#KToken(#token("CurrentMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 358, "{| rule isCell(#KToken(#token(\"CurrentMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #359
	// source: ? @?
	// {| rule isCell(#KToken(#token("SubstateCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 359, "{| rule isCell(#KToken(#token(\"SubstateCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #360
	// source: ? @?
	// {| rule isCell(`<func>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncXgt && len(kapp0.List) == 1 { // `<func>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval234, err234 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err234 != nil {
			return m.NoResult, err234
		}
		if m.IsTrue(eval234) {
			// RHS
			traceRuleApply("FUNC", 360, "{| rule isCell(`<func>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #361
	// source: ? @?
	// {| rule isCell(`<logData>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlogDataXgt && len(kapp0.List) == 1 { // `<logData>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 361, "{| rule isCell(`<logData>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #362
	// source: ? @?
	// {| rule isCell(#KToken(#token("CallDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 362, "{| rule isCell(#KToken(#token(\"CallDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #363
	// source: ? @?
	// {| rule isCell(#KToken(#token("NumberCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumberCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 363, "{| rule isCell(#KToken(#token(\"NumberCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #364
	// source: ? @?
	// {| rule isCell(#KToken(#token("CurrentFunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 364, "{| rule isCell(#KToken(#token(\"CurrentFunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #365
	// source: ? @?
	// {| rule isCell(#KToken(#token("StorageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStorageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 365, "{| rule isCell(#KToken(#token(\"StorageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #366
	// source: ? @?
	// {| rule isCell(#KToken(#token("IeleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 366, "{| rule isCell(#KToken(#token(\"IeleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #367
	// source: ? @?
	// {| rule isCell(`<schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltscheduleXgt && len(kapp0.List) == 1 { // `<schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval235, err235 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err235 != nil {
			return m.NoResult, err235
		}
		if m.IsTrue(eval235) {
			// RHS
			traceRuleApply("FUNC", 367, "{| rule isCell(`<schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #368
	// source: ? @?
	// {| rule isCell(#KToken(#token("GasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 368, "{| rule isCell(#KToken(#token(\"GasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #369
	// source: ? @?
	// {| rule isCell(#KToken(#token("Cell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 369, "{| rule isCell(#KToken(#token(\"Cell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #370
	// source: ? @?
	// {| rule isCell(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessageXgt && len(kapp0.List) == 10 { // `<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		// REQUIRES
		eval236, err236 := evalIsMsgIDCell( // isMsgIDCell(K0)
			varK0,
			config, -1)
		if err236 != nil {
			return m.NoResult, err236
		}
		eval237, err237 := evalIsTxNonceCell( // isTxNonceCell(K1)
			varK1,
			config, -1)
		if err237 != nil {
			return m.NoResult, err237
		}
		eval238, err238 := evalIsTxGasPriceCell( // isTxGasPriceCell(K2)
			varK2,
			config, -1)
		if err238 != nil {
			return m.NoResult, err238
		}
		eval239, err239 := evalIsTxGasLimitCell( // isTxGasLimitCell(K3)
			varK3,
			config, -1)
		if err239 != nil {
			return m.NoResult, err239
		}
		eval240, err240 := evalIsSendtoCell( // isSendtoCell(K4)
			varK4,
			config, -1)
		if err240 != nil {
			return m.NoResult, err240
		}
		eval241, err241 := evalIsFuncCell( // isFuncCell(K5)
			varK5,
			config, -1)
		if err241 != nil {
			return m.NoResult, err241
		}
		eval242, err242 := evalIsValueCell( // isValueCell(K6)
			varK6,
			config, -1)
		if err242 != nil {
			return m.NoResult, err242
		}
		eval243, err243 := evalIsFromCell( // isFromCell(K7)
			varK7,
			config, -1)
		if err243 != nil {
			return m.NoResult, err243
		}
		eval244, err244 := evalIsDataCell( // isDataCell(K8)
			varK8,
			config, -1)
		if err244 != nil {
			return m.NoResult, err244
		}
		eval245, err245 := evalIsArgsCell( // isArgsCell(K9)
			varK9,
			config, -1)
		if err245 != nil {
			return m.NoResult, err245
		}
		if (((((((((m.IsTrue(eval236)) &&
		   (m.IsTrue(eval237))) &&
		   (m.IsTrue(eval238))) &&
		   (m.IsTrue(eval239))) &&
		   (m.IsTrue(eval240))) &&
		   (m.IsTrue(eval241))) &&
		   (m.IsTrue(eval242))) &&
		   (m.IsTrue(eval243))) &&
		   (m.IsTrue(eval244))) &&
		   (m.IsTrue(eval245)) {
			// RHS
			traceRuleApply("FUNC", 370, "{| rule isCell(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #371
	// source: ? @?
	// {| rule isCell(`<funcIds>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDsXgt && len(kapp0.List) == 1 { // `<funcIds>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 371, "{| rule isCell(`<funcIds>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #372
	// source: ? @?
	// {| rule isCell(#KToken(#token("DeclaredContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDeclaredContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 372, "{| rule isCell(#KToken(#token(\"DeclaredContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #373
	// source: ? @?
	// {| rule isCell(#KToken(#token("OriginCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOriginCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 373, "{| rule isCell(#KToken(#token(\"OriginCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #374
	// source: ? @?
	// {| rule isCell(`<funcLabels>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncLabelsXgt && len(kapp0.List) == 1 { // `<funcLabels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 374, "{| rule isCell(`<funcLabels>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #375
	// source: ? @?
	// {| rule isCell(`<checkGas>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcheckGasXgt && len(kapp0.List) == 1 { // `<checkGas>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 375, "{| rule isCell(`<checkGas>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #376
	// source: ? @?
	// {| rule isCell(#KToken(#token("ContractNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 376, "{| rule isCell(#KToken(#token(\"ContractNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #377
	// source: ? @?
	// {| rule isCell(`<value>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltvalueXgt && len(kapp0.List) == 1 { // `<value>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 377, "{| rule isCell(`<value>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #378
	// source: ? @?
	// {| rule isCell(`<txOrder>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxOrderXgt && len(kapp0.List) == 1 { // `<txOrder>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 378, "{| rule isCell(`<txOrder>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #379
	// source: ? @?
	// {| rule isCell(#KToken(#token("CheckGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCheckGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 379, "{| rule isCell(#KToken(#token(\"CheckGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #380
	// source: ? @?
	// {| rule isCell(#KToken(#token("FromCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFromCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 380, "{| rule isCell(#KToken(#token(\"FromCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #381
	// source: ? @?
	// {| rule isCell(`<exit-code>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexitXhyphencodeXgt && len(kapp0.List) == 1 { // `<exit-code>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 381, "{| rule isCell(`<exit-code>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #382
	// source: ? @?
	// {| rule isCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 382, "{| rule isCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalValues(c m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.values
	lbl := m.LblValues // values
	sort := m.SortList
	if hookRes, hookErr := mapHooks.values(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.values, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalValues", args: []m.K{c}}
}

func evalIsRefundCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #383
	// source: ? @?
	// {| rule isRefundCell(`<refund>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltrefundXgt && len(kapp0.List) == 1 { // `<refund>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 383, "{| rule isRefundCell(`<refund>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #384
	// source: ? @?
	// {| rule isRefundCell(#KToken(#token("RefundCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRefundCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 384, "{| rule isRefundCell(#KToken(#token(\"RefundCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #385
	// source: ? @?
	// {| rule isRefundCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 385, "{| rule isRefundCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsUnOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #386
	// source: ? @?
	// {| rule isUnOp(`MSIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSIZE && len(kapp0.List) == 0 { // `MSIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 386, "{| rule isUnOp(`MSIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #387
	// source: ? @?
	// {| rule isUnOp(`TIMESTAMP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTIMESTAMP && len(kapp0.List) == 0 { // `TIMESTAMP`(.KList)
		// RHS
		traceRuleApply("FUNC", 387, "{| rule isUnOp(`TIMESTAMP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #388
	// source: ? @?
	// {| rule isUnOp(`ADDRESS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADDRESS && len(kapp0.List) == 0 { // `ADDRESS`(.KList)
		// RHS
		traceRuleApply("FUNC", 388, "{| rule isUnOp(`ADDRESS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #389
	// source: ? @?
	// {| rule isUnOp(`CALLVALUE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLVALUE && len(kapp0.List) == 0 { // `CALLVALUE`(.KList)
		// RHS
		traceRuleApply("FUNC", 389, "{| rule isUnOp(`CALLVALUE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #390
	// source: ? @?
	// {| rule isUnOp(`ORIGIN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblORIGIN && len(kapp0.List) == 0 { // `ORIGIN`(.KList)
		// RHS
		traceRuleApply("FUNC", 390, "{| rule isUnOp(`ORIGIN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #391
	// source: ? @?
	// {| rule isUnOp(`REVERT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblREVERT && len(kapp0.List) == 0 { // `REVERT`(.KList)
		// RHS
		traceRuleApply("FUNC", 391, "{| rule isUnOp(`REVERT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #392
	// source: ? @?
	// {| rule isUnOp(#KToken(#token("UnOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortUnOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 392, "{| rule isUnOp(#KToken(#token(\"UnOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #393
	// source: ? @?
	// {| rule isUnOp(`SELFDESTRUCT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSELFDESTRUCT && len(kapp0.List) == 0 { // `SELFDESTRUCT`(.KList)
		// RHS
		traceRuleApply("FUNC", 393, "{| rule isUnOp(`SELFDESTRUCT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #394
	// source: ? @?
	// {| rule isUnOp(`CODESIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCODESIZE && len(kapp0.List) == 0 { // `CODESIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 394, "{| rule isUnOp(`CODESIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #395
	// source: ? @?
	// {| rule isUnOp(`GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGAS && len(kapp0.List) == 0 { // `GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 395, "{| rule isUnOp(`GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #396
	// source: ? @?
	// {| rule isUnOp(`NUMBER`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNUMBER && len(kapp0.List) == 0 { // `NUMBER`(.KList)
		// RHS
		traceRuleApply("FUNC", 396, "{| rule isUnOp(`NUMBER`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #397
	// source: ? @?
	// {| rule isUnOp(`DIFFICULTY`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDIFFICULTY && len(kapp0.List) == 0 { // `DIFFICULTY`(.KList)
		// RHS
		traceRuleApply("FUNC", 397, "{| rule isUnOp(`DIFFICULTY`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #398
	// source: ? @?
	// {| rule isUnOp(`GASPRICE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGASPRICE && len(kapp0.List) == 0 { // `GASPRICE`(.KList)
		// RHS
		traceRuleApply("FUNC", 398, "{| rule isUnOp(`GASPRICE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #399
	// source: ? @?
	// {| rule isUnOp(`LOADNEG`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADNEG && len(kapp0.List) == 2 { // `LOADNEG`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 399, "{| rule isUnOp(`LOADNEG`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #400
	// source: ? @?
	// {| rule isUnOp(`CALLER`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLER && len(kapp0.List) == 0 { // `CALLER`(.KList)
		// RHS
		traceRuleApply("FUNC", 400, "{| rule isUnOp(`CALLER`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #401
	// source: ? @?
	// {| rule isUnOp(`BENEFICIARY`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBENEFICIARY && len(kapp0.List) == 0 { // `BENEFICIARY`(.KList)
		// RHS
		traceRuleApply("FUNC", 401, "{| rule isUnOp(`BENEFICIARY`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #402
	// source: ? @?
	// {| rule isUnOp(`LOADPOS`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADPOS && len(kapp0.List) == 2 { // `LOADPOS`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 402, "{| rule isUnOp(`LOADPOS`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #403
	// source: ? @?
	// {| rule isUnOp(`BRC`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRC && len(kapp0.List) == 1 { // `BRC`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 403, "{| rule isUnOp(`BRC`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #404
	// source: ? @?
	// {| rule isUnOp(`GASLIMIT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGASLIMIT && len(kapp0.List) == 0 { // `GASLIMIT`(.KList)
		// RHS
		traceRuleApply("FUNC", 404, "{| rule isUnOp(`GASLIMIT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #405
	// source: ? @?
	// {| rule isUnOp(`LOG0`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG0 && len(kapp0.List) == 0 { // `LOG0`(.KList)
		// RHS
		traceRuleApply("FUNC", 405, "{| rule isUnOp(`LOG0`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #406
	// source: ? @?
	// {| rule isUnOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 406, "{| rule isUnOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashloadDeclarations(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #407
	// source: iele.k @1758
	// {| rule #loadDeclarations(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS),`<program>`(_0,_1,_2,`<exported>`(EXPORTS),_3,_4),IDX)=>#loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,`<exported>`(`_Set_`(`SetItem`(NAME),EXPORTS)),_3,_4),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(IDX)),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isSet(EXPORTS)),isInt(NARGS)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_4))) ensures #token("true","Bool") [UNIQUE_ID(41f2bc5f2f32e9506e8a36842e63fb6dd70c924f64dec8ceae9c4bd589b1c649) contentStartColumn(10) contentStartLine(1758) org.kframework.attributes.Location(Location(1758,10,1759,200)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(NAME)
					varNAME := kapp3.List[0] // lhs KVariable NAME
					if varNARGS, t := kapp2.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varBLOCKS := kapp1.List[1] // lhs KVariable BLOCKS
						varFUNCS := kapp0.List[1] // lhs KVariable FUNCS
						if kapp4, t := c2.(*m.KApply); t && kapp4.Label == m.LblXltprogramXgt && len(kapp4.List) == 6 { // `<program>`(_0,_1,_2,`<exported>`(EXPORTS),_3,_4)
							varXu0 := kapp4.List[0] // lhs KVariable _0
							varXu1 := kapp4.List[1] // lhs KVariable _1
							varXu2 := kapp4.List[2] // lhs KVariable _2
							if kapp5, t := kapp4.List[3].(*m.KApply); t && kapp5.Label == m.LblXltexportedXgt && len(kapp5.List) == 1 { // `<exported>`(EXPORTS)
								if varEXPORTS, t := kapp5.List[0].(*m.Set); t && varEXPORTS.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
									varXu3 := kapp4.List[4] // lhs KVariable _3
									varXu4 := kapp4.List[5] // lhs KVariable _4
									if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES
										eval246, err246 := evalIsBlocks( // isBlocks(BLOCKS)
											varBLOCKS,
											config, -1)
										if err246 != nil {
											return m.NoResult, err246
										}
										eval247, err247 := evalIsIeleName( // isIeleName(NAME)
											varNAME,
											config, -1)
										if err247 != nil {
											return m.NoResult, err247
										}
										eval248, err248 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(FUNCS)
											varFUNCS,
											config, -1)
										if err248 != nil {
											return m.NoResult, err248
										}
										eval249, err249 := evalIsFuncIDsCell( // isFuncIdsCell(_1)
											varXu1,
											config, -1)
										if err249 != nil {
											return m.NoResult, err249
										}
										eval250, err250 := evalIsProgramSizeCell( // isProgramSizeCell(_3)
											varXu3,
											config, -1)
										if err250 != nil {
											return m.NoResult, err250
										}
										eval251, err251 := evalIsFunctionsCell( // isFunctionsCell(_0)
											varXu0,
											config, -1)
										if err251 != nil {
											return m.NoResult, err251
										}
										eval252, err252 := evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
											varXu2,
											config, -1)
										if err252 != nil {
											return m.NoResult, err252
										}
										eval253, err253 := evalIsContractCodeCell( // isContractCodeCell(_4)
											varXu4,
											config, -1)
										if err253 != nil {
											return m.NoResult, err253
										}
										if (((m.IsTrue(eval246) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
										   (m.IsTrue(eval247))) &&
										   (m.IsTrue(eval248)) /* && */ /* rhs precomputed isSet(EXPORTS) */  /* && */ /* rhs precomputed isInt(NARGS) */ ) &&
										   (((((/* rhs KToken */ /* && */
										   m.IsTrue(eval249)) &&
										   (m.IsTrue(eval250))) &&
										   (m.IsTrue(eval251))) &&
										   (m.IsTrue(eval252))) &&
										   (m.IsTrue(eval253))) {
											// RHS
											traceRuleApply("FUNC", 407, "{| rule #loadDeclarations(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS),`<program>`(_0,_1,_2,`<exported>`(EXPORTS),_3,_4),IDX)=>#loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,`<exported>`(`_Set_`(`SetItem`(NAME),EXPORTS)),_3,_4),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(IDX)),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isSet(EXPORTS)),isInt(NARGS)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_4))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(41f2bc5f2f32e9506e8a36842e63fb6dd70c924f64dec8ceae9c4bd589b1c649) contentStartColumn(10) contentStartLine(1758) org.kframework.attributes.Location(Location(1758,10,1759,200)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
											eval256, err256 := evalSetItem( // `SetItem`(NAME)
												varNAME,
												config, -1)
											if err256 != nil {
												return m.NoResult, err256
											}
											eval255, err255 := evalXuSetXu( // `_Set_`(`SetItem`(NAME),EXPORTS)
												eval256,
												varEXPORTS,
												config, -1)
											if err255 != nil {
												return m.NoResult, err255
											}
											eval258, err258 := evalInitInstructionsCell(config, -1) // initInstructionsCell(.KList)
											if err258 != nil {
												return m.NoResult, err258
											}
											eval259, err259 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
											if err259 != nil {
												return m.NoResult, err259
											}
											eval260, err260 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
											if err260 != nil {
												return m.NoResult, err260
											}
											eval257, err257 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList)))
												&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
													varNAME,
												}},
												&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
													&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
														varNAME,
													}},
													&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
														varNARGS,
													}},
													eval258,
													eval259,
													eval260,
												}},
												config, -1)
											if err257 != nil {
												return m.NoResult, err257
											}
											eval254, err254 := evalXhashloadFunction( // #loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,`<exported>`(`_Set_`(`SetItem`(NAME),EXPORTS)),_3,_4),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX)
												varFUNCS,
												varBLOCKS,
												&m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
													varXu0,
													varXu1,
													varXu2,
													&m.KApply{Label: m.LblXltexportedXgt, List: []m.K{ // as-is <exported>
														eval255,
													}},
													varXu3,
													varXu4,
												}},
												varNAME,
												eval257,
												varIDX,
												config, -1)
											if err254 != nil {
												return m.NoResult, err254
											}
											return eval254, nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #408
	// source: iele.k @1756
	// {| rule #loadDeclarations(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS),`<program>`(_0,_1,_2,_3,_4,_5),IDX)=>#loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,_3,_4,_5),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(IDX)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isInt(NARGS)) ensures #token("true","Bool") [UNIQUE_ID(a5f4d5ad45e01fbc7c63b4ec0bb5de396f2278420624c4ba30ba464eec770e91) contentStartColumn(10) contentStartLine(1756) org.kframework.attributes.Location(Location(1756,10,1757,155)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(NAME)
					varNAME := kapp3.List[0] // lhs KVariable NAME
					if varNARGS, t := kapp2.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varBLOCKS := kapp1.List[1] // lhs KVariable BLOCKS
						varFUNCS := kapp0.List[1] // lhs KVariable FUNCS
						if kapp4, t := c2.(*m.KApply); t && kapp4.Label == m.LblXltprogramXgt && len(kapp4.List) == 6 { // `<program>`(_0,_1,_2,_3,_4,_5)
							varXu0 := kapp4.List[0] // lhs KVariable _0
							varXu1 := kapp4.List[1] // lhs KVariable _1
							varXu2 := kapp4.List[2] // lhs KVariable _2
							varXu3 := kapp4.List[3] // lhs KVariable _3
							varXu4 := kapp4.List[4] // lhs KVariable _4
							varXu5 := kapp4.List[5] // lhs KVariable _5
							if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES
								eval261, err261 := evalIsBlocks( // isBlocks(BLOCKS)
									varBLOCKS,
									config, -1)
								if err261 != nil {
									return m.NoResult, err261
								}
								eval262, err262 := evalIsFuncIDsCell( // isFuncIdsCell(_1)
									varXu1,
									config, -1)
								if err262 != nil {
									return m.NoResult, err262
								}
								eval263, err263 := evalIsProgramSizeCell( // isProgramSizeCell(_4)
									varXu4,
									config, -1)
								if err263 != nil {
									return m.NoResult, err263
								}
								eval264, err264 := evalIsExportedCell( // isExportedCell(_3)
									varXu3,
									config, -1)
								if err264 != nil {
									return m.NoResult, err264
								}
								eval265, err265 := evalIsFunctionsCell( // isFunctionsCell(_0)
									varXu0,
									config, -1)
								if err265 != nil {
									return m.NoResult, err265
								}
								eval266, err266 := evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
									varXu2,
									config, -1)
								if err266 != nil {
									return m.NoResult, err266
								}
								eval267, err267 := evalIsContractCodeCell( // isContractCodeCell(_5)
									varXu5,
									config, -1)
								if err267 != nil {
									return m.NoResult, err267
								}
								eval268, err268 := evalIsIeleName( // isIeleName(NAME)
									varNAME,
									config, -1)
								if err268 != nil {
									return m.NoResult, err268
								}
								eval269, err269 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(FUNCS)
									varFUNCS,
									config, -1)
								if err269 != nil {
									return m.NoResult, err269
								}
								if (((m.IsTrue(eval261) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
								   ((((((/* rhs KToken */ /* && */
								   m.IsTrue(eval262)) &&
								   (m.IsTrue(eval263))) &&
								   (m.IsTrue(eval264))) &&
								   (m.IsTrue(eval265))) &&
								   (m.IsTrue(eval266))) &&
								   (m.IsTrue(eval267)))) &&
								   (m.IsTrue(eval268))) &&
								   (m.IsTrue(eval269)) /* && */ /* rhs precomputed isInt(NARGS) */  {
									// RHS
									traceRuleApply("FUNC", 408, "{| rule #loadDeclarations(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),NARGS),BLOCKS),FUNCS),`<program>`(_0,_1,_2,_3,_4,_5),IDX)=>#loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,_3,_4,_5),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(IDX)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isInt(NARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a5f4d5ad45e01fbc7c63b4ec0bb5de396f2278420624c4ba30ba464eec770e91) contentStartColumn(10) contentStartLine(1756) org.kframework.attributes.Location(Location(1756,10,1757,155)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval272, err272 := evalInitInstructionsCell(config, -1) // initInstructionsCell(.KList)
									if err272 != nil {
										return m.NoResult, err272
									}
									eval273, err273 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
									if err273 != nil {
										return m.NoResult, err273
									}
									eval274, err274 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
									if err274 != nil {
										return m.NoResult, err274
									}
									eval271, err271 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList)))
										&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
											varNAME,
										}},
										&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
											&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
												varNAME,
											}},
											&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
												varNARGS,
											}},
											eval272,
											eval273,
											eval274,
										}},
										config, -1)
									if err271 != nil {
										return m.NoResult, err271
									}
									eval270, err270 := evalXhashloadFunction( // #loadFunction(FUNCS,BLOCKS,`<program>`(_0,_1,_2,_3,_4,_5),NAME,`FunctionCellMapItem`(`<funcId>`(NAME),`<function>`(`<funcId>`(NAME),`<nparams>`(NARGS),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))),IDX)
										varFUNCS,
										varBLOCKS,
										&m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
											varXu0,
											varXu1,
											varXu2,
											varXu3,
											varXu4,
											varXu5,
										}},
										varNAME,
										eval271,
										varIDX,
										config, -1)
									if err270 != nil {
										return m.NoResult, err270
									}
									return eval270, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #409
	// source: iele.k @1762
	// {| rule #loadDeclarations(`.List{"topLevelDefinitionList"}`(.KList),`<program>`(_0,_1,_2,_3,_4,_5),_96)=>`<program>`(_0,_1,_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)),isInt(_96)) ensures #token("true","Bool") [UNIQUE_ID(4f1280ab5705a0087548097815e593c174f5026310645e67760078d873285f80) contentStartColumn(10) contentStartLine(1762) org.kframework.attributes.Location(Location(1762,10,1762,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"topLevelDefinitionList"}`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblXltprogramXgt && len(kapp1.List) == 6 { // `<program>`(_0,_1,_2,_3,_4,_5)
			varXu0 := kapp1.List[0] // lhs KVariable _0
			varXu1 := kapp1.List[1] // lhs KVariable _1
			varXu2 := kapp1.List[2] // lhs KVariable _2
			varXu3 := kapp1.List[3] // lhs KVariable _3
			varXu4 := kapp1.List[4] // lhs KVariable _4
			varXu5 := kapp1.List[5] // lhs KVariable _5
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval275, err275 := evalIsFuncIDsCell( // isFuncIdsCell(_1)
					varXu1,
					config, -1)
				if err275 != nil {
					return m.NoResult, err275
				}
				eval276, err276 := evalIsProgramSizeCell( // isProgramSizeCell(_4)
					varXu4,
					config, -1)
				if err276 != nil {
					return m.NoResult, err276
				}
				eval277, err277 := evalIsExportedCell( // isExportedCell(_3)
					varXu3,
					config, -1)
				if err277 != nil {
					return m.NoResult, err277
				}
				eval278, err278 := evalIsFunctionsCell( // isFunctionsCell(_0)
					varXu0,
					config, -1)
				if err278 != nil {
					return m.NoResult, err278
				}
				eval279, err279 := evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
					varXu2,
					config, -1)
				if err279 != nil {
					return m.NoResult, err279
				}
				eval280, err280 := evalIsContractCodeCell( // isContractCodeCell(_5)
					varXu5,
					config, -1)
				if err280 != nil {
					return m.NoResult, err280
				}
				if (((((/* rhs KToken */ /* && */
				   m.IsTrue(eval275)) &&
				   (m.IsTrue(eval276))) &&
				   (m.IsTrue(eval277))) &&
				   (m.IsTrue(eval278))) &&
				   (m.IsTrue(eval279))) &&
				   (m.IsTrue(eval280)) /* && */ /* rhs precomputed isInt(_96) */  {
					// RHS
					traceRuleApply("FUNC", 409, "{| rule #loadDeclarations(`.List{\"topLevelDefinitionList\"}`(.KList),`<program>`(_0,_1,_2,_3,_4,_5),_96)=>`<program>`(_0,_1,_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)),isInt(_96)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f1280ab5705a0087548097815e593c174f5026310645e67760078d873285f80) contentStartColumn(10) contentStartLine(1762) org.kframework.attributes.Location(Location(1762,10,1762,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return &m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
						varXu0,
						varXu1,
						varXu2,
						varXu3,
						varXu4,
						varXu5,
					}}, nil
				}
			}
		}
	}

	// rule #410
	// source: iele.k @1760
	// {| rule #loadDeclarations(topLevelDefinitionList(`externalcontract__IELE-COMMON`(_88),FUNCS),`<program>`(_0,_1,_2,_3,_4,_5),IDX)=>#loadDeclarations(FUNCS,`<program>`(_0,_1,_2,_3,_4,_5),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isIeleName(_88)),isTopLevelDefinitions(FUNCS)) ensures #token("true","Bool") [UNIQUE_ID(a2a786834d177b5203766aad5f09ee8b0207748385c2ab6ba032f8635161a950) contentStartColumn(10) contentStartLine(1760) org.kframework.attributes.Location(Location(1760,10,1761,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`externalcontract__IELE-COMMON`(_88),FUNCS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblExternalcontractXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `externalcontract__IELE-COMMON`(_88)
			varXu88 := kapp1.List[0] // lhs KVariable _88
			varFUNCS := kapp0.List[1] // lhs KVariable FUNCS
			if kapp2, t := c2.(*m.KApply); t && kapp2.Label == m.LblXltprogramXgt && len(kapp2.List) == 6 { // `<program>`(_0,_1,_2,_3,_4,_5)
				varXu0 := kapp2.List[0] // lhs KVariable _0
				varXu1 := kapp2.List[1] // lhs KVariable _1
				varXu2 := kapp2.List[2] // lhs KVariable _2
				varXu3 := kapp2.List[3] // lhs KVariable _3
				varXu4 := kapp2.List[4] // lhs KVariable _4
				varXu5 := kapp2.List[5] // lhs KVariable _5
				if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval281, err281 := evalIsFuncIDsCell( // isFuncIdsCell(_1)
						varXu1,
						config, -1)
					if err281 != nil {
						return m.NoResult, err281
					}
					eval282, err282 := evalIsProgramSizeCell( // isProgramSizeCell(_4)
						varXu4,
						config, -1)
					if err282 != nil {
						return m.NoResult, err282
					}
					eval283, err283 := evalIsExportedCell( // isExportedCell(_3)
						varXu3,
						config, -1)
					if err283 != nil {
						return m.NoResult, err283
					}
					eval284, err284 := evalIsFunctionsCell( // isFunctionsCell(_0)
						varXu0,
						config, -1)
					if err284 != nil {
						return m.NoResult, err284
					}
					eval285, err285 := evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
						varXu2,
						config, -1)
					if err285 != nil {
						return m.NoResult, err285
					}
					eval286, err286 := evalIsContractCodeCell( // isContractCodeCell(_5)
						varXu5,
						config, -1)
					if err286 != nil {
						return m.NoResult, err286
					}
					eval287, err287 := evalIsIeleName( // isIeleName(_88)
						varXu88,
						config, -1)
					if err287 != nil {
						return m.NoResult, err287
					}
					eval288, err288 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(FUNCS)
						varFUNCS,
						config, -1)
					if err288 != nil {
						return m.NoResult, err288
					}
					if ((/* rhs precomputed isInt(IDX) */ /* && */
					   (((((/* rhs KToken */ /* && */
					   m.IsTrue(eval281)) &&
					   (m.IsTrue(eval282))) &&
					   (m.IsTrue(eval283))) &&
					   (m.IsTrue(eval284))) &&
					   (m.IsTrue(eval285))) &&
					   (m.IsTrue(eval286))) &&
					   (m.IsTrue(eval287))) &&
					   (m.IsTrue(eval288)) {
						// RHS
						traceRuleApply("FUNC", 410, "{| rule #loadDeclarations(topLevelDefinitionList(`externalcontract__IELE-COMMON`(_88),FUNCS),`<program>`(_0,_1,_2,_3,_4,_5),IDX)=>#loadDeclarations(FUNCS,`<program>`(_0,_1,_2,_3,_4,_5),IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isIeleName(_88)),isTopLevelDefinitions(FUNCS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a2a786834d177b5203766aad5f09ee8b0207748385c2ab6ba032f8635161a950) contentStartColumn(10) contentStartLine(1760) org.kframework.attributes.Location(Location(1760,10,1761,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval289, err289 := evalXhashloadDeclarations( // #loadDeclarations(FUNCS,`<program>`(_0,_1,_2,_3,_4,_5),IDX)
							varFUNCS,
							&m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
								varXu0,
								varXu1,
								varXu2,
								varXu3,
								varXu4,
								varXu5,
							}},
							varIDX,
							config, -1)
						if err289 != nil {
							return m.NoResult, err289
						}
						return eval289, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadDeclarations", args: []m.K{c1, c2, c3}}
}

func evalIsFunctionNameCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #411
	// source: ? @?
	// {| rule isFunctionNameCellOpt(#KToken(#token("FunctionNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 411, "{| rule isFunctionNameCellOpt(#KToken(#token(\"FunctionNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #412
	// source: ? @?
	// {| rule isFunctionNameCellOpt(`<functionName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionNameXgt && len(kapp0.List) == 1 { // `<functionName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval290, err290 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err290 != nil {
			return m.NoResult, err290
		}
		if m.IsTrue(eval290) {
			// RHS
			traceRuleApply("FUNC", 412, "{| rule isFunctionNameCellOpt(`<functionName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #413
	// source: ? @?
	// {| rule isFunctionNameCellOpt(noFunctionNameCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFunctionNameCell && len(kapp0.List) == 0 { // noFunctionNameCell(.KList)
		// RHS
		traceRuleApply("FUNC", 413, "{| rule isFunctionNameCellOpt(noFunctionNameCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #414
	// source: ? @?
	// {| rule isFunctionNameCellOpt(#KToken(#token("FunctionNameCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionNameCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 414, "{| rule isFunctionNameCellOpt(#KToken(#token(\"FunctionNameCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #415
	// source: ? @?
	// {| rule isFunctionNameCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 415, "{| rule isFunctionNameCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsExpModInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #416
	// source: ? @?
	// {| rule isExpModInst(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval291, err291 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err291 != nil {
			return m.NoResult, err291
		}
		eval292, err292 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err292 != nil {
			return m.NoResult, err292
		}
		eval293, err293 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err293 != nil {
			return m.NoResult, err293
		}
		eval294, err294 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err294 != nil {
			return m.NoResult, err294
		}
		if (((m.IsTrue(eval291)) &&
		   (m.IsTrue(eval292))) &&
		   (m.IsTrue(eval293))) &&
		   (m.IsTrue(eval294)) {
			// RHS
			traceRuleApply("FUNC", 416, "{| rule isExpModInst(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #417
	// source: ? @?
	// {| rule isExpModInst(#KToken(#token("ExpModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExpModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 417, "{| rule isExpModInst(#KToken(#token(\"ExpModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #418
	// source: ? @?
	// {| rule isExpModInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 418, "{| rule isExpModInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTopLevelDefinition(c m.K, config m.K, guard int) (m.K, error) {
	// rule #419
	// source: ? @?
	// {| rule isTopLevelDefinition(#KToken(#token("ContractDeclaration","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractDeclaration { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 419, "{| rule isTopLevelDefinition(#KToken(#token(\"ContractDeclaration\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #420
	// source: ? @?
	// {| rule isTopLevelDefinition(`definepublic_{_}_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `definepublic_{_}_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval295, err295 := evalIsFunctionSignature( // isFunctionSignature(K0)
			varK0,
			config, -1)
		if err295 != nil {
			return m.NoResult, err295
		}
		eval296, err296 := evalIsBlocks( // isBlocks(K1)
			varK1,
			config, -1)
		if err296 != nil {
			return m.NoResult, err296
		}
		if (m.IsTrue(eval295)) &&
		   (m.IsTrue(eval296)) {
			// RHS
			traceRuleApply("FUNC", 420, "{| rule isTopLevelDefinition(`definepublic_{_}_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #421
	// source: ? @?
	// {| rule isTopLevelDefinition(#KToken(#token("FunctionDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 421, "{| rule isTopLevelDefinition(#KToken(#token(\"FunctionDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #422
	// source: ? @?
	// {| rule isTopLevelDefinition(#KToken(#token("TopLevelDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTopLevelDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 422, "{| rule isTopLevelDefinition(#KToken(#token(\"TopLevelDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #423
	// source: ? @?
	// {| rule isTopLevelDefinition(`define_{_}_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `define_{_}_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval297, err297 := evalIsFunctionSignature( // isFunctionSignature(K0)
			varK0,
			config, -1)
		if err297 != nil {
			return m.NoResult, err297
		}
		eval298, err298 := evalIsBlocks( // isBlocks(K1)
			varK1,
			config, -1)
		if err298 != nil {
			return m.NoResult, err298
		}
		if (m.IsTrue(eval297)) &&
		   (m.IsTrue(eval298)) {
			// RHS
			traceRuleApply("FUNC", 423, "{| rule isTopLevelDefinition(`define_{_}_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #424
	// source: ? @?
	// {| rule isTopLevelDefinition(`externalcontract__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblExternalcontractXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `externalcontract__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval299, err299 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err299 != nil {
			return m.NoResult, err299
		}
		if m.IsTrue(eval299) {
			// RHS
			traceRuleApply("FUNC", 424, "{| rule isTopLevelDefinition(`externalcontract__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #425
	// source: ? @?
	// {| rule isTopLevelDefinition(globalDefinition(K0,K1))=>#token("true","Bool") requires `_andBool_`(isGlobalName(K0),isIntConstant(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlobalDefinition && len(kapp0.List) == 2 { // globalDefinition(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval300, err300 := evalIsGlobalName( // isGlobalName(K0)
			varK0,
			config, -1)
		if err300 != nil {
			return m.NoResult, err300
		}
		eval301, err301 := evalIsIntConstant( // isIntConstant(K1)
			varK1,
			config, -1)
		if err301 != nil {
			return m.NoResult, err301
		}
		if (m.IsTrue(eval300)) &&
		   (m.IsTrue(eval301)) {
			// RHS
			traceRuleApply("FUNC", 425, "{| rule isTopLevelDefinition(globalDefinition(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isGlobalName(K0),isIntConstant(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #426
	// source: ? @?
	// {| rule isTopLevelDefinition(#KToken(#token("GlobalDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 426, "{| rule isTopLevelDefinition(#KToken(#token(\"GlobalDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #427
	// source: ? @?
	// {| rule isTopLevelDefinition(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 427, "{| rule isTopLevelDefinition(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFidCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #428
	// source: ? @?
	// {| rule isFidCell(`<fid>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfidXgt && len(kapp0.List) == 1 { // `<fid>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval302, err302 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err302 != nil {
			return m.NoResult, err302
		}
		if m.IsTrue(eval302) {
			// RHS
			traceRuleApply("FUNC", 428, "{| rule isFidCell(`<fid>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #429
	// source: ? @?
	// {| rule isFidCell(#KToken(#token("FidCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFidCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 429, "{| rule isFidCell(#KToken(#token(\"FidCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #430
	// source: ? @?
	// {| rule isFidCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 430, "{| rule isFidCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalKeccak(c m.K, config m.K, guard int) (m.K, error) {
	// rule #431
	// source: data.k @237
	// {| rule keccak(WS)=>#parseHexWord(`Keccak256`(`Bytes2String`(WS))) requires isBytes(WS) ensures #token("true","Bool") [UNIQUE_ID(2accf49f3e464e7356a448e1ca9558419ee12ffa7e3c3a54357c938209057f2d) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varWS, t := c.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		// REQUIRES precomputed isBytes(WS)
		// RHS
		traceRuleApply("FUNC", 431, "{| rule keccak(WS)=>#parseHexWord(`Keccak256`(`Bytes2String`(WS))) requires isBytes(WS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2accf49f3e464e7356a448e1ca9558419ee12ffa7e3c3a54357c938209057f2d) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval305, err305 := evalBytes2String( // `Bytes2String`(WS)
			varWS,
			config, -1)
		if err305 != nil {
			return m.NoResult, err305
		}
		eval304, err304 := evalKeccak256( // `Keccak256`(`Bytes2String`(WS))
			eval305,
			config, -1)
		if err304 != nil {
			return m.NoResult, err304
		}
		eval303, err303 := evalXhashparseHexWord( // #parseHexWord(`Keccak256`(`Bytes2String`(WS)))
			eval304,
			config, -1)
		if err303 != nil {
			return m.NoResult, err303
		}
		return eval303, nil
	}

	return m.NoResult, &stuckError{funcName: "evalKeccak", args: []m.K{c}}
}

func evalXhashconfigurationXuKXhyphenREFLECTION(config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.configuration
	lbl := m.LblXhashconfigurationXuKXhyphenREFLECTION // #configuration_K-REFLECTION
	sort := m.SortK
	if hookRes, hookErr := kreflectionHooks.configuration(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.configuration, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashconfigurationXuKXhyphenREFLECTION", args: nil}
}

func evalIsFloat(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: FLOAT.Float
	if _, t := c.(*m.Float); t {
		return m.BoolTrue, nil
	}
	// rule #432
	// source: ? @?
	// {| rule isFloat(#KToken(#token("Float","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFloat { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 432, "{| rule isFloat(#KToken(#token(\"Float\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #433
	// source: ? @?
	// {| rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 433, "{| rule isFloat(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdecodeLengthPrefixLength(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #434
	// source: data.k @583
	// {| rule #decodeLengthPrefixLength(`#list_IELE-DATA`(.KList),STR,START,B0)=>#decodeLengthPrefixLengthAux(`#list_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token("true","Bool") [UNIQUE_ID(6a72097f7b80a82a470909177ceb9312b2a3e39ad6328b26164d44f4766b521e) contentStartColumn(10) contentStartLine(583) org.kframework.attributes.Location(Location(583,10,583,249)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXhashlistXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `#list_IELE-DATA`(.KList)
		if varSTR, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varSTART, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varB0, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isString(STR) && isInt(START) && isInt(B0)
					// RHS
					traceRuleApply("FUNC", 434, "{| rule #decodeLengthPrefixLength(`#list_IELE-DATA`(.KList),STR,START,B0)=>#decodeLengthPrefixLengthAux(`#list_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token(\"192\",\"Int\")),#token(\"56\",\"Int\")),#token(\"1\",\"Int\")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token(\"1\",\"Int\")),`_+Int_`(`_+Int_`(START,#token(\"1\",\"Int\")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token(\"192\",\"Int\")),#token(\"56\",\"Int\")),#token(\"1\",\"Int\"))))),bigEndianBytes(.KList),unsignedBytes(.KList))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6a72097f7b80a82a470909177ceb9312b2a3e39ad6328b26164d44f4766b521e) contentStartColumn(10) contentStartLine(583) org.kframework.attributes.Location(Location(583,10,583,249)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval309, err309 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("192","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("192"),
						config, -1)
					if err309 != nil {
						return m.NoResult, err309
					}
					eval308, err308 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int"))
						eval309,
						/* rhs KToken */ m.NewIntFromString("56"),
						config, -1)
					if err308 != nil {
						return m.NoResult, err308
					}
					eval307, err307 := evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))
						eval308,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err307 != nil {
						return m.NoResult, err307
					}
					eval313, err313 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err313 != nil {
						return m.NoResult, err313
					}
					eval315, err315 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err315 != nil {
						return m.NoResult, err315
					}
					eval318, err318 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("192","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("192"),
						config, -1)
					if err318 != nil {
						return m.NoResult, err318
					}
					eval317, err317 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int"))
						eval318,
						/* rhs KToken */ m.NewIntFromString("56"),
						config, -1)
					if err317 != nil {
						return m.NoResult, err317
					}
					eval316, err316 := evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))
						eval317,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err316 != nil {
						return m.NoResult, err316
					}
					eval314, err314 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int")))
						eval315,
						eval316,
						config, -1)
					if err314 != nil {
						return m.NoResult, err314
					}
					eval312, err312 := evalSubstrString( // substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))))
						varSTR,
						eval313,
						eval314,
						config, -1)
					if err312 != nil {
						return m.NoResult, err312
					}
					eval311, err311 := evalString2Bytes( // `String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int")))))
						eval312,
						config, -1)
					if err311 != nil {
						return m.NoResult, err311
					}
					eval310, err310 := evalBytes2Int( // `Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList))
						eval311,
						&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
						}},
						&m.KApply{Label: m.LblUnsignedBytes, List: []m.K{ // as-is unsignedBytes
						}},
						config, -1)
					if err310 != nil {
						return m.NoResult, err310
					}
					eval306, err306 := evalXhashdecodeLengthPrefixLengthAux( // #decodeLengthPrefixLengthAux(`#list_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("192","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList)))
						&m.KApply{Label: m.LblXhashlistXuIELEXhyphenDATA, List: []m.K{ // as-is #list_IELE-DATA
						}},
						varSTART,
						eval307,
						eval310,
						config, -1)
					if err306 != nil {
						return m.NoResult, err306
					}
					return eval306, nil
				}
			}
		}
	}

	// rule #435
	// source: data.k @582
	// {| rule #decodeLengthPrefixLength(`#str_IELE-DATA`(.KList),STR,START,B0)=>#decodeLengthPrefixLengthAux(`#str_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token("true","Bool") [UNIQUE_ID(7e20d0eb1fc1cbe3a1744c90ed7f8dda239e58307b241032f056c31cf77eca77) contentStartColumn(10) contentStartLine(582) org.kframework.attributes.Location(Location(582,10,582,249)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXhashstrXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `#str_IELE-DATA`(.KList)
		if varSTR, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varSTART, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varB0, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isString(STR) && isInt(START) && isInt(B0)
					// RHS
					traceRuleApply("FUNC", 435, "{| rule #decodeLengthPrefixLength(`#str_IELE-DATA`(.KList),STR,START,B0)=>#decodeLengthPrefixLengthAux(`#str_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token(\"128\",\"Int\")),#token(\"56\",\"Int\")),#token(\"1\",\"Int\")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token(\"1\",\"Int\")),`_+Int_`(`_+Int_`(START,#token(\"1\",\"Int\")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token(\"128\",\"Int\")),#token(\"56\",\"Int\")),#token(\"1\",\"Int\"))))),bigEndianBytes(.KList),unsignedBytes(.KList))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7e20d0eb1fc1cbe3a1744c90ed7f8dda239e58307b241032f056c31cf77eca77) contentStartColumn(10) contentStartLine(582) org.kframework.attributes.Location(Location(582,10,582,249)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval322, err322 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("128","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("128"),
						config, -1)
					if err322 != nil {
						return m.NoResult, err322
					}
					eval321, err321 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int"))
						eval322,
						/* rhs KToken */ m.NewIntFromString("56"),
						config, -1)
					if err321 != nil {
						return m.NoResult, err321
					}
					eval320, err320 := evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))
						eval321,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err320 != nil {
						return m.NoResult, err320
					}
					eval326, err326 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err326 != nil {
						return m.NoResult, err326
					}
					eval328, err328 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err328 != nil {
						return m.NoResult, err328
					}
					eval331, err331 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("128","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("128"),
						config, -1)
					if err331 != nil {
						return m.NoResult, err331
					}
					eval330, err330 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int"))
						eval331,
						/* rhs KToken */ m.NewIntFromString("56"),
						config, -1)
					if err330 != nil {
						return m.NoResult, err330
					}
					eval329, err329 := evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))
						eval330,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err329 != nil {
						return m.NoResult, err329
					}
					eval327, err327 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int")))
						eval328,
						eval329,
						config, -1)
					if err327 != nil {
						return m.NoResult, err327
					}
					eval325, err325 := evalSubstrString( // substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))))
						varSTR,
						eval326,
						eval327,
						config, -1)
					if err325 != nil {
						return m.NoResult, err325
					}
					eval324, err324 := evalString2Bytes( // `String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int")))))
						eval325,
						config, -1)
					if err324 != nil {
						return m.NoResult, err324
					}
					eval323, err323 := evalBytes2Int( // `Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList))
						eval324,
						&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
						}},
						&m.KApply{Label: m.LblUnsignedBytes, List: []m.K{ // as-is unsignedBytes
						}},
						config, -1)
					if err323 != nil {
						return m.NoResult, err323
					}
					eval319, err319 := evalXhashdecodeLengthPrefixLengthAux( // #decodeLengthPrefixLengthAux(`#str_IELE-DATA`(.KList),START,`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int")),`Bytes2Int`(`String2Bytes`(substrString(STR,`_+Int_`(START,#token("1","Int")),`_+Int_`(`_+Int_`(START,#token("1","Int")),`_+Int_`(`_-Int__INT`(`_-Int__INT`(B0,#token("128","Int")),#token("56","Int")),#token("1","Int"))))),bigEndianBytes(.KList),unsignedBytes(.KList)))
						&m.KApply{Label: m.LblXhashstrXuIELEXhyphenDATA, List: []m.K{ // as-is #str_IELE-DATA
						}},
						varSTART,
						eval320,
						eval323,
						config, -1)
					if err319 != nil {
						return m.NoResult, err319
					}
					return eval319, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdecodeLengthPrefixLength", args: []m.K{c1, c2, c3, c4}}
}

func evalInitPeakMemoryCell(config m.K, guard int) (m.K, error) {
	// rule #436
	// source: ? @?
	// {| rule initPeakMemoryCell(.KList)=>`<peakMemory>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ab6b28f72c9cd2e261bd4f3968b261d1d06a25d50b52bf1a9177379f721df76) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 436, "{| rule initPeakMemoryCell(.KList)=>`<peakMemory>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ab6b28f72c9cd2e261bd4f3968b261d1d06a25d50b52bf1a9177379f721df76) initializer()] |}")
	return &m.KApply{Label: m.LblXltpeakMemoryXgt, List: []m.K{ // as-is <peakMemory>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitPeakMemoryCell K = evalInitPeakMemoryCell(m.InternedBottom)

func evalIsLocalNames(c m.K, config m.K, guard int) (m.K, error) {
	// rule #437
	// source: ? @?
	// {| rule isLocalNames(#KToken(#token("LocalNames","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalNames { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 437, "{| rule isLocalNames(#KToken(#token(\"LocalNames\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #438
	// source: ? @?
	// {| rule isLocalNames(`.List{"localNameList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelocalNameListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"localNameList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 438, "{| rule isLocalNames(`.List{\"localNameList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #439
	// source: ? @?
	// {| rule isLocalNames(localNameList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLocalName(K0),isLocalNames(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLocalNameList && len(kapp0.List) == 2 { // localNameList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval332, err332 := evalIsLocalName( // isLocalName(K0)
			varK0,
			config, -1)
		if err332 != nil {
			return m.NoResult, err332
		}
		eval333, err333 := evalIsLocalNames( // isLocalNames(K1)
			varK1,
			config, -1)
		if err333 != nil {
			return m.NoResult, err333
		}
		if (m.IsTrue(eval332)) &&
		   (m.IsTrue(eval333)) {
			// RHS
			traceRuleApply("FUNC", 439, "{| rule isLocalNames(localNameList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLocalName(K0),isLocalNames(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #440
	// source: ? @?
	// {| rule isLocalNames(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 440, "{| rule isLocalNames(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBlockhashCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #441
	// source: ? @?
	// {| rule isBlockhashCellOpt(`<blockhash>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltblockhashXgt && len(kapp0.List) == 1 { // `<blockhash>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 441, "{| rule isBlockhashCellOpt(`<blockhash>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #442
	// source: ? @?
	// {| rule isBlockhashCellOpt(#KToken(#token("BlockhashCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBlockhashCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 442, "{| rule isBlockhashCellOpt(#KToken(#token(\"BlockhashCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #443
	// source: ? @?
	// {| rule isBlockhashCellOpt(noBlockhashCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoBlockhashCell && len(kapp0.List) == 0 { // noBlockhashCell(.KList)
		// RHS
		traceRuleApply("FUNC", 443, "{| rule isBlockhashCellOpt(noBlockhashCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #444
	// source: ? @?
	// {| rule isBlockhashCellOpt(#KToken(#token("BlockhashCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBlockhashCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 444, "{| rule isBlockhashCellOpt(#KToken(#token(\"BlockhashCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #445
	// source: ? @?
	// {| rule isBlockhashCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 445, "{| rule isBlockhashCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalChop(c m.K, config m.K, guard int) (m.K, error) {
	// rule #446
	// source: data.k @61
	// {| rule chop(I)=>bitRangeInt(I,#token("0","Int"),#token("256","Int")) requires `_andBool_`(isInt(I),`_orBool__BOOL`(`_<Int__INT`(I,#token("0","Int")),`_>=Int__INT`(I,`pow256_IELE-DATA`(.KList)))) ensures #token("true","Bool") [UNIQUE_ID(ac7f12bc57e70d05515569efc2f9d08f6efcdfecbd6c45b9c92150067dd2755c) contentStartColumn(10) contentStartLine(61) org.kframework.attributes.Location(Location(61,10,61,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval334, err334 := evalXuXltIntXuXuINT( // `_<Int__INT`(I,#token("0","Int"))
			varI,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err334 != nil {
			return m.NoResult, err334
		}
		eval336, err336 := evalPow256XuIELEXhyphenDATA(config, -1) // `pow256_IELE-DATA`(.KList)
		if err336 != nil {
			return m.NoResult, err336
		}
		eval335, err335 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(I,`pow256_IELE-DATA`(.KList))
			varI,
			eval336,
			config, -1)
		if err335 != nil {
			return m.NoResult, err335
		}
		if /* rhs precomputed isInt(I) */ /* && */
		   (m.IsTrue(eval334)) || (m.IsTrue(eval335)) {
			// RHS
			traceRuleApply("FUNC", 446, "{| rule chop(I)=>bitRangeInt(I,#token(\"0\",\"Int\"),#token(\"256\",\"Int\")) requires `_andBool_`(isInt(I),`_orBool__BOOL`(`_<Int__INT`(I,#token(\"0\",\"Int\")),`_>=Int__INT`(I,`pow256_IELE-DATA`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ac7f12bc57e70d05515569efc2f9d08f6efcdfecbd6c45b9c92150067dd2755c) contentStartColumn(10) contentStartLine(61) org.kframework.attributes.Location(Location(61,10,61,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval337, err337 := evalBitRangeInt( // bitRangeInt(I,#token("0","Int"),#token("256","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("0"),
				/* rhs KToken */ m.NewIntFromString("256"),
				config, -1)
			if err337 != nil {
				return m.NoResult, err337
			}
			return eval337, nil
		}
	}

	// rule #447
	// source: data.k @62
	// {| rule chop(I)=>I requires `_andBool_`(isInt(I),`_andBool_`(`_>=Int__INT`(I,#token("0","Int")),`_<Int__INT`(I,`pow256_IELE-DATA`(.KList)))) ensures #token("true","Bool") [UNIQUE_ID(5fd649ba5ca714377ec7ae9de8d2a5fa4c5580ecc0b7e17ccb0ca19ddde8a214) contentStartColumn(10) contentStartLine(62) org.kframework.attributes.Location(Location(62,10,62,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval338, err338 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(I,#token("0","Int"))
			varI,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err338 != nil {
			return m.NoResult, err338
		}
		eval340, err340 := evalPow256XuIELEXhyphenDATA(config, -1) // `pow256_IELE-DATA`(.KList)
		if err340 != nil {
			return m.NoResult, err340
		}
		eval339, err339 := evalXuXltIntXuXuINT( // `_<Int__INT`(I,`pow256_IELE-DATA`(.KList))
			varI,
			eval340,
			config, -1)
		if err339 != nil {
			return m.NoResult, err339
		}
		if /* rhs precomputed isInt(I) */ /* && */
		   (m.IsTrue(eval338)) &&
		   (m.IsTrue(eval339)) {
			// RHS
			traceRuleApply("FUNC", 447, "{| rule chop(I)=>I requires `_andBool_`(isInt(I),`_andBool_`(`_>=Int__INT`(I,#token(\"0\",\"Int\")),`_<Int__INT`(I,`pow256_IELE-DATA`(.KList)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5fd649ba5ca714377ec7ae9de8d2a5fa4c5580ecc0b7e17ccb0ca19ddde8a214) contentStartColumn(10) contentStartLine(62) org.kframework.attributes.Location(Location(62,10,62,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return varI, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalChop", args: []m.K{c}}
}

func evalIsRegsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #448
	// source: ? @?
	// {| rule isRegsCell(`<regs>`(K0))=>#token("true","Bool") requires isArray(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltregsXgt && len(kapp0.List) == 1 { // `<regs>`(K0)
		if varK0, t := kapp0.List[0].(*m.Array); t && varK0.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES precomputed isArray(K0)
			// RHS
			traceRuleApply("FUNC", 448, "{| rule isRegsCell(`<regs>`(K0))=>#token(\"true\",\"Bool\") requires isArray(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #449
	// source: ? @?
	// {| rule isRegsCell(#KToken(#token("RegsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRegsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 449, "{| rule isRegsCell(#KToken(#token(\"RegsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #450
	// source: ? @?
	// {| rule isRegsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 450, "{| rule isRegsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsArgsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #451
	// source: ? @?
	// {| rule isArgsCellOpt(noArgsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoArgsCell && len(kapp0.List) == 0 { // noArgsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 451, "{| rule isArgsCellOpt(noArgsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #452
	// source: ? @?
	// {| rule isArgsCellOpt(#KToken(#token("ArgsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortArgsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 452, "{| rule isArgsCellOpt(#KToken(#token(\"ArgsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #453
	// source: ? @?
	// {| rule isArgsCellOpt(`<args>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltargsXgt && len(kapp0.List) == 1 { // `<args>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval341, err341 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err341 != nil {
			return m.NoResult, err341
		}
		if m.IsTrue(eval341) {
			// RHS
			traceRuleApply("FUNC", 453, "{| rule isArgsCellOpt(`<args>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #454
	// source: ? @?
	// {| rule isArgsCellOpt(#KToken(#token("ArgsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortArgsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 454, "{| rule isArgsCellOpt(#KToken(#token(\"ArgsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #455
	// source: ? @?
	// {| rule isArgsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 455, "{| rule isArgsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXplusIntXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.add
	lbl := m.LblXuXplusIntXu // _+Int_
	sort := m.SortInt
	if hookRes, hookErr := intHooks.add(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.add, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusIntXu", args: []m.K{c1, c2}}
}

func evalIsSendtoCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #456
	// source: ? @?
	// {| rule isSendtoCell(`<sendto>`(K0))=>#token("true","Bool") requires isAccount(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsendtoXgt && len(kapp0.List) == 1 { // `<sendto>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval342, err342 := evalIsAccount( // isAccount(K0)
			varK0,
			config, -1)
		if err342 != nil {
			return m.NoResult, err342
		}
		if m.IsTrue(eval342) {
			// RHS
			traceRuleApply("FUNC", 456, "{| rule isSendtoCell(`<sendto>`(K0))=>#token(\"true\",\"Bool\") requires isAccount(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #457
	// source: ? @?
	// {| rule isSendtoCell(#KToken(#token("SendtoCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSendtoCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 457, "{| rule isSendtoCell(#KToken(#token(\"SendtoCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #458
	// source: ? @?
	// {| rule isSendtoCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 458, "{| rule isSendtoCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTimestampCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #459
	// source: ? @?
	// {| rule isTimestampCellOpt(noTimestampCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTimestampCell && len(kapp0.List) == 0 { // noTimestampCell(.KList)
		// RHS
		traceRuleApply("FUNC", 459, "{| rule isTimestampCellOpt(noTimestampCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #460
	// source: ? @?
	// {| rule isTimestampCellOpt(#KToken(#token("TimestampCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTimestampCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 460, "{| rule isTimestampCellOpt(#KToken(#token(\"TimestampCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #461
	// source: ? @?
	// {| rule isTimestampCellOpt(`<timestamp>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttimestampXgt && len(kapp0.List) == 1 { // `<timestamp>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 461, "{| rule isTimestampCellOpt(`<timestamp>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #462
	// source: ? @?
	// {| rule isTimestampCellOpt(#KToken(#token("TimestampCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTimestampCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 462, "{| rule isTimestampCellOpt(#KToken(#token(\"TimestampCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #463
	// source: ? @?
	// {| rule isTimestampCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 463, "{| rule isTimestampCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashrev(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #464
	// source: data.k @273
	// {| rule #rev(`_:__IELE-DATA`(W,WS1),WS2)=>#rev(WS1,`_:__IELE-DATA`(W,WS2)) requires `_andBool_`(`_andBool_`(isInt(W),isWordStack(WS2)),isWordStack(WS1)) ensures #token("true","Bool") [UNIQUE_ID(4f138ab9fce3269058cdb6972069a401692c9cb926c0e0a3dd776687b9d77dc4) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS1)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS1 := kapp0.List[1] // lhs KVariable WS1
			varWS2 := c2 // lhs KVariable WS2
			// REQUIRES
			eval343, err343 := evalIsWordStack( // isWordStack(WS2)
				varWS2,
				config, -1)
			if err343 != nil {
				return m.NoResult, err343
			}
			eval344, err344 := evalIsWordStack( // isWordStack(WS1)
				varWS1,
				config, -1)
			if err344 != nil {
				return m.NoResult, err344
			}
			if (/* rhs precomputed isInt(W) */ /* && */
			   m.IsTrue(eval343)) &&
			   (m.IsTrue(eval344)) {
				// RHS
				traceRuleApply("FUNC", 464, "{| rule #rev(`_:__IELE-DATA`(W,WS1),WS2)=>#rev(WS1,`_:__IELE-DATA`(W,WS2)) requires `_andBool_`(`_andBool_`(isInt(W),isWordStack(WS2)),isWordStack(WS1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f138ab9fce3269058cdb6972069a401692c9cb926c0e0a3dd776687b9d77dc4) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval345, err345 := evalXhashrev( // #rev(WS1,`_:__IELE-DATA`(W,WS2))
					varWS1,
					&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
						varW,
						varWS2,
					}},
					config, -1)
				if err345 != nil {
					return m.NoResult, err345
				}
				return eval345, nil
			}
		}
	}

	// rule #465
	// source: data.k @272
	// {| rule #rev(`.WordStack_IELE-DATA`(.KList),WS)=>WS requires isWordStack(WS) ensures #token("true","Bool") [UNIQUE_ID(8355711b09101d958706a055071965deeb2a563e677d3070150557de09c925c8) contentStartColumn(10) contentStartLine(272) org.kframework.attributes.Location(Location(272,10,272,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		varWS := c2 // lhs KVariable WS
		// REQUIRES
		eval346, err346 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err346 != nil {
			return m.NoResult, err346
		}
		if m.IsTrue(eval346) {
			// RHS
			traceRuleApply("FUNC", 465, "{| rule #rev(`.WordStack_IELE-DATA`(.KList),WS)=>WS requires isWordStack(WS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8355711b09101d958706a055071965deeb2a563e677d3070150557de09c925c8) contentStartColumn(10) contentStartLine(272) org.kframework.attributes.Location(Location(272,10,272,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varWS, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrev", args: []m.K{c1, c2}}
}

func evalReplaceAtBytes(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.replaceAt
	lbl := m.LblReplaceAtBytes // replaceAtBytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.replaceAt(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.replaceAt, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalReplaceAtBytes", args: []m.K{c1, c2, c3}}
}

func evalIsTypeCheckingCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #466
	// source: ? @?
	// {| rule isTypeCheckingCell(`<typeChecking>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypeCheckingXgt && len(kapp0.List) == 1 { // `<typeChecking>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 466, "{| rule isTypeCheckingCell(`<typeChecking>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #467
	// source: ? @?
	// {| rule isTypeCheckingCell(#KToken(#token("TypeCheckingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypeCheckingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 467, "{| rule isTypeCheckingCell(#KToken(#token(\"TypeCheckingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #468
	// source: ? @?
	// {| rule isTypeCheckingCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 468, "{| rule isTypeCheckingCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLValues(c m.K, config m.K, guard int) (m.K, error) {
	// rule #469
	// source: ? @?
	// {| rule isLValues(lvalueList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isLValues(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLvalueList && len(kapp0.List) == 2 { // lvalueList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval347, err347 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err347 != nil {
			return m.NoResult, err347
		}
		eval348, err348 := evalIsLValues( // isLValues(K1)
			varK1,
			config, -1)
		if err348 != nil {
			return m.NoResult, err348
		}
		if (m.IsTrue(eval347)) &&
		   (m.IsTrue(eval348)) {
			// RHS
			traceRuleApply("FUNC", 469, "{| rule isLValues(lvalueList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isLValues(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #470
	// source: ? @?
	// {| rule isLValues(#KToken(#token("LValues","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLValues { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 470, "{| rule isLValues(#KToken(#token(\"LValues\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #471
	// source: ? @?
	// {| rule isLValues(`.List{"lvalueList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"lvalueList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 471, "{| rule isLValues(`.List{\"lvalueList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #472
	// source: ? @?
	// {| rule isLValues(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 472, "{| rule isLValues(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalAccountCellMapItem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.element
	lbl := m.LblAccountCellMapItem // AccountCellMapItem
	sort := m.SortAccountCellMap
	if hookRes, hookErr := mapHooks.element(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalAccountCellMapItem", args: []m.K{c1, c2}}
}

func evalArrayCtor(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.ctor
	lbl := m.LblArrayCtor // arrayCtor
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.ctor(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.ctor, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalArrayCtor", args: []m.K{c1, c2}}
}

func evalIsFuncIDsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #473
	// source: ? @?
	// {| rule isFuncIdsCell(#KToken(#token("FuncIdsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 473, "{| rule isFuncIdsCell(#KToken(#token(\"FuncIdsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #474
	// source: ? @?
	// {| rule isFuncIdsCell(`<funcIds>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDsXgt && len(kapp0.List) == 1 { // `<funcIds>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 474, "{| rule isFuncIdsCell(`<funcIds>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #475
	// source: ? @?
	// {| rule isFuncIdsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 475, "{| rule isFuncIdsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashparseByteStackRawAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #476
	// source: data.k @455
	// {| rule #parseByteStackRawAux(S,WS,LEN,LEN)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isString(S)),isInt(LEN)) ensures #token("true","Bool") [UNIQUE_ID(62c40d8850c3bce3b7c8327c56f506a9e86d78bc1261582ac2c1f3ffd90c3643) contentStartColumn(10) contentStartLine(455) org.kframework.attributes.Location(Location(455,10,455,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		varWS := c2 // lhs KVariable WS
		if varLEN, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if c4.Equals(varLEN) { // lhs KVariable, which reappears:LEN
				// REQUIRES
				eval349, err349 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err349 != nil {
					return m.NoResult, err349
				}
				if m.IsTrue(eval349) /* && */ /* rhs precomputed isString(S) */  /* && */ /* rhs precomputed isInt(LEN) */  {
					// RHS
					traceRuleApply("FUNC", 476, "{| rule #parseByteStackRawAux(S,WS,LEN,LEN)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isString(S)),isInt(LEN)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62c40d8850c3bce3b7c8327c56f506a9e86d78bc1261582ac2c1f3ffd90c3643) contentStartColumn(10) contentStartLine(455) org.kframework.attributes.Location(Location(455,10,455,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval350, err350 := evalXhashrev( // #rev(WS,`.WordStack_IELE-DATA`(.KList))
						varWS,
						&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
						}},
						config, -1)
					if err350 != nil {
						return m.NoResult, err350
					}
					return eval350, nil
				}
			}
		}
	}

	// rule #477
	// source: data.k @456
	// {| rule #parseByteStackRawAux(S,WS,I,LEN)=>#parseByteStackRawAux(S,`_:__IELE-DATA`(ordChar(substrString(S,I,`_+Int_`(I,#token("1","Int")))),WS),`_+Int_`(I,#token("1","Int")),LEN) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(I)),isString(S)),isInt(LEN)) ensures #token("true","Bool") [UNIQUE_ID(aed33df41a7650c2eb8ffc732292117cb9dc927afac9c4d285fb60ebb2d163ba) contentStartColumn(10) contentStartLine(456) org.kframework.attributes.Location(Location(456,10,456,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varS, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		varWS := c2 // lhs KVariable WS
		if varI, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEN, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval351, err351 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err351 != nil {
					return m.NoResult, err351
				}
				if m.IsTrue(eval351) /* && */ /* rhs precomputed isInt(I) */  /* && */ /* rhs precomputed isString(S) */  /* && */ /* rhs precomputed isInt(LEN) */  {
					// RHS
					traceRuleApply("FUNC", 477, "{| rule #parseByteStackRawAux(S,WS,I,LEN)=>#parseByteStackRawAux(S,`_:__IELE-DATA`(ordChar(substrString(S,I,`_+Int_`(I,#token(\"1\",\"Int\")))),WS),`_+Int_`(I,#token(\"1\",\"Int\")),LEN) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(I)),isString(S)),isInt(LEN)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aed33df41a7650c2eb8ffc732292117cb9dc927afac9c4d285fb60ebb2d163ba) contentStartColumn(10) contentStartLine(456) org.kframework.attributes.Location(Location(456,10,456,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval355, err355 := evalXuXplusIntXu( // `_+Int_`(I,#token("1","Int"))
						varI,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err355 != nil {
						return m.NoResult, err355
					}
					eval354, err354 := evalSubstrString( // substrString(S,I,`_+Int_`(I,#token("1","Int")))
						varS,
						varI,
						eval355,
						config, -1)
					if err354 != nil {
						return m.NoResult, err354
					}
					eval353, err353 := evalOrdChar( // ordChar(substrString(S,I,`_+Int_`(I,#token("1","Int"))))
						eval354,
						config, -1)
					if err353 != nil {
						return m.NoResult, err353
					}
					eval356, err356 := evalXuXplusIntXu( // `_+Int_`(I,#token("1","Int"))
						varI,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err356 != nil {
						return m.NoResult, err356
					}
					eval352, err352 := evalXhashparseByteStackRawAux( // #parseByteStackRawAux(S,`_:__IELE-DATA`(ordChar(substrString(S,I,`_+Int_`(I,#token("1","Int")))),WS),`_+Int_`(I,#token("1","Int")),LEN)
						varS,
						&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
							eval353,
							varWS,
						}},
						eval356,
						varLEN,
						config, -1)
					if err352 != nil {
						return m.NoResult, err352
					}
					return eval352, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseByteStackRawAux", args: []m.K{c1, c2, c3, c4}}
}

func evalIsArgsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #478
	// source: ? @?
	// {| rule isArgsCell(#KToken(#token("ArgsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortArgsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 478, "{| rule isArgsCell(#KToken(#token(\"ArgsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #479
	// source: ? @?
	// {| rule isArgsCell(`<args>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltargsXgt && len(kapp0.List) == 1 { // `<args>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval357, err357 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err357 != nil {
			return m.NoResult, err357
		}
		if m.IsTrue(eval357) {
			// RHS
			traceRuleApply("FUNC", 479, "{| rule isArgsCell(`<args>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #480
	// source: ? @?
	// {| rule isArgsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 480, "{| rule isArgsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalGetInt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #481
	// source: data.k @122
	// {| rule getInt(I)=>I requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(c9f51d5d975f1f7f317334cec0c70a482d48f7b13d9f76bf7bb05b9f99f38690) contentStartColumn(10) contentStartLine(122) org.kframework.attributes.Location(Location(122,10,122,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 481, "{| rule getInt(I)=>I requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c9f51d5d975f1f7f317334cec0c70a482d48f7b13d9f76bf7bb05b9f99f38690) contentStartColumn(10) contentStartLine(122) org.kframework.attributes.Location(Location(122,10,122,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return varI, nil
	}

	return m.NoResult, &stuckError{funcName: "evalGetInt", args: []m.K{c}}
}

func evalIsProgramCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #482
	// source: ? @?
	// {| rule isProgramCellOpt(#KToken(#token("ProgramCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 482, "{| rule isProgramCellOpt(#KToken(#token(\"ProgramCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #483
	// source: ? @?
	// {| rule isProgramCellOpt(`<program>`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramXgt && len(kapp0.List) == 6 { // `<program>`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval358, err358 := evalIsFunctionsCell( // isFunctionsCell(K0)
			varK0,
			config, -1)
		if err358 != nil {
			return m.NoResult, err358
		}
		eval359, err359 := evalIsFuncIDsCell( // isFuncIdsCell(K1)
			varK1,
			config, -1)
		if err359 != nil {
			return m.NoResult, err359
		}
		eval360, err360 := evalIsFuncLabelsCell( // isFuncLabelsCell(K2)
			varK2,
			config, -1)
		if err360 != nil {
			return m.NoResult, err360
		}
		eval361, err361 := evalIsExportedCell( // isExportedCell(K3)
			varK3,
			config, -1)
		if err361 != nil {
			return m.NoResult, err361
		}
		eval362, err362 := evalIsProgramSizeCell( // isProgramSizeCell(K4)
			varK4,
			config, -1)
		if err362 != nil {
			return m.NoResult, err362
		}
		eval363, err363 := evalIsContractCodeCell( // isContractCodeCell(K5)
			varK5,
			config, -1)
		if err363 != nil {
			return m.NoResult, err363
		}
		if (((((m.IsTrue(eval358)) &&
		   (m.IsTrue(eval359))) &&
		   (m.IsTrue(eval360))) &&
		   (m.IsTrue(eval361))) &&
		   (m.IsTrue(eval362))) &&
		   (m.IsTrue(eval363)) {
			// RHS
			traceRuleApply("FUNC", 483, "{| rule isProgramCellOpt(`<program>`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #484
	// source: ? @?
	// {| rule isProgramCellOpt(#KToken(#token("ProgramCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 484, "{| rule isProgramCellOpt(#KToken(#token(\"ProgramCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #485
	// source: ? @?
	// {| rule isProgramCellOpt(noProgramCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoProgramCell && len(kapp0.List) == 0 { // noProgramCell(.KList)
		// RHS
		traceRuleApply("FUNC", 485, "{| rule isProgramCellOpt(noProgramCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #486
	// source: ? @?
	// {| rule isProgramCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 486, "{| rule isProgramCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBool2Word(c m.K, config m.K, guard int) (m.K, error) {
	// rule #487
	// source: data.k @72
	// {| rule bool2Word(#token("false","Bool"))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2f5086c53ed7f0076a783856c84f6011b8450edb9e46ca879d81ca110ec5363a) contentStartColumn(10) contentStartLine(72) org.kframework.attributes.Location(Location(72,10,72,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.BoolFalse) { // #token("false","Bool")
		// RHS
		traceRuleApply("FUNC", 487, "{| rule bool2Word(#token(\"false\",\"Bool\"))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2f5086c53ed7f0076a783856c84f6011b8450edb9e46ca879d81ca110ec5363a) contentStartColumn(10) contentStartLine(72) org.kframework.attributes.Location(Location(72,10,72,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	// rule #488
	// source: data.k @71
	// {| rule bool2Word(#token("true","Bool"))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(33245b2b622f5bf1777486d5cad88f6f533687016f4a0434043dc06b7925358b) contentStartColumn(10) contentStartLine(71) org.kframework.attributes.Location(Location(71,10,71,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.BoolTrue) { // #token("true","Bool")
		// RHS
		traceRuleApply("FUNC", 488, "{| rule bool2Word(#token(\"true\",\"Bool\"))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33245b2b622f5bf1777486d5cad88f6f533687016f4a0434043dc06b7925358b) contentStartColumn(10) contentStartLine(71) org.kframework.attributes.Location(Location(71,10,71,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("1"), nil
	}

	return m.NoResult, &stuckError{funcName: "evalBool2Word", args: []m.K{c}}
}

func evalXhashparseByteStackRaw(c m.K, config m.K, guard int) (m.K, error) {
	// rule #489
	// source: data.k @454
	// {| rule #parseByteStackRaw(S)=>#parseByteStackRawAux(S,`.WordStack_IELE-DATA`(.KList),#token("0","Int"),lengthString(S)) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(81bf9da2da1850a483abfc43a416dacf6840390727e8d5eeb45313bebde4916f) contentStartColumn(10) contentStartLine(454) org.kframework.attributes.Location(Location(454,10,454,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 489, "{| rule #parseByteStackRaw(S)=>#parseByteStackRawAux(S,`.WordStack_IELE-DATA`(.KList),#token(\"0\",\"Int\"),lengthString(S)) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(81bf9da2da1850a483abfc43a416dacf6840390727e8d5eeb45313bebde4916f) contentStartColumn(10) contentStartLine(454) org.kframework.attributes.Location(Location(454,10,454,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval365, err365 := evalLengthString( // lengthString(S)
			varS,
			config, -1)
		if err365 != nil {
			return m.NoResult, err365
		}
		eval364, err364 := evalXhashparseByteStackRawAux( // #parseByteStackRawAux(S,`.WordStack_IELE-DATA`(.KList),#token("0","Int"),lengthString(S))
			varS,
			&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
			}},
			/* rhs KToken */ m.NewIntFromString("0"),
			eval365,
			config, -1)
		if err364 != nil {
			return m.NoResult, err364
		}
		return eval364, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseByteStackRaw", args: []m.K{c}}
}

func evalInitDataCell(config m.K, guard int) (m.K, error) {
	// rule #490
	// source: ? @?
	// {| rule initDataCell(.KList)=>`<data>`(`.WordStack_IELE-DATA`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f3619b703f3c8234157e32453e2db3003a17bddc72bf28e494b0343d1c6fd39f) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 490, "{| rule initDataCell(.KList)=>`<data>`(`.WordStack_IELE-DATA`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f3619b703f3c8234157e32453e2db3003a17bddc72bf28e494b0343d1c6fd39f) initializer()] |}")
	return &m.KApply{Label: m.LblXltdataXgt, List: []m.K{ // as-is <data>
		&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
		}},
	}}, nil

}

//var constInitDataCell K = evalInitDataCell(m.InternedBottom)

func evalXuListXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.concat
	lbl := m.LblXuListXu // _List_
	sort := m.SortList
	if hookRes, hookErr := listHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuListXu", args: []m.K{c1, c2}}
}

func evalIsNonEmptyInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #491
	// source: ? @?
	// {| rule isNonEmptyInts(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 491, "{| rule isNonEmptyInts(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #492
	// source: ? @?
	// {| rule isNonEmptyInts(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval366, err366 := evalIsNonEmptyInts( // isNonEmptyInts(K1)
				varK1,
				config, -1)
			if err366 != nil {
				return m.NoResult, err366
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval366) {
				// RHS
				traceRuleApply("FUNC", 492, "{| rule isNonEmptyInts(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #493
	// source: ? @?
	// {| rule isNonEmptyInts(#KToken(#token("NonEmptyInts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 493, "{| rule isNonEmptyInts(#KToken(#token(\"NonEmptyInts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #494
	// source: ? @?
	// {| rule isNonEmptyInts(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 494, "{| rule isNonEmptyInts(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFunctionBodiesCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #495
	// source: ? @?
	// {| rule isFunctionBodiesCellOpt(`<functionBodies>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionBodiesXgt && len(kapp0.List) == 1 { // `<functionBodies>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 495, "{| rule isFunctionBodiesCellOpt(`<functionBodies>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #496
	// source: ? @?
	// {| rule isFunctionBodiesCellOpt(#KToken(#token("FunctionBodiesCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionBodiesCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 496, "{| rule isFunctionBodiesCellOpt(#KToken(#token(\"FunctionBodiesCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #497
	// source: ? @?
	// {| rule isFunctionBodiesCellOpt(noFunctionBodiesCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFunctionBodiesCell && len(kapp0.List) == 0 { // noFunctionBodiesCell(.KList)
		// RHS
		traceRuleApply("FUNC", 497, "{| rule isFunctionBodiesCellOpt(noFunctionBodiesCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #498
	// source: ? @?
	// {| rule isFunctionBodiesCellOpt(#KToken(#token("FunctionBodiesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionBodiesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 498, "{| rule isFunctionBodiesCellOpt(#KToken(#token(\"FunctionBodiesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #499
	// source: ? @?
	// {| rule isFunctionBodiesCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 499, "{| rule isFunctionBodiesCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXhyphenMapXuXuMAP(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.difference
	lbl := m.LblXuXhyphenMapXuXuMAP // _-Map__MAP
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.difference(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.difference, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXhyphenMapXuXuMAP", args: []m.K{c1, c2}}
}

func evalXhashloadCodeAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #500
	// source: iele.k @1738
	// {| rule #loadCodeAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_57,_58,_59,_60),CONTRACTS),CONTRACT)=>#loadCodeAux(CONTRACTS,CONTRACT) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(_59),isContract(CONTRACTS)),isContract(CONTRACT)),isIeleName(_57)),isInt(_58)),isTopLevelDefinitions(_60)),`_=/=K_`(CONTRACTS,`.List{"contractDefinitionList"}`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(e7ec4e27369ddb908259079830ac6cabbdb40caa561202adbf719490136b4be3) contentStartColumn(10) contentStartLine(1738) org.kframework.attributes.Location(Location(1738,10,1739,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_57,_58,_59,_60),CONTRACTS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_57,_58,_59,_60)
			varXu57 := kapp1.List[0] // lhs KVariable _57
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu60 := kapp1.List[3] // lhs KVariable _60
					varCONTRACTS := kapp0.List[1] // lhs KVariable CONTRACTS
					varCONTRACT := c2 // lhs KVariable CONTRACT
					// REQUIRES
					eval367, err367 := evalIsContract( // isContract(CONTRACTS)
						varCONTRACTS,
						config, -1)
					if err367 != nil {
						return m.NoResult, err367
					}
					eval368, err368 := evalIsContract( // isContract(CONTRACT)
						varCONTRACT,
						config, -1)
					if err368 != nil {
						return m.NoResult, err368
					}
					eval369, err369 := evalIsIeleName( // isIeleName(_57)
						varXu57,
						config, -1)
					if err369 != nil {
						return m.NoResult, err369
					}
					eval370, err370 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_60)
						varXu60,
						config, -1)
					if err370 != nil {
						return m.NoResult, err370
					}
					eval371, err371 := evalXuXeqXslashXeqKXu( // `_=/=K_`(CONTRACTS,`.List{"contractDefinitionList"}`(.KList))
						varCONTRACTS,
						&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
						}},
						config, -1)
					if err371 != nil {
						return m.NoResult, err371
					}
					if ((((/* rhs precomputed isString(_59) */ /* && */
					   m.IsTrue(eval367)) &&
					   (m.IsTrue(eval368))) &&
					   (m.IsTrue(eval369)) /* && */ /* rhs precomputed isInt(_58) */ ) &&
					   (m.IsTrue(eval370))) &&
					   (m.IsTrue(eval371)) {
						// RHS
						traceRuleApply("FUNC", 500, "{| rule #loadCodeAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_57,_58,_59,_60),CONTRACTS),CONTRACT)=>#loadCodeAux(CONTRACTS,CONTRACT) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(_59),isContract(CONTRACTS)),isContract(CONTRACT)),isIeleName(_57)),isInt(_58)),isTopLevelDefinitions(_60)),`_=/=K_`(CONTRACTS,`.List{\"contractDefinitionList\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e7ec4e27369ddb908259079830ac6cabbdb40caa561202adbf719490136b4be3) contentStartColumn(10) contentStartLine(1738) org.kframework.attributes.Location(Location(1738,10,1739,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval372, err372 := evalXhashloadCodeAux( // #loadCodeAux(CONTRACTS,CONTRACT)
							varCONTRACTS,
							varCONTRACT,
							config, -1)
						if err372 != nil {
							return m.NoResult, err372
						}
						return eval372, nil
					}
				}
			}
		}
	}

	// rule #501
	// source: iele.k @1740
	// {| rule #loadCodeAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_83,SIZE,_84,DEFS),`.List{"contractDefinitionList"}`(.KList)),CONTRACT)=>#loadDeclarations(DEFS,`<program>`(`<functions>`(`.FunctionCellMap`(.KList)),`<funcIds>`(`.Set`(.KList)),`<funcLabels>`(`.Map`(.KList)),`<exported>`(`.Set`(.KList)),`<programSize>`(SIZE),`<contractCode>`(CONTRACT)),#token("1","Int")) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(_83)),isString(_84)),isContract(CONTRACT)),isInt(SIZE)) ensures #token("true","Bool") [UNIQUE_ID(0bb5ecf5ca6812ca8f8d5f83b1c7d25de5162b67bdce7da78d48d1040b33015e) contentStartColumn(10) contentStartLine(1740) org.kframework.attributes.Location(Location(1740,10,1749,24)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_83,SIZE,_84,DEFS),`.List{"contractDefinitionList"}`(.KList))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_83,SIZE,_84,DEFS)
			varXu83 := kapp1.List[0] // lhs KVariable _83
			if varSIZE, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varDEFS := kapp1.List[3] // lhs KVariable DEFS
					if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket && len(kapp2.List) == 0 { // `.List{"contractDefinitionList"}`(.KList)
						varCONTRACT := c2 // lhs KVariable CONTRACT
						// REQUIRES
						eval373, err373 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
							varDEFS,
							config, -1)
						if err373 != nil {
							return m.NoResult, err373
						}
						eval374, err374 := evalIsIeleName( // isIeleName(_83)
							varXu83,
							config, -1)
						if err374 != nil {
							return m.NoResult, err374
						}
						eval375, err375 := evalIsContract( // isContract(CONTRACT)
							varCONTRACT,
							config, -1)
						if err375 != nil {
							return m.NoResult, err375
						}
						if ((m.IsTrue(eval373)) &&
						   (m.IsTrue(eval374)) /* && */ /* rhs precomputed isString(_84) */ ) &&
						   (m.IsTrue(eval375)) /* && */ /* rhs precomputed isInt(SIZE) */  {
							// RHS
							traceRuleApply("FUNC", 501, "{| rule #loadCodeAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_83,SIZE,_84,DEFS),`.List{\"contractDefinitionList\"}`(.KList)),CONTRACT)=>#loadDeclarations(DEFS,`<program>`(`<functions>`(`.FunctionCellMap`(.KList)),`<funcIds>`(`.Set`(.KList)),`<funcLabels>`(`.Map`(.KList)),`<exported>`(`.Set`(.KList)),`<programSize>`(SIZE),`<contractCode>`(CONTRACT)),#token(\"1\",\"Int\")) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(_83)),isString(_84)),isContract(CONTRACT)),isInt(SIZE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0bb5ecf5ca6812ca8f8d5f83b1c7d25de5162b67bdce7da78d48d1040b33015e) contentStartColumn(10) contentStartLine(1740) org.kframework.attributes.Location(Location(1740,10,1749,24)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
							eval377, err377 := evalXdotFunctionCellMap(config, -1) // `.FunctionCellMap`(.KList)
							if err377 != nil {
								return m.NoResult, err377
							}
							eval378, err378 := evalXdotSet(config, -1) // `.Set`(.KList)
							if err378 != nil {
								return m.NoResult, err378
							}
							eval379, err379 := evalXdotMap(config, -1) // `.Map`(.KList)
							if err379 != nil {
								return m.NoResult, err379
							}
							eval380, err380 := evalXdotSet(config, -1) // `.Set`(.KList)
							if err380 != nil {
								return m.NoResult, err380
							}
							eval376, err376 := evalXhashloadDeclarations( // #loadDeclarations(DEFS,`<program>`(`<functions>`(`.FunctionCellMap`(.KList)),`<funcIds>`(`.Set`(.KList)),`<funcLabels>`(`.Map`(.KList)),`<exported>`(`.Set`(.KList)),`<programSize>`(SIZE),`<contractCode>`(CONTRACT)),#token("1","Int"))
								varDEFS,
								&m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
									&m.KApply{Label: m.LblXltfunctionsXgt, List: []m.K{ // as-is <functions>
										eval377,
									}},
									&m.KApply{Label: m.LblXltfuncIDsXgt, List: []m.K{ // as-is <funcIds>
										eval378,
									}},
									&m.KApply{Label: m.LblXltfuncLabelsXgt, List: []m.K{ // as-is <funcLabels>
										eval379,
									}},
									&m.KApply{Label: m.LblXltexportedXgt, List: []m.K{ // as-is <exported>
										eval380,
									}},
									&m.KApply{Label: m.LblXltprogramSizeXgt, List: []m.K{ // as-is <programSize>
										varSIZE,
									}},
									&m.KApply{Label: m.LblXltcontractCodeXgt, List: []m.K{ // as-is <contractCode>
										varCONTRACT,
									}},
								}},
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err376 != nil {
								return m.NoResult, err376
							}
							return eval376, nil
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadCodeAux", args: []m.K{c1, c2}}
}

func evalXhashsort(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.sort
	lbl := m.LblXhashsort // #sort
	sort := m.SortString
	if hookRes, hookErr := kreflectionHooks.sort(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.sort, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsort", args: []m.K{c}}
}

func evalXuXeqXeqKXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: KEQUAL.eq
	lbl := m.LblXuXeqXeqKXu // _==K_
	sort := m.SortBool
	if hookRes, hookErr := kequalHooks.eq(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KEQUAL.eq, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXeqKXu", args: []m.K{c1, c2}}
}

func evalIsInstructions(c m.K, config m.K, guard int) (m.K, error) {
	// rule #502
	// source: ? @?
	// {| rule isInstructions(`.List{"instructionList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"instructionList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 502, "{| rule isInstructions(`.List{\"instructionList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #503
	// source: ? @?
	// {| rule isInstructions(instructionList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInstruction(K0),isInstructions(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval381, err381 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err381 != nil {
			return m.NoResult, err381
		}
		eval382, err382 := evalIsInstructions( // isInstructions(K1)
			varK1,
			config, -1)
		if err382 != nil {
			return m.NoResult, err382
		}
		if (m.IsTrue(eval381)) &&
		   (m.IsTrue(eval382)) {
			// RHS
			traceRuleApply("FUNC", 503, "{| rule isInstructions(instructionList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInstruction(K0),isInstructions(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #504
	// source: ? @?
	// {| rule isInstructions(#KToken(#token("Instructions","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructions { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 504, "{| rule isInstructions(#KToken(#token(\"Instructions\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #505
	// source: ? @?
	// {| rule isInstructions(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 505, "{| rule isInstructions(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBinOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #506
	// source: ? @?
	// {| rule isBinOp(`SSTORE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSSTORE && len(kapp0.List) == 0 { // `SSTORE`(.KList)
		// RHS
		traceRuleApply("FUNC", 506, "{| rule isBinOp(`SSTORE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #507
	// source: ? @?
	// {| rule isBinOp(`BALANCE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBALANCE && len(kapp0.List) == 0 { // `BALANCE`(.KList)
		// RHS
		traceRuleApply("FUNC", 507, "{| rule isBinOp(`BALANCE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #508
	// source: ? @?
	// {| rule isBinOp(#KToken(#token("BinOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBinOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 508, "{| rule isBinOp(#KToken(#token(\"BinOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #509
	// source: ? @?
	// {| rule isBinOp(`LOG1`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG1 && len(kapp0.List) == 0 { // `LOG1`(.KList)
		// RHS
		traceRuleApply("FUNC", 509, "{| rule isBinOp(`LOG1`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #510
	// source: ? @?
	// {| rule isBinOp(`LOGARITHM2`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOGARITHM2 && len(kapp0.List) == 0 { // `LOGARITHM2`(.KList)
		// RHS
		traceRuleApply("FUNC", 510, "{| rule isBinOp(`LOGARITHM2`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #511
	// source: ? @?
	// {| rule isBinOp(`MOVE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMOVE && len(kapp0.List) == 0 { // `MOVE`(.KList)
		// RHS
		traceRuleApply("FUNC", 511, "{| rule isBinOp(`MOVE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #512
	// source: ? @?
	// {| rule isBinOp(`ISZERO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblISZERO && len(kapp0.List) == 0 { // `ISZERO`(.KList)
		// RHS
		traceRuleApply("FUNC", 512, "{| rule isBinOp(`ISZERO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #513
	// source: ? @?
	// {| rule isBinOp(`BLOCKHASH`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBLOCKHASH && len(kapp0.List) == 0 { // `BLOCKHASH`(.KList)
		// RHS
		traceRuleApply("FUNC", 513, "{| rule isBinOp(`BLOCKHASH`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #514
	// source: ? @?
	// {| rule isBinOp(`SLOAD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSLOAD && len(kapp0.List) == 0 { // `SLOAD`(.KList)
		// RHS
		traceRuleApply("FUNC", 514, "{| rule isBinOp(`SLOAD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #515
	// source: ? @?
	// {| rule isBinOp(`NOT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNOT && len(kapp0.List) == 0 { // `NOT`(.KList)
		// RHS
		traceRuleApply("FUNC", 515, "{| rule isBinOp(`NOT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #516
	// source: ? @?
	// {| rule isBinOp(`EXTCODESIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXTCODESIZE && len(kapp0.List) == 0 { // `EXTCODESIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 516, "{| rule isBinOp(`EXTCODESIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #517
	// source: ? @?
	// {| rule isBinOp(`MLOAD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMLOAD && len(kapp0.List) == 0 { // `MLOAD`(.KList)
		// RHS
		traceRuleApply("FUNC", 517, "{| rule isBinOp(`MLOAD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #518
	// source: ? @?
	// {| rule isBinOp(`SHA3`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHA3 && len(kapp0.List) == 0 { // `SHA3`(.KList)
		// RHS
		traceRuleApply("FUNC", 518, "{| rule isBinOp(`SHA3`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #519
	// source: ? @?
	// {| rule isBinOp(`MSTORE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSTORE && len(kapp0.List) == 0 { // `MSTORE`(.KList)
		// RHS
		traceRuleApply("FUNC", 519, "{| rule isBinOp(`MSTORE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #520
	// source: ? @?
	// {| rule isBinOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 520, "{| rule isBinOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallDepthCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #521
	// source: ? @?
	// {| rule isCallDepthCell(`<callDepth>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDepthXgt && len(kapp0.List) == 1 { // `<callDepth>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 521, "{| rule isCallDepthCell(`<callDepth>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #522
	// source: ? @?
	// {| rule isCallDepthCell(#KToken(#token("CallDepthCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDepthCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 522, "{| rule isCallDepthCell(#KToken(#token(\"CallDepthCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #523
	// source: ? @?
	// {| rule isCallDepthCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 523, "{| rule isCallDepthCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalReplaceFirstXlparenXuXcommaXuXcommaXuXrparenXuSTRING(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.replaceFirst
	lbl := m.LblReplaceFirstXlparenXuXcommaXuXcommaXuXrparenXuSTRING // replaceFirst(_,_,_)_STRING
	sort := m.SortString
	if hookRes, hookErr := stringHooks.replaceFirst(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.replaceFirst, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #524
	// source: domains.k @563
	// {| rule `replaceFirst(_,_,_)_STRING`(Source,ToReplace,Replacement)=>`_+String__STRING`(`_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement),substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isString(ToReplace)),`_>=Int__INT`(findString(Source,ToReplace,#token("0","Int")),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4941a93fc06d65bd530ddbfcaabb498d40e247effd559cda2d85e65d73692b70) contentStartColumn(8) contentStartLine(563) org.kframework.attributes.Location(Location(563,8,565,66)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToReplace, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varReplacement, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				// REQUIRES
				eval384, err384 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
					varSource,
					varToReplace,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err384 != nil {
					return m.NoResult, err384
				}
				eval383, err383 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(findString(Source,ToReplace,#token("0","Int")),#token("0","Int"))
					eval384,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err383 != nil {
					return m.NoResult, err383
				}
				if /* rhs precomputed isString(Replacement) && isString(Source) && isString(ToReplace) */ /* && */
				   m.IsTrue(eval383) {
					// RHS
					traceRuleApply("FUNC", 524, "{| rule `replaceFirst(_,_,_)_STRING`(Source,ToReplace,Replacement)=>`_+String__STRING`(`_+String__STRING`(substrString(Source,#token(\"0\",\"Int\"),findString(Source,ToReplace,#token(\"0\",\"Int\"))),Replacement),substrString(Source,`_+Int_`(findString(Source,ToReplace,#token(\"0\",\"Int\")),lengthString(ToReplace)),lengthString(Source))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isString(ToReplace)),`_>=Int__INT`(findString(Source,ToReplace,#token(\"0\",\"Int\")),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4941a93fc06d65bd530ddbfcaabb498d40e247effd559cda2d85e65d73692b70) contentStartColumn(8) contentStartLine(563) org.kframework.attributes.Location(Location(563,8,565,66)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval388, err388 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
						varSource,
						varToReplace,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err388 != nil {
						return m.NoResult, err388
					}
					eval387, err387 := evalSubstrString( // substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int")))
						varSource,
						/* rhs KToken */ m.NewIntFromString("0"),
						eval388,
						config, -1)
					if err387 != nil {
						return m.NoResult, err387
					}
					eval386, err386 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement)
						eval387,
						varReplacement,
						config, -1)
					if err386 != nil {
						return m.NoResult, err386
					}
					eval391, err391 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
						varSource,
						varToReplace,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err391 != nil {
						return m.NoResult, err391
					}
					eval392, err392 := evalLengthString( // lengthString(ToReplace)
						varToReplace,
						config, -1)
					if err392 != nil {
						return m.NoResult, err392
					}
					eval390, err390 := evalXuXplusIntXu( // `_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace))
						eval391,
						eval392,
						config, -1)
					if err390 != nil {
						return m.NoResult, err390
					}
					eval393, err393 := evalLengthString( // lengthString(Source)
						varSource,
						config, -1)
					if err393 != nil {
						return m.NoResult, err393
					}
					eval389, err389 := evalSubstrString( // substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source))
						varSource,
						eval390,
						eval393,
						config, -1)
					if err389 != nil {
						return m.NoResult, err389
					}
					eval385, err385 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(`_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement),substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source)))
						eval386,
						eval389,
						config, -1)
					if err385 != nil {
						return m.NoResult, err385
					}
					return eval385, nil
				}
			}
		}
	}

	// rule #525
	// source: domains.k @566
	// {| rule `replaceFirst(_,_,_)_STRING`(Source,ToReplace,_16)=>Source requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Source),isString(ToReplace)),isString(_16)),`_<Int__INT`(findString(Source,ToReplace,#token("0","Int")),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4320c56cb2a4f4c70e2500eb8f33dab497a5bb09aa847e4e0c0ae496ab671040) contentStartColumn(8) contentStartLine(566) org.kframework.attributes.Location(Location(566,8,567,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToReplace, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if _, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				// REQUIRES
				eval395, err395 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
					varSource,
					varToReplace,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err395 != nil {
					return m.NoResult, err395
				}
				eval394, err394 := evalXuXltIntXuXuINT( // `_<Int__INT`(findString(Source,ToReplace,#token("0","Int")),#token("0","Int"))
					eval395,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err394 != nil {
					return m.NoResult, err394
				}
				if /* rhs precomputed isString(Source) && isString(ToReplace) && isString(_16) */ /* && */
				   m.IsTrue(eval394) {
					// RHS
					traceRuleApply("FUNC", 525, "{| rule `replaceFirst(_,_,_)_STRING`(Source,ToReplace,_16)=>Source requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Source),isString(ToReplace)),isString(_16)),`_<Int__INT`(findString(Source,ToReplace,#token(\"0\",\"Int\")),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4320c56cb2a4f4c70e2500eb8f33dab497a5bb09aa847e4e0c0ae496ab671040) contentStartColumn(8) contentStartLine(566) org.kframework.attributes.Location(Location(566,8,567,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					return varSource, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalReplaceFirstXlparenXuXcommaXuXcommaXuXrparenXuSTRING", args: []m.K{c1, c2, c3}}
}

func evalIsAccountsCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #526
	// source: ? @?
	// {| rule isAccountsCellFragment(#KToken(#token("AccountsCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountsCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 526, "{| rule isAccountsCellFragment(#KToken(#token(\"AccountsCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #527
	// source: ? @?
	// {| rule isAccountsCellFragment(`<accounts>-fragment`(K0))=>#token("true","Bool") requires isAccountCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountsXgtXhyphenfragment && len(kapp0.List) == 1 { // `<accounts>-fragment`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortAccountCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isAccountCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 527, "{| rule isAccountsCellFragment(`<accounts>-fragment`(K0))=>#token(\"true\",\"Bool\") requires isAccountCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #528
	// source: ? @?
	// {| rule isAccountsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 528, "{| rule isAccountsCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTwosInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #529
	// source: ? @?
	// {| rule isTwosInst(#KToken(#token("TwosInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTwosInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 529, "{| rule isTwosInst(#KToken(#token(\"TwosInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #530
	// source: ? @?
	// {| rule isTwosInst(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=twos_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval396, err396 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err396 != nil {
			return m.NoResult, err396
		}
		eval397, err397 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err397 != nil {
			return m.NoResult, err397
		}
		eval398, err398 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err398 != nil {
			return m.NoResult, err398
		}
		if ((m.IsTrue(eval396)) &&
		   (m.IsTrue(eval397))) &&
		   (m.IsTrue(eval398)) {
			// RHS
			traceRuleApply("FUNC", 530, "{| rule isTwosInst(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #531
	// source: ? @?
	// {| rule isTwosInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 531, "{| rule isTwosInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXdotMap(config m.K, guard int) (m.K, error) {
	//hook: MAP.unit
	lbl := m.LblXdotMap // .Map
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotMap", args: nil}
}

//var constXdotMap K = evalXdotMap(m.InternedBottom)

func evalIsFuncIDsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #532
	// source: ? @?
	// {| rule isFuncIdsCellOpt(#KToken(#token("FuncIdsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 532, "{| rule isFuncIdsCellOpt(#KToken(#token(\"FuncIdsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #533
	// source: ? @?
	// {| rule isFuncIdsCellOpt(noFuncIdsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFuncIDsCell && len(kapp0.List) == 0 { // noFuncIdsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 533, "{| rule isFuncIdsCellOpt(noFuncIdsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #534
	// source: ? @?
	// {| rule isFuncIdsCellOpt(#KToken(#token("FuncIdsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 534, "{| rule isFuncIdsCellOpt(#KToken(#token(\"FuncIdsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #535
	// source: ? @?
	// {| rule isFuncIdsCellOpt(`<funcIds>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDsXgt && len(kapp0.List) == 1 { // `<funcIds>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 535, "{| rule isFuncIdsCellOpt(`<funcIds>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #536
	// source: ? @?
	// {| rule isFuncIdsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 536, "{| rule isFuncIdsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallFrameCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #537
	// source: ? @?
	// {| rule isCallFrameCell(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallFrameXgt && len(kapp0.List) == 15 { // `<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval399, err399 := evalIsProgramCell( // isProgramCell(K0)
			varK0,
			config, -1)
		if err399 != nil {
			return m.NoResult, err399
		}
		eval400, err400 := evalIsCallDepthCell( // isCallDepthCell(K1)
			varK1,
			config, -1)
		if err400 != nil {
			return m.NoResult, err400
		}
		eval401, err401 := evalIsLocalCallsCell( // isLocalCallsCell(K2)
			varK2,
			config, -1)
		if err401 != nil {
			return m.NoResult, err401
		}
		eval402, err402 := evalIsIDCell( // isIdCell(K3)
			varK3,
			config, -1)
		if err402 != nil {
			return m.NoResult, err402
		}
		eval403, err403 := evalIsCallerCell( // isCallerCell(K4)
			varK4,
			config, -1)
		if err403 != nil {
			return m.NoResult, err403
		}
		eval404, err404 := evalIsCallDataCell( // isCallDataCell(K5)
			varK5,
			config, -1)
		if err404 != nil {
			return m.NoResult, err404
		}
		eval405, err405 := evalIsCallValueCell( // isCallValueCell(K6)
			varK6,
			config, -1)
		if err405 != nil {
			return m.NoResult, err405
		}
		eval406, err406 := evalIsRegsCell( // isRegsCell(K7)
			varK7,
			config, -1)
		if err406 != nil {
			return m.NoResult, err406
		}
		eval407, err407 := evalIsLocalMemCell( // isLocalMemCell(K8)
			varK8,
			config, -1)
		if err407 != nil {
			return m.NoResult, err407
		}
		eval408, err408 := evalIsPeakMemoryCell( // isPeakMemoryCell(K9)
			varK9,
			config, -1)
		if err408 != nil {
			return m.NoResult, err408
		}
		eval409, err409 := evalIsCurrentMemoryCell( // isCurrentMemoryCell(K10)
			varK10,
			config, -1)
		if err409 != nil {
			return m.NoResult, err409
		}
		eval410, err410 := evalIsFidCell( // isFidCell(K11)
			varK11,
			config, -1)
		if err410 != nil {
			return m.NoResult, err410
		}
		eval411, err411 := evalIsGasCell( // isGasCell(K12)
			varK12,
			config, -1)
		if err411 != nil {
			return m.NoResult, err411
		}
		eval412, err412 := evalIsPreviousGasCell( // isPreviousGasCell(K13)
			varK13,
			config, -1)
		if err412 != nil {
			return m.NoResult, err412
		}
		eval413, err413 := evalIsStaticCell( // isStaticCell(K14)
			varK14,
			config, -1)
		if err413 != nil {
			return m.NoResult, err413
		}
		if ((((((((((((((m.IsTrue(eval399)) &&
		   (m.IsTrue(eval400))) &&
		   (m.IsTrue(eval401))) &&
		   (m.IsTrue(eval402))) &&
		   (m.IsTrue(eval403))) &&
		   (m.IsTrue(eval404))) &&
		   (m.IsTrue(eval405))) &&
		   (m.IsTrue(eval406))) &&
		   (m.IsTrue(eval407))) &&
		   (m.IsTrue(eval408))) &&
		   (m.IsTrue(eval409))) &&
		   (m.IsTrue(eval410))) &&
		   (m.IsTrue(eval411))) &&
		   (m.IsTrue(eval412))) &&
		   (m.IsTrue(eval413)) {
			// RHS
			traceRuleApply("FUNC", 537, "{| rule isCallFrameCell(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #538
	// source: ? @?
	// {| rule isCallFrameCell(#KToken(#token("CallFrameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallFrameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 538, "{| rule isCallFrameCell(#KToken(#token(\"CallFrameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #539
	// source: ? @?
	// {| rule isCallFrameCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 539, "{| rule isCallFrameCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitCallFrameCell(config m.K, guard int) (m.K, error) {
	// rule #540
	// source: ? @?
	// {| rule initCallFrameCell(.KList)=>`<callFrame>`(initProgramCell(.KList),initCallDepthCell(.KList),initLocalCallsCell(.KList),initIdCell(.KList),initCallerCell(.KList),initCallDataCell(.KList),initCallValueCell(.KList),initRegsCell(.KList),initLocalMemCell(.KList),initPeakMemoryCell(.KList),initCurrentMemoryCell(.KList),initFidCell(.KList),initGasCell(.KList),initPreviousGasCell(.KList),initStaticCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(01d623b75073e997183f8daea1afb28d73e9a336f763b87367c63d26acb2acba) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 540, "{| rule initCallFrameCell(.KList)=>`<callFrame>`(initProgramCell(.KList),initCallDepthCell(.KList),initLocalCallsCell(.KList),initIdCell(.KList),initCallerCell(.KList),initCallDataCell(.KList),initCallValueCell(.KList),initRegsCell(.KList),initLocalMemCell(.KList),initPeakMemoryCell(.KList),initCurrentMemoryCell(.KList),initFidCell(.KList),initGasCell(.KList),initPreviousGasCell(.KList),initStaticCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01d623b75073e997183f8daea1afb28d73e9a336f763b87367c63d26acb2acba) initializer()] |}")
	eval414, err414 := evalInitProgramCell(config, -1) // initProgramCell(.KList)
	if err414 != nil {
		return m.NoResult, err414
	}
	eval415, err415 := evalInitCallDepthCell(config, -1) // initCallDepthCell(.KList)
	if err415 != nil {
		return m.NoResult, err415
	}
	eval416, err416 := evalInitLocalCallsCell(config, -1) // initLocalCallsCell(.KList)
	if err416 != nil {
		return m.NoResult, err416
	}
	eval417, err417 := evalInitIDCell(config, -1) // initIdCell(.KList)
	if err417 != nil {
		return m.NoResult, err417
	}
	eval418, err418 := evalInitCallerCell(config, -1) // initCallerCell(.KList)
	if err418 != nil {
		return m.NoResult, err418
	}
	eval419, err419 := evalInitCallDataCell(config, -1) // initCallDataCell(.KList)
	if err419 != nil {
		return m.NoResult, err419
	}
	eval420, err420 := evalInitCallValueCell(config, -1) // initCallValueCell(.KList)
	if err420 != nil {
		return m.NoResult, err420
	}
	eval421, err421 := evalInitRegsCell(config, -1) // initRegsCell(.KList)
	if err421 != nil {
		return m.NoResult, err421
	}
	eval422, err422 := evalInitLocalMemCell(config, -1) // initLocalMemCell(.KList)
	if err422 != nil {
		return m.NoResult, err422
	}
	eval423, err423 := evalInitPeakMemoryCell(config, -1) // initPeakMemoryCell(.KList)
	if err423 != nil {
		return m.NoResult, err423
	}
	eval424, err424 := evalInitCurrentMemoryCell(config, -1) // initCurrentMemoryCell(.KList)
	if err424 != nil {
		return m.NoResult, err424
	}
	eval425, err425 := evalInitFidCell(config, -1) // initFidCell(.KList)
	if err425 != nil {
		return m.NoResult, err425
	}
	eval426, err426 := evalInitGasCell(config, -1) // initGasCell(.KList)
	if err426 != nil {
		return m.NoResult, err426
	}
	eval427, err427 := evalInitPreviousGasCell(config, -1) // initPreviousGasCell(.KList)
	if err427 != nil {
		return m.NoResult, err427
	}
	eval428, err428 := evalInitStaticCell(config, -1) // initStaticCell(.KList)
	if err428 != nil {
		return m.NoResult, err428
	}
	return &m.KApply{Label: m.LblXltcallFrameXgt, List: []m.K{ // as-is <callFrame>
		eval414,
		eval415,
		eval416,
		eval417,
		eval418,
		eval419,
		eval420,
		eval421,
		eval422,
		eval423,
		eval424,
		eval425,
		eval426,
		eval427,
		eval428,
	}}, nil

}

func evalInitNonceCell(config m.K, guard int) (m.K, error) {
	// rule #541
	// source: ? @?
	// {| rule initNonceCell(.KList)=>`<nonce>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ff558568ff28b98b45a5a3768fca40fb10b2da1a4aaaf84783f4ce366d1aaf1e) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 541, "{| rule initNonceCell(.KList)=>`<nonce>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ff558568ff28b98b45a5a3768fca40fb10b2da1a4aaaf84783f4ce366d1aaf1e) initializer()] |}")
	return &m.KApply{Label: m.LblXltnonceXgt, List: []m.K{ // as-is <nonce>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitNonceCell K = evalInitNonceCell(m.InternedBottom)

func evalIsJumpTableCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #542
	// source: ? @?
	// {| rule isJumpTableCell(`<jumpTable>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltjumpTableXgt && len(kapp0.List) == 1 { // `<jumpTable>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 542, "{| rule isJumpTableCell(`<jumpTable>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #543
	// source: ? @?
	// {| rule isJumpTableCell(#KToken(#token("JumpTableCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpTableCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 543, "{| rule isJumpTableCell(#KToken(#token(\"JumpTableCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #544
	// source: ? @?
	// {| rule isJumpTableCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 544, "{| rule isJumpTableCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXeqXslashXeqStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.ne
	lbl := m.LblXuXeqXslashXeqStringXuXuSTRING // _=/=String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.ne(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.ne, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #545
	// source: domains.k @536
	// {| rule `_=/=String__STRING`(S1,S2)=>`notBool_`(`_==String__STRING`(S1,S2)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token("true","Bool") [UNIQUE_ID(2a5c8974455ca9cde473273aeca1a4fa8072aa68d104bc94daa71ee7bf52c8a4) contentStartColumn(8) contentStartLine(536) org.kframework.attributes.Location(Location(536,8,536,65)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES precomputed isString(S2) && isString(S1)
			// RHS
			traceRuleApply("FUNC", 545, "{| rule `_=/=String__STRING`(S1,S2)=>`notBool_`(`_==String__STRING`(S1,S2)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2a5c8974455ca9cde473273aeca1a4fa8072aa68d104bc94daa71ee7bf52c8a4) contentStartColumn(8) contentStartLine(536) org.kframework.attributes.Location(Location(536,8,536,65)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval430, err430 := evalXuXeqXeqStringXuXuSTRING( // `_==String__STRING`(S1,S2)
				varS1,
				varS2,
				config, -1)
			if err430 != nil {
				return m.NoResult, err430
			}
			eval429, err429 := evalNotBoolXu( // `notBool_`(`_==String__STRING`(S1,S2))
				eval430,
				config, -1)
			if err429 != nil {
				return m.NoResult, err429
			}
			return eval429, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXslashXeqStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalIsAccountCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #546
	// source: ? @?
	// {| rule isAccountCellFragment(#KToken(#token("AccountCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 546, "{| rule isAccountCellFragment(#KToken(#token(\"AccountCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #547
	// source: ? @?
	// {| rule isAccountCellFragment(`<account>-fragment`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCellOpt(K0),isBalanceCellOpt(K1)),isCodeCellOpt(K2)),isStorageCellOpt(K3)),isNonceCellOpt(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountXgtXhyphenfragment && len(kapp0.List) == 5 { // `<account>-fragment`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval431, err431 := evalIsAcctIDCellOpt( // isAcctIDCellOpt(K0)
			varK0,
			config, -1)
		if err431 != nil {
			return m.NoResult, err431
		}
		eval432, err432 := evalIsBalanceCellOpt( // isBalanceCellOpt(K1)
			varK1,
			config, -1)
		if err432 != nil {
			return m.NoResult, err432
		}
		eval433, err433 := evalIsCodeCellOpt( // isCodeCellOpt(K2)
			varK2,
			config, -1)
		if err433 != nil {
			return m.NoResult, err433
		}
		eval434, err434 := evalIsStorageCellOpt( // isStorageCellOpt(K3)
			varK3,
			config, -1)
		if err434 != nil {
			return m.NoResult, err434
		}
		eval435, err435 := evalIsNonceCellOpt( // isNonceCellOpt(K4)
			varK4,
			config, -1)
		if err435 != nil {
			return m.NoResult, err435
		}
		if ((((m.IsTrue(eval431)) &&
		   (m.IsTrue(eval432))) &&
		   (m.IsTrue(eval433))) &&
		   (m.IsTrue(eval434))) &&
		   (m.IsTrue(eval435)) {
			// RHS
			traceRuleApply("FUNC", 547, "{| rule isAccountCellFragment(`<account>-fragment`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCellOpt(K0),isBalanceCellOpt(K1)),isCodeCellOpt(K2)),isStorageCellOpt(K3)),isNonceCellOpt(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #548
	// source: ? @?
	// {| rule isAccountCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 548, "{| rule isAccountCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBswapInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #549
	// source: ? @?
	// {| rule isBswapInst(#KToken(#token("BswapInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBswapInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 549, "{| rule isBswapInst(#KToken(#token(\"BswapInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #550
	// source: ? @?
	// {| rule isBswapInst(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=bswap_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval436, err436 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err436 != nil {
			return m.NoResult, err436
		}
		eval437, err437 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err437 != nil {
			return m.NoResult, err437
		}
		eval438, err438 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err438 != nil {
			return m.NoResult, err438
		}
		if ((m.IsTrue(eval436)) &&
		   (m.IsTrue(eval437))) &&
		   (m.IsTrue(eval438)) {
			// RHS
			traceRuleApply("FUNC", 550, "{| rule isBswapInst(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #551
	// source: ? @?
	// {| rule isBswapInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 551, "{| rule isBswapInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsReturnOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #552
	// source: ? @?
	// {| rule isReturnOp(#KToken(#token("ReturnOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortReturnOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 552, "{| rule isReturnOp(#KToken(#token(\"ReturnOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #553
	// source: ? @?
	// {| rule isReturnOp(`RETURN`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 553, "{| rule isReturnOp(`RETURN`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #554
	// source: ? @?
	// {| rule isReturnOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 554, "{| rule isReturnOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNetworkCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #555
	// source: ? @?
	// {| rule isNetworkCellOpt(#KToken(#token("NetworkCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNetworkCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 555, "{| rule isNetworkCellOpt(#KToken(#token(\"NetworkCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #556
	// source: ? @?
	// {| rule isNetworkCellOpt(noNetworkCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoNetworkCell && len(kapp0.List) == 0 { // noNetworkCell(.KList)
		// RHS
		traceRuleApply("FUNC", 556, "{| rule isNetworkCellOpt(noNetworkCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #557
	// source: ? @?
	// {| rule isNetworkCellOpt(#KToken(#token("NetworkCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNetworkCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 557, "{| rule isNetworkCellOpt(#KToken(#token(\"NetworkCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #558
	// source: ? @?
	// {| rule isNetworkCellOpt(`<network>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnetworkXgt && len(kapp0.List) == 5 { // `<network>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval439, err439 := evalIsActiveAccountsCell( // isActiveAccountsCell(K0)
			varK0,
			config, -1)
		if err439 != nil {
			return m.NoResult, err439
		}
		eval440, err440 := evalIsAccountsCell( // isAccountsCell(K1)
			varK1,
			config, -1)
		if err440 != nil {
			return m.NoResult, err440
		}
		eval441, err441 := evalIsTxOrderCell( // isTxOrderCell(K2)
			varK2,
			config, -1)
		if err441 != nil {
			return m.NoResult, err441
		}
		eval442, err442 := evalIsTxPendingCell( // isTxPendingCell(K3)
			varK3,
			config, -1)
		if err442 != nil {
			return m.NoResult, err442
		}
		eval443, err443 := evalIsMessagesCell( // isMessagesCell(K4)
			varK4,
			config, -1)
		if err443 != nil {
			return m.NoResult, err443
		}
		if ((((m.IsTrue(eval439)) &&
		   (m.IsTrue(eval440))) &&
		   (m.IsTrue(eval441))) &&
		   (m.IsTrue(eval442))) &&
		   (m.IsTrue(eval443)) {
			// RHS
			traceRuleApply("FUNC", 558, "{| rule isNetworkCellOpt(`<network>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #559
	// source: ? @?
	// {| rule isNetworkCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 559, "{| rule isNetworkCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsAccounts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #560
	// source: ? @?
	// {| rule isAccounts(#KToken(#token("Accounts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccounts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 560, "{| rule isAccounts(#KToken(#token(\"Accounts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #561
	// source: ? @?
	// {| rule isAccounts(`{_|_}_IELE-INFRASTRUCTURE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isAccountsCell(K0),isSet(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXpipeXuXrbracketXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 2 { // `{_|_}_IELE-INFRASTRUCTURE`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if varK1, t := kapp0.List[1].(*m.Set); t && varK1.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES
			eval444, err444 := evalIsAccountsCell( // isAccountsCell(K0)
				varK0,
				config, -1)
			if err444 != nil {
				return m.NoResult, err444
			}
			if m.IsTrue(eval444) /* && */ /* rhs precomputed isSet(K1) */  {
				// RHS
				traceRuleApply("FUNC", 561, "{| rule isAccounts(`{_|_}_IELE-INFRASTRUCTURE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isAccountsCell(K0),isSet(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #562
	// source: ? @?
	// {| rule isAccounts(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 562, "{| rule isAccounts(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallerCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #563
	// source: ? @?
	// {| rule isCallerCell(#KToken(#token("CallerCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallerCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 563, "{| rule isCallerCell(#KToken(#token(\"CallerCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #564
	// source: ? @?
	// {| rule isCallerCell(`<caller>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallerXgt && len(kapp0.List) == 1 { // `<caller>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 564, "{| rule isCallerCell(`<caller>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #565
	// source: ? @?
	// {| rule isCallerCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 565, "{| rule isCallerCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsType(c m.K, config m.K, guard int) (m.K, error) {
	// rule #566
	// source: ? @?
	// {| rule isType(`int_IELE-WELL-FORMEDNESS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS && len(kapp0.List) == 0 { // `int_IELE-WELL-FORMEDNESS`(.KList)
		// RHS
		traceRuleApply("FUNC", 566, "{| rule isType(`int_IELE-WELL-FORMEDNESS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #567
	// source: ? @?
	// {| rule isType(funType(K0,K1))=>#token("true","Bool") requires `_andBool_`(isTypes(K0),isReturnType(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFunType && len(kapp0.List) == 2 { // funType(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval445, err445 := evalIsTypes( // isTypes(K0)
			varK0,
			config, -1)
		if err445 != nil {
			return m.NoResult, err445
		}
		eval446, err446 := evalIsReturnType( // isReturnType(K1)
			varK1,
			config, -1)
		if err446 != nil {
			return m.NoResult, err446
		}
		if (m.IsTrue(eval445)) &&
		   (m.IsTrue(eval446)) {
			// RHS
			traceRuleApply("FUNC", 567, "{| rule isType(funType(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isTypes(K0),isReturnType(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #568
	// source: ? @?
	// {| rule isType(#KToken(#token("Type","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortType { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 568, "{| rule isType(#KToken(#token(\"Type\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #569
	// source: ? @?
	// {| rule isType(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 569, "{| rule isType(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSignextend(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #570
	// source: data.k @225
	// {| rule signextend(N,W)=>signExtendBitRangeInt(W,#token("0","Int"),`_<<Int__INT`(N,#token("3","Int"))) requires `_andBool_`(isInt(W),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(e2457eb31860d23bca1c327858353fe89be95a5e96df13d968359b31574971f1) contentStartColumn(10) contentStartLine(225) org.kframework.attributes.Location(Location(225,10,225,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varW, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(W) && isInt(N)
			// RHS
			traceRuleApply("FUNC", 570, "{| rule signextend(N,W)=>signExtendBitRangeInt(W,#token(\"0\",\"Int\"),`_<<Int__INT`(N,#token(\"3\",\"Int\"))) requires `_andBool_`(isInt(W),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2457eb31860d23bca1c327858353fe89be95a5e96df13d968359b31574971f1) contentStartColumn(10) contentStartLine(225) org.kframework.attributes.Location(Location(225,10,225,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval448, err448 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(N,#token("3","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("3"),
				config, -1)
			if err448 != nil {
				return m.NoResult, err448
			}
			eval447, err447 := evalSignExtendBitRangeInt( // signExtendBitRangeInt(W,#token("0","Int"),`_<<Int__INT`(N,#token("3","Int")))
				varW,
				/* rhs KToken */ m.NewIntFromString("0"),
				eval448,
				config, -1)
			if err447 != nil {
				return m.NoResult, err447
			}
			return eval447, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalSignextend", args: []m.K{c1, c2}}
}

func evalXhashtoBlocks(c m.K, config m.K, guard int) (m.K, error) {
	// rule #571
	// source: iele-binary.k @212
	// {| rule #toBlocks(INSTRS)=>#toBlockAux(INSTRS,`.List{"labeledBlockList"}`(.KList)) requires isInstructions(INSTRS) ensures #token("true","Bool") [UNIQUE_ID(7a988dc05f8307cdd085e45389b9ded89f4e5075330c49a57aea88ac8f97a936) contentStartColumn(10) contentStartLine(212) org.kframework.attributes.Location(Location(212,10,212,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varINSTRS := c // lhs KVariable INSTRS
		// REQUIRES
		eval449, err449 := evalIsInstructions( // isInstructions(INSTRS)
			varINSTRS,
			config, -1)
		if err449 != nil {
			return m.NoResult, err449
		}
		if m.IsTrue(eval449) {
			// RHS
			traceRuleApply("FUNC", 571, "{| rule #toBlocks(INSTRS)=>#toBlockAux(INSTRS,`.List{\"labeledBlockList\"}`(.KList)) requires isInstructions(INSTRS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7a988dc05f8307cdd085e45389b9ded89f4e5075330c49a57aea88ac8f97a936) contentStartColumn(10) contentStartLine(212) org.kframework.attributes.Location(Location(212,10,212,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval450, err450 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,`.List{"labeledBlockList"}`(.KList))
				varINSTRS,
				&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
				}},
				config, -1)
			if err450 != nil {
				return m.NoResult, err450
			}
			return eval450, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtoBlocks", args: []m.K{c}}
}

func evalIsJSONKey(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: STRING.String
	if _, t := c.(*m.String); t {
		return m.BoolTrue, nil
	}
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #572
	// source: ? @?
	// {| rule isJSONKey(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 572, "{| rule isJSONKey(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #573
	// source: ? @?
	// {| rule isJSONKey(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 573, "{| rule isJSONKey(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #574
	// source: ? @?
	// {| rule isJSONKey(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 574, "{| rule isJSONKey(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #575
	// source: ? @?
	// {| rule isJSONKey(#KToken(#token("String","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortString { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 575, "{| rule isJSONKey(#KToken(#token(\"String\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #576
	// source: ? @?
	// {| rule isJSONKey(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 576, "{| rule isJSONKey(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #577
	// source: ? @?
	// {| rule isJSONKey(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 577, "{| rule isJSONKey(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #578
	// source: ? @?
	// {| rule isJSONKey(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 578, "{| rule isJSONKey(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #579
	// source: ? @?
	// {| rule isJSONKey(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 579, "{| rule isJSONKey(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #580
	// source: ? @?
	// {| rule isJSONKey(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 580, "{| rule isJSONKey(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #581
	// source: ? @?
	// {| rule isJSONKey(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 581, "{| rule isJSONKey(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #582
	// source: ? @?
	// {| rule isJSONKey(#KToken(#token("JSONKey","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJSONKey { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 582, "{| rule isJSONKey(#KToken(#token(\"JSONKey\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #583
	// source: ? @?
	// {| rule isJSONKey(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 583, "{| rule isJSONKey(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #584
	// source: ? @?
	// {| rule isJSONKey(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 584, "{| rule isJSONKey(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCopyCreateOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #585
	// source: ? @?
	// {| rule isCopyCreateOp(#KToken(#token("CopyCreateOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCopyCreateOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 585, "{| rule isCopyCreateOp(#KToken(#token(\"CopyCreateOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #586
	// source: ? @?
	// {| rule isCopyCreateOp(`COPYCREATE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCOPYCREATE && len(kapp0.List) == 1 { // `COPYCREATE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 586, "{| rule isCopyCreateOp(`COPYCREATE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #587
	// source: ? @?
	// {| rule isCopyCreateOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 587, "{| rule isCopyCreateOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashtake(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #588
	// source: data.k @278
	// {| rule #take(N,WS)=>#takeAux(N,WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(isWordStack(WS),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(f356847bbae70e8232256c599080bc3c48b4cd101c6c92dc5ad9168108269b30) contentStartColumn(10) contentStartLine(278) org.kframework.attributes.Location(Location(278,10,278,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varWS := c2 // lhs KVariable WS
		// REQUIRES
		eval451, err451 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err451 != nil {
			return m.NoResult, err451
		}
		if m.IsTrue(eval451) /* && */ /* rhs precomputed isInt(N) */  {
			// RHS
			traceRuleApply("FUNC", 588, "{| rule #take(N,WS)=>#takeAux(N,WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(isWordStack(WS),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f356847bbae70e8232256c599080bc3c48b4cd101c6c92dc5ad9168108269b30) contentStartColumn(10) contentStartLine(278) org.kframework.attributes.Location(Location(278,10,278,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval452, err452 := evalXhashtakeAux( // #takeAux(N,WS,`.WordStack_IELE-DATA`(.KList))
				varN,
				varWS,
				&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
				}},
				config, -1)
			if err452 != nil {
				return m.NoResult, err452
			}
			return eval452, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtake", args: []m.K{c1, c2}}
}

func evalIsSubInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #589
	// source: ? @?
	// {| rule isSubInst(#KToken(#token("SubInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 589, "{| rule isSubInst(#KToken(#token(\"SubInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #590
	// source: ? @?
	// {| rule isSubInst(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sub_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval453, err453 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err453 != nil {
			return m.NoResult, err453
		}
		eval454, err454 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err454 != nil {
			return m.NoResult, err454
		}
		eval455, err455 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err455 != nil {
			return m.NoResult, err455
		}
		if ((m.IsTrue(eval453)) &&
		   (m.IsTrue(eval454))) &&
		   (m.IsTrue(eval455)) {
			// RHS
			traceRuleApply("FUNC", 590, "{| rule isSubInst(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #591
	// source: ? @?
	// {| rule isSubInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 591, "{| rule isSubInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTxNonceCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #592
	// source: ? @?
	// {| rule isTxNonceCellOpt(`<txNonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxNonceXgt && len(kapp0.List) == 1 { // `<txNonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 592, "{| rule isTxNonceCellOpt(`<txNonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #593
	// source: ? @?
	// {| rule isTxNonceCellOpt(noTxNonceCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTxNonceCell && len(kapp0.List) == 0 { // noTxNonceCell(.KList)
		// RHS
		traceRuleApply("FUNC", 593, "{| rule isTxNonceCellOpt(noTxNonceCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #594
	// source: ? @?
	// {| rule isTxNonceCellOpt(#KToken(#token("TxNonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 594, "{| rule isTxNonceCellOpt(#KToken(#token(\"TxNonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #595
	// source: ? @?
	// {| rule isTxNonceCellOpt(#KToken(#token("TxNonceCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxNonceCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 595, "{| rule isTxNonceCellOpt(#KToken(#token(\"TxNonceCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #596
	// source: ? @?
	// {| rule isTxNonceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 596, "{| rule isTxNonceCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashfresh(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.fresh
	lbl := m.LblXhashfresh // #fresh
	sort := m.SortKItem
	if hookRes, hookErr := kreflectionHooks.fresh(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.fresh, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashfresh", args: []m.K{c}}
}

func evalXhashregRangeAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #597
	// source: iele.k @377
	// {| rule #regRangeAux(_116,_15)=>`.List{"lvalueList"}`(.KList) requires `_andBool_`(isInt(_116),`_==Int_`(_15,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(97aa75999e05849bcdac137dff39ceb4fff05849cb16da6034cf37b245f45644) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varXu15, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval456, err456 := evalXuXeqXeqIntXu( // `_==Int_`(_15,#token("0","Int"))
				varXu15,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err456 != nil {
				return m.NoResult, err456
			}
			if /* rhs precomputed isInt(_116) */ /* && */
			   m.IsTrue(eval456) {
				// RHS
				traceRuleApply("FUNC", 597, "{| rule #regRangeAux(_116,_15)=>`.List{\"lvalueList\"}`(.KList) requires `_andBool_`(isInt(_116),`_==Int_`(_15,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(97aa75999e05849bcdac137dff39ceb4fff05849cb16da6034cf37b245f45644) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
				}}, nil
			}
		}
	}

	// rule #598
	// source: iele.k @378
	// {| rule #regRangeAux(N,_16)=>lvalueList(`%__IELE-COMMON`(N),`.List{"lvalueList"}`(.KList)) requires `_andBool_`(isInt(N),`_==Int_`(_16,#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b73a1db04ed32f321c0693fd9fbffbc221a45c43035794cd6eee6be03326e019) contentStartColumn(10) contentStartLine(378) org.kframework.attributes.Location(Location(378,10,378,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varXu16, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval457, err457 := evalXuXeqXeqIntXu( // `_==Int_`(_16,#token("1","Int"))
				varXu16,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err457 != nil {
				return m.NoResult, err457
			}
			if /* rhs precomputed isInt(N) */ /* && */
			   m.IsTrue(eval457) {
				// RHS
				traceRuleApply("FUNC", 598, "{| rule #regRangeAux(N,_16)=>lvalueList(`%__IELE-COMMON`(N),`.List{\"lvalueList\"}`(.KList)) requires `_andBool_`(isInt(N),`_==Int_`(_16,#token(\"1\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b73a1db04ed32f321c0693fd9fbffbc221a45c43035794cd6eee6be03326e019) contentStartColumn(10) contentStartLine(378) org.kframework.attributes.Location(Location(378,10,378,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
					&m.KApply{Label: m.LblXpercentXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is %__IELE-COMMON
						varN,
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
					}},
				}}, nil
			}
		}
	}

	// rule #599
	// source: iele.k @379
	// {| rule #regRangeAux(N,M)=>lvalueList(`%__IELE-COMMON`(N),#regRangeAux(`_+Int_`(N,#token("1","Int")),`_-Int__INT`(M,#token("1","Int")))) requires `_andBool_`(isInt(N),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(1be5d0e0419f20e225334652b705fba0537c055c2754d0f3f70d3d91bf0663c5) contentStartColumn(10) contentStartLine(379) org.kframework.attributes.Location(Location(379,10,379,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varM, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(N) && isInt(M)
			// RHS
			traceRuleApply("FUNC", 599, "{| rule #regRangeAux(N,M)=>lvalueList(`%__IELE-COMMON`(N),#regRangeAux(`_+Int_`(N,#token(\"1\",\"Int\")),`_-Int__INT`(M,#token(\"1\",\"Int\")))) requires `_andBool_`(isInt(N),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1be5d0e0419f20e225334652b705fba0537c055c2754d0f3f70d3d91bf0663c5) contentStartColumn(10) contentStartLine(379) org.kframework.attributes.Location(Location(379,10,379,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval459, err459 := evalXuXplusIntXu( // `_+Int_`(N,#token("1","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err459 != nil {
				return m.NoResult, err459
			}
			eval460, err460 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(M,#token("1","Int"))
				varM,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err460 != nil {
				return m.NoResult, err460
			}
			eval458, err458 := evalXhashregRangeAux( // #regRangeAux(`_+Int_`(N,#token("1","Int")),`_-Int__INT`(M,#token("1","Int")))
				eval459,
				eval460,
				config, -1)
			if err458 != nil {
				return m.NoResult, err458
			}
			return &m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
				&m.KApply{Label: m.LblXpercentXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is %__IELE-COMMON
					varN,
				}},
				eval458,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashregRangeAux", args: []m.K{c1, c2}}
}

func evalIsTypesCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #600
	// source: ? @?
	// {| rule isTypesCellOpt(#KToken(#token("TypesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 600, "{| rule isTypesCellOpt(#KToken(#token(\"TypesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #601
	// source: ? @?
	// {| rule isTypesCellOpt(#KToken(#token("TypesCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypesCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 601, "{| rule isTypesCellOpt(#KToken(#token(\"TypesCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #602
	// source: ? @?
	// {| rule isTypesCellOpt(`<types>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypesXgt && len(kapp0.List) == 1 { // `<types>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 602, "{| rule isTypesCellOpt(`<types>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #603
	// source: ? @?
	// {| rule isTypesCellOpt(noTypesCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTypesCell && len(kapp0.List) == 0 { // noTypesCell(.KList)
		// RHS
		traceRuleApply("FUNC", 603, "{| rule isTypesCellOpt(noTypesCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #604
	// source: ? @?
	// {| rule isTypesCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 604, "{| rule isTypesCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashallBut64th(c m.K, config m.K, guard int) (m.K, error) {
	// rule #605
	// source: iele-gas.k @808
	// {| rule #allBut64th(N)=>`_-Int__INT`(N,`_/Int__INT`(N,#token("64","Int"))) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(88b1069f47984c91fcd6c48ab78e1ffc30562312d317d49779ad7dbdfb62900b) contentStartColumn(10) contentStartLine(808) org.kframework.attributes.Location(Location(808,10,808,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 605, "{| rule #allBut64th(N)=>`_-Int__INT`(N,`_/Int__INT`(N,#token(\"64\",\"Int\"))) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(88b1069f47984c91fcd6c48ab78e1ffc30562312d317d49779ad7dbdfb62900b) contentStartColumn(10) contentStartLine(808) org.kframework.attributes.Location(Location(808,10,808,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval462, err462 := evalXuXslashIntXuXuINT( // `_/Int__INT`(N,#token("64","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("64"),
			config, -1)
		if err462 != nil {
			return m.NoResult, err462
		}
		eval461, err461 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,`_/Int__INT`(N,#token("64","Int")))
			varN,
			eval462,
			config, -1)
		if err461 != nil {
			return m.NoResult, err461
		}
		return eval461, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashallBut64th", args: []m.K{c}}
}

func evalXuXstarIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.mul
	lbl := m.LblXuXstarIntXuXuINT // _*Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.mul(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.mul, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXstarIntXuXuINT", args: []m.K{c1, c2}}
}

func evalInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #606
	// source: well-formedness.k @75
	// {| rule ints(_11)=>`.List{"typeList"}`(.KList) requires `_==Int_`(_11,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(c7d27c1158baf88a8ea5995d80f7da30251ce98e36e341c5c0adcd350256f997) contentStartColumn(10) contentStartLine(75) org.kframework.attributes.Location(Location(75,10,75,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu11, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval463, err463 := evalXuXeqXeqIntXu( // `_==Int_`(_11,#token("0","Int"))
			varXu11,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err463 != nil {
			return m.NoResult, err463
		}
		if m.IsTrue(eval463) {
			// RHS
			traceRuleApply("FUNC", 606, "{| rule ints(_11)=>`.List{\"typeList\"}`(.KList) requires `_==Int_`(_11,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c7d27c1158baf88a8ea5995d80f7da30251ce98e36e341c5c0adcd350256f997) contentStartColumn(10) contentStartLine(75) org.kframework.attributes.Location(Location(75,10,75,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return &m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}}, nil
		}
	}

	// rule #607
	// source: well-formedness.k @76
	// {| rule ints(N)=>typeList(`int_IELE-WELL-FORMEDNESS`(.KList),ints(`_-Int__INT`(N,#token("1","Int")))) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(fac9f077cc1ab6441fca1ba4b0e71074ae836b4d460f7392b6dfe74dc2469d91) contentStartColumn(10) contentStartLine(76) org.kframework.attributes.Location(Location(76,10,76,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 607, "{| rule ints(N)=>typeList(`int_IELE-WELL-FORMEDNESS`(.KList),ints(`_-Int__INT`(N,#token(\"1\",\"Int\")))) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fac9f077cc1ab6441fca1ba4b0e71074ae836b4d460f7392b6dfe74dc2469d91) contentStartColumn(10) contentStartLine(76) org.kframework.attributes.Location(Location(76,10,76,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
		eval465, err465 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,#token("1","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("1"),
			config, -1)
		if err465 != nil {
			return m.NoResult, err465
		}
		eval464, err464 := evalInts( // ints(`_-Int__INT`(N,#token("1","Int")))
			eval465,
			config, -1)
		if err464 != nil {
			return m.NoResult, err464
		}
		return &m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
			&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
			}},
			eval464,
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInts", args: []m.K{c}}
}

func evalIsNparamsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #608
	// source: ? @?
	// {| rule isNparamsCellOpt(#KToken(#token("NparamsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNparamsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 608, "{| rule isNparamsCellOpt(#KToken(#token(\"NparamsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #609
	// source: ? @?
	// {| rule isNparamsCellOpt(#KToken(#token("NparamsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNparamsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 609, "{| rule isNparamsCellOpt(#KToken(#token(\"NparamsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #610
	// source: ? @?
	// {| rule isNparamsCellOpt(noNparamsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoNparamsCell && len(kapp0.List) == 0 { // noNparamsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 610, "{| rule isNparamsCellOpt(noNparamsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #611
	// source: ? @?
	// {| rule isNparamsCellOpt(`<nparams>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnparamsXgt && len(kapp0.List) == 1 { // `<nparams>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 611, "{| rule isNparamsCellOpt(`<nparams>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #612
	// source: ? @?
	// {| rule isNparamsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 612, "{| rule isNparamsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitContractsCell(config m.K, guard int) (m.K, error) {
	// rule #613
	// source: ? @?
	// {| rule initContractsCell(.KList)=>`<contracts>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2dd69680cc7ec4a2dc0a1a3572ea887cfb5007fe6dd3b6a1e4558a50185c2549) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 613, "{| rule initContractsCell(.KList)=>`<contracts>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2dd69680cc7ec4a2dc0a1a3572ea887cfb5007fe6dd3b6a1e4558a50185c2549) initializer()] |}")
	eval466, err466 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err466 != nil {
		return m.NoResult, err466
	}
	return &m.KApply{Label: m.LblXltcontractsXgt, List: []m.K{ // as-is <contracts>
		eval466,
	}}, nil

}

//var constInitContractsCell K = evalInitContractsCell(m.InternedBottom)

func evalXdotMessageCellMap(config m.K, guard int) (m.K, error) {
	//hook: MAP.unit
	lbl := m.LblXdotMessageCellMap // .MessageCellMap
	sort := m.SortMessageCellMap
	if hookRes, hookErr := mapHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotMessageCellMap", args: nil}
}

//var constXdotMessageCellMap K = evalXdotMessageCellMap(m.InternedBottom)

func evalXuXltXeqStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.le
	lbl := m.LblXuXltXeqStringXuXuSTRING // _<=String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.le(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.le, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #614
	// source: domains.k @549
	// {| rule `_<=String__STRING`(S1,S2)=>`notBool_`(`_<String__STRING`(S2,S1)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token("true","Bool") [UNIQUE_ID(2c1110a97c0d904a19992e4eac695692515cb703f5d689aaa6945290a696d662) contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,549,63)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES precomputed isString(S2) && isString(S1)
			// RHS
			traceRuleApply("FUNC", 614, "{| rule `_<=String__STRING`(S1,S2)=>`notBool_`(`_<String__STRING`(S2,S1)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c1110a97c0d904a19992e4eac695692515cb703f5d689aaa6945290a696d662) contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,549,63)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval468, err468 := evalXuXltStringXuXuSTRING( // `_<String__STRING`(S2,S1)
				varS2,
				varS1,
				config, -1)
			if err468 != nil {
				return m.NoResult, err468
			}
			eval467, err467 := evalNotBoolXu( // `notBool_`(`_<String__STRING`(S2,S1))
				eval468,
				config, -1)
			if err467 != nil {
				return m.NoResult, err467
			}
			return eval467, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXeqStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalInitCallerCell(config m.K, guard int) (m.K, error) {
	// rule #615
	// source: ? @?
	// {| rule initCallerCell(.KList)=>`<caller>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ae2a2d4f5c4ebf62f30ef67eb6fbfc3b3720537526994bd051f336c548b6af1f) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 615, "{| rule initCallerCell(.KList)=>`<caller>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ae2a2d4f5c4ebf62f30ef67eb6fbfc3b3720537526994bd051f336c548b6af1f) initializer()] |}")
	return &m.KApply{Label: m.LblXltcallerXgt, List: []m.K{ // as-is <caller>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitCallerCell K = evalInitCallerCell(m.InternedBottom)

func evalXhashcontractBytesAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #616
	// source: iele.k @1794
	// {| rule #contractBytesAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_80,BYTES,_81),_82),NAME)=>BYTES requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(BYTES),isIeleName(NAME)),isTopLevelDefinitions(_81)),isContract(_82)),isInt(_80)) ensures #token("true","Bool") [UNIQUE_ID(0a08eeab844f5f0d5d3d1e3d2f3cf0f8b0e24123bb859a88d610dc7409356e7f) contentStartColumn(10) contentStartLine(1794) org.kframework.attributes.Location(Location(1794,10,1794,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_80,BYTES,_81),_82)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,_80,BYTES,_81)
			varNAME := kapp1.List[0] // lhs KVariable NAME
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varBYTES, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu81 := kapp1.List[3] // lhs KVariable _81
					varXu82 := kapp0.List[1] // lhs KVariable _82
					if c2.Equals(varNAME) { // lhs KVariable, which reappears:NAME
						// REQUIRES
						eval469, err469 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err469 != nil {
							return m.NoResult, err469
						}
						eval470, err470 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_81)
							varXu81,
							config, -1)
						if err470 != nil {
							return m.NoResult, err470
						}
						eval471, err471 := evalIsContract( // isContract(_82)
							varXu82,
							config, -1)
						if err471 != nil {
							return m.NoResult, err471
						}
						if ((/* rhs precomputed isString(BYTES) */ /* && */
						   m.IsTrue(eval469)) &&
						   (m.IsTrue(eval470))) &&
						   (m.IsTrue(eval471)) /* && */ /* rhs precomputed isInt(_80) */  {
							// RHS
							traceRuleApply("FUNC", 616, "{| rule #contractBytesAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_80,BYTES,_81),_82),NAME)=>BYTES requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(BYTES),isIeleName(NAME)),isTopLevelDefinitions(_81)),isContract(_82)),isInt(_80)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a08eeab844f5f0d5d3d1e3d2f3cf0f8b0e24123bb859a88d610dc7409356e7f) contentStartColumn(10) contentStartLine(1794) org.kframework.attributes.Location(Location(1794,10,1794,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return varBYTES, nil
						}
					}
				}
			}
		}
	}

	// rule #617
	// source: iele.k @1795
	// {| rule #contractBytesAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_51,_52,_53,_54),REST),NAME)=>#contractBytesAux(REST,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_52),isIeleName(_51)),isString(_53)),isIeleName(NAME)),isContract(REST)),isTopLevelDefinitions(_54)) ensures #token("true","Bool") [UNIQUE_ID(631dab00b53a12748711b71ddfc382021b389892df9f01cfdfd4f2ba1f1d377f) contentStartColumn(10) contentStartLine(1795) org.kframework.attributes.Location(Location(1795,10,1795,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_51,_52,_53,_54),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_51,_52,_53,_54)
			varXu51 := kapp1.List[0] // lhs KVariable _51
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu54 := kapp1.List[3] // lhs KVariable _54
					varREST := kapp0.List[1] // lhs KVariable REST
					varNAME := c2 // lhs KVariable NAME
					// REQUIRES
					eval472, err472 := evalIsIeleName( // isIeleName(_51)
						varXu51,
						config, -1)
					if err472 != nil {
						return m.NoResult, err472
					}
					eval473, err473 := evalIsIeleName( // isIeleName(NAME)
						varNAME,
						config, -1)
					if err473 != nil {
						return m.NoResult, err473
					}
					eval474, err474 := evalIsContract( // isContract(REST)
						varREST,
						config, -1)
					if err474 != nil {
						return m.NoResult, err474
					}
					eval475, err475 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_54)
						varXu54,
						config, -1)
					if err475 != nil {
						return m.NoResult, err475
					}
					if (((/* rhs precomputed isInt(_52) */ /* && */
					   m.IsTrue(eval472) /* && */ /* rhs precomputed isString(_53) */ ) &&
					   (m.IsTrue(eval473))) &&
					   (m.IsTrue(eval474))) &&
					   (m.IsTrue(eval475)) {
						// RHS
						traceRuleApply("FUNC", 617, "{| rule #contractBytesAux(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_51,_52,_53,_54),REST),NAME)=>#contractBytesAux(REST,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_52),isIeleName(_51)),isString(_53)),isIeleName(NAME)),isContract(REST)),isTopLevelDefinitions(_54)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(631dab00b53a12748711b71ddfc382021b389892df9f01cfdfd4f2ba1f1d377f) contentStartColumn(10) contentStartLine(1795) org.kframework.attributes.Location(Location(1795,10,1795,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval476, err476 := evalXhashcontractBytesAux( // #contractBytesAux(REST,NAME)
							varREST,
							varNAME,
							config, -1)
						if err476 != nil {
							return m.NoResult, err476
						}
						return eval476, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcontractBytesAux", args: []m.K{c1, c2}}
}

func evalXhashnumArgs(c m.K, config m.K, guard int) (m.K, error) {
	// rule #618
	// source: iele-binary.k @365
	// {| rule #numArgs(`CALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token("5","Int"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token("true","Bool") [UNIQUE_ID(9af87a112005391027d2d45fa3b253a42978969c68e4c38d4646d69c5bc80755) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLDYN && len(kapp0.List) == 2 { // `CALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(ARGS) && isInt(RETS)
				// RHS
				traceRuleApply("FUNC", 618, "{| rule #numArgs(`CALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token(\"5\",\"Int\"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9af87a112005391027d2d45fa3b253a42978969c68e4c38d4646d69c5bc80755) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval478, err478 := evalXuXplusIntXu( // `_+Int_`(#token("5","Int"),ARGS)
					/* rhs KToken */ m.NewIntFromString("5"),
					varARGS,
					config, -1)
				if err478 != nil {
					return m.NoResult, err478
				}
				eval477, err477 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(#token("5","Int"),ARGS),RETS)
					eval478,
					varRETS,
					config, -1)
				if err477 != nil {
					return m.NoResult, err477
				}
				return eval477, nil
			}
		}
	}

	// rule #619
	// source: iele-binary.k @357
	// {| rule #numArgs(_642)=>#token("1","Int") requires isUnOp(_642) ensures #token("true","Bool") [UNIQUE_ID(9c2b7be15b3443e2336d5fc926b9892dd75a0cd7d0480c287733cda56c54dc76) contentStartColumn(10) contentStartLine(357) org.kframework.attributes.Location(Location(357,10,357,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu642 := c // lhs KVariable _642
		// REQUIRES
		eval479, err479 := evalIsUnOp( // isUnOp(_642)
			varXu642,
			config, -1)
		if err479 != nil {
			return m.NoResult, err479
		}
		if m.IsTrue(eval479) {
			// RHS
			traceRuleApply("FUNC", 619, "{| rule #numArgs(_642)=>#token(\"1\",\"Int\") requires isUnOp(_642) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9c2b7be15b3443e2336d5fc926b9892dd75a0cd7d0480c287733cda56c54dc76) contentStartColumn(10) contentStartLine(357) org.kframework.attributes.Location(Location(357,10,357,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #620
	// source: iele-binary.k @371
	// {| rule #numArgs(`COPYCREATE`(ARGS))=>`_+Int_`(#token("4","Int"),ARGS) requires isInt(ARGS) ensures #token("true","Bool") [UNIQUE_ID(48be7450aa7a45607952d2056682b1922b23c8eda8ad6baf927c17217cf1f052) contentStartColumn(10) contentStartLine(371) org.kframework.attributes.Location(Location(371,10,371,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCOPYCREATE && len(kapp0.List) == 1 { // `COPYCREATE`(ARGS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(ARGS)
			// RHS
			traceRuleApply("FUNC", 620, "{| rule #numArgs(`COPYCREATE`(ARGS))=>`_+Int_`(#token(\"4\",\"Int\"),ARGS) requires isInt(ARGS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(48be7450aa7a45607952d2056682b1922b23c8eda8ad6baf927c17217cf1f052) contentStartColumn(10) contentStartLine(371) org.kframework.attributes.Location(Location(371,10,371,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval480, err480 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),ARGS)
				/* rhs KToken */ m.NewIntFromString("4"),
				varARGS,
				config, -1)
			if err480 != nil {
				return m.NoResult, err480
			}
			return eval480, nil
		}
	}

	// rule #621
	// source: iele-binary.k @363
	// {| rule #numArgs(`STATICCALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token("4","Int"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token("true","Bool") [UNIQUE_ID(a2a4b5dd3a1f9827714e9ce047b1715b0466096e4ac3d23e45c89ba3d26ecc31) contentStartColumn(10) contentStartLine(363) org.kframework.attributes.Location(Location(363,10,363,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALLDYN && len(kapp0.List) == 2 { // `STATICCALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(ARGS) && isInt(RETS)
				// RHS
				traceRuleApply("FUNC", 621, "{| rule #numArgs(`STATICCALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token(\"4\",\"Int\"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a2a4b5dd3a1f9827714e9ce047b1715b0466096e4ac3d23e45c89ba3d26ecc31) contentStartColumn(10) contentStartLine(363) org.kframework.attributes.Location(Location(363,10,363,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval482, err482 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),ARGS)
					/* rhs KToken */ m.NewIntFromString("4"),
					varARGS,
					config, -1)
				if err482 != nil {
					return m.NoResult, err482
				}
				eval481, err481 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(#token("4","Int"),ARGS),RETS)
					eval482,
					varRETS,
					config, -1)
				if err481 != nil {
					return m.NoResult, err481
				}
				return eval481, nil
			}
		}
	}

	// rule #622
	// source: iele-binary.k @359
	// {| rule #numArgs(_703)=>#token("3","Int") requires isTernOp(_703) ensures #token("true","Bool") [UNIQUE_ID(1dc108690622326f56510f64218636be06daa23c602c18f157c340d465a39561) contentStartColumn(10) contentStartLine(359) org.kframework.attributes.Location(Location(359,10,359,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu703 := c // lhs KVariable _703
		// REQUIRES
		eval483, err483 := evalIsTernOp( // isTernOp(_703)
			varXu703,
			config, -1)
		if err483 != nil {
			return m.NoResult, err483
		}
		if m.IsTrue(eval483) {
			// RHS
			traceRuleApply("FUNC", 622, "{| rule #numArgs(_703)=>#token(\"3\",\"Int\") requires isTernOp(_703) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1dc108690622326f56510f64218636be06daa23c602c18f157c340d465a39561) contentStartColumn(10) contentStartLine(359) org.kframework.attributes.Location(Location(359,10,359,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #623
	// source: iele-binary.k @370
	// {| rule #numArgs(`CREATE`(_672,ARGS))=>`_+Int_`(#token("3","Int"),ARGS) requires `_andBool_`(isInt(ARGS),isInt(_672)) ensures #token("true","Bool") [UNIQUE_ID(fc0a3f1ad2d406d405fb6a648d08c6ec5f4ebf811a7d60cc7dcb5c741eae94e8) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCREATE && len(kapp0.List) == 2 { // `CREATE`(_672,ARGS)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(ARGS) && isInt(_672)
				// RHS
				traceRuleApply("FUNC", 623, "{| rule #numArgs(`CREATE`(_672,ARGS))=>`_+Int_`(#token(\"3\",\"Int\"),ARGS) requires `_andBool_`(isInt(ARGS),isInt(_672)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fc0a3f1ad2d406d405fb6a648d08c6ec5f4ebf811a7d60cc7dcb5c741eae94e8) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval484, err484 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),ARGS)
					/* rhs KToken */ m.NewIntFromString("3"),
					varARGS,
					config, -1)
				if err484 != nil {
					return m.NoResult, err484
				}
				return eval484, nil
			}
		}
	}

	// rule #624
	// source: iele-binary.k @358
	// {| rule #numArgs(_684)=>#token("2","Int") requires isBinOp(_684) ensures #token("true","Bool") [UNIQUE_ID(e4d251356f6602895a7d3fac9e368276d28436ad9ccc7e8e56e9f58de4048549) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,358,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu684 := c // lhs KVariable _684
		// REQUIRES
		eval485, err485 := evalIsBinOp( // isBinOp(_684)
			varXu684,
			config, -1)
		if err485 != nil {
			return m.NoResult, err485
		}
		if m.IsTrue(eval485) {
			// RHS
			traceRuleApply("FUNC", 624, "{| rule #numArgs(_684)=>#token(\"2\",\"Int\") requires isBinOp(_684) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e4d251356f6602895a7d3fac9e368276d28436ad9ccc7e8e56e9f58de4048549) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,358,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #625
	// source: iele-binary.k @369
	// {| rule #numArgs(`RETURN`(RETS))=>RETS requires isInt(RETS) ensures #token("true","Bool") [UNIQUE_ID(bc4ce25ffb498a9487e985718c2653fe0b2e53a7bf383c32f168cfaed838b1d0) contentStartColumn(10) contentStartLine(369) org.kframework.attributes.Location(Location(369,10,369,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(RETS)
		if varRETS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(RETS)
			// RHS
			traceRuleApply("FUNC", 625, "{| rule #numArgs(`RETURN`(RETS))=>RETS requires isInt(RETS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc4ce25ffb498a9487e985718c2653fe0b2e53a7bf383c32f168cfaed838b1d0) contentStartColumn(10) contentStartLine(369) org.kframework.attributes.Location(Location(369,10,369,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varRETS, nil
		}
	}

	// rule #626
	// source: iele-binary.k @368
	// {| rule #numArgs(`CALLADDRESS`(_577))=>#token("2","Int") requires isInt(_577) ensures #token("true","Bool") [UNIQUE_ID(e5ea79d1b54c4b0012a17ab28854a6f5366af03f57a813e3885f346665201960) contentStartColumn(10) contentStartLine(368) org.kframework.attributes.Location(Location(368,10,368,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLADDRESS && len(kapp0.List) == 1 { // `CALLADDRESS`(_577)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_577)
			// RHS
			traceRuleApply("FUNC", 626, "{| rule #numArgs(`CALLADDRESS`(_577))=>#token(\"2\",\"Int\") requires isInt(_577) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e5ea79d1b54c4b0012a17ab28854a6f5366af03f57a813e3885f346665201960) contentStartColumn(10) contentStartLine(368) org.kframework.attributes.Location(Location(368,10,368,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #627
	// source: iele-binary.k @362
	// {| rule #numArgs(`STATICCALL`(_702,ARGS,RETS))=>`_+Int_`(`_+Int_`(#token("3","Int"),ARGS),RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(RETS)),isInt(_702)) ensures #token("true","Bool") [UNIQUE_ID(2a7072c0d804780781b9ebd81efd7fd742a150a53d9d32a5fbe4ce13eefec39d) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALL && len(kapp0.List) == 3 { // `STATICCALL`(_702,ARGS,RETS)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(ARGS) && isInt(RETS) && isInt(_702)
					// RHS
					traceRuleApply("FUNC", 627, "{| rule #numArgs(`STATICCALL`(_702,ARGS,RETS))=>`_+Int_`(`_+Int_`(#token(\"3\",\"Int\"),ARGS),RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(RETS)),isInt(_702)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2a7072c0d804780781b9ebd81efd7fd742a150a53d9d32a5fbe4ce13eefec39d) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval487, err487 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),ARGS)
						/* rhs KToken */ m.NewIntFromString("3"),
						varARGS,
						config, -1)
					if err487 != nil {
						return m.NoResult, err487
					}
					eval486, err486 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(#token("3","Int"),ARGS),RETS)
						eval487,
						varRETS,
						config, -1)
					if err486 != nil {
						return m.NoResult, err486
					}
					return eval486, nil
				}
			}
		}
	}

	// rule #628
	// source: iele-binary.k @360
	// {| rule #numArgs(_514)=>#token("4","Int") requires isQuadOp(_514) ensures #token("true","Bool") [UNIQUE_ID(8bf2ec87bceae77d2d6a9ffd38b227e094345aa739e253b700224741d7c39101) contentStartColumn(10) contentStartLine(360) org.kframework.attributes.Location(Location(360,10,360,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu514 := c // lhs KVariable _514
		// REQUIRES
		eval488, err488 := evalIsQuadOp( // isQuadOp(_514)
			varXu514,
			config, -1)
		if err488 != nil {
			return m.NoResult, err488
		}
		if m.IsTrue(eval488) {
			// RHS
			traceRuleApply("FUNC", 628, "{| rule #numArgs(_514)=>#token(\"4\",\"Int\") requires isQuadOp(_514) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8bf2ec87bceae77d2d6a9ffd38b227e094345aa739e253b700224741d7c39101) contentStartColumn(10) contentStartLine(360) org.kframework.attributes.Location(Location(360,10,360,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4"), nil
		}
	}

	// rule #629
	// source: iele-binary.k @356
	// {| rule #numArgs(_480)=>#token("0","Int") requires isNullOp(_480) ensures #token("true","Bool") [UNIQUE_ID(6bd56eb57ffa3513c69ef4e324cf0ae4f4e36a7beb1ae1a072ead2d5830a1d0b) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu480 := c // lhs KVariable _480
		// REQUIRES
		eval489, err489 := evalIsNullOp( // isNullOp(_480)
			varXu480,
			config, -1)
		if err489 != nil {
			return m.NoResult, err489
		}
		if m.IsTrue(eval489) {
			// RHS
			traceRuleApply("FUNC", 629, "{| rule #numArgs(_480)=>#token(\"0\",\"Int\") requires isNullOp(_480) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6bd56eb57ffa3513c69ef4e324cf0ae4f4e36a7beb1ae1a072ead2d5830a1d0b) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #630
	// source: iele-binary.k @361
	// {| rule #numArgs(_676)=>#token("5","Int") requires isFiveOp(_676) ensures #token("true","Bool") [UNIQUE_ID(86996b7d858c33e6853dd9cde23481ec7a162a01c3e9cecb4bd3c531486b5f52) contentStartColumn(10) contentStartLine(361) org.kframework.attributes.Location(Location(361,10,361,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu676 := c // lhs KVariable _676
		// REQUIRES
		eval490, err490 := evalIsFiveOp( // isFiveOp(_676)
			varXu676,
			config, -1)
		if err490 != nil {
			return m.NoResult, err490
		}
		if m.IsTrue(eval490) {
			// RHS
			traceRuleApply("FUNC", 630, "{| rule #numArgs(_676)=>#token(\"5\",\"Int\") requires isFiveOp(_676) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(86996b7d858c33e6853dd9cde23481ec7a162a01c3e9cecb4bd3c531486b5f52) contentStartColumn(10) contentStartLine(361) org.kframework.attributes.Location(Location(361,10,361,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #631
	// source: iele-binary.k @367
	// {| rule #numArgs(`LOCALCALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token("1","Int"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token("true","Bool") [UNIQUE_ID(e982ac3d346476e26f856ef3fa9a0458726eaa35c7d2745966a51230d7de5f03) contentStartColumn(10) contentStartLine(367) org.kframework.attributes.Location(Location(367,10,367,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALLDYN && len(kapp0.List) == 2 { // `LOCALCALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(ARGS) && isInt(RETS)
				// RHS
				traceRuleApply("FUNC", 631, "{| rule #numArgs(`LOCALCALLDYN`(ARGS,RETS))=>`_+Int_`(`_+Int_`(#token(\"1\",\"Int\"),ARGS),RETS) requires `_andBool_`(isInt(ARGS),isInt(RETS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e982ac3d346476e26f856ef3fa9a0458726eaa35c7d2745966a51230d7de5f03) contentStartColumn(10) contentStartLine(367) org.kframework.attributes.Location(Location(367,10,367,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval492, err492 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),ARGS)
					/* rhs KToken */ m.NewIntFromString("1"),
					varARGS,
					config, -1)
				if err492 != nil {
					return m.NoResult, err492
				}
				eval491, err491 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(#token("1","Int"),ARGS),RETS)
					eval492,
					varRETS,
					config, -1)
				if err491 != nil {
					return m.NoResult, err491
				}
				return eval491, nil
			}
		}
	}

	// rule #632
	// source: iele-binary.k @364
	// {| rule #numArgs(`CALL`(_526,ARGS,RETS))=>`_+Int_`(`_+Int_`(#token("4","Int"),ARGS),RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(RETS)),isInt(_526)) ensures #token("true","Bool") [UNIQUE_ID(2df0468c6b942640930d2e49df16537c6e379eef6db195490b9388d6cc1626a5) contentStartColumn(10) contentStartLine(364) org.kframework.attributes.Location(Location(364,10,364,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALL && len(kapp0.List) == 3 { // `CALL`(_526,ARGS,RETS)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(ARGS) && isInt(RETS) && isInt(_526)
					// RHS
					traceRuleApply("FUNC", 632, "{| rule #numArgs(`CALL`(_526,ARGS,RETS))=>`_+Int_`(`_+Int_`(#token(\"4\",\"Int\"),ARGS),RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(RETS)),isInt(_526)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2df0468c6b942640930d2e49df16537c6e379eef6db195490b9388d6cc1626a5) contentStartColumn(10) contentStartLine(364) org.kframework.attributes.Location(Location(364,10,364,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval494, err494 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),ARGS)
						/* rhs KToken */ m.NewIntFromString("4"),
						varARGS,
						config, -1)
					if err494 != nil {
						return m.NoResult, err494
					}
					eval493, err493 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(#token("4","Int"),ARGS),RETS)
						eval494,
						varRETS,
						config, -1)
					if err493 != nil {
						return m.NoResult, err493
					}
					return eval493, nil
				}
			}
		}
	}

	// rule #633
	// source: iele-binary.k @366
	// {| rule #numArgs(`LOCALCALL`(_632,ARGS,RETS))=>`_+Int_`(ARGS,RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(_632)),isInt(RETS)) ensures #token("true","Bool") [UNIQUE_ID(3e6deeac4e00830ec977da0d5c0adb621f33ac6b550dda4dabf4c602c27ed254) contentStartColumn(10) contentStartLine(366) org.kframework.attributes.Location(Location(366,10,366,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALL && len(kapp0.List) == 3 { // `LOCALCALL`(_632,ARGS,RETS)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(ARGS) && isInt(_632) && isInt(RETS)
					// RHS
					traceRuleApply("FUNC", 633, "{| rule #numArgs(`LOCALCALL`(_632,ARGS,RETS))=>`_+Int_`(ARGS,RETS) requires `_andBool_`(`_andBool_`(isInt(ARGS),isInt(_632)),isInt(RETS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3e6deeac4e00830ec977da0d5c0adb621f33ac6b550dda4dabf4c602c27ed254) contentStartColumn(10) contentStartLine(366) org.kframework.attributes.Location(Location(366,10,366,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval495, err495 := evalXuXplusIntXu( // `_+Int_`(ARGS,RETS)
						varARGS,
						varRETS,
						config, -1)
					if err495 != nil {
						return m.NoResult, err495
					}
					return eval495, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashnumArgs", args: []m.K{c}}
}

func evalXhashdecodeLengthPrefixLengthAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #634
	// source: data.k @584
	// {| rule #decodeLengthPrefixLengthAux(TYPE,START,LL,L)=>`_(_,_)_IELE-DATA`(TYPE,L,`_+Int_`(`_+Int_`(START,#token("1","Int")),LL)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LL),isInt(START)),isLengthPrefixType(TYPE)),isInt(L)) ensures #token("true","Bool") [UNIQUE_ID(0b85bcdc9e9bff709a0c405a4e14f8aa39e6a4d4ca6a15bc437021ec6b579418) contentStartColumn(10) contentStartLine(584) org.kframework.attributes.Location(Location(584,10,584,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varTYPE := c1 // lhs KVariable TYPE
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLL, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varL, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval496, err496 := evalIsLengthPrefixType( // isLengthPrefixType(TYPE)
						varTYPE,
						config, -1)
					if err496 != nil {
						return m.NoResult, err496
					}
					if /* rhs precomputed isInt(LL) && isInt(START) */ /* && */
					   m.IsTrue(eval496) /* && */ /* rhs precomputed isInt(L) */  {
						// RHS
						traceRuleApply("FUNC", 634, "{| rule #decodeLengthPrefixLengthAux(TYPE,START,LL,L)=>`_(_,_)_IELE-DATA`(TYPE,L,`_+Int_`(`_+Int_`(START,#token(\"1\",\"Int\")),LL)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LL),isInt(START)),isLengthPrefixType(TYPE)),isInt(L)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b85bcdc9e9bff709a0c405a4e14f8aa39e6a4d4ca6a15bc437021ec6b579418) contentStartColumn(10) contentStartLine(584) org.kframework.attributes.Location(Location(584,10,584,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval498, err498 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
							varSTART,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err498 != nil {
							return m.NoResult, err498
						}
						eval497, err497 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(START,#token("1","Int")),LL)
							eval498,
							varLL,
							config, -1)
						if err497 != nil {
							return m.NoResult, err497
						}
						return &m.KApply{Label: m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA, List: []m.K{ // as-is _(_,_)_IELE-DATA
							varTYPE,
							varL,
							eval497,
						}}, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdecodeLengthPrefixLengthAux", args: []m.K{c1, c2, c3, c4}}
}

func evalListToInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #635
	// source: iele-node.k @140
	// {| rule `ListToInts`(`_List_`(`ListItem`(I),L))=>operandList(I,`ListToInts`(L)) requires `_andBool_`(isList(L),isInt(I)) ensures #token("true","Bool") [UNIQUE_ID(0f7432a4cdf251d09e0252f67d227d41633bb21aa19ca39c73e62bd81aec2c9e) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if list0, t := c.(*m.List); t && list0.Sort == m.SortList && list0.Label == m.LblXuListXu {
		if len(list0.Data) >= 1 { // list `_List_`(`ListItem`(I),L)
			// list head: `ListItem`(I)
			if varI, t := list0.Data[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				var lisTail1 m.K
				lisTail1 = &m.List { Sort: list0.Sort, Label: list0.Label, Data: list0.Data[1:] }
				if varL, t := lisTail1.(*m.List); t && varL.Sort == m.SortList { // lhs KVariable with hook:LIST.List
					// REQUIRES precomputed isList(L) && isInt(I)
					// RHS
					traceRuleApply("FUNC", 635, "{| rule `ListToInts`(`_List_`(`ListItem`(I),L))=>operandList(I,`ListToInts`(L)) requires `_andBool_`(isList(L),isInt(I)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0f7432a4cdf251d09e0252f67d227d41633bb21aa19ca39c73e62bd81aec2c9e) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval499, err499 := evalListToInts( // `ListToInts`(L)
						varL,
						config, -1)
					if err499 != nil {
						return m.NoResult, err499
					}
					return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
						varI,
						eval499,
					}}, nil
				}
			}
		}
	}

	// rule #636
	// source: iele-node.k @139
	// {| rule `ListToInts`(`.List`(.KList))=>`.List{"operandList"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bc12346dac32a7e9c6a6e592016e819c16f7f801f4083d43cd86f4adc1dfd971) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if list0, t := c.(*m.List); t && list0.Sort == m.SortList && list0.Label == m.LblXuListXu {
		if len(list0.Data) == 0 { // empty list `.List`(.KList)
			// RHS
			traceRuleApply("FUNC", 636, "{| rule `ListToInts`(`.List`(.KList))=>`.List{\"operandList\"}`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc12346dac32a7e9c6a6e592016e819c16f7f801f4083d43cd86f4adc1dfd971) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return &m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalListToInts", args: []m.K{c}}
}

func evalXhashchangesState(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #637
	// source: iele.k @627
	// {| rule #changesState(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_363,_364,_365,_366,`%__IELE-COMMON`(VALUE),_367),REGS)=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValues(_363)),isInt(VALUE)),isOperand(_365)),isOperand(_367)),isOperand(_364)),isOperands(_366)),`_=/=K_`(`_[_]_ARRAY-SYNTAX`(REGS,VALUE),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(bc43bc371f512c1806860588db032d95712eb1c4b3a80f8a0aded765c322b10f) contentStartColumn(10) contentStartLine(627) org.kframework.attributes.Location(Location(627,10,627,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(_363,_364,_365,_366,`%__IELE-COMMON`(VALUE),_367)
		varXu363 := kapp0.List[0] // lhs KVariable _363
		varXu364 := kapp0.List[1] // lhs KVariable _364
		varXu365 := kapp0.List[2] // lhs KVariable _365
		varXu366 := kapp0.List[3] // lhs KVariable _366
		if kapp1, t := kapp0.List[4].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(VALUE)
			if varVALUE, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varXu367 := kapp0.List[5] // lhs KVariable _367
				if varREGS, t := c2.(*m.Array); t && varREGS.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
					// REQUIRES
					eval500, err500 := evalIsLValues( // isLValues(_363)
						varXu363,
						config, -1)
					if err500 != nil {
						return m.NoResult, err500
					}
					eval501, err501 := evalIsOperand( // isOperand(_365)
						varXu365,
						config, -1)
					if err501 != nil {
						return m.NoResult, err501
					}
					eval502, err502 := evalIsOperand( // isOperand(_367)
						varXu367,
						config, -1)
					if err502 != nil {
						return m.NoResult, err502
					}
					eval503, err503 := evalIsOperand( // isOperand(_364)
						varXu364,
						config, -1)
					if err503 != nil {
						return m.NoResult, err503
					}
					eval504, err504 := evalIsOperands( // isOperands(_366)
						varXu366,
						config, -1)
					if err504 != nil {
						return m.NoResult, err504
					}
					eval506, err506 := evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,VALUE)
						varREGS,
						varVALUE,
						config, -1)
					if err506 != nil {
						return m.NoResult, err506
					}
					eval505, err505 := evalXuXeqXslashXeqKXu( // `_=/=K_`(`_[_]_ARRAY-SYNTAX`(REGS,VALUE),#token("0","Int"))
						eval506,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err505 != nil {
						return m.NoResult, err505
					}
					if (((((/* rhs precomputed isArray(REGS) */ /* && */
					   m.IsTrue(eval500) /* && */ /* rhs precomputed isInt(VALUE) */ ) &&
					   (m.IsTrue(eval501))) &&
					   (m.IsTrue(eval502))) &&
					   (m.IsTrue(eval503))) &&
					   (m.IsTrue(eval504))) &&
					   (m.IsTrue(eval505)) {
						// RHS
						traceRuleApply("FUNC", 637, "{| rule #changesState(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_363,_364,_365,_366,`%__IELE-COMMON`(VALUE),_367),REGS)=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValues(_363)),isInt(VALUE)),isOperand(_365)),isOperand(_367)),isOperand(_364)),isOperands(_366)),`_=/=K_`(`_[_]_ARRAY-SYNTAX`(REGS,VALUE),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bc43bc371f512c1806860588db032d95712eb1c4b3a80f8a0aded765c322b10f) contentStartColumn(10) contentStartLine(627) org.kframework.attributes.Location(Location(627,10,627,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						return /* rhs KToken */ m.BoolTrue, nil
					}
				}
			}
		}
	}

	// rule #638
	// source: iele.k @630
	// {| rule #changesState(`selfdestruct__IELE-COMMON`(_375),_376)=>#token("true","Bool") requires `_andBool_`(isOperand(_375),isArray(_376)) ensures #token("true","Bool") [UNIQUE_ID(b39441cf15c5d02697e8c14842a59ec1e6b8d292eab22bba91439c5c89be0fde) contentStartColumn(10) contentStartLine(630) org.kframework.attributes.Location(Location(630,10,630,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(_375)
		varXu375 := kapp0.List[0] // lhs KVariable _375
		if varXu376, t := c2.(*m.Array); t && varXu376.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval507, err507 := evalIsOperand( // isOperand(_375)
				varXu375,
				config, -1)
			if err507 != nil {
				return m.NoResult, err507
			}
			if m.IsTrue(eval507) /* && */ /* rhs precomputed isArray(_376) */  {
				// RHS
				traceRuleApply("FUNC", 638, "{| rule #changesState(`selfdestruct__IELE-COMMON`(_375),_376)=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(_375),isArray(_376)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b39441cf15c5d02697e8c14842a59ec1e6b8d292eab22bba91439c5c89be0fde) contentStartColumn(10) contentStartLine(630) org.kframework.attributes.Location(Location(630,10,630,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #639
	// source: iele.k @626
	// {| rule #changesState(`sstore_,__IELE-COMMON`(_385,_386),_387)=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isArray(_387),isOperand(_385)),isOperand(_386)) ensures #token("true","Bool") [UNIQUE_ID(9f18459336da42a5e46e425e83cd123488966c0d9d7ba3a4cd01743f12a62219) contentStartColumn(10) contentStartLine(626) org.kframework.attributes.Location(Location(626,10,626,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(_385,_386)
		varXu385 := kapp0.List[0] // lhs KVariable _385
		varXu386 := kapp0.List[1] // lhs KVariable _386
		if varXu387, t := c2.(*m.Array); t && varXu387.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval508, err508 := evalIsOperand( // isOperand(_385)
				varXu385,
				config, -1)
			if err508 != nil {
				return m.NoResult, err508
			}
			eval509, err509 := evalIsOperand( // isOperand(_386)
				varXu386,
				config, -1)
			if err509 != nil {
				return m.NoResult, err509
			}
			if (/* rhs precomputed isArray(_387) */ /* && */
			   m.IsTrue(eval508)) &&
			   (m.IsTrue(eval509)) {
				// RHS
				traceRuleApply("FUNC", 639, "{| rule #changesState(`sstore_,__IELE-COMMON`(_385,_386),_387)=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isArray(_387),isOperand(_385)),isOperand(_386)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9f18459336da42a5e46e425e83cd123488966c0d9d7ba3a4cd01743f12a62219) contentStartColumn(10) contentStartLine(626) org.kframework.attributes.Location(Location(626,10,626,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #640
	// source: iele.k @629
	// {| rule #changesState(`_,_=copycreate_(_)send__IELE-COMMON`(_433,_434,_435,_436,_437),_438)=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(_438),isOperands(_436)),isOperand(_435)),isOperand(_437)),isLValue(_433)),isLValue(_434)) ensures #token("true","Bool") [UNIQUE_ID(18298c77eb21387dec4abaf1f287e8fc56c0d293a213be0707b14359f0b2857e) contentStartColumn(10) contentStartLine(629) org.kframework.attributes.Location(Location(629,10,629,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(_433,_434,_435,_436,_437)
		varXu433 := kapp0.List[0] // lhs KVariable _433
		varXu434 := kapp0.List[1] // lhs KVariable _434
		varXu435 := kapp0.List[2] // lhs KVariable _435
		varXu436 := kapp0.List[3] // lhs KVariable _436
		varXu437 := kapp0.List[4] // lhs KVariable _437
		if varXu438, t := c2.(*m.Array); t && varXu438.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval510, err510 := evalIsOperands( // isOperands(_436)
				varXu436,
				config, -1)
			if err510 != nil {
				return m.NoResult, err510
			}
			eval511, err511 := evalIsOperand( // isOperand(_435)
				varXu435,
				config, -1)
			if err511 != nil {
				return m.NoResult, err511
			}
			eval512, err512 := evalIsOperand( // isOperand(_437)
				varXu437,
				config, -1)
			if err512 != nil {
				return m.NoResult, err512
			}
			eval513, err513 := evalIsLValue( // isLValue(_433)
				varXu433,
				config, -1)
			if err513 != nil {
				return m.NoResult, err513
			}
			eval514, err514 := evalIsLValue( // isLValue(_434)
				varXu434,
				config, -1)
			if err514 != nil {
				return m.NoResult, err514
			}
			if ((((/* rhs precomputed isArray(_438) */ /* && */
			   m.IsTrue(eval510)) &&
			   (m.IsTrue(eval511))) &&
			   (m.IsTrue(eval512))) &&
			   (m.IsTrue(eval513))) &&
			   (m.IsTrue(eval514)) {
				// RHS
				traceRuleApply("FUNC", 640, "{| rule #changesState(`_,_=copycreate_(_)send__IELE-COMMON`(_433,_434,_435,_436,_437),_438)=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(_438),isOperands(_436)),isOperand(_435)),isOperand(_437)),isLValue(_433)),isLValue(_434)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(18298c77eb21387dec4abaf1f287e8fc56c0d293a213be0707b14359f0b2857e) contentStartColumn(10) contentStartLine(629) org.kframework.attributes.Location(Location(629,10,629,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #641
	// source: iele.k @628
	// {| rule #changesState(`_,_=create_(_)send__IELE-COMMON`(_347,_348,_349,_350,_351),_352)=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_351),isLValue(_348)),isArray(_352)),isOperands(_350)),isLValue(_347)),isIeleName(_349)) ensures #token("true","Bool") [UNIQUE_ID(e660a4c5462e030b561a3a2e8af8d93679098700a7523db7c579f0ffe90c442d) contentStartColumn(10) contentStartLine(628) org.kframework.attributes.Location(Location(628,10,628,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(_347,_348,_349,_350,_351)
		varXu347 := kapp0.List[0] // lhs KVariable _347
		varXu348 := kapp0.List[1] // lhs KVariable _348
		varXu349 := kapp0.List[2] // lhs KVariable _349
		varXu350 := kapp0.List[3] // lhs KVariable _350
		varXu351 := kapp0.List[4] // lhs KVariable _351
		if varXu352, t := c2.(*m.Array); t && varXu352.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval515, err515 := evalIsOperand( // isOperand(_351)
				varXu351,
				config, -1)
			if err515 != nil {
				return m.NoResult, err515
			}
			eval516, err516 := evalIsLValue( // isLValue(_348)
				varXu348,
				config, -1)
			if err516 != nil {
				return m.NoResult, err516
			}
			eval517, err517 := evalIsOperands( // isOperands(_350)
				varXu350,
				config, -1)
			if err517 != nil {
				return m.NoResult, err517
			}
			eval518, err518 := evalIsLValue( // isLValue(_347)
				varXu347,
				config, -1)
			if err518 != nil {
				return m.NoResult, err518
			}
			eval519, err519 := evalIsIeleName( // isIeleName(_349)
				varXu349,
				config, -1)
			if err519 != nil {
				return m.NoResult, err519
			}
			if ((((m.IsTrue(eval515)) &&
			   (m.IsTrue(eval516)) /* && */ /* rhs precomputed isArray(_352) */ ) &&
			   (m.IsTrue(eval517))) &&
			   (m.IsTrue(eval518))) &&
			   (m.IsTrue(eval519)) {
				// RHS
				traceRuleApply("FUNC", 641, "{| rule #changesState(`_,_=create_(_)send__IELE-COMMON`(_347,_348,_349,_350,_351),_352)=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_351),isLValue(_348)),isArray(_352)),isOperands(_350)),isLValue(_347)),isIeleName(_349)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e660a4c5462e030b561a3a2e8af8d93679098700a7523db7c579f0ffe90c442d) contentStartColumn(10) contentStartLine(628) org.kframework.attributes.Location(Location(628,10,628,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #642
	// source: iele.k @625
	// {| rule #changesState(`log_,__IELE-COMMON`(_335,_336),_337)=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(_335),isNonEmptyOperands(_336)),isArray(_337)) ensures #token("true","Bool") [UNIQUE_ID(0ed51e1eae243e8c602fdf5c21bb3063ebd990cf74e8df31ad8e797d13faf6de) contentStartColumn(10) contentStartLine(625) org.kframework.attributes.Location(Location(625,10,625,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(_335,_336)
		varXu335 := kapp0.List[0] // lhs KVariable _335
		varXu336 := kapp0.List[1] // lhs KVariable _336
		if varXu337, t := c2.(*m.Array); t && varXu337.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval520, err520 := evalIsOperand( // isOperand(_335)
				varXu335,
				config, -1)
			if err520 != nil {
				return m.NoResult, err520
			}
			eval521, err521 := evalIsNonEmptyOperands( // isNonEmptyOperands(_336)
				varXu336,
				config, -1)
			if err521 != nil {
				return m.NoResult, err521
			}
			if (m.IsTrue(eval520)) &&
			   (m.IsTrue(eval521)) /* && */ /* rhs precomputed isArray(_337) */  {
				// RHS
				traceRuleApply("FUNC", 642, "{| rule #changesState(`log_,__IELE-COMMON`(_335,_336),_337)=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(_335),isNonEmptyOperands(_336)),isArray(_337)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ed51e1eae243e8c602fdf5c21bb3063ebd990cf74e8df31ad8e797d13faf6de) contentStartColumn(10) contentStartLine(625) org.kframework.attributes.Location(Location(625,10,625,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #643
	// source: iele.k @624
	// {| rule #changesState(`log__IELE-COMMON`(_373),_374)=>#token("true","Bool") requires `_andBool_`(isArray(_374),isOperand(_373)) ensures #token("true","Bool") [UNIQUE_ID(3351a7dcc439c8070b723ae4648dedb447f193e3a52b41a20b246681d3c4417a) contentStartColumn(10) contentStartLine(624) org.kframework.attributes.Location(Location(624,10,624,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(_373)
		varXu373 := kapp0.List[0] // lhs KVariable _373
		if varXu374, t := c2.(*m.Array); t && varXu374.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval522, err522 := evalIsOperand( // isOperand(_373)
				varXu373,
				config, -1)
			if err522 != nil {
				return m.NoResult, err522
			}
			if /* rhs precomputed isArray(_374) */ /* && */
			   m.IsTrue(eval522) {
				// RHS
				traceRuleApply("FUNC", 643, "{| rule #changesState(`log__IELE-COMMON`(_373),_374)=>#token(\"true\",\"Bool\") requires `_andBool_`(isArray(_374),isOperand(_373)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3351a7dcc439c8070b723ae4648dedb447f193e3a52b41a20b246681d3c4417a) contentStartColumn(10) contentStartLine(624) org.kframework.attributes.Location(Location(624,10,624,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #644
	// source: iele.k @631
	// {| rule #changesState(_413,_414)=>#token("false","Bool") requires `_andBool_`(isArray(_414),isInstruction(_413)) ensures #token("true","Bool") [UNIQUE_ID(672f4befc90b6a86513e954afe1993a8fc31722685bb442676ecc290b01969c1) contentStartColumn(10) contentStartLine(631) org.kframework.attributes.Location(Location(631,10,631,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu413 := c1 // lhs KVariable _413
		if varXu414, t := c2.(*m.Array); t && varXu414.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval523, err523 := evalIsInstruction( // isInstruction(_413)
				varXu413,
				config, -1)
			if err523 != nil {
				return m.NoResult, err523
			}
			if /* rhs precomputed isArray(_414) */ /* && */
			   m.IsTrue(eval523) {
				// RHS
				traceRuleApply("FUNC", 644, "{| rule #changesState(_413,_414)=>#token(\"false\",\"Bool\") requires `_andBool_`(isArray(_414),isInstruction(_413)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(672f4befc90b6a86513e954afe1993a8fc31722685bb442676ecc290b01969c1) contentStartColumn(10) contentStartLine(631) org.kframework.attributes.Location(Location(631,10,631,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				return /* rhs KToken */ m.BoolFalse, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashchangesState", args: []m.K{c1, c2}}
}

func evalIsLocalCall(c m.K, config m.K, guard int) (m.K, error) {
	// rule #645
	// source: ? @?
	// {| rule isLocalCall(#KToken(#token("LocalCall","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCall { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 645, "{| rule isLocalCall(#KToken(#token(\"LocalCall\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #646
	// source: ? @?
	// {| rule isLocalCall(`{_|_|_|_}_IELE`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(K0),isIeleName(K1)),isLValues(K2)),isArray(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXpipeXuXpipeXuXpipeXuXrbracketXuIELE && len(kapp0.List) == 4 { // `{_|_|_|_}_IELE`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		if varK3, t := kapp0.List[3].(*m.Array); t && varK3.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES
			eval524, err524 := evalIsBlocks( // isBlocks(K0)
				varK0,
				config, -1)
			if err524 != nil {
				return m.NoResult, err524
			}
			eval525, err525 := evalIsIeleName( // isIeleName(K1)
				varK1,
				config, -1)
			if err525 != nil {
				return m.NoResult, err525
			}
			eval526, err526 := evalIsLValues( // isLValues(K2)
				varK2,
				config, -1)
			if err526 != nil {
				return m.NoResult, err526
			}
			if ((m.IsTrue(eval524)) &&
			   (m.IsTrue(eval525))) &&
			   (m.IsTrue(eval526)) /* && */ /* rhs precomputed isArray(K3) */  {
				// RHS
				traceRuleApply("FUNC", 646, "{| rule isLocalCall(`{_|_|_|_}_IELE`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(K0),isIeleName(K1)),isLValues(K2)),isArray(K3)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #647
	// source: ? @?
	// {| rule isLocalCall(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 647, "{| rule isLocalCall(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGlobalName(c m.K, config m.K, guard int) (m.K, error) {
	// rule #648
	// source: ? @?
	// {| rule isGlobalName(#KToken(#token("GlobalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 648, "{| rule isGlobalName(#KToken(#token(\"GlobalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #649
	// source: ? @?
	// {| rule isGlobalName(`@__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `@__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval527, err527 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err527 != nil {
			return m.NoResult, err527
		}
		if m.IsTrue(eval527) {
			// RHS
			traceRuleApply("FUNC", 649, "{| rule isGlobalName(`@__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #650
	// source: ? @?
	// {| rule isGlobalName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 650, "{| rule isGlobalName(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalWord2Bool(c m.K, config m.K, guard int) (m.K, error) {
	// rule #651
	// source: data.k @76
	// {| rule word2Bool(_6)=>#token("false","Bool") requires `_==Int_`(_6,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(981c42f1643e86dba91618b31359972b569a0a62c50ad93f52059264cc4c381b) contentStartColumn(10) contentStartLine(76) org.kframework.attributes.Location(Location(76,10,76,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu6, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval528, err528 := evalXuXeqXeqIntXu( // `_==Int_`(_6,#token("0","Int"))
			varXu6,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err528 != nil {
			return m.NoResult, err528
		}
		if m.IsTrue(eval528) {
			// RHS
			traceRuleApply("FUNC", 651, "{| rule word2Bool(_6)=>#token(\"false\",\"Bool\") requires `_==Int_`(_6,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(981c42f1643e86dba91618b31359972b569a0a62c50ad93f52059264cc4c381b) contentStartColumn(10) contentStartLine(76) org.kframework.attributes.Location(Location(76,10,76,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #652
	// source: data.k @77
	// {| rule word2Bool(W)=>#token("true","Bool") requires `_andBool_`(isInt(W),`_=/=K_`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(94e475a8911216208a0e8648d53482ee0c3ab172cf5fe2e0dc1671772b92bfa8) contentStartColumn(10) contentStartLine(77) org.kframework.attributes.Location(Location(77,10,77,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varW, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval529, err529 := evalXuXeqXslashXeqKXu( // `_=/=K_`(W,#token("0","Int"))
			varW,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err529 != nil {
			return m.NoResult, err529
		}
		if /* rhs precomputed isInt(W) */ /* && */
		   m.IsTrue(eval529) {
			// RHS
			traceRuleApply("FUNC", 652, "{| rule word2Bool(W)=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(W),`_=/=K_`(W,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(94e475a8911216208a0e8648d53482ee0c3ab172cf5fe2e0dc1671772b92bfa8) contentStartColumn(10) contentStartLine(77) org.kframework.attributes.Location(Location(77,10,77,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalWord2Bool", args: []m.K{c}}
}

func evalIsAccountCellMap(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortAccountCellMap {
		return m.BoolTrue, nil
	}
	// rule #653
	// source: ? @?
	// {| rule isAccountCellMap(`<account>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountXgt && len(kapp0.List) == 5 { // `<account>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval530, err530 := evalIsAcctIDCell( // isAcctIDCell(K0)
			varK0,
			config, -1)
		if err530 != nil {
			return m.NoResult, err530
		}
		eval531, err531 := evalIsBalanceCell( // isBalanceCell(K1)
			varK1,
			config, -1)
		if err531 != nil {
			return m.NoResult, err531
		}
		eval532, err532 := evalIsCodeCell( // isCodeCell(K2)
			varK2,
			config, -1)
		if err532 != nil {
			return m.NoResult, err532
		}
		eval533, err533 := evalIsStorageCell( // isStorageCell(K3)
			varK3,
			config, -1)
		if err533 != nil {
			return m.NoResult, err533
		}
		eval534, err534 := evalIsNonceCell( // isNonceCell(K4)
			varK4,
			config, -1)
		if err534 != nil {
			return m.NoResult, err534
		}
		if ((((m.IsTrue(eval530)) &&
		   (m.IsTrue(eval531))) &&
		   (m.IsTrue(eval532))) &&
		   (m.IsTrue(eval533))) &&
		   (m.IsTrue(eval534)) {
			// RHS
			traceRuleApply("FUNC", 653, "{| rule isAccountCellMap(`<account>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #654
	// source: ? @?
	// {| rule isAccountCellMap(#KToken(#token("AccountCellMap","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCellMap { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 654, "{| rule isAccountCellMap(#KToken(#token(\"AccountCellMap\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #655
	// source: ? @?
	// {| rule isAccountCellMap(#KToken(#token("AccountCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 655, "{| rule isAccountCellMap(#KToken(#token(\"AccountCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #656
	// source: ? @?
	// {| rule isAccountCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 656, "{| rule isAccountCellMap(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitLabelsCell(config m.K, guard int) (m.K, error) {
	// rule #657
	// source: ? @?
	// {| rule initLabelsCell(.KList)=>`<labels>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(00437c32a7cfbf6aab27f6cc0fcf21aa50a9eeca1bf47cf25b878ccf15b9d774) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 657, "{| rule initLabelsCell(.KList)=>`<labels>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00437c32a7cfbf6aab27f6cc0fcf21aa50a9eeca1bf47cf25b878ccf15b9d774) initializer()] |}")
	eval535, err535 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err535 != nil {
		return m.NoResult, err535
	}
	return &m.KApply{Label: m.LblXltlabelsXgt, List: []m.K{ // as-is <labels>
		eval535,
	}}, nil

}

//var constInitLabelsCell K = evalInitLabelsCell(m.InternedBottom)

func evalRegistersOperands(c m.K, config m.K, guard int) (m.K, error) {
	// rule #658
	// source: iele.k @1869
	// {| rule registersOperands(operandList(`%__IELE-COMMON`(REG),REGS))=>`maxInt(_,_)_INT`(REG,registersOperands(REGS)) requires `_andBool_`(isInt(REG),isOperands(REGS)) ensures #token("true","Bool") [UNIQUE_ID(e93e1bc37dc637d993e0a454184085ed4fd5e852269bb003436ff35132f18293) contentStartColumn(10) contentStartLine(1869) org.kframework.attributes.Location(Location(1869,10,1869,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(`%__IELE-COMMON`(REG),REGS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(REG)
			if varREG, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varREGS := kapp0.List[1] // lhs KVariable REGS
				// REQUIRES
				eval536, err536 := evalIsOperands( // isOperands(REGS)
					varREGS,
					config, -1)
				if err536 != nil {
					return m.NoResult, err536
				}
				if /* rhs precomputed isInt(REG) */ /* && */
				   m.IsTrue(eval536) {
					// RHS
					traceRuleApply("FUNC", 658, "{| rule registersOperands(operandList(`%__IELE-COMMON`(REG),REGS))=>`maxInt(_,_)_INT`(REG,registersOperands(REGS)) requires `_andBool_`(isInt(REG),isOperands(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e93e1bc37dc637d993e0a454184085ed4fd5e852269bb003436ff35132f18293) contentStartColumn(10) contentStartLine(1869) org.kframework.attributes.Location(Location(1869,10,1869,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval538, err538 := evalRegistersOperands( // registersOperands(REGS)
						varREGS,
						config, -1)
					if err538 != nil {
						return m.NoResult, err538
					}
					eval537, err537 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(REG,registersOperands(REGS))
						varREG,
						eval538,
						config, -1)
					if err537 != nil {
						return m.NoResult, err537
					}
					return eval537, nil
				}
			}
		}
	}

	// rule #659
	// source: iele.k @1871
	// {| rule registersOperands(`.List{"operandList"}`(.KList))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(41b7e334125917318cbde634fd5bf77ba6ae0af9faec351273777d4cb54101a4) contentStartColumn(10) contentStartLine(1871) org.kframework.attributes.Location(Location(1871,10,1871,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 659, "{| rule registersOperands(`.List{\"operandList\"}`(.KList))=>#token(\"-1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(41b7e334125917318cbde634fd5bf77ba6ae0af9faec351273777d4cb54101a4) contentStartColumn(10) contentStartLine(1871) org.kframework.attributes.Location(Location(1871,10,1871,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("-1"), nil
	}

	return m.NoResult, &stuckError{funcName: "evalRegistersOperands", args: []m.K{c}}
}

func evalXhashdasmInstructionAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, config m.K, guard int) (m.K, error) {
	// rule #660
	// source: iele-binary.k @310
	// {| rule #dasmInstructionAux(`COPYCREATE`(ARGS),R,W,M,_569,_570)=>`_,_=copycreate_(_)send__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int")),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("4","Int"),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_570),isInt(ARGS)),isMap(_569)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(c21115245b19ed4aa6ae07739dc7ba3229a0191a89a10938ae1779045f2b54a6) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,167)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCOPYCREATE && len(kapp0.List) == 1 { // `COPYCREATE`(ARGS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu569, t := c5.(*m.Map); t && varXu569.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu570 := c6 // lhs KVariable _570
							// REQUIRES
							eval539, err539 := evalIsIeleName( // isIeleName(_570)
								varXu570,
								config, -1)
							if err539 != nil {
								return m.NoResult, err539
							}
							if m.IsTrue(eval539) /* && */ /* rhs precomputed isInt(ARGS) */  /* && */ /* rhs precomputed isMap(_569) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
								// RHS
								traceRuleApply("FUNC", 660, "{| rule #dasmInstructionAux(`COPYCREATE`(ARGS),R,W,M,_569,_570)=>`_,_=copycreate_(_)send__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\")),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"4\",\"Int\"),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_570),isInt(ARGS)),isMap(_569)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c21115245b19ed4aa6ae07739dc7ba3229a0191a89a10938ae1779045f2b54a6) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,167)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval540, err540 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("0"),
									config, -1)
								if err540 != nil {
									return m.NoResult, err540
								}
								eval541, err541 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("1"),
									config, -1)
								if err541 != nil {
									return m.NoResult, err541
								}
								eval542, err542 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("3"),
									config, -1)
								if err542 != nil {
									return m.NoResult, err542
								}
								eval543, err543 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("4","Int"),ARGS)
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("4"),
									varARGS,
									config, -1)
								if err543 != nil {
									return m.NoResult, err543
								}
								eval544, err544 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("2"),
									config, -1)
								if err544 != nil {
									return m.NoResult, err544
								}
								return &m.KApply{Label: m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _,_=copycreate_(_)send__IELE-COMMON
									eval540,
									eval541,
									eval542,
									eval543,
									eval544,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #661
	// source: iele-binary.k @239
	// {| rule #dasmInstructionAux(`SELFDESTRUCT`(.KList),R,W,M,_522,_523)=>`selfdestruct__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_522),isInt(W)),isIeleName(_523)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(884b429bc5cab7f9ab5f20b5be02d2992004684044d6da754207943836436902) contentStartColumn(10) contentStartLine(239) org.kframework.attributes.Location(Location(239,10,239,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSELFDESTRUCT && len(kapp0.List) == 0 { // `SELFDESTRUCT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu522, t := c5.(*m.Map); t && varXu522.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu523 := c6 // lhs KVariable _523
						// REQUIRES
						eval545, err545 := evalIsIeleName( // isIeleName(_523)
							varXu523,
							config, -1)
						if err545 != nil {
							return m.NoResult, err545
						}
						if /* rhs precomputed isMap(_522) && isInt(W) */ /* && */
						   m.IsTrue(eval545) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 661, "{| rule #dasmInstructionAux(`SELFDESTRUCT`(.KList),R,W,M,_522,_523)=>`selfdestruct__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_522),isInt(W)),isIeleName(_523)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(884b429bc5cab7f9ab5f20b5be02d2992004684044d6da754207943836436902) contentStartColumn(10) contentStartLine(239) org.kframework.attributes.Location(Location(239,10,239,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval546, err546 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err546 != nil {
								return m.NoResult, err546
							}
							return &m.KApply{Label: m.LblSelfdestructXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is selfdestruct__IELE-COMMON
								eval546,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #662
	// source: iele-binary.k @266
	// {| rule #dasmInstructionAux(`EXTCODESIZE`(.KList),R,W,M,_637,_638)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`.List{"operandList"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_638),isInt(W)),isInt(R)),isMap(_637)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(67bec3b45212d3fc2809e5c4744f95c6ff4891cfbcaa03eeaece4165ca7614cc) contentStartColumn(10) contentStartLine(266) org.kframework.attributes.Location(Location(266,10,266,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblEXTCODESIZE && len(kapp0.List) == 0 { // `EXTCODESIZE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu637, t := c5.(*m.Map); t && varXu637.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu638 := c6 // lhs KVariable _638
						// REQUIRES
						eval547, err547 := evalIsIeleName( // isIeleName(_638)
							varXu638,
							config, -1)
						if err547 != nil {
							return m.NoResult, err547
						}
						if m.IsTrue(eval547) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_637) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 662, "{| rule #dasmInstructionAux(`EXTCODESIZE`(.KList),R,W,M,_637,_638)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_638),isInt(W)),isInt(R)),isMap(_637)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(67bec3b45212d3fc2809e5c4744f95c6ff4891cfbcaa03eeaece4165ca7614cc) contentStartColumn(10) contentStartLine(266) org.kframework.attributes.Location(Location(266,10,266,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval548, err548 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err548 != nil {
								return m.NoResult, err548
							}
							eval549, err549 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err549 != nil {
								return m.NoResult, err549
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval548,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.extcodesize"},
								}},
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval549,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #663
	// source: iele-binary.k @241
	// {| rule #dasmInstructionAux(`LOG0`(.KList),R,W,M,_540,_541)=>`log__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_540),isInt(W)),isInt(R)),isInt(M)),isIeleName(_541)) ensures #token("true","Bool") [UNIQUE_ID(b0ae84c16f42e03b86648b1822243348bbe41aedfb6529af503de8d4878987e8) contentStartColumn(10) contentStartLine(241) org.kframework.attributes.Location(Location(241,10,241,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOG0 && len(kapp0.List) == 0 { // `LOG0`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu540, t := c5.(*m.Map); t && varXu540.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu541 := c6 // lhs KVariable _541
						// REQUIRES
						eval550, err550 := evalIsIeleName( // isIeleName(_541)
							varXu541,
							config, -1)
						if err550 != nil {
							return m.NoResult, err550
						}
						if /* rhs precomputed isMap(_540) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval550) {
							// RHS
							traceRuleApply("FUNC", 663, "{| rule #dasmInstructionAux(`LOG0`(.KList),R,W,M,_540,_541)=>`log__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_540),isInt(W)),isInt(R)),isInt(M)),isIeleName(_541)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b0ae84c16f42e03b86648b1822243348bbe41aedfb6529af503de8d4878987e8) contentStartColumn(10) contentStartLine(241) org.kframework.attributes.Location(Location(241,10,241,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval551, err551 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err551 != nil {
								return m.NoResult, err551
							}
							return &m.KApply{Label: m.LblLogXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log__IELE-COMMON
								eval551,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #664
	// source: iele-binary.k @280
	// {| rule #dasmInstructionAux(`OR`(.KList),R,W,M,_677,_678)=>`_=or_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_677),isIeleName(_678)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(7d82ce072e6230f160975191fb8ed29af950954b845c0cbbf1a24449d6c73397) contentStartColumn(10) contentStartLine(280) org.kframework.attributes.Location(Location(280,10,280,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblOR && len(kapp0.List) == 0 { // `OR`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu677, t := c5.(*m.Map); t && varXu677.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu678 := c6 // lhs KVariable _678
						// REQUIRES
						eval552, err552 := evalIsIeleName( // isIeleName(_678)
							varXu678,
							config, -1)
						if err552 != nil {
							return m.NoResult, err552
						}
						if /* rhs precomputed isMap(_677) */ /* && */
						   m.IsTrue(eval552) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 664, "{| rule #dasmInstructionAux(`OR`(.KList),R,W,M,_677,_678)=>`_=or_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_677),isIeleName(_678)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d82ce072e6230f160975191fb8ed29af950954b845c0cbbf1a24449d6c73397) contentStartColumn(10) contentStartLine(280) org.kframework.attributes.Location(Location(280,10,280,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval553, err553 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err553 != nil {
								return m.NoResult, err553
							}
							eval554, err554 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err554 != nil {
								return m.NoResult, err554
							}
							eval555, err555 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err555 != nil {
								return m.NoResult, err555
							}
							return &m.KApply{Label: m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=or_,__IELE-COMMON
								eval553,
								eval554,
								eval555,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #665
	// source: iele-binary.k @235
	// {| rule #dasmInstructionAux(`BR`(LABEL),_578,_579,_580,_581,_582)=>`br__IELE-COMMON`(LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_580),isInt(LABEL)),isMap(_581)),isInt(_578)),isIeleName(_582)),isInt(_579)) ensures #token("true","Bool") [UNIQUE_ID(364b6064dd098b8975b63ff0e0de956d6606cc425e2bc3777378cf2ca2390fce) contentStartColumn(10) contentStartLine(235) org.kframework.attributes.Location(Location(235,10,235,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBR && len(kapp0.List) == 1 { // `BR`(LABEL)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu581, t := c5.(*m.Map); t && varXu581.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu582 := c6 // lhs KVariable _582
							// REQUIRES
							eval556, err556 := evalIsIeleName( // isIeleName(_582)
								varXu582,
								config, -1)
							if err556 != nil {
								return m.NoResult, err556
							}
							if /* rhs precomputed isInt(_580) && isInt(LABEL) && isMap(_581) && isInt(_578) */ /* && */
							   m.IsTrue(eval556) /* && */ /* rhs precomputed isInt(_579) */  {
								// RHS
								traceRuleApply("FUNC", 665, "{| rule #dasmInstructionAux(`BR`(LABEL),_578,_579,_580,_581,_582)=>`br__IELE-COMMON`(LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_580),isInt(LABEL)),isMap(_581)),isInt(_578)),isIeleName(_582)),isInt(_579)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(364b6064dd098b8975b63ff0e0de956d6606cc425e2bc3777378cf2ca2390fce) contentStartColumn(10) contentStartLine(235) org.kframework.attributes.Location(Location(235,10,235,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								return &m.KApply{Label: m.LblBrXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is br__IELE-COMMON
									varLABEL,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #666
	// source: iele-binary.k @261
	// {| rule #dasmInstructionAux(`SLOAD`(.KList),R,W,M,_550,_551)=>`_=sload__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isMap(_550)),isIeleName(_551)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(e02eb060433e3a90155aced4133c7efbbc80fceb3849f7cc46f607b6d420ebf7) contentStartColumn(10) contentStartLine(261) org.kframework.attributes.Location(Location(261,10,261,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSLOAD && len(kapp0.List) == 0 { // `SLOAD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu550, t := c5.(*m.Map); t && varXu550.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu551 := c6 // lhs KVariable _551
						// REQUIRES
						eval557, err557 := evalIsIeleName( // isIeleName(_551)
							varXu551,
							config, -1)
						if err557 != nil {
							return m.NoResult, err557
						}
						if /* rhs precomputed isInt(W) && isInt(R) && isMap(_550) */ /* && */
						   m.IsTrue(eval557) /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 666, "{| rule #dasmInstructionAux(`SLOAD`(.KList),R,W,M,_550,_551)=>`_=sload__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isMap(_550)),isIeleName(_551)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e02eb060433e3a90155aced4133c7efbbc80fceb3849f7cc46f607b6d420ebf7) contentStartColumn(10) contentStartLine(261) org.kframework.attributes.Location(Location(261,10,261,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval558, err558 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err558 != nil {
								return m.NoResult, err558
							}
							eval559, err559 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err559 != nil {
								return m.NoResult, err559
							}
							return &m.KApply{Label: m.LblXuXeqsloadXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=sload__IELE-COMMON
								eval558,
								eval559,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #667
	// source: iele-binary.k @246
	// {| rule #dasmInstructionAux(`ADDRESS`(.KList),R,W,M,_588,_589)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.address","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_589),isInt(W)),isInt(R)),isInt(M)),isMap(_588)) ensures #token("true","Bool") [UNIQUE_ID(a17450e56103bd3fab82c75efd85f250008d76637d7e218d69d0e0fc4e2cdf62) contentStartColumn(10) contentStartLine(246) org.kframework.attributes.Location(Location(246,10,246,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblADDRESS && len(kapp0.List) == 0 { // `ADDRESS`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu588, t := c5.(*m.Map); t && varXu588.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu589 := c6 // lhs KVariable _589
						// REQUIRES
						eval560, err560 := evalIsIeleName( // isIeleName(_589)
							varXu589,
							config, -1)
						if err560 != nil {
							return m.NoResult, err560
						}
						if m.IsTrue(eval560) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_588) */  {
							// RHS
							traceRuleApply("FUNC", 667, "{| rule #dasmInstructionAux(`ADDRESS`(.KList),R,W,M,_588,_589)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.address\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_589),isInt(W)),isInt(R)),isInt(M)),isMap(_588)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a17450e56103bd3fab82c75efd85f250008d76637d7e218d69d0e0fc4e2cdf62) contentStartColumn(10) contentStartLine(246) org.kframework.attributes.Location(Location(246,10,246,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval561, err561 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err561 != nil {
								return m.NoResult, err561
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval561,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.address"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #668
	// source: iele-binary.k @315
	// {| rule #dasmInstructionAux(`RETURN`(_80),R,W,M,_492,_493)=>`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_492),isInt(W)),isIeleName(_493)),isInt(R)),isInt(M)),`_==Int_`(_80,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(49bd378e13e3b369c4eab4433731924bf177e501aef4fc208dc59103b1f9e73d) contentStartColumn(10) contentStartLine(315) org.kframework.attributes.Location(Location(315,10,315,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(_80)
		if varXu80, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu492, t := c5.(*m.Map); t && varXu492.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu493 := c6 // lhs KVariable _493
							// REQUIRES
							eval562, err562 := evalIsIeleName( // isIeleName(_493)
								varXu493,
								config, -1)
							if err562 != nil {
								return m.NoResult, err562
							}
							eval563, err563 := evalXuXeqXeqIntXu( // `_==Int_`(_80,#token("0","Int"))
								varXu80,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err563 != nil {
								return m.NoResult, err563
							}
							if (/* rhs precomputed isMap(_492) && isInt(W) */ /* && */
							   m.IsTrue(eval562) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */ ) &&
							   (m.IsTrue(eval563)) {
								// RHS
								traceRuleApply("FUNC", 668, "{| rule #dasmInstructionAux(`RETURN`(_80),R,W,M,_492,_493)=>`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_492),isInt(W)),isIeleName(_493)),isInt(R)),isInt(M)),`_==Int_`(_80,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(49bd378e13e3b369c4eab4433731924bf177e501aef4fc208dc59103b1f9e73d) contentStartColumn(10) contentStartLine(315) org.kframework.attributes.Location(Location(315,10,315,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								return &m.KApply{Label: m.LblRetXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ret__IELE-COMMON
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #669
	// source: iele-binary.k @297
	// {| rule #dasmInstructionAux(`LOG3`(.KList),R,W,M,_586,_587)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int")),`.List{"operandList"}`(.KList))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_587),isInt(W)),isMap(_586)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(dde443098a70cd969d5015deb0483ee70b9c265fa3962233321fe3e73dce88e4) contentStartColumn(10) contentStartLine(297) org.kframework.attributes.Location(Location(297,10,297,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOG3 && len(kapp0.List) == 0 { // `LOG3`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu586, t := c5.(*m.Map); t && varXu586.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu587 := c6 // lhs KVariable _587
						// REQUIRES
						eval564, err564 := evalIsIeleName( // isIeleName(_587)
							varXu587,
							config, -1)
						if err564 != nil {
							return m.NoResult, err564
						}
						if m.IsTrue(eval564) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isMap(_586) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 669, "{| rule #dasmInstructionAux(`LOG3`(.KList),R,W,M,_586,_587)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\")),`.List{\"operandList\"}`(.KList))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_587),isInt(W)),isMap(_586)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dde443098a70cd969d5015deb0483ee70b9c265fa3962233321fe3e73dce88e4) contentStartColumn(10) contentStartLine(297) org.kframework.attributes.Location(Location(297,10,297,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval565, err565 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err565 != nil {
								return m.NoResult, err565
							}
							eval566, err566 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err566 != nil {
								return m.NoResult, err566
							}
							eval567, err567 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err567 != nil {
								return m.NoResult, err567
							}
							eval568, err568 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err568 != nil {
								return m.NoResult, err568
							}
							return &m.KApply{Label: m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log_,__IELE-COMMON
								eval565,
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval566,
									&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
										eval567,
										&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
											eval568,
											&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
											}},
										}},
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #670
	// source: iele-binary.k @287
	// {| rule #dasmInstructionAux(`GE`(.KList),R,W,M,_500,_501)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`ge_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_501),isInt(W)),isInt(R)),isMap(_500)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(128486db0cf57c9aa7278f1d7d35a4ae849e1e83387053b82bbc9d1e3fb5ced7) contentStartColumn(10) contentStartLine(287) org.kframework.attributes.Location(Location(287,10,287,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGE && len(kapp0.List) == 0 { // `GE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu500, t := c5.(*m.Map); t && varXu500.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu501 := c6 // lhs KVariable _501
						// REQUIRES
						eval569, err569 := evalIsIeleName( // isIeleName(_501)
							varXu501,
							config, -1)
						if err569 != nil {
							return m.NoResult, err569
						}
						if m.IsTrue(eval569) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_500) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 670, "{| rule #dasmInstructionAux(`GE`(.KList),R,W,M,_500,_501)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`ge_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_501),isInt(W)),isInt(R)),isMap(_500)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(128486db0cf57c9aa7278f1d7d35a4ae849e1e83387053b82bbc9d1e3fb5ced7) contentStartColumn(10) contentStartLine(287) org.kframework.attributes.Location(Location(287,10,287,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval570, err570 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err570 != nil {
								return m.NoResult, err570
							}
							eval571, err571 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err571 != nil {
								return m.NoResult, err571
							}
							eval572, err572 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err572 != nil {
								return m.NoResult, err572
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval570,
								&m.KApply{Label: m.LblGeXuIELEXhyphenCOMMON, List: []m.K{ // as-is ge_IELE-COMMON
								}},
								eval571,
								eval572,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #671
	// source: iele-binary.k @259
	// {| rule #dasmInstructionAux(`SHA3`(.KList),R,W,M,_654,_655)=>`_=sha3__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_655),isMap(_654)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(16a270416859ad6f84c0d4c9f125c6ae4f22b3d82b5cbd89e2d61dd40143d305) contentStartColumn(10) contentStartLine(259) org.kframework.attributes.Location(Location(259,10,259,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSHA3 && len(kapp0.List) == 0 { // `SHA3`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu654, t := c5.(*m.Map); t && varXu654.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu655 := c6 // lhs KVariable _655
						// REQUIRES
						eval573, err573 := evalIsIeleName( // isIeleName(_655)
							varXu655,
							config, -1)
						if err573 != nil {
							return m.NoResult, err573
						}
						if m.IsTrue(eval573) /* && */ /* rhs precomputed isMap(_654) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 671, "{| rule #dasmInstructionAux(`SHA3`(.KList),R,W,M,_654,_655)=>`_=sha3__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_655),isMap(_654)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(16a270416859ad6f84c0d4c9f125c6ae4f22b3d82b5cbd89e2d61dd40143d305) contentStartColumn(10) contentStartLine(259) org.kframework.attributes.Location(Location(259,10,259,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval574, err574 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err574 != nil {
								return m.NoResult, err574
							}
							eval575, err575 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err575 != nil {
								return m.NoResult, err575
							}
							return &m.KApply{Label: m.LblXuXeqsha3XuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=sha3__IELE-COMMON
								eval574,
								eval575,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #672
	// source: iele-binary.k @313
	// {| rule #dasmInstructionAux(`RETURN`(RETS),R,W,M,_604,_605)=>`ret__IELE-COMMON`(`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_604),isInt(W)),isInt(RETS)),isInt(R)),isIeleName(_605)),isInt(M)),`_=/=Int__INT`(RETS,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(acf8e82ece3acf51f182ff37544627e48d156bd55f0593715a40f89847c820c7) contentStartColumn(10) contentStartLine(313) org.kframework.attributes.Location(Location(313,10,314,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(RETS)
		if varRETS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu604, t := c5.(*m.Map); t && varXu604.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu605 := c6 // lhs KVariable _605
							// REQUIRES
							eval576, err576 := evalIsIeleName( // isIeleName(_605)
								varXu605,
								config, -1)
							if err576 != nil {
								return m.NoResult, err576
							}
							eval577, err577 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(RETS,#token("0","Int"))
								varRETS,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err577 != nil {
								return m.NoResult, err577
							}
							if (/* rhs precomputed isMap(_604) && isInt(W) && isInt(RETS) && isInt(R) */ /* && */
							   m.IsTrue(eval576) /* && */ /* rhs precomputed isInt(M) */ ) &&
							   (m.IsTrue(eval577)) {
								// RHS
								traceRuleApply("FUNC", 672, "{| rule #dasmInstructionAux(`RETURN`(RETS),R,W,M,_604,_605)=>`ret__IELE-COMMON`(`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),RETS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_604),isInt(W)),isInt(RETS)),isInt(R)),isIeleName(_605)),isInt(M)),`_=/=Int__INT`(RETS,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(acf8e82ece3acf51f182ff37544627e48d156bd55f0593715a40f89847c820c7) contentStartColumn(10) contentStartLine(313) org.kframework.attributes.Location(Location(313,10,314,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
								eval578, err578 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS)
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("0"),
									varRETS,
									config, -1)
								if err578 != nil {
									return m.NoResult, err578
								}
								return &m.KApply{Label: m.LblRetXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ret__IELE-COMMON
									eval578,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #673
	// source: iele-binary.k @312
	// {| rule #dasmInstructionAux(`REVERT`(.KList),R,W,M,_511,_512)=>`revert__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isIeleName(_512)),isInt(M)),isMap(_511)) ensures #token("true","Bool") [UNIQUE_ID(06b6b11da0f3388607f06aebf2a5e9d9cdd45cb6ab1b4ae39ee1997e9059b816) contentStartColumn(10) contentStartLine(312) org.kframework.attributes.Location(Location(312,10,312,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblREVERT && len(kapp0.List) == 0 { // `REVERT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu511, t := c5.(*m.Map); t && varXu511.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu512 := c6 // lhs KVariable _512
						// REQUIRES
						eval579, err579 := evalIsIeleName( // isIeleName(_512)
							varXu512,
							config, -1)
						if err579 != nil {
							return m.NoResult, err579
						}
						if /* rhs precomputed isInt(W) && isInt(R) */ /* && */
						   m.IsTrue(eval579) /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_511) */  {
							// RHS
							traceRuleApply("FUNC", 673, "{| rule #dasmInstructionAux(`REVERT`(.KList),R,W,M,_511,_512)=>`revert__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isIeleName(_512)),isInt(M)),isMap(_511)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(06b6b11da0f3388607f06aebf2a5e9d9cdd45cb6ab1b4ae39ee1997e9059b816) contentStartColumn(10) contentStartLine(312) org.kframework.attributes.Location(Location(312,10,312,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval580, err580 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err580 != nil {
								return m.NoResult, err580
							}
							return &m.KApply{Label: m.LblRevertXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is revert__IELE-COMMON
								eval580,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #674
	// source: iele-binary.k @263
	// {| rule #dasmInstructionAux(`MSTORE`(.KList),R,W,M,_659,_660)=>`store_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_659),isInt(W)),isInt(R)),isInt(M)),isIeleName(_660)) ensures #token("true","Bool") [UNIQUE_ID(22c999c93f1746fc31f69854586243bf4c948e9ecf49b060a62af89904ef1c60) contentStartColumn(10) contentStartLine(263) org.kframework.attributes.Location(Location(263,10,263,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMSTORE && len(kapp0.List) == 0 { // `MSTORE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu659, t := c5.(*m.Map); t && varXu659.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu660 := c6 // lhs KVariable _660
						// REQUIRES
						eval581, err581 := evalIsIeleName( // isIeleName(_660)
							varXu660,
							config, -1)
						if err581 != nil {
							return m.NoResult, err581
						}
						if /* rhs precomputed isMap(_659) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval581) {
							// RHS
							traceRuleApply("FUNC", 674, "{| rule #dasmInstructionAux(`MSTORE`(.KList),R,W,M,_659,_660)=>`store_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_659),isInt(W)),isInt(R)),isInt(M)),isIeleName(_660)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(22c999c93f1746fc31f69854586243bf4c948e9ecf49b060a62af89904ef1c60) contentStartColumn(10) contentStartLine(263) org.kframework.attributes.Location(Location(263,10,263,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval582, err582 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err582 != nil {
								return m.NoResult, err582
							}
							eval583, err583 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err583 != nil {
								return m.NoResult, err583
							}
							return &m.KApply{Label: m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is store_,__IELE-COMMON
								eval582,
								eval583,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #675
	// source: iele-binary.k @283
	// {| rule #dasmInstructionAux(`BYTE`(.KList),R,W,M,_566,_567)=>`_=byte_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_567),isMap(_566)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(e96813d59f259e6f16b03f2c9854ec503710037fc2f28757a8702356741f71df) contentStartColumn(10) contentStartLine(283) org.kframework.attributes.Location(Location(283,10,283,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBYTE && len(kapp0.List) == 0 { // `BYTE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu566, t := c5.(*m.Map); t && varXu566.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu567 := c6 // lhs KVariable _567
						// REQUIRES
						eval584, err584 := evalIsIeleName( // isIeleName(_567)
							varXu567,
							config, -1)
						if err584 != nil {
							return m.NoResult, err584
						}
						if m.IsTrue(eval584) /* && */ /* rhs precomputed isMap(_566) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 675, "{| rule #dasmInstructionAux(`BYTE`(.KList),R,W,M,_566,_567)=>`_=byte_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_567),isMap(_566)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e96813d59f259e6f16b03f2c9854ec503710037fc2f28757a8702356741f71df) contentStartColumn(10) contentStartLine(283) org.kframework.attributes.Location(Location(283,10,283,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval585, err585 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err585 != nil {
								return m.NoResult, err585
							}
							eval586, err586 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err586 != nil {
								return m.NoResult, err586
							}
							eval587, err587 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err587 != nil {
								return m.NoResult, err587
							}
							return &m.KApply{Label: m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=byte_,__IELE-COMMON
								eval585,
								eval586,
								eval587,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #676
	// source: iele-binary.k @242
	// {| rule #dasmInstructionAux(`CALLVALUE`(.KList),R,W,M,_696,_697)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.callvalue","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_696),isInt(W)),isInt(R)),isInt(M)),isIeleName(_697)) ensures #token("true","Bool") [UNIQUE_ID(d6ac0c836a980af253d1ae002e775e024c38d85675e005269860770cb8ffef9e) contentStartColumn(10) contentStartLine(242) org.kframework.attributes.Location(Location(242,10,242,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCALLVALUE && len(kapp0.List) == 0 { // `CALLVALUE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu696, t := c5.(*m.Map); t && varXu696.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu697 := c6 // lhs KVariable _697
						// REQUIRES
						eval588, err588 := evalIsIeleName( // isIeleName(_697)
							varXu697,
							config, -1)
						if err588 != nil {
							return m.NoResult, err588
						}
						if /* rhs precomputed isMap(_696) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval588) {
							// RHS
							traceRuleApply("FUNC", 676, "{| rule #dasmInstructionAux(`CALLVALUE`(.KList),R,W,M,_696,_697)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.callvalue\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_696),isInt(W)),isInt(R)),isInt(M)),isIeleName(_697)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6ac0c836a980af253d1ae002e775e024c38d85675e005269860770cb8ffef9e) contentStartColumn(10) contentStartLine(242) org.kframework.attributes.Location(Location(242,10,242,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval589, err589 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err589 != nil {
								return m.NoResult, err589
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval589,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.callvalue"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #677
	// source: iele-binary.k @244
	// {| rule #dasmInstructionAux(`GASPRICE`(.KList),R,W,M,_649,_650)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gasprice","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isInt(M)),isMap(_649)),isIeleName(_650)) ensures #token("true","Bool") [UNIQUE_ID(22cc2ea149c36fcc7a15ee30e2541bdfec5c1b14fedf80f1cb6f4635cea83de1) contentStartColumn(10) contentStartLine(244) org.kframework.attributes.Location(Location(244,10,244,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGASPRICE && len(kapp0.List) == 0 { // `GASPRICE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu649, t := c5.(*m.Map); t && varXu649.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu650 := c6 // lhs KVariable _650
						// REQUIRES
						eval590, err590 := evalIsIeleName( // isIeleName(_650)
							varXu650,
							config, -1)
						if err590 != nil {
							return m.NoResult, err590
						}
						if /* rhs precomputed isInt(W) && isInt(R) && isInt(M) && isMap(_649) */ /* && */
						   m.IsTrue(eval590) {
							// RHS
							traceRuleApply("FUNC", 677, "{| rule #dasmInstructionAux(`GASPRICE`(.KList),R,W,M,_649,_650)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gasprice\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isInt(M)),isMap(_649)),isIeleName(_650)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(22cc2ea149c36fcc7a15ee30e2541bdfec5c1b14fedf80f1cb6f4635cea83de1) contentStartColumn(10) contentStartLine(244) org.kframework.attributes.Location(Location(244,10,244,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval591, err591 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err591 != nil {
								return m.NoResult, err591
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval591,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gasprice"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #678
	// source: iele-binary.k @243
	// {| rule #dasmInstructionAux(`GASLIMIT`(.KList),R,W,M,_509,_510)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gaslimit","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_510),isMap(_509)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(84fad56a3b0cb9e46f1012b49b78a72ed94df61c3b8ec9348b0535b010987f4d) contentStartColumn(10) contentStartLine(243) org.kframework.attributes.Location(Location(243,10,243,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGASLIMIT && len(kapp0.List) == 0 { // `GASLIMIT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu509, t := c5.(*m.Map); t && varXu509.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu510 := c6 // lhs KVariable _510
						// REQUIRES
						eval592, err592 := evalIsIeleName( // isIeleName(_510)
							varXu510,
							config, -1)
						if err592 != nil {
							return m.NoResult, err592
						}
						if m.IsTrue(eval592) /* && */ /* rhs precomputed isMap(_509) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 678, "{| rule #dasmInstructionAux(`GASLIMIT`(.KList),R,W,M,_509,_510)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gaslimit\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_510),isMap(_509)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84fad56a3b0cb9e46f1012b49b78a72ed94df61c3b8ec9348b0535b010987f4d) contentStartColumn(10) contentStartLine(243) org.kframework.attributes.Location(Location(243,10,243,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval593, err593 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err593 != nil {
								return m.NoResult, err593
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval593,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gaslimit"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #679
	// source: iele-binary.k @277
	// {| rule #dasmInstructionAux(`TWOS`(.KList),R,W,M,_698,_699)=>`_=twos_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_699),isInt(W)),isInt(R)),isInt(M)),isMap(_698)) ensures #token("true","Bool") [UNIQUE_ID(185f9763c344ba8c5920e81ac8da8cc94dd9b6c3d1471301e6f6848ea8b359f7) contentStartColumn(10) contentStartLine(277) org.kframework.attributes.Location(Location(277,10,277,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTWOS && len(kapp0.List) == 0 { // `TWOS`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu698, t := c5.(*m.Map); t && varXu698.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu699 := c6 // lhs KVariable _699
						// REQUIRES
						eval594, err594 := evalIsIeleName( // isIeleName(_699)
							varXu699,
							config, -1)
						if err594 != nil {
							return m.NoResult, err594
						}
						if m.IsTrue(eval594) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_698) */  {
							// RHS
							traceRuleApply("FUNC", 679, "{| rule #dasmInstructionAux(`TWOS`(.KList),R,W,M,_698,_699)=>`_=twos_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_699),isInt(W)),isInt(R)),isInt(M)),isMap(_698)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(185f9763c344ba8c5920e81ac8da8cc94dd9b6c3d1471301e6f6848ea8b359f7) contentStartColumn(10) contentStartLine(277) org.kframework.attributes.Location(Location(277,10,277,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval595, err595 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err595 != nil {
								return m.NoResult, err595
							}
							eval596, err596 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err596 != nil {
								return m.NoResult, err596
							}
							eval597, err597 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err597 != nil {
								return m.NoResult, err597
							}
							return &m.KApply{Label: m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=twos_,__IELE-COMMON
								eval595,
								eval596,
								eval597,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #680
	// source: iele-binary.k @299
	// {| rule #dasmInstructionAux(`LOG4`(.KList),R,W,M,_524,_525)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("4","Int")),`.List{"operandList"}`(.KList)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_525),isMap(_524)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(13a80de4d88577d55131514e7cbd81ce9aed20bdda7b885a75358b82329ace07) contentStartColumn(10) contentStartLine(299) org.kframework.attributes.Location(Location(299,10,299,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOG4 && len(kapp0.List) == 0 { // `LOG4`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu524, t := c5.(*m.Map); t && varXu524.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu525 := c6 // lhs KVariable _525
						// REQUIRES
						eval598, err598 := evalIsIeleName( // isIeleName(_525)
							varXu525,
							config, -1)
						if err598 != nil {
							return m.NoResult, err598
						}
						if m.IsTrue(eval598) /* && */ /* rhs precomputed isMap(_524) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 680, "{| rule #dasmInstructionAux(`LOG4`(.KList),R,W,M,_524,_525)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"4\",\"Int\")),`.List{\"operandList\"}`(.KList)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_525),isMap(_524)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(13a80de4d88577d55131514e7cbd81ce9aed20bdda7b885a75358b82329ace07) contentStartColumn(10) contentStartLine(299) org.kframework.attributes.Location(Location(299,10,299,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval599, err599 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err599 != nil {
								return m.NoResult, err599
							}
							eval600, err600 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err600 != nil {
								return m.NoResult, err600
							}
							eval601, err601 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err601 != nil {
								return m.NoResult, err601
							}
							eval602, err602 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err602 != nil {
								return m.NoResult, err602
							}
							eval603, err603 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("4","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("4"),
								config, -1)
							if err603 != nil {
								return m.NoResult, err603
							}
							return &m.KApply{Label: m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log_,__IELE-COMMON
								eval599,
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval600,
									&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
										eval601,
										&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
											eval602,
											&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
												eval603,
												&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
												}},
											}},
										}},
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #681
	// source: iele-binary.k @286
	// {| rule #dasmInstructionAux(`GT`(.KList),R,W,M,_564,_565)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`gt_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_565),isInt(W)),isInt(R)),isInt(M)),isMap(_564)) ensures #token("true","Bool") [UNIQUE_ID(fde80e51f817fbeea37b2cf6cfbe21bdcd6ee72cc5380c7939b29f5251dbf0b8) contentStartColumn(10) contentStartLine(286) org.kframework.attributes.Location(Location(286,10,286,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGT && len(kapp0.List) == 0 { // `GT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu564, t := c5.(*m.Map); t && varXu564.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu565 := c6 // lhs KVariable _565
						// REQUIRES
						eval604, err604 := evalIsIeleName( // isIeleName(_565)
							varXu565,
							config, -1)
						if err604 != nil {
							return m.NoResult, err604
						}
						if m.IsTrue(eval604) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_564) */  {
							// RHS
							traceRuleApply("FUNC", 681, "{| rule #dasmInstructionAux(`GT`(.KList),R,W,M,_564,_565)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`gt_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_565),isInt(W)),isInt(R)),isInt(M)),isMap(_564)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fde80e51f817fbeea37b2cf6cfbe21bdcd6ee72cc5380c7939b29f5251dbf0b8) contentStartColumn(10) contentStartLine(286) org.kframework.attributes.Location(Location(286,10,286,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval605, err605 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err605 != nil {
								return m.NoResult, err605
							}
							eval606, err606 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err606 != nil {
								return m.NoResult, err606
							}
							eval607, err607 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err607 != nil {
								return m.NoResult, err607
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval605,
								&m.KApply{Label: m.LblGtXuIELEXhyphenCOMMON, List: []m.K{ // as-is gt_IELE-COMMON
								}},
								eval606,
								eval607,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #682
	// source: iele-binary.k @290
	// {| rule #dasmInstructionAux(`LOG2`(.KList),R,W,M,_505,_506)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`.List{"operandList"}`(.KList)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_505),isInt(W)),isInt(R)),isInt(M)),isIeleName(_506)) ensures #token("true","Bool") [UNIQUE_ID(2ac0a2b6581e96c912918c2bd8597a58d96d3d77ae593492ac6c7c085aff188b) contentStartColumn(10) contentStartLine(290) org.kframework.attributes.Location(Location(290,10,290,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOG2 && len(kapp0.List) == 0 { // `LOG2`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu505, t := c5.(*m.Map); t && varXu505.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu506 := c6 // lhs KVariable _506
						// REQUIRES
						eval608, err608 := evalIsIeleName( // isIeleName(_506)
							varXu506,
							config, -1)
						if err608 != nil {
							return m.NoResult, err608
						}
						if /* rhs precomputed isMap(_505) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval608) {
							// RHS
							traceRuleApply("FUNC", 682, "{| rule #dasmInstructionAux(`LOG2`(.KList),R,W,M,_505,_506)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`.List{\"operandList\"}`(.KList)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_505),isInt(W)),isInt(R)),isInt(M)),isIeleName(_506)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2ac0a2b6581e96c912918c2bd8597a58d96d3d77ae593492ac6c7c085aff188b) contentStartColumn(10) contentStartLine(290) org.kframework.attributes.Location(Location(290,10,290,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval609, err609 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err609 != nil {
								return m.NoResult, err609
							}
							eval610, err610 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err610 != nil {
								return m.NoResult, err610
							}
							eval611, err611 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err611 != nil {
								return m.NoResult, err611
							}
							return &m.KApply{Label: m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log_,__IELE-COMMON
								eval609,
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval610,
									&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
										eval611,
										&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
										}},
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #683
	// source: iele-binary.k @281
	// {| rule #dasmInstructionAux(`XOR`(.KList),R,W,M,_538,_539)=>`_=xor_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_539),isMap(_538)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(1fa0812b6ad1b25871f618a102e686bb3ccc9b4546bee30c671f6dd8c7d1e0d6) contentStartColumn(10) contentStartLine(281) org.kframework.attributes.Location(Location(281,10,281,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXOR && len(kapp0.List) == 0 { // `XOR`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu538, t := c5.(*m.Map); t && varXu538.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu539 := c6 // lhs KVariable _539
						// REQUIRES
						eval612, err612 := evalIsIeleName( // isIeleName(_539)
							varXu539,
							config, -1)
						if err612 != nil {
							return m.NoResult, err612
						}
						if m.IsTrue(eval612) /* && */ /* rhs precomputed isMap(_538) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 683, "{| rule #dasmInstructionAux(`XOR`(.KList),R,W,M,_538,_539)=>`_=xor_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_539),isMap(_538)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1fa0812b6ad1b25871f618a102e686bb3ccc9b4546bee30c671f6dd8c7d1e0d6) contentStartColumn(10) contentStartLine(281) org.kframework.attributes.Location(Location(281,10,281,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval613, err613 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err613 != nil {
								return m.NoResult, err613
							}
							eval614, err614 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err614 != nil {
								return m.NoResult, err614
							}
							eval615, err615 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err615 != nil {
								return m.NoResult, err615
							}
							return &m.KApply{Label: m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=xor_,__IELE-COMMON
								eval613,
								eval614,
								eval615,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #684
	// source: iele-binary.k @275
	// {| rule #dasmInstructionAux(`EXP`(.KList),R,W,M,_690,_691)=>`_=exp_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_690),isIeleName(_691)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(845326936b335259dc18ad991df35e6194bdacc9742fdb6e959c13a0da4acd49) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,275,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblEXP && len(kapp0.List) == 0 { // `EXP`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu690, t := c5.(*m.Map); t && varXu690.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu691 := c6 // lhs KVariable _691
						// REQUIRES
						eval616, err616 := evalIsIeleName( // isIeleName(_691)
							varXu691,
							config, -1)
						if err616 != nil {
							return m.NoResult, err616
						}
						if /* rhs precomputed isMap(_690) */ /* && */
						   m.IsTrue(eval616) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 684, "{| rule #dasmInstructionAux(`EXP`(.KList),R,W,M,_690,_691)=>`_=exp_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_690),isIeleName(_691)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(845326936b335259dc18ad991df35e6194bdacc9742fdb6e959c13a0da4acd49) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,275,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval617, err617 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err617 != nil {
								return m.NoResult, err617
							}
							eval618, err618 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err618 != nil {
								return m.NoResult, err618
							}
							eval619, err619 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err619 != nil {
								return m.NoResult, err619
							}
							return &m.KApply{Label: m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=exp_,__IELE-COMMON
								eval617,
								eval618,
								eval619,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #685
	// source: iele-binary.k @278
	// {| rule #dasmInstructionAux(`BSWAP`(.KList),R,W,M,_607,_608)=>`_=bswap_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_608),isMap(_607)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(ed14d2d5bdc16cc418fd98e35528f33f26feabb3705318280c8b64603af2f641) contentStartColumn(10) contentStartLine(278) org.kframework.attributes.Location(Location(278,10,278,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBSWAP && len(kapp0.List) == 0 { // `BSWAP`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu607, t := c5.(*m.Map); t && varXu607.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu608 := c6 // lhs KVariable _608
						// REQUIRES
						eval620, err620 := evalIsIeleName( // isIeleName(_608)
							varXu608,
							config, -1)
						if err620 != nil {
							return m.NoResult, err620
						}
						if m.IsTrue(eval620) /* && */ /* rhs precomputed isMap(_607) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 685, "{| rule #dasmInstructionAux(`BSWAP`(.KList),R,W,M,_607,_608)=>`_=bswap_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_608),isMap(_607)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed14d2d5bdc16cc418fd98e35528f33f26feabb3705318280c8b64603af2f641) contentStartColumn(10) contentStartLine(278) org.kframework.attributes.Location(Location(278,10,278,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval621, err621 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err621 != nil {
								return m.NoResult, err621
							}
							eval622, err622 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err622 != nil {
								return m.NoResult, err622
							}
							eval623, err623 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err623 != nil {
								return m.NoResult, err623
							}
							return &m.KApply{Label: m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=bswap_,__IELE-COMMON
								eval621,
								eval622,
								eval623,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #686
	// source: iele-binary.k @307
	// {| rule #dasmInstructionAux(`CALLADDRESS`(LABEL),R,W,M,F,_530)=>`_=calladdress_at__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isIeleName(_530)),isInt(W)),isInt(R)),isInt(M)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(d143a6da538b4c3f3771812e74a4934d25e0f2ef0d36c1039aa833054c4ee977) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,307,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCALLADDRESS && len(kapp0.List) == 1 { // `CALLADDRESS`(LABEL)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu530 := c6 // lhs KVariable _530
							// REQUIRES
							eval624, err624 := evalIsIeleName( // isIeleName(_530)
								varXu530,
								config, -1)
							if err624 != nil {
								return m.NoResult, err624
							}
							if /* rhs precomputed isInt(LABEL) */ /* && */
							   m.IsTrue(eval624) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(F) */  {
								// RHS
								traceRuleApply("FUNC", 686, "{| rule #dasmInstructionAux(`CALLADDRESS`(LABEL),R,W,M,F,_530)=>`_=calladdress_at__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isIeleName(_530)),isInt(W)),isInt(R)),isInt(M)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d143a6da538b4c3f3771812e74a4934d25e0f2ef0d36c1039aa833054c4ee977) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,307,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval625, err625 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("0"),
									config, -1)
								if err625 != nil {
									return m.NoResult, err625
								}
								eval627, err627 := evalMapXcolonlookup( // `Map:lookup`(F,LABEL)
									varF,
									varLABEL,
									config, -1)
								if err627 != nil {
									return m.NoResult, err627
								}
								eval626, err626 := evalGetIeleName( // getIeleName(`Map:lookup`(F,LABEL))
									eval627,
									config, -1)
								if err626 != nil {
									return m.NoResult, err626
								}
								eval628, err628 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("1"),
									config, -1)
								if err628 != nil {
									return m.NoResult, err628
								}
								return &m.KApply{Label: m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=calladdress_at__IELE-COMMON
									eval625,
									&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
										eval626,
									}},
									eval628,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #687
	// source: iele-binary.k @260
	// {| rule #dasmInstructionAux(`MLOAD`(.KList),R,W,M,_548,_549)=>`_=load__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_549),isInt(W)),isMap(_548)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(e3eecd4a156d290998f57880c5e20ebe92fcf3db31a3720e59e06f72d335b654) contentStartColumn(10) contentStartLine(260) org.kframework.attributes.Location(Location(260,10,260,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMLOAD && len(kapp0.List) == 0 { // `MLOAD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu548, t := c5.(*m.Map); t && varXu548.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu549 := c6 // lhs KVariable _549
						// REQUIRES
						eval629, err629 := evalIsIeleName( // isIeleName(_549)
							varXu549,
							config, -1)
						if err629 != nil {
							return m.NoResult, err629
						}
						if m.IsTrue(eval629) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isMap(_548) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 687, "{| rule #dasmInstructionAux(`MLOAD`(.KList),R,W,M,_548,_549)=>`_=load__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_549),isInt(W)),isMap(_548)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e3eecd4a156d290998f57880c5e20ebe92fcf3db31a3720e59e06f72d335b654) contentStartColumn(10) contentStartLine(260) org.kframework.attributes.Location(Location(260,10,260,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval630, err630 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err630 != nil {
								return m.NoResult, err630
							}
							eval631, err631 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err631 != nil {
								return m.NoResult, err631
							}
							return &m.KApply{Label: m.LblXuXeqloadXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=load__IELE-COMMON
								eval630,
								eval631,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #688
	// source: iele-binary.k @265
	// {| rule #dasmInstructionAux(`LOG1`(.KList),R,W,M,_481,_482)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`.List{"operandList"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_481),isInt(W)),isIeleName(_482)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(b6f2c0fed57cf72bf2fe8fb81cc48d1590f5e6fe4935403789b1d7293c24c60a) contentStartColumn(10) contentStartLine(265) org.kframework.attributes.Location(Location(265,10,265,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOG1 && len(kapp0.List) == 0 { // `LOG1`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu481, t := c5.(*m.Map); t && varXu481.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu482 := c6 // lhs KVariable _482
						// REQUIRES
						eval632, err632 := evalIsIeleName( // isIeleName(_482)
							varXu482,
							config, -1)
						if err632 != nil {
							return m.NoResult, err632
						}
						if /* rhs precomputed isMap(_481) && isInt(W) */ /* && */
						   m.IsTrue(eval632) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 688, "{| rule #dasmInstructionAux(`LOG1`(.KList),R,W,M,_481,_482)=>`log_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_481),isInt(W)),isIeleName(_482)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b6f2c0fed57cf72bf2fe8fb81cc48d1590f5e6fe4935403789b1d7293c24c60a) contentStartColumn(10) contentStartLine(265) org.kframework.attributes.Location(Location(265,10,265,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval633, err633 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err633 != nil {
								return m.NoResult, err633
							}
							eval634, err634 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err634 != nil {
								return m.NoResult, err634
							}
							return &m.KApply{Label: m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log_,__IELE-COMMON
								eval633,
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval634,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #689
	// source: iele-binary.k @292
	// {| rule #dasmInstructionAux(`ADDMOD`(.KList),R,W,M,_617,_618)=>`_=addmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_618),isInt(W)),isInt(R)),isInt(M)),isMap(_617)) ensures #token("true","Bool") [UNIQUE_ID(c1148d355938f8ef6f2c13f6b6b515950001c97aa8db96b1daf1503668b50235) contentStartColumn(10) contentStartLine(292) org.kframework.attributes.Location(Location(292,10,292,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblADDMOD && len(kapp0.List) == 0 { // `ADDMOD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu617, t := c5.(*m.Map); t && varXu617.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu618 := c6 // lhs KVariable _618
						// REQUIRES
						eval635, err635 := evalIsIeleName( // isIeleName(_618)
							varXu618,
							config, -1)
						if err635 != nil {
							return m.NoResult, err635
						}
						if m.IsTrue(eval635) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_617) */  {
							// RHS
							traceRuleApply("FUNC", 689, "{| rule #dasmInstructionAux(`ADDMOD`(.KList),R,W,M,_617,_618)=>`_=addmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_618),isInt(W)),isInt(R)),isInt(M)),isMap(_617)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c1148d355938f8ef6f2c13f6b6b515950001c97aa8db96b1daf1503668b50235) contentStartColumn(10) contentStartLine(292) org.kframework.attributes.Location(Location(292,10,292,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval636, err636 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err636 != nil {
								return m.NoResult, err636
							}
							eval637, err637 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err637 != nil {
								return m.NoResult, err637
							}
							eval638, err638 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err638 != nil {
								return m.NoResult, err638
							}
							eval639, err639 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err639 != nil {
								return m.NoResult, err639
							}
							return &m.KApply{Label: m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=addmod_,_,__IELE-COMMON
								eval636,
								eval637,
								eval638,
								eval639,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #690
	// source: iele-binary.k @264
	// {| rule #dasmInstructionAux(`SSTORE`(.KList),R,W,M,_534,_535)=>`sstore_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_535),isMap(_534)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(b0286be2f4d7d93ed80328071daea6711e25990c943f6283aa14d95bd6747c4e) contentStartColumn(10) contentStartLine(264) org.kframework.attributes.Location(Location(264,10,264,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSSTORE && len(kapp0.List) == 0 { // `SSTORE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu534, t := c5.(*m.Map); t && varXu534.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu535 := c6 // lhs KVariable _535
						// REQUIRES
						eval640, err640 := evalIsIeleName( // isIeleName(_535)
							varXu535,
							config, -1)
						if err640 != nil {
							return m.NoResult, err640
						}
						if m.IsTrue(eval640) /* && */ /* rhs precomputed isMap(_534) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 690, "{| rule #dasmInstructionAux(`SSTORE`(.KList),R,W,M,_534,_535)=>`sstore_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_535),isMap(_534)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b0286be2f4d7d93ed80328071daea6711e25990c943f6283aa14d95bd6747c4e) contentStartColumn(10) contentStartLine(264) org.kframework.attributes.Location(Location(264,10,264,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval641, err641 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err641 != nil {
								return m.NoResult, err641
							}
							eval642, err642 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err642 != nil {
								return m.NoResult, err642
							}
							return &m.KApply{Label: m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is sstore_,__IELE-COMMON
								eval641,
								eval642,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #691
	// source: iele-binary.k @252
	// {| rule #dasmInstructionAux(`NUMBER`(.KList),R,W,M,_687,_688)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.number","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_688),isInt(W)),isMap(_687)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(8769fb90986dc09ed0cc3a99ec8c63844330ffc39ac05196f4f8ba044da44e60) contentStartColumn(10) contentStartLine(252) org.kframework.attributes.Location(Location(252,10,252,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblNUMBER && len(kapp0.List) == 0 { // `NUMBER`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu687, t := c5.(*m.Map); t && varXu687.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu688 := c6 // lhs KVariable _688
						// REQUIRES
						eval643, err643 := evalIsIeleName( // isIeleName(_688)
							varXu688,
							config, -1)
						if err643 != nil {
							return m.NoResult, err643
						}
						if m.IsTrue(eval643) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isMap(_687) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 691, "{| rule #dasmInstructionAux(`NUMBER`(.KList),R,W,M,_687,_688)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.number\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_688),isInt(W)),isMap(_687)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8769fb90986dc09ed0cc3a99ec8c63844330ffc39ac05196f4f8ba044da44e60) contentStartColumn(10) contentStartLine(252) org.kframework.attributes.Location(Location(252,10,252,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval644, err644 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err644 != nil {
								return m.NoResult, err644
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval644,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.number"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #692
	// source: iele-binary.k @248
	// {| rule #dasmInstructionAux(`CALLER`(.KList),R,W,M,_463,_464)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.caller","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isInt(M)),isMap(_463)),isIeleName(_464)) ensures #token("true","Bool") [UNIQUE_ID(361854b353c36b65965aac4c71fd5e934ac604bfb30c073796c035dc5001026b) contentStartColumn(10) contentStartLine(248) org.kframework.attributes.Location(Location(248,10,248,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCALLER && len(kapp0.List) == 0 { // `CALLER`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu463, t := c5.(*m.Map); t && varXu463.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu464 := c6 // lhs KVariable _464
						// REQUIRES
						eval645, err645 := evalIsIeleName( // isIeleName(_464)
							varXu464,
							config, -1)
						if err645 != nil {
							return m.NoResult, err645
						}
						if /* rhs precomputed isInt(W) && isInt(R) && isInt(M) && isMap(_463) */ /* && */
						   m.IsTrue(eval645) {
							// RHS
							traceRuleApply("FUNC", 692, "{| rule #dasmInstructionAux(`CALLER`(.KList),R,W,M,_463,_464)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.caller\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isInt(R)),isInt(M)),isMap(_463)),isIeleName(_464)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(361854b353c36b65965aac4c71fd5e934ac604bfb30c073796c035dc5001026b) contentStartColumn(10) contentStartLine(248) org.kframework.attributes.Location(Location(248,10,248,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval646, err646 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err646 != nil {
								return m.NoResult, err646
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval646,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.caller"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #693
	// source: iele-binary.k @302
	// {| rule #dasmInstructionAux(`STATICCALLDYN`(ARGS,RETS),R,W,M,F,_483)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int"))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isIeleName(_483)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(8f7eaa906f9dfc76f148157cffc9776d5636f0a23caedd4b996e397a517a24b2) contentStartColumn(10) contentStartLine(302) org.kframework.attributes.Location(Location(302,10,302,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSTATICCALLDYN && len(kapp0.List) == 2 { // `STATICCALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varXu483 := c6 // lhs KVariable _483
								// REQUIRES
								eval647, err647 := evalIsIeleName( // isIeleName(_483)
									varXu483,
									config, -1)
								if err647 != nil {
									return m.NoResult, err647
								}
								if /* rhs precomputed isInt(ARGS) */ /* && */
								   m.IsTrue(eval647) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(F) */  {
									// RHS
									traceRuleApply("FUNC", 693, "{| rule #dasmInstructionAux(`STATICCALLDYN`(ARGS,RETS),R,W,M,F,_483)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),`_+Int_`(RETS,#token(\"1\",\"Int\"))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"1\",\"Int\"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"3\",\"Int\"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"4\",\"Int\"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"2\",\"Int\"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isIeleName(_483)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8f7eaa906f9dfc76f148157cffc9776d5636f0a23caedd4b996e397a517a24b2) contentStartColumn(10) contentStartLine(302) org.kframework.attributes.Location(Location(302,10,302,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval649, err649 := evalXuXplusIntXu( // `_+Int_`(RETS,#token("1","Int"))
										varRETS,
										/* rhs KToken */ m.NewIntFromString("1"),
										config, -1)
									if err649 != nil {
										return m.NoResult, err649
									}
									eval648, err648 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int")))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										eval649,
										config, -1)
									if err648 != nil {
										return m.NoResult, err648
									}
									eval651, err651 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("1"),
										varRETS,
										config, -1)
									if err651 != nil {
										return m.NoResult, err651
									}
									eval650, err650 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))
										varR,
										varW,
										varM,
										eval651,
										config, -1)
									if err650 != nil {
										return m.NoResult, err650
									}
									eval653, err653 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("3"),
										varRETS,
										config, -1)
									if err653 != nil {
										return m.NoResult, err653
									}
									eval652, err652 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS))
										varR,
										varW,
										varM,
										eval653,
										config, -1)
									if err652 != nil {
										return m.NoResult, err652
									}
									eval655, err655 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("4"),
										varRETS,
										config, -1)
									if err655 != nil {
										return m.NoResult, err655
									}
									eval654, err654 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS),ARGS)
										varR,
										varW,
										varM,
										eval655,
										varARGS,
										config, -1)
									if err654 != nil {
										return m.NoResult, err654
									}
									eval657, err657 := evalXuXplusIntXu( // `_+Int_`(#token("2","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("2"),
										varRETS,
										config, -1)
									if err657 != nil {
										return m.NoResult, err657
									}
									eval656, err656 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))
										varR,
										varW,
										varM,
										eval657,
										config, -1)
									if err656 != nil {
										return m.NoResult, err656
									}
									return &m.KApply{Label: m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
										eval648,
										eval650,
										eval652,
										eval654,
										eval656,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #694
	// source: iele-binary.k @262
	// {| rule #dasmInstructionAux(`LOGARITHM2`(.KList),R,W,M,_700,_701)=>`_=log2__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_701),isInt(W)),isInt(R)),isInt(M)),isMap(_700)) ensures #token("true","Bool") [UNIQUE_ID(74fc8373719880bc5077369b43652f01e445915593732afb4489621b7f70ec9c) contentStartColumn(10) contentStartLine(262) org.kframework.attributes.Location(Location(262,10,262,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOGARITHM2 && len(kapp0.List) == 0 { // `LOGARITHM2`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu700, t := c5.(*m.Map); t && varXu700.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu701 := c6 // lhs KVariable _701
						// REQUIRES
						eval658, err658 := evalIsIeleName( // isIeleName(_701)
							varXu701,
							config, -1)
						if err658 != nil {
							return m.NoResult, err658
						}
						if m.IsTrue(eval658) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_700) */  {
							// RHS
							traceRuleApply("FUNC", 694, "{| rule #dasmInstructionAux(`LOGARITHM2`(.KList),R,W,M,_700,_701)=>`_=log2__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_701),isInt(W)),isInt(R)),isInt(M)),isMap(_700)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(74fc8373719880bc5077369b43652f01e445915593732afb4489621b7f70ec9c) contentStartColumn(10) contentStartLine(262) org.kframework.attributes.Location(Location(262,10,262,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval659, err659 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err659 != nil {
								return m.NoResult, err659
							}
							eval660, err660 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err660 != nil {
								return m.NoResult, err660
							}
							return &m.KApply{Label: m.LblXuXeqlog2XuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=log2__IELE-COMMON
								eval659,
								eval660,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #695
	// source: iele-binary.k @296
	// {| rule #dasmInstructionAux(`MSTOREN`(.KList),R,W,M,_502,_503)=>`store_,_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_502),isInt(W)),isIeleName(_503)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(6d9cd6644ecfc82b1f9063b813f659f9eb7deaabbc67526f3fcd03cde349795c) contentStartColumn(10) contentStartLine(296) org.kframework.attributes.Location(Location(296,10,296,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMSTOREN && len(kapp0.List) == 0 { // `MSTOREN`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu502, t := c5.(*m.Map); t && varXu502.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu503 := c6 // lhs KVariable _503
						// REQUIRES
						eval661, err661 := evalIsIeleName( // isIeleName(_503)
							varXu503,
							config, -1)
						if err661 != nil {
							return m.NoResult, err661
						}
						if /* rhs precomputed isMap(_502) && isInt(W) */ /* && */
						   m.IsTrue(eval661) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 695, "{| rule #dasmInstructionAux(`MSTOREN`(.KList),R,W,M,_502,_503)=>`store_,_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_502),isInt(W)),isIeleName(_503)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6d9cd6644ecfc82b1f9063b813f659f9eb7deaabbc67526f3fcd03cde349795c) contentStartColumn(10) contentStartLine(296) org.kframework.attributes.Location(Location(296,10,296,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval662, err662 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err662 != nil {
								return m.NoResult, err662
							}
							eval663, err663 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err663 != nil {
								return m.NoResult, err663
							}
							eval664, err664 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err664 != nil {
								return m.NoResult, err664
							}
							eval665, err665 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err665 != nil {
								return m.NoResult, err665
							}
							return &m.KApply{Label: m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is store_,_,_,__IELE-COMMON
								eval662,
								eval663,
								eval664,
								eval665,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #696
	// source: iele-binary.k @276
	// {| rule #dasmInstructionAux(`SIGNEXTEND`(.KList),R,W,M,_542,_543)=>`_=sext_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_542),isIeleName(_543)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(99fc4bedb52f862407e302949e047725724d979679e3bcef9c61c2a95d281139) contentStartColumn(10) contentStartLine(276) org.kframework.attributes.Location(Location(276,10,276,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSIGNEXTEND && len(kapp0.List) == 0 { // `SIGNEXTEND`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu542, t := c5.(*m.Map); t && varXu542.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu543 := c6 // lhs KVariable _543
						// REQUIRES
						eval666, err666 := evalIsIeleName( // isIeleName(_543)
							varXu543,
							config, -1)
						if err666 != nil {
							return m.NoResult, err666
						}
						if /* rhs precomputed isMap(_542) */ /* && */
						   m.IsTrue(eval666) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 696, "{| rule #dasmInstructionAux(`SIGNEXTEND`(.KList),R,W,M,_542,_543)=>`_=sext_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_542),isIeleName(_543)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99fc4bedb52f862407e302949e047725724d979679e3bcef9c61c2a95d281139) contentStartColumn(10) contentStartLine(276) org.kframework.attributes.Location(Location(276,10,276,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval667, err667 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err667 != nil {
								return m.NoResult, err667
							}
							eval668, err668 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err668 != nil {
								return m.NoResult, err668
							}
							eval669, err669 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err669 != nil {
								return m.NoResult, err669
							}
							return &m.KApply{Label: m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=sext_,__IELE-COMMON
								eval667,
								eval668,
								eval669,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #697
	// source: iele-binary.k @240
	// {| rule #dasmInstructionAux(`BRC`(LABEL),R,W,M,_651,_652)=>`br_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isMap(_651)),isIeleName(_652)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(d49fba4ef24fb29b0cf8a0796489bf9718c0508c71434cd5b7cb3ffc532f60c6) contentStartColumn(10) contentStartLine(240) org.kframework.attributes.Location(Location(240,10,240,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBRC && len(kapp0.List) == 1 { // `BRC`(LABEL)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu651, t := c5.(*m.Map); t && varXu651.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu652 := c6 // lhs KVariable _652
							// REQUIRES
							eval670, err670 := evalIsIeleName( // isIeleName(_652)
								varXu652,
								config, -1)
							if err670 != nil {
								return m.NoResult, err670
							}
							if /* rhs precomputed isInt(LABEL) && isMap(_651) */ /* && */
							   m.IsTrue(eval670) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
								// RHS
								traceRuleApply("FUNC", 697, "{| rule #dasmInstructionAux(`BRC`(LABEL),R,W,M,_651,_652)=>`br_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isMap(_651)),isIeleName(_652)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d49fba4ef24fb29b0cf8a0796489bf9718c0508c71434cd5b7cb3ffc532f60c6) contentStartColumn(10) contentStartLine(240) org.kframework.attributes.Location(Location(240,10,240,89)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval671, err671 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
									varR,
									varW,
									varM,
									/* rhs KToken */ m.NewIntFromString("0"),
									config, -1)
								if err671 != nil {
									return m.NoResult, err671
								}
								return &m.KApply{Label: m.LblBrXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is br_,__IELE-COMMON
									eval671,
									varLABEL,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #698
	// source: iele-binary.k @294
	// {| rule #dasmInstructionAux(`EXPMOD`(.KList),R,W,M,_623,_624)=>`_=expmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_624),isInt(W)),isInt(R)),isInt(M)),isMap(_623)) ensures #token("true","Bool") [UNIQUE_ID(8627859ee6029f006a2b43c9f23a3f7b2eec467728f2902150472d0839e83c95) contentStartColumn(10) contentStartLine(294) org.kframework.attributes.Location(Location(294,10,294,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblEXPMOD && len(kapp0.List) == 0 { // `EXPMOD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu623, t := c5.(*m.Map); t && varXu623.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu624 := c6 // lhs KVariable _624
						// REQUIRES
						eval672, err672 := evalIsIeleName( // isIeleName(_624)
							varXu624,
							config, -1)
						if err672 != nil {
							return m.NoResult, err672
						}
						if m.IsTrue(eval672) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_623) */  {
							// RHS
							traceRuleApply("FUNC", 698, "{| rule #dasmInstructionAux(`EXPMOD`(.KList),R,W,M,_623,_624)=>`_=expmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_624),isInt(W)),isInt(R)),isInt(M)),isMap(_623)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8627859ee6029f006a2b43c9f23a3f7b2eec467728f2902150472d0839e83c95) contentStartColumn(10) contentStartLine(294) org.kframework.attributes.Location(Location(294,10,294,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval673, err673 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err673 != nil {
								return m.NoResult, err673
							}
							eval674, err674 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err674 != nil {
								return m.NoResult, err674
							}
							eval675, err675 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err675 != nil {
								return m.NoResult, err675
							}
							eval676, err676 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err676 != nil {
								return m.NoResult, err676
							}
							return &m.KApply{Label: m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=expmod_,_,__IELE-COMMON
								eval673,
								eval674,
								eval675,
								eval676,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #699
	// source: iele-binary.k @251
	// {| rule #dasmInstructionAux(`TIMESTAMP`(.KList),R,W,M,_680,_681)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.timestamp","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_680),isInt(W)),isIeleName(_681)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(65b48a9c6f999b07f032ab30270fe1a71fdbb34ddb70cc38bd75ba0065e58f97) contentStartColumn(10) contentStartLine(251) org.kframework.attributes.Location(Location(251,10,251,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTIMESTAMP && len(kapp0.List) == 0 { // `TIMESTAMP`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu680, t := c5.(*m.Map); t && varXu680.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu681 := c6 // lhs KVariable _681
						// REQUIRES
						eval677, err677 := evalIsIeleName( // isIeleName(_681)
							varXu681,
							config, -1)
						if err677 != nil {
							return m.NoResult, err677
						}
						if /* rhs precomputed isMap(_680) && isInt(W) */ /* && */
						   m.IsTrue(eval677) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 699, "{| rule #dasmInstructionAux(`TIMESTAMP`(.KList),R,W,M,_680,_681)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.timestamp\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_680),isInt(W)),isIeleName(_681)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(65b48a9c6f999b07f032ab30270fe1a71fdbb34ddb70cc38bd75ba0065e58f97) contentStartColumn(10) contentStartLine(251) org.kframework.attributes.Location(Location(251,10,251,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval678, err678 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err678 != nil {
								return m.NoResult, err678
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval678,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.timestamp"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #700
	// source: iele-binary.k @233
	// {| rule #dasmInstructionAux(`LOADPOS`(_559,I),R,W,M,_560,_561)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),I) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_559),isInt(I)),isMap(_560)),isInt(W)),isIeleName(_561)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(0b43a87d522a5d36684580c3cde43f3ddb704198667bd20d9b9a198a34225af8) contentStartColumn(10) contentStartLine(233) org.kframework.attributes.Location(Location(233,10,233,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOADPOS && len(kapp0.List) == 2 { // `LOADPOS`(_559,I)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varI, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varXu560, t := c5.(*m.Map); t && varXu560.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varXu561 := c6 // lhs KVariable _561
								// REQUIRES
								eval679, err679 := evalIsIeleName( // isIeleName(_561)
									varXu561,
									config, -1)
								if err679 != nil {
									return m.NoResult, err679
								}
								if /* rhs precomputed isInt(_559) && isInt(I) && isMap(_560) && isInt(W) */ /* && */
								   m.IsTrue(eval679) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
									// RHS
									traceRuleApply("FUNC", 700, "{| rule #dasmInstructionAux(`LOADPOS`(_559,I),R,W,M,_560,_561)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),I) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_559),isInt(I)),isMap(_560)),isInt(W)),isIeleName(_561)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b43a87d522a5d36684580c3cde43f3ddb704198667bd20d9b9a198a34225af8) contentStartColumn(10) contentStartLine(233) org.kframework.attributes.Location(Location(233,10,233,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval680, err680 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err680 != nil {
										return m.NoResult, err680
									}
									return &m.KApply{Label: m.LblXuXeqXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=__IELE-COMMON
										eval680,
										varI,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #701
	// source: iele-binary.k @285
	// {| rule #dasmInstructionAux(`LE`(.KList),R,W,M,_507,_508)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`le_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_508),isInt(W)),isInt(R)),isMap(_507)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(79fc53d1a95d6d300e7ee4f4abcc6215863f22828e725de04602249afa70dc08) contentStartColumn(10) contentStartLine(285) org.kframework.attributes.Location(Location(285,10,285,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLE && len(kapp0.List) == 0 { // `LE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu507, t := c5.(*m.Map); t && varXu507.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu508 := c6 // lhs KVariable _508
						// REQUIRES
						eval681, err681 := evalIsIeleName( // isIeleName(_508)
							varXu508,
							config, -1)
						if err681 != nil {
							return m.NoResult, err681
						}
						if m.IsTrue(eval681) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_507) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 701, "{| rule #dasmInstructionAux(`LE`(.KList),R,W,M,_507,_508)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`le_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_508),isInt(W)),isInt(R)),isMap(_507)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(79fc53d1a95d6d300e7ee4f4abcc6215863f22828e725de04602249afa70dc08) contentStartColumn(10) contentStartLine(285) org.kframework.attributes.Location(Location(285,10,285,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval682, err682 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err682 != nil {
								return m.NoResult, err682
							}
							eval683, err683 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err683 != nil {
								return m.NoResult, err683
							}
							eval684, err684 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err684 != nil {
								return m.NoResult, err684
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval682,
								&m.KApply{Label: m.LblLeXuIELEXhyphenCOMMON, List: []m.K{ // as-is le_IELE-COMMON
								}},
								eval683,
								eval684,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #702
	// source: iele-binary.k @284
	// {| rule #dasmInstructionAux(`LT`(.KList),R,W,M,_516,_517)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`lt_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_516),isIeleName(_517)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(4a96523e89e0a0148994e78e5d784bdf4ccf71d0488e191b04773b53994a752f) contentStartColumn(10) contentStartLine(284) org.kframework.attributes.Location(Location(284,10,284,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLT && len(kapp0.List) == 0 { // `LT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu516, t := c5.(*m.Map); t && varXu516.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu517 := c6 // lhs KVariable _517
						// REQUIRES
						eval685, err685 := evalIsIeleName( // isIeleName(_517)
							varXu517,
							config, -1)
						if err685 != nil {
							return m.NoResult, err685
						}
						if /* rhs precomputed isMap(_516) */ /* && */
						   m.IsTrue(eval685) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 702, "{| rule #dasmInstructionAux(`LT`(.KList),R,W,M,_516,_517)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`lt_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_516),isIeleName(_517)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4a96523e89e0a0148994e78e5d784bdf4ccf71d0488e191b04773b53994a752f) contentStartColumn(10) contentStartLine(284) org.kframework.attributes.Location(Location(284,10,284,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval686, err686 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err686 != nil {
								return m.NoResult, err686
							}
							eval687, err687 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err687 != nil {
								return m.NoResult, err687
							}
							eval688, err688 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err688 != nil {
								return m.NoResult, err688
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval686,
								&m.KApply{Label: m.LblLtXuIELEXhyphenCOMMON, List: []m.K{ // as-is lt_IELE-COMMON
								}},
								eval687,
								eval688,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #703
	// source: iele-binary.k @271
	// {| rule #dasmInstructionAux(`MUL`(.KList),R,W,M,_711,_712)=>`_=mul_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_712),isMap(_711)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(2dac59849daed04fc4f6bb2a51ab8784423f0bbefe0b4ec947b89524dd40fdef) contentStartColumn(10) contentStartLine(271) org.kframework.attributes.Location(Location(271,10,271,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMUL && len(kapp0.List) == 0 { // `MUL`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu711, t := c5.(*m.Map); t && varXu711.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu712 := c6 // lhs KVariable _712
						// REQUIRES
						eval689, err689 := evalIsIeleName( // isIeleName(_712)
							varXu712,
							config, -1)
						if err689 != nil {
							return m.NoResult, err689
						}
						if m.IsTrue(eval689) /* && */ /* rhs precomputed isMap(_711) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 703, "{| rule #dasmInstructionAux(`MUL`(.KList),R,W,M,_711,_712)=>`_=mul_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_712),isMap(_711)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2dac59849daed04fc4f6bb2a51ab8784423f0bbefe0b4ec947b89524dd40fdef) contentStartColumn(10) contentStartLine(271) org.kframework.attributes.Location(Location(271,10,271,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval690, err690 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err690 != nil {
								return m.NoResult, err690
							}
							eval691, err691 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err691 != nil {
								return m.NoResult, err691
							}
							eval692, err692 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err692 != nil {
								return m.NoResult, err692
							}
							return &m.KApply{Label: m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=mul_,__IELE-COMMON
								eval690,
								eval691,
								eval692,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #704
	// source: iele-binary.k @288
	// {| rule #dasmInstructionAux(`EQ`(.KList),R,W,M,_557,_558)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`eq_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_558),isInt(W)),isInt(R)),isMap(_557)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(e168732980d5dfed2afcede5c45f744ca630bc3343a29728d0e20641674d8ec3) contentStartColumn(10) contentStartLine(288) org.kframework.attributes.Location(Location(288,10,288,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblEQ && len(kapp0.List) == 0 { // `EQ`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu557, t := c5.(*m.Map); t && varXu557.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu558 := c6 // lhs KVariable _558
						// REQUIRES
						eval693, err693 := evalIsIeleName( // isIeleName(_558)
							varXu558,
							config, -1)
						if err693 != nil {
							return m.NoResult, err693
						}
						if m.IsTrue(eval693) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_557) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 704, "{| rule #dasmInstructionAux(`EQ`(.KList),R,W,M,_557,_558)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`eq_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_558),isInt(W)),isInt(R)),isMap(_557)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e168732980d5dfed2afcede5c45f744ca630bc3343a29728d0e20641674d8ec3) contentStartColumn(10) contentStartLine(288) org.kframework.attributes.Location(Location(288,10,288,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval694, err694 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err694 != nil {
								return m.NoResult, err694
							}
							eval695, err695 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err695 != nil {
								return m.NoResult, err695
							}
							eval696, err696 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err696 != nil {
								return m.NoResult, err696
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval694,
								&m.KApply{Label: m.LblEqXuIELEXhyphenCOMMON, List: []m.K{ // as-is eq_IELE-COMMON
								}},
								eval695,
								eval696,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #705
	// source: iele-binary.k @303
	// {| rule #dasmInstructionAux(`CALL`(LABEL,ARGS,RETS),R,W,M,F,_478)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int"))),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_478),isInt(LABEL)),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(1589f5884cf80b2ab22c2a3395f639937b15ed934193987e8c87e91084857c82) contentStartColumn(10) contentStartLine(303) org.kframework.attributes.Location(Location(303,10,303,261)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCALL && len(kapp0.List) == 3 { // `CALL`(LABEL,ARGS,RETS)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varXu478 := c6 // lhs KVariable _478
									// REQUIRES
									eval697, err697 := evalIsIeleName( // isIeleName(_478)
										varXu478,
										config, -1)
									if err697 != nil {
										return m.NoResult, err697
									}
									if m.IsTrue(eval697) /* && */ /* rhs precomputed isInt(LABEL) */  /* && */ /* rhs precomputed isInt(ARGS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(F) */  {
										// RHS
										traceRuleApply("FUNC", 705, "{| rule #dasmInstructionAux(`CALL`(LABEL,ARGS,RETS),R,W,M,F,_478)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),`_+Int_`(RETS,#token(\"1\",\"Int\"))),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"2\",\"Int\"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"4\",\"Int\"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"3\",\"Int\"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"1\",\"Int\"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_478),isInt(LABEL)),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1589f5884cf80b2ab22c2a3395f639937b15ed934193987e8c87e91084857c82) contentStartColumn(10) contentStartLine(303) org.kframework.attributes.Location(Location(303,10,303,261)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval699, err699 := evalXuXplusIntXu( // `_+Int_`(RETS,#token("1","Int"))
											varRETS,
											/* rhs KToken */ m.NewIntFromString("1"),
											config, -1)
										if err699 != nil {
											return m.NoResult, err699
										}
										eval698, err698 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int")))
											varR,
											varW,
											varM,
											/* rhs KToken */ m.NewIntFromString("0"),
											eval699,
											config, -1)
										if err698 != nil {
											return m.NoResult, err698
										}
										eval701, err701 := evalMapXcolonlookup( // `Map:lookup`(F,LABEL)
											varF,
											varLABEL,
											config, -1)
										if err701 != nil {
											return m.NoResult, err701
										}
										eval700, err700 := evalGetIeleName( // getIeleName(`Map:lookup`(F,LABEL))
											eval701,
											config, -1)
										if err700 != nil {
											return m.NoResult, err700
										}
										eval703, err703 := evalXuXplusIntXu( // `_+Int_`(#token("2","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("2"),
											varRETS,
											config, -1)
										if err703 != nil {
											return m.NoResult, err703
										}
										eval702, err702 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))
											varR,
											varW,
											varM,
											eval703,
											config, -1)
										if err702 != nil {
											return m.NoResult, err702
										}
										eval705, err705 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("4"),
											varRETS,
											config, -1)
										if err705 != nil {
											return m.NoResult, err705
										}
										eval704, err704 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS),ARGS)
											varR,
											varW,
											varM,
											eval705,
											varARGS,
											config, -1)
										if err704 != nil {
											return m.NoResult, err704
										}
										eval707, err707 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("3"),
											varRETS,
											config, -1)
										if err707 != nil {
											return m.NoResult, err707
										}
										eval706, err706 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS))
											varR,
											varW,
											varM,
											eval707,
											config, -1)
										if err706 != nil {
											return m.NoResult, err706
										}
										eval709, err709 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("1"),
											varRETS,
											config, -1)
										if err709 != nil {
											return m.NoResult, err709
										}
										eval708, err708 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))
											varR,
											varW,
											varM,
											eval709,
											config, -1)
										if err708 != nil {
											return m.NoResult, err708
										}
										return &m.KApply{Label: m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
											eval698,
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												eval700,
											}},
											eval702,
											eval704,
											eval706,
											eval708,
										}}, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #706
	// source: iele-binary.k @256
	// {| rule #dasmInstructionAux(`MOVE`(.KList),R,W,M,_713,_714)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_714),isMap(_713)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(7a6fa7e94ea7b601c9d3425701b10e76bd079f77a546cbb074f19966ab8544e7) contentStartColumn(10) contentStartLine(256) org.kframework.attributes.Location(Location(256,10,256,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMOVE && len(kapp0.List) == 0 { // `MOVE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu713, t := c5.(*m.Map); t && varXu713.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu714 := c6 // lhs KVariable _714
						// REQUIRES
						eval710, err710 := evalIsIeleName( // isIeleName(_714)
							varXu714,
							config, -1)
						if err710 != nil {
							return m.NoResult, err710
						}
						if m.IsTrue(eval710) /* && */ /* rhs precomputed isMap(_713) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 706, "{| rule #dasmInstructionAux(`MOVE`(.KList),R,W,M,_713,_714)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_714),isMap(_713)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7a6fa7e94ea7b601c9d3425701b10e76bd079f77a546cbb074f19966ab8544e7) contentStartColumn(10) contentStartLine(256) org.kframework.attributes.Location(Location(256,10,256,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval711, err711 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err711 != nil {
								return m.NoResult, err711
							}
							eval712, err712 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err712 != nil {
								return m.NoResult, err712
							}
							return &m.KApply{Label: m.LblXuXeqXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=__IELE-COMMON
								eval711,
								eval712,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #707
	// source: iele-binary.k @272
	// {| rule #dasmInstructionAux(`SUB`(.KList),R,W,M,_562,_563)=>`_=sub_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_563),isInt(W)),isInt(R)),isMap(_562)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(14384d0aecb671c5b946049aa33f58bba17733bd3a3915e59010ad6f37f40d5c) contentStartColumn(10) contentStartLine(272) org.kframework.attributes.Location(Location(272,10,272,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSUB && len(kapp0.List) == 0 { // `SUB`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu562, t := c5.(*m.Map); t && varXu562.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu563 := c6 // lhs KVariable _563
						// REQUIRES
						eval713, err713 := evalIsIeleName( // isIeleName(_563)
							varXu563,
							config, -1)
						if err713 != nil {
							return m.NoResult, err713
						}
						if m.IsTrue(eval713) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_562) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 707, "{| rule #dasmInstructionAux(`SUB`(.KList),R,W,M,_562,_563)=>`_=sub_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_563),isInt(W)),isInt(R)),isMap(_562)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(14384d0aecb671c5b946049aa33f58bba17733bd3a3915e59010ad6f37f40d5c) contentStartColumn(10) contentStartLine(272) org.kframework.attributes.Location(Location(272,10,272,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval714, err714 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err714 != nil {
								return m.NoResult, err714
							}
							eval715, err715 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err715 != nil {
								return m.NoResult, err715
							}
							eval716, err716 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err716 != nil {
								return m.NoResult, err716
							}
							return &m.KApply{Label: m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=sub_,__IELE-COMMON
								eval714,
								eval715,
								eval716,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #708
	// source: iele-binary.k @305
	// {| rule #dasmInstructionAux(`LOCALCALL`(LABEL,ARGS,RETS),R,W,M,F,_590)=>`_=call_(_)_IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS),`@__IELE-COMMON`(getIeleName(`Map:lookupOrDefault`(F,LABEL,LABEL))),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,RETS,ARGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isIeleName(_590)),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(0e0c6c654d0d80aba28b293cc0d43ffbd462d452e1916451f9b42caebdbe2f7b) contentStartColumn(10) contentStartLine(305) org.kframework.attributes.Location(Location(305,10,305,177)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOCALCALL && len(kapp0.List) == 3 { // `LOCALCALL`(LABEL,ARGS,RETS)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varXu590 := c6 // lhs KVariable _590
									// REQUIRES
									eval717, err717 := evalIsIeleName( // isIeleName(_590)
										varXu590,
										config, -1)
									if err717 != nil {
										return m.NoResult, err717
									}
									if /* rhs precomputed isInt(LABEL) */ /* && */
									   m.IsTrue(eval717) /* && */ /* rhs precomputed isInt(ARGS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(F) */  {
										// RHS
										traceRuleApply("FUNC", 708, "{| rule #dasmInstructionAux(`LOCALCALL`(LABEL,ARGS,RETS),R,W,M,F,_590)=>`_=call_(_)_IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),RETS),`@__IELE-COMMON`(getIeleName(`Map:lookupOrDefault`(F,LABEL,LABEL))),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,RETS,ARGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isIeleName(_590)),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e0c6c654d0d80aba28b293cc0d43ffbd462d452e1916451f9b42caebdbe2f7b) contentStartColumn(10) contentStartLine(305) org.kframework.attributes.Location(Location(305,10,305,177)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval718, err718 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS)
											varR,
											varW,
											varM,
											/* rhs KToken */ m.NewIntFromString("0"),
											varRETS,
											config, -1)
										if err718 != nil {
											return m.NoResult, err718
										}
										eval720, err720 := evalMapXcolonlookupOrDefault( // `Map:lookupOrDefault`(F,LABEL,LABEL)
											varF,
											varLABEL,
											varLABEL,
											config, -1)
										if err720 != nil {
											return m.NoResult, err720
										}
										eval719, err719 := evalGetIeleName( // getIeleName(`Map:lookupOrDefault`(F,LABEL,LABEL))
											eval720,
											config, -1)
										if err719 != nil {
											return m.NoResult, err719
										}
										eval721, err721 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,RETS,ARGS)
											varR,
											varW,
											varM,
											varRETS,
											varARGS,
											config, -1)
										if err721 != nil {
											return m.NoResult, err721
										}
										return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
											eval718,
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												eval719,
											}},
											eval721,
										}}, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #709
	// source: iele-binary.k @250
	// {| rule #dasmInstructionAux(`BENEFICIARY`(.KList),R,W,M,_465,_466)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.beneficiary","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_465),isInt(W)),isInt(R)),isIeleName(_466)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(659fce7d9384b719c1a312c2c046bd47a293ade92d1b3a60144437e036ecf27c) contentStartColumn(10) contentStartLine(250) org.kframework.attributes.Location(Location(250,10,250,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBENEFICIARY && len(kapp0.List) == 0 { // `BENEFICIARY`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu465, t := c5.(*m.Map); t && varXu465.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu466 := c6 // lhs KVariable _466
						// REQUIRES
						eval722, err722 := evalIsIeleName( // isIeleName(_466)
							varXu466,
							config, -1)
						if err722 != nil {
							return m.NoResult, err722
						}
						if /* rhs precomputed isMap(_465) && isInt(W) && isInt(R) */ /* && */
						   m.IsTrue(eval722) /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 709, "{| rule #dasmInstructionAux(`BENEFICIARY`(.KList),R,W,M,_465,_466)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.beneficiary\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_465),isInt(W)),isInt(R)),isIeleName(_466)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(659fce7d9384b719c1a312c2c046bd47a293ade92d1b3a60144437e036ecf27c) contentStartColumn(10) contentStartLine(250) org.kframework.attributes.Location(Location(250,10,250,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval723, err723 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err723 != nil {
								return m.NoResult, err723
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval723,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.beneficiary"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #710
	// source: iele-binary.k @295
	// {| rule #dasmInstructionAux(`MLOADN`(.KList),R,W,M,_598,_599)=>`_=load_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_599),isInt(W)),isMap(_598)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(175a12a781f12aa7d565d3b1d0855c78585854a13994af0b1ca360a1cbfddbb8) contentStartColumn(10) contentStartLine(295) org.kframework.attributes.Location(Location(295,10,295,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMLOADN && len(kapp0.List) == 0 { // `MLOADN`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu598, t := c5.(*m.Map); t && varXu598.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu599 := c6 // lhs KVariable _599
						// REQUIRES
						eval724, err724 := evalIsIeleName( // isIeleName(_599)
							varXu599,
							config, -1)
						if err724 != nil {
							return m.NoResult, err724
						}
						if m.IsTrue(eval724) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isMap(_598) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 710, "{| rule #dasmInstructionAux(`MLOADN`(.KList),R,W,M,_598,_599)=>`_=load_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_599),isInt(W)),isMap(_598)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(175a12a781f12aa7d565d3b1d0855c78585854a13994af0b1ca360a1cbfddbb8) contentStartColumn(10) contentStartLine(295) org.kframework.attributes.Location(Location(295,10,295,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval725, err725 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err725 != nil {
								return m.NoResult, err725
							}
							eval726, err726 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err726 != nil {
								return m.NoResult, err726
							}
							eval727, err727 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err727 != nil {
								return m.NoResult, err727
							}
							eval728, err728 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err728 != nil {
								return m.NoResult, err728
							}
							return &m.KApply{Label: m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=load_,_,__IELE-COMMON
								eval725,
								eval726,
								eval727,
								eval728,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #711
	// source: iele-binary.k @273
	// {| rule #dasmInstructionAux(`DIV`(.KList),R,W,M,_635,_636)=>`_=div_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_635),isInt(W)),isIeleName(_636)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(64f0617dd781273af6514e40ee71b4f2d7f9567c42fc52203ea2f86c1d33e336) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblDIV && len(kapp0.List) == 0 { // `DIV`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu635, t := c5.(*m.Map); t && varXu635.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu636 := c6 // lhs KVariable _636
						// REQUIRES
						eval729, err729 := evalIsIeleName( // isIeleName(_636)
							varXu636,
							config, -1)
						if err729 != nil {
							return m.NoResult, err729
						}
						if /* rhs precomputed isMap(_635) && isInt(W) */ /* && */
						   m.IsTrue(eval729) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 711, "{| rule #dasmInstructionAux(`DIV`(.KList),R,W,M,_635,_636)=>`_=div_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_635),isInt(W)),isIeleName(_636)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(64f0617dd781273af6514e40ee71b4f2d7f9567c42fc52203ea2f86c1d33e336) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval730, err730 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err730 != nil {
								return m.NoResult, err730
							}
							eval731, err731 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err731 != nil {
								return m.NoResult, err731
							}
							eval732, err732 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err732 != nil {
								return m.NoResult, err732
							}
							return &m.KApply{Label: m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=div_,__IELE-COMMON
								eval730,
								eval731,
								eval732,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #712
	// source: iele-binary.k @237
	// {| rule #dasmInstructionAux(`BRLABEL`(LABEL),_663,_664,_665,_666,_667)=>label(LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_666),isInt(LABEL)),isInt(_665)),isIeleName(_667)),isInt(_663)),isInt(_664)) ensures #token("true","Bool") [UNIQUE_ID(d32d0d990caca35041169d66cfb1c4bd1c7eb4ee7b968e1ce7cc1424e21cc38a) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBRLABEL && len(kapp0.List) == 1 { // `BRLABEL`(LABEL)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varXu666, t := c5.(*m.Map); t && varXu666.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varXu667 := c6 // lhs KVariable _667
							// REQUIRES
							eval733, err733 := evalIsIeleName( // isIeleName(_667)
								varXu667,
								config, -1)
							if err733 != nil {
								return m.NoResult, err733
							}
							if /* rhs precomputed isMap(_666) && isInt(LABEL) && isInt(_665) */ /* && */
							   m.IsTrue(eval733) /* && */ /* rhs precomputed isInt(_663) */  /* && */ /* rhs precomputed isInt(_664) */  {
								// RHS
								traceRuleApply("FUNC", 712, "{| rule #dasmInstructionAux(`BRLABEL`(LABEL),_663,_664,_665,_666,_667)=>label(LABEL) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_666),isInt(LABEL)),isInt(_665)),isIeleName(_667)),isInt(_663)),isInt(_664)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d32d0d990caca35041169d66cfb1c4bd1c7eb4ee7b968e1ce7cc1424e21cc38a) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								return &m.KApply{Label: m.LblLabel, List: []m.K{ // as-is label
									varLABEL,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #713
	// source: iele-binary.k @234
	// {| rule #dasmInstructionAux(`LOADNEG`(_583,I),R,W,M,_584,_585)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`_-Int__INT`(#token("0","Int"),I)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_584),isIeleName(_585)),isInt(I)),isInt(W)),isInt(R)),isInt(M)),isInt(_583)) ensures #token("true","Bool") [UNIQUE_ID(0767aa5043cac8101591968bfa874f3032ccab465560a945ce5ecfc18660e260) contentStartColumn(10) contentStartLine(234) org.kframework.attributes.Location(Location(234,10,234,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOADNEG && len(kapp0.List) == 2 { // `LOADNEG`(_583,I)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varI, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varXu584, t := c5.(*m.Map); t && varXu584.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varXu585 := c6 // lhs KVariable _585
								// REQUIRES
								eval734, err734 := evalIsIeleName( // isIeleName(_585)
									varXu585,
									config, -1)
								if err734 != nil {
									return m.NoResult, err734
								}
								if /* rhs precomputed isMap(_584) */ /* && */
								   m.IsTrue(eval734) /* && */ /* rhs precomputed isInt(I) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isInt(_583) */  {
									// RHS
									traceRuleApply("FUNC", 713, "{| rule #dasmInstructionAux(`LOADNEG`(_583,I),R,W,M,_584,_585)=>`_=__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`_-Int__INT`(#token(\"0\",\"Int\"),I)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_584),isIeleName(_585)),isInt(I)),isInt(W)),isInt(R)),isInt(M)),isInt(_583)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0767aa5043cac8101591968bfa874f3032ccab465560a945ce5ecfc18660e260) contentStartColumn(10) contentStartLine(234) org.kframework.attributes.Location(Location(234,10,234,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval735, err735 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err735 != nil {
										return m.NoResult, err735
									}
									eval736, err736 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(#token("0","Int"),I)
										/* rhs KToken */ m.NewIntFromString("0"),
										varI,
										config, -1)
									if err736 != nil {
										return m.NoResult, err736
									}
									return &m.KApply{Label: m.LblXuXeqXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=__IELE-COMMON
										eval735,
										eval736,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #714
	// source: iele-binary.k @301
	// {| rule #dasmInstructionAux(`STATICCALL`(LABEL,ARGS,RETS),R,W,M,F,_547)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int"))),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isIeleName(_547)),isInt(M)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(1eacc1c90a5f946d1f0df33258b881a7e4e1e3f56822478c91bd0e07d6f11616) contentStartColumn(10) contentStartLine(301) org.kframework.attributes.Location(Location(301,10,301,242)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSTATICCALL && len(kapp0.List) == 3 { // `STATICCALL`(LABEL,ARGS,RETS)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varXu547 := c6 // lhs KVariable _547
									// REQUIRES
									eval737, err737 := evalIsIeleName( // isIeleName(_547)
										varXu547,
										config, -1)
									if err737 != nil {
										return m.NoResult, err737
									}
									if /* rhs precomputed isInt(LABEL) && isInt(ARGS) && isInt(W) && isInt(RETS) && isInt(R) */ /* && */
									   m.IsTrue(eval737) /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(F) */  {
										// RHS
										traceRuleApply("FUNC", 714, "{| rule #dasmInstructionAux(`STATICCALL`(LABEL,ARGS,RETS),R,W,M,F,_547)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),`_+Int_`(RETS,#token(\"1\",\"Int\"))),`@__IELE-COMMON`(getIeleName(`Map:lookup`(F,LABEL))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"2\",\"Int\"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"3\",\"Int\"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"1\",\"Int\"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LABEL),isInt(ARGS)),isInt(W)),isInt(RETS)),isInt(R)),isIeleName(_547)),isInt(M)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1eacc1c90a5f946d1f0df33258b881a7e4e1e3f56822478c91bd0e07d6f11616) contentStartColumn(10) contentStartLine(301) org.kframework.attributes.Location(Location(301,10,301,242)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval739, err739 := evalXuXplusIntXu( // `_+Int_`(RETS,#token("1","Int"))
											varRETS,
											/* rhs KToken */ m.NewIntFromString("1"),
											config, -1)
										if err739 != nil {
											return m.NoResult, err739
										}
										eval738, err738 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int")))
											varR,
											varW,
											varM,
											/* rhs KToken */ m.NewIntFromString("0"),
											eval739,
											config, -1)
										if err738 != nil {
											return m.NoResult, err738
										}
										eval741, err741 := evalMapXcolonlookup( // `Map:lookup`(F,LABEL)
											varF,
											varLABEL,
											config, -1)
										if err741 != nil {
											return m.NoResult, err741
										}
										eval740, err740 := evalGetIeleName( // getIeleName(`Map:lookup`(F,LABEL))
											eval741,
											config, -1)
										if err740 != nil {
											return m.NoResult, err740
										}
										eval743, err743 := evalXuXplusIntXu( // `_+Int_`(#token("2","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("2"),
											varRETS,
											config, -1)
										if err743 != nil {
											return m.NoResult, err743
										}
										eval742, err742 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))
											varR,
											varW,
											varM,
											eval743,
											config, -1)
										if err742 != nil {
											return m.NoResult, err742
										}
										eval745, err745 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("3"),
											varRETS,
											config, -1)
										if err745 != nil {
											return m.NoResult, err745
										}
										eval744, err744 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS),ARGS)
											varR,
											varW,
											varM,
											eval745,
											varARGS,
											config, -1)
										if err744 != nil {
											return m.NoResult, err744
										}
										eval747, err747 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),RETS)
											/* rhs KToken */ m.NewIntFromString("1"),
											varRETS,
											config, -1)
										if err747 != nil {
											return m.NoResult, err747
										}
										eval746, err746 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))
											varR,
											varW,
											varM,
											eval747,
											config, -1)
										if err746 != nil {
											return m.NoResult, err746
										}
										return &m.KApply{Label: m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
											eval738,
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												eval740,
											}},
											eval742,
											eval744,
											eval746,
										}}, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #715
	// source: iele-binary.k @306
	// {| rule #dasmInstructionAux(`LOCALCALLDYN`(ARGS,RETS),R,W,M,F,_683)=>`_=call_(_)_IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,RETS),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS),ARGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isIeleName(_683)),isMap(F)) ensures #token("true","Bool") [UNIQUE_ID(533062f6979ce6411b3cc4bc61974b4073d7bcbf033af79a178e55bba774f6f9) contentStartColumn(10) contentStartLine(306) org.kframework.attributes.Location(Location(306,10,306,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOCALCALLDYN && len(kapp0.List) == 2 { // `LOCALCALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varXu683 := c6 // lhs KVariable _683
								// REQUIRES
								eval748, err748 := evalIsIeleName( // isIeleName(_683)
									varXu683,
									config, -1)
								if err748 != nil {
									return m.NoResult, err748
								}
								if /* rhs precomputed isInt(ARGS) && isInt(W) && isInt(RETS) && isInt(R) && isInt(M) */ /* && */
								   m.IsTrue(eval748) /* && */ /* rhs precomputed isMap(F) */  {
									// RHS
									traceRuleApply("FUNC", 715, "{| rule #dasmInstructionAux(`LOCALCALLDYN`(ARGS,RETS),R,W,M,F,_683)=>`_=call_(_)_IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),RETS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,RETS),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"1\",\"Int\"),RETS),ARGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isIeleName(_683)),isMap(F)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(533062f6979ce6411b3cc4bc61974b4073d7bcbf033af79a178e55bba774f6f9) contentStartColumn(10) contentStartLine(306) org.kframework.attributes.Location(Location(306,10,306,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval749, err749 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),RETS)
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										varRETS,
										config, -1)
									if err749 != nil {
										return m.NoResult, err749
									}
									eval750, err750 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,RETS)
										varR,
										varW,
										varM,
										varRETS,
										config, -1)
									if err750 != nil {
										return m.NoResult, err750
									}
									eval752, err752 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("1"),
										varRETS,
										config, -1)
									if err752 != nil {
										return m.NoResult, err752
									}
									eval751, err751 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS),ARGS)
										varR,
										varW,
										varM,
										eval752,
										varARGS,
										config, -1)
									if err751 != nil {
										return m.NoResult, err751
									}
									return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
										eval749,
										eval750,
										eval751,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #716
	// source: iele-binary.k @249
	// {| rule #dasmInstructionAux(`CODESIZE`(.KList),R,W,M,_594,_595)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.codesize","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_594),isInt(W)),isInt(R)),isInt(M)),isIeleName(_595)) ensures #token("true","Bool") [UNIQUE_ID(b24fc57f4bc15d879058c2185383ab97210ba0dfa82160fa284b4063cf9a1c3b) contentStartColumn(10) contentStartLine(249) org.kframework.attributes.Location(Location(249,10,249,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCODESIZE && len(kapp0.List) == 0 { // `CODESIZE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu594, t := c5.(*m.Map); t && varXu594.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu595 := c6 // lhs KVariable _595
						// REQUIRES
						eval753, err753 := evalIsIeleName( // isIeleName(_595)
							varXu595,
							config, -1)
						if err753 != nil {
							return m.NoResult, err753
						}
						if /* rhs precomputed isMap(_594) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval753) {
							// RHS
							traceRuleApply("FUNC", 716, "{| rule #dasmInstructionAux(`CODESIZE`(.KList),R,W,M,_594,_595)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.codesize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_594),isInt(W)),isInt(R)),isInt(M)),isIeleName(_595)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b24fc57f4bc15d879058c2185383ab97210ba0dfa82160fa284b4063cf9a1c3b) contentStartColumn(10) contentStartLine(249) org.kframework.attributes.Location(Location(249,10,249,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval754, err754 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err754 != nil {
								return m.NoResult, err754
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval754,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.codesize"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #717
	// source: iele-binary.k @289
	// {| rule #dasmInstructionAux(`NE`(.KList),R,W,M,_645,_646)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`ne_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_645),isInt(W)),isInt(R)),isIeleName(_646)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(280f897ab0a22bff966f977080ec7729431ea25f9e4266b9ea74007d5eb985e5) contentStartColumn(10) contentStartLine(289) org.kframework.attributes.Location(Location(289,10,289,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblNE && len(kapp0.List) == 0 { // `NE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu645, t := c5.(*m.Map); t && varXu645.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu646 := c6 // lhs KVariable _646
						// REQUIRES
						eval755, err755 := evalIsIeleName( // isIeleName(_646)
							varXu646,
							config, -1)
						if err755 != nil {
							return m.NoResult, err755
						}
						if /* rhs precomputed isMap(_645) && isInt(W) && isInt(R) */ /* && */
						   m.IsTrue(eval755) /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 717, "{| rule #dasmInstructionAux(`NE`(.KList),R,W,M,_645,_646)=>`_=cmp__,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`ne_IELE-COMMON`(.KList),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_645),isInt(W)),isInt(R)),isIeleName(_646)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(280f897ab0a22bff966f977080ec7729431ea25f9e4266b9ea74007d5eb985e5) contentStartColumn(10) contentStartLine(289) org.kframework.attributes.Location(Location(289,10,289,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval756, err756 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err756 != nil {
								return m.NoResult, err756
							}
							eval757, err757 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err757 != nil {
								return m.NoResult, err757
							}
							eval758, err758 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err758 != nil {
								return m.NoResult, err758
							}
							return &m.KApply{Label: m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=cmp__,__IELE-COMMON
								eval756,
								&m.KApply{Label: m.LblNeXuIELEXhyphenCOMMON, List: []m.K{ // as-is ne_IELE-COMMON
								}},
								eval757,
								eval758,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #718
	// source: iele-binary.k @304
	// {| rule #dasmInstructionAux(`CALLDYN`(ARGS,RETS),R,W,M,F,_573)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int"))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("5","Int"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)),isIeleName(_573)) ensures #token("true","Bool") [UNIQUE_ID(9f6651a0eb3fcde0073ca63ca6565e1832ea330e181d7edceefca1716c0f4087) contentStartColumn(10) contentStartLine(304) org.kframework.attributes.Location(Location(304,10,304,254)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCALLDYN && len(kapp0.List) == 2 { // `CALLDYN`(ARGS,RETS)
		if varARGS, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varRETS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varF, t := c5.(*m.Map); t && varF.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varXu573 := c6 // lhs KVariable _573
								// REQUIRES
								eval759, err759 := evalIsIeleName( // isIeleName(_573)
									varXu573,
									config, -1)
								if err759 != nil {
									return m.NoResult, err759
								}
								if /* rhs precomputed isInt(ARGS) && isInt(W) && isInt(RETS) && isInt(R) && isInt(M) && isMap(F) */ /* && */
								   m.IsTrue(eval759) {
									// RHS
									traceRuleApply("FUNC", 718, "{| rule #dasmInstructionAux(`CALLDYN`(ARGS,RETS),R,W,M,F,_573)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(`%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\"),`_+Int_`(RETS,#token(\"1\",\"Int\"))),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"1\",\"Int\"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"3\",\"Int\"),RETS)),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"5\",\"Int\"),RETS),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"4\",\"Int\"),RETS)),`%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token(\"2\",\"Int\"),RETS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ARGS),isInt(W)),isInt(RETS)),isInt(R)),isInt(M)),isMap(F)),isIeleName(_573)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9f6651a0eb3fcde0073ca63ca6565e1832ea330e181d7edceefca1716c0f4087) contentStartColumn(10) contentStartLine(304) org.kframework.attributes.Location(Location(304,10,304,254)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval761, err761 := evalXuXplusIntXu( // `_+Int_`(RETS,#token("1","Int"))
										varRETS,
										/* rhs KToken */ m.NewIntFromString("1"),
										config, -1)
									if err761 != nil {
										return m.NoResult, err761
									}
									eval760, err760 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"),`_+Int_`(RETS,#token("1","Int")))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										eval761,
										config, -1)
									if err760 != nil {
										return m.NoResult, err760
									}
									eval763, err763 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("1"),
										varRETS,
										config, -1)
									if err763 != nil {
										return m.NoResult, err763
									}
									eval762, err762 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("1","Int"),RETS))
										varR,
										varW,
										varM,
										eval763,
										config, -1)
									if err762 != nil {
										return m.NoResult, err762
									}
									eval765, err765 := evalXuXplusIntXu( // `_+Int_`(#token("3","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("3"),
										varRETS,
										config, -1)
									if err765 != nil {
										return m.NoResult, err765
									}
									eval764, err764 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("3","Int"),RETS))
										varR,
										varW,
										varM,
										eval765,
										config, -1)
									if err764 != nil {
										return m.NoResult, err764
									}
									eval767, err767 := evalXuXplusIntXu( // `_+Int_`(#token("5","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("5"),
										varRETS,
										config, -1)
									if err767 != nil {
										return m.NoResult, err767
									}
									eval766, err766 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("5","Int"),RETS),ARGS)
										varR,
										varW,
										varM,
										eval767,
										varARGS,
										config, -1)
									if err766 != nil {
										return m.NoResult, err766
									}
									eval769, err769 := evalXuXplusIntXu( // `_+Int_`(#token("4","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("4"),
										varRETS,
										config, -1)
									if err769 != nil {
										return m.NoResult, err769
									}
									eval768, err768 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("4","Int"),RETS))
										varR,
										varW,
										varM,
										eval769,
										config, -1)
									if err768 != nil {
										return m.NoResult, err768
									}
									eval771, err771 := evalXuXplusIntXu( // `_+Int_`(#token("2","Int"),RETS)
										/* rhs KToken */ m.NewIntFromString("2"),
										varRETS,
										config, -1)
									if err771 != nil {
										return m.NoResult, err771
									}
									eval770, err770 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,`_+Int_`(#token("2","Int"),RETS))
										varR,
										varW,
										varM,
										eval771,
										config, -1)
									if err770 != nil {
										return m.NoResult, err770
									}
									return &m.KApply{Label: m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
										eval760,
										eval762,
										eval764,
										eval766,
										eval768,
										eval770,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #719
	// source: iele-binary.k @267
	// {| rule #dasmInstructionAux(`BLOCKHASH`(.KList),R,W,M,_531,_532)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.blockhash","IeleName")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`.List{"operandList"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_532),isMap(_531)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(6d3f0b17e73716057fee563ffdf175cbc1d6305c79105430c2ee53ae2111955f) contentStartColumn(10) contentStartLine(267) org.kframework.attributes.Location(Location(267,10,267,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBLOCKHASH && len(kapp0.List) == 0 { // `BLOCKHASH`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu531, t := c5.(*m.Map); t && varXu531.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu532 := c6 // lhs KVariable _532
						// REQUIRES
						eval772, err772 := evalIsIeleName( // isIeleName(_532)
							varXu532,
							config, -1)
						if err772 != nil {
							return m.NoResult, err772
						}
						if m.IsTrue(eval772) /* && */ /* rhs precomputed isMap(_531) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 719, "{| rule #dasmInstructionAux(`BLOCKHASH`(.KList),R,W,M,_531,_532)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.blockhash\",\"IeleName\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_532),isMap(_531)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6d3f0b17e73716057fee563ffdf175cbc1d6305c79105430c2ee53ae2111955f) contentStartColumn(10) contentStartLine(267) org.kframework.attributes.Location(Location(267,10,267,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval773, err773 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err773 != nil {
								return m.NoResult, err773
							}
							eval774, err774 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err774 != nil {
								return m.NoResult, err774
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval773,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.blockhash"},
								}},
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval774,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #720
	// source: iele-binary.k @268
	// {| rule #dasmInstructionAux(`BALANCE`(.KList),R,W,M,_628,_629)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`.List{"operandList"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_628),isInt(W)),isInt(R)),isIeleName(_629)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(5e770a5740b955ba6e43efba86314fe0773f403ca80930848d54bef737089964) contentStartColumn(10) contentStartLine(268) org.kframework.attributes.Location(Location(268,10,268,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblBALANCE && len(kapp0.List) == 0 { // `BALANCE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu628, t := c5.(*m.Map); t && varXu628.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu629 := c6 // lhs KVariable _629
						// REQUIRES
						eval775, err775 := evalIsIeleName( // isIeleName(_629)
							varXu629,
							config, -1)
						if err775 != nil {
							return m.NoResult, err775
						}
						if /* rhs precomputed isMap(_628) && isInt(W) && isInt(R) */ /* && */
						   m.IsTrue(eval775) /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 720, "{| rule #dasmInstructionAux(`BALANCE`(.KList),R,W,M,_628,_629)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),operandList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_628),isInt(W)),isInt(R)),isIeleName(_629)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5e770a5740b955ba6e43efba86314fe0773f403ca80930848d54bef737089964) contentStartColumn(10) contentStartLine(268) org.kframework.attributes.Location(Location(268,10,268,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval776, err776 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err776 != nil {
								return m.NoResult, err776
							}
							eval777, err777 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err777 != nil {
								return m.NoResult, err777
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval776,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.balance"},
								}},
								&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
									eval777,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #721
	// source: iele-binary.k @253
	// {| rule #dasmInstructionAux(`DIFFICULTY`(.KList),R,W,M,_484,_485)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.difficulty","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_484),isIeleName(_485)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(a3bf0264f18aab6f2bad6d76eaca551723495c84cbe1b1f3aae71477c70e2c7d) contentStartColumn(10) contentStartLine(253) org.kframework.attributes.Location(Location(253,10,253,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblDIFFICULTY && len(kapp0.List) == 0 { // `DIFFICULTY`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu484, t := c5.(*m.Map); t && varXu484.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu485 := c6 // lhs KVariable _485
						// REQUIRES
						eval778, err778 := evalIsIeleName( // isIeleName(_485)
							varXu485,
							config, -1)
						if err778 != nil {
							return m.NoResult, err778
						}
						if /* rhs precomputed isMap(_484) */ /* && */
						   m.IsTrue(eval778) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 721, "{| rule #dasmInstructionAux(`DIFFICULTY`(.KList),R,W,M,_484,_485)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.difficulty\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_484),isIeleName(_485)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a3bf0264f18aab6f2bad6d76eaca551723495c84cbe1b1f3aae71477c70e2c7d) contentStartColumn(10) contentStartLine(253) org.kframework.attributes.Location(Location(253,10,253,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval779, err779 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err779 != nil {
								return m.NoResult, err779
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval779,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.difficulty"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #722
	// source: iele-binary.k @258
	// {| rule #dasmInstructionAux(`NOT`(.KList),R,W,M,_528,_529)=>`_=not__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_528),isIeleName(_529)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(544eb44acb58b9e7856481d1de1760f9951a8d8f521d8cc04d707918b3589ac0) contentStartColumn(10) contentStartLine(258) org.kframework.attributes.Location(Location(258,10,258,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblNOT && len(kapp0.List) == 0 { // `NOT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu528, t := c5.(*m.Map); t && varXu528.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu529 := c6 // lhs KVariable _529
						// REQUIRES
						eval780, err780 := evalIsIeleName( // isIeleName(_529)
							varXu529,
							config, -1)
						if err780 != nil {
							return m.NoResult, err780
						}
						if /* rhs precomputed isMap(_528) */ /* && */
						   m.IsTrue(eval780) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 722, "{| rule #dasmInstructionAux(`NOT`(.KList),R,W,M,_528,_529)=>`_=not__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_528),isIeleName(_529)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(544eb44acb58b9e7856481d1de1760f9951a8d8f521d8cc04d707918b3589ac0) contentStartColumn(10) contentStartLine(258) org.kframework.attributes.Location(Location(258,10,258,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval781, err781 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err781 != nil {
								return m.NoResult, err781
							}
							eval782, err782 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err782 != nil {
								return m.NoResult, err782
							}
							return &m.KApply{Label: m.LblXuXeqnotXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=not__IELE-COMMON
								eval781,
								eval782,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #723
	// source: iele-binary.k @247
	// {| rule #dasmInstructionAux(`ORIGIN`(.KList),R,W,M,_600,_601)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.origin","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_601),isInt(W)),isInt(R)),isInt(M)),isMap(_600)) ensures #token("true","Bool") [UNIQUE_ID(262859f5722eae37dab119b6b1003bd843e868f4fe8c022b68e79a07de11db81) contentStartColumn(10) contentStartLine(247) org.kframework.attributes.Location(Location(247,10,247,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblORIGIN && len(kapp0.List) == 0 { // `ORIGIN`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu600, t := c5.(*m.Map); t && varXu600.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu601 := c6 // lhs KVariable _601
						// REQUIRES
						eval783, err783 := evalIsIeleName( // isIeleName(_601)
							varXu601,
							config, -1)
						if err783 != nil {
							return m.NoResult, err783
						}
						if m.IsTrue(eval783) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_600) */  {
							// RHS
							traceRuleApply("FUNC", 723, "{| rule #dasmInstructionAux(`ORIGIN`(.KList),R,W,M,_600,_601)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.origin\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_601),isInt(W)),isInt(R)),isInt(M)),isMap(_600)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(262859f5722eae37dab119b6b1003bd843e868f4fe8c022b68e79a07de11db81) contentStartColumn(10) contentStartLine(247) org.kframework.attributes.Location(Location(247,10,247,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval784, err784 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err784 != nil {
								return m.NoResult, err784
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval784,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.origin"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #724
	// source: iele-binary.k @245
	// {| rule #dasmInstructionAux(`GAS`(.KList),R,W,M,_490,_491)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gas","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_490),isIeleName(_491)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(497cdfe9ffa46be70fe012990eca36eecd684154607d051b7fb5bf18d48d96c2) contentStartColumn(10) contentStartLine(245) org.kframework.attributes.Location(Location(245,10,245,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGAS && len(kapp0.List) == 0 { // `GAS`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu490, t := c5.(*m.Map); t && varXu490.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu491 := c6 // lhs KVariable _491
						// REQUIRES
						eval785, err785 := evalIsIeleName( // isIeleName(_491)
							varXu491,
							config, -1)
						if err785 != nil {
							return m.NoResult, err785
						}
						if /* rhs precomputed isMap(_490) */ /* && */
						   m.IsTrue(eval785) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 724, "{| rule #dasmInstructionAux(`GAS`(.KList),R,W,M,_490,_491)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.gas\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_490),isIeleName(_491)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(497cdfe9ffa46be70fe012990eca36eecd684154607d051b7fb5bf18d48d96c2) contentStartColumn(10) contentStartLine(245) org.kframework.attributes.Location(Location(245,10,245,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval786, err786 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err786 != nil {
								return m.NoResult, err786
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval786,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gas"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #725
	// source: iele-binary.k @254
	// {| rule #dasmInstructionAux(`MSIZE`(.KList),R,W,M,_467,_468)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.msize","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isIeleName(_468)),isInt(R)),isInt(M)),isMap(_467)) ensures #token("true","Bool") [UNIQUE_ID(08a4a3cdcb57a70ba585eb56dfc4ba22cd9d4e341eb657b70894d4190c823a47) contentStartColumn(10) contentStartLine(254) org.kframework.attributes.Location(Location(254,10,254,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMSIZE && len(kapp0.List) == 0 { // `MSIZE`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu467, t := c5.(*m.Map); t && varXu467.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu468 := c6 // lhs KVariable _468
						// REQUIRES
						eval787, err787 := evalIsIeleName( // isIeleName(_468)
							varXu468,
							config, -1)
						if err787 != nil {
							return m.NoResult, err787
						}
						if /* rhs precomputed isInt(W) */ /* && */
						   m.IsTrue(eval787) /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  /* && */ /* rhs precomputed isMap(_467) */  {
							// RHS
							traceRuleApply("FUNC", 725, "{| rule #dasmInstructionAux(`MSIZE`(.KList),R,W,M,_467,_468)=>`_=call_(_)_IELE-COMMON`(lvalueList(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`.List{\"lvalueList\"}`(.KList)),`@__IELE-COMMON`(#token(\"iele.msize\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isIeleName(_468)),isInt(R)),isInt(M)),isMap(_467)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(08a4a3cdcb57a70ba585eb56dfc4ba22cd9d4e341eb657b70894d4190c823a47) contentStartColumn(10) contentStartLine(254) org.kframework.attributes.Location(Location(254,10,254,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval788, err788 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err788 != nil {
								return m.NoResult, err788
							}
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
									eval788,
									&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
									}},
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.msize"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #726
	// source: iele-binary.k @236
	// {| rule #dasmInstructionAux(`INVALID`(.KList),R,W,M,_674,_675)=>`_=call_(_)_IELE-COMMON`(`.List{"lvalueList"}`(.KList),`@__IELE-COMMON`(#token("iele.invalid","IeleName")),`.List{"operandList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_674),isInt(W)),isInt(R)),isInt(M)),isIeleName(_675)) ensures #token("true","Bool") [UNIQUE_ID(b4147f5bf84e40fdea393a6f49c64e16c2a8de5af856f385d6497462ff26ab90) contentStartColumn(10) contentStartLine(236) org.kframework.attributes.Location(Location(236,10,236,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblINVALID && len(kapp0.List) == 0 { // `INVALID`(.KList)
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu674, t := c5.(*m.Map); t && varXu674.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu675 := c6 // lhs KVariable _675
						// REQUIRES
						eval789, err789 := evalIsIeleName( // isIeleName(_675)
							varXu675,
							config, -1)
						if err789 != nil {
							return m.NoResult, err789
						}
						if /* rhs precomputed isMap(_674) && isInt(W) && isInt(R) && isInt(M) */ /* && */
						   m.IsTrue(eval789) {
							// RHS
							traceRuleApply("FUNC", 726, "{| rule #dasmInstructionAux(`INVALID`(.KList),R,W,M,_674,_675)=>`_=call_(_)_IELE-COMMON`(`.List{\"lvalueList\"}`(.KList),`@__IELE-COMMON`(#token(\"iele.invalid\",\"IeleName\")),`.List{\"operandList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_674),isInt(W)),isInt(R)),isInt(M)),isIeleName(_675)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b4147f5bf84e40fdea393a6f49c64e16c2a8de5af856f385d6497462ff26ab90) contentStartColumn(10) contentStartLine(236) org.kframework.attributes.Location(Location(236,10,236,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
								&m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
								}},
								&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
									/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.invalid"},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #727
	// source: iele-binary.k @309
	// {| rule #dasmInstructionAux(`CREATE`(LABEL,ARGS),R,W,M,_504,NAME)=>`_,_=create_(_)send__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`_+.+IeleName__IELE-BINARY`(NAME,`String2IeleName`(`Int2String`(LABEL))),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInt(LABEL)),isInt(ARGS)),isInt(W)),isInt(R)),isMap(_504)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(d6de11455593a48e11d81a60e47ec51aa921f5d909dd463913d26b125075bdae) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,207)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblCREATE && len(kapp0.List) == 2 { // `CREATE`(LABEL,ARGS)
		if varLABEL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varARGS, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varXu504, t := c5.(*m.Map); t && varXu504.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
								varNAME := c6 // lhs KVariable NAME
								// REQUIRES
								eval790, err790 := evalIsIeleName( // isIeleName(NAME)
									varNAME,
									config, -1)
								if err790 != nil {
									return m.NoResult, err790
								}
								if m.IsTrue(eval790) /* && */ /* rhs precomputed isInt(LABEL) */  /* && */ /* rhs precomputed isInt(ARGS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_504) */  /* && */ /* rhs precomputed isInt(M) */  {
									// RHS
									traceRuleApply("FUNC", 727, "{| rule #dasmInstructionAux(`CREATE`(LABEL,ARGS),R,W,M,_504,NAME)=>`_,_=create_(_)send__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`_+.+IeleName__IELE-BINARY`(NAME,`String2IeleName`(`Int2String`(LABEL))),`%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"),ARGS),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInt(LABEL)),isInt(ARGS)),isInt(W)),isInt(R)),isMap(_504)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6de11455593a48e11d81a60e47ec51aa921f5d909dd463913d26b125075bdae) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,207)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval791, err791 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err791 != nil {
										return m.NoResult, err791
									}
									eval792, err792 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("1"),
										config, -1)
									if err792 != nil {
										return m.NoResult, err792
									}
									eval795, err795 := evalInt2String( // `Int2String`(LABEL)
										varLABEL,
										config, -1)
									if err795 != nil {
										return m.NoResult, err795
									}
									eval794, err794 := evalString2IeleName( // `String2IeleName`(`Int2String`(LABEL))
										eval795,
										config, -1)
									if err794 != nil {
										return m.NoResult, err794
									}
									eval793, err793 := evalXuXplusXdotXplusIeleNameXuXuIELEXhyphenBINARY( // `_+.+IeleName__IELE-BINARY`(NAME,`String2IeleName`(`Int2String`(LABEL)))
										varNAME,
										eval794,
										config, -1)
									if err793 != nil {
										return m.NoResult, err793
									}
									eval796, err796 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"),ARGS)
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("3"),
										varARGS,
										config, -1)
									if err796 != nil {
										return m.NoResult, err796
									}
									eval797, err797 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
										varR,
										varW,
										varM,
										/* rhs KToken */ m.NewIntFromString("2"),
										config, -1)
									if err797 != nil {
										return m.NoResult, err797
									}
									return &m.KApply{Label: m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _,_=create_(_)send__IELE-COMMON
										eval791,
										eval792,
										eval793,
										eval796,
										eval797,
									}}, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #728
	// source: iele-binary.k @279
	// {| rule #dasmInstructionAux(`AND`(.KList),R,W,M,_685,_686)=>`_=and_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_686),isMap(_685)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(93c5e78a5f110c774e371ccc3596d3d8e807962aae21ebabc60e023b3d11e2a7) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,279,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblAND && len(kapp0.List) == 0 { // `AND`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu685, t := c5.(*m.Map); t && varXu685.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu686 := c6 // lhs KVariable _686
						// REQUIRES
						eval798, err798 := evalIsIeleName( // isIeleName(_686)
							varXu686,
							config, -1)
						if err798 != nil {
							return m.NoResult, err798
						}
						if m.IsTrue(eval798) /* && */ /* rhs precomputed isMap(_685) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 728, "{| rule #dasmInstructionAux(`AND`(.KList),R,W,M,_685,_686)=>`_=and_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_686),isMap(_685)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(93c5e78a5f110c774e371ccc3596d3d8e807962aae21ebabc60e023b3d11e2a7) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,279,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval799, err799 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err799 != nil {
								return m.NoResult, err799
							}
							eval800, err800 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err800 != nil {
								return m.NoResult, err800
							}
							eval801, err801 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err801 != nil {
								return m.NoResult, err801
							}
							return &m.KApply{Label: m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=and_,__IELE-COMMON
								eval799,
								eval800,
								eval801,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #729
	// source: iele-binary.k @270
	// {| rule #dasmInstructionAux(`ADD`(.KList),R,W,M,_476,_477)=>`_=add_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_476),isIeleName(_477)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(c18690023b891ee636fc5bbef504bf024104a3f8dc5f55567f4c6c73625c76b3) contentStartColumn(10) contentStartLine(270) org.kframework.attributes.Location(Location(270,10,270,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblADD && len(kapp0.List) == 0 { // `ADD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu476, t := c5.(*m.Map); t && varXu476.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu477 := c6 // lhs KVariable _477
						// REQUIRES
						eval802, err802 := evalIsIeleName( // isIeleName(_477)
							varXu477,
							config, -1)
						if err802 != nil {
							return m.NoResult, err802
						}
						if /* rhs precomputed isMap(_476) */ /* && */
						   m.IsTrue(eval802) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 729, "{| rule #dasmInstructionAux(`ADD`(.KList),R,W,M,_476,_477)=>`_=add_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_476),isIeleName(_477)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c18690023b891ee636fc5bbef504bf024104a3f8dc5f55567f4c6c73625c76b3) contentStartColumn(10) contentStartLine(270) org.kframework.attributes.Location(Location(270,10,270,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval803, err803 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err803 != nil {
								return m.NoResult, err803
							}
							eval804, err804 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err804 != nil {
								return m.NoResult, err804
							}
							eval805, err805 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err805 != nil {
								return m.NoResult, err805
							}
							return &m.KApply{Label: m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=add_,__IELE-COMMON
								eval803,
								eval804,
								eval805,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #730
	// source: iele-binary.k @274
	// {| rule #dasmInstructionAux(`MOD`(.KList),R,W,M,_591,_592)=>`_=mod_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_591),isIeleName(_592)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(1a95aa8c226351f10a241a6efc2a8bd8e2c42dfe90efa15cac72f6ca10f25f5b) contentStartColumn(10) contentStartLine(274) org.kframework.attributes.Location(Location(274,10,274,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMOD && len(kapp0.List) == 0 { // `MOD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu591, t := c5.(*m.Map); t && varXu591.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu592 := c6 // lhs KVariable _592
						// REQUIRES
						eval806, err806 := evalIsIeleName( // isIeleName(_592)
							varXu592,
							config, -1)
						if err806 != nil {
							return m.NoResult, err806
						}
						if /* rhs precomputed isMap(_591) */ /* && */
						   m.IsTrue(eval806) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 730, "{| rule #dasmInstructionAux(`MOD`(.KList),R,W,M,_591,_592)=>`_=mod_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_591),isIeleName(_592)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a95aa8c226351f10a241a6efc2a8bd8e2c42dfe90efa15cac72f6ca10f25f5b) contentStartColumn(10) contentStartLine(274) org.kframework.attributes.Location(Location(274,10,274,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval807, err807 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err807 != nil {
								return m.NoResult, err807
							}
							eval808, err808 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err808 != nil {
								return m.NoResult, err808
							}
							eval809, err809 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err809 != nil {
								return m.NoResult, err809
							}
							return &m.KApply{Label: m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=mod_,__IELE-COMMON
								eval807,
								eval808,
								eval809,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #731
	// source: iele-binary.k @293
	// {| rule #dasmInstructionAux(`MULMOD`(.KList),R,W,M,_473,_474)=>`_=mulmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_473),isIeleName(_474)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(57ebd8d73d54ffa39c53f718da3af7761b7f609018be2d57d159a778043a1221) contentStartColumn(10) contentStartLine(293) org.kframework.attributes.Location(Location(293,10,293,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblMULMOD && len(kapp0.List) == 0 { // `MULMOD`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu473, t := c5.(*m.Map); t && varXu473.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu474 := c6 // lhs KVariable _474
						// REQUIRES
						eval810, err810 := evalIsIeleName( // isIeleName(_474)
							varXu474,
							config, -1)
						if err810 != nil {
							return m.NoResult, err810
						}
						if /* rhs precomputed isMap(_473) */ /* && */
						   m.IsTrue(eval810) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 731, "{| rule #dasmInstructionAux(`MULMOD`(.KList),R,W,M,_473,_474)=>`_=mulmod_,_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"3\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_473),isIeleName(_474)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57ebd8d73d54ffa39c53f718da3af7761b7f609018be2d57d159a778043a1221) contentStartColumn(10) contentStartLine(293) org.kframework.attributes.Location(Location(293,10,293,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval811, err811 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err811 != nil {
								return m.NoResult, err811
							}
							eval812, err812 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err812 != nil {
								return m.NoResult, err812
							}
							eval813, err813 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err813 != nil {
								return m.NoResult, err813
							}
							eval814, err814 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("3","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("3"),
								config, -1)
							if err814 != nil {
								return m.NoResult, err814
							}
							return &m.KApply{Label: m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=mulmod_,_,__IELE-COMMON
								eval811,
								eval812,
								eval813,
								eval814,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #732
	// source: iele-binary.k @282
	// {| rule #dasmInstructionAux(`SHIFT`(.KList),R,W,M,_633,_634)=>`_=shift_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_633),isIeleName(_634)),isInt(W)),isInt(R)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(edda8f950599bbbd3fb7d72dca306b7a1ead91422e18f03970a07b7851b92934) contentStartColumn(10) contentStartLine(282) org.kframework.attributes.Location(Location(282,10,282,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSHIFT && len(kapp0.List) == 0 { // `SHIFT`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu633, t := c5.(*m.Map); t && varXu633.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu634 := c6 // lhs KVariable _634
						// REQUIRES
						eval815, err815 := evalIsIeleName( // isIeleName(_634)
							varXu634,
							config, -1)
						if err815 != nil {
							return m.NoResult, err815
						}
						if /* rhs precomputed isMap(_633) */ /* && */
						   m.IsTrue(eval815) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 732, "{| rule #dasmInstructionAux(`SHIFT`(.KList),R,W,M,_633,_634)=>`_=shift_,__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"2\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_633),isIeleName(_634)),isInt(W)),isInt(R)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edda8f950599bbbd3fb7d72dca306b7a1ead91422e18f03970a07b7851b92934) contentStartColumn(10) contentStartLine(282) org.kframework.attributes.Location(Location(282,10,282,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval816, err816 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err816 != nil {
								return m.NoResult, err816
							}
							eval817, err817 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err817 != nil {
								return m.NoResult, err817
							}
							eval818, err818 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("2","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("2"),
								config, -1)
							if err818 != nil {
								return m.NoResult, err818
							}
							return &m.KApply{Label: m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=shift_,__IELE-COMMON
								eval816,
								eval817,
								eval818,
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #733
	// source: iele-binary.k @257
	// {| rule #dasmInstructionAux(`ISZERO`(.KList),R,W,M,_630,_631)=>`_=iszero__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_631),isInt(W)),isInt(R)),isMap(_630)),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(f954578bb4ff72f8eec2f9b9bfc74b31506dfd127d686b2814d69ffe67e310c8) contentStartColumn(10) contentStartLine(257) org.kframework.attributes.Location(Location(257,10,257,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblISZERO && len(kapp0.List) == 0 { // `ISZERO`(.KList)
		if varR, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varM, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu630, t := c5.(*m.Map); t && varXu630.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varXu631 := c6 // lhs KVariable _631
						// REQUIRES
						eval819, err819 := evalIsIeleName( // isIeleName(_631)
							varXu631,
							config, -1)
						if err819 != nil {
							return m.NoResult, err819
						}
						if m.IsTrue(eval819) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isMap(_630) */  /* && */ /* rhs precomputed isInt(M) */  {
							// RHS
							traceRuleApply("FUNC", 733, "{| rule #dasmInstructionAux(`ISZERO`(.KList),R,W,M,_630,_631)=>`_=iszero__IELE-COMMON`(`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"0\",\"Int\")),`%(_,_,_,_)_IELE-BINARY`(R,W,M,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_631),isInt(W)),isInt(R)),isMap(_630)),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f954578bb4ff72f8eec2f9b9bfc74b31506dfd127d686b2814d69ffe67e310c8) contentStartColumn(10) contentStartLine(257) org.kframework.attributes.Location(Location(257,10,257,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval820, err820 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("0","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err820 != nil {
								return m.NoResult, err820
							}
							eval821, err821 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(R,W,M,#token("1","Int"))
								varR,
								varW,
								varM,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err821 != nil {
								return m.NoResult, err821
							}
							return &m.KApply{Label: m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=iszero__IELE-COMMON
								eval820,
								eval821,
							}}, nil
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmInstructionAux", args: []m.K{c1, c2, c3, c4, c5, c6}}
}

func evalInitCheckGasCell(config m.K, guard int) (m.K, error) {
	// rule #734
	// source: ? @?
	// {| rule initCheckGasCell(.KList)=>`<checkGas>`(#token("true","Bool")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c6f5e5d430bed301f423ff48039fc56696d4e6dce062e8c03cf1bbbb4d6965ee) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 734, "{| rule initCheckGasCell(.KList)=>`<checkGas>`(#token(\"true\",\"Bool\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6f5e5d430bed301f423ff48039fc56696d4e6dce062e8c03cf1bbbb4d6965ee) initializer()] |}")
	return &m.KApply{Label: m.LblXltcheckGasXgt, List: []m.K{ // as-is <checkGas>
		/* rhs KToken */ m.BoolTrue,
	}}, nil

}

//var constInitCheckGasCell K = evalInitCheckGasCell(m.InternedBottom)

func evalIsAddInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #735
	// source: ? @?
	// {| rule isAddInst(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=add_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval822, err822 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err822 != nil {
			return m.NoResult, err822
		}
		eval823, err823 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err823 != nil {
			return m.NoResult, err823
		}
		eval824, err824 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err824 != nil {
			return m.NoResult, err824
		}
		if ((m.IsTrue(eval822)) &&
		   (m.IsTrue(eval823))) &&
		   (m.IsTrue(eval824)) {
			// RHS
			traceRuleApply("FUNC", 735, "{| rule isAddInst(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #736
	// source: ? @?
	// {| rule isAddInst(#KToken(#token("AddInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAddInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 736, "{| rule isAddInst(#KToken(#token(\"AddInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #737
	// source: ? @?
	// {| rule isAddInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 737, "{| rule isAddInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsValidContractAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #738
	// source: iele-binary.k @147
	// {| rule isValidContractAux(`.WordStack_IELE-DATA`(.KList),_88)=>#token("true","Bool") requires `_==Int_`(_88,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(946d1059307bff4aa78cb6847d04f5e292581b1e0dab1f2b8b2fa40a3efddff9) contentStartColumn(10) contentStartLine(147) org.kframework.attributes.Location(Location(147,10,147,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if varXu88, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval825, err825 := evalXuXeqXeqIntXu( // `_==Int_`(_88,#token("0","Int"))
				varXu88,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err825 != nil {
				return m.NoResult, err825
			}
			if m.IsTrue(eval825) {
				// RHS
				traceRuleApply("FUNC", 738, "{| rule isValidContractAux(`.WordStack_IELE-DATA`(.KList),_88)=>#token(\"true\",\"Bool\") requires `_==Int_`(_88,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(946d1059307bff4aa78cb6847d04f5e292581b1e0dab1f2b8b2fa40a3efddff9) contentStartColumn(10) contentStartLine(147) org.kframework.attributes.Location(Location(147,10,147,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #739
	// source: iele-binary.k @148
	// {| rule isValidContractAux(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS)))))),SIZE)=>`#lambda__2`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),SIZE,WS,NBITS) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_121,#token("99","Int"))) ensures #token("true","Bool") [UNIQUE_ID(177b1fb88fe4d7c4baaf744299fd5c95f931e9ac1a724fd82071d8d0db2f8074) contentStartColumn(10) contentStartLine(148) org.kframework.attributes.Location(Location(148,10,148,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS))))))
		if varW1, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS)))))
				if varW2, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS))))
						if varW3, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS)))
								if varW4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS))
										if varXu121, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if kapp5, t := kapp4.List[1].(*m.KApply); t && kapp5.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp5.List) == 2 { // `_:__IELE-DATA`(NBITS,WS)
												if varNBITS, t := kapp5.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
													varWS := kapp5.List[1] // lhs KVariable WS
													if varSIZE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
														// REQUIRES
														eval826, err826 := evalIsWordStack( // isWordStack(WS)
															varWS,
															config, -1)
														if err826 != nil {
															return m.NoResult, err826
														}
														eval827, err827 := evalXuXeqXeqIntXu( // `_==Int_`(_121,#token("99","Int"))
															varXu121,
															/* rhs KToken */ m.NewIntFromString("99"),
															config, -1)
														if err827 != nil {
															return m.NoResult, err827
														}
														if (/* rhs precomputed isInt(W4) */ /* && */
														   m.IsTrue(eval826) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
														   (m.IsTrue(eval827)) {
															// RHS
															traceRuleApply("FUNC", 739, "{| rule isValidContractAux(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(_121,`_:__IELE-DATA`(NBITS,WS)))))),SIZE)=>`#lambda__2`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token(\"16777216\",\"Int\")),`_*Int__INT`(W2,#token(\"65536\",\"Int\"))),`_*Int__INT`(W3,#token(\"256\",\"Int\"))),W4),SIZE,WS,NBITS) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_121,#token(\"99\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(177b1fb88fe4d7c4baaf744299fd5c95f931e9ac1a724fd82071d8d0db2f8074) contentStartColumn(10) contentStartLine(148) org.kframework.attributes.Location(Location(148,10,148,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
															eval832, err832 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("16777216","Int"))
																varW1,
																/* rhs KToken */ m.NewIntFromString("16777216"),
																config, -1)
															if err832 != nil {
																return m.NoResult, err832
															}
															eval833, err833 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W2,#token("65536","Int"))
																varW2,
																/* rhs KToken */ m.NewIntFromString("65536"),
																config, -1)
															if err833 != nil {
																return m.NoResult, err833
															}
															eval831, err831 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int")))
																eval832,
																eval833,
																config, -1)
															if err831 != nil {
																return m.NoResult, err831
															}
															eval834, err834 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
																varW3,
																/* rhs KToken */ m.NewIntFromString("256"),
																config, -1)
															if err834 != nil {
																return m.NoResult, err834
															}
															eval830, err830 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int")))
																eval831,
																eval834,
																config, -1)
															if err830 != nil {
																return m.NoResult, err830
															}
															eval829, err829 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4)
																eval830,
																varW4,
																config, -1)
															if err829 != nil {
																return m.NoResult, err829
															}
															eval828, err828 := evalXhashlambdaXuXu2( // `#lambda__2`(`_+Int_`(`_+Int_`(`_+Int_`(`_*Int__INT`(W1,#token("16777216","Int")),`_*Int__INT`(W2,#token("65536","Int"))),`_*Int__INT`(W3,#token("256","Int"))),W4),SIZE,WS,NBITS)
																eval829,
																varSIZE,
																varWS,
																varNBITS,
																config, -1)
															if err828 != nil {
																return m.NoResult, err828
															}
															return eval828, nil
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #740
	// source: iele-binary.k @149
	// {| rule isValidContractAux(_614,_615)=>#token("false","Bool") requires `_andBool_`(isInt(_615),isWordStack(_614)) ensures #token("true","Bool") [UNIQUE_ID(c8b0024f8b6e495b9566a230d47351f4e1c3d9e7810565b760af99737b2cd1a2) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu614 := c1 // lhs KVariable _614
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval835, err835 := evalIsWordStack( // isWordStack(_614)
				varXu614,
				config, -1)
			if err835 != nil {
				return m.NoResult, err835
			}
			if /* rhs precomputed isInt(_615) */ /* && */
			   m.IsTrue(eval835) {
				// RHS
				traceRuleApply("FUNC", 740, "{| rule isValidContractAux(_614,_615)=>#token(\"false\",\"Bool\") requires `_andBool_`(isInt(_615),isWordStack(_614)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c8b0024f8b6e495b9566a230d47351f4e1c3d9e7810565b760af99737b2cd1a2) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				return /* rhs KToken */ m.BoolFalse, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIsValidContractAux", args: []m.K{c1, c2}}
}

func evalUpdateArray(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.updateAll
	lbl := m.LblUpdateArray // updateArray
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.updateAll(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.updateAll, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalUpdateArray", args: []m.K{c1, c2, c3}}
}

func evalXuXlsqbXuXltXhyphenundefXrsqbXuARRAYXhyphenSYNTAX(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.remove
	lbl := m.LblXuXlsqbXuXltXhyphenundefXrsqbXuARRAYXhyphenSYNTAX // _[_<-undef]_ARRAY-SYNTAX
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.remove(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.remove, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXltXhyphenundefXrsqbXuARRAYXhyphenSYNTAX", args: []m.K{c1, c2}}
}

func evalSizeList(c m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.size
	lbl := m.LblSizeList // sizeList
	sort := m.SortInt
	if hookRes, hookErr := listHooks.size(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.size, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSizeList", args: []m.K{c}}
}

func evalIsRefundCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #741
	// source: ? @?
	// {| rule isRefundCellOpt(`<refund>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltrefundXgt && len(kapp0.List) == 1 { // `<refund>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 741, "{| rule isRefundCellOpt(`<refund>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #742
	// source: ? @?
	// {| rule isRefundCellOpt(#KToken(#token("RefundCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRefundCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 742, "{| rule isRefundCellOpt(#KToken(#token(\"RefundCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #743
	// source: ? @?
	// {| rule isRefundCellOpt(#KToken(#token("RefundCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRefundCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 743, "{| rule isRefundCellOpt(#KToken(#token(\"RefundCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #744
	// source: ? @?
	// {| rule isRefundCellOpt(noRefundCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoRefundCell && len(kapp0.List) == 0 { // noRefundCell(.KList)
		// RHS
		traceRuleApply("FUNC", 744, "{| rule isRefundCellOpt(noRefundCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #745
	// source: ? @?
	// {| rule isRefundCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 745, "{| rule isRefundCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNumberCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #746
	// source: ? @?
	// {| rule isNumberCellOpt(noNumberCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoNumberCell && len(kapp0.List) == 0 { // noNumberCell(.KList)
		// RHS
		traceRuleApply("FUNC", 746, "{| rule isNumberCellOpt(noNumberCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #747
	// source: ? @?
	// {| rule isNumberCellOpt(#KToken(#token("NumberCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumberCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 747, "{| rule isNumberCellOpt(#KToken(#token(\"NumberCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #748
	// source: ? @?
	// {| rule isNumberCellOpt(`<number>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnumberXgt && len(kapp0.List) == 1 { // `<number>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 748, "{| rule isNumberCellOpt(`<number>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #749
	// source: ? @?
	// {| rule isNumberCellOpt(#KToken(#token("NumberCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumberCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 749, "{| rule isNumberCellOpt(#KToken(#token(\"NumberCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #750
	// source: ? @?
	// {| rule isNumberCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 750, "{| rule isNumberCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalString2ID(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.string2token
	lbl := m.LblString2ID // String2Id
	sort := m.SortID
	if hookRes, hookErr := stringHooks.string2token(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.string2token, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2ID", args: []m.K{c}}
}

func evalInitDeclaredContractsCell(config m.K, guard int) (m.K, error) {
	// rule #751
	// source: ? @?
	// {| rule initDeclaredContractsCell(.KList)=>`<declaredContracts>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8ce1088f87be6c9ee51798b2c3674451eafb13aa139bc100fb29d55d1ddd9b75) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 751, "{| rule initDeclaredContractsCell(.KList)=>`<declaredContracts>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ce1088f87be6c9ee51798b2c3674451eafb13aa139bc100fb29d55d1ddd9b75) initializer()] |}")
	eval836, err836 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err836 != nil {
		return m.NoResult, err836
	}
	return &m.KApply{Label: m.LblXltdeclaredContractsXgt, List: []m.K{ // as-is <declaredContracts>
		eval836,
	}}, nil

}

//var constInitDeclaredContractsCell K = evalInitDeclaredContractsCell(m.InternedBottom)

func evalXhashisValidStringTable(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #752
	// source: iele-binary.k @151
	// {| rule #isValidStringTable(`_:__IELE-DATA`(_62,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,SIZE)=>`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),`_==Int_`(_62,#token("105","Int"))) ensures #token("true","Bool") [UNIQUE_ID(900c84da8d250fe1878a0896c050cdd464d4698b05745033f552373b337bfd44) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,208)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_62,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu62, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
									// REQUIRES
									eval837, err837 := evalIsWordStack( // isWordStack(WS)
										varWS,
										config, -1)
									if err837 != nil {
										return m.NoResult, err837
									}
									eval838, err838 := evalXuXeqXeqIntXu( // `_==Int_`(_62,#token("105","Int"))
										varXu62,
										/* rhs KToken */ m.NewIntFromString("105"),
										config, -1)
									if err838 != nil {
										return m.NoResult, err838
									}
									if (m.IsTrue(eval837) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
									   (m.IsTrue(eval838)) {
										// RHS
										traceRuleApply("FUNC", 752, "{| rule #isValidStringTable(`_:__IELE-DATA`(_62,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,SIZE)=>`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token(\"3\",\"Int\")),`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token(\"3\",\"Int\")),`_*Int__INT`(W1,#token(\"256\",\"Int\"))),W2))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),`_==Int_`(_62,#token(\"105\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(900c84da8d250fe1878a0896c050cdd464d4698b05745033f552373b337bfd44) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,208)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval841, err841 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("3","Int"))
											varSIZE,
											/* rhs KToken */ m.NewIntFromString("3"),
											config, -1)
										if err841 != nil {
											return m.NoResult, err841
										}
										eval843, err843 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err843 != nil {
											return m.NoResult, err843
										}
										eval842, err842 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval843,
											varW2,
											config, -1)
										if err842 != nil {
											return m.NoResult, err842
										}
										eval840, err840 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))
											eval841,
											eval842,
											config, -1)
										if err840 != nil {
											return m.NoResult, err840
										}
										eval847, err847 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err847 != nil {
											return m.NoResult, err847
										}
										eval846, err846 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval847,
											varW2,
											config, -1)
										if err846 != nil {
											return m.NoResult, err846
										}
										eval845, err845 := evalXhashdrop( // #drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
											eval846,
											varWS,
											config, -1)
										if err845 != nil {
											return m.NoResult, err845
										}
										eval850, err850 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("3","Int"))
											varSIZE,
											/* rhs KToken */ m.NewIntFromString("3"),
											config, -1)
										if err850 != nil {
											return m.NoResult, err850
										}
										eval851, err851 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err851 != nil {
											return m.NoResult, err851
										}
										eval849, err849 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int")))
											eval850,
											eval851,
											config, -1)
										if err849 != nil {
											return m.NoResult, err849
										}
										eval848, err848 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2)
											eval849,
											varW2,
											config, -1)
										if err848 != nil {
											return m.NoResult, err848
										}
										eval844, err844 := evalXhashisValidStringTable( // #isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2))
											eval845,
											varNBITS,
											eval848,
											config, -1)
										if err844 != nil {
											return m.NoResult, err844
										}
										eval839, err839 := evalXuandBoolXu( // `_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2)))
											eval840,
											eval844,
											config, -1)
										if err839 != nil {
											return m.NoResult, err839
										}
										return eval839, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #753
	// source: iele-binary.k @152
	// {| rule #isValidStringTable(`_:__IELE-DATA`(_70,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,SIZE)=>`_andBool_`(`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)),isValidContractAux(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),`_orBool__BOOL`(`_=/=Int__INT`(W1,#token("0","Int")),`_=/=Int__INT`(W2,#token("0","Int")))),`_==Int_`(_70,#token("106","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0ce6ea574a7b0b596256e8ae4669dbf89301900dfac72e0db8e4380230219ada) contentStartColumn(10) contentStartLine(152) org.kframework.attributes.Location(Location(152,10,153,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_70,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu70, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
									// REQUIRES
									eval852, err852 := evalIsWordStack( // isWordStack(WS)
										varWS,
										config, -1)
									if err852 != nil {
										return m.NoResult, err852
									}
									eval853, err853 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W1,#token("0","Int"))
										varW1,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err853 != nil {
										return m.NoResult, err853
									}
									eval854, err854 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W2,#token("0","Int"))
										varW2,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err854 != nil {
										return m.NoResult, err854
									}
									eval855, err855 := evalXuXeqXeqIntXu( // `_==Int_`(_70,#token("106","Int"))
										varXu70,
										/* rhs KToken */ m.NewIntFromString("106"),
										config, -1)
									if err855 != nil {
										return m.NoResult, err855
									}
									if ((m.IsTrue(eval852) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
									   ((m.IsTrue(eval853)) || (m.IsTrue(eval854)))) &&
									   (m.IsTrue(eval855)) {
										// RHS
										traceRuleApply("FUNC", 753, "{| rule #isValidStringTable(`_:__IELE-DATA`(_70,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,SIZE)=>`_andBool_`(`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token(\"3\",\"Int\")),`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)),isValidContractAux(#take(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2))),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token(\"3\",\"Int\")),`_*Int__INT`(W1,#token(\"256\",\"Int\"))),W2))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),`_orBool__BOOL`(`_=/=Int__INT`(W1,#token(\"0\",\"Int\")),`_=/=Int__INT`(W2,#token(\"0\",\"Int\")))),`_==Int_`(_70,#token(\"106\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ce6ea574a7b0b596256e8ae4669dbf89301900dfac72e0db8e4380230219ada) contentStartColumn(10) contentStartLine(152) org.kframework.attributes.Location(Location(152,10,153,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
										eval859, err859 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("3","Int"))
											varSIZE,
											/* rhs KToken */ m.NewIntFromString("3"),
											config, -1)
										if err859 != nil {
											return m.NoResult, err859
										}
										eval861, err861 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err861 != nil {
											return m.NoResult, err861
										}
										eval860, err860 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval861,
											varW2,
											config, -1)
										if err860 != nil {
											return m.NoResult, err860
										}
										eval858, err858 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))
											eval859,
											eval860,
											config, -1)
										if err858 != nil {
											return m.NoResult, err858
										}
										eval865, err865 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err865 != nil {
											return m.NoResult, err865
										}
										eval864, err864 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval865,
											varW2,
											config, -1)
										if err864 != nil {
											return m.NoResult, err864
										}
										eval863, err863 := evalXhashtake( // #take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
											eval864,
											varWS,
											config, -1)
										if err863 != nil {
											return m.NoResult, err863
										}
										eval867, err867 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err867 != nil {
											return m.NoResult, err867
										}
										eval866, err866 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval867,
											varW2,
											config, -1)
										if err866 != nil {
											return m.NoResult, err866
										}
										eval862, err862 := evalIsValidContractAux( // isValidContractAux(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))
											eval863,
											eval866,
											config, -1)
										if err862 != nil {
											return m.NoResult, err862
										}
										eval857, err857 := evalXuandBoolXu( // `_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)),isValidContractAux(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)))
											eval858,
											eval862,
											config, -1)
										if err857 != nil {
											return m.NoResult, err857
										}
										eval871, err871 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err871 != nil {
											return m.NoResult, err871
										}
										eval870, err870 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
											eval871,
											varW2,
											config, -1)
										if err870 != nil {
											return m.NoResult, err870
										}
										eval869, err869 := evalXhashdrop( // #drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
											eval870,
											varWS,
											config, -1)
										if err869 != nil {
											return m.NoResult, err869
										}
										eval874, err874 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("3","Int"))
											varSIZE,
											/* rhs KToken */ m.NewIntFromString("3"),
											config, -1)
										if err874 != nil {
											return m.NoResult, err874
										}
										eval875, err875 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
											varW1,
											/* rhs KToken */ m.NewIntFromString("256"),
											config, -1)
										if err875 != nil {
											return m.NoResult, err875
										}
										eval873, err873 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int")))
											eval874,
											eval875,
											config, -1)
										if err873 != nil {
											return m.NoResult, err873
										}
										eval872, err872 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2)
											eval873,
											varW2,
											config, -1)
										if err872 != nil {
											return m.NoResult, err872
										}
										eval868, err868 := evalXhashisValidStringTable( // #isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2))
											eval869,
											varNBITS,
											eval872,
											config, -1)
										if err868 != nil {
											return m.NoResult, err868
										}
										eval856, err856 := evalXuandBoolXu( // `_andBool_`(`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)),isValidContractAux(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),#isValidStringTable(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_-Int__INT`(`_-Int__INT`(`_-Int__INT`(SIZE,#token("3","Int")),`_*Int__INT`(W1,#token("256","Int"))),W2)))
											eval857,
											eval868,
											config, -1)
										if err856 != nil {
											return m.NoResult, err856
										}
										return eval856, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #754
	// source: iele-binary.k @154
	// {| rule #isValidStringTable(`_:__IELE-DATA`(_71,`_:__IELE-DATA`(_72,`_:__IELE-DATA`(_73,WS))),NBITS,SIZE)=>#token("false","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)),`_andBool_`(`_andBool_`(`_==Int_`(_71,#token("106","Int")),`_==Int_`(_72,#token("0","Int"))),`_==Int_`(_73,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(f97d0f206bcdae9db88fbf22204c8bbcfd2783b399ef840b63f7da51ec4e9579) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_71,`_:__IELE-DATA`(_72,`_:__IELE-DATA`(_73,WS)))
		if varXu71, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(_72,`_:__IELE-DATA`(_73,WS))
				if varXu72, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(_73,WS)
						if varXu73, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
									// REQUIRES
									eval876, err876 := evalIsWordStack( // isWordStack(WS)
										varWS,
										config, -1)
									if err876 != nil {
										return m.NoResult, err876
									}
									eval877, err877 := evalXuXeqXeqIntXu( // `_==Int_`(_71,#token("106","Int"))
										varXu71,
										/* rhs KToken */ m.NewIntFromString("106"),
										config, -1)
									if err877 != nil {
										return m.NoResult, err877
									}
									eval878, err878 := evalXuXeqXeqIntXu( // `_==Int_`(_72,#token("0","Int"))
										varXu72,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err878 != nil {
										return m.NoResult, err878
									}
									eval879, err879 := evalXuXeqXeqIntXu( // `_==Int_`(_73,#token("0","Int"))
										varXu73,
										/* rhs KToken */ m.NewIntFromString("0"),
										config, -1)
									if err879 != nil {
										return m.NoResult, err879
									}
									if (m.IsTrue(eval876) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
									   (((m.IsTrue(eval877)) &&
									   (m.IsTrue(eval878))) &&
									   (m.IsTrue(eval879))) {
										// RHS
										traceRuleApply("FUNC", 754, "{| rule #isValidStringTable(`_:__IELE-DATA`(_71,`_:__IELE-DATA`(_72,`_:__IELE-DATA`(_73,WS))),NBITS,SIZE)=>#token(\"false\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)),`_andBool_`(`_andBool_`(`_==Int_`(_71,#token(\"106\",\"Int\")),`_==Int_`(_72,#token(\"0\",\"Int\"))),`_==Int_`(_73,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f97d0f206bcdae9db88fbf22204c8bbcfd2783b399ef840b63f7da51ec4e9579) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										return /* rhs KToken */ m.BoolFalse, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #755
	// source: iele-binary.k @155
	// {| rule #isValidStringTable(WS,NBITS,SIZE)=>#isValidFunctions(WS,NBITS,SIZE) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)) ensures #token("true","Bool") [UNIQUE_ID(241b0560eef92dd930d99fc146bc1b4d290760319b6f33ec3e5973a92416d7ec) contentStartColumn(10) contentStartLine(155) org.kframework.attributes.Location(Location(155,10,155,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c1 // lhs KVariable WS
		if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval880, err880 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err880 != nil {
					return m.NoResult, err880
				}
				if m.IsTrue(eval880) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  {
					// RHS
					traceRuleApply("FUNC", 755, "{| rule #isValidStringTable(WS,NBITS,SIZE)=>#isValidFunctions(WS,NBITS,SIZE) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(241b0560eef92dd930d99fc146bc1b4d290760319b6f33ec3e5973a92416d7ec) contentStartColumn(10) contentStartLine(155) org.kframework.attributes.Location(Location(155,10,155,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval881, err881 := evalXhashisValidFunctions( // #isValidFunctions(WS,NBITS,SIZE)
						varWS,
						varNBITS,
						varSIZE,
						config, -1)
					if err881 != nil {
						return m.NoResult, err881
					}
					return eval881, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidStringTable", args: []m.K{c1, c2, c3}}
}

func evalXuXeqXslashXeqBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.ne
	lbl := m.LblXuXeqXslashXeqBoolXuXuBOOL // _=/=Bool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.ne(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.ne, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #756
	// source: domains.k @332
	// {| rule `_=/=Bool__BOOL`(B1,B2)=>`notBool_`(`_==Bool__BOOL`(B1,B2)) requires `_andBool_`(isBool(B2),isBool(B1)) ensures #token("true","Bool") [UNIQUE_ID(229c060a3ad56352e70dadb0089a132434aa77f4aaf4ef46e44d820031a08b83) contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB1, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if varB2, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B2) && isBool(B1)
			// RHS
			traceRuleApply("FUNC", 756, "{| rule `_=/=Bool__BOOL`(B1,B2)=>`notBool_`(`_==Bool__BOOL`(B1,B2)) requires `_andBool_`(isBool(B2),isBool(B1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(229c060a3ad56352e70dadb0089a132434aa77f4aaf4ef46e44d820031a08b83) contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval883, err883 := evalXuXeqXeqBoolXuXuBOOL( // `_==Bool__BOOL`(B1,B2)
				varB1,
				varB2,
				config, -1)
			if err883 != nil {
				return m.NoResult, err883
			}
			eval882, err882 := evalNotBoolXu( // `notBool_`(`_==Bool__BOOL`(B1,B2))
				eval883,
				config, -1)
			if err882 != nil {
				return m.NoResult, err882
			}
			return eval882, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXslashXeqBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalXhashcomputeNRegsAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #757
	// source: iele.k @1819
	// {| rule #computeNRegsAux(`___IELE-COMMON`(`.List{"instructionList"}`(.KList),BLOCKS),REGS)=>#computeNRegsAux(BLOCKS,REGS) requires `_andBool_`(isLabeledBlocks(BLOCKS),isInt(REGS)) ensures #token("true","Bool") [UNIQUE_ID(d4a6374ce86ce43da05763fbcbf3277fd9bd4e679d622578f40b7ff3bb1e0899) contentStartColumn(10) contentStartLine(1819) org.kframework.attributes.Location(Location(1819,10,1819,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `___IELE-COMMON`(`.List{"instructionList"}`(.KList),BLOCKS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket && len(kapp1.List) == 0 { // `.List{"instructionList"}`(.KList)
			varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
			if varREGS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval884, err884 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
					varBLOCKS,
					config, -1)
				if err884 != nil {
					return m.NoResult, err884
				}
				if m.IsTrue(eval884) /* && */ /* rhs precomputed isInt(REGS) */  {
					// RHS
					traceRuleApply("FUNC", 757, "{| rule #computeNRegsAux(`___IELE-COMMON`(`.List{\"instructionList\"}`(.KList),BLOCKS),REGS)=>#computeNRegsAux(BLOCKS,REGS) requires `_andBool_`(isLabeledBlocks(BLOCKS),isInt(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d4a6374ce86ce43da05763fbcbf3277fd9bd4e679d622578f40b7ff3bb1e0899) contentStartColumn(10) contentStartLine(1819) org.kframework.attributes.Location(Location(1819,10,1819,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval885, err885 := evalXhashcomputeNRegsAux( // #computeNRegsAux(BLOCKS,REGS)
						varBLOCKS,
						varREGS,
						config, -1)
					if err885 != nil {
						return m.NoResult, err885
					}
					return eval885, nil
				}
			}
		}
	}

	// rule #758
	// source: iele.k @1816
	// {| rule #computeNRegsAux(`.List{"labeledBlockList"}`(.KList),NREGS)=>NREGS requires isInt(NREGS) ensures #token("true","Bool") [UNIQUE_ID(4afb568837e6dd92de61b155fabf047701adccf9b6a142ba2a5ab130be2cb6ce) contentStartColumn(10) contentStartLine(1816) org.kframework.attributes.Location(Location(1816,10,1816,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
		if varNREGS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(NREGS)
			// RHS
			traceRuleApply("FUNC", 758, "{| rule #computeNRegsAux(`.List{\"labeledBlockList\"}`(.KList),NREGS)=>NREGS requires isInt(NREGS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4afb568837e6dd92de61b155fabf047701adccf9b6a142ba2a5ab130be2cb6ce) contentStartColumn(10) contentStartLine(1816) org.kframework.attributes.Location(Location(1816,10,1816,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varNREGS, nil
		}
	}

	// rule #759
	// source: iele.k @1818
	// {| rule #computeNRegsAux(`___IELE-COMMON`(instructionList(INSTR,INSTRS),BLOCKS),NREGS)=>#computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),`maxInt(_,_)_INT`(`_+Int_`(#registers(INSTR),#token("1","Int")),NREGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(NREGS)),isInstruction(INSTR)) ensures #token("true","Bool") [UNIQUE_ID(42f62dd94ab440d09ef568ae31cfbd69e53b2fc17ac532a0dade973e6ae196c4) contentStartColumn(10) contentStartLine(1818) org.kframework.attributes.Location(Location(1818,10,1818,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `___IELE-COMMON`(instructionList(INSTR,INSTRS),BLOCKS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblInstructionList && len(kapp1.List) == 2 { // instructionList(INSTR,INSTRS)
			varINSTR := kapp1.List[0] // lhs KVariable INSTR
			varINSTRS := kapp1.List[1] // lhs KVariable INSTRS
			varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
			if varNREGS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval886, err886 := evalIsInstructions( // isInstructions(INSTRS)
					varINSTRS,
					config, -1)
				if err886 != nil {
					return m.NoResult, err886
				}
				eval887, err887 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
					varBLOCKS,
					config, -1)
				if err887 != nil {
					return m.NoResult, err887
				}
				eval888, err888 := evalIsInstruction( // isInstruction(INSTR)
					varINSTR,
					config, -1)
				if err888 != nil {
					return m.NoResult, err888
				}
				if ((m.IsTrue(eval886)) &&
				   (m.IsTrue(eval887)) /* && */ /* rhs precomputed isInt(NREGS) */ ) &&
				   (m.IsTrue(eval888)) {
					// RHS
					traceRuleApply("FUNC", 759, "{| rule #computeNRegsAux(`___IELE-COMMON`(instructionList(INSTR,INSTRS),BLOCKS),NREGS)=>#computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),`maxInt(_,_)_INT`(`_+Int_`(#registers(INSTR),#token(\"1\",\"Int\")),NREGS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(NREGS)),isInstruction(INSTR)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(42f62dd94ab440d09ef568ae31cfbd69e53b2fc17ac532a0dade973e6ae196c4) contentStartColumn(10) contentStartLine(1818) org.kframework.attributes.Location(Location(1818,10,1818,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval892, err892 := evalXhashregisters( // #registers(INSTR)
						varINSTR,
						config, -1)
					if err892 != nil {
						return m.NoResult, err892
					}
					eval891, err891 := evalXuXplusIntXu( // `_+Int_`(#registers(INSTR),#token("1","Int"))
						eval892,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err891 != nil {
						return m.NoResult, err891
					}
					eval890, err890 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(`_+Int_`(#registers(INSTR),#token("1","Int")),NREGS)
						eval891,
						varNREGS,
						config, -1)
					if err890 != nil {
						return m.NoResult, err890
					}
					eval889, err889 := evalXhashcomputeNRegsAux( // #computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),`maxInt(_,_)_INT`(`_+Int_`(#registers(INSTR),#token("1","Int")),NREGS))
						&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
							varINSTRS,
							varBLOCKS,
						}},
						eval890,
						config, -1)
					if err889 != nil {
						return m.NoResult, err889
					}
					return eval889, nil
				}
			}
		}
	}

	// rule #760
	// source: iele.k @1817
	// {| rule #computeNRegsAux(labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS),REGS)=>#computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),REGS) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(REGS)),isIeleName(LABEL)) ensures #token("true","Bool") [UNIQUE_ID(ec72509067420980903322abac82071fca14741b536e95e076481a06f23218dc) contentStartColumn(10) contentStartLine(1817) org.kframework.attributes.Location(Location(1817,10,1817,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLabeledBlockList && len(kapp0.List) == 2 { // labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `_:__IELE-COMMON`(LABEL,INSTRS)
			varLABEL := kapp1.List[0] // lhs KVariable LABEL
			varINSTRS := kapp1.List[1] // lhs KVariable INSTRS
			varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
			if varREGS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval893, err893 := evalIsInstructions( // isInstructions(INSTRS)
					varINSTRS,
					config, -1)
				if err893 != nil {
					return m.NoResult, err893
				}
				eval894, err894 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
					varBLOCKS,
					config, -1)
				if err894 != nil {
					return m.NoResult, err894
				}
				eval895, err895 := evalIsIeleName( // isIeleName(LABEL)
					varLABEL,
					config, -1)
				if err895 != nil {
					return m.NoResult, err895
				}
				if ((m.IsTrue(eval893)) &&
				   (m.IsTrue(eval894)) /* && */ /* rhs precomputed isInt(REGS) */ ) &&
				   (m.IsTrue(eval895)) {
					// RHS
					traceRuleApply("FUNC", 760, "{| rule #computeNRegsAux(labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS),REGS)=>#computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),REGS) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(REGS)),isIeleName(LABEL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ec72509067420980903322abac82071fca14741b536e95e076481a06f23218dc) contentStartColumn(10) contentStartLine(1817) org.kframework.attributes.Location(Location(1817,10,1817,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval896, err896 := evalXhashcomputeNRegsAux( // #computeNRegsAux(`___IELE-COMMON`(INSTRS,BLOCKS),REGS)
						&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
							varINSTRS,
							varBLOCKS,
						}},
						varREGS,
						config, -1)
					if err896 != nil {
						return m.NoResult, err896
					}
					return eval896, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcomputeNRegsAux", args: []m.K{c1, c2}}
}

func evalXhashsenderAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #761
	// source: data.k @396
	// {| rule #senderAux(HT,TW,TR,TS)=>#senderAux2(`ECDSARecover`(HT,TW,TR,TS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(TR),isString(TS)),isString(HT)),isInt(TW)) ensures #token("true","Bool") [UNIQUE_ID(007469b1f99d272c79bc4fc539dccd572d757c959407501b96a518e0c2279daa) contentStartColumn(10) contentStartLine(396) org.kframework.attributes.Location(Location(396,10,396,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varHT, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varTW, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varTR, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				if varTS, t := c4.(*m.String); t { // lhs KVariable with hook:STRING.String
					// REQUIRES precomputed isString(TR) && isString(TS) && isString(HT) && isInt(TW)
					// RHS
					traceRuleApply("FUNC", 761, "{| rule #senderAux(HT,TW,TR,TS)=>#senderAux2(`ECDSARecover`(HT,TW,TR,TS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(TR),isString(TS)),isString(HT)),isInt(TW)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(007469b1f99d272c79bc4fc539dccd572d757c959407501b96a518e0c2279daa) contentStartColumn(10) contentStartLine(396) org.kframework.attributes.Location(Location(396,10,396,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval898, err898 := evalECDSARecover( // `ECDSARecover`(HT,TW,TR,TS)
						varHT,
						varTW,
						varTR,
						varTS,
						config, -1)
					if err898 != nil {
						return m.NoResult, err898
					}
					eval897, err897 := evalXhashsenderAux2( // #senderAux2(`ECDSARecover`(HT,TW,TR,TS))
						eval898,
						config, -1)
					if err897 != nil {
						return m.NoResult, err897
					}
					return eval897, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsenderAux", args: []m.K{c1, c2, c3, c4}}
}

func evalXhashisCodeEmpty(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.isCodeEmpty
	lbl := m.LblXhashisCodeEmpty // #isCodeEmpty
	sort := m.SortBool
	if hookRes, hookErr := blockchain.IsCodeEmpty(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.isCodeEmpty, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisCodeEmpty", args: []m.K{c}}
}

func evalIsValidPoint(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.bn128valid
	lbl := m.LblIsValidPoint // isValidPoint
	sort := m.SortBool
	if hookRes, hookErr := krypto.Bn128valid(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.bn128valid, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalIsValidPoint", args: []m.K{c}}
}

func evalInitGasCell(config m.K, guard int) (m.K, error) {
	// rule #762
	// source: ? @?
	// {| rule initGasCell(.KList)=>`<gas>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ea4baaf639f158c1e4e00e8524c5e184b5c31b974c0299dac64e70da52333fff) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 762, "{| rule initGasCell(.KList)=>`<gas>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ea4baaf639f158c1e4e00e8524c5e184b5c31b974c0299dac64e70da52333fff) initializer()] |}")
	return &m.KApply{Label: m.LblXltgasXgt, List: []m.K{ // as-is <gas>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitGasCell K = evalInitGasCell(m.InternedBottom)

func evalIsJumpTableCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #763
	// source: ? @?
	// {| rule isJumpTableCellOpt(noJumpTableCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoJumpTableCell && len(kapp0.List) == 0 { // noJumpTableCell(.KList)
		// RHS
		traceRuleApply("FUNC", 763, "{| rule isJumpTableCellOpt(noJumpTableCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #764
	// source: ? @?
	// {| rule isJumpTableCellOpt(#KToken(#token("JumpTableCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpTableCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 764, "{| rule isJumpTableCellOpt(#KToken(#token(\"JumpTableCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #765
	// source: ? @?
	// {| rule isJumpTableCellOpt(#KToken(#token("JumpTableCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpTableCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 765, "{| rule isJumpTableCellOpt(#KToken(#token(\"JumpTableCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #766
	// source: ? @?
	// {| rule isJumpTableCellOpt(`<jumpTable>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltjumpTableXgt && len(kapp0.List) == 1 { // `<jumpTable>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 766, "{| rule isJumpTableCellOpt(`<jumpTable>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #767
	// source: ? @?
	// {| rule isJumpTableCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 767, "{| rule isJumpTableCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXltXltXuXgtXgtXuIELEXhyphenGAS(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #768
	// source: iele-gas.k @1189
	// {| rule `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(853e56d507cae6c9e399b1bb27f621eae02dc13ecb23c642f4c24e9ef2657cdb) contentStartColumn(10) contentStartLine(1189) org.kframework.attributes.Location(Location(1189,10,1189,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewmove_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 768, "{| rule `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(853e56d507cae6c9e399b1bb27f621eae02dc13ecb23c642f4c24e9ef2657cdb) contentStartColumn(10) contentStartLine(1189) org.kframework.attributes.Location(Location(1189,10,1189,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #769
	// source: iele-gas.k @1094
	// {| rule `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d235d1364b17c2ed256adf636df1e222ed343ce19208f9bc10bebc0e4063c2d2) contentStartColumn(10) contentStartLine(1094) org.kframework.attributes.Location(Location(1094,10,1094,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGselfdestructnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestructnewaccount_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 769, "{| rule `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d235d1364b17c2ed256adf636df1e222ed343ce19208f9bc10bebc0e4063c2d2) contentStartColumn(10) contentStartLine(1094) org.kframework.attributes.Location(Location(1094,10,1094,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #770
	// source: iele-gas.k @1190
	// {| rule `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(50070416d81d17283bb5f4dbfdfe432b14cafc69101862ae8e32a7551c26b5f4) contentStartColumn(10) contentStartLine(1190) org.kframework.attributes.Location(Location(1190,10,1190,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewarithXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewarith_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 770, "{| rule `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(50070416d81d17283bb5f4dbfdfe432b14cafc69101862ae8e32a7551c26b5f4) contentStartColumn(10) contentStartLine(1190) org.kframework.attributes.Location(Location(1190,10,1190,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #771
	// source: iele-gas.k @1095
	// {| rule `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2709f985a3d1cc8237ae7c6a4af8d670d8a92b9b88c960e7ad6e6422943bfcb9) contentStartColumn(10) contentStartLine(1095) org.kframework.attributes.Location(Location(1095,10,1095,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstaticcalldepthXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstaticcalldepth_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 771, "{| rule `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2709f985a3d1cc8237ae7c6a4af8d670d8a92b9b88c960e7ad6e6422943bfcb9) contentStartColumn(10) contentStartLine(1095) org.kframework.attributes.Location(Location(1095,10,1095,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #772
	// source: iele-gas.k @1074
	// {| rule `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(63f59dcae9c2e73d337ee2be9508264cc58ff5d6909d84e5c213811950b3f30d) contentStartColumn(10) contentStartLine(1074) org.kframework.attributes.Location(Location(1074,10,1074,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGselfdestructnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestructnewaccount_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 772, "{| rule `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63f59dcae9c2e73d337ee2be9508264cc58ff5d6909d84e5c213811950b3f30d) contentStartColumn(10) contentStartLine(1074) org.kframework.attributes.Location(Location(1074,10,1074,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #773
	// source: iele-gas.k @1077
	// {| rule `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(76d9147ac60adad8078a2c35dbd9269191419a20cf9196034010bb0eb4342f5b) contentStartColumn(10) contentStartLine(1077) org.kframework.attributes.Location(Location(1077,10,1077,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewarithXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewarith_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 773, "{| rule `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(76d9147ac60adad8078a2c35dbd9269191419a20cf9196034010bb0eb4342f5b) contentStartColumn(10) contentStartLine(1077) org.kframework.attributes.Location(Location(1077,10,1077,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #774
	// source: iele-gas.k @1076
	// {| rule `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(52e3d8c86d7e18d8196282aa1dd35db36dc3cdb954e9c47e83b7a5719a9c04fb) contentStartColumn(10) contentStartLine(1076) org.kframework.attributes.Location(Location(1076,10,1076,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewmove_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 774, "{| rule `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(52e3d8c86d7e18d8196282aa1dd35db36dc3cdb954e9c47e83b7a5719a9c04fb) contentStartColumn(10) contentStartLine(1076) org.kframework.attributes.Location(Location(1076,10,1076,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #775
	// source: iele-gas.k @1075
	// {| rule `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7bcc24aaad0045e2932cf6392dc2507021885787dea3baf0870a626b0b7ec9bb) contentStartColumn(10) contentStartLine(1075) org.kframework.attributes.Location(Location(1075,10,1075,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstaticcalldepthXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstaticcalldepth_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 775, "{| rule `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7bcc24aaad0045e2932cf6392dc2507021885787dea3baf0870a626b0b7ec9bb) contentStartColumn(10) contentStartLine(1075) org.kframework.attributes.Location(Location(1075,10,1075,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #776
	// source: iele-gas.k @1191
	// {| rule `_<<_>>_IELE-GAS`(SCHEDCONST,`DANSE_IELE-CONSTANTS`(.KList))=>`_<<_>>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList)) requires isScheduleFlag(SCHEDCONST) ensures #token("true","Bool") [UNIQUE_ID(f4b14f6f1c89170b8615c9dc89495db1748270c820f19e1fb09631fcdb8a7d2d) contentStartColumn(10) contentStartLine(1191) org.kframework.attributes.Location(Location(1191,10,1191,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHEDCONST := c1 // lhs KVariable SCHEDCONST
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// REQUIRES
			eval899, err899 := evalIsScheduleFlag( // isScheduleFlag(SCHEDCONST)
				varSCHEDCONST,
				config, -1)
			if err899 != nil {
				return m.NoResult, err899
			}
			if m.IsTrue(eval899) {
				// RHS
				traceRuleApply("FUNC", 776, "{| rule `_<<_>>_IELE-GAS`(SCHEDCONST,`DANSE_IELE-CONSTANTS`(.KList))=>`_<<_>>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList)) requires isScheduleFlag(SCHEDCONST) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f4b14f6f1c89170b8615c9dc89495db1748270c820f19e1fb09631fcdb8a7d2d) contentStartColumn(10) contentStartLine(1191) org.kframework.attributes.Location(Location(1191,10,1191,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval900, err900 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))
					varSCHEDCONST,
					&m.KApply{Label: m.LblALBEXuIELEXhyphenCONSTANTS, List: []m.K{ // as-is ALBE_IELE-CONSTANTS
					}},
					config, -1)
				if err900 != nil {
					return m.NoResult, err900
				}
				return eval900, nil
			}
		}
	}

	// rule #777
	// source: iele-gas.k @1096
	// {| rule `_<<_>>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))=>`_<<_>>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList)) requires isScheduleFlag(SCHEDCONST) ensures #token("true","Bool") [UNIQUE_ID(018648b42781cd3a803b7799c131e31d0843b78ce0f12447274f275e9168a9ce) contentStartColumn(10) contentStartLine(1096) org.kframework.attributes.Location(Location(1096,10,1096,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHEDCONST := c1 // lhs KVariable SCHEDCONST
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// REQUIRES
			eval901, err901 := evalIsScheduleFlag( // isScheduleFlag(SCHEDCONST)
				varSCHEDCONST,
				config, -1)
			if err901 != nil {
				return m.NoResult, err901
			}
			if m.IsTrue(eval901) {
				// RHS
				traceRuleApply("FUNC", 777, "{| rule `_<<_>>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))=>`_<<_>>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList)) requires isScheduleFlag(SCHEDCONST) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(018648b42781cd3a803b7799c131e31d0843b78ce0f12447274f275e9168a9ce) contentStartColumn(10) contentStartLine(1096) org.kframework.attributes.Location(Location(1096,10,1096,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval902, err902 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList))
					varSCHEDCONST,
					&m.KApply{Label: m.LblDEFAULTXuIELEXhyphenGAS, List: []m.K{ // as-is DEFAULT_IELE-GAS
					}},
					config, -1)
				if err902 != nil {
					return m.NoResult, err902
				}
				return eval902, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXltXuXgtXgtXuIELEXhyphenGAS", args: []m.K{c1, c2}}
}

func evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, config m.K, guard int) (m.K, error) {
	// rule #778
	// source: iele-binary.k @328
	// {| rule `%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,_115)=>`.List{"lvalueList"}`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)),`_==Int_`(_115,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d917ea8c98d953d5b58346b42c35c343a3366ff9f6b83078d3bb94c68cce9d19) contentStartColumn(10) contentStartLine(328) org.kframework.attributes.Location(Location(328,10,328,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu115, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval903, err903 := evalXuXeqXeqIntXu( // `_==Int_`(_115,#token("0","Int"))
							varXu115,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err903 != nil {
							return m.NoResult, err903
						}
						if /* rhs precomputed isInt(REGS) && isInt(MASK) && isInt(IDX) && isInt(WIDTH) */ /* && */
						   m.IsTrue(eval903) {
							// RHS
							traceRuleApply("FUNC", 778, "{| rule `%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,_115)=>`.List{\"lvalueList\"}`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)),`_==Int_`(_115,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d917ea8c98d953d5b58346b42c35c343a3366ff9f6b83078d3bb94c68cce9d19) contentStartColumn(10) contentStartLine(328) org.kframework.attributes.Location(Location(328,10,328,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return &m.KApply{Label: m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket, List: []m.K{ // as-is .List{"lvalueList"}
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #779
	// source: iele-binary.k @329
	// {| rule `%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,COUNT)=>lvalueList(`%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX),`%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token("1","Int")),`_-Int__INT`(COUNT,#token("1","Int")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(COUNT)),isInt(WIDTH)) ensures #token("true","Bool") [UNIQUE_ID(01faef51d9ca299ae1638ac4effeededc35df3e02be84918fd11a4d3afe1dca4) contentStartColumn(10) contentStartLine(329) org.kframework.attributes.Location(Location(329,10,329,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varREGS, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varWIDTH, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varMASK, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varIDX, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varCOUNT, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(REGS) && isInt(MASK) && isInt(IDX) && isInt(COUNT) && isInt(WIDTH)
						// RHS
						traceRuleApply("FUNC", 779, "{| rule `%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,COUNT)=>lvalueList(`%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX),`%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token(\"1\",\"Int\")),`_-Int__INT`(COUNT,#token(\"1\",\"Int\")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(COUNT)),isInt(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01faef51d9ca299ae1638ac4effeededc35df3e02be84918fd11a4d3afe1dca4) contentStartColumn(10) contentStartLine(329) org.kframework.attributes.Location(Location(329,10,329,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval904, err904 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX)
							varREGS,
							varWIDTH,
							varMASK,
							varIDX,
							config, -1)
						if err904 != nil {
							return m.NoResult, err904
						}
						eval906, err906 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
							varIDX,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err906 != nil {
							return m.NoResult, err906
						}
						eval907, err907 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(COUNT,#token("1","Int"))
							varCOUNT,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err907 != nil {
							return m.NoResult, err907
						}
						eval905, err905 := evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%l(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token("1","Int")),`_-Int__INT`(COUNT,#token("1","Int")))
							varREGS,
							varWIDTH,
							varMASK,
							eval906,
							eval907,
							config, -1)
						if err905 != nil {
							return m.NoResult, err905
						}
						return &m.KApply{Label: m.LblLvalueList, List: []m.K{ // as-is lvalueList
							eval904,
							eval905,
						}}, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXpercentlXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY", args: []m.K{c1, c2, c3, c4, c5}}
}

func evalIsStorageCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #780
	// source: ? @?
	// {| rule isStorageCell(`<storage>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstorageXgt && len(kapp0.List) == 1 { // `<storage>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 780, "{| rule isStorageCell(`<storage>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #781
	// source: ? @?
	// {| rule isStorageCell(#KToken(#token("StorageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStorageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 781, "{| rule isStorageCell(#KToken(#token(\"StorageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #782
	// source: ? @?
	// {| rule isStorageCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 782, "{| rule isStorageCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalRlpDecode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #783
	// source: data.k @556
	// {| rule rlpDecode(STR)=>#rlpDecodeAux(STR,#decodeLengthPrefix(STR,#token("0","Int"))) requires isString(STR) ensures #token("true","Bool") [UNIQUE_ID(28433a522b0b1f8ddcaa08e583110a03fb2156120c407b9f90c2ccb0e1149f56) contentStartColumn(10) contentStartLine(556) org.kframework.attributes.Location(Location(556,10,556,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(STR)
		// RHS
		traceRuleApply("FUNC", 783, "{| rule rlpDecode(STR)=>#rlpDecodeAux(STR,#decodeLengthPrefix(STR,#token(\"0\",\"Int\"))) requires isString(STR) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28433a522b0b1f8ddcaa08e583110a03fb2156120c407b9f90c2ccb0e1149f56) contentStartColumn(10) contentStartLine(556) org.kframework.attributes.Location(Location(556,10,556,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval909, err909 := evalXhashdecodeLengthPrefix( // #decodeLengthPrefix(STR,#token("0","Int"))
			varSTR,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err909 != nil {
			return m.NoResult, err909
		}
		eval908, err908 := evalXhashrlpDecodeAux( // #rlpDecodeAux(STR,#decodeLengthPrefix(STR,#token("0","Int")))
			varSTR,
			eval909,
			config, -1)
		if err908 != nil {
			return m.NoResult, err908
		}
		return eval908, nil
	}

	return m.NoResult, &stuckError{funcName: "evalRlpDecode", args: []m.K{c}}
}

func evalRfindString(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.rfind
	lbl := m.LblRfindString // rfindString
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.rfind(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.rfind, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalRfindString", args: []m.K{c1, c2, c3}}
}

func evalUpdateList(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.updateAll
	lbl := m.LblUpdateList // updateList
	sort := m.SortList
	if hookRes, hookErr := listHooks.updateAll(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.updateAll, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalUpdateList", args: []m.K{c1, c2, c3}}
}

func evalStringBuffer2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BUFFER.toString
	lbl := m.LblStringBuffer2String // StringBuffer2String
	sort := m.SortString
	if hookRes, hookErr := bufferHooks.toString(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BUFFER.toString, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalStringBuffer2String", args: []m.K{c}}
}

func evalPowmod(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #784
	// source: data.k @182
	// {| rule powmod(W0,W1,W2)=>`_^%Int___INT`(W0,W1,W2) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6fdad585dbc6fa81165bbcc5818cf1fdb99992f68fad188c2ffc7d9f7ce774f3) contentStartColumn(10) contentStartLine(182) org.kframework.attributes.Location(Location(182,10,182,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varW0, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varW1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW2, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval910, err910 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W2,#token("0","Int"))
					varW2,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err910 != nil {
					return m.NoResult, err910
				}
				if /* rhs precomputed isInt(W2) && isInt(W1) && isInt(W0) */ /* && */
				   m.IsTrue(eval910) {
					// RHS
					traceRuleApply("FUNC", 784, "{| rule powmod(W0,W1,W2)=>`_^%Int___INT`(W0,W1,W2) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fdad585dbc6fa81165bbcc5818cf1fdb99992f68fad188c2ffc7d9f7ce774f3) contentStartColumn(10) contentStartLine(182) org.kframework.attributes.Location(Location(182,10,182,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval911, err911 := evalXuXxorXpercentIntXuXuXuINT( // `_^%Int___INT`(W0,W1,W2)
						varW0,
						varW1,
						varW2,
						config, -1)
					if err911 != nil {
						return m.NoResult, err911
					}
					return eval911, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalPowmod", args: []m.K{c1, c2, c3}}
}

func evalCategoryChar(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.category
	lbl := m.LblCategoryChar // categoryChar
	sort := m.SortString
	if hookRes, hookErr := stringHooks.category(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.category, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalCategoryChar", args: []m.K{c}}
}

func evalIsJumpInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #785
	// source: ? @?
	// {| rule isJumpInst(#KToken(#token("JumpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 785, "{| rule isJumpInst(#KToken(#token(\"JumpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #786
	// source: ? @?
	// {| rule isJumpInst(`br__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `br__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval912, err912 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err912 != nil {
			return m.NoResult, err912
		}
		if m.IsTrue(eval912) {
			// RHS
			traceRuleApply("FUNC", 786, "{| rule isJumpInst(`br__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #787
	// source: ? @?
	// {| rule isJumpInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 787, "{| rule isJumpInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallerCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #788
	// source: ? @?
	// {| rule isCallerCellOpt(`<caller>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallerXgt && len(kapp0.List) == 1 { // `<caller>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 788, "{| rule isCallerCellOpt(`<caller>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #789
	// source: ? @?
	// {| rule isCallerCellOpt(#KToken(#token("CallerCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallerCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 789, "{| rule isCallerCellOpt(#KToken(#token(\"CallerCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #790
	// source: ? @?
	// {| rule isCallerCellOpt(noCallerCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallerCell && len(kapp0.List) == 0 { // noCallerCell(.KList)
		// RHS
		traceRuleApply("FUNC", 790, "{| rule isCallerCellOpt(noCallerCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #791
	// source: ? @?
	// {| rule isCallerCellOpt(#KToken(#token("CallerCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallerCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 791, "{| rule isCallerCellOpt(#KToken(#token(\"CallerCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #792
	// source: ? @?
	// {| rule isCallerCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 792, "{| rule isCallerCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsKCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #793
	// source: ? @?
	// {| rule isKCellOpt(`<k>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltkXgt && len(kapp0.List) == 1 { // `<k>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 793, "{| rule isKCellOpt(`<k>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #794
	// source: ? @?
	// {| rule isKCellOpt(noKCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoKCell && len(kapp0.List) == 0 { // noKCell(.KList)
		// RHS
		traceRuleApply("FUNC", 794, "{| rule isKCellOpt(noKCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #795
	// source: ? @?
	// {| rule isKCellOpt(#KToken(#token("KCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 795, "{| rule isKCellOpt(#KToken(#token(\"KCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #796
	// source: ? @?
	// {| rule isKCellOpt(#KToken(#token("KCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 796, "{| rule isKCellOpt(#KToken(#token(\"KCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #797
	// source: ? @?
	// {| rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 797, "{| rule isKCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitSendtoCell(config m.K, guard int) (m.K, error) {
	// rule #798
	// source: ? @?
	// {| rule initSendtoCell(.KList)=>`<sendto>`(`.Account_IELE-DATA`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(40809991212589ee7106d4a56d8bf7c3da3d86530e64f99c1b98c12a3db0e26f) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 798, "{| rule initSendtoCell(.KList)=>`<sendto>`(`.Account_IELE-DATA`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(40809991212589ee7106d4a56d8bf7c3da3d86530e64f99c1b98c12a3db0e26f) initializer()] |}")
	return &m.KApply{Label: m.LblXltsendtoXgt, List: []m.K{ // as-is <sendto>
		&m.KApply{Label: m.LblXdotAccountXuIELEXhyphenDATA, List: []m.K{ // as-is .Account_IELE-DATA
		}},
	}}, nil

}

//var constInitSendtoCell K = evalInitSendtoCell(m.InternedBottom)

func evalXhashdrop(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #799
	// source: data.k @285
	// {| rule #drop(_7,WS)=>WS requires `_andBool_`(isWordStack(WS),`_==Int_`(_7,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(86c586c2db0069f25a547c0aaf9a18bc111fd5926c7cbc3f176035e1ba42cc47) contentStartColumn(10) contentStartLine(285) org.kframework.attributes.Location(Location(285,10,285,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu7, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varWS := c2 // lhs KVariable WS
		// REQUIRES
		eval913, err913 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err913 != nil {
			return m.NoResult, err913
		}
		eval914, err914 := evalXuXeqXeqIntXu( // `_==Int_`(_7,#token("0","Int"))
			varXu7,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err914 != nil {
			return m.NoResult, err914
		}
		if (m.IsTrue(eval913)) &&
		   (m.IsTrue(eval914)) {
			// RHS
			traceRuleApply("FUNC", 799, "{| rule #drop(_7,WS)=>WS requires `_andBool_`(isWordStack(WS),`_==Int_`(_7,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(86c586c2db0069f25a547c0aaf9a18bc111fd5926c7cbc3f176035e1ba42cc47) contentStartColumn(10) contentStartLine(285) org.kframework.attributes.Location(Location(285,10,285,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varWS, nil
		}
	}

	// rule #800
	// source: data.k @286
	// {| rule #drop(N,`.WordStack_IELE-DATA`(.KList))=>`.WordStack_IELE-DATA`(.KList) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(7f4f1c9d65cb6203c43e51cc4637f0572ea7cc4388b663cda2598a4d0f726b6f) contentStartColumn(10) contentStartLine(286) org.kframework.attributes.Location(Location(286,10,286,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
			// REQUIRES precomputed isInt(N)
			// RHS
			traceRuleApply("FUNC", 800, "{| rule #drop(N,`.WordStack_IELE-DATA`(.KList))=>`.WordStack_IELE-DATA`(.KList) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7f4f1c9d65cb6203c43e51cc4637f0572ea7cc4388b663cda2598a4d0f726b6f) contentStartColumn(10) contentStartLine(286) org.kframework.attributes.Location(Location(286,10,286,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return &m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
			}}, nil
		}
	}

	// rule #801
	// source: data.k @287
	// {| rule #drop(N,`_:__IELE-DATA`(W,WS))=>#drop(`_-Int__INT`(N,#token("1","Int")),WS) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(8adcc777155ffc3ae59b2b9605b1cc9c372696fcad623f617b75ab64bcd1d66b) contentStartColumn(10) contentStartLine(287) org.kframework.attributes.Location(Location(287,10,287,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
			if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS := kapp0.List[1] // lhs KVariable WS
				// REQUIRES
				eval915, err915 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err915 != nil {
					return m.NoResult, err915
				}
				if m.IsTrue(eval915) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(N) */  {
					// RHS
					traceRuleApply("FUNC", 801, "{| rule #drop(N,`_:__IELE-DATA`(W,WS))=>#drop(`_-Int__INT`(N,#token(\"1\",\"Int\")),WS) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8adcc777155ffc3ae59b2b9605b1cc9c372696fcad623f617b75ab64bcd1d66b) contentStartColumn(10) contentStartLine(287) org.kframework.attributes.Location(Location(287,10,287,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval917, err917 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,#token("1","Int"))
						varN,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err917 != nil {
						return m.NoResult, err917
					}
					eval916, err916 := evalXhashdrop( // #drop(`_-Int__INT`(N,#token("1","Int")),WS)
						eval917,
						varWS,
						config, -1)
					if err916 != nil {
						return m.NoResult, err916
					}
					return eval916, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdrop", args: []m.K{c1, c2}}
}

func evalIsFromCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #802
	// source: ? @?
	// {| rule isFromCellOpt(#KToken(#token("FromCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFromCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 802, "{| rule isFromCellOpt(#KToken(#token(\"FromCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #803
	// source: ? @?
	// {| rule isFromCellOpt(noFromCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFromCell && len(kapp0.List) == 0 { // noFromCell(.KList)
		// RHS
		traceRuleApply("FUNC", 803, "{| rule isFromCellOpt(noFromCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #804
	// source: ? @?
	// {| rule isFromCellOpt(#KToken(#token("FromCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFromCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 804, "{| rule isFromCellOpt(#KToken(#token(\"FromCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #805
	// source: ? @?
	// {| rule isFromCellOpt(`<from>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfromXgt && len(kapp0.List) == 1 { // `<from>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 805, "{| rule isFromCellOpt(`<from>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #806
	// source: ? @?
	// {| rule isFromCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 806, "{| rule isFromCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallStackCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #807
	// source: ? @?
	// {| rule isCallStackCellOpt(noCallStackCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallStackCell && len(kapp0.List) == 0 { // noCallStackCell(.KList)
		// RHS
		traceRuleApply("FUNC", 807, "{| rule isCallStackCellOpt(noCallStackCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #808
	// source: ? @?
	// {| rule isCallStackCellOpt(`<callStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallStackXgt && len(kapp0.List) == 1 { // `<callStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 808, "{| rule isCallStackCellOpt(`<callStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #809
	// source: ? @?
	// {| rule isCallStackCellOpt(#KToken(#token("CallStackCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallStackCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 809, "{| rule isCallStackCellOpt(#KToken(#token(\"CallStackCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #810
	// source: ? @?
	// {| rule isCallStackCellOpt(#KToken(#token("CallStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 810, "{| rule isCallStackCellOpt(#KToken(#token(\"CallStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #811
	// source: ? @?
	// {| rule isCallStackCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 811, "{| rule isCallStackCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitCallValueCell(config m.K, guard int) (m.K, error) {
	// rule #812
	// source: ? @?
	// {| rule initCallValueCell(.KList)=>`<callValue>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(28cd420fcbad58c5e77d8ecfbac7fd0d7b0bf23e3d2cc718948eaee906533070) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 812, "{| rule initCallValueCell(.KList)=>`<callValue>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28cd420fcbad58c5e77d8ecfbac7fd0d7b0bf23e3d2cc718948eaee906533070) initializer()] |}")
	return &m.KApply{Label: m.LblXltcallValueXgt, List: []m.K{ // as-is <callValue>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitCallValueCell K = evalInitCallValueCell(m.InternedBottom)

func evalString2Float(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.string2float
	lbl := m.LblString2Float // String2Float
	sort := m.SortFloat
	if hookRes, hookErr := stringHooks.string2float(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.string2float, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2Float", args: []m.K{c}}
}

func evalMapXcolonlookupOrDefault(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.lookupOrDefault
	lbl := m.LblMapXcolonlookupOrDefault // Map:lookupOrDefault
	sort := m.SortKItem
	if hookRes, hookErr := mapHooks.lookupOrDefault(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.lookupOrDefault, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMapXcolonlookupOrDefault", args: []m.K{c1, c2, c3}}
}

func evalXuXampsIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.and
	lbl := m.LblXuXampsIntXuXuINT // _&Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.and(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.and, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXampsIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsGasPriceCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #813
	// source: ? @?
	// {| rule isGasPriceCell(#KToken(#token("GasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 813, "{| rule isGasPriceCell(#KToken(#token(\"GasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #814
	// source: ? @?
	// {| rule isGasPriceCell(`<gasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasPriceXgt && len(kapp0.List) == 1 { // `<gasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 814, "{| rule isGasPriceCell(`<gasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #815
	// source: ? @?
	// {| rule isGasPriceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 815, "{| rule isGasPriceCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXplusXplusXuXuIELEXhyphenDATA(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #816
	// source: data.k @267
	// {| rule `_++__IELE-DATA`(`.WordStack_IELE-DATA`(.KList),WS')=>WS' requires isWordStack(WS') ensures #token("true","Bool") [UNIQUE_ID(802d732c93b2aad76298067098446b02cd1f78877e8e98f021895932e2792471) contentStartColumn(10) contentStartLine(267) org.kframework.attributes.Location(Location(267,10,267,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		varWSXapos := c2 // lhs KVariable WS'
		// REQUIRES
		eval918, err918 := evalIsWordStack( // isWordStack(WS')
			varWSXapos,
			config, -1)
		if err918 != nil {
			return m.NoResult, err918
		}
		if m.IsTrue(eval918) {
			// RHS
			traceRuleApply("FUNC", 816, "{| rule `_++__IELE-DATA`(`.WordStack_IELE-DATA`(.KList),WS')=>WS' requires isWordStack(WS') ensures #token(\"true\",\"Bool\") [UNIQUE_ID(802d732c93b2aad76298067098446b02cd1f78877e8e98f021895932e2792471) contentStartColumn(10) contentStartLine(267) org.kframework.attributes.Location(Location(267,10,267,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varWSXapos, nil
		}
	}

	// rule #817
	// source: data.k @268
	// {| rule `_++__IELE-DATA`(`_:__IELE-DATA`(W,WS),WS')=>`_:__IELE-DATA`(W,`_++__IELE-DATA`(WS,WS')) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isWordStack(WS')) ensures #token("true","Bool") [UNIQUE_ID(446902d36518b8e4dbd6011cd7b9906d63b541aa3160cb955578200e78a5f874) contentStartColumn(10) contentStartLine(268) org.kframework.attributes.Location(Location(268,10,268,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			varWSXapos := c2 // lhs KVariable WS'
			// REQUIRES
			eval919, err919 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err919 != nil {
				return m.NoResult, err919
			}
			eval920, err920 := evalIsWordStack( // isWordStack(WS')
				varWSXapos,
				config, -1)
			if err920 != nil {
				return m.NoResult, err920
			}
			if (m.IsTrue(eval919) /* && */ /* rhs precomputed isInt(W) */ ) &&
			   (m.IsTrue(eval920)) {
				// RHS
				traceRuleApply("FUNC", 817, "{| rule `_++__IELE-DATA`(`_:__IELE-DATA`(W,WS),WS')=>`_:__IELE-DATA`(W,`_++__IELE-DATA`(WS,WS')) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isWordStack(WS')) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(446902d36518b8e4dbd6011cd7b9906d63b541aa3160cb955578200e78a5f874) contentStartColumn(10) contentStartLine(268) org.kframework.attributes.Location(Location(268,10,268,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval921, err921 := evalXuXplusXplusXuXuIELEXhyphenDATA( // `_++__IELE-DATA`(WS,WS')
					varWS,
					varWSXapos,
					config, -1)
				if err921 != nil {
					return m.NoResult, err921
				}
				return &m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
					varW,
					eval921,
				}}, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusXplusXuXuIELEXhyphenDATA", args: []m.K{c1, c2}}
}

func evalIsAcctIDCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #818
	// source: ? @?
	// {| rule isAcctIDCellOpt(#KToken(#token("AcctIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAcctIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 818, "{| rule isAcctIDCellOpt(#KToken(#token(\"AcctIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #819
	// source: ? @?
	// {| rule isAcctIDCellOpt(noAcctIDCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoAcctIDCell && len(kapp0.List) == 0 { // noAcctIDCell(.KList)
		// RHS
		traceRuleApply("FUNC", 819, "{| rule isAcctIDCellOpt(noAcctIDCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #820
	// source: ? @?
	// {| rule isAcctIDCellOpt(#KToken(#token("AcctIDCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAcctIDCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 820, "{| rule isAcctIDCellOpt(#KToken(#token(\"AcctIDCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #821
	// source: ? @?
	// {| rule isAcctIDCellOpt(`<acctID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltacctIDXgt && len(kapp0.List) == 1 { // `<acctID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 821, "{| rule isAcctIDCellOpt(`<acctID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #822
	// source: ? @?
	// {| rule isAcctIDCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 822, "{| rule isAcctIDCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsInterimStatesCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #823
	// source: ? @?
	// {| rule isInterimStatesCell(`<interimStates>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinterimStatesXgt && len(kapp0.List) == 1 { // `<interimStates>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 823, "{| rule isInterimStatesCell(`<interimStates>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #824
	// source: ? @?
	// {| rule isInterimStatesCell(#KToken(#token("InterimStatesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInterimStatesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 824, "{| rule isInterimStatesCell(#KToken(#token(\"InterimStatesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #825
	// source: ? @?
	// {| rule isInterimStatesCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 825, "{| rule isInterimStatesCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalPadLeftBytes(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.padLeft
	lbl := m.LblPadLeftBytes // padLeftBytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.padLeft(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.padLeft, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalPadLeftBytes", args: []m.K{c1, c2, c3}}
}

func evalXuXeqXslashXeqIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.ne
	lbl := m.LblXuXeqXslashXeqIntXuXuINT // _=/=Int__INT
	sort := m.SortBool
	if hookRes, hookErr := intHooks.ne(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.ne, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #826
	// source: domains.k @408
	// {| rule `_=/=Int__INT`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token("true","Bool") [UNIQUE_ID(59ca895589d5fc7fa573380dac68ddd6602f6fa8b2761530a861aa894455f27e) contentStartColumn(8) contentStartLine(408) org.kframework.attributes.Location(Location(408,8,408,53)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(I1) && isInt(I2)
			// RHS
			traceRuleApply("FUNC", 826, "{| rule `_=/=Int__INT`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(59ca895589d5fc7fa573380dac68ddd6602f6fa8b2761530a861aa894455f27e) contentStartColumn(8) contentStartLine(408) org.kframework.attributes.Location(Location(408,8,408,53)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval923, err923 := evalXuXeqXeqIntXu( // `_==Int_`(I1,I2)
				varI1,
				varI2,
				config, -1)
			if err923 != nil {
				return m.NoResult, err923
			}
			eval922, err922 := evalNotBoolXu( // `notBool_`(`_==Int_`(I1,I2))
				eval923,
				config, -1)
			if err922 != nil {
				return m.NoResult, err922
			}
			return eval922, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXslashXeqIntXuXuINT", args: []m.K{c1, c2}}
}

func evalLog2Int(c m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.log2
	lbl := m.LblLog2Int // log2Int
	sort := m.SortInt
	if hookRes, hookErr := intHooks.log2(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.log2, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalLog2Int", args: []m.K{c}}
}

func evalIsJSON(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: STRING.String
	if _, t := c.(*m.String); t {
		return m.BoolTrue, nil
	}
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// rule #827
	// source: ? @?
	// {| rule isJSON(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 827, "{| rule isJSON(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #828
	// source: ? @?
	// {| rule isJSON(#KToken(#token("String","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortString { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 828, "{| rule isJSON(#KToken(#token(\"String\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #829
	// source: ? @?
	// {| rule isJSON(`{_}_IELE-DATA`(K0))=>#token("true","Bool") requires isJSONList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlbracketXuXrbracketXuIELEXhyphenDATA && len(kapp0.List) == 1 { // `{_}_IELE-DATA`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval924, err924 := evalIsJSONList( // isJSONList(K0)
			varK0,
			config, -1)
		if err924 != nil {
			return m.NoResult, err924
		}
		if m.IsTrue(eval924) {
			// RHS
			traceRuleApply("FUNC", 829, "{| rule isJSON(`{_}_IELE-DATA`(K0))=>#token(\"true\",\"Bool\") requires isJSONList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #830
	// source: ? @?
	// {| rule isJSON(#KToken(#token("JSON","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJSON { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 830, "{| rule isJSON(#KToken(#token(\"JSON\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #831
	// source: ? @?
	// {| rule isJSON(`_:__IELE-DATA`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isJSONKey(K0),isJSON(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval925, err925 := evalIsJSONKey( // isJSONKey(K0)
			varK0,
			config, -1)
		if err925 != nil {
			return m.NoResult, err925
		}
		eval926, err926 := evalIsJSON( // isJSON(K1)
			varK1,
			config, -1)
		if err926 != nil {
			return m.NoResult, err926
		}
		if (m.IsTrue(eval925)) &&
		   (m.IsTrue(eval926)) {
			// RHS
			traceRuleApply("FUNC", 831, "{| rule isJSON(`_:__IELE-DATA`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isJSONKey(K0),isJSON(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #832
	// source: ? @?
	// {| rule isJSON(`[_]_IELE-DATA`(K0))=>#token("true","Bool") requires isJSONList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlsqbXuXrsqbXuIELEXhyphenDATA && len(kapp0.List) == 1 { // `[_]_IELE-DATA`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval927, err927 := evalIsJSONList( // isJSONList(K0)
			varK0,
			config, -1)
		if err927 != nil {
			return m.NoResult, err927
		}
		if m.IsTrue(eval927) {
			// RHS
			traceRuleApply("FUNC", 832, "{| rule isJSON(`[_]_IELE-DATA`(K0))=>#token(\"true\",\"Bool\") requires isJSONList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #833
	// source: ? @?
	// {| rule isJSON(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 833, "{| rule isJSON(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashstdinXuKXhyphenIO(config m.K, guard int) (m.K, error) {
	// rule #834
	// source: domains.k @921
	// {| rule `#stdin_K-IO`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(595a161d3d44d3c588fcd417f7279ef70547c573e159ef5bfc70692b22149da9) contentStartColumn(8) contentStartLine(921) org.kframework.attributes.Location(Location(921,8,921,19)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 834, "{| rule `#stdin_K-IO`(.KList)=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(595a161d3d44d3c588fcd417f7279ef70547c573e159ef5bfc70692b22149da9) contentStartColumn(8) contentStartLine(921) org.kframework.attributes.Location(Location(921,8,921,19)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return /* rhs KToken */ m.NewIntFromString("0"), nil

}

//var constXhashstdinXuKXhyphenIO K = evalXhashstdinXuKXhyphenIO(m.InternedBottom)

func evalIsMessageCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #835
	// source: ? @?
	// {| rule isMessageCellFragment(#KToken(#token("MessageCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessageCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 835, "{| rule isMessageCellFragment(#KToken(#token(\"MessageCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #836
	// source: ? @?
	// {| rule isMessageCellFragment(`<message>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCellOpt(K0),isTxNonceCellOpt(K1)),isTxGasPriceCellOpt(K2)),isTxGasLimitCellOpt(K3)),isSendtoCellOpt(K4)),isFuncCellOpt(K5)),isValueCellOpt(K6)),isFromCellOpt(K7)),isDataCellOpt(K8)),isArgsCellOpt(K9)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessageXgtXhyphenfragment && len(kapp0.List) == 10 { // `<message>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		// REQUIRES
		eval928, err928 := evalIsMsgIDCellOpt( // isMsgIDCellOpt(K0)
			varK0,
			config, -1)
		if err928 != nil {
			return m.NoResult, err928
		}
		eval929, err929 := evalIsTxNonceCellOpt( // isTxNonceCellOpt(K1)
			varK1,
			config, -1)
		if err929 != nil {
			return m.NoResult, err929
		}
		eval930, err930 := evalIsTxGasPriceCellOpt( // isTxGasPriceCellOpt(K2)
			varK2,
			config, -1)
		if err930 != nil {
			return m.NoResult, err930
		}
		eval931, err931 := evalIsTxGasLimitCellOpt( // isTxGasLimitCellOpt(K3)
			varK3,
			config, -1)
		if err931 != nil {
			return m.NoResult, err931
		}
		eval932, err932 := evalIsSendtoCellOpt( // isSendtoCellOpt(K4)
			varK4,
			config, -1)
		if err932 != nil {
			return m.NoResult, err932
		}
		eval933, err933 := evalIsFuncCellOpt( // isFuncCellOpt(K5)
			varK5,
			config, -1)
		if err933 != nil {
			return m.NoResult, err933
		}
		eval934, err934 := evalIsValueCellOpt( // isValueCellOpt(K6)
			varK6,
			config, -1)
		if err934 != nil {
			return m.NoResult, err934
		}
		eval935, err935 := evalIsFromCellOpt( // isFromCellOpt(K7)
			varK7,
			config, -1)
		if err935 != nil {
			return m.NoResult, err935
		}
		eval936, err936 := evalIsDataCellOpt( // isDataCellOpt(K8)
			varK8,
			config, -1)
		if err936 != nil {
			return m.NoResult, err936
		}
		eval937, err937 := evalIsArgsCellOpt( // isArgsCellOpt(K9)
			varK9,
			config, -1)
		if err937 != nil {
			return m.NoResult, err937
		}
		if (((((((((m.IsTrue(eval928)) &&
		   (m.IsTrue(eval929))) &&
		   (m.IsTrue(eval930))) &&
		   (m.IsTrue(eval931))) &&
		   (m.IsTrue(eval932))) &&
		   (m.IsTrue(eval933))) &&
		   (m.IsTrue(eval934))) &&
		   (m.IsTrue(eval935))) &&
		   (m.IsTrue(eval936))) &&
		   (m.IsTrue(eval937)) {
			// RHS
			traceRuleApply("FUNC", 836, "{| rule isMessageCellFragment(`<message>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCellOpt(K0),isTxNonceCellOpt(K1)),isTxGasPriceCellOpt(K2)),isTxGasLimitCellOpt(K3)),isSendtoCellOpt(K4)),isFuncCellOpt(K5)),isValueCellOpt(K6)),isFromCellOpt(K7)),isDataCellOpt(K8)),isArgsCellOpt(K9)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #837
	// source: ? @?
	// {| rule isMessageCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 837, "{| rule isMessageCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPrecompiledOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #838
	// source: ? @?
	// {| rule isPrecompiledOp(`ECREC_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECRECXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECREC_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 838, "{| rule isPrecompiledOp(`ECREC_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #839
	// source: ? @?
	// {| rule isPrecompiledOp(`RIP160_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRIP160XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `RIP160_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 839, "{| rule isPrecompiledOp(`RIP160_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #840
	// source: ? @?
	// {| rule isPrecompiledOp(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECMULXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 840, "{| rule isPrecompiledOp(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #841
	// source: ? @?
	// {| rule isPrecompiledOp(`SHA256_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHA256XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `SHA256_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 841, "{| rule isPrecompiledOp(`SHA256_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #842
	// source: ? @?
	// {| rule isPrecompiledOp(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECPAIRINGXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 842, "{| rule isPrecompiledOp(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #843
	// source: ? @?
	// {| rule isPrecompiledOp(`ID_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblIDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ID_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 843, "{| rule isPrecompiledOp(`ID_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #844
	// source: ? @?
	// {| rule isPrecompiledOp(`ECADD_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECADDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECADD_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 844, "{| rule isPrecompiledOp(`ECADD_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #845
	// source: ? @?
	// {| rule isPrecompiledOp(#KToken(#token("PrecompiledOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPrecompiledOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 845, "{| rule isPrecompiledOp(#KToken(#token(\"PrecompiledOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #846
	// source: ? @?
	// {| rule isPrecompiledOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 846, "{| rule isPrecompiledOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitNetworkCell(config m.K, guard int) (m.K, error) {
	// rule #847
	// source: ? @?
	// {| rule initNetworkCell(.KList)=>`<network>`(initActiveAccountsCell(.KList),initAccountsCell(.KList),initTxOrderCell(.KList),initTxPendingCell(.KList),initMessagesCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6616ab698de6b230896ae593f2adc152e2ae41ef2b7164413421296ce5cbffb5) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 847, "{| rule initNetworkCell(.KList)=>`<network>`(initActiveAccountsCell(.KList),initAccountsCell(.KList),initTxOrderCell(.KList),initTxPendingCell(.KList),initMessagesCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6616ab698de6b230896ae593f2adc152e2ae41ef2b7164413421296ce5cbffb5) initializer()] |}")
	eval938, err938 := evalInitActiveAccountsCell(config, -1) // initActiveAccountsCell(.KList)
	if err938 != nil {
		return m.NoResult, err938
	}
	eval939, err939 := evalInitAccountsCell(config, -1) // initAccountsCell(.KList)
	if err939 != nil {
		return m.NoResult, err939
	}
	eval940, err940 := evalInitTxOrderCell(config, -1) // initTxOrderCell(.KList)
	if err940 != nil {
		return m.NoResult, err940
	}
	eval941, err941 := evalInitTxPendingCell(config, -1) // initTxPendingCell(.KList)
	if err941 != nil {
		return m.NoResult, err941
	}
	eval942, err942 := evalInitMessagesCell(config, -1) // initMessagesCell(.KList)
	if err942 != nil {
		return m.NoResult, err942
	}
	return &m.KApply{Label: m.LblXltnetworkXgt, List: []m.K{ // as-is <network>
		eval938,
		eval939,
		eval940,
		eval941,
		eval942,
	}}, nil

}

//var constInitNetworkCell K = evalInitNetworkCell(m.InternedBottom)

func evalIsID(c m.K, config m.K, guard int) (m.K, error) {
	// rule #848
	// source: ? @?
	// {| rule isId(#KToken(#token("Id","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortID { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 848, "{| rule isId(#KToken(#token(\"Id\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #849
	// source: ? @?
	// {| rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 849, "{| rule isId(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalUnparseByteStack(c m.K, config m.K, guard int) (m.K, error) {
	// rule #850
	// source: iele-node.k @154
	// {| rule unparseByteStack(B)=>`Bytes2String`(B) requires isBytes(B) ensures #token("true","Bool") [UNIQUE_ID(ec852711edc6d726106559714dddf22e94a0c2f74586d2a6461d499f92f04aa1) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		// REQUIRES precomputed isBytes(B)
		// RHS
		traceRuleApply("FUNC", 850, "{| rule unparseByteStack(B)=>`Bytes2String`(B) requires isBytes(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ec852711edc6d726106559714dddf22e94a0c2f74586d2a6461d499f92f04aa1) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval943, err943 := evalBytes2String( // `Bytes2String`(B)
			varB,
			config, -1)
		if err943 != nil {
			return m.NoResult, err943
		}
		return eval943, nil
	}

	return m.NoResult, &stuckError{funcName: "evalUnparseByteStack", args: []m.K{c}}
}

func evalIsFuncCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #851
	// source: ? @?
	// {| rule isFuncCell(#KToken(#token("FuncCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 851, "{| rule isFuncCell(#KToken(#token(\"FuncCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #852
	// source: ? @?
	// {| rule isFuncCell(`<func>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncXgt && len(kapp0.List) == 1 { // `<func>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval944, err944 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err944 != nil {
			return m.NoResult, err944
		}
		if m.IsTrue(eval944) {
			// RHS
			traceRuleApply("FUNC", 852, "{| rule isFuncCell(`<func>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #853
	// source: ? @?
	// {| rule isFuncCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 853, "{| rule isFuncCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitDifficultyCell(config m.K, guard int) (m.K, error) {
	// rule #854
	// source: ? @?
	// {| rule initDifficultyCell(.KList)=>`<difficulty>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4c03fe8a163a52dc9aeea2d20bf7d13fecf3417b4f843093d971047cbedf446a) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 854, "{| rule initDifficultyCell(.KList)=>`<difficulty>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c03fe8a163a52dc9aeea2d20bf7d13fecf3417b4f843093d971047cbedf446a) initializer()] |}")
	return &m.KApply{Label: m.LblXltdifficultyXgt, List: []m.K{ // as-is <difficulty>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitDifficultyCell K = evalInitDifficultyCell(m.InternedBottom)

func evalInitNparamsCell(config m.K, guard int) (m.K, error) {
	// rule #855
	// source: ? @?
	// {| rule initNparamsCell(.KList)=>`<nparams>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d5bbce7e9be3428d19b5644e6d0ace05342f4fba92107817b71ec3d12946f8c3) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 855, "{| rule initNparamsCell(.KList)=>`<nparams>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5bbce7e9be3428d19b5644e6d0ace05342f4fba92107817b71ec3d12946f8c3) initializer()] |}")
	return &m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitNparamsCell K = evalInitNparamsCell(m.InternedBottom)

func evalInitProgramSizeCell(config m.K, guard int) (m.K, error) {
	// rule #856
	// source: ? @?
	// {| rule initProgramSizeCell(.KList)=>`<programSize>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3c4dc79aaf80969106863ce2fbd47924a9caf0d318d3fa3a6696665dd8a378c7) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 856, "{| rule initProgramSizeCell(.KList)=>`<programSize>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c4dc79aaf80969106863ce2fbd47924a9caf0d318d3fa3a6696665dd8a378c7) initializer()] |}")
	return &m.KApply{Label: m.LblXltprogramSizeXgt, List: []m.K{ // as-is <programSize>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitProgramSizeCell K = evalInitProgramSizeCell(m.InternedBottom)

func evalXhashmainContract(c m.K, config m.K, guard int) (m.K, error) {
	// rule #857
	// source: iele.k @1774
	// {| rule #mainContract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_90,_91,_92),`.List{"contractDefinitionList"}`(.KList)))=>NAME requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(_92),isIeleName(NAME)),isString(_91)),isInt(_90)) ensures #token("true","Bool") [UNIQUE_ID(a8ccd808ab455f74f9f0a15d0ecab9282d5696d4873507adf29391b2adc9c07e) contentStartColumn(10) contentStartLine(1774) org.kframework.attributes.Location(Location(1774,10,1774,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_90,_91,_92),`.List{"contractDefinitionList"}`(.KList))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,_90,_91,_92)
			varNAME := kapp1.List[0] // lhs KVariable NAME
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu92 := kapp1.List[3] // lhs KVariable _92
					if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket && len(kapp2.List) == 0 { // `.List{"contractDefinitionList"}`(.KList)
						// REQUIRES
						eval945, err945 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_92)
							varXu92,
							config, -1)
						if err945 != nil {
							return m.NoResult, err945
						}
						eval946, err946 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err946 != nil {
							return m.NoResult, err946
						}
						if (m.IsTrue(eval945)) &&
						   (m.IsTrue(eval946)) /* && */ /* rhs precomputed isString(_91) */  /* && */ /* rhs precomputed isInt(_90) */  {
							// RHS
							traceRuleApply("FUNC", 857, "{| rule #mainContract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_90,_91,_92),`.List{\"contractDefinitionList\"}`(.KList)))=>NAME requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(_92),isIeleName(NAME)),isString(_91)),isInt(_90)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a8ccd808ab455f74f9f0a15d0ecab9282d5696d4873507adf29391b2adc9c07e) contentStartColumn(10) contentStartLine(1774) org.kframework.attributes.Location(Location(1774,10,1774,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return varNAME, nil
						}
					}
				}
			}
		}
	}

	// rule #858
	// source: iele.k @1775
	// {| rule #mainContract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_76,_77,_78,_79),REST))=>#mainContract(REST) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_76),isInt(_77)),isString(_78)),isTopLevelDefinitions(_79)),isContract(REST)) ensures #token("true","Bool") [UNIQUE_ID(1568dbe4ab8abaf67dd3234376f5fb9759e988931958003248d2dd2352eba9bc) contentStartColumn(10) contentStartLine(1775) org.kframework.attributes.Location(Location(1775,10,1775,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_76,_77,_78,_79),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_76,_77,_78,_79)
			varXu76 := kapp1.List[0] // lhs KVariable _76
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu79 := kapp1.List[3] // lhs KVariable _79
					varREST := kapp0.List[1] // lhs KVariable REST
					// REQUIRES
					eval947, err947 := evalIsIeleName( // isIeleName(_76)
						varXu76,
						config, -1)
					if err947 != nil {
						return m.NoResult, err947
					}
					eval948, err948 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_79)
						varXu79,
						config, -1)
					if err948 != nil {
						return m.NoResult, err948
					}
					eval949, err949 := evalIsContract( // isContract(REST)
						varREST,
						config, -1)
					if err949 != nil {
						return m.NoResult, err949
					}
					if ((m.IsTrue(eval947) /* && */ /* rhs precomputed isInt(_77) */  /* && */ /* rhs precomputed isString(_78) */ ) &&
					   (m.IsTrue(eval948))) &&
					   (m.IsTrue(eval949)) {
						// RHS
						traceRuleApply("FUNC", 858, "{| rule #mainContract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_76,_77,_78,_79),REST))=>#mainContract(REST) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_76),isInt(_77)),isString(_78)),isTopLevelDefinitions(_79)),isContract(REST)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1568dbe4ab8abaf67dd3234376f5fb9759e988931958003248d2dd2352eba9bc) contentStartColumn(10) contentStartLine(1775) org.kframework.attributes.Location(Location(1775,10,1775,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval950, err950 := evalXhashmainContract( // #mainContract(REST)
							varREST,
							config, -1)
						if err950 != nil {
							return m.NoResult, err950
						}
						return eval950, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashmainContract", args: []m.K{c}}
}

func evalInitProgramCell(config m.K, guard int) (m.K, error) {
	// rule #859
	// source: ? @?
	// {| rule initProgramCell(.KList)=>`<program>`(initFunctionsCell(.KList),initFuncIdsCell(.KList),initFuncLabelsCell(.KList),initExportedCell(.KList),initProgramSizeCell(.KList),initContractCodeCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bf7b238e225689b5ff172e80fea7bf3b723577dc2069c81a9ac67cb0fb75f7fc) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 859, "{| rule initProgramCell(.KList)=>`<program>`(initFunctionsCell(.KList),initFuncIdsCell(.KList),initFuncLabelsCell(.KList),initExportedCell(.KList),initProgramSizeCell(.KList),initContractCodeCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bf7b238e225689b5ff172e80fea7bf3b723577dc2069c81a9ac67cb0fb75f7fc) initializer()] |}")
	eval951, err951 := evalInitFunctionsCell(config, -1) // initFunctionsCell(.KList)
	if err951 != nil {
		return m.NoResult, err951
	}
	eval952, err952 := evalInitFuncIDsCell(config, -1) // initFuncIdsCell(.KList)
	if err952 != nil {
		return m.NoResult, err952
	}
	eval953, err953 := evalInitFuncLabelsCell(config, -1) // initFuncLabelsCell(.KList)
	if err953 != nil {
		return m.NoResult, err953
	}
	eval954, err954 := evalInitExportedCell(config, -1) // initExportedCell(.KList)
	if err954 != nil {
		return m.NoResult, err954
	}
	eval955, err955 := evalInitProgramSizeCell(config, -1) // initProgramSizeCell(.KList)
	if err955 != nil {
		return m.NoResult, err955
	}
	eval956, err956 := evalInitContractCodeCell(config, -1) // initContractCodeCell(.KList)
	if err956 != nil {
		return m.NoResult, err956
	}
	return &m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
		eval951,
		eval952,
		eval953,
		eval954,
		eval955,
		eval956,
	}}, nil

}

//var constInitProgramCell K = evalInitProgramCell(m.InternedBottom)

func evalIsOriginCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #860
	// source: ? @?
	// {| rule isOriginCell(#KToken(#token("OriginCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOriginCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 860, "{| rule isOriginCell(#KToken(#token(\"OriginCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #861
	// source: ? @?
	// {| rule isOriginCell(`<origin>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoriginXgt && len(kapp0.List) == 1 { // `<origin>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 861, "{| rule isOriginCell(`<origin>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #862
	// source: ? @?
	// {| rule isOriginCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 862, "{| rule isOriginCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsRevertInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #863
	// source: ? @?
	// {| rule isRevertInst(#KToken(#token("RevertInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRevertInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 863, "{| rule isRevertInst(#KToken(#token(\"RevertInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #864
	// source: ? @?
	// {| rule isRevertInst(`revert__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRevertXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `revert__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval957, err957 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err957 != nil {
			return m.NoResult, err957
		}
		if m.IsTrue(eval957) {
			// RHS
			traceRuleApply("FUNC", 864, "{| rule isRevertInst(`revert__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #865
	// source: ? @?
	// {| rule isRevertInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 865, "{| rule isRevertInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFuncIDCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #866
	// source: ? @?
	// {| rule isFuncIdCell(`<funcId>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncIDXgt && len(kapp0.List) == 1 { // `<funcId>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval958, err958 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err958 != nil {
			return m.NoResult, err958
		}
		if m.IsTrue(eval958) {
			// RHS
			traceRuleApply("FUNC", 866, "{| rule isFuncIdCell(`<funcId>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #867
	// source: ? @?
	// {| rule isFuncIdCell(#KToken(#token("FuncIdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 867, "{| rule isFuncIdCell(#KToken(#token(\"FuncIdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #868
	// source: ? @?
	// {| rule isFuncIdCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 868, "{| rule isFuncIdCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLoadInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #869
	// source: ? @?
	// {| rule isLoadInst(`_=load__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval959, err959 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err959 != nil {
			return m.NoResult, err959
		}
		eval960, err960 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err960 != nil {
			return m.NoResult, err960
		}
		if (m.IsTrue(eval959)) &&
		   (m.IsTrue(eval960)) {
			// RHS
			traceRuleApply("FUNC", 869, "{| rule isLoadInst(`_=load__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #870
	// source: ? @?
	// {| rule isLoadInst(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval961, err961 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err961 != nil {
			return m.NoResult, err961
		}
		eval962, err962 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err962 != nil {
			return m.NoResult, err962
		}
		eval963, err963 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err963 != nil {
			return m.NoResult, err963
		}
		eval964, err964 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err964 != nil {
			return m.NoResult, err964
		}
		if (((m.IsTrue(eval961)) &&
		   (m.IsTrue(eval962))) &&
		   (m.IsTrue(eval963))) &&
		   (m.IsTrue(eval964)) {
			// RHS
			traceRuleApply("FUNC", 870, "{| rule isLoadInst(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #871
	// source: ? @?
	// {| rule isLoadInst(#KToken(#token("LoadInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLoadInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 871, "{| rule isLoadInst(#KToken(#token(\"LoadInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #872
	// source: ? @?
	// {| rule isLoadInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 872, "{| rule isLoadInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashparseByteStack(c m.K, config m.K, guard int) (m.K, error) {
	// rule #873
	// source: data.k @451
	// {| rule #parseByteStack(S)=>`#lambda__`(`replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String"))) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(dabb9f8a888b76d967c670fac1724bf735cb8c951afb46b78cf81cd5e9cb2de1) contentStartColumn(10) contentStartLine(451) org.kframework.attributes.Location(Location(451,10,451,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 873, "{| rule #parseByteStack(S)=>`#lambda__`(`replaceAll(_,_,_)_STRING`(S,#token(\"\\\"0x\\\"\",\"String\"),#token(\"\\\"\\\"\",\"String\"))) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dabb9f8a888b76d967c670fac1724bf735cb8c951afb46b78cf81cd5e9cb2de1) contentStartColumn(10) contentStartLine(451) org.kframework.attributes.Location(Location(451,10,451,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval966, err966 := evalReplaceAllXlparenXuXcommaXuXcommaXuXrparenXuSTRING( // `replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String"))
			varS,
			/* rhs KToken */ m.NewString("0x"),
			/* rhs KToken */ m.NewString(""),
			config, -1)
		if err966 != nil {
			return m.NoResult, err966
		}
		eval965, err965 := evalXhashlambdaXuXu( // `#lambda__`(`replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String")))
			eval966,
			config, -1)
		if err965 != nil {
			return m.NoResult, err965
		}
		return eval965, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseByteStack", args: []m.K{c}}
}

func evalSrandInt(c m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.srand
	lbl := m.LblSrandInt // srandInt
	sort := m.SortK
	if hookRes, hookErr := intHooks.srand(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.srand, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSrandInt", args: []m.K{c}}
}

func evalIntSizesAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #874
	// source: data.k @162
	// {| rule intSizesAux(ARR,I,I,_24)=>#token("0","Int") requires `_andBool_`(`_andBool_`(isInt(I),isSchedule(_24)),isArray(ARR)) ensures #token("true","Bool") [UNIQUE_ID(0b7577d920bb23aa5a36be5737276c1ce9f0011daea330c079f9d62213fbf967) contentStartColumn(10) contentStartLine(162) org.kframework.attributes.Location(Location(162,10,162,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varARR, t := c1.(*m.Array); t && varARR.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if c3.Equals(varI) { // lhs KVariable, which reappears:I
				varXu24 := c4 // lhs KVariable _24
				// REQUIRES
				eval967, err967 := evalIsSchedule( // isSchedule(_24)
					varXu24,
					config, -1)
				if err967 != nil {
					return m.NoResult, err967
				}
				if /* rhs precomputed isInt(I) */ /* && */
				   m.IsTrue(eval967) /* && */ /* rhs precomputed isArray(ARR) */  {
					// RHS
					traceRuleApply("FUNC", 874, "{| rule intSizesAux(ARR,I,I,_24)=>#token(\"0\",\"Int\") requires `_andBool_`(`_andBool_`(isInt(I),isSchedule(_24)),isArray(ARR)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b7577d920bb23aa5a36be5737276c1ce9f0011daea330c079f9d62213fbf967) contentStartColumn(10) contentStartLine(162) org.kframework.attributes.Location(Location(162,10,162,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.NewIntFromString("0"), nil
				}
			}
		}
	}

	// rule #875
	// source: data.k @163
	// {| rule intSizesAux(ARR,I,J,SCHED)=>`_+Int_`(intSize(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J))),intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isInt(J)),isSchedule(SCHED)),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(89dd0acf433e755209ba7b0cc758efdc42295700a20c4106c56d79c95808f52d) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,164,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K) owise()] |}
	// LHS
	if varARR, t := c1.(*m.Array); t && varARR.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varJ, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				varSCHED := c4 // lhs KVariable SCHED
				// REQUIRES
				eval968, err968 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err968 != nil {
					return m.NoResult, err968
				}
				eval969, err969 := evalXuXeqXslashXeqKXu( // `_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))
					varSCHED,
					&m.KApply{Label: m.LblALBEXuIELEXhyphenCONSTANTS, List: []m.K{ // as-is ALBE_IELE-CONSTANTS
					}},
					config, -1)
				if err969 != nil {
					return m.NoResult, err969
				}
				if (/* rhs precomputed isInt(I) && isArray(ARR) && isInt(J) */ /* && */
				   m.IsTrue(eval968)) &&
				   (m.IsTrue(eval969)) {
					// RHS
					traceRuleApply("FUNC", 875, "{| rule intSizesAux(ARR,I,J,SCHED)=>`_+Int_`(intSize(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J))),intSizesAux(ARR,I,`_+Int_`(J,#token(\"1\",\"Int\")),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isInt(J)),isSchedule(SCHED)),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(89dd0acf433e755209ba7b0cc758efdc42295700a20c4106c56d79c95808f52d) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,164,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K) owise()] |}")
					eval973, err973 := evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(ARR,J)
						varARR,
						varJ,
						config, -1)
					if err973 != nil {
						return m.NoResult, err973
					}
					eval972, err972 := evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(ARR,J))
						eval973,
						config, -1)
					if err972 != nil {
						return m.NoResult, err972
					}
					eval971, err971 := evalIntSize( // intSize(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J)))
						eval972,
						config, -1)
					if err971 != nil {
						return m.NoResult, err971
					}
					eval975, err975 := evalXuXplusIntXu( // `_+Int_`(J,#token("1","Int"))
						varJ,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err975 != nil {
						return m.NoResult, err975
					}
					eval974, err974 := evalIntSizesAux( // intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),SCHED)
						varARR,
						varI,
						eval975,
						varSCHED,
						config, -1)
					if err974 != nil {
						return m.NoResult, err974
					}
					eval970, err970 := evalXuXplusIntXu( // `_+Int_`(intSize(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J))),intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),SCHED))
						eval971,
						eval974,
						config, -1)
					if err970 != nil {
						return m.NoResult, err970
					}
					return eval970, nil
				}
			}
		}
	}

	// rule #876
	// source: data.k @165
	// {| rule intSizesAux(ARR,I,J,`ALBE_IELE-CONSTANTS`(.KList))=>`_+Int_`(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J)),intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),`ALBE_IELE-CONSTANTS`(.KList))) requires `_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isInt(J)) ensures #token("true","Bool") [UNIQUE_ID(6b889a912bf3b167624d0cd0da65dbce0b5a8a176fe08e7571e0876b4aa1dd0f) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varARR, t := c1.(*m.Array); t && varARR.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varJ, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp0, t := c4.(*m.KApply); t && kapp0.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
					// REQUIRES precomputed isInt(I) && isArray(ARR) && isInt(J)
					// RHS
					traceRuleApply("FUNC", 876, "{| rule intSizesAux(ARR,I,J,`ALBE_IELE-CONSTANTS`(.KList))=>`_+Int_`(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J)),intSizesAux(ARR,I,`_+Int_`(J,#token(\"1\",\"Int\")),`ALBE_IELE-CONSTANTS`(.KList))) requires `_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isInt(J)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6b889a912bf3b167624d0cd0da65dbce0b5a8a176fe08e7571e0876b4aa1dd0f) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval978, err978 := evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(ARR,J)
						varARR,
						varJ,
						config, -1)
					if err978 != nil {
						return m.NoResult, err978
					}
					eval977, err977 := evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(ARR,J))
						eval978,
						config, -1)
					if err977 != nil {
						return m.NoResult, err977
					}
					eval980, err980 := evalXuXplusIntXu( // `_+Int_`(J,#token("1","Int"))
						varJ,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err980 != nil {
						return m.NoResult, err980
					}
					eval979, err979 := evalIntSizesAux( // intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),`ALBE_IELE-CONSTANTS`(.KList))
						varARR,
						varI,
						eval980,
						&m.KApply{Label: m.LblALBEXuIELEXhyphenCONSTANTS, List: []m.K{ // as-is ALBE_IELE-CONSTANTS
						}},
						config, -1)
					if err979 != nil {
						return m.NoResult, err979
					}
					eval976, err976 := evalXuXplusIntXu( // `_+Int_`(getInt(`_[_]_ARRAY-SYNTAX`(ARR,J)),intSizesAux(ARR,I,`_+Int_`(J,#token("1","Int")),`ALBE_IELE-CONSTANTS`(.KList)))
						eval977,
						eval979,
						config, -1)
					if err976 != nil {
						return m.NoResult, err976
					}
					return eval976, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIntSizesAux", args: []m.K{c1, c2, c3, c4}}
}

func evalXhashaddrXquesXlparenXuXrparenXuIELEXhyphenINFRASTRUCTURE(c m.K, config m.K, guard int) (m.K, error) {
	// rule #877
	// source: iele.k @413
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`_=load__IELE-COMMON`(REG,chop(CELL)) requires `_andBool_`(isInt(CELL),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(c5b0c319698386c06e7cf8c3f7bbb367e65cf69e9af7f5e05c7bff5af6ce40c4) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(REG,CELL)
		varREG := kapp0.List[0] // lhs KVariable REG
		if varCELL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval981, err981 := evalIsLValue( // isLValue(REG)
				varREG,
				config, -1)
			if err981 != nil {
				return m.NoResult, err981
			}
			if /* rhs precomputed isInt(CELL) */ /* && */
			   m.IsTrue(eval981) {
				// RHS
				traceRuleApply("FUNC", 877, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`_=load__IELE-COMMON`(REG,chop(CELL)) requires `_andBool_`(isInt(CELL),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c5b0c319698386c06e7cf8c3f7bbb367e65cf69e9af7f5e05c7bff5af6ce40c4) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval982, err982 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err982 != nil {
					return m.NoResult, err982
				}
				return &m.KApply{Label: m.LblXuXeqloadXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=load__IELE-COMMON
					varREG,
					eval982,
				}}, nil
			}
		}
	}

	// rule #878
	// source: iele.k @407
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(REG1,REG2,W0,REGS1,W1))=>`_,_=copycreate_(_)send__IELE-COMMON`(REG1,REG2,#addr(W0),REGS1,W1) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS1),isLValue(REG1)),isLValue(REG2)),isOperand(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(dbaef0467187f000641e2c0a3ee94ae5203c60f3caad0daa51630a9a4b90bb6a) contentStartColumn(10) contentStartLine(407) org.kframework.attributes.Location(Location(407,10,407,130)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(REG1,REG2,W0,REGS1,W1)
		varREG1 := kapp0.List[0] // lhs KVariable REG1
		varREG2 := kapp0.List[1] // lhs KVariable REG2
		if varW0, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varREGS1 := kapp0.List[3] // lhs KVariable REGS1
			varW1 := kapp0.List[4] // lhs KVariable W1
			// REQUIRES
			eval983, err983 := evalIsOperands( // isOperands(REGS1)
				varREGS1,
				config, -1)
			if err983 != nil {
				return m.NoResult, err983
			}
			eval984, err984 := evalIsLValue( // isLValue(REG1)
				varREG1,
				config, -1)
			if err984 != nil {
				return m.NoResult, err984
			}
			eval985, err985 := evalIsLValue( // isLValue(REG2)
				varREG2,
				config, -1)
			if err985 != nil {
				return m.NoResult, err985
			}
			eval986, err986 := evalIsOperand( // isOperand(W1)
				varW1,
				config, -1)
			if err986 != nil {
				return m.NoResult, err986
			}
			if (((m.IsTrue(eval983)) &&
			   (m.IsTrue(eval984))) &&
			   (m.IsTrue(eval985))) &&
			   (m.IsTrue(eval986)) /* && */ /* rhs precomputed isInt(W0) */  {
				// RHS
				traceRuleApply("FUNC", 878, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(REG1,REG2,W0,REGS1,W1))=>`_,_=copycreate_(_)send__IELE-COMMON`(REG1,REG2,#addr(W0),REGS1,W1) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS1),isLValue(REG1)),isLValue(REG2)),isOperand(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dbaef0467187f000641e2c0a3ee94ae5203c60f3caad0daa51630a9a4b90bb6a) contentStartColumn(10) contentStartLine(407) org.kframework.attributes.Location(Location(407,10,407,130)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval987, err987 := evalXhashaddr( // #addr(W0)
					varW0,
					config, -1)
				if err987 != nil {
					return m.NoResult, err987
				}
				return &m.KApply{Label: m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _,_=copycreate_(_)send__IELE-COMMON
					varREG1,
					varREG2,
					eval987,
					varREGS1,
					varW1,
				}}, nil
			}
		}
	}

	// rule #879
	// source: iele.k @415
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`store_,__IELE-COMMON`(VALUE,CELL))=>`store_,__IELE-COMMON`(VALUE,chop(CELL)) requires `_andBool_`(isOperand(VALUE),isInt(CELL)) ensures #token("true","Bool") [UNIQUE_ID(458ec43bff89191fc8707ad040d8f58d94da44dea3ac015f457a126913927da7) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(VALUE,CELL)
		varVALUE := kapp0.List[0] // lhs KVariable VALUE
		if varCELL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval988, err988 := evalIsOperand( // isOperand(VALUE)
				varVALUE,
				config, -1)
			if err988 != nil {
				return m.NoResult, err988
			}
			if m.IsTrue(eval988) /* && */ /* rhs precomputed isInt(CELL) */  {
				// RHS
				traceRuleApply("FUNC", 879, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`store_,__IELE-COMMON`(VALUE,CELL))=>`store_,__IELE-COMMON`(VALUE,chop(CELL)) requires `_andBool_`(isOperand(VALUE),isInt(CELL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(458ec43bff89191fc8707ad040d8f58d94da44dea3ac015f457a126913927da7) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval989, err989 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err989 != nil {
					return m.NoResult, err989
				}
				return &m.KApply{Label: m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is store_,__IELE-COMMON
					varVALUE,
					eval989,
				}}, nil
			}
		}
	}

	// rule #880
	// source: iele.k @408
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(W))=>`selfdestruct__IELE-COMMON`(#addr(W)) requires isInt(W) ensures #token("true","Bool") [UNIQUE_ID(267d191e0690cdef8505a59d22bac7e33f5ed2d6eac965b5c151d1582183e264) contentStartColumn(10) contentStartLine(408) org.kframework.attributes.Location(Location(408,10,408,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(W)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(W)
			// RHS
			traceRuleApply("FUNC", 880, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(W))=>`selfdestruct__IELE-COMMON`(#addr(W)) requires isInt(W) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(267d191e0690cdef8505a59d22bac7e33f5ed2d6eac965b5c151d1582183e264) contentStartColumn(10) contentStartLine(408) org.kframework.attributes.Location(Location(408,10,408,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval990, err990 := evalXhashaddr( // #addr(W)
				varW,
				config, -1)
			if err990 != nil {
				return m.NoResult, err990
			}
			return &m.KApply{Label: m.LblSelfdestructXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is selfdestruct__IELE-COMMON
				eval990,
			}}, nil
		}
	}

	// rule #881
	// source: iele.k @411
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(REG,LABEL,W0))=>`_=calladdress_at__IELE-COMMON`(REG,LABEL,#addr(W0)) requires `_andBool_`(`_andBool_`(isLValue(REG),isGlobalName(LABEL)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(69f1a31ea2ac251709234c0895596b9d9a32154262e1d52e599a15f50ffc2b20) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(REG,LABEL,W0)
		varREG := kapp0.List[0] // lhs KVariable REG
		varLABEL := kapp0.List[1] // lhs KVariable LABEL
		if varW0, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval991, err991 := evalIsLValue( // isLValue(REG)
				varREG,
				config, -1)
			if err991 != nil {
				return m.NoResult, err991
			}
			eval992, err992 := evalIsGlobalName( // isGlobalName(LABEL)
				varLABEL,
				config, -1)
			if err992 != nil {
				return m.NoResult, err992
			}
			if (m.IsTrue(eval991)) &&
			   (m.IsTrue(eval992)) /* && */ /* rhs precomputed isInt(W0) */  {
				// RHS
				traceRuleApply("FUNC", 881, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(REG,LABEL,W0))=>`_=calladdress_at__IELE-COMMON`(REG,LABEL,#addr(W0)) requires `_andBool_`(`_andBool_`(isLValue(REG),isGlobalName(LABEL)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(69f1a31ea2ac251709234c0895596b9d9a32154262e1d52e599a15f50ffc2b20) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval993, err993 := evalXhashaddr( // #addr(W0)
					varW0,
					config, -1)
				if err993 != nil {
					return m.NoResult, err993
				}
				return &m.KApply{Label: m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=calladdress_at__IELE-COMMON
					varREG,
					varLABEL,
					eval993,
				}}, nil
			}
		}
	}

	// rule #882
	// source: iele.k @409
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1,W2))=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(REGS1,LABEL,#addr(W0),REGS2,W1,W2) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS2),isOperand(W1)),isOperand(LABEL)),isLValues(REGS1)),isInt(W0)),isOperand(W2)) ensures #token("true","Bool") [UNIQUE_ID(8ce6f0ff5c0d6a1dde14634f631c14b6e7cd727393ece5cb2ba22ec333a85804) contentStartColumn(10) contentStartLine(409) org.kframework.attributes.Location(Location(409,10,409,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1,W2)
		varREGS1 := kapp0.List[0] // lhs KVariable REGS1
		varLABEL := kapp0.List[1] // lhs KVariable LABEL
		if varW0, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varREGS2 := kapp0.List[3] // lhs KVariable REGS2
			varW1 := kapp0.List[4] // lhs KVariable W1
			varW2 := kapp0.List[5] // lhs KVariable W2
			// REQUIRES
			eval994, err994 := evalIsOperands( // isOperands(REGS2)
				varREGS2,
				config, -1)
			if err994 != nil {
				return m.NoResult, err994
			}
			eval995, err995 := evalIsOperand( // isOperand(W1)
				varW1,
				config, -1)
			if err995 != nil {
				return m.NoResult, err995
			}
			eval996, err996 := evalIsOperand( // isOperand(LABEL)
				varLABEL,
				config, -1)
			if err996 != nil {
				return m.NoResult, err996
			}
			eval997, err997 := evalIsLValues( // isLValues(REGS1)
				varREGS1,
				config, -1)
			if err997 != nil {
				return m.NoResult, err997
			}
			eval998, err998 := evalIsOperand( // isOperand(W2)
				varW2,
				config, -1)
			if err998 != nil {
				return m.NoResult, err998
			}
			if ((((m.IsTrue(eval994)) &&
			   (m.IsTrue(eval995))) &&
			   (m.IsTrue(eval996))) &&
			   (m.IsTrue(eval997)) /* && */ /* rhs precomputed isInt(W0) */ ) &&
			   (m.IsTrue(eval998)) {
				// RHS
				traceRuleApply("FUNC", 882, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1,W2))=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(REGS1,LABEL,#addr(W0),REGS2,W1,W2) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS2),isOperand(W1)),isOperand(LABEL)),isLValues(REGS1)),isInt(W0)),isOperand(W2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ce6f0ff5c0d6a1dde14634f631c14b6e7cd727393ece5cb2ba22ec333a85804) contentStartColumn(10) contentStartLine(409) org.kframework.attributes.Location(Location(409,10,409,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval999, err999 := evalXhashaddr( // #addr(W0)
					varW0,
					config, -1)
				if err999 != nil {
					return m.NoResult, err999
				}
				return &m.KApply{Label: m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_at_(_)send_,gaslimit__IELE-COMMON
					varREGS1,
					varLABEL,
					eval999,
					varREGS2,
					varW1,
					varW2,
				}}, nil
			}
		}
	}

	// rule #883
	// source: iele.k @406
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(W,`.List{"operandList"}`(.KList))))=>`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(#addr(W),`.List{"operandList"}`(.KList))) requires `_andBool_`(isInt(W),isLValues(REG)) ensures #token("true","Bool") [UNIQUE_ID(fd663ff39b19dffdfcf9731fc0c62d4c1b2d07386d07a5175d9661c3748c6290) contentStartColumn(10) contentStartLine(406) org.kframework.attributes.Location(Location(406,10,406,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(W,`.List{"operandList"}`(.KList)))
		varREG := kapp0.List[0] // lhs KVariable REG
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(#token("iele.extcodesize","IeleName"))
			if kapp1.List[0].Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.extcodesize"}) { // #token("iele.extcodesize","IeleName")
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblOperandList && len(kapp2.List) == 2 { // operandList(W,`.List{"operandList"}`(.KList))
					if varW, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp3.List) == 0 { // `.List{"operandList"}`(.KList)
							// REQUIRES
							eval1000, err1000 := evalIsLValues( // isLValues(REG)
								varREG,
								config, -1)
							if err1000 != nil {
								return m.NoResult, err1000
							}
							if /* rhs precomputed isInt(W) */ /* && */
							   m.IsTrue(eval1000) {
								// RHS
								traceRuleApply("FUNC", 883, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(W,`.List{\"operandList\"}`(.KList))))=>`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token(\"iele.extcodesize\",\"IeleName\")),operandList(#addr(W),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(isInt(W),isLValues(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fd663ff39b19dffdfcf9731fc0c62d4c1b2d07386d07a5175d9661c3748c6290) contentStartColumn(10) contentStartLine(406) org.kframework.attributes.Location(Location(406,10,406,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval1001, err1001 := evalXhashaddr( // #addr(W)
									varW,
									config, -1)
								if err1001 != nil {
									return m.NoResult, err1001
								}
								return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
									varREG,
									&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
										/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.extcodesize"},
									}},
									&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
										eval1001,
										&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
										}},
									}},
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #884
	// source: iele.k @417
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`log__IELE-COMMON`(CELL))=>`log__IELE-COMMON`(chop(CELL)) requires isInt(CELL) ensures #token("true","Bool") [UNIQUE_ID(e3336d259521a8f719ffd2c8e50c21f7d6170e4d2bd866a7ffa78db515dbaf2d) contentStartColumn(10) contentStartLine(417) org.kframework.attributes.Location(Location(417,10,417,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(CELL)
		if varCELL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(CELL)
			// RHS
			traceRuleApply("FUNC", 884, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`log__IELE-COMMON`(CELL))=>`log__IELE-COMMON`(chop(CELL)) requires isInt(CELL) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e3336d259521a8f719ffd2c8e50c21f7d6170e4d2bd866a7ffa78db515dbaf2d) contentStartColumn(10) contentStartLine(417) org.kframework.attributes.Location(Location(417,10,417,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1002, err1002 := evalChop( // chop(CELL)
				varCELL,
				config, -1)
			if err1002 != nil {
				return m.NoResult, err1002
			}
			return &m.KApply{Label: m.LblLogXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log__IELE-COMMON
				eval1002,
			}}, nil
		}
	}

	// rule #885
	// source: iele.k @412
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`_=load_,_,__IELE-COMMON`(REG,chop(CELL),OFFSET,WIDTH) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(CELL),isOperand(OFFSET)),isLValue(REG)),isOperand(WIDTH)) ensures #token("true","Bool") [UNIQUE_ID(d628b7a813657a4d886baa8ec5c0e0361690fa3fbfd1c98bf3384093eeaa94c1) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH)
		varREG := kapp0.List[0] // lhs KVariable REG
		if varCELL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varOFFSET := kapp0.List[2] // lhs KVariable OFFSET
			varWIDTH := kapp0.List[3] // lhs KVariable WIDTH
			// REQUIRES
			eval1003, err1003 := evalIsOperand( // isOperand(OFFSET)
				varOFFSET,
				config, -1)
			if err1003 != nil {
				return m.NoResult, err1003
			}
			eval1004, err1004 := evalIsLValue( // isLValue(REG)
				varREG,
				config, -1)
			if err1004 != nil {
				return m.NoResult, err1004
			}
			eval1005, err1005 := evalIsOperand( // isOperand(WIDTH)
				varWIDTH,
				config, -1)
			if err1005 != nil {
				return m.NoResult, err1005
			}
			if ((/* rhs precomputed isInt(CELL) */ /* && */
			   m.IsTrue(eval1003)) &&
			   (m.IsTrue(eval1004))) &&
			   (m.IsTrue(eval1005)) {
				// RHS
				traceRuleApply("FUNC", 885, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`_=load_,_,__IELE-COMMON`(REG,chop(CELL),OFFSET,WIDTH) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(CELL),isOperand(OFFSET)),isLValue(REG)),isOperand(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d628b7a813657a4d886baa8ec5c0e0361690fa3fbfd1c98bf3384093eeaa94c1) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,116)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1006, err1006 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err1006 != nil {
					return m.NoResult, err1006
				}
				return &m.KApply{Label: m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=load_,_,__IELE-COMMON
					varREG,
					eval1006,
					varOFFSET,
					varWIDTH,
				}}, nil
			}
		}
	}

	// rule #886
	// source: iele.k @414
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH))=>`store_,_,_,__IELE-COMMON`(VALUE,chop(CELL),OFFSET,WIDTH) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),isInt(CELL)),isOperand(OFFSET)),isOperand(WIDTH)) ensures #token("true","Bool") [UNIQUE_ID(0135a2ec1b5da9eefc025cafed5d0ba3b8fbb69c824daa4818d3aa79031f03c3) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH)
		varVALUE := kapp0.List[0] // lhs KVariable VALUE
		if varCELL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varOFFSET := kapp0.List[2] // lhs KVariable OFFSET
			varWIDTH := kapp0.List[3] // lhs KVariable WIDTH
			// REQUIRES
			eval1007, err1007 := evalIsOperand( // isOperand(VALUE)
				varVALUE,
				config, -1)
			if err1007 != nil {
				return m.NoResult, err1007
			}
			eval1008, err1008 := evalIsOperand( // isOperand(OFFSET)
				varOFFSET,
				config, -1)
			if err1008 != nil {
				return m.NoResult, err1008
			}
			eval1009, err1009 := evalIsOperand( // isOperand(WIDTH)
				varWIDTH,
				config, -1)
			if err1009 != nil {
				return m.NoResult, err1009
			}
			if ((m.IsTrue(eval1007) /* && */ /* rhs precomputed isInt(CELL) */ ) &&
			   (m.IsTrue(eval1008))) &&
			   (m.IsTrue(eval1009)) {
				// RHS
				traceRuleApply("FUNC", 886, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH))=>`store_,_,_,__IELE-COMMON`(VALUE,chop(CELL),OFFSET,WIDTH) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),isInt(CELL)),isOperand(OFFSET)),isOperand(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0135a2ec1b5da9eefc025cafed5d0ba3b8fbb69c824daa4818d3aa79031f03c3) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1010, err1010 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err1010 != nil {
					return m.NoResult, err1010
				}
				return &m.KApply{Label: m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is store_,_,_,__IELE-COMMON
					varVALUE,
					eval1010,
					varOFFSET,
					varWIDTH,
				}}, nil
			}
		}
	}

	// rule #887
	// source: iele.k @416
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,CELL))=>`_=sha3__IELE-COMMON`(REG,chop(CELL)) requires `_andBool_`(isInt(CELL),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(aafa253c57ba9e66204372901c4af68b18b14ab4bc1e06dee336fb1894f7ccdb) contentStartColumn(10) contentStartLine(416) org.kframework.attributes.Location(Location(416,10,416,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(REG,CELL)
		varREG := kapp0.List[0] // lhs KVariable REG
		if varCELL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1011, err1011 := evalIsLValue( // isLValue(REG)
				varREG,
				config, -1)
			if err1011 != nil {
				return m.NoResult, err1011
			}
			if /* rhs precomputed isInt(CELL) */ /* && */
			   m.IsTrue(eval1011) {
				// RHS
				traceRuleApply("FUNC", 887, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,CELL))=>`_=sha3__IELE-COMMON`(REG,chop(CELL)) requires `_andBool_`(isInt(CELL),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aafa253c57ba9e66204372901c4af68b18b14ab4bc1e06dee336fb1894f7ccdb) contentStartColumn(10) contentStartLine(416) org.kframework.attributes.Location(Location(416,10,416,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1012, err1012 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err1012 != nil {
					return m.NoResult, err1012
				}
				return &m.KApply{Label: m.LblXuXeqsha3XuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=sha3__IELE-COMMON
					varREG,
					eval1012,
				}}, nil
			}
		}
	}

	// rule #888
	// source: iele.k @418
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(CELL,ARGS))=>`log_,__IELE-COMMON`(chop(CELL),ARGS) requires `_andBool_`(isInt(CELL),isNonEmptyOperands(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(0aa652567e6f4c09ae98efb7ca1273d4bcb872243246c141cfbed95527ed91a7) contentStartColumn(10) contentStartLine(418) org.kframework.attributes.Location(Location(418,10,418,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(CELL,ARGS)
		if varCELL, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varARGS := kapp0.List[1] // lhs KVariable ARGS
			// REQUIRES
			eval1013, err1013 := evalIsNonEmptyOperands( // isNonEmptyOperands(ARGS)
				varARGS,
				config, -1)
			if err1013 != nil {
				return m.NoResult, err1013
			}
			if /* rhs precomputed isInt(CELL) */ /* && */
			   m.IsTrue(eval1013) {
				// RHS
				traceRuleApply("FUNC", 888, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(CELL,ARGS))=>`log_,__IELE-COMMON`(chop(CELL),ARGS) requires `_andBool_`(isInt(CELL),isNonEmptyOperands(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0aa652567e6f4c09ae98efb7ca1273d4bcb872243246c141cfbed95527ed91a7) contentStartColumn(10) contentStartLine(418) org.kframework.attributes.Location(Location(418,10,418,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1014, err1014 := evalChop( // chop(CELL)
					varCELL,
					config, -1)
				if err1014 != nil {
					return m.NoResult, err1014
				}
				return &m.KApply{Label: m.LblLogXuXcommaXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is log_,__IELE-COMMON
					eval1014,
					varARGS,
				}}, nil
			}
		}
	}

	// rule #889
	// source: iele.k @405
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(W,`.List{"operandList"}`(.KList))))=>`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(#addr(W),`.List{"operandList"}`(.KList))) requires `_andBool_`(isInt(W),isLValues(REG)) ensures #token("true","Bool") [UNIQUE_ID(d3e3f6256c983005fa0b1487d3a7e5d5a2db1730b7d3ed5d0b9615d91b65eff5) contentStartColumn(10) contentStartLine(405) org.kframework.attributes.Location(Location(405,10,405,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(W,`.List{"operandList"}`(.KList)))
		varREG := kapp0.List[0] // lhs KVariable REG
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(#token("iele.balance","IeleName"))
			if kapp1.List[0].Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.balance"}) { // #token("iele.balance","IeleName")
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblOperandList && len(kapp2.List) == 2 { // operandList(W,`.List{"operandList"}`(.KList))
					if varW, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp3.List) == 0 { // `.List{"operandList"}`(.KList)
							// REQUIRES
							eval1015, err1015 := evalIsLValues( // isLValues(REG)
								varREG,
								config, -1)
							if err1015 != nil {
								return m.NoResult, err1015
							}
							if /* rhs precomputed isInt(W) */ /* && */
							   m.IsTrue(eval1015) {
								// RHS
								traceRuleApply("FUNC", 889, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),operandList(W,`.List{\"operandList\"}`(.KList))))=>`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token(\"iele.balance\",\"IeleName\")),operandList(#addr(W),`.List{\"operandList\"}`(.KList))) requires `_andBool_`(isInt(W),isLValues(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3e3f6256c983005fa0b1487d3a7e5d5a2db1730b7d3ed5d0b9615d91b65eff5) contentStartColumn(10) contentStartLine(405) org.kframework.attributes.Location(Location(405,10,405,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval1016, err1016 := evalXhashaddr( // #addr(W)
									varW,
									config, -1)
								if err1016 != nil {
									return m.NoResult, err1016
								}
								return &m.KApply{Label: m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=call_(_)_IELE-COMMON
									varREG,
									&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
										/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.balance"},
									}},
									&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
										eval1016,
										&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
										}},
									}},
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #890
	// source: iele.k @410
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1))=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(REGS1,LABEL,#addr(W0),REGS2,W1) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS2),isOperand(W1)),isOperand(LABEL)),isLValues(REGS1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(4b36f5f487d8b39ed5d3fe712a08dda58e2aba1d995a069cc12aff47a7612b93) contentStartColumn(10) contentStartLine(410) org.kframework.attributes.Location(Location(410,10,410,137)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1)
		varREGS1 := kapp0.List[0] // lhs KVariable REGS1
		varLABEL := kapp0.List[1] // lhs KVariable LABEL
		if varW0, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varREGS2 := kapp0.List[3] // lhs KVariable REGS2
			varW1 := kapp0.List[4] // lhs KVariable W1
			// REQUIRES
			eval1017, err1017 := evalIsOperands( // isOperands(REGS2)
				varREGS2,
				config, -1)
			if err1017 != nil {
				return m.NoResult, err1017
			}
			eval1018, err1018 := evalIsOperand( // isOperand(W1)
				varW1,
				config, -1)
			if err1018 != nil {
				return m.NoResult, err1018
			}
			eval1019, err1019 := evalIsOperand( // isOperand(LABEL)
				varLABEL,
				config, -1)
			if err1019 != nil {
				return m.NoResult, err1019
			}
			eval1020, err1020 := evalIsLValues( // isLValues(REGS1)
				varREGS1,
				config, -1)
			if err1020 != nil {
				return m.NoResult, err1020
			}
			if (((m.IsTrue(eval1017)) &&
			   (m.IsTrue(eval1018))) &&
			   (m.IsTrue(eval1019))) &&
			   (m.IsTrue(eval1020)) /* && */ /* rhs precomputed isInt(W0) */  {
				// RHS
				traceRuleApply("FUNC", 890, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(REGS1,LABEL,W0,REGS2,W1))=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(REGS1,LABEL,#addr(W0),REGS2,W1) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(REGS2),isOperand(W1)),isOperand(LABEL)),isLValues(REGS1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4b36f5f487d8b39ed5d3fe712a08dda58e2aba1d995a069cc12aff47a7612b93) contentStartColumn(10) contentStartLine(410) org.kframework.attributes.Location(Location(410,10,410,137)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1021, err1021 := evalXhashaddr( // #addr(W0)
					varW0,
					config, -1)
				if err1021 != nil {
					return m.NoResult, err1021
				}
				return &m.KApply{Label: m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _=staticcall_at_(_)gaslimit__IELE-COMMON
					varREGS1,
					varLABEL,
					eval1021,
					varREGS2,
					varW1,
				}}, nil
			}
		}
	}

	// rule #891
	// source: iele.k @419
	// {| rule `#addr?(_)_IELE-INFRASTRUCTURE`(OP)=>OP requires isInstruction(OP) ensures #token("true","Bool") [UNIQUE_ID(7cbccf9c43b5779c9fea08ea5204faa1e76ccbf07c6bd8d40238403f06c30715) contentStartColumn(10) contentStartLine(419) org.kframework.attributes.Location(Location(419,10,419,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c // lhs KVariable OP
		// REQUIRES
		eval1022, err1022 := evalIsInstruction( // isInstruction(OP)
			varOP,
			config, -1)
		if err1022 != nil {
			return m.NoResult, err1022
		}
		if m.IsTrue(eval1022) {
			// RHS
			traceRuleApply("FUNC", 891, "{| rule `#addr?(_)_IELE-INFRASTRUCTURE`(OP)=>OP requires isInstruction(OP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7cbccf9c43b5779c9fea08ea5204faa1e76ccbf07c6bd8d40238403f06c30715) contentStartColumn(10) contentStartLine(419) org.kframework.attributes.Location(Location(419,10,419,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return varOP, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashaddrXquesXlparenXuXrparenXuIELEXhyphenINFRASTRUCTURE", args: []m.K{c}}
}

func evalIsLocalMemCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #892
	// source: ? @?
	// {| rule isLocalMemCellOpt(noLocalMemCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoLocalMemCell && len(kapp0.List) == 0 { // noLocalMemCell(.KList)
		// RHS
		traceRuleApply("FUNC", 892, "{| rule isLocalMemCellOpt(noLocalMemCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #893
	// source: ? @?
	// {| rule isLocalMemCellOpt(`<localMem>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalMemXgt && len(kapp0.List) == 1 { // `<localMem>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 893, "{| rule isLocalMemCellOpt(`<localMem>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #894
	// source: ? @?
	// {| rule isLocalMemCellOpt(#KToken(#token("LocalMemCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalMemCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 894, "{| rule isLocalMemCellOpt(#KToken(#token(\"LocalMemCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #895
	// source: ? @?
	// {| rule isLocalMemCellOpt(#KToken(#token("LocalMemCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalMemCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 895, "{| rule isLocalMemCellOpt(#KToken(#token(\"LocalMemCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #896
	// source: ? @?
	// {| rule isLocalMemCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 896, "{| rule isLocalMemCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLogDataCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #897
	// source: ? @?
	// {| rule isLogDataCellOpt(noLogDataCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoLogDataCell && len(kapp0.List) == 0 { // noLogDataCell(.KList)
		// RHS
		traceRuleApply("FUNC", 897, "{| rule isLogDataCellOpt(noLogDataCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #898
	// source: ? @?
	// {| rule isLogDataCellOpt(#KToken(#token("LogDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 898, "{| rule isLogDataCellOpt(#KToken(#token(\"LogDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #899
	// source: ? @?
	// {| rule isLogDataCellOpt(`<logData>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlogDataXgt && len(kapp0.List) == 1 { // `<logData>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 899, "{| rule isLogDataCellOpt(`<logData>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #900
	// source: ? @?
	// {| rule isLogDataCellOpt(#KToken(#token("LogDataCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogDataCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 900, "{| rule isLogDataCellOpt(#KToken(#token(\"LogDataCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #901
	// source: ? @?
	// {| rule isLogDataCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 901, "{| rule isLogDataCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGasUsedCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #902
	// source: ? @?
	// {| rule isGasUsedCellOpt(#KToken(#token("GasUsedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasUsedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 902, "{| rule isGasUsedCellOpt(#KToken(#token(\"GasUsedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #903
	// source: ? @?
	// {| rule isGasUsedCellOpt(noGasUsedCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoGasUsedCell && len(kapp0.List) == 0 { // noGasUsedCell(.KList)
		// RHS
		traceRuleApply("FUNC", 903, "{| rule isGasUsedCellOpt(noGasUsedCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #904
	// source: ? @?
	// {| rule isGasUsedCellOpt(#KToken(#token("GasUsedCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasUsedCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 904, "{| rule isGasUsedCellOpt(#KToken(#token(\"GasUsedCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #905
	// source: ? @?
	// {| rule isGasUsedCellOpt(`<gasUsed>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasUsedXgt && len(kapp0.List) == 1 { // `<gasUsed>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 905, "{| rule isGasUsedCellOpt(`<gasUsed>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #906
	// source: ? @?
	// {| rule isGasUsedCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 906, "{| rule isGasUsedCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashcomputeJumpTableAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #907
	// source: iele.k @1804
	// {| rule #computeJumpTableAux(labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,`_[_<-_]_MAP`(JUMPS,LABEL,`___IELE-COMMON`(INSTRS,BLOCKS)),`_Set_`(LABELS,`SetItem`(LABEL))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isMap(JUMPS)),isIeleName(LABEL)),isSet(LABELS)),`notBool_`(`Set:in`(LABEL,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(fe33a57816778e2365910ab4775c264acecc0f6cefdbbcad204c714b30cb7acc) contentStartColumn(10) contentStartLine(1804) org.kframework.attributes.Location(Location(1804,10,1804,184)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLabeledBlockList && len(kapp0.List) == 2 { // labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `_:__IELE-COMMON`(LABEL,INSTRS)
			varLABEL := kapp1.List[0] // lhs KVariable LABEL
			varINSTRS := kapp1.List[1] // lhs KVariable INSTRS
			varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
			if varJUMPS, t := c2.(*m.Map); t && varJUMPS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
				if varLABELS, t := c3.(*m.Set); t && varLABELS.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
					// REQUIRES
					eval1023, err1023 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err1023 != nil {
						return m.NoResult, err1023
					}
					eval1024, err1024 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
						varBLOCKS,
						config, -1)
					if err1024 != nil {
						return m.NoResult, err1024
					}
					eval1025, err1025 := evalIsIeleName( // isIeleName(LABEL)
						varLABEL,
						config, -1)
					if err1025 != nil {
						return m.NoResult, err1025
					}
					eval1026, err1026 := evalSetXcolonin( // `Set:in`(LABEL,LABELS)
						varLABEL,
						varLABELS,
						config, -1)
					if err1026 != nil {
						return m.NoResult, err1026
					}
					if (((m.IsTrue(eval1023)) &&
					   (m.IsTrue(eval1024)) /* && */ /* rhs precomputed isMap(JUMPS) */ ) &&
					   (m.IsTrue(eval1025)) /* && */ /* rhs precomputed isSet(LABELS) */ ) &&
					   (!(m.IsTrue(eval1026))) {
						// RHS
						traceRuleApply("FUNC", 907, "{| rule #computeJumpTableAux(labeledBlockList(`_:__IELE-COMMON`(LABEL,INSTRS),BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,`_[_<-_]_MAP`(JUMPS,LABEL,`___IELE-COMMON`(INSTRS,BLOCKS)),`_Set_`(LABELS,`SetItem`(LABEL))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isMap(JUMPS)),isIeleName(LABEL)),isSet(LABELS)),`notBool_`(`Set:in`(LABEL,LABELS))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fe33a57816778e2365910ab4775c264acecc0f6cefdbbcad204c714b30cb7acc) contentStartColumn(10) contentStartLine(1804) org.kframework.attributes.Location(Location(1804,10,1804,184)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval1028, err1028 := evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP( // `_[_<-_]_MAP`(JUMPS,LABEL,`___IELE-COMMON`(INSTRS,BLOCKS))
							varJUMPS,
							varLABEL,
							&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
								varINSTRS,
								varBLOCKS,
							}},
							config, -1)
						if err1028 != nil {
							return m.NoResult, err1028
						}
						eval1030, err1030 := evalSetItem( // `SetItem`(LABEL)
							varLABEL,
							config, -1)
						if err1030 != nil {
							return m.NoResult, err1030
						}
						eval1029, err1029 := evalXuSetXu( // `_Set_`(LABELS,`SetItem`(LABEL))
							varLABELS,
							eval1030,
							config, -1)
						if err1029 != nil {
							return m.NoResult, err1029
						}
						eval1027, err1027 := evalXhashcomputeJumpTableAux( // #computeJumpTableAux(BLOCKS,`_[_<-_]_MAP`(JUMPS,LABEL,`___IELE-COMMON`(INSTRS,BLOCKS)),`_Set_`(LABELS,`SetItem`(LABEL)))
							varBLOCKS,
							eval1028,
							eval1029,
							config, -1)
						if err1027 != nil {
							return m.NoResult, err1027
						}
						return eval1027, nil
					}
				}
			}
		}
	}

	// rule #908
	// source: iele.k @1802
	// {| rule #computeJumpTableAux(`.List{"labeledBlockList"}`(.KList),JUMPS,_98)=>JUMPS requires `_andBool_`(isMap(JUMPS),isSet(_98)) ensures #token("true","Bool") [UNIQUE_ID(3746765dbf229a8c1e1e350a13788a692bb8d4ff46279778c16ccd3493a8deb0) contentStartColumn(10) contentStartLine(1802) org.kframework.attributes.Location(Location(1802,10,1802,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
		if varJUMPS, t := c2.(*m.Map); t && varJUMPS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			if varXu98, t := c3.(*m.Set); t && varXu98.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
				// REQUIRES precomputed isMap(JUMPS) && isSet(_98)
				// RHS
				traceRuleApply("FUNC", 908, "{| rule #computeJumpTableAux(`.List{\"labeledBlockList\"}`(.KList),JUMPS,_98)=>JUMPS requires `_andBool_`(isMap(JUMPS),isSet(_98)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3746765dbf229a8c1e1e350a13788a692bb8d4ff46279778c16ccd3493a8deb0) contentStartColumn(10) contentStartLine(1802) org.kframework.attributes.Location(Location(1802,10,1802,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varJUMPS, nil
			}
		}
	}

	// rule #909
	// source: iele.k @1806
	// {| rule #computeJumpTableAux(`___IELE-COMMON`(_75,BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,JUMPS,LABELS) requires `_andBool_`(`_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isMap(JUMPS)),isUnlabeledBlock(_75)),isSet(LABELS)) ensures #token("true","Bool") [UNIQUE_ID(f18efaa5193e88b2206359e7bb5b0352d6e9b4fc41cb25c58400401fd849aaf1) contentStartColumn(10) contentStartLine(1806) org.kframework.attributes.Location(Location(1806,10,1806,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `___IELE-COMMON`(_75,BLOCKS)
		varXu75 := kapp0.List[0] // lhs KVariable _75
		varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
		if varJUMPS, t := c2.(*m.Map); t && varJUMPS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			if varLABELS, t := c3.(*m.Set); t && varLABELS.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
				// REQUIRES
				eval1031, err1031 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
					varBLOCKS,
					config, -1)
				if err1031 != nil {
					return m.NoResult, err1031
				}
				eval1032, err1032 := evalIsUnlabeledBlock( // isUnlabeledBlock(_75)
					varXu75,
					config, -1)
				if err1032 != nil {
					return m.NoResult, err1032
				}
				if (m.IsTrue(eval1031) /* && */ /* rhs precomputed isMap(JUMPS) */ ) &&
				   (m.IsTrue(eval1032)) /* && */ /* rhs precomputed isSet(LABELS) */  {
					// RHS
					traceRuleApply("FUNC", 909, "{| rule #computeJumpTableAux(`___IELE-COMMON`(_75,BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,JUMPS,LABELS) requires `_andBool_`(`_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isMap(JUMPS)),isUnlabeledBlock(_75)),isSet(LABELS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f18efaa5193e88b2206359e7bb5b0352d6e9b4fc41cb25c58400401fd849aaf1) contentStartColumn(10) contentStartLine(1806) org.kframework.attributes.Location(Location(1806,10,1806,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval1033, err1033 := evalXhashcomputeJumpTableAux( // #computeJumpTableAux(BLOCKS,JUMPS,LABELS)
						varBLOCKS,
						varJUMPS,
						varLABELS,
						config, -1)
					if err1033 != nil {
						return m.NoResult, err1033
					}
					return eval1033, nil
				}
			}
		}
	}

	// rule #910
	// source: iele.k @1805
	// {| rule #computeJumpTableAux(labeledBlockList(_74,BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,JUMPS,LABELS) requires `_andBool_`(`_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isMap(JUMPS)),isLabeledBlock(_74)),isSet(LABELS)) ensures #token("true","Bool") [UNIQUE_ID(8a2f6d3dfb5b783742a729ef9b2ab12edd2415e8e3bf9c0dc171ec49574de316) contentStartColumn(10) contentStartLine(1805) org.kframework.attributes.Location(Location(1805,10,1805,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLabeledBlockList && len(kapp0.List) == 2 { // labeledBlockList(_74,BLOCKS)
		varXu74 := kapp0.List[0] // lhs KVariable _74
		varBLOCKS := kapp0.List[1] // lhs KVariable BLOCKS
		if varJUMPS, t := c2.(*m.Map); t && varJUMPS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			if varLABELS, t := c3.(*m.Set); t && varLABELS.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
				// REQUIRES
				eval1034, err1034 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
					varBLOCKS,
					config, -1)
				if err1034 != nil {
					return m.NoResult, err1034
				}
				eval1035, err1035 := evalIsLabeledBlock( // isLabeledBlock(_74)
					varXu74,
					config, -1)
				if err1035 != nil {
					return m.NoResult, err1035
				}
				if (m.IsTrue(eval1034) /* && */ /* rhs precomputed isMap(JUMPS) */ ) &&
				   (m.IsTrue(eval1035)) /* && */ /* rhs precomputed isSet(LABELS) */  {
					// RHS
					traceRuleApply("FUNC", 910, "{| rule #computeJumpTableAux(labeledBlockList(_74,BLOCKS),JUMPS,LABELS)=>#computeJumpTableAux(BLOCKS,JUMPS,LABELS) requires `_andBool_`(`_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isMap(JUMPS)),isLabeledBlock(_74)),isSet(LABELS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8a2f6d3dfb5b783742a729ef9b2ab12edd2415e8e3bf9c0dc171ec49574de316) contentStartColumn(10) contentStartLine(1805) org.kframework.attributes.Location(Location(1805,10,1805,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval1036, err1036 := evalXhashcomputeJumpTableAux( // #computeJumpTableAux(BLOCKS,JUMPS,LABELS)
						varBLOCKS,
						varJUMPS,
						varLABELS,
						config, -1)
					if err1036 != nil {
						return m.NoResult, err1036
					}
					return eval1036, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcomputeJumpTableAux", args: []m.K{c1, c2, c3}}
}

func evalIsNumericIeleName(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #911
	// source: ? @?
	// {| rule isNumericIeleName(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 911, "{| rule isNumericIeleName(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #912
	// source: ? @?
	// {| rule isNumericIeleName(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 912, "{| rule isNumericIeleName(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #913
	// source: ? @?
	// {| rule isNumericIeleName(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 913, "{| rule isNumericIeleName(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #914
	// source: ? @?
	// {| rule isNumericIeleName(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 914, "{| rule isNumericIeleName(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #915
	// source: ? @?
	// {| rule isNumericIeleName(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 915, "{| rule isNumericIeleName(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #916
	// source: ? @?
	// {| rule isNumericIeleName(#KToken(#token("NumericIeleName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumericIeleName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 916, "{| rule isNumericIeleName(#KToken(#token(\"NumericIeleName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #917
	// source: ? @?
	// {| rule isNumericIeleName(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 917, "{| rule isNumericIeleName(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #918
	// source: ? @?
	// {| rule isNumericIeleName(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 918, "{| rule isNumericIeleName(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #919
	// source: ? @?
	// {| rule isNumericIeleName(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 919, "{| rule isNumericIeleName(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #920
	// source: ? @?
	// {| rule isNumericIeleName(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 920, "{| rule isNumericIeleName(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #921
	// source: ? @?
	// {| rule isNumericIeleName(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 921, "{| rule isNumericIeleName(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #922
	// source: ? @?
	// {| rule isNumericIeleName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 922, "{| rule isNumericIeleName(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalString2Base(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.string2base
	lbl := m.LblString2Base // String2Base
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.string2base(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.string2base, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2Base", args: []m.K{c1, c2}}
}

func evalIsGasLimitCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #923
	// source: ? @?
	// {| rule isGasLimitCellOpt(#KToken(#token("GasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 923, "{| rule isGasLimitCellOpt(#KToken(#token(\"GasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #924
	// source: ? @?
	// {| rule isGasLimitCellOpt(`<gasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasLimitXgt && len(kapp0.List) == 1 { // `<gasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 924, "{| rule isGasLimitCellOpt(`<gasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #925
	// source: ? @?
	// {| rule isGasLimitCellOpt(#KToken(#token("GasLimitCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasLimitCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 925, "{| rule isGasLimitCellOpt(#KToken(#token(\"GasLimitCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #926
	// source: ? @?
	// {| rule isGasLimitCellOpt(noGasLimitCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoGasLimitCell && len(kapp0.List) == 0 { // noGasLimitCell(.KList)
		// RHS
		traceRuleApply("FUNC", 926, "{| rule isGasLimitCellOpt(noGasLimitCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #927
	// source: ? @?
	// {| rule isGasLimitCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 927, "{| rule isGasLimitCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsContractsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #928
	// source: ? @?
	// {| rule isContractsCell(#KToken(#token("ContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 928, "{| rule isContractsCell(#KToken(#token(\"ContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #929
	// source: ? @?
	// {| rule isContractsCell(`<contracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractsXgt && len(kapp0.List) == 1 { // `<contracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 929, "{| rule isContractsCell(`<contracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #930
	// source: ? @?
	// {| rule isContractsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 930, "{| rule isContractsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalStringIeleName(c m.K, config m.K, guard int) (m.K, error) {
	// rule #931
	// source: well-formedness.k @362
	// {| rule `StringIeleName`(NAME)=>`String2IeleName`(unescape(`StringIeleName2String`(NAME))) requires isStringIeleName(NAME) ensures #token("true","Bool") [UNIQUE_ID(911811ed966720bedb6c42f9e58170680a4090e68131c8b54d5dac8a16085519) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varNAME := c // lhs KVariable NAME
		// REQUIRES
		eval1037, err1037 := evalIsStringIeleName( // isStringIeleName(NAME)
			varNAME,
			config, -1)
		if err1037 != nil {
			return m.NoResult, err1037
		}
		if m.IsTrue(eval1037) {
			// RHS
			traceRuleApply("FUNC", 931, "{| rule `StringIeleName`(NAME)=>`String2IeleName`(unescape(`StringIeleName2String`(NAME))) requires isStringIeleName(NAME) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(911811ed966720bedb6c42f9e58170680a4090e68131c8b54d5dac8a16085519) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1040, err1040 := evalStringIeleName2String( // `StringIeleName2String`(NAME)
				varNAME,
				config, -1)
			if err1040 != nil {
				return m.NoResult, err1040
			}
			eval1039, err1039 := evalUnescape( // unescape(`StringIeleName2String`(NAME))
				eval1040,
				config, -1)
			if err1039 != nil {
				return m.NoResult, err1039
			}
			eval1038, err1038 := evalString2IeleName( // `String2IeleName`(unescape(`StringIeleName2String`(NAME)))
				eval1039,
				config, -1)
			if err1038 != nil {
				return m.NoResult, err1038
			}
			return eval1038, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalStringIeleName", args: []m.K{c}}
}

func evalIsAccount(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #932
	// source: ? @?
	// {| rule isAccount(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 932, "{| rule isAccount(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #933
	// source: ? @?
	// {| rule isAccount(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 933, "{| rule isAccount(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #934
	// source: ? @?
	// {| rule isAccount(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 934, "{| rule isAccount(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #935
	// source: ? @?
	// {| rule isAccount(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 935, "{| rule isAccount(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #936
	// source: ? @?
	// {| rule isAccount(`.Account_IELE-DATA`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotAccountXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.Account_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 936, "{| rule isAccount(`.Account_IELE-DATA`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #937
	// source: ? @?
	// {| rule isAccount(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 937, "{| rule isAccount(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #938
	// source: ? @?
	// {| rule isAccount(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 938, "{| rule isAccount(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #939
	// source: ? @?
	// {| rule isAccount(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 939, "{| rule isAccount(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #940
	// source: ? @?
	// {| rule isAccount(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 940, "{| rule isAccount(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #941
	// source: ? @?
	// {| rule isAccount(#KToken(#token("Account","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccount { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 941, "{| rule isAccount(#KToken(#token(\"Account\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #942
	// source: ? @?
	// {| rule isAccount(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 942, "{| rule isAccount(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #943
	// source: ? @?
	// {| rule isAccount(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 943, "{| rule isAccount(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #944
	// source: ? @?
	// {| rule isAccount(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 944, "{| rule isAccount(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBN128AtePairing(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.bn128ate
	lbl := m.LblBN128AtePairing // BN128AtePairing
	sort := m.SortBool
	if hookRes, hookErr := krypto.Bn128ate(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.bn128ate, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBN128AtePairing", args: []m.K{c1, c2}}
}

func evalInitFuncLabelsCell(config m.K, guard int) (m.K, error) {
	// rule #945
	// source: ? @?
	// {| rule initFuncLabelsCell(.KList)=>`<funcLabels>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ef01a907bf395ac3fe6b214af9f04a9f0e3385f0b92aabc3cd26bb345aef56e7) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 945, "{| rule initFuncLabelsCell(.KList)=>`<funcLabels>`(`.Map`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ef01a907bf395ac3fe6b214af9f04a9f0e3385f0b92aabc3cd26bb345aef56e7) initializer()] |}")
	eval1041, err1041 := evalXdotMap(config, -1) // `.Map`(.KList)
	if err1041 != nil {
		return m.NoResult, err1041
	}
	return &m.KApply{Label: m.LblXltfuncLabelsXgt, List: []m.K{ // as-is <funcLabels>
		eval1041,
	}}, nil

}

//var constInitFuncLabelsCell K = evalInitFuncLabelsCell(m.InternedBottom)

func evalIeleNameToken2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.token2string
	lbl := m.LblIeleNameToken2String // IeleNameToken2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.token2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.token2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalIeleNameToken2String", args: []m.K{c}}
}

func evalIsFunctionBodiesCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #946
	// source: ? @?
	// {| rule isFunctionBodiesCell(`<functionBodies>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionBodiesXgt && len(kapp0.List) == 1 { // `<functionBodies>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 946, "{| rule isFunctionBodiesCell(`<functionBodies>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #947
	// source: ? @?
	// {| rule isFunctionBodiesCell(#KToken(#token("FunctionBodiesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionBodiesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 947, "{| rule isFunctionBodiesCell(#KToken(#token(\"FunctionBodiesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #948
	// source: ? @?
	// {| rule isFunctionBodiesCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 948, "{| rule isFunctionBodiesCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBalanceCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #949
	// source: ? @?
	// {| rule isBalanceCellOpt(#KToken(#token("BalanceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBalanceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 949, "{| rule isBalanceCellOpt(#KToken(#token(\"BalanceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #950
	// source: ? @?
	// {| rule isBalanceCellOpt(#KToken(#token("BalanceCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBalanceCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 950, "{| rule isBalanceCellOpt(#KToken(#token(\"BalanceCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #951
	// source: ? @?
	// {| rule isBalanceCellOpt(noBalanceCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoBalanceCell && len(kapp0.List) == 0 { // noBalanceCell(.KList)
		// RHS
		traceRuleApply("FUNC", 951, "{| rule isBalanceCellOpt(noBalanceCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #952
	// source: ? @?
	// {| rule isBalanceCellOpt(`<balance>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbalanceXgt && len(kapp0.List) == 1 { // `<balance>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 952, "{| rule isBalanceCellOpt(`<balance>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #953
	// source: ? @?
	// {| rule isBalanceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 953, "{| rule isBalanceCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsProgramCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #954
	// source: ? @?
	// {| rule isProgramCellFragment(#KToken(#token("ProgramCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 954, "{| rule isProgramCellFragment(#KToken(#token(\"ProgramCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #955
	// source: ? @?
	// {| rule isProgramCellFragment(`<program>-fragment`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCellOpt(K0),isFuncIdsCellOpt(K1)),isFuncLabelsCellOpt(K2)),isExportedCellOpt(K3)),isProgramSizeCellOpt(K4)),isContractCodeCellOpt(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramXgtXhyphenfragment && len(kapp0.List) == 6 { // `<program>-fragment`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval1042, err1042 := evalIsFunctionsCellOpt( // isFunctionsCellOpt(K0)
			varK0,
			config, -1)
		if err1042 != nil {
			return m.NoResult, err1042
		}
		eval1043, err1043 := evalIsFuncIDsCellOpt( // isFuncIdsCellOpt(K1)
			varK1,
			config, -1)
		if err1043 != nil {
			return m.NoResult, err1043
		}
		eval1044, err1044 := evalIsFuncLabelsCellOpt( // isFuncLabelsCellOpt(K2)
			varK2,
			config, -1)
		if err1044 != nil {
			return m.NoResult, err1044
		}
		eval1045, err1045 := evalIsExportedCellOpt( // isExportedCellOpt(K3)
			varK3,
			config, -1)
		if err1045 != nil {
			return m.NoResult, err1045
		}
		eval1046, err1046 := evalIsProgramSizeCellOpt( // isProgramSizeCellOpt(K4)
			varK4,
			config, -1)
		if err1046 != nil {
			return m.NoResult, err1046
		}
		eval1047, err1047 := evalIsContractCodeCellOpt( // isContractCodeCellOpt(K5)
			varK5,
			config, -1)
		if err1047 != nil {
			return m.NoResult, err1047
		}
		if (((((m.IsTrue(eval1042)) &&
		   (m.IsTrue(eval1043))) &&
		   (m.IsTrue(eval1044))) &&
		   (m.IsTrue(eval1045))) &&
		   (m.IsTrue(eval1046))) &&
		   (m.IsTrue(eval1047)) {
			// RHS
			traceRuleApply("FUNC", 955, "{| rule isProgramCellFragment(`<program>-fragment`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCellOpt(K0),isFuncIdsCellOpt(K1)),isFuncLabelsCellOpt(K2)),isExportedCellOpt(K3)),isProgramSizeCellOpt(K4)),isContractCodeCellOpt(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #956
	// source: ? @?
	// {| rule isProgramCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 956, "{| rule isProgramCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalNotBoolXu(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.not
	lbl := m.LblNotBoolXu // notBool_
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.not(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.not, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #957
	// source: domains.k @300
	// {| rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(dbe4d83961158619e994f90623f08be11020d80c56685ef1ec2dd2b15760c474) contentStartColumn(8) contentStartLine(300) org.kframework.attributes.Location(Location(300,8,300,29)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.BoolFalse) { // #token("false","Bool")
		// RHS
		traceRuleApply("FUNC", 957, "{| rule `notBool_`(#token(\"false\",\"Bool\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dbe4d83961158619e994f90623f08be11020d80c56685ef1ec2dd2b15760c474) contentStartColumn(8) contentStartLine(300) org.kframework.attributes.Location(Location(300,8,300,29)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #958
	// source: domains.k @299
	// {| rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(de18dba5cb1b6e56941a63279edb1d16da29d7a997a3e82cbc2b81b066eadf47) contentStartColumn(8) contentStartLine(299) org.kframework.attributes.Location(Location(299,8,299,29)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.BoolTrue) { // #token("true","Bool")
		// RHS
		traceRuleApply("FUNC", 958, "{| rule `notBool_`(#token(\"true\",\"Bool\"))=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(de18dba5cb1b6e56941a63279edb1d16da29d7a997a3e82cbc2b81b066eadf47) contentStartColumn(8) contentStartLine(299) org.kframework.attributes.Location(Location(299,8,299,29)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

	return m.NoResult, &stuckError{funcName: "evalNotBoolXu", args: []m.K{c}}
}

func evalXuXltXeqIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.le
	lbl := m.LblXuXltXeqIntXuXuINT // _<=Int__INT
	sort := m.SortBool
	if hookRes, hookErr := intHooks.le(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.le, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXeqIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsLogDataCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #959
	// source: ? @?
	// {| rule isLogDataCell(#KToken(#token("LogDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 959, "{| rule isLogDataCell(#KToken(#token(\"LogDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #960
	// source: ? @?
	// {| rule isLogDataCell(`<logData>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlogDataXgt && len(kapp0.List) == 1 { // `<logData>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 960, "{| rule isLogDataCell(`<logData>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #961
	// source: ? @?
	// {| rule isLogDataCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 961, "{| rule isLogDataCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsIELESimulation(c m.K, config m.K, guard int) (m.K, error) {
	// rule #962
	// source: ? @?
	// {| rule isIELESimulation(#KToken(#token("IELESimulation","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIELESimulation { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 962, "{| rule isIELESimulation(#KToken(#token(\"IELESimulation\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #963
	// source: ? @?
	// {| rule isIELESimulation(runVM(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K0),isInt(K1)),isInt(K2)),isString(K3)),isList(K4)),isInt(K5)),isInt(K6)),isInt(K7)),isInt(K8)),isInt(K9)),isInt(K10)),isInt(K11)),isInt(K12)),isString(K13)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRunVM && len(kapp0.List) == 14 { // runVM(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[3].(*m.String); t { // lhs KVariable with hook:STRING.String
						if varK4, t := kapp0.List[4].(*m.List); t && varK4.Sort == m.SortList { // lhs KVariable with hook:LIST.List
							if _, t := kapp0.List[5].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if _, t := kapp0.List[6].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if _, t := kapp0.List[7].(*m.Int); t { // lhs KVariable with hook:INT.Int
										if _, t := kapp0.List[8].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if _, t := kapp0.List[9].(*m.Int); t { // lhs KVariable with hook:INT.Int
												if _, t := kapp0.List[10].(*m.Int); t { // lhs KVariable with hook:INT.Int
													if _, t := kapp0.List[11].(*m.Int); t { // lhs KVariable with hook:INT.Int
														if _, t := kapp0.List[12].(*m.Int); t { // lhs KVariable with hook:INT.Int
															if _, t := kapp0.List[13].(*m.String); t { // lhs KVariable with hook:STRING.String
																// REQUIRES precomputed isBool(K0) && isInt(K1) && isInt(K2) && isString(K3) && isList(K4) && isInt(K5) && isInt(K6) && isInt(K7) && isInt(K8) && isInt(K9) && isInt(K10) && isInt(K11) && isInt(K12) && isString(K13)
																// RHS
																traceRuleApply("FUNC", 963, "{| rule isIELESimulation(runVM(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K0),isInt(K1)),isInt(K2)),isString(K3)),isList(K4)),isInt(K5)),isInt(K6)),isInt(K7)),isInt(K8)),isInt(K9)),isInt(K10)),isInt(K11)),isInt(K12)),isString(K13)) ensures #token(\"true\",\"Bool\") [] |}")
																return /* rhs KToken */ m.BoolTrue, nil
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #964
	// source: ? @?
	// {| rule isIELESimulation(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 964, "{| rule isIELESimulation(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashgetenv(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.getenv
	lbl := m.LblXhashgetenv // #getenv
	sort := m.SortString
	if hookRes, hookErr := kreflectionHooks.getenv(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.getenv, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetenv", args: []m.K{c}}
}

func evalIsEndianness(c m.K, config m.K, guard int) (m.K, error) {
	// rule #965
	// source: ? @?
	// {| rule isEndianness(#KToken(#token("Endianness","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortEndianness { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 965, "{| rule isEndianness(#KToken(#token(\"Endianness\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #966
	// source: ? @?
	// {| rule isEndianness(bigEndianBytes(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBigEndianBytes && len(kapp0.List) == 0 { // bigEndianBytes(.KList)
		// RHS
		traceRuleApply("FUNC", 966, "{| rule isEndianness(bigEndianBytes(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #967
	// source: ? @?
	// {| rule isEndianness(littleEndianBytes(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLittleEndianBytes && len(kapp0.List) == 0 { // littleEndianBytes(.KList)
		// RHS
		traceRuleApply("FUNC", 967, "{| rule isEndianness(littleEndianBytes(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #968
	// source: ? @?
	// {| rule isEndianness(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 968, "{| rule isEndianness(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitScheduleCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #969
	// source: ? @?
	// {| rule initScheduleCell(Init)=>`<schedule>`(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))) requires isSchedule(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))) ensures #token("true","Bool") [UNIQUE_ID(c0d635a308afefe84223b0147421d209a4180d2153765ad3053b8364d559a2fb) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES
		eval1050, err1050 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))
			varInit,
			/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$SCHEDULE"},
			config, -1)
		if err1050 != nil {
			return m.NoResult, err1050
		}
		eval1049, err1049 := evalProjectXcolonSchedule( // `project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))
			eval1050,
			config, -1)
		if err1049 != nil {
			return m.NoResult, err1049
		}
		eval1048, err1048 := evalIsSchedule( // isSchedule(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))))
			eval1049,
			config, -1)
		if err1048 != nil {
			return m.NoResult, err1048
		}
		if m.IsTrue(eval1048) {
			// RHS
			traceRuleApply("FUNC", 969, "{| rule initScheduleCell(Init)=>`<schedule>`(`project:Schedule`(`Map:lookup`(Init,#token(\"$SCHEDULE\",\"KConfigVar\")))) requires isSchedule(`project:Schedule`(`Map:lookup`(Init,#token(\"$SCHEDULE\",\"KConfigVar\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c0d635a308afefe84223b0147421d209a4180d2153765ad3053b8364d559a2fb) initializer()] |}")
			eval1052, err1052 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))
				varInit,
				/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$SCHEDULE"},
				config, -1)
			if err1052 != nil {
				return m.NoResult, err1052
			}
			eval1051, err1051 := evalProjectXcolonSchedule( // `project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))
				eval1052,
				config, -1)
			if err1051 != nil {
				return m.NoResult, err1051
			}
			return &m.KApply{Label: m.LblXltscheduleXgt, List: []m.K{ // as-is <schedule>
				eval1051,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalInitScheduleCell", args: []m.K{c}}
}

func evalIntersectSet(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.intersection
	lbl := m.LblIntersectSet // intersectSet
	sort := m.SortSet
	if hookRes, hookErr := setHooks.intersection(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.intersection, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalIntersectSet", args: []m.K{c1, c2}}
}

func evalIsFunctionCellMap(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortFunctionCellMap {
		return m.BoolTrue, nil
	}
	// rule #970
	// source: ? @?
	// {| rule isFunctionCellMap(#KToken(#token("FunctionCellMap","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionCellMap { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 970, "{| rule isFunctionCellMap(#KToken(#token(\"FunctionCellMap\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #971
	// source: ? @?
	// {| rule isFunctionCellMap(#KToken(#token("FunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 971, "{| rule isFunctionCellMap(#KToken(#token(\"FunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #972
	// source: ? @?
	// {| rule isFunctionCellMap(`<function>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionXgt && len(kapp0.List) == 5 { // `<function>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1053, err1053 := evalIsFuncIDCell( // isFuncIdCell(K0)
			varK0,
			config, -1)
		if err1053 != nil {
			return m.NoResult, err1053
		}
		eval1054, err1054 := evalIsNparamsCell( // isNparamsCell(K1)
			varK1,
			config, -1)
		if err1054 != nil {
			return m.NoResult, err1054
		}
		eval1055, err1055 := evalIsInstructionsCell( // isInstructionsCell(K2)
			varK2,
			config, -1)
		if err1055 != nil {
			return m.NoResult, err1055
		}
		eval1056, err1056 := evalIsJumpTableCell( // isJumpTableCell(K3)
			varK3,
			config, -1)
		if err1056 != nil {
			return m.NoResult, err1056
		}
		eval1057, err1057 := evalIsNregsCell( // isNregsCell(K4)
			varK4,
			config, -1)
		if err1057 != nil {
			return m.NoResult, err1057
		}
		if ((((m.IsTrue(eval1053)) &&
		   (m.IsTrue(eval1054))) &&
		   (m.IsTrue(eval1055))) &&
		   (m.IsTrue(eval1056))) &&
		   (m.IsTrue(eval1057)) {
			// RHS
			traceRuleApply("FUNC", 972, "{| rule isFunctionCellMap(`<function>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #973
	// source: ? @?
	// {| rule isFunctionCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 973, "{| rule isFunctionCellMap(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFunctionsCell(config m.K, guard int) (m.K, error) {
	// rule #974
	// source: ? @?
	// {| rule initFunctionsCell(.KList)=>`<functions>`(`.FunctionCellMap`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4502151d24df1354e56947070293cedcbaf78230fee7e0fa1a6df9cbe50ca998) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 974, "{| rule initFunctionsCell(.KList)=>`<functions>`(`.FunctionCellMap`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4502151d24df1354e56947070293cedcbaf78230fee7e0fa1a6df9cbe50ca998) initializer()] |}")
	eval1058, err1058 := evalXdotFunctionCellMap(config, -1) // `.FunctionCellMap`(.KList)
	if err1058 != nil {
		return m.NoResult, err1058
	}
	return &m.KApply{Label: m.LblXltfunctionsXgt, List: []m.K{ // as-is <functions>
		eval1058,
	}}, nil

}

//var constInitFunctionsCell K = evalInitFunctionsCell(m.InternedBottom)

func evalStringIeleName2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.token2string
	lbl := m.LblStringIeleName2String // StringIeleName2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.token2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.token2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalStringIeleName2String", args: []m.K{c}}
}

func evalXhashasUnsigned(c m.K, config m.K, guard int) (m.K, error) {
	// rule #975
	// source: data.k @352
	// {| rule #asUnsigned(`_:__IELE-DATA`(W0,`_:__IELE-DATA`(W1,WS)))=>#asUnsigned(`_:__IELE-DATA`(`_|Int__INT`(`_<<Int__INT`(W0,#token("8","Int")),W1),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(31dd483a75e35207a5cdf435e3e51c52e1854c544c6d0d01d4f6276d5be4fa8c) contentStartColumn(10) contentStartLine(352) org.kframework.attributes.Location(Location(352,10,352,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W0,`_:__IELE-DATA`(W1,WS))
		if varW0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,WS)
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varWS := kapp1.List[1] // lhs KVariable WS
					// REQUIRES
					eval1059, err1059 := evalIsWordStack( // isWordStack(WS)
						varWS,
						config, -1)
					if err1059 != nil {
						return m.NoResult, err1059
					}
					if m.IsTrue(eval1059) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
						// RHS
						traceRuleApply("FUNC", 975, "{| rule #asUnsigned(`_:__IELE-DATA`(W0,`_:__IELE-DATA`(W1,WS)))=>#asUnsigned(`_:__IELE-DATA`(`_|Int__INT`(`_<<Int__INT`(W0,#token(\"8\",\"Int\")),W1),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W1)),isInt(W0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(31dd483a75e35207a5cdf435e3e51c52e1854c544c6d0d01d4f6276d5be4fa8c) contentStartColumn(10) contentStartLine(352) org.kframework.attributes.Location(Location(352,10,352,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1062, err1062 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(W0,#token("8","Int"))
							varW0,
							/* rhs KToken */ m.NewIntFromString("8"),
							config, -1)
						if err1062 != nil {
							return m.NoResult, err1062
						}
						eval1061, err1061 := evalXuXpipeIntXuXuINT( // `_|Int__INT`(`_<<Int__INT`(W0,#token("8","Int")),W1)
							eval1062,
							varW1,
							config, -1)
						if err1061 != nil {
							return m.NoResult, err1061
						}
						eval1060, err1060 := evalXhashasUnsigned( // #asUnsigned(`_:__IELE-DATA`(`_|Int__INT`(`_<<Int__INT`(W0,#token("8","Int")),W1),WS))
							&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
								eval1061,
								varWS,
							}},
							config, -1)
						if err1060 != nil {
							return m.NoResult, err1060
						}
						return eval1060, nil
					}
				}
			}
		}
	}

	// rule #976
	// source: data.k @350
	// {| rule #asUnsigned(`.WordStack_IELE-DATA`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(de959e39420f242ab2210afca5bc8f71e35556fedabc3e398f37bef67fa049ba) contentStartColumn(10) contentStartLine(350) org.kframework.attributes.Location(Location(350,10,350,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 976, "{| rule #asUnsigned(`.WordStack_IELE-DATA`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(de959e39420f242ab2210afca5bc8f71e35556fedabc3e398f37bef67fa049ba) contentStartColumn(10) contentStartLine(350) org.kframework.attributes.Location(Location(350,10,350,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	// rule #977
	// source: data.k @351
	// {| rule #asUnsigned(`_:__IELE-DATA`(W,`.WordStack_IELE-DATA`(.KList)))=>W requires isInt(W) ensures #token("true","Bool") [UNIQUE_ID(adf6dace54377ed93d621ada36b34eb71f7e7fe79c663e646d291b4eedaf042e) contentStartColumn(10) contentStartLine(351) org.kframework.attributes.Location(Location(351,10,351,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,`.WordStack_IELE-DATA`(.KList))
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp1.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
				// REQUIRES precomputed isInt(W)
				// RHS
				traceRuleApply("FUNC", 977, "{| rule #asUnsigned(`_:__IELE-DATA`(W,`.WordStack_IELE-DATA`(.KList)))=>W requires isInt(W) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(adf6dace54377ed93d621ada36b34eb71f7e7fe79c663e646d291b4eedaf042e) contentStartColumn(10) contentStartLine(351) org.kframework.attributes.Location(Location(351,10,351,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varW, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashasUnsigned", args: []m.K{c}}
}

func evalXhashisValidInstruction(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #978
	// source: iele-binary.k @193
	// {| rule #isValidInstruction(encodingError(.KList),_494,_495,_496)=>#token("false","Bool") requires `_andBool_`(`_andBool_`(isInt(_496),isWordStack(_494)),isInt(_495)) ensures #token("true","Bool") [UNIQUE_ID(6a8fd4a3d8810b65bdc0ac08058d1a8380f30d510caf8da550bb2cab30b9cdf9) contentStartColumn(10) contentStartLine(193) org.kframework.attributes.Location(Location(193,10,193,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblEncodingError && len(kapp0.List) == 0 { // encodingError(.KList)
		varXu494 := c2 // lhs KVariable _494
		if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1063, err1063 := evalIsWordStack( // isWordStack(_494)
					varXu494,
					config, -1)
				if err1063 != nil {
					return m.NoResult, err1063
				}
				if /* rhs precomputed isInt(_496) */ /* && */
				   m.IsTrue(eval1063) /* && */ /* rhs precomputed isInt(_495) */  {
					// RHS
					traceRuleApply("FUNC", 978, "{| rule #isValidInstruction(encodingError(.KList),_494,_495,_496)=>#token(\"false\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(_496),isWordStack(_494)),isInt(_495)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6a8fd4a3d8810b65bdc0ac08058d1a8380f30d510caf8da550bb2cab30b9cdf9) contentStartColumn(10) contentStartLine(193) org.kframework.attributes.Location(Location(193,10,193,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.BoolFalse, nil
				}
			}
		}
	}

	// rule #979
	// source: iele-binary.k @194
	// {| rule #isValidInstruction(OP,WS,NBITS,SIZE)=>`_andBool_`(`_>=Int__INT`(SIZE,#opWidth(OP,NBITS)),#isValidFunction(#drop(#opWidth(OP,NBITS),WS),NBITS,`_-Int__INT`(SIZE,#opWidth(OP,NBITS)))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)),isOpCode(OP)) ensures #token("true","Bool") [UNIQUE_ID(4ff377c85d1e371e69c5e13f5272f9db442e6962b693aa70b439cd974d93e16e) contentStartColumn(10) contentStartLine(194) org.kframework.attributes.Location(Location(194,10,194,186)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c1 // lhs KVariable OP
		varWS := c2 // lhs KVariable WS
		if varNBITS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSIZE, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1064, err1064 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err1064 != nil {
					return m.NoResult, err1064
				}
				eval1065, err1065 := evalIsOpCode( // isOpCode(OP)
					varOP,
					config, -1)
				if err1065 != nil {
					return m.NoResult, err1065
				}
				if (m.IsTrue(eval1064) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
				   (m.IsTrue(eval1065)) {
					// RHS
					traceRuleApply("FUNC", 979, "{| rule #isValidInstruction(OP,WS,NBITS,SIZE)=>`_andBool_`(`_>=Int__INT`(SIZE,#opWidth(OP,NBITS)),#isValidFunction(#drop(#opWidth(OP,NBITS),WS),NBITS,`_-Int__INT`(SIZE,#opWidth(OP,NBITS)))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)),isOpCode(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4ff377c85d1e371e69c5e13f5272f9db442e6962b693aa70b439cd974d93e16e) contentStartColumn(10) contentStartLine(194) org.kframework.attributes.Location(Location(194,10,194,186)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval1068, err1068 := evalXhashopWidth( // #opWidth(OP,NBITS)
						varOP,
						varNBITS,
						config, -1)
					if err1068 != nil {
						return m.NoResult, err1068
					}
					eval1067, err1067 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(SIZE,#opWidth(OP,NBITS))
						varSIZE,
						eval1068,
						config, -1)
					if err1067 != nil {
						return m.NoResult, err1067
					}
					eval1071, err1071 := evalXhashopWidth( // #opWidth(OP,NBITS)
						varOP,
						varNBITS,
						config, -1)
					if err1071 != nil {
						return m.NoResult, err1071
					}
					eval1070, err1070 := evalXhashdrop( // #drop(#opWidth(OP,NBITS),WS)
						eval1071,
						varWS,
						config, -1)
					if err1070 != nil {
						return m.NoResult, err1070
					}
					eval1073, err1073 := evalXhashopWidth( // #opWidth(OP,NBITS)
						varOP,
						varNBITS,
						config, -1)
					if err1073 != nil {
						return m.NoResult, err1073
					}
					eval1072, err1072 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#opWidth(OP,NBITS))
						varSIZE,
						eval1073,
						config, -1)
					if err1072 != nil {
						return m.NoResult, err1072
					}
					eval1069, err1069 := evalXhashisValidFunction( // #isValidFunction(#drop(#opWidth(OP,NBITS),WS),NBITS,`_-Int__INT`(SIZE,#opWidth(OP,NBITS)))
						eval1070,
						varNBITS,
						eval1072,
						config, -1)
					if err1069 != nil {
						return m.NoResult, err1069
					}
					eval1066, err1066 := evalXuandBoolXu( // `_andBool_`(`_>=Int__INT`(SIZE,#opWidth(OP,NBITS)),#isValidFunction(#drop(#opWidth(OP,NBITS),WS),NBITS,`_-Int__INT`(SIZE,#opWidth(OP,NBITS))))
						eval1067,
						eval1069,
						config, -1)
					if err1066 != nil {
						return m.NoResult, err1066
					}
					return eval1066, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidInstruction", args: []m.K{c1, c2, c3, c4}}
}

func evalIsFidCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #980
	// source: ? @?
	// {| rule isFidCellOpt(#KToken(#token("FidCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFidCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 980, "{| rule isFidCellOpt(#KToken(#token(\"FidCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #981
	// source: ? @?
	// {| rule isFidCellOpt(#KToken(#token("FidCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFidCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 981, "{| rule isFidCellOpt(#KToken(#token(\"FidCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #982
	// source: ? @?
	// {| rule isFidCellOpt(noFidCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFidCell && len(kapp0.List) == 0 { // noFidCell(.KList)
		// RHS
		traceRuleApply("FUNC", 982, "{| rule isFidCellOpt(noFidCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #983
	// source: ? @?
	// {| rule isFidCellOpt(`<fid>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfidXgt && len(kapp0.List) == 1 { // `<fid>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1074, err1074 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1074 != nil {
			return m.NoResult, err1074
		}
		if m.IsTrue(eval1074) {
			// RHS
			traceRuleApply("FUNC", 983, "{| rule isFidCellOpt(`<fid>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #984
	// source: ? @?
	// {| rule isFidCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 984, "{| rule isFidCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsOutputCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #985
	// source: ? @?
	// {| rule isOutputCell(#KToken(#token("OutputCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOutputCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 985, "{| rule isOutputCell(#KToken(#token(\"OutputCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #986
	// source: ? @?
	// {| rule isOutputCell(`<output>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoutputXgt && len(kapp0.List) == 1 { // `<output>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1075, err1075 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err1075 != nil {
			return m.NoResult, err1075
		}
		if m.IsTrue(eval1075) {
			// RHS
			traceRuleApply("FUNC", 986, "{| rule isOutputCell(`<output>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #987
	// source: ? @?
	// {| rule isOutputCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 987, "{| rule isOutputCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFunctionNameCell(config m.K, guard int) (m.K, error) {
	// rule #988
	// source: ? @?
	// {| rule initFunctionNameCell(.KList)=>`<functionName>`(#token("deposit","IeleName")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(aa64a15ac52bc6f8eb8d4eaac66509902ad174a1e985dc6f6ebe9b0a8d350db1) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 988, "{| rule initFunctionNameCell(.KList)=>`<functionName>`(#token(\"deposit\",\"IeleName\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aa64a15ac52bc6f8eb8d4eaac66509902ad174a1e985dc6f6ebe9b0a8d350db1) initializer()] |}")
	return &m.KApply{Label: m.LblXltfunctionNameXgt, List: []m.K{ // as-is <functionName>
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
	}}, nil

}

//var constInitFunctionNameCell K = evalInitFunctionNameCell(m.InternedBottom)

func evalXuXlsqbXuXltXhyphenundefXrsqb(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.remove
	lbl := m.LblXuXlsqbXuXltXhyphenundefXrsqb // _[_<-undef]
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.remove(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.remove, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXltXhyphenundefXrsqb", args: []m.K{c1, c2}}
}

func evalUnescape(c m.K, config m.K, guard int) (m.K, error) {
	// rule #989
	// source: well-formedness.k @355
	// {| rule unescape(S)=>unescapeAux(S,#token("1","Int"),`.StringBuffer_STRING-BUFFER-HOOKED`(.KList)) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(fd4887017e804e9c606c2d86b80870cc0f2a24264d1c9605a92f78b48d05a4fc) contentStartColumn(10) contentStartLine(355) org.kframework.attributes.Location(Location(355,10,355,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 989, "{| rule unescape(S)=>unescapeAux(S,#token(\"1\",\"Int\"),`.StringBuffer_STRING-BUFFER-HOOKED`(.KList)) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fd4887017e804e9c606c2d86b80870cc0f2a24264d1c9605a92f78b48d05a4fc) contentStartColumn(10) contentStartLine(355) org.kframework.attributes.Location(Location(355,10,355,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval1077, err1077 := evalXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED(config, -1) // `.StringBuffer_STRING-BUFFER-HOOKED`(.KList)
		if err1077 != nil {
			return m.NoResult, err1077
		}
		eval1076, err1076 := evalUnescapeAux( // unescapeAux(S,#token("1","Int"),`.StringBuffer_STRING-BUFFER-HOOKED`(.KList))
			varS,
			/* rhs KToken */ m.NewIntFromString("1"),
			eval1077,
			config, -1)
		if err1076 != nil {
			return m.NoResult, err1076
		}
		return eval1076, nil
	}

	return m.NoResult, &stuckError{funcName: "evalUnescape", args: []m.K{c}}
}

func evalIsCallFrameCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #990
	// source: ? @?
	// {| rule isCallFrameCellFragment(#KToken(#token("CallFrameCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallFrameCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 990, "{| rule isCallFrameCellFragment(#KToken(#token(\"CallFrameCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #991
	// source: ? @?
	// {| rule isCallFrameCellFragment(`<callFrame>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCellOpt(K0),isCallDepthCellOpt(K1)),isLocalCallsCellOpt(K2)),isIdCellOpt(K3)),isCallerCellOpt(K4)),isCallDataCellOpt(K5)),isCallValueCellOpt(K6)),isRegsCellOpt(K7)),isLocalMemCellOpt(K8)),isPeakMemoryCellOpt(K9)),isCurrentMemoryCellOpt(K10)),isFidCellOpt(K11)),isGasCellOpt(K12)),isPreviousGasCellOpt(K13)),isStaticCellOpt(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallFrameXgtXhyphenfragment && len(kapp0.List) == 15 { // `<callFrame>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval1078, err1078 := evalIsProgramCellOpt( // isProgramCellOpt(K0)
			varK0,
			config, -1)
		if err1078 != nil {
			return m.NoResult, err1078
		}
		eval1079, err1079 := evalIsCallDepthCellOpt( // isCallDepthCellOpt(K1)
			varK1,
			config, -1)
		if err1079 != nil {
			return m.NoResult, err1079
		}
		eval1080, err1080 := evalIsLocalCallsCellOpt( // isLocalCallsCellOpt(K2)
			varK2,
			config, -1)
		if err1080 != nil {
			return m.NoResult, err1080
		}
		eval1081, err1081 := evalIsIDCellOpt( // isIdCellOpt(K3)
			varK3,
			config, -1)
		if err1081 != nil {
			return m.NoResult, err1081
		}
		eval1082, err1082 := evalIsCallerCellOpt( // isCallerCellOpt(K4)
			varK4,
			config, -1)
		if err1082 != nil {
			return m.NoResult, err1082
		}
		eval1083, err1083 := evalIsCallDataCellOpt( // isCallDataCellOpt(K5)
			varK5,
			config, -1)
		if err1083 != nil {
			return m.NoResult, err1083
		}
		eval1084, err1084 := evalIsCallValueCellOpt( // isCallValueCellOpt(K6)
			varK6,
			config, -1)
		if err1084 != nil {
			return m.NoResult, err1084
		}
		eval1085, err1085 := evalIsRegsCellOpt( // isRegsCellOpt(K7)
			varK7,
			config, -1)
		if err1085 != nil {
			return m.NoResult, err1085
		}
		eval1086, err1086 := evalIsLocalMemCellOpt( // isLocalMemCellOpt(K8)
			varK8,
			config, -1)
		if err1086 != nil {
			return m.NoResult, err1086
		}
		eval1087, err1087 := evalIsPeakMemoryCellOpt( // isPeakMemoryCellOpt(K9)
			varK9,
			config, -1)
		if err1087 != nil {
			return m.NoResult, err1087
		}
		eval1088, err1088 := evalIsCurrentMemoryCellOpt( // isCurrentMemoryCellOpt(K10)
			varK10,
			config, -1)
		if err1088 != nil {
			return m.NoResult, err1088
		}
		eval1089, err1089 := evalIsFidCellOpt( // isFidCellOpt(K11)
			varK11,
			config, -1)
		if err1089 != nil {
			return m.NoResult, err1089
		}
		eval1090, err1090 := evalIsGasCellOpt( // isGasCellOpt(K12)
			varK12,
			config, -1)
		if err1090 != nil {
			return m.NoResult, err1090
		}
		eval1091, err1091 := evalIsPreviousGasCellOpt( // isPreviousGasCellOpt(K13)
			varK13,
			config, -1)
		if err1091 != nil {
			return m.NoResult, err1091
		}
		eval1092, err1092 := evalIsStaticCellOpt( // isStaticCellOpt(K14)
			varK14,
			config, -1)
		if err1092 != nil {
			return m.NoResult, err1092
		}
		if ((((((((((((((m.IsTrue(eval1078)) &&
		   (m.IsTrue(eval1079))) &&
		   (m.IsTrue(eval1080))) &&
		   (m.IsTrue(eval1081))) &&
		   (m.IsTrue(eval1082))) &&
		   (m.IsTrue(eval1083))) &&
		   (m.IsTrue(eval1084))) &&
		   (m.IsTrue(eval1085))) &&
		   (m.IsTrue(eval1086))) &&
		   (m.IsTrue(eval1087))) &&
		   (m.IsTrue(eval1088))) &&
		   (m.IsTrue(eval1089))) &&
		   (m.IsTrue(eval1090))) &&
		   (m.IsTrue(eval1091))) &&
		   (m.IsTrue(eval1092)) {
			// RHS
			traceRuleApply("FUNC", 991, "{| rule isCallFrameCellFragment(`<callFrame>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCellOpt(K0),isCallDepthCellOpt(K1)),isLocalCallsCellOpt(K2)),isIdCellOpt(K3)),isCallerCellOpt(K4)),isCallDataCellOpt(K5)),isCallValueCellOpt(K6)),isRegsCellOpt(K7)),isLocalMemCellOpt(K8)),isPeakMemoryCellOpt(K9)),isCurrentMemoryCellOpt(K10)),isFidCellOpt(K11)),isGasCellOpt(K12)),isPreviousGasCellOpt(K13)),isStaticCellOpt(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #992
	// source: ? @?
	// {| rule isCallFrameCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 992, "{| rule isCallFrameCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashloadCode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #993
	// source: iele.k @1751
	// {| rule #loadCode(CONTRACT)=>#loadCodeAux(CONTRACT,CONTRACT) requires isContract(CONTRACT) ensures #token("true","Bool") [UNIQUE_ID(4ed520d94a9c4905c78a6c502be012beed065414960e012c7f0070e0ccb3218d) contentStartColumn(11) contentStartLine(1751) org.kframework.attributes.Location(Location(1751,11,1751,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCONTRACT := c // lhs KVariable CONTRACT
		// REQUIRES
		eval1093, err1093 := evalIsContract( // isContract(CONTRACT)
			varCONTRACT,
			config, -1)
		if err1093 != nil {
			return m.NoResult, err1093
		}
		if m.IsTrue(eval1093) {
			// RHS
			traceRuleApply("FUNC", 993, "{| rule #loadCode(CONTRACT)=>#loadCodeAux(CONTRACT,CONTRACT) requires isContract(CONTRACT) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4ed520d94a9c4905c78a6c502be012beed065414960e012c7f0070e0ccb3218d) contentStartColumn(11) contentStartLine(1751) org.kframework.attributes.Location(Location(1751,11,1751,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1094, err1094 := evalXhashloadCodeAux( // #loadCodeAux(CONTRACT,CONTRACT)
				varCONTRACT,
				varCONTRACT,
				config, -1)
			if err1094 != nil {
				return m.NoResult, err1094
			}
			return eval1094, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadCode", args: []m.K{c}}
}

func evalXuinXukeysXlparenXuXrparenXuARRAYXhyphenSYNTAX(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.in_keys
	lbl := m.LblXuinXukeysXlparenXuXrparenXuARRAYXhyphenSYNTAX // _in_keys(_)_ARRAY-SYNTAX
	sort := m.SortBool
	if hookRes, hookErr := arrayHooks.inKeys(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.in_keys, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuinXukeysXlparenXuXrparenXuARRAYXhyphenSYNTAX", args: []m.K{c1, c2}}
}

func evalXuXeqXeqIntXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.eq
	lbl := m.LblXuXeqXeqIntXu // _==Int_
	sort := m.SortBool
	if hookRes, hookErr := intHooks.eq(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.eq, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #994
	// source: domains.k @407
	// {| rule `_==Int_`(I1,I2)=>`_==K_`(I1,I2) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token("true","Bool") [UNIQUE_ID(e92e4aa4a18bee70f2627cdafb8687e2dfcc0dd6a7f8cbb8d1bd17d751c2da2a) contentStartColumn(8) contentStartLine(407) org.kframework.attributes.Location(Location(407,8,407,40)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(I1) && isInt(I2)
			// RHS
			traceRuleApply("FUNC", 994, "{| rule `_==Int_`(I1,I2)=>`_==K_`(I1,I2) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e92e4aa4a18bee70f2627cdafb8687e2dfcc0dd6a7f8cbb8d1bd17d751c2da2a) contentStartColumn(8) contentStartLine(407) org.kframework.attributes.Location(Location(407,8,407,40)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1095, err1095 := evalXuXeqXeqKXu( // `_==K_`(I1,I2)
				varI1,
				varI2,
				config, -1)
			if err1095 != nil {
				return m.NoResult, err1095
			}
			return eval1095, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXeqIntXu", args: []m.K{c1, c2}}
}

func evalXuandThenBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.andThen
	lbl := m.LblXuandThenBoolXuXuBOOL // _andThenBool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.andThen(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.andThen, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #995
	// source: domains.k @308
	// {| rule `_andThenBool__BOOL`(K,#token("true","Bool"))=>K requires isBool(K) ensures #token("true","Bool") [UNIQUE_ID(1aad8125a2ba7fcbd3c40ac487b7dc776993e9d167ac20f0210e14213abec45f) contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varK, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolTrue) { // #token("true","Bool")
			// REQUIRES precomputed isBool(K)
			// RHS
			traceRuleApply("FUNC", 995, "{| rule `_andThenBool__BOOL`(K,#token(\"true\",\"Bool\"))=>K requires isBool(K) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1aad8125a2ba7fcbd3c40ac487b7dc776993e9d167ac20f0210e14213abec45f) contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varK, nil
		}
	}

	// rule #996
	// source: domains.k @309
	// {| rule `_andThenBool__BOOL`(#token("false","Bool"),_1)=>#token("false","Bool") requires isBool(_1) ensures #token("true","Bool") [UNIQUE_ID(34b51d1bff350ce2cd8b17b3af8effdfcf390962b57189087f3cc3b6bbe59cbc) contentStartColumn(8) contentStartLine(309) org.kframework.attributes.Location(Location(309,8,309,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if _, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(_1)
			// RHS
			traceRuleApply("FUNC", 996, "{| rule `_andThenBool__BOOL`(#token(\"false\",\"Bool\"),_1)=>#token(\"false\",\"Bool\") requires isBool(_1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(34b51d1bff350ce2cd8b17b3af8effdfcf390962b57189087f3cc3b6bbe59cbc) contentStartColumn(8) contentStartLine(309) org.kframework.attributes.Location(Location(309,8,309,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #997
	// source: domains.k @307
	// {| rule `_andThenBool__BOOL`(#token("true","Bool"),K)=>K requires isBool(K) ensures #token("true","Bool") [UNIQUE_ID(b058439c1adf0de5fb7afd07d638d2cda247a4344cbdc14812da46c5db5499df) contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		if varK, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K)
			// RHS
			traceRuleApply("FUNC", 997, "{| rule `_andThenBool__BOOL`(#token(\"true\",\"Bool\"),K)=>K requires isBool(K) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b058439c1adf0de5fb7afd07d638d2cda247a4344cbdc14812da46c5db5499df) contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varK, nil
		}
	}

	// rule #998
	// source: domains.k @310
	// {| rule `_andThenBool__BOOL`(_4,#token("false","Bool"))=>#token("false","Bool") requires isBool(_4) ensures #token("true","Bool") [UNIQUE_ID(d0a6502b90e84545c10a45f7199b2a6d77f52d0841c63dcc792b60073f300e07) contentStartColumn(8) contentStartLine(310) org.kframework.attributes.Location(Location(310,8,310,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(_4)
			// RHS
			traceRuleApply("FUNC", 998, "{| rule `_andThenBool__BOOL`(_4,#token(\"false\",\"Bool\"))=>#token(\"false\",\"Bool\") requires isBool(_4) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0a6502b90e84545c10a45f7199b2a6d77f52d0841c63dcc792b60073f300e07) contentStartColumn(8) contentStartLine(310) org.kframework.attributes.Location(Location(310,8,310,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuandThenBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalXhashparseInModule(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.parseInModule
	lbl := m.LblXhashparseInModule // #parseInModule
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.parseInModule(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.parseInModule, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseInModule", args: []m.K{c1, c2, c3}}
}

func evalIsOriginCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #999
	// source: ? @?
	// {| rule isOriginCellOpt(`<origin>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltoriginXgt && len(kapp0.List) == 1 { // `<origin>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 999, "{| rule isOriginCellOpt(`<origin>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1000
	// source: ? @?
	// {| rule isOriginCellOpt(noOriginCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoOriginCell && len(kapp0.List) == 0 { // noOriginCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1000, "{| rule isOriginCellOpt(noOriginCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1001
	// source: ? @?
	// {| rule isOriginCellOpt(#KToken(#token("OriginCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOriginCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1001, "{| rule isOriginCellOpt(#KToken(#token(\"OriginCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1002
	// source: ? @?
	// {| rule isOriginCellOpt(#KToken(#token("OriginCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOriginCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1002, "{| rule isOriginCellOpt(#KToken(#token(\"OriginCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1003
	// source: ? @?
	// {| rule isOriginCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1003, "{| rule isOriginCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCodeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1004
	// source: ? @?
	// {| rule isCodeCell(#KToken(#token("CodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1004, "{| rule isCodeCell(#KToken(#token(\"CodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1005
	// source: ? @?
	// {| rule isCodeCell(`<code>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcodeXgt && len(kapp0.List) == 1 { // `<code>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1096, err1096 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err1096 != nil {
			return m.NoResult, err1096
		}
		if m.IsTrue(eval1096) {
			// RHS
			traceRuleApply("FUNC", 1005, "{| rule isCodeCell(`<code>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1006
	// source: ? @?
	// {| rule isCodeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1006, "{| rule isCodeCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitLocalCallsCell(config m.K, guard int) (m.K, error) {
	// rule #1007
	// source: ? @?
	// {| rule initLocalCallsCell(.KList)=>`<localCalls>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(52d9bca45e5ab2cc24c1b057bf863578c3e6190acd35c0a41dfa2615887ab41c) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1007, "{| rule initLocalCallsCell(.KList)=>`<localCalls>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(52d9bca45e5ab2cc24c1b057bf863578c3e6190acd35c0a41dfa2615887ab41c) initializer()] |}")
	eval1097, err1097 := evalXdotList(config, -1) // `.List`(.KList)
	if err1097 != nil {
		return m.NoResult, err1097
	}
	return &m.KApply{Label: m.LblXltlocalCallsXgt, List: []m.K{ // as-is <localCalls>
		eval1097,
	}}, nil

}

//var constInitLocalCallsCell K = evalInitLocalCallsCell(m.InternedBottom)

func evalIsLogInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1008
	// source: ? @?
	// {| rule isLogInst(`_=log2__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqlog2XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=log2__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1098, err1098 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1098 != nil {
			return m.NoResult, err1098
		}
		eval1099, err1099 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1099 != nil {
			return m.NoResult, err1099
		}
		if (m.IsTrue(eval1098)) &&
		   (m.IsTrue(eval1099)) {
			// RHS
			traceRuleApply("FUNC", 1008, "{| rule isLogInst(`_=log2__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1009
	// source: ? @?
	// {| rule isLogInst(#KToken(#token("LogInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1009, "{| rule isLogInst(#KToken(#token(\"LogInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1010
	// source: ? @?
	// {| rule isLogInst(`log_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1100, err1100 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1100 != nil {
			return m.NoResult, err1100
		}
		eval1101, err1101 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err1101 != nil {
			return m.NoResult, err1101
		}
		if (m.IsTrue(eval1100)) &&
		   (m.IsTrue(eval1101)) {
			// RHS
			traceRuleApply("FUNC", 1010, "{| rule isLogInst(`log_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1011
	// source: ? @?
	// {| rule isLogInst(`log__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1102, err1102 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1102 != nil {
			return m.NoResult, err1102
		}
		if m.IsTrue(eval1102) {
			// RHS
			traceRuleApply("FUNC", 1011, "{| rule isLogInst(`log__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1012
	// source: ? @?
	// {| rule isLogInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1012, "{| rule isLogInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalExtractConfig(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1013
	// source: iele-node.k @159
	// {| rule extractConfig(`<generatedTop>`(`<k>`(STATUS),_30,_31,_32,`<schedule>`(SCHED),_33,_34,`<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),`<substate>`(`<selfDestruct>`(SD),`<logData>`(LOGS),`<refund>`(REFUND)),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_26,`<accounts>`(ACCTS),_27,_28,_29)))=>vmResult(#toList(OUT),ceilDiv(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),REFUND,STATUS,`Set2List`(SD),LOGS,`<accounts>`(ACCTS),`.List`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSet(SD),`_andBool_`(#token("true","Bool"),isAccountCellMap(ACCTS))),isList(LOGS)),isInts(OUT)),isInt(REFUND)),isSchedule(SCHED)),isInt(STATUS)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(73287504804a9958fbfdaf062116cd28571a8ed480ceda98f1372bd7c4e8c6d3) contentStartColumn(10) contentStartLine(159) org.kframework.attributes.Location(Location(159,10,159,399)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgeneratedTopXgt && len(kapp0.List) == 9 { // `<generatedTop>`(`<k>`(STATUS),_30,_31,_32,`<schedule>`(SCHED),_33,_34,`<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),`<substate>`(`<selfDestruct>`(SD),`<logData>`(LOGS),`<refund>`(REFUND)),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_26,`<accounts>`(ACCTS),_27,_28,_29))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXltkXgt && len(kapp1.List) == 1 { // `<k>`(STATUS)
			if varSTATUS, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				doNothing(kapp0.List[1]) // varXu30 := kapp0.List[1] // lhs KVariable not used
				doNothing(kapp0.List[2]) // varXu31 := kapp0.List[2] // lhs KVariable not used
				doNothing(kapp0.List[3]) // varXu32 := kapp0.List[3] // lhs KVariable not used
				if kapp2, t := kapp0.List[4].(*m.KApply); t && kapp2.Label == m.LblXltscheduleXgt && len(kapp2.List) == 1 { // `<schedule>`(SCHED)
					varSCHED := kapp2.List[0] // lhs KVariable SCHED
					doNothing(kapp0.List[5]) // varXu33 := kapp0.List[5] // lhs KVariable not used
					doNothing(kapp0.List[6]) // varXu34 := kapp0.List[6] // lhs KVariable not used
					if kapp3, t := kapp0.List[7].(*m.KApply); t && kapp3.Label == m.LblXltieleXgt && len(kapp3.List) == 15 { // `<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),`<substate>`(`<selfDestruct>`(SD),`<logData>`(LOGS),`<refund>`(REFUND)),_17,_18,_19,_20,_21,_22,_23,_24,_25)
						if kapp4, t := kapp3.List[0].(*m.KApply); t && kapp4.Label == m.LblXltoutputXgt && len(kapp4.List) == 1 { // `<output>`(OUT)
							varOUT := kapp4.List[0] // lhs KVariable OUT
							doNothing(kapp3.List[1]) // varXu14 := kapp3.List[1] // lhs KVariable not used
							doNothing(kapp3.List[2]) // varXu15 := kapp3.List[2] // lhs KVariable not used
							doNothing(kapp3.List[3]) // varXu16 := kapp3.List[3] // lhs KVariable not used
							if kapp5, t := kapp3.List[4].(*m.KApply); t && kapp5.Label == m.LblXltcallFrameXgt && len(kapp5.List) == 15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
								doNothing(kapp5.List[0]) // varXu0 := kapp5.List[0] // lhs KVariable not used
								doNothing(kapp5.List[1]) // varXu1 := kapp5.List[1] // lhs KVariable not used
								doNothing(kapp5.List[2]) // varXu2 := kapp5.List[2] // lhs KVariable not used
								doNothing(kapp5.List[3]) // varXu3 := kapp5.List[3] // lhs KVariable not used
								doNothing(kapp5.List[4]) // varXu4 := kapp5.List[4] // lhs KVariable not used
								doNothing(kapp5.List[5]) // varXu5 := kapp5.List[5] // lhs KVariable not used
								doNothing(kapp5.List[6]) // varXu6 := kapp5.List[6] // lhs KVariable not used
								doNothing(kapp5.List[7]) // varXu7 := kapp5.List[7] // lhs KVariable not used
								doNothing(kapp5.List[8]) // varXu8 := kapp5.List[8] // lhs KVariable not used
								doNothing(kapp5.List[9]) // varXu9 := kapp5.List[9] // lhs KVariable not used
								doNothing(kapp5.List[10]) // varXu10 := kapp5.List[10] // lhs KVariable not used
								doNothing(kapp5.List[11]) // varXu11 := kapp5.List[11] // lhs KVariable not used
								if kapp6, t := kapp5.List[12].(*m.KApply); t && kapp6.Label == m.LblXltgasXgt && len(kapp6.List) == 1 { // `<gas>`(GAVAIL)
									if varGAVAIL, t := kapp6.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										doNothing(kapp5.List[13]) // varXu12 := kapp5.List[13] // lhs KVariable not used
										doNothing(kapp5.List[14]) // varXu13 := kapp5.List[14] // lhs KVariable not used
										if kapp7, t := kapp3.List[5].(*m.KApply); t && kapp7.Label == m.LblXltsubstateXgt && len(kapp7.List) == 3 { // `<substate>`(`<selfDestruct>`(SD),`<logData>`(LOGS),`<refund>`(REFUND))
											if kapp8, t := kapp7.List[0].(*m.KApply); t && kapp8.Label == m.LblXltselfDestructXgt && len(kapp8.List) == 1 { // `<selfDestruct>`(SD)
												if varSD, t := kapp8.List[0].(*m.Set); t && varSD.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
													if kapp9, t := kapp7.List[1].(*m.KApply); t && kapp9.Label == m.LblXltlogDataXgt && len(kapp9.List) == 1 { // `<logData>`(LOGS)
														if varLOGS, t := kapp9.List[0].(*m.List); t && varLOGS.Sort == m.SortList { // lhs KVariable with hook:LIST.List
															if kapp10, t := kapp7.List[2].(*m.KApply); t && kapp10.Label == m.LblXltrefundXgt && len(kapp10.List) == 1 { // `<refund>`(REFUND)
																if varREFUND, t := kapp10.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
																	doNothing(kapp3.List[6]) // varXu17 := kapp3.List[6] // lhs KVariable not used
																	doNothing(kapp3.List[7]) // varXu18 := kapp3.List[7] // lhs KVariable not used
																	doNothing(kapp3.List[8]) // varXu19 := kapp3.List[8] // lhs KVariable not used
																	doNothing(kapp3.List[9]) // varXu20 := kapp3.List[9] // lhs KVariable not used
																	doNothing(kapp3.List[10]) // varXu21 := kapp3.List[10] // lhs KVariable not used
																	doNothing(kapp3.List[11]) // varXu22 := kapp3.List[11] // lhs KVariable not used
																	doNothing(kapp3.List[12]) // varXu23 := kapp3.List[12] // lhs KVariable not used
																	doNothing(kapp3.List[13]) // varXu24 := kapp3.List[13] // lhs KVariable not used
																	doNothing(kapp3.List[14]) // varXu25 := kapp3.List[14] // lhs KVariable not used
																	if kapp11, t := kapp0.List[8].(*m.KApply); t && kapp11.Label == m.LblXltnetworkXgt && len(kapp11.List) == 5 { // `<network>`(_26,`<accounts>`(ACCTS),_27,_28,_29)
																		doNothing(kapp11.List[0]) // varXu26 := kapp11.List[0] // lhs KVariable not used
																		if kapp12, t := kapp11.List[1].(*m.KApply); t && kapp12.Label == m.LblXltaccountsXgt && len(kapp12.List) == 1 { // `<accounts>`(ACCTS)
																			if varACCTS, t := kapp12.List[0].(*m.Map); t && varACCTS.Sort == m.SortAccountCellMap { // lhs KVariable with hook:MAP.Map
																				doNothing(kapp11.List[2]) // varXu27 := kapp11.List[2] // lhs KVariable not used
																				doNothing(kapp11.List[3]) // varXu28 := kapp11.List[3] // lhs KVariable not used
																				doNothing(kapp11.List[4]) // varXu29 := kapp11.List[4] // lhs KVariable not used
																				// REQUIRES
																				eval1103, err1103 := evalIsInts( // isInts(OUT)
																					varOUT,
																					config, -1)
																				if err1103 != nil {
																					return m.NoResult, err1103
																				}
																				eval1104, err1104 := evalIsSchedule( // isSchedule(SCHED)
																					varSCHED,
																					config, -1)
																				if err1104 != nil {
																					return m.NoResult, err1104
																				}
																				if (/* rhs precomputed isSet(SD) && KToken && isAccountCellMap(ACCTS) && isList(LOGS) */ /* && */
																				   m.IsTrue(eval1103) /* && */ /* rhs precomputed isInt(REFUND) */ ) &&
																				   (m.IsTrue(eval1104)) /* && */ /* rhs precomputed isInt(STATUS) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																					// RHS
																					traceRuleApply("FUNC", 1013, "{| rule extractConfig(`<generatedTop>`(`<k>`(STATUS),_30,_31,_32,`<schedule>`(SCHED),_33,_34,`<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),`<substate>`(`<selfDestruct>`(SD),`<logData>`(LOGS),`<refund>`(REFUND)),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_26,`<accounts>`(ACCTS),_27,_28,_29)))=>vmResult(#toList(OUT),ceilDiv(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),REFUND,STATUS,`Set2List`(SD),LOGS,`<accounts>`(ACCTS),`.List`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSet(SD),`_andBool_`(#token(\"true\",\"Bool\"),isAccountCellMap(ACCTS))),isList(LOGS)),isInts(OUT)),isInt(REFUND)),isSchedule(SCHED)),isInt(STATUS)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(73287504804a9958fbfdaf062116cd28571a8ed480ceda98f1372bd7c4e8c6d3) contentStartColumn(10) contentStartLine(159) org.kframework.attributes.Location(Location(159,10,159,399)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
																					eval1105, err1105 := evalXhashtoList( // #toList(OUT)
																						varOUT,
																						config, -1)
																					if err1105 != nil {
																						return m.NoResult, err1105
																					}
																					eval1107, err1107 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
																						&m.KApply{Label: m.LblSgasdivisorXuIELEXhyphenGAS, List: []m.K{ // as-is Sgasdivisor_IELE-GAS
																						}},
																						varSCHED,
																						config, -1)
																					if err1107 != nil {
																						return m.NoResult, err1107
																					}
																					eval1106, err1106 := evalCeilDiv( // ceilDiv(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
																						varGAVAIL,
																						eval1107,
																						config, -1)
																					if err1106 != nil {
																						return m.NoResult, err1106
																					}
																					eval1108, err1108 := evalSet2List( // `Set2List`(SD)
																						varSD,
																						config, -1)
																					if err1108 != nil {
																						return m.NoResult, err1108
																					}
																					eval1109, err1109 := evalXdotList(config, -1) // `.List`(.KList)
																					if err1109 != nil {
																						return m.NoResult, err1109
																					}
																					return &m.KApply{Label: m.LblVmResult, List: []m.K{ // as-is vmResult
																						eval1105,
																						eval1106,
																						varREFUND,
																						varSTATUS,
																						eval1108,
																						varLOGS,
																						&m.KApply{Label: m.LblXltaccountsXgt, List: []m.K{ // as-is <accounts>
																							varACCTS,
																						}},
																						eval1109,
																					}}, nil
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalExtractConfig", args: []m.K{c}}
}

func evalXuXpercentIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.tmod
	lbl := m.LblXuXpercentIntXuXuINT // _%Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.tmod(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.tmod, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXpercentIntXuXuINT", args: []m.K{c1, c2}}
}

func memoCmem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1014
	// source: iele-gas.k @414
	// {| rule `Cmem`(SCHED,N)=>`_+Int_`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),SCHED)),`_/Int__INT`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`Cpricedmem`(SCHED,N)),`_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),SCHED))) requires `_andBool_`(isSchedule(SCHED),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(34919caca2ed8c8bc06aa6ad3624da11b1dc27fea2ae613ab9e0219b8055498a) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,156)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1110, err1110 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err1110 != nil {
				return m.NoResult, err1110
			}
			if m.IsTrue(eval1110) /* && */ /* rhs precomputed isInt(N) */  {
				// RHS
				traceRuleApply("FUNC", 1014, "{| rule `Cmem`(SCHED,N)=>`_+Int_`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),SCHED)),`_/Int__INT`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`Cpricedmem`(SCHED,N)),`_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),SCHED))) requires `_andBool_`(isSchedule(SCHED),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(34919caca2ed8c8bc06aa6ad3624da11b1dc27fea2ae613ab9e0219b8055498a) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,156)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1113, err1113 := evalCpricedmem( // `Cpricedmem`(SCHED,N)
					varSCHED,
					varN,
					config, -1)
				if err1113 != nil {
					return m.NoResult, err1113
				}
				eval1114, err1114 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblGmemoryXuIELEXhyphenGAS, List: []m.K{ // as-is Gmemory_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err1114 != nil {
					return m.NoResult, err1114
				}
				eval1112, err1112 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`Cpricedmem`(SCHED,N),`_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),SCHED))
					eval1113,
					eval1114,
					config, -1)
				if err1112 != nil {
					return m.NoResult, err1112
				}
				eval1117, err1117 := evalCpricedmem( // `Cpricedmem`(SCHED,N)
					varSCHED,
					varN,
					config, -1)
				if err1117 != nil {
					return m.NoResult, err1117
				}
				eval1118, err1118 := evalCpricedmem( // `Cpricedmem`(SCHED,N)
					varSCHED,
					varN,
					config, -1)
				if err1118 != nil {
					return m.NoResult, err1118
				}
				eval1116, err1116 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`Cpricedmem`(SCHED,N),`Cpricedmem`(SCHED,N))
					eval1117,
					eval1118,
					config, -1)
				if err1116 != nil {
					return m.NoResult, err1116
				}
				eval1119, err1119 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblGquadcoeffXuIELEXhyphenGAS, List: []m.K{ // as-is Gquadcoeff_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err1119 != nil {
					return m.NoResult, err1119
				}
				eval1115, err1115 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`Cpricedmem`(SCHED,N)),`_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),SCHED))
					eval1116,
					eval1119,
					config, -1)
				if err1115 != nil {
					return m.NoResult, err1115
				}
				eval1111, err1111 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),SCHED)),`_/Int__INT`(`_*Int__INT`(`Cpricedmem`(SCHED,N),`Cpricedmem`(SCHED,N)),`_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),SCHED)))
					eval1112,
					eval1115,
					config, -1)
				if err1111 != nil {
					return m.NoResult, err1111
				}
				return eval1111, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "memoCmem", args: []m.K{c1, c2}}
}

var memoTableCmem = make(map[[2]m.KMapKey]m.K)

func evalCmem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	c1AsKey, ok1 := m.MapKey(c1)
	if !ok1 {
		warn("Memo keys unsuitable in evalCmem")
		return memoCmem(c1, c2, config, guard)
	}
	c2AsKey, ok2 := m.MapKey(c2)
	if !ok2 {
		warn("Memo keys unsuitable in evalCmem")
		return memoCmem(c1, c2, config, guard)
	}
	memoKey :=[2]m.KMapKey{c1AsKey, c2AsKey}
	if result, found := memoTableCmem[memoKey]; found {
		return result, nil
	}
	computation, err := memoCmem(c1, c2, config, guard)
	if err != nil {
		return m.NoResult, err
	}
	memoTableCmem[memoKey] = computation
	return computation, nil
}

func evalXuXgtXgtIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.shr
	lbl := m.LblXuXgtXgtIntXuXuINT // _>>Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.shr(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.shr, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXgtXgtIntXuXuINT", args: []m.K{c1, c2}}
}

func evalXhashtoBlockAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1015
	// source: iele-binary.k @217
	// {| rule #toBlockAux(instructionList(INSTR,INSTRS),`___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,UNLABELEDBLOCK),BLOCKS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstructions(UNLABELEDBLOCK)),isInstruction(INSTR)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token("true","Bool") [UNIQUE_ID(b418632252141057771c7d842230fe26ea998fed0aa1607b1aa792cfa38e87b9) contentStartColumn(10) contentStartLine(217) org.kframework.attributes.Location(Location(217,10,218,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(INSTR,INSTRS)
		varINSTR := kapp0.List[0] // lhs KVariable INSTR
		varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS)
			varUNLABELEDBLOCK := kapp1.List[0] // lhs KVariable UNLABELEDBLOCK
			varBLOCKS := kapp1.List[1] // lhs KVariable BLOCKS
			// REQUIRES
			eval1120, err1120 := evalIsInstructions( // isInstructions(INSTRS)
				varINSTRS,
				config, -1)
			if err1120 != nil {
				return m.NoResult, err1120
			}
			eval1121, err1121 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
				varBLOCKS,
				config, -1)
			if err1121 != nil {
				return m.NoResult, err1121
			}
			eval1122, err1122 := evalIsInstructions( // isInstructions(UNLABELEDBLOCK)
				varUNLABELEDBLOCK,
				config, -1)
			if err1122 != nil {
				return m.NoResult, err1122
			}
			eval1123, err1123 := evalIsInstruction( // isInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1123 != nil {
				return m.NoResult, err1123
			}
			eval1124, err1124 := evalIsPseudoInstruction( // isPseudoInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1124 != nil {
				return m.NoResult, err1124
			}
			if ((((m.IsTrue(eval1120)) &&
			   (m.IsTrue(eval1121))) &&
			   (m.IsTrue(eval1122))) &&
			   (m.IsTrue(eval1123))) &&
			   (!(m.IsTrue(eval1124))) {
				// RHS
				traceRuleApply("FUNC", 1015, "{| rule #toBlockAux(instructionList(INSTR,INSTRS),`___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,UNLABELEDBLOCK),BLOCKS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstructions(UNLABELEDBLOCK)),isInstruction(INSTR)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b418632252141057771c7d842230fe26ea998fed0aa1607b1aa792cfa38e87b9) contentStartColumn(10) contentStartLine(217) org.kframework.attributes.Location(Location(217,10,218,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1125, err1125 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,UNLABELEDBLOCK),BLOCKS))
					varINSTRS,
					&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
						&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
							varINSTR,
							varUNLABELEDBLOCK,
						}},
						varBLOCKS,
					}},
					config, -1)
				if err1125 != nil {
					return m.NoResult, err1125
				}
				return eval1125, nil
			}
		}
	}

	// rule #1016
	// source: iele-binary.k @221
	// {| rule #toBlockAux(instructionList(INSTR,INSTRS),`.List{"labeledBlockList"}`(.KList))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))) requires `_andBool_`(`_andBool_`(isInstructions(INSTRS),isInstruction(INSTR)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token("true","Bool") [UNIQUE_ID(9560dda54aa653cfcc7682fc91c1c35f97cfea5457e46c3e091a80b36da3ce5c) contentStartColumn(10) contentStartLine(221) org.kframework.attributes.Location(Location(221,10,222,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(INSTR,INSTRS)
		varINSTR := kapp0.List[0] // lhs KVariable INSTR
		varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp1.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
			// REQUIRES
			eval1126, err1126 := evalIsInstructions( // isInstructions(INSTRS)
				varINSTRS,
				config, -1)
			if err1126 != nil {
				return m.NoResult, err1126
			}
			eval1127, err1127 := evalIsInstruction( // isInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1127 != nil {
				return m.NoResult, err1127
			}
			eval1128, err1128 := evalIsPseudoInstruction( // isPseudoInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1128 != nil {
				return m.NoResult, err1128
			}
			if ((m.IsTrue(eval1126)) &&
			   (m.IsTrue(eval1127))) &&
			   (!(m.IsTrue(eval1128))) {
				// RHS
				traceRuleApply("FUNC", 1016, "{| rule #toBlockAux(instructionList(INSTR,INSTRS),`.List{\"labeledBlockList\"}`(.KList))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))) requires `_andBool_`(`_andBool_`(isInstructions(INSTRS),isInstruction(INSTR)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9560dda54aa653cfcc7682fc91c1c35f97cfea5457e46c3e091a80b36da3ce5c) contentStartColumn(10) contentStartLine(221) org.kframework.attributes.Location(Location(221,10,222,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1129, err1129 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList)))
					varINSTRS,
					&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
						&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
							varINSTR,
							&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
							}},
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
						}},
					}},
					config, -1)
				if err1129 != nil {
					return m.NoResult, err1129
				}
				return eval1129, nil
			}
		}
	}

	// rule #1017
	// source: iele-binary.k @215
	// {| rule #toBlockAux(instructionList(label(LABEL),INSTRS),labeledBlockList(LABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{"instructionList"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(LABEL)),isLabeledBlock(LABELEDBLOCK)) ensures #token("true","Bool") [UNIQUE_ID(6cae157dd50aa22db2eb43300c46ac8a53783175fbdf73d06b8574ff7270d7dc) contentStartColumn(10) contentStartLine(215) org.kframework.attributes.Location(Location(215,10,215,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(label(LABEL),INSTRS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblLabel && len(kapp1.List) == 1 { // label(LABEL)
			if varLABEL, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
				if kapp2, t := c2.(*m.KApply); t && kapp2.Label == m.LblLabeledBlockList && len(kapp2.List) == 2 { // labeledBlockList(LABELEDBLOCK,BLOCKS)
					varLABELEDBLOCK := kapp2.List[0] // lhs KVariable LABELEDBLOCK
					varBLOCKS := kapp2.List[1] // lhs KVariable BLOCKS
					// REQUIRES
					eval1130, err1130 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err1130 != nil {
						return m.NoResult, err1130
					}
					eval1131, err1131 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
						varBLOCKS,
						config, -1)
					if err1131 != nil {
						return m.NoResult, err1131
					}
					eval1132, err1132 := evalIsLabeledBlock( // isLabeledBlock(LABELEDBLOCK)
						varLABELEDBLOCK,
						config, -1)
					if err1132 != nil {
						return m.NoResult, err1132
					}
					if ((m.IsTrue(eval1130)) &&
					   (m.IsTrue(eval1131)) /* && */ /* rhs precomputed isInt(LABEL) */ ) &&
					   (m.IsTrue(eval1132)) {
						// RHS
						traceRuleApply("FUNC", 1017, "{| rule #toBlockAux(instructionList(label(LABEL),INSTRS),labeledBlockList(LABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{\"instructionList\"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInt(LABEL)),isLabeledBlock(LABELEDBLOCK)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6cae157dd50aa22db2eb43300c46ac8a53783175fbdf73d06b8574ff7270d7dc) contentStartColumn(10) contentStartLine(215) org.kframework.attributes.Location(Location(215,10,215,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1133, err1133 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{"instructionList"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS)))
							varINSTRS,
							&m.KApply{Label: m.LblLabeledBlockList, List: []m.K{ // as-is labeledBlockList
								&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _:__IELE-COMMON
									varLABEL,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
									}},
								}},
								&m.KApply{Label: m.LblLabeledBlockList, List: []m.K{ // as-is labeledBlockList
									varLABELEDBLOCK,
									varBLOCKS,
								}},
							}},
							config, -1)
						if err1133 != nil {
							return m.NoResult, err1133
						}
						return eval1133, nil
					}
				}
			}
		}
	}

	// rule #1018
	// source: iele-binary.k @214
	// {| rule #toBlockAux(instructionList(label(LABEL),INSTRS),`___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,UNLABELEDBLOCK),BLOCKS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstructions(UNLABELEDBLOCK)),isInt(LABEL)) ensures #token("true","Bool") [UNIQUE_ID(1beda145f1149dac1ba48d599c01b5b84fd36381c4f7ceb381487fe7e3882e3b) contentStartColumn(10) contentStartLine(214) org.kframework.attributes.Location(Location(214,10,214,129)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(label(LABEL),INSTRS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblLabel && len(kapp1.List) == 1 { // label(LABEL)
			if varLABEL, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
				if kapp2, t := c2.(*m.KApply); t && kapp2.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS)
					varUNLABELEDBLOCK := kapp2.List[0] // lhs KVariable UNLABELEDBLOCK
					varBLOCKS := kapp2.List[1] // lhs KVariable BLOCKS
					// REQUIRES
					eval1134, err1134 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err1134 != nil {
						return m.NoResult, err1134
					}
					eval1135, err1135 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
						varBLOCKS,
						config, -1)
					if err1135 != nil {
						return m.NoResult, err1135
					}
					eval1136, err1136 := evalIsInstructions( // isInstructions(UNLABELEDBLOCK)
						varUNLABELEDBLOCK,
						config, -1)
					if err1136 != nil {
						return m.NoResult, err1136
					}
					if ((m.IsTrue(eval1134)) &&
					   (m.IsTrue(eval1135))) &&
					   (m.IsTrue(eval1136)) /* && */ /* rhs precomputed isInt(LABEL) */  {
						// RHS
						traceRuleApply("FUNC", 1018, "{| rule #toBlockAux(instructionList(label(LABEL),INSTRS),`___IELE-COMMON`(UNLABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,UNLABELEDBLOCK),BLOCKS)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstructions(UNLABELEDBLOCK)),isInt(LABEL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1beda145f1149dac1ba48d599c01b5b84fd36381c4f7ceb381487fe7e3882e3b) contentStartColumn(10) contentStartLine(214) org.kframework.attributes.Location(Location(214,10,214,129)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1137, err1137 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,UNLABELEDBLOCK),BLOCKS))
							varINSTRS,
							&m.KApply{Label: m.LblLabeledBlockList, List: []m.K{ // as-is labeledBlockList
								&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _:__IELE-COMMON
									varLABEL,
									varUNLABELEDBLOCK,
								}},
								varBLOCKS,
							}},
							config, -1)
						if err1137 != nil {
							return m.NoResult, err1137
						}
						return eval1137, nil
					}
				}
			}
		}
	}

	// rule #1019
	// source: iele-binary.k @216
	// {| rule #toBlockAux(instructionList(label(LABEL),INSTRS),`.List{"labeledBlockList"}`(.KList))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))) requires `_andBool_`(isInstructions(INSTRS),isInt(LABEL)) ensures #token("true","Bool") [UNIQUE_ID(d58562c845c0dbaad608035a18c1a2efd93129b4c53cac6b38837b8b0934151d) contentStartColumn(10) contentStartLine(216) org.kframework.attributes.Location(Location(216,10,216,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(label(LABEL),INSTRS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblLabel && len(kapp1.List) == 1 { // label(LABEL)
			if varLABEL, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
				if kapp2, t := c2.(*m.KApply); t && kapp2.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp2.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
					// REQUIRES
					eval1138, err1138 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err1138 != nil {
						return m.NoResult, err1138
					}
					if m.IsTrue(eval1138) /* && */ /* rhs precomputed isInt(LABEL) */  {
						// RHS
						traceRuleApply("FUNC", 1019, "{| rule #toBlockAux(instructionList(label(LABEL),INSTRS),`.List{\"labeledBlockList\"}`(.KList))=>#toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))) requires `_andBool_`(isInstructions(INSTRS),isInt(LABEL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d58562c845c0dbaad608035a18c1a2efd93129b4c53cac6b38837b8b0934151d) contentStartColumn(10) contentStartLine(216) org.kframework.attributes.Location(Location(216,10,216,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1139, err1139 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,labeledBlockList(`_:__IELE-COMMON`(LABEL,`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList)))
							varINSTRS,
							&m.KApply{Label: m.LblLabeledBlockList, List: []m.K{ // as-is labeledBlockList
								&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is _:__IELE-COMMON
									varLABEL,
									&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
									}},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
								}},
							}},
							config, -1)
						if err1139 != nil {
							return m.NoResult, err1139
						}
						return eval1139, nil
					}
				}
			}
		}
	}

	// rule #1020
	// source: iele-binary.k @213
	// {| rule #toBlockAux(`.List{"instructionList"}`(.KList),BLOCKS)=>BLOCKS requires isBlocks(BLOCKS) ensures #token("true","Bool") [UNIQUE_ID(5405292c44dcb88bbc0f987594758d4379609f1dcc97ea814a62d0b937deafc6) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"instructionList"}`(.KList)
		varBLOCKS := c2 // lhs KVariable BLOCKS
		// REQUIRES
		eval1140, err1140 := evalIsBlocks( // isBlocks(BLOCKS)
			varBLOCKS,
			config, -1)
		if err1140 != nil {
			return m.NoResult, err1140
		}
		if m.IsTrue(eval1140) {
			// RHS
			traceRuleApply("FUNC", 1020, "{| rule #toBlockAux(`.List{\"instructionList\"}`(.KList),BLOCKS)=>BLOCKS requires isBlocks(BLOCKS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5405292c44dcb88bbc0f987594758d4379609f1dcc97ea814a62d0b937deafc6) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varBLOCKS, nil
		}
	}

	// rule #1021
	// source: iele-binary.k @219
	// {| rule #toBlockAux(instructionList(INSTR,INSTRS),labeledBlockList(LABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{"instructionList"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstruction(INSTR)),isLabeledBlock(LABELEDBLOCK)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token("true","Bool") [UNIQUE_ID(e7c38ff1d46004c8a64fa95012b73c01d05609fcc415628160642f2d16953d35) contentStartColumn(10) contentStartLine(219) org.kframework.attributes.Location(Location(219,10,220,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(INSTR,INSTRS)
		varINSTR := kapp0.List[0] // lhs KVariable INSTR
		varINSTRS := kapp0.List[1] // lhs KVariable INSTRS
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblLabeledBlockList && len(kapp1.List) == 2 { // labeledBlockList(LABELEDBLOCK,BLOCKS)
			varLABELEDBLOCK := kapp1.List[0] // lhs KVariable LABELEDBLOCK
			varBLOCKS := kapp1.List[1] // lhs KVariable BLOCKS
			// REQUIRES
			eval1141, err1141 := evalIsInstructions( // isInstructions(INSTRS)
				varINSTRS,
				config, -1)
			if err1141 != nil {
				return m.NoResult, err1141
			}
			eval1142, err1142 := evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
				varBLOCKS,
				config, -1)
			if err1142 != nil {
				return m.NoResult, err1142
			}
			eval1143, err1143 := evalIsInstruction( // isInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1143 != nil {
				return m.NoResult, err1143
			}
			eval1144, err1144 := evalIsLabeledBlock( // isLabeledBlock(LABELEDBLOCK)
				varLABELEDBLOCK,
				config, -1)
			if err1144 != nil {
				return m.NoResult, err1144
			}
			eval1145, err1145 := evalIsPseudoInstruction( // isPseudoInstruction(INSTR)
				varINSTR,
				config, -1)
			if err1145 != nil {
				return m.NoResult, err1145
			}
			if ((((m.IsTrue(eval1141)) &&
			   (m.IsTrue(eval1142))) &&
			   (m.IsTrue(eval1143))) &&
			   (m.IsTrue(eval1144))) &&
			   (!(m.IsTrue(eval1145))) {
				// RHS
				traceRuleApply("FUNC", 1021, "{| rule #toBlockAux(instructionList(INSTR,INSTRS),labeledBlockList(LABELEDBLOCK,BLOCKS))=>#toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{\"instructionList\"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isInstruction(INSTR)),isLabeledBlock(LABELEDBLOCK)),`notBool_`(isPseudoInstruction(INSTR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e7c38ff1d46004c8a64fa95012b73c01d05609fcc415628160642f2d16953d35) contentStartColumn(10) contentStartLine(219) org.kframework.attributes.Location(Location(219,10,220,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1146, err1146 := evalXhashtoBlockAux( // #toBlockAux(INSTRS,`___IELE-COMMON`(instructionList(INSTR,`.List{"instructionList"}`(.KList)),labeledBlockList(LABELEDBLOCK,BLOCKS)))
					varINSTRS,
					&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
						&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
							varINSTR,
							&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
							}},
						}},
						&m.KApply{Label: m.LblLabeledBlockList, List: []m.K{ // as-is labeledBlockList
							varLABELEDBLOCK,
							varBLOCKS,
						}},
					}},
					config, -1)
				if err1146 != nil {
					return m.NoResult, err1146
				}
				return eval1146, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtoBlockAux", args: []m.K{c1, c2}}
}

func evalReplaceAllXlparenXuXcommaXuXcommaXuXrparenXuSTRING(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.replaceAll
	lbl := m.LblReplaceAllXlparenXuXcommaXuXcommaXuXrparenXuSTRING // replaceAll(_,_,_)_STRING
	sort := m.SortString
	if hookRes, hookErr := stringHooks.replaceAll(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.replaceAll, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1022
	// source: domains.k @575
	// {| rule `replaceAll(_,_,_)_STRING`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING`(Source,ToReplace)) requires `_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isString(ToReplace)) ensures #token("true","Bool") [UNIQUE_ID(3358d86b83068ab68fc4f0ed02513db149426f011866db38ff0a5015e8fee30d) contentStartColumn(8) contentStartLine(575) org.kframework.attributes.Location(Location(575,8,575,154)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToReplace, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varReplacement, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				// REQUIRES precomputed isString(Replacement) && isString(Source) && isString(ToReplace)
				// RHS
				traceRuleApply("FUNC", 1022, "{| rule `replaceAll(_,_,_)_STRING`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING`(Source,ToReplace)) requires `_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isString(ToReplace)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3358d86b83068ab68fc4f0ed02513db149426f011866db38ff0a5015e8fee30d) contentStartColumn(8) contentStartLine(575) org.kframework.attributes.Location(Location(575,8,575,154)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1148, err1148 := evalCountAllOccurrencesXlparenXuXcommaXuXrparenXuSTRING( // `countAllOccurrences(_,_)_STRING`(Source,ToReplace)
					varSource,
					varToReplace,
					config, -1)
				if err1148 != nil {
					return m.NoResult, err1148
				}
				eval1147, err1147 := evalReplaceXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuSTRING( // `replace(_,_,_,_)_STRING`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING`(Source,ToReplace))
					varSource,
					varToReplace,
					varReplacement,
					eval1148,
					config, -1)
				if err1147 != nil {
					return m.NoResult, err1147
				}
				return eval1147, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalReplaceAllXlparenXuXcommaXuXcommaXuXrparenXuSTRING", args: []m.K{c1, c2, c3}}
}

func evalXhashrlpDecodeList(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1023
	// source: data.k @563
	// {| rule #rlpDecodeList(STR,POS)=>#rlpDecodeListAux(STR,POS,#decodeLengthPrefix(STR,POS)) requires `_andBool_`(`_andBool_`(isString(STR),isInt(POS)),`_<Int__INT`(POS,lengthString(STR))) ensures #token("true","Bool") [UNIQUE_ID(8ff1f964082fd4acdea4b44f59b52eea728313a7962902483a3953c18e6be550) contentStartColumn(10) contentStartLine(563) org.kframework.attributes.Location(Location(563,10,563,129)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varPOS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1150, err1150 := evalLengthString( // lengthString(STR)
				varSTR,
				config, -1)
			if err1150 != nil {
				return m.NoResult, err1150
			}
			eval1149, err1149 := evalXuXltIntXuXuINT( // `_<Int__INT`(POS,lengthString(STR))
				varPOS,
				eval1150,
				config, -1)
			if err1149 != nil {
				return m.NoResult, err1149
			}
			if /* rhs precomputed isString(STR) && isInt(POS) */ /* && */
			   m.IsTrue(eval1149) {
				// RHS
				traceRuleApply("FUNC", 1023, "{| rule #rlpDecodeList(STR,POS)=>#rlpDecodeListAux(STR,POS,#decodeLengthPrefix(STR,POS)) requires `_andBool_`(`_andBool_`(isString(STR),isInt(POS)),`_<Int__INT`(POS,lengthString(STR))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ff1f964082fd4acdea4b44f59b52eea728313a7962902483a3953c18e6be550) contentStartColumn(10) contentStartLine(563) org.kframework.attributes.Location(Location(563,10,563,129)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1152, err1152 := evalXhashdecodeLengthPrefix( // #decodeLengthPrefix(STR,POS)
					varSTR,
					varPOS,
					config, -1)
				if err1152 != nil {
					return m.NoResult, err1152
				}
				eval1151, err1151 := evalXhashrlpDecodeListAux( // #rlpDecodeListAux(STR,POS,#decodeLengthPrefix(STR,POS))
					varSTR,
					varPOS,
					eval1152,
					config, -1)
				if err1151 != nil {
					return m.NoResult, err1151
				}
				return eval1151, nil
			}
		}
	}

	// rule #1024
	// source: data.k @564
	// {| rule #rlpDecodeList(STR,POS)=>`.List{"_,__IELE-DATA"}`(.KList) requires `_andBool_`(isString(STR),isInt(POS)) ensures #token("true","Bool") [UNIQUE_ID(4cd963351b247ddf47a10f4edb95e5db28ae56b40361f46653ffd866d6e3ef0a) contentStartColumn(10) contentStartLine(564) org.kframework.attributes.Location(Location(564,10,564,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isString(STR) && isInt(POS)
			// RHS
			traceRuleApply("FUNC", 1024, "{| rule #rlpDecodeList(STR,POS)=>`.List{\"_,__IELE-DATA\"}`(.KList) requires `_andBool_`(isString(STR),isInt(POS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4cd963351b247ddf47a10f4edb95e5db28ae56b40361f46653ffd866d6e3ef0a) contentStartColumn(10) contentStartLine(564) org.kframework.attributes.Location(Location(564,10,564,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return &m.KApply{Label: m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket, List: []m.K{ // as-is .List{"_,__IELE-DATA"}
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpDecodeList", args: []m.K{c1, c2}}
}

func evalIsValueCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1025
	// source: ? @?
	// {| rule isValueCellOpt(#KToken(#token("ValueCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortValueCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1025, "{| rule isValueCellOpt(#KToken(#token(\"ValueCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1026
	// source: ? @?
	// {| rule isValueCellOpt(`<value>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltvalueXgt && len(kapp0.List) == 1 { // `<value>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1026, "{| rule isValueCellOpt(`<value>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1027
	// source: ? @?
	// {| rule isValueCellOpt(noValueCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoValueCell && len(kapp0.List) == 0 { // noValueCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1027, "{| rule isValueCellOpt(noValueCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1028
	// source: ? @?
	// {| rule isValueCellOpt(#KToken(#token("ValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1028, "{| rule isValueCellOpt(#KToken(#token(\"ValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1029
	// source: ? @?
	// {| rule isValueCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1029, "{| rule isValueCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLabeledBlock(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1030
	// source: ? @?
	// {| rule isLabeledBlock(#KToken(#token("LabeledBlock","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabeledBlock { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1030, "{| rule isLabeledBlock(#KToken(#token(\"LabeledBlock\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1031
	// source: ? @?
	// {| rule isLabeledBlock(`_:__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isIeleName(K0),isInstructions(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_:__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1153, err1153 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1153 != nil {
			return m.NoResult, err1153
		}
		eval1154, err1154 := evalIsInstructions( // isInstructions(K1)
			varK1,
			config, -1)
		if err1154 != nil {
			return m.NoResult, err1154
		}
		if (m.IsTrue(eval1153)) &&
		   (m.IsTrue(eval1154)) {
			// RHS
			traceRuleApply("FUNC", 1031, "{| rule isLabeledBlock(`_:__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isIeleName(K0),isInstructions(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1032
	// source: ? @?
	// {| rule isLabeledBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1032, "{| rule isLabeledBlock(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFunctionCell(config m.K, guard int) (m.K, error) {
	// rule #1033
	// source: ? @?
	// {| rule initFunctionCell(.KList)=>`FunctionCellMapItem`(initFuncIdCell(.KList),`<function>`(initFuncIdCell(.KList),initNparamsCell(.KList),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7b152bba06669da17c31d619ea0823114e5efdbf2e7590abe25c5e47b2642852) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1033, "{| rule initFunctionCell(.KList)=>`FunctionCellMapItem`(initFuncIdCell(.KList),`<function>`(initFuncIdCell(.KList),initNparamsCell(.KList),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b152bba06669da17c31d619ea0823114e5efdbf2e7590abe25c5e47b2642852) initializer()] |}")
	eval1156, err1156 := evalInitFuncIDCell(config, -1) // initFuncIdCell(.KList)
	if err1156 != nil {
		return m.NoResult, err1156
	}
	eval1157, err1157 := evalInitFuncIDCell(config, -1) // initFuncIdCell(.KList)
	if err1157 != nil {
		return m.NoResult, err1157
	}
	eval1158, err1158 := evalInitNparamsCell(config, -1) // initNparamsCell(.KList)
	if err1158 != nil {
		return m.NoResult, err1158
	}
	eval1159, err1159 := evalInitInstructionsCell(config, -1) // initInstructionsCell(.KList)
	if err1159 != nil {
		return m.NoResult, err1159
	}
	eval1160, err1160 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1160 != nil {
		return m.NoResult, err1160
	}
	eval1161, err1161 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1161 != nil {
		return m.NoResult, err1161
	}
	eval1155, err1155 := evalFunctionCellMapItem( // `FunctionCellMapItem`(initFuncIdCell(.KList),`<function>`(initFuncIdCell(.KList),initNparamsCell(.KList),initInstructionsCell(.KList),initJumpTableCell(.KList),initNregsCell(.KList)))
		eval1156,
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			eval1157,
			eval1158,
			eval1159,
			eval1160,
			eval1161,
		}},
		config, -1)
	if err1155 != nil {
		return m.NoResult, err1155
	}
	return eval1155, nil

}

//var constInitFunctionCell K = evalInitFunctionCell(m.InternedBottom)

func evalIsGasLimitCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1034
	// source: ? @?
	// {| rule isGasLimitCell(`<gasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasLimitXgt && len(kapp0.List) == 1 { // `<gasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1034, "{| rule isGasLimitCell(`<gasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1035
	// source: ? @?
	// {| rule isGasLimitCell(#KToken(#token("GasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1035, "{| rule isGasLimitCell(#KToken(#token(\"GasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1036
	// source: ? @?
	// {| rule isGasLimitCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1036, "{| rule isGasLimitCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXxorIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.pow
	lbl := m.LblXuXxorIntXuXuINT // _^Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.pow(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.pow, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXxorIntXuXuINT", args: []m.K{c1, c2}}
}

func evalFindString(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.find
	lbl := m.LblFindString // findString
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.find(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.find, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFindString", args: []m.K{c1, c2, c3}}
}

func evalAbsInt(c m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.abs
	lbl := m.LblAbsInt // absInt
	sort := m.SortInt
	if hookRes, hookErr := intHooks.abs(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.abs, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalAbsInt", args: []m.K{c}}
}

func evalIsCallDataCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1037
	// source: ? @?
	// {| rule isCallDataCellOpt(noCallDataCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallDataCell && len(kapp0.List) == 0 { // noCallDataCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1037, "{| rule isCallDataCellOpt(noCallDataCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1038
	// source: ? @?
	// {| rule isCallDataCellOpt(#KToken(#token("CallDataCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDataCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1038, "{| rule isCallDataCellOpt(#KToken(#token(\"CallDataCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1039
	// source: ? @?
	// {| rule isCallDataCellOpt(#KToken(#token("CallDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1039, "{| rule isCallDataCellOpt(#KToken(#token(\"CallDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1040
	// source: ? @?
	// {| rule isCallDataCellOpt(`<callData>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDataXgt && len(kapp0.List) == 1 { // `<callData>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1162, err1162 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err1162 != nil {
			return m.NoResult, err1162
		}
		if m.IsTrue(eval1162) {
			// RHS
			traceRuleApply("FUNC", 1040, "{| rule isCallDataCellOpt(`<callData>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1041
	// source: ? @?
	// {| rule isCallDataCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1041, "{| rule isCallDataCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTxPendingCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1042
	// source: ? @?
	// {| rule isTxPendingCellOpt(`<txPending>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxPendingXgt && len(kapp0.List) == 1 { // `<txPending>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 1042, "{| rule isTxPendingCellOpt(`<txPending>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1043
	// source: ? @?
	// {| rule isTxPendingCellOpt(#KToken(#token("TxPendingCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxPendingCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1043, "{| rule isTxPendingCellOpt(#KToken(#token(\"TxPendingCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1044
	// source: ? @?
	// {| rule isTxPendingCellOpt(noTxPendingCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTxPendingCell && len(kapp0.List) == 0 { // noTxPendingCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1044, "{| rule isTxPendingCellOpt(noTxPendingCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1045
	// source: ? @?
	// {| rule isTxPendingCellOpt(#KToken(#token("TxPendingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxPendingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1045, "{| rule isTxPendingCellOpt(#KToken(#token(\"TxPendingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1046
	// source: ? @?
	// {| rule isTxPendingCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1046, "{| rule isTxPendingCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXeqXeqStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.eq
	lbl := m.LblXuXeqXeqStringXuXuSTRING // _==String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.eq(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.eq, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1047
	// source: domains.k @537
	// {| rule `_==String__STRING`(S1,S2)=>`_==K_`(S1,S2) requires `_andBool_`(isString(S2),isString(S1)) ensures #token("true","Bool") [UNIQUE_ID(daddd877c886e178648c9a2a7a5b307a0f59225ac211c099829b467bb5ebf98d) contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,537,49)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES precomputed isString(S2) && isString(S1)
			// RHS
			traceRuleApply("FUNC", 1047, "{| rule `_==String__STRING`(S1,S2)=>`_==K_`(S1,S2) requires `_andBool_`(isString(S2),isString(S1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(daddd877c886e178648c9a2a7a5b307a0f59225ac211c099829b467bb5ebf98d) contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,537,49)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1163, err1163 := evalXuXeqXeqKXu( // `_==K_`(S1,S2)
				varS1,
				varS2,
				config, -1)
			if err1163 != nil {
				return m.NoResult, err1163
			}
			return eval1163, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXeqStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalIsRegsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1048
	// source: ? @?
	// {| rule isRegsCellOpt(noRegsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoRegsCell && len(kapp0.List) == 0 { // noRegsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1048, "{| rule isRegsCellOpt(noRegsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1049
	// source: ? @?
	// {| rule isRegsCellOpt(#KToken(#token("RegsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRegsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1049, "{| rule isRegsCellOpt(#KToken(#token(\"RegsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1050
	// source: ? @?
	// {| rule isRegsCellOpt(`<regs>`(K0))=>#token("true","Bool") requires isArray(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltregsXgt && len(kapp0.List) == 1 { // `<regs>`(K0)
		if varK0, t := kapp0.List[0].(*m.Array); t && varK0.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES precomputed isArray(K0)
			// RHS
			traceRuleApply("FUNC", 1050, "{| rule isRegsCellOpt(`<regs>`(K0))=>#token(\"true\",\"Bool\") requires isArray(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1051
	// source: ? @?
	// {| rule isRegsCellOpt(#KToken(#token("RegsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRegsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1051, "{| rule isRegsCellOpt(#KToken(#token(\"RegsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1052
	// source: ? @?
	// {| rule isRegsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1052, "{| rule isRegsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsDeclaredContractsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1053
	// source: ? @?
	// {| rule isDeclaredContractsCell(`<declaredContracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdeclaredContractsXgt && len(kapp0.List) == 1 { // `<declaredContracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1053, "{| rule isDeclaredContractsCell(`<declaredContracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1054
	// source: ? @?
	// {| rule isDeclaredContractsCell(#KToken(#token("DeclaredContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDeclaredContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1054, "{| rule isDeclaredContractsCell(#KToken(#token(\"DeclaredContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1055
	// source: ? @?
	// {| rule isDeclaredContractsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1055, "{| rule isDeclaredContractsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCmul(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1056
	// source: iele-gas.k @833
	// {| rule `Cmul`(SCHED,L1,L2)=>`Cmul`(SCHED,L2,L1) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_>Int__INT`(L2,L1)) ensures #token("true","Bool") [UNIQUE_ID(cab12e3d4b67de15920791b6721f8f79ee238d5d61e4fb76efa601d12dcdb7c3) contentStartColumn(10) contentStartLine(833) org.kframework.attributes.Location(Location(833,10,834,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varL2, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1164, err1164 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err1164 != nil {
					return m.NoResult, err1164
				}
				eval1165, err1165 := evalXuXgtIntXuXuINT( // `_>Int__INT`(L2,L1)
					varL2,
					varL1,
					config, -1)
				if err1165 != nil {
					return m.NoResult, err1165
				}
				if (/* rhs precomputed isInt(L2) */ /* && */
				   m.IsTrue(eval1164) /* && */ /* rhs precomputed isInt(L1) */ ) &&
				   (m.IsTrue(eval1165)) {
					// RHS
					traceRuleApply("FUNC", 1056, "{| rule `Cmul`(SCHED,L1,L2)=>`Cmul`(SCHED,L2,L1) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_>Int__INT`(L2,L1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cab12e3d4b67de15920791b6721f8f79ee238d5d61e4fb76efa601d12dcdb7c3) contentStartColumn(10) contentStartLine(833) org.kframework.attributes.Location(Location(833,10,834,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1166, err1166 := evalCmul( // `Cmul`(SCHED,L2,L1)
						varSCHED,
						varL2,
						varL1,
						config, -1)
					if err1166 != nil {
						return m.NoResult, err1166
					}
					return eval1166, nil
				}
			}
		}
	}

	// rule #1057
	// source: iele-gas.k @836
	// {| rule `Cmul`(SCHED,L1,L2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED),`Ckara`(L1,L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED),`_+Int_`(L1,L2))),`_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)) ensures #token("true","Bool") [UNIQUE_ID(fafc4f1428c86ab132caf18155385f391efc05b127bba08b4fcc444ff4fedfb0) contentStartColumn(10) contentStartLine(836) org.kframework.attributes.Location(Location(836,10,839,23)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varL2, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1167, err1167 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err1167 != nil {
					return m.NoResult, err1167
				}
				if /* rhs precomputed isInt(L2) */ /* && */
				   m.IsTrue(eval1167) /* && */ /* rhs precomputed isInt(L1) */  {
					// RHS
					traceRuleApply("FUNC", 1057, "{| rule `Cmul`(SCHED,L1,L2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED),`Ckara`(L1,L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED),`_+Int_`(L1,L2))),`_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fafc4f1428c86ab132caf18155385f391efc05b127bba08b4fcc444ff4fedfb0) contentStartColumn(10) contentStartLine(836) org.kframework.attributes.Location(Location(836,10,839,23)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval1171, err1171 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGmulkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gmulkara_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1171 != nil {
						return m.NoResult, err1171
					}
					eval1172, err1172 := evalCkara( // `Ckara`(L1,L2)
						varL1,
						varL2,
						config, -1)
					if err1172 != nil {
						return m.NoResult, err1172
					}
					eval1170, err1170 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED),`Ckara`(L1,L2))
						eval1171,
						eval1172,
						config, -1)
					if err1170 != nil {
						return m.NoResult, err1170
					}
					eval1174, err1174 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGmulwordXuIELEXhyphenGAS, List: []m.K{ // as-is Gmulword_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1174 != nil {
						return m.NoResult, err1174
					}
					eval1175, err1175 := evalXuXplusIntXu( // `_+Int_`(L1,L2)
						varL1,
						varL2,
						config, -1)
					if err1175 != nil {
						return m.NoResult, err1175
					}
					eval1173, err1173 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED),`_+Int_`(L1,L2))
						eval1174,
						eval1175,
						config, -1)
					if err1173 != nil {
						return m.NoResult, err1173
					}
					eval1169, err1169 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED),`Ckara`(L1,L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED),`_+Int_`(L1,L2)))
						eval1170,
						eval1173,
						config, -1)
					if err1169 != nil {
						return m.NoResult, err1169
					}
					eval1176, err1176 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGmulXuIELEXhyphenGAS, List: []m.K{ // as-is Gmul_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1176 != nil {
						return m.NoResult, err1176
					}
					eval1168, err1168 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),SCHED),`Ckara`(L1,L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),SCHED),`_+Int_`(L1,L2))),`_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),SCHED))
						eval1169,
						eval1176,
						config, -1)
					if err1168 != nil {
						return m.NoResult, err1168
					}
					return eval1168, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCmul", args: []m.K{c1, c2, c3}}
}

func evalInitTimestampCell(config m.K, guard int) (m.K, error) {
	// rule #1058
	// source: ? @?
	// {| rule initTimestampCell(.KList)=>`<timestamp>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f0ce0693ea0b3f76872057aab5197fb026f6fb0b1ff319c8acfcad73bf824336) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1058, "{| rule initTimestampCell(.KList)=>`<timestamp>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f0ce0693ea0b3f76872057aab5197fb026f6fb0b1ff319c8acfcad73bf824336) initializer()] |}")
	return &m.KApply{Label: m.LblXlttimestampXgt, List: []m.K{ // as-is <timestamp>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitTimestampCell K = evalInitTimestampCell(m.InternedBottom)

func evalPow30XuIELEXhyphenDATA(config m.K, guard int) (m.K, error) {
	// rule #1059
	// source: data.k @32
	// {| rule `pow30_IELE-DATA`(.KList)=>`_^Int__INT`(#token("2","Int"),#token("30","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78f79e57f9cf432ce34e83c38095b0e330533d316f009a20b39538c25409aad8) contentStartColumn(10) contentStartLine(32) org.kframework.attributes.Location(Location(32,10,32,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1059, "{| rule `pow30_IELE-DATA`(.KList)=>`_^Int__INT`(#token(\"2\",\"Int\"),#token(\"30\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(78f79e57f9cf432ce34e83c38095b0e330533d316f009a20b39538c25409aad8) contentStartColumn(10) contentStartLine(32) org.kframework.attributes.Location(Location(32,10,32,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval1177, err1177 := evalXuXxorIntXuXuINT( // `_^Int__INT`(#token("2","Int"),#token("30","Int"))
		/* rhs KToken */ m.NewIntFromString("2"),
		/* rhs KToken */ m.NewIntFromString("30"),
		config, -1)
	if err1177 != nil {
		return m.NoResult, err1177
	}
	return eval1177, nil

}

//var constPow30XuIELEXhyphenDATA K = evalPow30XuIELEXhyphenDATA(m.InternedBottom)

func evalInitMessageCell(config m.K, guard int) (m.K, error) {
	// rule #1060
	// source: ? @?
	// {| rule initMessageCell(.KList)=>`MessageCellMapItem`(initMsgIDCell(.KList),`<message>`(initMsgIDCell(.KList),initTxNonceCell(.KList),initTxGasPriceCell(.KList),initTxGasLimitCell(.KList),initSendtoCell(.KList),initFuncCell(.KList),initValueCell(.KList),initFromCell(.KList),initDataCell(.KList),initArgsCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7683467e39ecb2bed022b810623189785d385bd92b6a44926bef5c93b8cd78a5) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1060, "{| rule initMessageCell(.KList)=>`MessageCellMapItem`(initMsgIDCell(.KList),`<message>`(initMsgIDCell(.KList),initTxNonceCell(.KList),initTxGasPriceCell(.KList),initTxGasLimitCell(.KList),initSendtoCell(.KList),initFuncCell(.KList),initValueCell(.KList),initFromCell(.KList),initDataCell(.KList),initArgsCell(.KList))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7683467e39ecb2bed022b810623189785d385bd92b6a44926bef5c93b8cd78a5) initializer()] |}")
	eval1179, err1179 := evalInitMsgIDCell(config, -1) // initMsgIDCell(.KList)
	if err1179 != nil {
		return m.NoResult, err1179
	}
	eval1180, err1180 := evalInitMsgIDCell(config, -1) // initMsgIDCell(.KList)
	if err1180 != nil {
		return m.NoResult, err1180
	}
	eval1181, err1181 := evalInitTxNonceCell(config, -1) // initTxNonceCell(.KList)
	if err1181 != nil {
		return m.NoResult, err1181
	}
	eval1182, err1182 := evalInitTxGasPriceCell(config, -1) // initTxGasPriceCell(.KList)
	if err1182 != nil {
		return m.NoResult, err1182
	}
	eval1183, err1183 := evalInitTxGasLimitCell(config, -1) // initTxGasLimitCell(.KList)
	if err1183 != nil {
		return m.NoResult, err1183
	}
	eval1184, err1184 := evalInitSendtoCell(config, -1) // initSendtoCell(.KList)
	if err1184 != nil {
		return m.NoResult, err1184
	}
	eval1185, err1185 := evalInitFuncCell(config, -1) // initFuncCell(.KList)
	if err1185 != nil {
		return m.NoResult, err1185
	}
	eval1186, err1186 := evalInitValueCell(config, -1) // initValueCell(.KList)
	if err1186 != nil {
		return m.NoResult, err1186
	}
	eval1187, err1187 := evalInitFromCell(config, -1) // initFromCell(.KList)
	if err1187 != nil {
		return m.NoResult, err1187
	}
	eval1188, err1188 := evalInitDataCell(config, -1) // initDataCell(.KList)
	if err1188 != nil {
		return m.NoResult, err1188
	}
	eval1189, err1189 := evalInitArgsCell(config, -1) // initArgsCell(.KList)
	if err1189 != nil {
		return m.NoResult, err1189
	}
	eval1178, err1178 := evalMessageCellMapItem( // `MessageCellMapItem`(initMsgIDCell(.KList),`<message>`(initMsgIDCell(.KList),initTxNonceCell(.KList),initTxGasPriceCell(.KList),initTxGasLimitCell(.KList),initSendtoCell(.KList),initFuncCell(.KList),initValueCell(.KList),initFromCell(.KList),initDataCell(.KList),initArgsCell(.KList)))
		eval1179,
		&m.KApply{Label: m.LblXltmessageXgt, List: []m.K{ // as-is <message>
			eval1180,
			eval1181,
			eval1182,
			eval1183,
			eval1184,
			eval1185,
			eval1186,
			eval1187,
			eval1188,
			eval1189,
		}},
		config, -1)
	if err1178 != nil {
		return m.NoResult, err1178
	}
	return eval1178, nil

}

//var constInitMessageCell K = evalInitMessageCell(m.InternedBottom)

func evalListXcolonget(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.get
	lbl := m.LblListXcolonget // List:get
	sort := m.SortKItem
	if hookRes, hookErr := listHooks.get(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.get, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalListXcolonget", args: []m.K{c1, c2}}
}

func evalIsReturnInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1061
	// source: ? @?
	// {| rule isReturnInst(#KToken(#token("ReturnInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortReturnInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1061, "{| rule isReturnInst(#KToken(#token(\"ReturnInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1062
	// source: ? @?
	// {| rule isReturnInst(`retvoid_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetvoidXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `retvoid_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1062, "{| rule isReturnInst(`retvoid_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1063
	// source: ? @?
	// {| rule isReturnInst(`ret__IELE-COMMON`(K0))=>#token("true","Bool") requires isNonEmptyOperands(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `ret__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1190, err1190 := evalIsNonEmptyOperands( // isNonEmptyOperands(K0)
			varK0,
			config, -1)
		if err1190 != nil {
			return m.NoResult, err1190
		}
		if m.IsTrue(eval1190) {
			// RHS
			traceRuleApply("FUNC", 1063, "{| rule isReturnInst(`ret__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isNonEmptyOperands(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1064
	// source: ? @?
	// {| rule isReturnInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1064, "{| rule isReturnInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSet2List(c m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.set2list
	lbl := m.LblSet2List // Set2List
	sort := m.SortList
	if hookRes, hookErr := setHooks.set2list(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.set2list, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSet2List", args: []m.K{c}}
}

func evalIsQuadOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1065
	// source: ? @?
	// {| rule isQuadOp(`LOG3`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG3 && len(kapp0.List) == 0 { // `LOG3`(.KList)
		// RHS
		traceRuleApply("FUNC", 1065, "{| rule isQuadOp(`LOG3`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1066
	// source: ? @?
	// {| rule isQuadOp(`MSTOREN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSTOREN && len(kapp0.List) == 0 { // `MSTOREN`(.KList)
		// RHS
		traceRuleApply("FUNC", 1066, "{| rule isQuadOp(`MSTOREN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1067
	// source: ? @?
	// {| rule isQuadOp(`MULMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMULMOD && len(kapp0.List) == 0 { // `MULMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 1067, "{| rule isQuadOp(`MULMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1068
	// source: ? @?
	// {| rule isQuadOp(`EXPMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXPMOD && len(kapp0.List) == 0 { // `EXPMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 1068, "{| rule isQuadOp(`EXPMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1069
	// source: ? @?
	// {| rule isQuadOp(`MLOADN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMLOADN && len(kapp0.List) == 0 { // `MLOADN`(.KList)
		// RHS
		traceRuleApply("FUNC", 1069, "{| rule isQuadOp(`MLOADN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1070
	// source: ? @?
	// {| rule isQuadOp(#KToken(#token("QuadOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortQuadOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1070, "{| rule isQuadOp(#KToken(#token(\"QuadOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1071
	// source: ? @?
	// {| rule isQuadOp(`ADDMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADDMOD && len(kapp0.List) == 0 { // `ADDMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 1071, "{| rule isQuadOp(`ADDMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1072
	// source: ? @?
	// {| rule isQuadOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1072, "{| rule isQuadOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGeneratedTopCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1073
	// source: ? @?
	// {| rule isGeneratedTopCell(#KToken(#token("GeneratedTopCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGeneratedTopCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1073, "{| rule isGeneratedTopCell(#KToken(#token(\"GeneratedTopCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1074
	// source: ? @?
	// {| rule isGeneratedTopCell(`<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCell(K0),isSCell(K1)),isExitCodeCell(K2)),isModeCell(K3)),isScheduleCell(K4)),isCheckGasCell(K5)),isWellFormednessCell(K6)),isIeleCell(K7)),isNetworkCell(K8)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgeneratedTopXgt && len(kapp0.List) == 9 { // `<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		// REQUIRES
		eval1191, err1191 := evalIsKCell( // isKCell(K0)
			varK0,
			config, -1)
		if err1191 != nil {
			return m.NoResult, err1191
		}
		eval1192, err1192 := evalIsSCell( // isSCell(K1)
			varK1,
			config, -1)
		if err1192 != nil {
			return m.NoResult, err1192
		}
		eval1193, err1193 := evalIsExitCodeCell( // isExitCodeCell(K2)
			varK2,
			config, -1)
		if err1193 != nil {
			return m.NoResult, err1193
		}
		eval1194, err1194 := evalIsModeCell( // isModeCell(K3)
			varK3,
			config, -1)
		if err1194 != nil {
			return m.NoResult, err1194
		}
		eval1195, err1195 := evalIsScheduleCell( // isScheduleCell(K4)
			varK4,
			config, -1)
		if err1195 != nil {
			return m.NoResult, err1195
		}
		eval1196, err1196 := evalIsCheckGasCell( // isCheckGasCell(K5)
			varK5,
			config, -1)
		if err1196 != nil {
			return m.NoResult, err1196
		}
		eval1197, err1197 := evalIsWellFormednessCell( // isWellFormednessCell(K6)
			varK6,
			config, -1)
		if err1197 != nil {
			return m.NoResult, err1197
		}
		eval1198, err1198 := evalIsIeleCell( // isIeleCell(K7)
			varK7,
			config, -1)
		if err1198 != nil {
			return m.NoResult, err1198
		}
		eval1199, err1199 := evalIsNetworkCell( // isNetworkCell(K8)
			varK8,
			config, -1)
		if err1199 != nil {
			return m.NoResult, err1199
		}
		if ((((((((m.IsTrue(eval1191)) &&
		   (m.IsTrue(eval1192))) &&
		   (m.IsTrue(eval1193))) &&
		   (m.IsTrue(eval1194))) &&
		   (m.IsTrue(eval1195))) &&
		   (m.IsTrue(eval1196))) &&
		   (m.IsTrue(eval1197))) &&
		   (m.IsTrue(eval1198))) &&
		   (m.IsTrue(eval1199)) {
			// RHS
			traceRuleApply("FUNC", 1074, "{| rule isGeneratedTopCell(`<generatedTop>`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCell(K0),isSCell(K1)),isExitCodeCell(K2)),isModeCell(K3)),isScheduleCell(K4)),isCheckGasCell(K5)),isWellFormednessCell(K6)),isIeleCell(K7)),isNetworkCell(K8)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1075
	// source: ? @?
	// {| rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1075, "{| rule isGeneratedTopCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitAccountsCell(config m.K, guard int) (m.K, error) {
	// rule #1076
	// source: ? @?
	// {| rule initAccountsCell(.KList)=>`<accounts>`(`.AccountCellMap`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(01363c457c5dac86ce494576b7ca325253b9f36eae049edb5cfbd6f3123e1c78) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1076, "{| rule initAccountsCell(.KList)=>`<accounts>`(`.AccountCellMap`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01363c457c5dac86ce494576b7ca325253b9f36eae049edb5cfbd6f3123e1c78) initializer()] |}")
	eval1200, err1200 := evalXdotAccountCellMap(config, -1) // `.AccountCellMap`(.KList)
	if err1200 != nil {
		return m.NoResult, err1200
	}
	return &m.KApply{Label: m.LblXltaccountsXgt, List: []m.K{ // as-is <accounts>
		eval1200,
	}}, nil

}

//var constInitAccountsCell K = evalInitAccountsCell(m.InternedBottom)

func evalIsSubstateLogEntry(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1077
	// source: ? @?
	// {| rule isSubstateLogEntry(logEntry(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isList(K1)),isBytes(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogEntry && len(kapp0.List) == 3 { // logEntry(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varK1, t := kapp0.List[1].(*m.List); t && varK1.Sort == m.SortList { // lhs KVariable with hook:LIST.List
				if _, t := kapp0.List[2].(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
					// REQUIRES precomputed isInt(K0) && isList(K1) && isBytes(K2)
					// RHS
					traceRuleApply("FUNC", 1077, "{| rule isSubstateLogEntry(logEntry(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isList(K1)),isBytes(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1078
	// source: ? @?
	// {| rule isSubstateLogEntry(#KToken(#token("SubstateLogEntry","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateLogEntry { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1078, "{| rule isSubstateLogEntry(#KToken(#token(\"SubstateLogEntry\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1079
	// source: ? @?
	// {| rule isSubstateLogEntry(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1079, "{| rule isSubstateLogEntry(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitTxGasLimitCell(config m.K, guard int) (m.K, error) {
	// rule #1080
	// source: ? @?
	// {| rule initTxGasLimitCell(.KList)=>`<txGasLimit>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(455af3e5dc5f556b606d547556c9bdded9bdffe5c963433e87bd85393c0cdd9a) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1080, "{| rule initTxGasLimitCell(.KList)=>`<txGasLimit>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(455af3e5dc5f556b606d547556c9bdded9bdffe5c963433e87bd85393c0cdd9a) initializer()] |}")
	return &m.KApply{Label: m.LblXlttxGasLimitXgt, List: []m.K{ // as-is <txGasLimit>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitTxGasLimitCell K = evalInitTxGasLimitCell(m.InternedBottom)

func evalXdotList(config m.K, guard int) (m.K, error) {
	//hook: LIST.unit
	lbl := m.LblXdotList // .List
	sort := m.SortList
	if hookRes, hookErr := listHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotList", args: nil}
}

//var constXdotList K = evalXdotList(m.InternedBottom)

func evalIsLValue(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1081
	// source: ? @?
	// {| rule isLValue(#KToken(#token("LValue","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLValue { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1081, "{| rule isLValue(#KToken(#token(\"LValue\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1082
	// source: ? @?
	// {| rule isLValue(`%__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `%__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1201, err1201 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1201 != nil {
			return m.NoResult, err1201
		}
		if m.IsTrue(eval1201) {
			// RHS
			traceRuleApply("FUNC", 1082, "{| rule isLValue(`%__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1083
	// source: ? @?
	// {| rule isLValue(#KToken(#token("LocalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1083, "{| rule isLValue(#KToken(#token(\"LocalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1084
	// source: ? @?
	// {| rule isLValue(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1084, "{| rule isLValue(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMakeEmptyArray(c m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.makeEmpty
	lbl := m.LblMakeEmptyArray // makeEmptyArray
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.makeEmpty(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.makeEmpty, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMakeEmptyArray", args: []m.K{c}}
}

func evalIsGasCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1085
	// source: ? @?
	// {| rule isGasCellOpt(#KToken(#token("GasCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1085, "{| rule isGasCellOpt(#KToken(#token(\"GasCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1086
	// source: ? @?
	// {| rule isGasCellOpt(`<gas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasXgt && len(kapp0.List) == 1 { // `<gas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1086, "{| rule isGasCellOpt(`<gas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1087
	// source: ? @?
	// {| rule isGasCellOpt(noGasCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoGasCell && len(kapp0.List) == 0 { // noGasCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1087, "{| rule isGasCellOpt(noGasCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1088
	// source: ? @?
	// {| rule isGasCellOpt(#KToken(#token("GasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1088, "{| rule isGasCellOpt(#KToken(#token(\"GasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1089
	// source: ? @?
	// {| rule isGasCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1089, "{| rule isGasCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSelfDestructCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1090
	// source: ? @?
	// {| rule isSelfDestructCellOpt(`<selfDestruct>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltselfDestructXgt && len(kapp0.List) == 1 { // `<selfDestruct>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1090, "{| rule isSelfDestructCellOpt(`<selfDestruct>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1091
	// source: ? @?
	// {| rule isSelfDestructCellOpt(noSelfDestructCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoSelfDestructCell && len(kapp0.List) == 0 { // noSelfDestructCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1091, "{| rule isSelfDestructCellOpt(noSelfDestructCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1092
	// source: ? @?
	// {| rule isSelfDestructCellOpt(#KToken(#token("SelfDestructCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfDestructCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1092, "{| rule isSelfDestructCellOpt(#KToken(#token(\"SelfDestructCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1093
	// source: ? @?
	// {| rule isSelfDestructCellOpt(#KToken(#token("SelfDestructCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfDestructCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1093, "{| rule isSelfDestructCellOpt(#KToken(#token(\"SelfDestructCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1094
	// source: ? @?
	// {| rule isSelfDestructCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1094, "{| rule isSelfDestructCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsXorInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1095
	// source: ? @?
	// {| rule isXorInst(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=xor_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1202, err1202 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1202 != nil {
			return m.NoResult, err1202
		}
		eval1203, err1203 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1203 != nil {
			return m.NoResult, err1203
		}
		eval1204, err1204 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1204 != nil {
			return m.NoResult, err1204
		}
		if ((m.IsTrue(eval1202)) &&
		   (m.IsTrue(eval1203))) &&
		   (m.IsTrue(eval1204)) {
			// RHS
			traceRuleApply("FUNC", 1095, "{| rule isXorInst(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1096
	// source: ? @?
	// {| rule isXorInst(#KToken(#token("XorInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXorInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1096, "{| rule isXorInst(#KToken(#token(\"XorInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1097
	// source: ? @?
	// {| rule isXorInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1097, "{| rule isXorInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsJSONList(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1098
	// source: ? @?
	// {| rule isJSONList(#KToken(#token("JSONList","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJSONList { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1098, "{| rule isJSONList(#KToken(#token(\"JSONList\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1099
	// source: ? @?
	// {| rule isJSONList(`_,__IELE-DATA`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isJSON(K0),isJSONList(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_,__IELE-DATA`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1205, err1205 := evalIsJSON( // isJSON(K0)
			varK0,
			config, -1)
		if err1205 != nil {
			return m.NoResult, err1205
		}
		eval1206, err1206 := evalIsJSONList( // isJSONList(K1)
			varK1,
			config, -1)
		if err1206 != nil {
			return m.NoResult, err1206
		}
		if (m.IsTrue(eval1205)) &&
		   (m.IsTrue(eval1206)) {
			// RHS
			traceRuleApply("FUNC", 1099, "{| rule isJSONList(`_,__IELE-DATA`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isJSON(K0),isJSONList(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1100
	// source: ? @?
	// {| rule isJSONList(`.List{"_,__IELE-DATA"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"_,__IELE-DATA"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1100, "{| rule isJSONList(`.List{\"_,__IELE-DATA\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1101
	// source: ? @?
	// {| rule isJSONList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1101, "{| rule isJSONList(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitWellFormednessCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1102
	// source: ? @?
	// {| rule initWellFormednessCell(Init)=>`<well-formedness>`(initTypeCheckingCell(.KList),initWellFormednessScheduleCell(Init),initContractsCell(.KList),initCurrentContractCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2e79e09aa9d253fd5bc4740ac52d794c6e7969977756399c1465393734093679) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// RHS
		traceRuleApply("FUNC", 1102, "{| rule initWellFormednessCell(Init)=>`<well-formedness>`(initTypeCheckingCell(.KList),initWellFormednessScheduleCell(Init),initContractsCell(.KList),initCurrentContractCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2e79e09aa9d253fd5bc4740ac52d794c6e7969977756399c1465393734093679) initializer()] |}")
		eval1207, err1207 := evalInitTypeCheckingCell(config, -1) // initTypeCheckingCell(.KList)
		if err1207 != nil {
			return m.NoResult, err1207
		}
		eval1208, err1208 := evalInitWellFormednessScheduleCell( // initWellFormednessScheduleCell(Init)
			varInit,
			config, -1)
		if err1208 != nil {
			return m.NoResult, err1208
		}
		eval1209, err1209 := evalInitContractsCell(config, -1) // initContractsCell(.KList)
		if err1209 != nil {
			return m.NoResult, err1209
		}
		eval1210, err1210 := evalInitCurrentContractCell(config, -1) // initCurrentContractCell(.KList)
		if err1210 != nil {
			return m.NoResult, err1210
		}
		return &m.KApply{Label: m.LblXltwellXhyphenformednessXgt, List: []m.K{ // as-is <well-formedness>
			eval1207,
			eval1208,
			eval1209,
			eval1210,
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInitWellFormednessCell", args: []m.K{c}}
}

func evalListXcolonrange(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.range
	lbl := m.LblListXcolonrange // List:range
	sort := m.SortList
	if hookRes, hookErr := listHooks.listRange(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.range, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalListXcolonrange", args: []m.K{c1, c2, c3}}
}

func evalIsMessageCellMap(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortMessageCellMap {
		return m.BoolTrue, nil
	}
	// rule #1103
	// source: ? @?
	// {| rule isMessageCellMap(#KToken(#token("MessageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1103, "{| rule isMessageCellMap(#KToken(#token(\"MessageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1104
	// source: ? @?
	// {| rule isMessageCellMap(#KToken(#token("MessageCellMap","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessageCellMap { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1104, "{| rule isMessageCellMap(#KToken(#token(\"MessageCellMap\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1105
	// source: ? @?
	// {| rule isMessageCellMap(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessageXgt && len(kapp0.List) == 10 { // `<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		// REQUIRES
		eval1211, err1211 := evalIsMsgIDCell( // isMsgIDCell(K0)
			varK0,
			config, -1)
		if err1211 != nil {
			return m.NoResult, err1211
		}
		eval1212, err1212 := evalIsTxNonceCell( // isTxNonceCell(K1)
			varK1,
			config, -1)
		if err1212 != nil {
			return m.NoResult, err1212
		}
		eval1213, err1213 := evalIsTxGasPriceCell( // isTxGasPriceCell(K2)
			varK2,
			config, -1)
		if err1213 != nil {
			return m.NoResult, err1213
		}
		eval1214, err1214 := evalIsTxGasLimitCell( // isTxGasLimitCell(K3)
			varK3,
			config, -1)
		if err1214 != nil {
			return m.NoResult, err1214
		}
		eval1215, err1215 := evalIsSendtoCell( // isSendtoCell(K4)
			varK4,
			config, -1)
		if err1215 != nil {
			return m.NoResult, err1215
		}
		eval1216, err1216 := evalIsFuncCell( // isFuncCell(K5)
			varK5,
			config, -1)
		if err1216 != nil {
			return m.NoResult, err1216
		}
		eval1217, err1217 := evalIsValueCell( // isValueCell(K6)
			varK6,
			config, -1)
		if err1217 != nil {
			return m.NoResult, err1217
		}
		eval1218, err1218 := evalIsFromCell( // isFromCell(K7)
			varK7,
			config, -1)
		if err1218 != nil {
			return m.NoResult, err1218
		}
		eval1219, err1219 := evalIsDataCell( // isDataCell(K8)
			varK8,
			config, -1)
		if err1219 != nil {
			return m.NoResult, err1219
		}
		eval1220, err1220 := evalIsArgsCell( // isArgsCell(K9)
			varK9,
			config, -1)
		if err1220 != nil {
			return m.NoResult, err1220
		}
		if (((((((((m.IsTrue(eval1211)) &&
		   (m.IsTrue(eval1212))) &&
		   (m.IsTrue(eval1213))) &&
		   (m.IsTrue(eval1214))) &&
		   (m.IsTrue(eval1215))) &&
		   (m.IsTrue(eval1216))) &&
		   (m.IsTrue(eval1217))) &&
		   (m.IsTrue(eval1218))) &&
		   (m.IsTrue(eval1219))) &&
		   (m.IsTrue(eval1220)) {
			// RHS
			traceRuleApply("FUNC", 1105, "{| rule isMessageCellMap(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1106
	// source: ? @?
	// {| rule isMessageCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1106, "{| rule isMessageCellMap(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPseudoInstruction(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1107
	// source: ? @?
	// {| rule isPseudoInstruction(#KToken(#token("PseudoInstruction","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPseudoInstruction { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1107, "{| rule isPseudoInstruction(#KToken(#token(\"PseudoInstruction\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1108
	// source: ? @?
	// {| rule isPseudoInstruction(label(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLabel && len(kapp0.List) == 1 { // label(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1108, "{| rule isPseudoInstruction(label(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1109
	// source: ? @?
	// {| rule isPseudoInstruction(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1109, "{| rule isPseudoInstruction(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsModeCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1110
	// source: ? @?
	// {| rule isModeCellOpt(noModeCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoModeCell && len(kapp0.List) == 0 { // noModeCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1110, "{| rule isModeCellOpt(noModeCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1111
	// source: ? @?
	// {| rule isModeCellOpt(#KToken(#token("ModeCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModeCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1111, "{| rule isModeCellOpt(#KToken(#token(\"ModeCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1112
	// source: ? @?
	// {| rule isModeCellOpt(`<mode>`(K0))=>#token("true","Bool") requires isMode(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmodeXgt && len(kapp0.List) == 1 { // `<mode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1221, err1221 := evalIsMode( // isMode(K0)
			varK0,
			config, -1)
		if err1221 != nil {
			return m.NoResult, err1221
		}
		if m.IsTrue(eval1221) {
			// RHS
			traceRuleApply("FUNC", 1112, "{| rule isModeCellOpt(`<mode>`(K0))=>#token(\"true\",\"Bool\") requires isMode(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1113
	// source: ? @?
	// {| rule isModeCellOpt(#KToken(#token("ModeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1113, "{| rule isModeCellOpt(#KToken(#token(\"ModeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1114
	// source: ? @?
	// {| rule isModeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1114, "{| rule isModeCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsKCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1115
	// source: ? @?
	// {| rule isKCell(`<k>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltkXgt && len(kapp0.List) == 1 { // `<k>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 1115, "{| rule isKCell(`<k>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1116
	// source: ? @?
	// {| rule isKCell(#KToken(#token("KCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1116, "{| rule isKCell(#KToken(#token(\"KCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1117
	// source: ? @?
	// {| rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1117, "{| rule isKCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitMessagesCell(config m.K, guard int) (m.K, error) {
	// rule #1118
	// source: ? @?
	// {| rule initMessagesCell(.KList)=>`<messages>`(`.MessageCellMap`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(769c0eaacbddd91e54bf80bd1e6c9b838199a75f3111fdb697f91e27105d5aaa) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1118, "{| rule initMessagesCell(.KList)=>`<messages>`(`.MessageCellMap`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(769c0eaacbddd91e54bf80bd1e6c9b838199a75f3111fdb697f91e27105d5aaa) initializer()] |}")
	eval1222, err1222 := evalXdotMessageCellMap(config, -1) // `.MessageCellMap`(.KList)
	if err1222 != nil {
		return m.NoResult, err1222
	}
	return &m.KApply{Label: m.LblXltmessagesXgt, List: []m.K{ // as-is <messages>
		eval1222,
	}}, nil

}

//var constInitMessagesCell K = evalInitMessagesCell(m.InternedBottom)

func evalUnescapeAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1119
	// source: well-formedness.k @360
	// {| rule unescapeAux(S,IDX,SB)=>`StringBuffer2String`(SB) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_==Int_`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int")))) ensures #token("true","Bool") [UNIQUE_ID(62743ee6adff2e2d6712a667fb72f3c7e77ab120d57c92972b93b004a264bb4f) contentStartColumn(10) contentStartLine(360) org.kframework.attributes.Location(Location(360,10,361,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varIDX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSB, t := c3.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
				// REQUIRES
				eval1225, err1225 := evalLengthString( // lengthString(S)
					varS,
					config, -1)
				if err1225 != nil {
					return m.NoResult, err1225
				}
				eval1224, err1224 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(lengthString(S),#token("1","Int"))
					eval1225,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1224 != nil {
					return m.NoResult, err1224
				}
				eval1223, err1223 := evalXuXeqXeqIntXu( // `_==Int_`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int")))
					varIDX,
					eval1224,
					config, -1)
				if err1223 != nil {
					return m.NoResult, err1223
				}
				if /* rhs precomputed isString(S) && isInt(IDX) && isStringBuffer(SB) */ /* && */
				   m.IsTrue(eval1223) {
					// RHS
					traceRuleApply("FUNC", 1119, "{| rule unescapeAux(S,IDX,SB)=>`StringBuffer2String`(SB) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_==Int_`(IDX,`_-Int__INT`(lengthString(S),#token(\"1\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62743ee6adff2e2d6712a667fb72f3c7e77ab120d57c92972b93b004a264bb4f) contentStartColumn(10) contentStartLine(360) org.kframework.attributes.Location(Location(360,10,361,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1226, err1226 := evalStringBuffer2String( // `StringBuffer2String`(SB)
						varSB,
						config, -1)
					if err1226 != nil {
						return m.NoResult, err1226
					}
					return eval1226, nil
				}
			}
		}
	}

	// rule #1120
	// source: well-formedness.k @358
	// {| rule unescapeAux(S,IDX,SB)=>unescapeAux(S,`_+Int_`(IDX,#token("3","Int")),`_+String__STRING-BUFFER-HOOKED`(SB,chrChar(`String2Base`(substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int"))),#token("16","Int"))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_andBool_`(`_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int"))),`_==K_`(substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))),#token("\"\\\\\"","String")))) ensures #token("true","Bool") [UNIQUE_ID(0a98dd64ec5a9842e4b280742deb9916abe6e3df3b723abf8fd5c4c759bbd856) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,359,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varIDX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSB, t := c3.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
				// REQUIRES
				eval1229, err1229 := evalLengthString( // lengthString(S)
					varS,
					config, -1)
				if err1229 != nil {
					return m.NoResult, err1229
				}
				eval1228, err1228 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(lengthString(S),#token("1","Int"))
					eval1229,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1228 != nil {
					return m.NoResult, err1228
				}
				eval1227, err1227 := evalXuXltIntXuXuINT( // `_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int")))
					varIDX,
					eval1228,
					config, -1)
				if err1227 != nil {
					return m.NoResult, err1227
				}
				eval1232, err1232 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
					varIDX,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1232 != nil {
					return m.NoResult, err1232
				}
				eval1231, err1231 := evalSubstrString( // substrString(S,IDX,`_+Int_`(IDX,#token("1","Int")))
					varS,
					varIDX,
					eval1232,
					config, -1)
				if err1231 != nil {
					return m.NoResult, err1231
				}
				eval1230, err1230 := evalXuXeqXeqKXu( // `_==K_`(substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))),#token("\"\\\\\"","String"))
					eval1231,
					/* rhs KToken */ m.NewString("\\"),
					config, -1)
				if err1230 != nil {
					return m.NoResult, err1230
				}
				if /* rhs precomputed isString(S) && isInt(IDX) && isStringBuffer(SB) */ /* && */
				   (m.IsTrue(eval1227)) &&
				   (m.IsTrue(eval1230)) {
					// RHS
					traceRuleApply("FUNC", 1120, "{| rule unescapeAux(S,IDX,SB)=>unescapeAux(S,`_+Int_`(IDX,#token(\"3\",\"Int\")),`_+String__STRING-BUFFER-HOOKED`(SB,chrChar(`String2Base`(substrString(S,`_+Int_`(IDX,#token(\"1\",\"Int\")),`_+Int_`(IDX,#token(\"3\",\"Int\"))),#token(\"16\",\"Int\"))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_andBool_`(`_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token(\"1\",\"Int\"))),`_==K_`(substrString(S,IDX,`_+Int_`(IDX,#token(\"1\",\"Int\"))),#token(\"\\\"\\\\\\\\\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a98dd64ec5a9842e4b280742deb9916abe6e3df3b723abf8fd5c4c759bbd856) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,359,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1234, err1234 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("3","Int"))
						varIDX,
						/* rhs KToken */ m.NewIntFromString("3"),
						config, -1)
					if err1234 != nil {
						return m.NoResult, err1234
					}
					eval1239, err1239 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
						varIDX,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err1239 != nil {
						return m.NoResult, err1239
					}
					eval1240, err1240 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("3","Int"))
						varIDX,
						/* rhs KToken */ m.NewIntFromString("3"),
						config, -1)
					if err1240 != nil {
						return m.NoResult, err1240
					}
					eval1238, err1238 := evalSubstrString( // substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int")))
						varS,
						eval1239,
						eval1240,
						config, -1)
					if err1238 != nil {
						return m.NoResult, err1238
					}
					eval1237, err1237 := evalString2Base( // `String2Base`(substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int"))),#token("16","Int"))
						eval1238,
						/* rhs KToken */ m.NewIntFromString("16"),
						config, -1)
					if err1237 != nil {
						return m.NoResult, err1237
					}
					eval1236, err1236 := evalChrChar( // chrChar(`String2Base`(substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int"))),#token("16","Int")))
						eval1237,
						config, -1)
					if err1236 != nil {
						return m.NoResult, err1236
					}
					eval1235, err1235 := evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED( // `_+String__STRING-BUFFER-HOOKED`(SB,chrChar(`String2Base`(substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int"))),#token("16","Int"))))
						varSB,
						eval1236,
						config, -1)
					if err1235 != nil {
						return m.NoResult, err1235
					}
					eval1233, err1233 := evalUnescapeAux( // unescapeAux(S,`_+Int_`(IDX,#token("3","Int")),`_+String__STRING-BUFFER-HOOKED`(SB,chrChar(`String2Base`(substrString(S,`_+Int_`(IDX,#token("1","Int")),`_+Int_`(IDX,#token("3","Int"))),#token("16","Int")))))
						varS,
						eval1234,
						eval1235,
						config, -1)
					if err1233 != nil {
						return m.NoResult, err1233
					}
					return eval1233, nil
				}
			}
		}
	}

	// rule #1121
	// source: well-formedness.k @356
	// {| rule unescapeAux(S,IDX,SB)=>unescapeAux(S,`_+Int_`(IDX,#token("1","Int")),`_+String__STRING-BUFFER-HOOKED`(SB,substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_andBool_`(`_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int"))),`_=/=K_`(substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))),#token("\"\\\\\"","String")))) ensures #token("true","Bool") [UNIQUE_ID(9514b1dfdba2c1f9ec0a91e30f62d872ffa3918df9c409c6f6dfaaab982ad583) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,357,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varIDX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSB, t := c3.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
				// REQUIRES
				eval1243, err1243 := evalLengthString( // lengthString(S)
					varS,
					config, -1)
				if err1243 != nil {
					return m.NoResult, err1243
				}
				eval1242, err1242 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(lengthString(S),#token("1","Int"))
					eval1243,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1242 != nil {
					return m.NoResult, err1242
				}
				eval1241, err1241 := evalXuXltIntXuXuINT( // `_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token("1","Int")))
					varIDX,
					eval1242,
					config, -1)
				if err1241 != nil {
					return m.NoResult, err1241
				}
				eval1246, err1246 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
					varIDX,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1246 != nil {
					return m.NoResult, err1246
				}
				eval1245, err1245 := evalSubstrString( // substrString(S,IDX,`_+Int_`(IDX,#token("1","Int")))
					varS,
					varIDX,
					eval1246,
					config, -1)
				if err1245 != nil {
					return m.NoResult, err1245
				}
				eval1244, err1244 := evalXuXeqXslashXeqKXu( // `_=/=K_`(substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))),#token("\"\\\\\"","String"))
					eval1245,
					/* rhs KToken */ m.NewString("\\"),
					config, -1)
				if err1244 != nil {
					return m.NoResult, err1244
				}
				if /* rhs precomputed isString(S) && isInt(IDX) && isStringBuffer(SB) */ /* && */
				   (m.IsTrue(eval1241)) &&
				   (m.IsTrue(eval1244)) {
					// RHS
					traceRuleApply("FUNC", 1121, "{| rule unescapeAux(S,IDX,SB)=>unescapeAux(S,`_+Int_`(IDX,#token(\"1\",\"Int\")),`_+String__STRING-BUFFER-HOOKED`(SB,substrString(S,IDX,`_+Int_`(IDX,#token(\"1\",\"Int\"))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(S),isInt(IDX)),isStringBuffer(SB)),`_andBool_`(`_<Int__INT`(IDX,`_-Int__INT`(lengthString(S),#token(\"1\",\"Int\"))),`_=/=K_`(substrString(S,IDX,`_+Int_`(IDX,#token(\"1\",\"Int\"))),#token(\"\\\"\\\\\\\\\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9514b1dfdba2c1f9ec0a91e30f62d872ffa3918df9c409c6f6dfaaab982ad583) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,357,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1248, err1248 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
						varIDX,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err1248 != nil {
						return m.NoResult, err1248
					}
					eval1251, err1251 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
						varIDX,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err1251 != nil {
						return m.NoResult, err1251
					}
					eval1250, err1250 := evalSubstrString( // substrString(S,IDX,`_+Int_`(IDX,#token("1","Int")))
						varS,
						varIDX,
						eval1251,
						config, -1)
					if err1250 != nil {
						return m.NoResult, err1250
					}
					eval1249, err1249 := evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED( // `_+String__STRING-BUFFER-HOOKED`(SB,substrString(S,IDX,`_+Int_`(IDX,#token("1","Int"))))
						varSB,
						eval1250,
						config, -1)
					if err1249 != nil {
						return m.NoResult, err1249
					}
					eval1247, err1247 := evalUnescapeAux( // unescapeAux(S,`_+Int_`(IDX,#token("1","Int")),`_+String__STRING-BUFFER-HOOKED`(SB,substrString(S,IDX,`_+Int_`(IDX,#token("1","Int")))))
						varS,
						eval1248,
						eval1249,
						config, -1)
					if err1247 != nil {
						return m.NoResult, err1247
					}
					return eval1247, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalUnescapeAux", args: []m.K{c1, c2, c3}}
}

func evalXdotFunctionCellMap(config m.K, guard int) (m.K, error) {
	//hook: MAP.unit
	lbl := m.LblXdotFunctionCellMap // .FunctionCellMap
	sort := m.SortFunctionCellMap
	if hookRes, hookErr := mapHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotFunctionCellMap", args: nil}
}

//var constXdotFunctionCellMap K = evalXdotFunctionCellMap(m.InternedBottom)

func evalXuXgtXeqIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.ge
	lbl := m.LblXuXgtXeqIntXuXuINT // _>=Int__INT
	sort := m.SortBool
	if hookRes, hookErr := intHooks.ge(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.ge, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXgtXeqIntXuXuINT", args: []m.K{c1, c2}}
}

func evalXhashtakeAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1122
	// source: data.k @280
	// {| rule #takeAux(N,`.WordStack_IELE-DATA`(.KList),WS)=>#takeAux(`_-Int__INT`(N,#token("1","Int")),`.WordStack_IELE-DATA`(.KList),`_:__IELE-DATA`(#token("0","Int"),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`_>Int__INT`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(19fc80cc33fbac2fb817f8dc25e71a896a3153e0dfe11b36ae7af82db1af6b0a) contentStartColumn(10) contentStartLine(280) org.kframework.attributes.Location(Location(280,10,280,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
			varWS := c3 // lhs KVariable WS
			// REQUIRES
			eval1252, err1252 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err1252 != nil {
				return m.NoResult, err1252
			}
			eval1253, err1253 := evalXuXgtIntXuXuINT( // `_>Int__INT`(N,#token("0","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1253 != nil {
				return m.NoResult, err1253
			}
			if (m.IsTrue(eval1252) /* && */ /* rhs precomputed isInt(N) */ ) &&
			   (m.IsTrue(eval1253)) {
				// RHS
				traceRuleApply("FUNC", 1122, "{| rule #takeAux(N,`.WordStack_IELE-DATA`(.KList),WS)=>#takeAux(`_-Int__INT`(N,#token(\"1\",\"Int\")),`.WordStack_IELE-DATA`(.KList),`_:__IELE-DATA`(#token(\"0\",\"Int\"),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(N)),`_>Int__INT`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(19fc80cc33fbac2fb817f8dc25e71a896a3153e0dfe11b36ae7af82db1af6b0a) contentStartColumn(10) contentStartLine(280) org.kframework.attributes.Location(Location(280,10,280,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1255, err1255 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,#token("1","Int"))
					varN,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1255 != nil {
					return m.NoResult, err1255
				}
				eval1254, err1254 := evalXhashtakeAux( // #takeAux(`_-Int__INT`(N,#token("1","Int")),`.WordStack_IELE-DATA`(.KList),`_:__IELE-DATA`(#token("0","Int"),WS))
					eval1255,
					&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
					}},
					&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
						/* rhs KToken */ m.NewIntFromString("0"),
						varWS,
					}},
					config, -1)
				if err1254 != nil {
					return m.NoResult, err1254
				}
				return eval1254, nil
			}
		}
	}

	// rule #1123
	// source: data.k @279
	// {| rule #takeAux(_3,_21,WS)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isWordStack(_21)),`_==Int_`(_3,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(2fa11d7f159c207ef9d5a689b32fe89ca87d7cc5d33059dc401f9cef0188b0f4) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,279,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu3, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varXu21 := c2 // lhs KVariable _21
		varWS := c3 // lhs KVariable WS
		// REQUIRES
		eval1256, err1256 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err1256 != nil {
			return m.NoResult, err1256
		}
		eval1257, err1257 := evalIsWordStack( // isWordStack(_21)
			varXu21,
			config, -1)
		if err1257 != nil {
			return m.NoResult, err1257
		}
		eval1258, err1258 := evalXuXeqXeqIntXu( // `_==Int_`(_3,#token("0","Int"))
			varXu3,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err1258 != nil {
			return m.NoResult, err1258
		}
		if ((m.IsTrue(eval1256)) &&
		   (m.IsTrue(eval1257))) &&
		   (m.IsTrue(eval1258)) {
			// RHS
			traceRuleApply("FUNC", 1123, "{| rule #takeAux(_3,_21,WS)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isWordStack(_21)),`_==Int_`(_3,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fa11d7f159c207ef9d5a689b32fe89ca87d7cc5d33059dc401f9cef0188b0f4) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,279,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1259, err1259 := evalXhashrev( // #rev(WS,`.WordStack_IELE-DATA`(.KList))
				varWS,
				&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
				}},
				config, -1)
			if err1259 != nil {
				return m.NoResult, err1259
			}
			return eval1259, nil
		}
	}

	// rule #1124
	// source: data.k @281
	// {| rule #takeAux(N,`_:__IELE-DATA`(W,WS1),WS2)=>#takeAux(`_-Int__INT`(N,#token("1","Int")),WS1,`_:__IELE-DATA`(W,WS2)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isWordStack(WS2)),isWordStack(WS1)),isInt(N)),`_>Int__INT`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(e19cf2fa8dba42fdd1a8224c3c89bf295370fae49701e965005bb8443adf816b) contentStartColumn(10) contentStartLine(281) org.kframework.attributes.Location(Location(281,10,281,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS1)
			if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS1 := kapp0.List[1] // lhs KVariable WS1
				varWS2 := c3 // lhs KVariable WS2
				// REQUIRES
				eval1260, err1260 := evalIsWordStack( // isWordStack(WS2)
					varWS2,
					config, -1)
				if err1260 != nil {
					return m.NoResult, err1260
				}
				eval1261, err1261 := evalIsWordStack( // isWordStack(WS1)
					varWS1,
					config, -1)
				if err1261 != nil {
					return m.NoResult, err1261
				}
				eval1262, err1262 := evalXuXgtIntXuXuINT( // `_>Int__INT`(N,#token("0","Int"))
					varN,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err1262 != nil {
					return m.NoResult, err1262
				}
				if ((/* rhs precomputed isInt(W) */ /* && */
				   m.IsTrue(eval1260)) &&
				   (m.IsTrue(eval1261)) /* && */ /* rhs precomputed isInt(N) */ ) &&
				   (m.IsTrue(eval1262)) {
					// RHS
					traceRuleApply("FUNC", 1124, "{| rule #takeAux(N,`_:__IELE-DATA`(W,WS1),WS2)=>#takeAux(`_-Int__INT`(N,#token(\"1\",\"Int\")),WS1,`_:__IELE-DATA`(W,WS2)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isWordStack(WS2)),isWordStack(WS1)),isInt(N)),`_>Int__INT`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e19cf2fa8dba42fdd1a8224c3c89bf295370fae49701e965005bb8443adf816b) contentStartColumn(10) contentStartLine(281) org.kframework.attributes.Location(Location(281,10,281,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1264, err1264 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,#token("1","Int"))
						varN,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err1264 != nil {
						return m.NoResult, err1264
					}
					eval1263, err1263 := evalXhashtakeAux( // #takeAux(`_-Int__INT`(N,#token("1","Int")),WS1,`_:__IELE-DATA`(W,WS2))
						eval1264,
						varWS1,
						&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
							varW,
							varWS2,
						}},
						config, -1)
					if err1263 != nil {
						return m.NoResult, err1263
					}
					return eval1263, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtakeAux", args: []m.K{c1, c2, c3}}
}

func evalIsTxGasPriceCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1125
	// source: ? @?
	// {| rule isTxGasPriceCell(#KToken(#token("TxGasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1125, "{| rule isTxGasPriceCell(#KToken(#token(\"TxGasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1126
	// source: ? @?
	// {| rule isTxGasPriceCell(`<txGasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasPriceXgt && len(kapp0.List) == 1 { // `<txGasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1126, "{| rule isTxGasPriceCell(`<txGasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1127
	// source: ? @?
	// {| rule isTxGasPriceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1127, "{| rule isTxGasPriceCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSizeWordStackAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1128
	// source: data.k @311
	// {| rule sizeWordStackAux(`_:__IELE-DATA`(W,WS),SIZE)=>sizeWordStackAux(WS,`_+Int_`(SIZE,#token("1","Int"))) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isInt(SIZE)) ensures #token("true","Bool") [UNIQUE_ID(d6de9cc310e509aaa170c68363a13934f5bedf74a93d42d6159f4cfbcc64fcc9) contentStartColumn(10) contentStartLine(311) org.kframework.attributes.Location(Location(311,10,311,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			if varSIZE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1265, err1265 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err1265 != nil {
					return m.NoResult, err1265
				}
				if m.IsTrue(eval1265) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(SIZE) */  {
					// RHS
					traceRuleApply("FUNC", 1128, "{| rule sizeWordStackAux(`_:__IELE-DATA`(W,WS),SIZE)=>sizeWordStackAux(WS,`_+Int_`(SIZE,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isInt(SIZE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6de9cc310e509aaa170c68363a13934f5bedf74a93d42d6159f4cfbcc64fcc9) contentStartColumn(10) contentStartLine(311) org.kframework.attributes.Location(Location(311,10,311,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval1267, err1267 := evalXuXplusIntXu( // `_+Int_`(SIZE,#token("1","Int"))
						varSIZE,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err1267 != nil {
						return m.NoResult, err1267
					}
					eval1266, err1266 := evalSizeWordStackAux( // sizeWordStackAux(WS,`_+Int_`(SIZE,#token("1","Int")))
						varWS,
						eval1267,
						config, -1)
					if err1266 != nil {
						return m.NoResult, err1266
					}
					return eval1266, nil
				}
			}
		}
	}

	// rule #1129
	// source: data.k @310
	// {| rule sizeWordStackAux(`.WordStack_IELE-DATA`(.KList),SIZE)=>SIZE requires isInt(SIZE) ensures #token("true","Bool") [UNIQUE_ID(3a42f2f0ed4fc701e74270f12997826fc6539a65b68bf06fefed0e25e46b983b) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if varSIZE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(SIZE)
			// RHS
			traceRuleApply("FUNC", 1129, "{| rule sizeWordStackAux(`.WordStack_IELE-DATA`(.KList),SIZE)=>SIZE requires isInt(SIZE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3a42f2f0ed4fc701e74270f12997826fc6539a65b68bf06fefed0e25e46b983b) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varSIZE, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalSizeWordStackAux", args: []m.K{c1, c2}}
}

func evalInitGasUsedCell(config m.K, guard int) (m.K, error) {
	// rule #1130
	// source: ? @?
	// {| rule initGasUsedCell(.KList)=>`<gasUsed>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(03bd5f8074e51ac5ebbb6a63768c01404eab4f36600500393c12b9e5f05c94ac) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1130, "{| rule initGasUsedCell(.KList)=>`<gasUsed>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(03bd5f8074e51ac5ebbb6a63768c01404eab4f36600500393c12b9e5f05c94ac) initializer()] |}")
	return &m.KApply{Label: m.LblXltgasUsedXgt, List: []m.K{ // as-is <gasUsed>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitGasUsedCell K = evalInitGasUsedCell(m.InternedBottom)

func evalFillList(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.fill
	lbl := m.LblFillList // fillList
	sort := m.SortList
	if hookRes, hookErr := listHooks.fill(c1, c2, c3, c4, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.fill, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFillList", args: []m.K{c1, c2, c3, c4}}
}

func evalInitAcctIDCell(config m.K, guard int) (m.K, error) {
	// rule #1131
	// source: ? @?
	// {| rule initAcctIDCell(.KList)=>`<acctID>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f00237f7914d6a70d22536a5a1bb760cc5a14bf508f77d6fff3d161250309733) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1131, "{| rule initAcctIDCell(.KList)=>`<acctID>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f00237f7914d6a70d22536a5a1bb760cc5a14bf508f77d6fff3d161250309733) initializer()] |}")
	return &m.KApply{Label: m.LblXltacctIDXgt, List: []m.K{ // as-is <acctID>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitAcctIDCell K = evalInitAcctIDCell(m.InternedBottom)

func evalJSONListToInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1132
	// source: iele-node.k @144
	// {| rule `JSONListToInts`(`.List{"_,__IELE-DATA"}`(.KList))=>`.List{"operandList"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(44945d4de292869f28eab3dbc73d6c841b9587dd8bdfd7f973bf4ea714f78796) contentStartColumn(10) contentStartLine(144) org.kframework.attributes.Location(Location(144,10,144,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteXuXcommaXuXuIELEXhyphenDATAXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"_,__IELE-DATA"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1132, "{| rule `JSONListToInts`(`.List{\"_,__IELE-DATA\"}`(.KList))=>`.List{\"operandList\"}`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(44945d4de292869f28eab3dbc73d6c841b9587dd8bdfd7f973bf4ea714f78796) contentStartColumn(10) contentStartLine(144) org.kframework.attributes.Location(Location(144,10,144,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
		}}, nil
	}

	// rule #1133
	// source: iele-node.k @145
	// {| rule `JSONListToInts`(`_,__IELE-DATA`(S,L))=>operandList(`Bytes2Int`(`String2Bytes`(S),bigEndianBytes(.KList),signedBytes(.KList)),`JSONListToInts`(L)) requires `_andBool_`(isString(S),isJSONList(L)) ensures #token("true","Bool") [UNIQUE_ID(28199ba6a49177351e8578044d81f8812c77f90c468b840fa6cb3feb893b0f95) contentStartColumn(10) contentStartLine(145) org.kframework.attributes.Location(Location(145,10,145,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_,__IELE-DATA`(S,L)
		if varS, t := kapp0.List[0].(*m.String); t { // lhs KVariable with hook:STRING.String
			varL := kapp0.List[1] // lhs KVariable L
			// REQUIRES
			eval1268, err1268 := evalIsJSONList( // isJSONList(L)
				varL,
				config, -1)
			if err1268 != nil {
				return m.NoResult, err1268
			}
			if /* rhs precomputed isString(S) */ /* && */
			   m.IsTrue(eval1268) {
				// RHS
				traceRuleApply("FUNC", 1133, "{| rule `JSONListToInts`(`_,__IELE-DATA`(S,L))=>operandList(`Bytes2Int`(`String2Bytes`(S),bigEndianBytes(.KList),signedBytes(.KList)),`JSONListToInts`(L)) requires `_andBool_`(isString(S),isJSONList(L)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28199ba6a49177351e8578044d81f8812c77f90c468b840fa6cb3feb893b0f95) contentStartColumn(10) contentStartLine(145) org.kframework.attributes.Location(Location(145,10,145,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1270, err1270 := evalString2Bytes( // `String2Bytes`(S)
					varS,
					config, -1)
				if err1270 != nil {
					return m.NoResult, err1270
				}
				eval1269, err1269 := evalBytes2Int( // `Bytes2Int`(`String2Bytes`(S),bigEndianBytes(.KList),signedBytes(.KList))
					eval1270,
					&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
					}},
					&m.KApply{Label: m.LblSignedBytes, List: []m.K{ // as-is signedBytes
					}},
					config, -1)
				if err1269 != nil {
					return m.NoResult, err1269
				}
				eval1271, err1271 := evalJSONListToInts( // `JSONListToInts`(L)
					varL,
					config, -1)
				if err1271 != nil {
					return m.NoResult, err1271
				}
				return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
					eval1269,
					eval1271,
				}}, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalJSONListToInts", args: []m.K{c}}
}

func evalXuXltStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.lt
	lbl := m.LblXuXltStringXuXuSTRING // _<String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.lt(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.lt, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalIsNotInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1134
	// source: ? @?
	// {| rule isNotInst(#KToken(#token("NotInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNotInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1134, "{| rule isNotInst(#KToken(#token(\"NotInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1135
	// source: ? @?
	// {| rule isNotInst(`_=not__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqnotXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=not__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1272, err1272 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1272 != nil {
			return m.NoResult, err1272
		}
		eval1273, err1273 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1273 != nil {
			return m.NoResult, err1273
		}
		if (m.IsTrue(eval1272)) &&
		   (m.IsTrue(eval1273)) {
			// RHS
			traceRuleApply("FUNC", 1135, "{| rule isNotInst(`_=not__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1136
	// source: ? @?
	// {| rule isNotInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1136, "{| rule isNotInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSelfDestructCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1137
	// source: ? @?
	// {| rule isSelfDestructCell(`<selfDestruct>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltselfDestructXgt && len(kapp0.List) == 1 { // `<selfDestruct>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1137, "{| rule isSelfDestructCell(`<selfDestruct>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1138
	// source: ? @?
	// {| rule isSelfDestructCell(#KToken(#token("SelfDestructCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfDestructCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1138, "{| rule isSelfDestructCell(#KToken(#token(\"SelfDestructCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1139
	// source: ? @?
	// {| rule isSelfDestructCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1139, "{| rule isSelfDestructCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashrlpEncodeWord(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1140
	// source: data.k @508
	// {| rule #rlpEncodeWord(WORD)=>chrChar(WORD) requires `_andBool_`(isInt(WORD),`_andBool_`(`_>Int__INT`(WORD,#token("0","Int")),`_<Int__INT`(WORD,#token("128","Int")))) ensures #token("true","Bool") [UNIQUE_ID(37b90791dd6d5b7c354fe5057104d1927568a650b311b69599af38f1a25c33fb) contentStartColumn(10) contentStartLine(508) org.kframework.attributes.Location(Location(508,10,508,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varWORD, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval1274, err1274 := evalXuXgtIntXuXuINT( // `_>Int__INT`(WORD,#token("0","Int"))
			varWORD,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err1274 != nil {
			return m.NoResult, err1274
		}
		eval1275, err1275 := evalXuXltIntXuXuINT( // `_<Int__INT`(WORD,#token("128","Int"))
			varWORD,
			/* rhs KToken */ m.NewIntFromString("128"),
			config, -1)
		if err1275 != nil {
			return m.NoResult, err1275
		}
		if /* rhs precomputed isInt(WORD) */ /* && */
		   (m.IsTrue(eval1274)) &&
		   (m.IsTrue(eval1275)) {
			// RHS
			traceRuleApply("FUNC", 1140, "{| rule #rlpEncodeWord(WORD)=>chrChar(WORD) requires `_andBool_`(isInt(WORD),`_andBool_`(`_>Int__INT`(WORD,#token(\"0\",\"Int\")),`_<Int__INT`(WORD,#token(\"128\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37b90791dd6d5b7c354fe5057104d1927568a650b311b69599af38f1a25c33fb) contentStartColumn(10) contentStartLine(508) org.kframework.attributes.Location(Location(508,10,508,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1276, err1276 := evalChrChar( // chrChar(WORD)
				varWORD,
				config, -1)
			if err1276 != nil {
				return m.NoResult, err1276
			}
			return eval1276, nil
		}
	}

	// rule #1141
	// source: data.k @509
	// {| rule #rlpEncodeWord(WORD)=>#rlpEncodeLength(`Bytes2String`(`Int2BytesNoLen`(WORD,bigEndianBytes(.KList),unsignedBytes(.KList))),#token("128","Int")) requires `_andBool_`(isInt(WORD),`_>=Int__INT`(WORD,#token("128","Int"))) ensures #token("true","Bool") [UNIQUE_ID(375942d8172313f8d598ef5f5e5651e9526c6766154d746b8f9ec0bbbb525786) contentStartColumn(10) contentStartLine(509) org.kframework.attributes.Location(Location(509,10,509,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varWORD, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval1277, err1277 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(WORD,#token("128","Int"))
			varWORD,
			/* rhs KToken */ m.NewIntFromString("128"),
			config, -1)
		if err1277 != nil {
			return m.NoResult, err1277
		}
		if /* rhs precomputed isInt(WORD) */ /* && */
		   m.IsTrue(eval1277) {
			// RHS
			traceRuleApply("FUNC", 1141, "{| rule #rlpEncodeWord(WORD)=>#rlpEncodeLength(`Bytes2String`(`Int2BytesNoLen`(WORD,bigEndianBytes(.KList),unsignedBytes(.KList))),#token(\"128\",\"Int\")) requires `_andBool_`(isInt(WORD),`_>=Int__INT`(WORD,#token(\"128\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(375942d8172313f8d598ef5f5e5651e9526c6766154d746b8f9ec0bbbb525786) contentStartColumn(10) contentStartLine(509) org.kframework.attributes.Location(Location(509,10,509,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1280, err1280 := evalInt2BytesNoLen( // `Int2BytesNoLen`(WORD,bigEndianBytes(.KList),unsignedBytes(.KList))
				varWORD,
				&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
				}},
				&m.KApply{Label: m.LblUnsignedBytes, List: []m.K{ // as-is unsignedBytes
				}},
				config, -1)
			if err1280 != nil {
				return m.NoResult, err1280
			}
			eval1279, err1279 := evalBytes2String( // `Bytes2String`(`Int2BytesNoLen`(WORD,bigEndianBytes(.KList),unsignedBytes(.KList)))
				eval1280,
				config, -1)
			if err1279 != nil {
				return m.NoResult, err1279
			}
			eval1278, err1278 := evalXhashrlpEncodeLength( // #rlpEncodeLength(`Bytes2String`(`Int2BytesNoLen`(WORD,bigEndianBytes(.KList),unsignedBytes(.KList))),#token("128","Int"))
				eval1279,
				/* rhs KToken */ m.NewIntFromString("128"),
				config, -1)
			if err1278 != nil {
				return m.NoResult, err1278
			}
			return eval1278, nil
		}
	}

	// rule #1142
	// source: data.k @507
	// {| rule #rlpEncodeWord(_8)=>#token("\"\\x80\"","String") requires `_==Int_`(_8,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(4afc1eaf9ba27045b26faf1aa10279b0ea4d3a05a5ac492a31ef68d14efdda30) contentStartColumn(10) contentStartLine(507) org.kframework.attributes.Location(Location(507,10,507,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu8, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval1281, err1281 := evalXuXeqXeqIntXu( // `_==Int_`(_8,#token("0","Int"))
			varXu8,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err1281 != nil {
			return m.NoResult, err1281
		}
		if m.IsTrue(eval1281) {
			// RHS
			traceRuleApply("FUNC", 1142, "{| rule #rlpEncodeWord(_8)=>#token(\"\\\"\\\\x80\\\"\",\"String\") requires `_==Int_`(_8,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4afc1eaf9ba27045b26faf1aa10279b0ea4d3a05a5ac492a31ef68d14efdda30) contentStartColumn(10) contentStartLine(507) org.kframework.attributes.Location(Location(507,10,507,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewString("\x80"), nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeWord", args: []m.K{c}}
}

func evalIsXhashLowerID(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1143
	// source: ? @?
	// {| rule `is#LowerId`(#KToken(#token("#LowerId","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXhashLowerID { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1143, "{| rule `is#LowerId`(#KToken(#token(\"#LowerId\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1144
	// source: ? @?
	// {| rule `is#LowerId`(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1144, "{| rule `is#LowerId`(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCurrentFunctionCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1145
	// source: ? @?
	// {| rule isCurrentFunctionCellFragment(`<currentFunction>-fragment`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isFunctionNameCellOpt(K0),isLabelsCellOpt(K1)),isCurrentInstructionsCellOpt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentFunctionXgtXhyphenfragment && len(kapp0.List) == 3 { // `<currentFunction>-fragment`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1282, err1282 := evalIsFunctionNameCellOpt( // isFunctionNameCellOpt(K0)
			varK0,
			config, -1)
		if err1282 != nil {
			return m.NoResult, err1282
		}
		eval1283, err1283 := evalIsLabelsCellOpt( // isLabelsCellOpt(K1)
			varK1,
			config, -1)
		if err1283 != nil {
			return m.NoResult, err1283
		}
		eval1284, err1284 := evalIsCurrentInstructionsCellOpt( // isCurrentInstructionsCellOpt(K2)
			varK2,
			config, -1)
		if err1284 != nil {
			return m.NoResult, err1284
		}
		if ((m.IsTrue(eval1282)) &&
		   (m.IsTrue(eval1283))) &&
		   (m.IsTrue(eval1284)) {
			// RHS
			traceRuleApply("FUNC", 1145, "{| rule isCurrentFunctionCellFragment(`<currentFunction>-fragment`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isFunctionNameCellOpt(K0),isLabelsCellOpt(K1)),isCurrentInstructionsCellOpt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1146
	// source: ? @?
	// {| rule isCurrentFunctionCellFragment(#KToken(#token("CurrentFunctionCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentFunctionCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1146, "{| rule isCurrentFunctionCellFragment(#KToken(#token(\"CurrentFunctionCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1147
	// source: ? @?
	// {| rule isCurrentFunctionCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1147, "{| rule isCurrentFunctionCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsModInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1148
	// source: ? @?
	// {| rule isModInst(#KToken(#token("ModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1148, "{| rule isModInst(#KToken(#token(\"ModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1149
	// source: ? @?
	// {| rule isModInst(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mod_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1285, err1285 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1285 != nil {
			return m.NoResult, err1285
		}
		eval1286, err1286 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1286 != nil {
			return m.NoResult, err1286
		}
		eval1287, err1287 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1287 != nil {
			return m.NoResult, err1287
		}
		if ((m.IsTrue(eval1285)) &&
		   (m.IsTrue(eval1286))) &&
		   (m.IsTrue(eval1287)) {
			// RHS
			traceRuleApply("FUNC", 1149, "{| rule isModInst(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1150
	// source: ? @?
	// {| rule isModInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1150, "{| rule isModInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashlogToFile(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.log
	lbl := m.LblXhashlogToFile // #logToFile
	sort := m.SortK
	if hookRes, hookErr := ioHooks.log(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.log, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlogToFile", args: []m.K{c1, c2}}
}

func evalInitCallDepthCell(config m.K, guard int) (m.K, error) {
	// rule #1151
	// source: ? @?
	// {| rule initCallDepthCell(.KList)=>`<callDepth>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8ebead4a707853e6962e0c986ad91878add967a1e5312311ce94efc316f15a1a) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1151, "{| rule initCallDepthCell(.KList)=>`<callDepth>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ebead4a707853e6962e0c986ad91878add967a1e5312311ce94efc316f15a1a) initializer()] |}")
	return &m.KApply{Label: m.LblXltcallDepthXgt, List: []m.K{ // as-is <callDepth>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitCallDepthCell K = evalInitCallDepthCell(m.InternedBottom)

func evalXhashreadXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.read
	lbl := m.LblXhashreadXlparenXuXcommaXuXrparenXuKXhyphenIO // #read(_,_)_K-IO
	sort := m.SortString
	if hookRes, hookErr := ioHooks.read(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.read, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashreadXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalXhashrlpEncodeLengthAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1152
	// source: data.k @526
	// {| rule #rlpEncodeLengthAux(STR,OFFSET,BL)=>`_+String__STRING`(`_+String__STRING`(chrChar(`_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token("55","Int"))),BL),STR) requires `_andBool_`(`_andBool_`(isString(STR),isString(BL)),isInt(OFFSET)) ensures #token("true","Bool") [UNIQUE_ID(96568f00fd496627121c9cd49a48e9280674e041b41c1494998055d393a1849e) contentStartColumn(10) contentStartLine(526) org.kframework.attributes.Location(Location(526,10,526,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varOFFSET, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varBL, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				// REQUIRES precomputed isString(STR) && isString(BL) && isInt(OFFSET)
				// RHS
				traceRuleApply("FUNC", 1152, "{| rule #rlpEncodeLengthAux(STR,OFFSET,BL)=>`_+String__STRING`(`_+String__STRING`(chrChar(`_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token(\"55\",\"Int\"))),BL),STR) requires `_andBool_`(`_andBool_`(isString(STR),isString(BL)),isInt(OFFSET)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(96568f00fd496627121c9cd49a48e9280674e041b41c1494998055d393a1849e) contentStartColumn(10) contentStartLine(526) org.kframework.attributes.Location(Location(526,10,526,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1293, err1293 := evalLengthString( // lengthString(BL)
					varBL,
					config, -1)
				if err1293 != nil {
					return m.NoResult, err1293
				}
				eval1292, err1292 := evalXuXplusIntXu( // `_+Int_`(lengthString(BL),OFFSET)
					eval1293,
					varOFFSET,
					config, -1)
				if err1292 != nil {
					return m.NoResult, err1292
				}
				eval1291, err1291 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token("55","Int"))
					eval1292,
					/* rhs KToken */ m.NewIntFromString("55"),
					config, -1)
				if err1291 != nil {
					return m.NoResult, err1291
				}
				eval1290, err1290 := evalChrChar( // chrChar(`_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token("55","Int")))
					eval1291,
					config, -1)
				if err1290 != nil {
					return m.NoResult, err1290
				}
				eval1289, err1289 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(chrChar(`_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token("55","Int"))),BL)
					eval1290,
					varBL,
					config, -1)
				if err1289 != nil {
					return m.NoResult, err1289
				}
				eval1288, err1288 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(`_+String__STRING`(chrChar(`_+Int_`(`_+Int_`(lengthString(BL),OFFSET),#token("55","Int"))),BL),STR)
					eval1289,
					varSTR,
					config, -1)
				if err1288 != nil {
					return m.NoResult, err1288
				}
				return eval1288, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeLengthAux", args: []m.K{c1, c2, c3}}
}

func evalIsContractCodeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1153
	// source: ? @?
	// {| rule isContractCodeCell(`<contractCode>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractCodeXgt && len(kapp0.List) == 1 { // `<contractCode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1294, err1294 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err1294 != nil {
			return m.NoResult, err1294
		}
		if m.IsTrue(eval1294) {
			// RHS
			traceRuleApply("FUNC", 1153, "{| rule isContractCodeCell(`<contractCode>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1154
	// source: ? @?
	// {| rule isContractCodeCell(#KToken(#token("ContractCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1154, "{| rule isContractCodeCell(#KToken(#token(\"ContractCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1155
	// source: ? @?
	// {| rule isContractCodeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1155, "{| rule isContractCodeCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashcallAddressAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1156
	// source: iele.k @1786
	// {| rule #callAddressAux(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_61),_62),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,`_+Int_`(IDX,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isFunctionParameters(_61)),isIeleName(NAME)),isBlocks(_62)),isIeleName(FUNC)),`_=/=K_`(NAME,FUNC)) ensures #token("true","Bool") [UNIQUE_ID(f927dee67828315369aaad5047f6eaee86b0b59516421dd2a5878cb29c0d0d7f) contentStartColumn(10) contentStartLine(1786) org.kframework.attributes.Location(Location(1786,10,1787,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_61),_62),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_61),_62)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_61)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(NAME)
					varNAME := kapp3.List[0] // lhs KVariable NAME
					varXu61 := kapp2.List[1] // lhs KVariable _61
					varXu62 := kapp1.List[1] // lhs KVariable _62
					varREST := kapp0.List[1] // lhs KVariable REST
					varFUNC := c2 // lhs KVariable FUNC
					if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval1295, err1295 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(REST)
							varREST,
							config, -1)
						if err1295 != nil {
							return m.NoResult, err1295
						}
						eval1296, err1296 := evalIsFunctionParameters( // isFunctionParameters(_61)
							varXu61,
							config, -1)
						if err1296 != nil {
							return m.NoResult, err1296
						}
						eval1297, err1297 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err1297 != nil {
							return m.NoResult, err1297
						}
						eval1298, err1298 := evalIsBlocks( // isBlocks(_62)
							varXu62,
							config, -1)
						if err1298 != nil {
							return m.NoResult, err1298
						}
						eval1299, err1299 := evalIsIeleName( // isIeleName(FUNC)
							varFUNC,
							config, -1)
						if err1299 != nil {
							return m.NoResult, err1299
						}
						eval1300, err1300 := evalXuXeqXslashXeqKXu( // `_=/=K_`(NAME,FUNC)
							varNAME,
							varFUNC,
							config, -1)
						if err1300 != nil {
							return m.NoResult, err1300
						}
						if (((((m.IsTrue(eval1295) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
						   (m.IsTrue(eval1296))) &&
						   (m.IsTrue(eval1297))) &&
						   (m.IsTrue(eval1298))) &&
						   (m.IsTrue(eval1299))) &&
						   (m.IsTrue(eval1300)) {
							// RHS
							traceRuleApply("FUNC", 1156, "{| rule #callAddressAux(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_61),_62),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,`_+Int_`(IDX,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isFunctionParameters(_61)),isIeleName(NAME)),isBlocks(_62)),isIeleName(FUNC)),`_=/=K_`(NAME,FUNC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f927dee67828315369aaad5047f6eaee86b0b59516421dd2a5878cb29c0d0d7f) contentStartColumn(10) contentStartLine(1786) org.kframework.attributes.Location(Location(1786,10,1787,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
							eval1302, err1302 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
								varIDX,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err1302 != nil {
								return m.NoResult, err1302
							}
							eval1301, err1301 := evalXhashcallAddressAux( // #callAddressAux(REST,FUNC,`_+Int_`(IDX,#token("1","Int")))
								varREST,
								varFUNC,
								eval1302,
								config, -1)
							if err1301 != nil {
								return m.NoResult, err1301
							}
							return eval1301, nil
						}
					}
				}
			}
		}
	}

	// rule #1157
	// source: iele.k @1782
	// {| rule #callAddressAux(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_44),_45),REST),NAME,IDX)=>IDX requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isIeleName(NAME)),isFunctionParameters(_44)),isBlocks(_45)) ensures #token("true","Bool") [UNIQUE_ID(92a69f2676e039c86c327a96ecfec44711d8e52a78f667e56bf2267b449b3afc) contentStartColumn(10) contentStartLine(1782) org.kframework.attributes.Location(Location(1782,10,1782,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_44),_45),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_44),_45)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_44)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(NAME)
					varNAME := kapp3.List[0] // lhs KVariable NAME
					varXu44 := kapp2.List[1] // lhs KVariable _44
					varXu45 := kapp1.List[1] // lhs KVariable _45
					varREST := kapp0.List[1] // lhs KVariable REST
					if c2.Equals(varNAME) { // lhs KVariable, which reappears:NAME
						if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval1303, err1303 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(REST)
								varREST,
								config, -1)
							if err1303 != nil {
								return m.NoResult, err1303
							}
							eval1304, err1304 := evalIsIeleName( // isIeleName(NAME)
								varNAME,
								config, -1)
							if err1304 != nil {
								return m.NoResult, err1304
							}
							eval1305, err1305 := evalIsFunctionParameters( // isFunctionParameters(_44)
								varXu44,
								config, -1)
							if err1305 != nil {
								return m.NoResult, err1305
							}
							eval1306, err1306 := evalIsBlocks( // isBlocks(_45)
								varXu45,
								config, -1)
							if err1306 != nil {
								return m.NoResult, err1306
							}
							if (((m.IsTrue(eval1303) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
							   (m.IsTrue(eval1304))) &&
							   (m.IsTrue(eval1305))) &&
							   (m.IsTrue(eval1306)) {
								// RHS
								traceRuleApply("FUNC", 1157, "{| rule #callAddressAux(topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_44),_45),REST),NAME,IDX)=>IDX requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isIeleName(NAME)),isFunctionParameters(_44)),isBlocks(_45)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(92a69f2676e039c86c327a96ecfec44711d8e52a78f667e56bf2267b449b3afc) contentStartColumn(10) contentStartLine(1782) org.kframework.attributes.Location(Location(1782,10,1782,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								return varIDX, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1158
	// source: iele.k @1783
	// {| rule #callAddressAux(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("init","IeleName")),_46),_47),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isBlocks(_47)),isFunctionParameters(_46)),isIeleName(FUNC)) ensures #token("true","Bool") [UNIQUE_ID(a8bf047bdece3fd34e531756e77539ef13c6ec5c9782c6675f8963445b5a96c6) contentStartColumn(10) contentStartLine(1783) org.kframework.attributes.Location(Location(1783,10,1783,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("init","IeleName")),_46),_47),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("init","IeleName")),_46),_47)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("init","IeleName")),_46)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(#token("init","IeleName"))
					if kapp3.List[0].Equals(&m.KToken{Sort: m.SortIeleName, Value: "init"}) { // #token("init","IeleName")
						varXu46 := kapp2.List[1] // lhs KVariable _46
						varXu47 := kapp1.List[1] // lhs KVariable _47
						varREST := kapp0.List[1] // lhs KVariable REST
						varFUNC := c2 // lhs KVariable FUNC
						if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval1307, err1307 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(REST)
								varREST,
								config, -1)
							if err1307 != nil {
								return m.NoResult, err1307
							}
							eval1308, err1308 := evalIsBlocks( // isBlocks(_47)
								varXu47,
								config, -1)
							if err1308 != nil {
								return m.NoResult, err1308
							}
							eval1309, err1309 := evalIsFunctionParameters( // isFunctionParameters(_46)
								varXu46,
								config, -1)
							if err1309 != nil {
								return m.NoResult, err1309
							}
							eval1310, err1310 := evalIsIeleName( // isIeleName(FUNC)
								varFUNC,
								config, -1)
							if err1310 != nil {
								return m.NoResult, err1310
							}
							if (((m.IsTrue(eval1307) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
							   (m.IsTrue(eval1308))) &&
							   (m.IsTrue(eval1309))) &&
							   (m.IsTrue(eval1310)) {
								// RHS
								traceRuleApply("FUNC", 1158, "{| rule #callAddressAux(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"init\",\"IeleName\")),_46),_47),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isBlocks(_47)),isFunctionParameters(_46)),isIeleName(FUNC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a8bf047bdece3fd34e531756e77539ef13c6ec5c9782c6675f8963445b5a96c6) contentStartColumn(10) contentStartLine(1783) org.kframework.attributes.Location(Location(1783,10,1783,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval1311, err1311 := evalXhashcallAddressAux( // #callAddressAux(REST,FUNC,IDX)
									varREST,
									varFUNC,
									varIDX,
									config, -1)
								if err1311 != nil {
									return m.NoResult, err1311
								}
								return eval1311, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1159
	// source: iele.k @1789
	// {| rule #callAddressAux(`.List{"topLevelDefinitionList"}`(.KList),_93,_94)=>#token("0","Int") requires `_andBool_`(isInt(_94),isIeleName(_93)) ensures #token("true","Bool") [UNIQUE_ID(3fd5e9880689ab9961175b477d0ebd3c03e46636c5b152cf184195472f127b07) contentStartColumn(10) contentStartLine(1789) org.kframework.attributes.Location(Location(1789,10,1789,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"topLevelDefinitionList"}`(.KList)
		varXu93 := c2 // lhs KVariable _93
		if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1312, err1312 := evalIsIeleName( // isIeleName(_93)
				varXu93,
				config, -1)
			if err1312 != nil {
				return m.NoResult, err1312
			}
			if /* rhs precomputed isInt(_94) */ /* && */
			   m.IsTrue(eval1312) {
				// RHS
				traceRuleApply("FUNC", 1159, "{| rule #callAddressAux(`.List{\"topLevelDefinitionList\"}`(.KList),_93,_94)=>#token(\"0\",\"Int\") requires `_andBool_`(isInt(_94),isIeleName(_93)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3fd5e9880689ab9961175b477d0ebd3c03e46636c5b152cf184195472f127b07) contentStartColumn(10) contentStartLine(1789) org.kframework.attributes.Location(Location(1789,10,1789,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("0"), nil
			}
		}
	}

	// rule #1160
	// source: iele.k @1784
	// {| rule #callAddressAux(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_68),_69),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,`_+Int_`(IDX,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_69),isTopLevelDefinitions(REST)),isInt(IDX)),isFunctionParameters(_68)),isIeleName(NAME)),isIeleName(FUNC)),`_=/=K_`(NAME,#token("init","IeleName"))) ensures #token("true","Bool") [UNIQUE_ID(b812afe1b91e474a7271726d7c17eb6f5ec429f1e4c9b1c77018d97e5b8d5a92) contentStartColumn(10) contentStartLine(1784) org.kframework.attributes.Location(Location(1784,10,1785,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_68),_69),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp1.List) == 2 { // `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_68),_69)
			if kapp2, t := kapp1.List[0].(*m.KApply); t && kapp2.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp2.List) == 2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_68)
				if kapp3, t := kapp2.List[0].(*m.KApply); t && kapp3.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `@__IELE-COMMON`(NAME)
					varNAME := kapp3.List[0] // lhs KVariable NAME
					varXu68 := kapp2.List[1] // lhs KVariable _68
					varXu69 := kapp1.List[1] // lhs KVariable _69
					varREST := kapp0.List[1] // lhs KVariable REST
					varFUNC := c2 // lhs KVariable FUNC
					if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval1313, err1313 := evalIsBlocks( // isBlocks(_69)
							varXu69,
							config, -1)
						if err1313 != nil {
							return m.NoResult, err1313
						}
						eval1314, err1314 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(REST)
							varREST,
							config, -1)
						if err1314 != nil {
							return m.NoResult, err1314
						}
						eval1315, err1315 := evalIsFunctionParameters( // isFunctionParameters(_68)
							varXu68,
							config, -1)
						if err1315 != nil {
							return m.NoResult, err1315
						}
						eval1316, err1316 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err1316 != nil {
							return m.NoResult, err1316
						}
						eval1317, err1317 := evalIsIeleName( // isIeleName(FUNC)
							varFUNC,
							config, -1)
						if err1317 != nil {
							return m.NoResult, err1317
						}
						eval1318, err1318 := evalXuXeqXslashXeqKXu( // `_=/=K_`(NAME,#token("init","IeleName"))
							varNAME,
							/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "init"},
							config, -1)
						if err1318 != nil {
							return m.NoResult, err1318
						}
						if (((((m.IsTrue(eval1313)) &&
						   (m.IsTrue(eval1314)) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
						   (m.IsTrue(eval1315))) &&
						   (m.IsTrue(eval1316))) &&
						   (m.IsTrue(eval1317))) &&
						   (m.IsTrue(eval1318)) {
							// RHS
							traceRuleApply("FUNC", 1160, "{| rule #callAddressAux(topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),_68),_69),REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,`_+Int_`(IDX,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_69),isTopLevelDefinitions(REST)),isInt(IDX)),isFunctionParameters(_68)),isIeleName(NAME)),isIeleName(FUNC)),`_=/=K_`(NAME,#token(\"init\",\"IeleName\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b812afe1b91e474a7271726d7c17eb6f5ec429f1e4c9b1c77018d97e5b8d5a92) contentStartColumn(10) contentStartLine(1784) org.kframework.attributes.Location(Location(1784,10,1785,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
							eval1320, err1320 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
								varIDX,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err1320 != nil {
								return m.NoResult, err1320
							}
							eval1319, err1319 := evalXhashcallAddressAux( // #callAddressAux(REST,FUNC,`_+Int_`(IDX,#token("1","Int")))
								varREST,
								varFUNC,
								eval1320,
								config, -1)
							if err1319 != nil {
								return m.NoResult, err1319
							}
							return eval1319, nil
						}
					}
				}
			}
		}
	}

	// rule #1161
	// source: iele.k @1788
	// {| rule #callAddressAux(topLevelDefinitionList(_100,REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isTopLevelDefinition(_100)),isIeleName(FUNC)) ensures #token("true","Bool") [UNIQUE_ID(110e96c00a5c70df5607ee8cf6f131527f253cec0b591517ea715c7786dc0db6) contentStartColumn(10) contentStartLine(1788) org.kframework.attributes.Location(Location(1788,10,1788,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(_100,REST)
		varXu100 := kapp0.List[0] // lhs KVariable _100
		varREST := kapp0.List[1] // lhs KVariable REST
		varFUNC := c2 // lhs KVariable FUNC
		if varIDX, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1321, err1321 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(REST)
				varREST,
				config, -1)
			if err1321 != nil {
				return m.NoResult, err1321
			}
			eval1322, err1322 := evalIsTopLevelDefinition( // isTopLevelDefinition(_100)
				varXu100,
				config, -1)
			if err1322 != nil {
				return m.NoResult, err1322
			}
			eval1323, err1323 := evalIsIeleName( // isIeleName(FUNC)
				varFUNC,
				config, -1)
			if err1323 != nil {
				return m.NoResult, err1323
			}
			if ((m.IsTrue(eval1321) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
			   (m.IsTrue(eval1322))) &&
			   (m.IsTrue(eval1323)) {
				// RHS
				traceRuleApply("FUNC", 1161, "{| rule #callAddressAux(topLevelDefinitionList(_100,REST),FUNC,IDX)=>#callAddressAux(REST,FUNC,IDX) requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(REST),isInt(IDX)),isTopLevelDefinition(_100)),isIeleName(FUNC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(110e96c00a5c70df5607ee8cf6f131527f253cec0b591517ea715c7786dc0db6) contentStartColumn(10) contentStartLine(1788) org.kframework.attributes.Location(Location(1788,10,1788,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval1324, err1324 := evalXhashcallAddressAux( // #callAddressAux(REST,FUNC,IDX)
					varREST,
					varFUNC,
					varIDX,
					config, -1)
				if err1324 != nil {
					return m.NoResult, err1324
				}
				return eval1324, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcallAddressAux", args: []m.K{c1, c2, c3}}
}

func evalIsHexConstant(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1162
	// source: ? @?
	// {| rule isHexConstant(#KToken(#token("HexConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortHexConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1162, "{| rule isHexConstant(#KToken(#token(\"HexConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1163
	// source: ? @?
	// {| rule isHexConstant(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1163, "{| rule isHexConstant(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalID2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.token2string
	lbl := m.LblID2String // Id2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.token2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.token2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalID2String", args: []m.K{c}}
}

func evalInitJumpTableCell(config m.K, guard int) (m.K, error) {
	// rule #1164
	// source: ? @?
	// {| rule initJumpTableCell(.KList)=>`<jumpTable>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(03efae6a4acc4f7f0d325a415961192f22aacfe55f066d06bdb22ae3e2cabb0c) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1164, "{| rule initJumpTableCell(.KList)=>`<jumpTable>`(`.Map`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(03efae6a4acc4f7f0d325a415961192f22aacfe55f066d06bdb22ae3e2cabb0c) initializer()] |}")
	eval1325, err1325 := evalXdotMap(config, -1) // `.Map`(.KList)
	if err1325 != nil {
		return m.NoResult, err1325
	}
	return &m.KApply{Label: m.LblXltjumpTableXgt, List: []m.K{ // as-is <jumpTable>
		eval1325,
	}}, nil

}

//var constInitJumpTableCell K = evalInitJumpTableCell(m.InternedBottom)

func evalIsCurrentContractCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1165
	// source: ? @?
	// {| rule isCurrentContractCellOpt(noCurrentContractCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCurrentContractCell && len(kapp0.List) == 0 { // noCurrentContractCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1165, "{| rule isCurrentContractCellOpt(noCurrentContractCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1166
	// source: ? @?
	// {| rule isCurrentContractCellOpt(#KToken(#token("CurrentContractCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentContractCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1166, "{| rule isCurrentContractCellOpt(#KToken(#token(\"CurrentContractCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1167
	// source: ? @?
	// {| rule isCurrentContractCellOpt(`<currentContract>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentContractXgt && len(kapp0.List) == 5 { // `<currentContract>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1326, err1326 := evalIsTypesCell( // isTypesCell(K0)
			varK0,
			config, -1)
		if err1326 != nil {
			return m.NoResult, err1326
		}
		eval1327, err1327 := evalIsContractNameCell( // isContractNameCell(K1)
			varK1,
			config, -1)
		if err1327 != nil {
			return m.NoResult, err1327
		}
		eval1328, err1328 := evalIsDeclaredContractsCell( // isDeclaredContractsCell(K2)
			varK2,
			config, -1)
		if err1328 != nil {
			return m.NoResult, err1328
		}
		eval1329, err1329 := evalIsFunctionBodiesCell( // isFunctionBodiesCell(K3)
			varK3,
			config, -1)
		if err1329 != nil {
			return m.NoResult, err1329
		}
		eval1330, err1330 := evalIsCurrentFunctionCell( // isCurrentFunctionCell(K4)
			varK4,
			config, -1)
		if err1330 != nil {
			return m.NoResult, err1330
		}
		if ((((m.IsTrue(eval1326)) &&
		   (m.IsTrue(eval1327))) &&
		   (m.IsTrue(eval1328))) &&
		   (m.IsTrue(eval1329))) &&
		   (m.IsTrue(eval1330)) {
			// RHS
			traceRuleApply("FUNC", 1167, "{| rule isCurrentContractCellOpt(`<currentContract>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1168
	// source: ? @?
	// {| rule isCurrentContractCellOpt(#KToken(#token("CurrentContractCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentContractCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1168, "{| rule isCurrentContractCellOpt(#KToken(#token(\"CurrentContractCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1169
	// source: ? @?
	// {| rule isCurrentContractCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1169, "{| rule isCurrentContractCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMapXcolonchoice(c m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.choice
	lbl := m.LblMapXcolonchoice // Map:choice
	sort := m.SortKItem
	if hookRes, hookErr := mapHooks.choice(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.choice, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMapXcolonchoice", args: []m.K{c}}
}

func evalIsMessageCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1170
	// source: ? @?
	// {| rule isMessageCell(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessageXgt && len(kapp0.List) == 10 { // `<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		// REQUIRES
		eval1331, err1331 := evalIsMsgIDCell( // isMsgIDCell(K0)
			varK0,
			config, -1)
		if err1331 != nil {
			return m.NoResult, err1331
		}
		eval1332, err1332 := evalIsTxNonceCell( // isTxNonceCell(K1)
			varK1,
			config, -1)
		if err1332 != nil {
			return m.NoResult, err1332
		}
		eval1333, err1333 := evalIsTxGasPriceCell( // isTxGasPriceCell(K2)
			varK2,
			config, -1)
		if err1333 != nil {
			return m.NoResult, err1333
		}
		eval1334, err1334 := evalIsTxGasLimitCell( // isTxGasLimitCell(K3)
			varK3,
			config, -1)
		if err1334 != nil {
			return m.NoResult, err1334
		}
		eval1335, err1335 := evalIsSendtoCell( // isSendtoCell(K4)
			varK4,
			config, -1)
		if err1335 != nil {
			return m.NoResult, err1335
		}
		eval1336, err1336 := evalIsFuncCell( // isFuncCell(K5)
			varK5,
			config, -1)
		if err1336 != nil {
			return m.NoResult, err1336
		}
		eval1337, err1337 := evalIsValueCell( // isValueCell(K6)
			varK6,
			config, -1)
		if err1337 != nil {
			return m.NoResult, err1337
		}
		eval1338, err1338 := evalIsFromCell( // isFromCell(K7)
			varK7,
			config, -1)
		if err1338 != nil {
			return m.NoResult, err1338
		}
		eval1339, err1339 := evalIsDataCell( // isDataCell(K8)
			varK8,
			config, -1)
		if err1339 != nil {
			return m.NoResult, err1339
		}
		eval1340, err1340 := evalIsArgsCell( // isArgsCell(K9)
			varK9,
			config, -1)
		if err1340 != nil {
			return m.NoResult, err1340
		}
		if (((((((((m.IsTrue(eval1331)) &&
		   (m.IsTrue(eval1332))) &&
		   (m.IsTrue(eval1333))) &&
		   (m.IsTrue(eval1334))) &&
		   (m.IsTrue(eval1335))) &&
		   (m.IsTrue(eval1336))) &&
		   (m.IsTrue(eval1337))) &&
		   (m.IsTrue(eval1338))) &&
		   (m.IsTrue(eval1339))) &&
		   (m.IsTrue(eval1340)) {
			// RHS
			traceRuleApply("FUNC", 1170, "{| rule isMessageCell(`<message>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMsgIDCell(K0),isTxNonceCell(K1)),isTxGasPriceCell(K2)),isTxGasLimitCell(K3)),isSendtoCell(K4)),isFuncCell(K5)),isValueCell(K6)),isFromCell(K7)),isDataCell(K8)),isArgsCell(K9)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1171
	// source: ? @?
	// {| rule isMessageCell(#KToken(#token("MessageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1171, "{| rule isMessageCell(#KToken(#token(\"MessageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1172
	// source: ? @?
	// {| rule isMessageCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1172, "{| rule isMessageCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPreviousGasCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1173
	// source: ? @?
	// {| rule isPreviousGasCell(`<previousGas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpreviousGasXgt && len(kapp0.List) == 1 { // `<previousGas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1173, "{| rule isPreviousGasCell(`<previousGas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1174
	// source: ? @?
	// {| rule isPreviousGasCell(#KToken(#token("PreviousGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPreviousGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1174, "{| rule isPreviousGasCell(#KToken(#token(\"PreviousGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1175
	// source: ? @?
	// {| rule isPreviousGasCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1175, "{| rule isPreviousGasCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTypesCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1176
	// source: ? @?
	// {| rule isTypesCell(#KToken(#token("TypesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1176, "{| rule isTypesCell(#KToken(#token(\"TypesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1177
	// source: ? @?
	// {| rule isTypesCell(`<types>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypesXgt && len(kapp0.List) == 1 { // `<types>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 1177, "{| rule isTypesCell(`<types>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1178
	// source: ? @?
	// {| rule isTypesCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1178, "{| rule isTypesCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsizeNames(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1179
	// source: well-formedness.k @140
	// {| rule #sizeNames(`.List{"localNameList"}`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2190f45abd6bc80329f69beb8a2823e2ba18bc2713d800b69a227067a9a9ab4a) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelocalNameListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"localNameList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1179, "{| rule #sizeNames(`.List{\"localNameList\"}`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2190f45abd6bc80329f69beb8a2823e2ba18bc2713d800b69a227067a9a9ab4a) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	// rule #1180
	// source: well-formedness.k @139
	// {| rule #sizeNames(I)=>I requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(f2cae67f3f586851055bb6e33b4dbe6422b4f696fc1b3c2d5967600a8ca61171) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 1180, "{| rule #sizeNames(I)=>I requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f2cae67f3f586851055bb6e33b4dbe6422b4f696fc1b3c2d5967600a8ca61171) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return varI, nil
	}

	// rule #1181
	// source: well-formedness.k @141
	// {| rule #sizeNames(localNameList(N,NAMES))=>`_+Int_`(#token("1","Int"),#sizeNames(NAMES)) requires `_andBool_`(isLocalNames(NAMES),isLocalName(N)) ensures #token("true","Bool") [UNIQUE_ID(0e765693748a668556dc407b67dce15eb97fca85e9f78abfdbd6e978c1750f96) contentStartColumn(10) contentStartLine(141) org.kframework.attributes.Location(Location(141,10,141,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLocalNameList && len(kapp0.List) == 2 { // localNameList(N,NAMES)
		varN := kapp0.List[0] // lhs KVariable N
		varNAMES := kapp0.List[1] // lhs KVariable NAMES
		// REQUIRES
		eval1341, err1341 := evalIsLocalNames( // isLocalNames(NAMES)
			varNAMES,
			config, -1)
		if err1341 != nil {
			return m.NoResult, err1341
		}
		eval1342, err1342 := evalIsLocalName( // isLocalName(N)
			varN,
			config, -1)
		if err1342 != nil {
			return m.NoResult, err1342
		}
		if (m.IsTrue(eval1341)) &&
		   (m.IsTrue(eval1342)) {
			// RHS
			traceRuleApply("FUNC", 1181, "{| rule #sizeNames(localNameList(N,NAMES))=>`_+Int_`(#token(\"1\",\"Int\"),#sizeNames(NAMES)) requires `_andBool_`(isLocalNames(NAMES),isLocalName(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e765693748a668556dc407b67dce15eb97fca85e9f78abfdbd6e978c1750f96) contentStartColumn(10) contentStartLine(141) org.kframework.attributes.Location(Location(141,10,141,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1344, err1344 := evalXhashsizeNames( // #sizeNames(NAMES)
				varNAMES,
				config, -1)
			if err1344 != nil {
				return m.NoResult, err1344
			}
			eval1343, err1343 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),#sizeNames(NAMES))
				/* rhs KToken */ m.NewIntFromString("1"),
				eval1344,
				config, -1)
			if err1343 != nil {
				return m.NoResult, err1343
			}
			return eval1343, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeNames", args: []m.K{c}}
}

func evalCxfer(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1182
	// source: iele-gas.k @765
	// {| rule `Cxfer`(SCHED,_21)=>#token("0","Int") requires `_andBool_`(isSchedule(SCHED),`_==Int_`(_21,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(38bfce0cab4c29c42dd7d4f0feff3ffa3c06fce54fc1af5164d3696c1dabf526) contentStartColumn(10) contentStartLine(765) org.kframework.attributes.Location(Location(765,10,765,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varXu21, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1345, err1345 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err1345 != nil {
				return m.NoResult, err1345
			}
			eval1346, err1346 := evalXuXeqXeqIntXu( // `_==Int_`(_21,#token("0","Int"))
				varXu21,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1346 != nil {
				return m.NoResult, err1346
			}
			if (m.IsTrue(eval1345)) &&
			   (m.IsTrue(eval1346)) {
				// RHS
				traceRuleApply("FUNC", 1182, "{| rule `Cxfer`(SCHED,_21)=>#token(\"0\",\"Int\") requires `_andBool_`(isSchedule(SCHED),`_==Int_`(_21,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(38bfce0cab4c29c42dd7d4f0feff3ffa3c06fce54fc1af5164d3696c1dabf526) contentStartColumn(10) contentStartLine(765) org.kframework.attributes.Location(Location(765,10,765,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("0"), nil
			}
		}
	}

	// rule #1183
	// source: iele-gas.k @766
	// {| rule `Cxfer`(SCHED,N)=>`_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(N)),`_=/=K_`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(a99dda0ecd834f0ed8d43964a489ca80b8d9050dd34ab961b0b0aeecd9ae56ed) contentStartColumn(10) contentStartLine(766) org.kframework.attributes.Location(Location(766,10,766,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1347, err1347 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err1347 != nil {
				return m.NoResult, err1347
			}
			eval1348, err1348 := evalXuXeqXslashXeqKXu( // `_=/=K_`(N,#token("0","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1348 != nil {
				return m.NoResult, err1348
			}
			if (m.IsTrue(eval1347) /* && */ /* rhs precomputed isInt(N) */ ) &&
			   (m.IsTrue(eval1348)) {
				// RHS
				traceRuleApply("FUNC", 1183, "{| rule `Cxfer`(SCHED,N)=>`_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(N)),`_=/=K_`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a99dda0ecd834f0ed8d43964a489ca80b8d9050dd34ab961b0b0aeecd9ae56ed) contentStartColumn(10) contentStartLine(766) org.kframework.attributes.Location(Location(766,10,766,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1349, err1349 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblGcallvalueXuIELEXhyphenGAS, List: []m.K{ // as-is Gcallvalue_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err1349 != nil {
					return m.NoResult, err1349
				}
				return eval1349, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCxfer", args: []m.K{c1, c2}}
}

func evalXuXplusBytesXuXuBYTESXhyphenHOOKED(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.concat
	lbl := m.LblXuXplusBytesXuXuBYTESXhyphenHOOKED // _+Bytes__BYTES-HOOKED
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusBytesXuXuBYTESXhyphenHOOKED", args: []m.K{c1, c2}}
}

func evalIsFuncLabelsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1184
	// source: ? @?
	// {| rule isFuncLabelsCell(`<funcLabels>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncLabelsXgt && len(kapp0.List) == 1 { // `<funcLabels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 1184, "{| rule isFuncLabelsCell(`<funcLabels>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1185
	// source: ? @?
	// {| rule isFuncLabelsCell(#KToken(#token("FuncLabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1185, "{| rule isFuncLabelsCell(#KToken(#token(\"FuncLabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1186
	// source: ? @?
	// {| rule isFuncLabelsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1186, "{| rule isFuncLabelsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBool(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// rule #1187
	// source: ? @?
	// {| rule isBool(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1187, "{| rule isBool(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1188
	// source: ? @?
	// {| rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1188, "{| rule isBool(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitValueCell(config m.K, guard int) (m.K, error) {
	// rule #1189
	// source: ? @?
	// {| rule initValueCell(.KList)=>`<value>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fe8076fe25b63d73233f157d8b983af8542c1e7a532d6b7725149d35aef90548) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1189, "{| rule initValueCell(.KList)=>`<value>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fe8076fe25b63d73233f157d8b983af8542c1e7a532d6b7725149d35aef90548) initializer()] |}")
	return &m.KApply{Label: m.LblXltvalueXgt, List: []m.K{ // as-is <value>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitValueCell K = evalInitValueCell(m.InternedBottom)

func evalXtildeIntXuXuINT(c m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.not
	lbl := m.LblXtildeIntXuXuINT // ~Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.not(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.not, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXtildeIntXuXuINT", args: []m.K{c}}
}

func evalInitCurrentMemoryCell(config m.K, guard int) (m.K, error) {
	// rule #1190
	// source: ? @?
	// {| rule initCurrentMemoryCell(.KList)=>`<currentMemory>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf0f7987302fa256b5348bf1be860b4b3c7e3530dc024a54417f8cbf3958685e) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1190, "{| rule initCurrentMemoryCell(.KList)=>`<currentMemory>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cf0f7987302fa256b5348bf1be860b4b3c7e3530dc024a54417f8cbf3958685e) initializer()] |}")
	return &m.KApply{Label: m.LblXltcurrentMemoryXgt, List: []m.K{ // as-is <currentMemory>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitCurrentMemoryCell K = evalInitCurrentMemoryCell(m.InternedBottom)

func evalOrdChar(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.ord
	lbl := m.LblOrdChar // ordChar
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.ord(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.ord, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalOrdChar", args: []m.K{c}}
}

func evalInitMsgIDCell(config m.K, guard int) (m.K, error) {
	// rule #1191
	// source: ? @?
	// {| rule initMsgIDCell(.KList)=>`<msgID>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(06013610bc4fe30487e0f8991a90c0be93baa6c4d7aaebde2829f70e018def8f) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1191, "{| rule initMsgIDCell(.KList)=>`<msgID>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(06013610bc4fe30487e0f8991a90c0be93baa6c4d7aaebde2829f70e018def8f) initializer()] |}")
	return &m.KApply{Label: m.LblXltmsgIDXgt, List: []m.K{ // as-is <msgID>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitMsgIDCell K = evalInitMsgIDCell(m.InternedBottom)

func evalInitIDCell(config m.K, guard int) (m.K, error) {
	// rule #1192
	// source: ? @?
	// {| rule initIdCell(.KList)=>`<id>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7207e84cf7af0adc5c4567eaebcf001d711aeea47bdf2a5f9f55f1abdfe8f516) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1192, "{| rule initIdCell(.KList)=>`<id>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7207e84cf7af0adc5c4567eaebcf001d711aeea47bdf2a5f9f55f1abdfe8f516) initializer()] |}")
	return &m.KApply{Label: m.LblXltidXgt, List: []m.K{ // as-is <id>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitIDCell K = evalInitIDCell(m.InternedBottom)

func evalIntSizes(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1193
	// source: data.k @156
	// {| rule intSizes(operandList(I,INTS))=>`_+Int_`(intSize(I),intSizes(INTS)) requires `_andBool_`(isInt(I),isInts(INTS)) ensures #token("true","Bool") [UNIQUE_ID(c5f592d139121e156ac6e8315acddf57e3d192677cfec38dc7d1517124c290e2) contentStartColumn(10) contentStartLine(156) org.kframework.attributes.Location(Location(156,10,156,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(I,INTS)
		if varI, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varINTS := kapp0.List[1] // lhs KVariable INTS
			// REQUIRES
			eval1350, err1350 := evalIsInts( // isInts(INTS)
				varINTS,
				config, -1)
			if err1350 != nil {
				return m.NoResult, err1350
			}
			if /* rhs precomputed isInt(I) */ /* && */
			   m.IsTrue(eval1350) {
				// RHS
				traceRuleApply("FUNC", 1193, "{| rule intSizes(operandList(I,INTS))=>`_+Int_`(intSize(I),intSizes(INTS)) requires `_andBool_`(isInt(I),isInts(INTS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c5f592d139121e156ac6e8315acddf57e3d192677cfec38dc7d1517124c290e2) contentStartColumn(10) contentStartLine(156) org.kframework.attributes.Location(Location(156,10,156,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1352, err1352 := evalIntSize( // intSize(I)
					varI,
					config, -1)
				if err1352 != nil {
					return m.NoResult, err1352
				}
				eval1353, err1353 := evalIntSizes( // intSizes(INTS)
					varINTS,
					config, -1)
				if err1353 != nil {
					return m.NoResult, err1353
				}
				eval1351, err1351 := evalXuXplusIntXu( // `_+Int_`(intSize(I),intSizes(INTS))
					eval1352,
					eval1353,
					config, -1)
				if err1351 != nil {
					return m.NoResult, err1351
				}
				return eval1351, nil
			}
		}
	}

	// rule #1194
	// source: data.k @155
	// {| rule intSizes(`.List{"operandList"}`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7cad964e1dc0478a89d4872107ee7a0ff273aeb06cbad6698823cc165889debb) contentStartColumn(10) contentStartLine(155) org.kframework.attributes.Location(Location(155,10,155,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1194, "{| rule intSizes(`.List{\"operandList\"}`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7cad964e1dc0478a89d4872107ee7a0ff273aeb06cbad6698823cc165889debb) contentStartColumn(10) contentStartLine(155) org.kframework.attributes.Location(Location(155,10,155,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	return m.NoResult, &stuckError{funcName: "evalIntSizes", args: []m.K{c}}
}

func evalInitKCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1195
	// source: ? @?
	// {| rule initKCell(Init)=>`<k>`(`Map:lookup`(Init,#token("$PGM","KConfigVar"))) requires isK(`Map:lookup`(Init,#token("$PGM","KConfigVar"))) ensures #token("true","Bool") [UNIQUE_ID(50df27554c5ef29c708c95aef0e887fc69a80c463e2a23a592466fc3e546fbce) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 1195, "{| rule initKCell(Init)=>`<k>`(`Map:lookup`(Init,#token(\"$PGM\",\"KConfigVar\"))) requires isK(`Map:lookup`(Init,#token(\"$PGM\",\"KConfigVar\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(50df27554c5ef29c708c95aef0e887fc69a80c463e2a23a592466fc3e546fbce) initializer()] |}")
		eval1354, err1354 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$PGM","KConfigVar"))
			varInit,
			/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$PGM"},
			config, -1)
		if err1354 != nil {
			return m.NoResult, err1354
		}
		return &m.KApply{Label: m.LblXltkXgt, List: []m.K{ // as-is <k>
			eval1354,
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInitKCell", args: []m.K{c}}
}

func evalIsDataCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1196
	// source: ? @?
	// {| rule isDataCell(`<data>`(K0))=>#token("true","Bool") requires isWordStack(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdataXgt && len(kapp0.List) == 1 { // `<data>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1355, err1355 := evalIsWordStack( // isWordStack(K0)
			varK0,
			config, -1)
		if err1355 != nil {
			return m.NoResult, err1355
		}
		if m.IsTrue(eval1355) {
			// RHS
			traceRuleApply("FUNC", 1196, "{| rule isDataCell(`<data>`(K0))=>#token(\"true\",\"Bool\") requires isWordStack(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1197
	// source: ? @?
	// {| rule isDataCell(#KToken(#token("DataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1197, "{| rule isDataCell(#KToken(#token(\"DataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1198
	// source: ? @?
	// {| rule isDataCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1198, "{| rule isDataCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBytesRange(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1199
	// source: data.k @362
	// {| rule bytesRange(B,I,J)=>padRightBytes(substrBytes(B,I,`minInt(_,_)_INT`(lengthBytes(B),`_+Int_`(I,J))),J,#token("0","Int")) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isInt(J)),isBytes(B)),`_<Int__INT`(I,lengthBytes(B))) ensures #token("true","Bool") [UNIQUE_ID(e43e7fbf406f2690c601b97a4acea53ae631f1029d2e61a67ee71fc849dd01a7) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,363,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varB, t := c1.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varJ, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1357, err1357 := evalLengthBytes( // lengthBytes(B)
					varB,
					config, -1)
				if err1357 != nil {
					return m.NoResult, err1357
				}
				eval1356, err1356 := evalXuXltIntXuXuINT( // `_<Int__INT`(I,lengthBytes(B))
					varI,
					eval1357,
					config, -1)
				if err1356 != nil {
					return m.NoResult, err1356
				}
				if /* rhs precomputed isInt(I) && isInt(J) && isBytes(B) */ /* && */
				   m.IsTrue(eval1356) {
					// RHS
					traceRuleApply("FUNC", 1199, "{| rule bytesRange(B,I,J)=>padRightBytes(substrBytes(B,I,`minInt(_,_)_INT`(lengthBytes(B),`_+Int_`(I,J))),J,#token(\"0\",\"Int\")) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isInt(J)),isBytes(B)),`_<Int__INT`(I,lengthBytes(B))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e43e7fbf406f2690c601b97a4acea53ae631f1029d2e61a67ee71fc849dd01a7) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,363,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1361, err1361 := evalLengthBytes( // lengthBytes(B)
						varB,
						config, -1)
					if err1361 != nil {
						return m.NoResult, err1361
					}
					eval1362, err1362 := evalXuXplusIntXu( // `_+Int_`(I,J)
						varI,
						varJ,
						config, -1)
					if err1362 != nil {
						return m.NoResult, err1362
					}
					eval1360, err1360 := evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(lengthBytes(B),`_+Int_`(I,J))
						eval1361,
						eval1362,
						config, -1)
					if err1360 != nil {
						return m.NoResult, err1360
					}
					eval1359, err1359 := evalSubstrBytes( // substrBytes(B,I,`minInt(_,_)_INT`(lengthBytes(B),`_+Int_`(I,J)))
						varB,
						varI,
						eval1360,
						config, -1)
					if err1359 != nil {
						return m.NoResult, err1359
					}
					eval1358, err1358 := evalPadRightBytes( // padRightBytes(substrBytes(B,I,`minInt(_,_)_INT`(lengthBytes(B),`_+Int_`(I,J))),J,#token("0","Int"))
						eval1359,
						varJ,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err1358 != nil {
						return m.NoResult, err1358
					}
					return eval1358, nil
				}
			}
		}
	}

	// rule #1200
	// source: data.k @364
	// {| rule bytesRange(B,I,J)=>padRightBytes(`.Bytes_BYTES-HOOKED`(.KList),J,#token("0","Int")) requires `_andBool_`(`_andBool_`(isInt(I),isInt(J)),isBytes(B)) ensures #token("true","Bool") [UNIQUE_ID(b52ba11fb8652673a8fd1159aaafd04b3f43307342b3ba3abfa25090be2e5bf1) contentStartColumn(10) contentStartLine(364) org.kframework.attributes.Location(Location(364,10,364,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if _, t := c1.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varJ, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(I) && isInt(J) && isBytes(B)
				// RHS
				traceRuleApply("FUNC", 1200, "{| rule bytesRange(B,I,J)=>padRightBytes(`.Bytes_BYTES-HOOKED`(.KList),J,#token(\"0\",\"Int\")) requires `_andBool_`(`_andBool_`(isInt(I),isInt(J)),isBytes(B)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b52ba11fb8652673a8fd1159aaafd04b3f43307342b3ba3abfa25090be2e5bf1) contentStartColumn(10) contentStartLine(364) org.kframework.attributes.Location(Location(364,10,364,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval1364, err1364 := evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
				if err1364 != nil {
					return m.NoResult, err1364
				}
				eval1363, err1363 := evalPadRightBytes( // padRightBytes(`.Bytes_BYTES-HOOKED`(.KList),J,#token("0","Int"))
					eval1364,
					varJ,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err1363 != nil {
					return m.NoResult, err1363
				}
				return eval1363, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalBytesRange", args: []m.K{c1, c2, c3}}
}

func evalIsNetworkCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1201
	// source: ? @?
	// {| rule isNetworkCellFragment(#KToken(#token("NetworkCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNetworkCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1201, "{| rule isNetworkCellFragment(#KToken(#token(\"NetworkCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1202
	// source: ? @?
	// {| rule isNetworkCellFragment(`<network>-fragment`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCellOpt(K0),isAccountsCellOpt(K1)),isTxOrderCellOpt(K2)),isTxPendingCellOpt(K3)),isMessagesCellOpt(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnetworkXgtXhyphenfragment && len(kapp0.List) == 5 { // `<network>-fragment`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1365, err1365 := evalIsActiveAccountsCellOpt( // isActiveAccountsCellOpt(K0)
			varK0,
			config, -1)
		if err1365 != nil {
			return m.NoResult, err1365
		}
		eval1366, err1366 := evalIsAccountsCellOpt( // isAccountsCellOpt(K1)
			varK1,
			config, -1)
		if err1366 != nil {
			return m.NoResult, err1366
		}
		eval1367, err1367 := evalIsTxOrderCellOpt( // isTxOrderCellOpt(K2)
			varK2,
			config, -1)
		if err1367 != nil {
			return m.NoResult, err1367
		}
		eval1368, err1368 := evalIsTxPendingCellOpt( // isTxPendingCellOpt(K3)
			varK3,
			config, -1)
		if err1368 != nil {
			return m.NoResult, err1368
		}
		eval1369, err1369 := evalIsMessagesCellOpt( // isMessagesCellOpt(K4)
			varK4,
			config, -1)
		if err1369 != nil {
			return m.NoResult, err1369
		}
		if ((((m.IsTrue(eval1365)) &&
		   (m.IsTrue(eval1366))) &&
		   (m.IsTrue(eval1367))) &&
		   (m.IsTrue(eval1368))) &&
		   (m.IsTrue(eval1369)) {
			// RHS
			traceRuleApply("FUNC", 1202, "{| rule isNetworkCellFragment(`<network>-fragment`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCellOpt(K0),isAccountsCellOpt(K1)),isTxOrderCellOpt(K2)),isTxPendingCellOpt(K3)),isMessagesCellOpt(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1203
	// source: ? @?
	// {| rule isNetworkCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1203, "{| rule isNetworkCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsStringBuffer(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BUFFER.StringBuffer
	if _, t := c.(*m.StringBuffer); t {
		return m.BoolTrue, nil
	}
	// rule #1204
	// source: ? @?
	// {| rule isStringBuffer(#KToken(#token("StringBuffer","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStringBuffer { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1204, "{| rule isStringBuffer(#KToken(#token(\"StringBuffer\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1205
	// source: ? @?
	// {| rule isStringBuffer(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1205, "{| rule isStringBuffer(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalRemoveAll(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.removeAll
	lbl := m.LblRemoveAll // removeAll
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.removeAll(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.removeAll, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalRemoveAll", args: []m.K{c1, c2}}
}

func evalXuandBoolXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.and
	lbl := m.LblXuandBoolXu // _andBool_
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.and(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.and, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1206
	// source: domains.k @303
	// {| rule `_andBool_`(B,#token("true","Bool"))=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(b598bf51d1c959b7112e06b7f85a391ee5a18108acd52bb65ea27ef0381ed0e0) contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolTrue) { // #token("true","Bool")
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1206, "{| rule `_andBool_`(B,#token(\"true\",\"Bool\"))=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b598bf51d1c959b7112e06b7f85a391ee5a18108acd52bb65ea27ef0381ed0e0) contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #1207
	// source: domains.k @304
	// {| rule `_andBool_`(#token("false","Bool"),_8)=>#token("false","Bool") requires isBool(_8) ensures #token("true","Bool") [UNIQUE_ID(e6ebe927ba416a1602679eb0166f22d394adf70452e0505c00f11c036a896253) contentStartColumn(8) contentStartLine(304) org.kframework.attributes.Location(Location(304,8,304,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if _, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(_8)
			// RHS
			traceRuleApply("FUNC", 1207, "{| rule `_andBool_`(#token(\"false\",\"Bool\"),_8)=>#token(\"false\",\"Bool\") requires isBool(_8) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e6ebe927ba416a1602679eb0166f22d394adf70452e0505c00f11c036a896253) contentStartColumn(8) contentStartLine(304) org.kframework.attributes.Location(Location(304,8,304,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #1208
	// source: domains.k @302
	// {| rule `_andBool_`(#token("true","Bool"),B)=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(cd0a9b340fae24c9a05126d8df860cb7145fc64875711e36efaa694085559dc0) contentStartColumn(8) contentStartLine(302) org.kframework.attributes.Location(Location(302,8,302,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		if varB, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1208, "{| rule `_andBool_`(#token(\"true\",\"Bool\"),B)=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd0a9b340fae24c9a05126d8df860cb7145fc64875711e36efaa694085559dc0) contentStartColumn(8) contentStartLine(302) org.kframework.attributes.Location(Location(302,8,302,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #1209
	// source: domains.k @305
	// {| rule `_andBool_`(_5,#token("false","Bool"))=>#token("false","Bool") requires isBool(_5) ensures #token("true","Bool") [UNIQUE_ID(1a7512841ede635d09556466797d23f3f3cec57fe0fb6a68ce0c3a1cccb0b68f) contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(_5)
			// RHS
			traceRuleApply("FUNC", 1209, "{| rule `_andBool_`(_5,#token(\"false\",\"Bool\"))=>#token(\"false\",\"Bool\") requires isBool(_5) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a7512841ede635d09556466797d23f3f3cec57fe0fb6a68ce0c3a1cccb0b68f) contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuandBoolXu", args: []m.K{c1, c2}}
}

func evalIsCallDepthCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1210
	// source: ? @?
	// {| rule isCallDepthCellOpt(`<callDepth>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDepthXgt && len(kapp0.List) == 1 { // `<callDepth>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1210, "{| rule isCallDepthCellOpt(`<callDepth>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1211
	// source: ? @?
	// {| rule isCallDepthCellOpt(noCallDepthCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallDepthCell && len(kapp0.List) == 0 { // noCallDepthCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1211, "{| rule isCallDepthCellOpt(noCallDepthCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1212
	// source: ? @?
	// {| rule isCallDepthCellOpt(#KToken(#token("CallDepthCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDepthCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1212, "{| rule isCallDepthCellOpt(#KToken(#token(\"CallDepthCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1213
	// source: ? @?
	// {| rule isCallDepthCellOpt(#KToken(#token("CallDepthCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDepthCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1213, "{| rule isCallDepthCellOpt(#KToken(#token(\"CallDepthCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1214
	// source: ? @?
	// {| rule isCallDepthCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1214, "{| rule isCallDepthCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalRlpEncodeInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1215
	// source: data.k @516
	// {| rule rlpEncodeInts(INTS)=>#rlpEncodeIntsAux(`.StringBuffer_STRING-BUFFER-HOOKED`(.KList),INTS) requires isInts(INTS) ensures #token("true","Bool") [UNIQUE_ID(3ac4d47c3754796b73c52a7646bf24e58f795362b79bc35013d186170a503f73) contentStartColumn(10) contentStartLine(516) org.kframework.attributes.Location(Location(516,10,516,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varINTS := c // lhs KVariable INTS
		// REQUIRES
		eval1370, err1370 := evalIsInts( // isInts(INTS)
			varINTS,
			config, -1)
		if err1370 != nil {
			return m.NoResult, err1370
		}
		if m.IsTrue(eval1370) {
			// RHS
			traceRuleApply("FUNC", 1215, "{| rule rlpEncodeInts(INTS)=>#rlpEncodeIntsAux(`.StringBuffer_STRING-BUFFER-HOOKED`(.KList),INTS) requires isInts(INTS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3ac4d47c3754796b73c52a7646bf24e58f795362b79bc35013d186170a503f73) contentStartColumn(10) contentStartLine(516) org.kframework.attributes.Location(Location(516,10,516,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1372, err1372 := evalXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED(config, -1) // `.StringBuffer_STRING-BUFFER-HOOKED`(.KList)
			if err1372 != nil {
				return m.NoResult, err1372
			}
			eval1371, err1371 := evalXhashrlpEncodeIntsAux( // #rlpEncodeIntsAux(`.StringBuffer_STRING-BUFFER-HOOKED`(.KList),INTS)
				eval1372,
				varINTS,
				config, -1)
			if err1371 != nil {
				return m.NoResult, err1371
			}
			return eval1371, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalRlpEncodeInts", args: []m.K{c}}
}

func evalIsProgramCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1216
	// source: ? @?
	// {| rule isProgramCell(`<program>`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramXgt && len(kapp0.List) == 6 { // `<program>`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval1373, err1373 := evalIsFunctionsCell( // isFunctionsCell(K0)
			varK0,
			config, -1)
		if err1373 != nil {
			return m.NoResult, err1373
		}
		eval1374, err1374 := evalIsFuncIDsCell( // isFuncIdsCell(K1)
			varK1,
			config, -1)
		if err1374 != nil {
			return m.NoResult, err1374
		}
		eval1375, err1375 := evalIsFuncLabelsCell( // isFuncLabelsCell(K2)
			varK2,
			config, -1)
		if err1375 != nil {
			return m.NoResult, err1375
		}
		eval1376, err1376 := evalIsExportedCell( // isExportedCell(K3)
			varK3,
			config, -1)
		if err1376 != nil {
			return m.NoResult, err1376
		}
		eval1377, err1377 := evalIsProgramSizeCell( // isProgramSizeCell(K4)
			varK4,
			config, -1)
		if err1377 != nil {
			return m.NoResult, err1377
		}
		eval1378, err1378 := evalIsContractCodeCell( // isContractCodeCell(K5)
			varK5,
			config, -1)
		if err1378 != nil {
			return m.NoResult, err1378
		}
		if (((((m.IsTrue(eval1373)) &&
		   (m.IsTrue(eval1374))) &&
		   (m.IsTrue(eval1375))) &&
		   (m.IsTrue(eval1376))) &&
		   (m.IsTrue(eval1377))) &&
		   (m.IsTrue(eval1378)) {
			// RHS
			traceRuleApply("FUNC", 1216, "{| rule isProgramCell(`<program>`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFunctionsCell(K0),isFuncIdsCell(K1)),isFuncLabelsCell(K2)),isExportedCell(K3)),isProgramSizeCell(K4)),isContractCodeCell(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1217
	// source: ? @?
	// {| rule isProgramCell(#KToken(#token("ProgramCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1217, "{| rule isProgramCell(#KToken(#token(\"ProgramCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1218
	// source: ? @?
	// {| rule isProgramCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1218, "{| rule isProgramCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsUnlabeledBlock(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1219
	// source: ? @?
	// {| rule isUnlabeledBlock(`.List{"instructionList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"instructionList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1219, "{| rule isUnlabeledBlock(`.List{\"instructionList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1220
	// source: ? @?
	// {| rule isUnlabeledBlock(#KToken(#token("UnlabeledBlock","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortUnlabeledBlock { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1220, "{| rule isUnlabeledBlock(#KToken(#token(\"UnlabeledBlock\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1221
	// source: ? @?
	// {| rule isUnlabeledBlock(instructionList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInstruction(K0),isInstructions(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblInstructionList && len(kapp0.List) == 2 { // instructionList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1379, err1379 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err1379 != nil {
			return m.NoResult, err1379
		}
		eval1380, err1380 := evalIsInstructions( // isInstructions(K1)
			varK1,
			config, -1)
		if err1380 != nil {
			return m.NoResult, err1380
		}
		if (m.IsTrue(eval1379)) &&
		   (m.IsTrue(eval1380)) {
			// RHS
			traceRuleApply("FUNC", 1221, "{| rule isUnlabeledBlock(instructionList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInstruction(K0),isInstructions(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1222
	// source: ? @?
	// {| rule isUnlabeledBlock(#KToken(#token("Instructions","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructions { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1222, "{| rule isUnlabeledBlock(#KToken(#token(\"Instructions\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1223
	// source: ? @?
	// {| rule isUnlabeledBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1223, "{| rule isUnlabeledBlock(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsShiftInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1224
	// source: ? @?
	// {| rule isShiftInst(#KToken(#token("ShiftInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortShiftInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1224, "{| rule isShiftInst(#KToken(#token(\"ShiftInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1225
	// source: ? @?
	// {| rule isShiftInst(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=shift_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1381, err1381 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1381 != nil {
			return m.NoResult, err1381
		}
		eval1382, err1382 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1382 != nil {
			return m.NoResult, err1382
		}
		eval1383, err1383 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1383 != nil {
			return m.NoResult, err1383
		}
		if ((m.IsTrue(eval1381)) &&
		   (m.IsTrue(eval1382))) &&
		   (m.IsTrue(eval1383)) {
			// RHS
			traceRuleApply("FUNC", 1225, "{| rule isShiftInst(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1226
	// source: ? @?
	// {| rule isShiftInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1226, "{| rule isShiftInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCextra(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, config m.K, guard int) (m.K, error) {
	// rule #1227
	// source: iele-gas.k @763
	// {| rule `Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)=>`_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED),`Cnew`(SCHED,ISEMPTY,VALUE)),`Cxfer`(SCHED,VALUE)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),`_+Int_`(RETS,ARGS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(e26fbccdf0d7f0b8ca03609624aa2db41878d24299b30932fae453a425c2c4dc) contentStartColumn(10) contentStartLine(763) org.kframework.attributes.Location(Location(763,10,763,174)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varISEMPTY, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			if varVALUE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varRETS, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varARGS, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval1384, err1384 := evalIsSchedule( // isSchedule(SCHED)
							varSCHED,
							config, -1)
						if err1384 != nil {
							return m.NoResult, err1384
						}
						if /* rhs precomputed isBool(ISEMPTY) && isInt(VALUE) */ /* && */
						   m.IsTrue(eval1384) /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(ARGS) */  {
							// RHS
							traceRuleApply("FUNC", 1227, "{| rule `Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)=>`_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED),`Cnew`(SCHED,ISEMPTY,VALUE)),`Cxfer`(SCHED,VALUE)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),`_+Int_`(RETS,ARGS))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e26fbccdf0d7f0b8ca03609624aa2db41878d24299b30932fae453a425c2c4dc) contentStartColumn(10) contentStartLine(763) org.kframework.attributes.Location(Location(763,10,763,174)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval1388, err1388 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGcallXuIELEXhyphenGAS, List: []m.K{ // as-is Gcall_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err1388 != nil {
								return m.NoResult, err1388
							}
							eval1389, err1389 := evalCnew( // `Cnew`(SCHED,ISEMPTY,VALUE)
								varSCHED,
								varISEMPTY,
								varVALUE,
								config, -1)
							if err1389 != nil {
								return m.NoResult, err1389
							}
							eval1387, err1387 := evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED),`Cnew`(SCHED,ISEMPTY,VALUE))
								eval1388,
								eval1389,
								config, -1)
							if err1387 != nil {
								return m.NoResult, err1387
							}
							eval1390, err1390 := evalCxfer( // `Cxfer`(SCHED,VALUE)
								varSCHED,
								varVALUE,
								config, -1)
							if err1390 != nil {
								return m.NoResult, err1390
							}
							eval1386, err1386 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED),`Cnew`(SCHED,ISEMPTY,VALUE)),`Cxfer`(SCHED,VALUE))
								eval1387,
								eval1390,
								config, -1)
							if err1386 != nil {
								return m.NoResult, err1386
							}
							eval1392, err1392 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED)
								&m.KApply{Label: m.LblGcallregXuIELEXhyphenGAS, List: []m.K{ // as-is Gcallreg_IELE-GAS
								}},
								varSCHED,
								config, -1)
							if err1392 != nil {
								return m.NoResult, err1392
							}
							eval1393, err1393 := evalXuXplusIntXu( // `_+Int_`(RETS,ARGS)
								varRETS,
								varARGS,
								config, -1)
							if err1393 != nil {
								return m.NoResult, err1393
							}
							eval1391, err1391 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),`_+Int_`(RETS,ARGS))
								eval1392,
								eval1393,
								config, -1)
							if err1391 != nil {
								return m.NoResult, err1391
							}
							eval1385, err1385 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),SCHED),`Cnew`(SCHED,ISEMPTY,VALUE)),`Cxfer`(SCHED,VALUE)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),`_+Int_`(RETS,ARGS)))
								eval1386,
								eval1391,
								config, -1)
							if err1385 != nil {
								return m.NoResult, err1385
							}
							return eval1385, nil
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCextra", args: []m.K{c1, c2, c3, c4, c5}}
}

func evalIsNonEmptyOperands(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1228
	// source: ? @?
	// {| rule isNonEmptyOperands(#KToken(#token("NonEmptyOperands","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyOperands { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1228, "{| rule isNonEmptyOperands(#KToken(#token(\"NonEmptyOperands\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1229
	// source: ? @?
	// {| rule isNonEmptyOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval1394, err1394 := evalIsNonEmptyInts( // isNonEmptyInts(K1)
				varK1,
				config, -1)
			if err1394 != nil {
				return m.NoResult, err1394
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval1394) {
				// RHS
				traceRuleApply("FUNC", 1229, "{| rule isNonEmptyOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1230
	// source: ? @?
	// {| rule isNonEmptyOperands(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1230, "{| rule isNonEmptyOperands(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1231
	// source: ? @?
	// {| rule isNonEmptyOperands(#KToken(#token("NonEmptyInts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1231, "{| rule isNonEmptyOperands(#KToken(#token(\"NonEmptyInts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1232
	// source: ? @?
	// {| rule isNonEmptyOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1395, err1395 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1395 != nil {
			return m.NoResult, err1395
		}
		eval1396, err1396 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err1396 != nil {
			return m.NoResult, err1396
		}
		if (m.IsTrue(eval1395)) &&
		   (m.IsTrue(eval1396)) {
			// RHS
			traceRuleApply("FUNC", 1232, "{| rule isNonEmptyOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1233
	// source: ? @?
	// {| rule isNonEmptyOperands(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1233, "{| rule isNonEmptyOperands(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdecodeLengthPrefix(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1234
	// source: data.k @574
	// {| rule #decodeLengthPrefix(STR,START)=>#decodeLengthPrefixAux(STR,START,ordChar(substrString(STR,START,`_+Int_`(START,#token("1","Int"))))) requires `_andBool_`(isString(STR),isInt(START)) ensures #token("true","Bool") [UNIQUE_ID(8b8610117246c653098e3e232eb2d58453a74916afedb648f6b10b43fcbb8c3e) contentStartColumn(10) contentStartLine(574) org.kframework.attributes.Location(Location(574,10,574,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isString(STR) && isInt(START)
			// RHS
			traceRuleApply("FUNC", 1234, "{| rule #decodeLengthPrefix(STR,START)=>#decodeLengthPrefixAux(STR,START,ordChar(substrString(STR,START,`_+Int_`(START,#token(\"1\",\"Int\"))))) requires `_andBool_`(isString(STR),isInt(START)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8b8610117246c653098e3e232eb2d58453a74916afedb648f6b10b43fcbb8c3e) contentStartColumn(10) contentStartLine(574) org.kframework.attributes.Location(Location(574,10,574,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1400, err1400 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
				varSTART,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err1400 != nil {
				return m.NoResult, err1400
			}
			eval1399, err1399 := evalSubstrString( // substrString(STR,START,`_+Int_`(START,#token("1","Int")))
				varSTR,
				varSTART,
				eval1400,
				config, -1)
			if err1399 != nil {
				return m.NoResult, err1399
			}
			eval1398, err1398 := evalOrdChar( // ordChar(substrString(STR,START,`_+Int_`(START,#token("1","Int"))))
				eval1399,
				config, -1)
			if err1398 != nil {
				return m.NoResult, err1398
			}
			eval1397, err1397 := evalXhashdecodeLengthPrefixAux( // #decodeLengthPrefixAux(STR,START,ordChar(substrString(STR,START,`_+Int_`(START,#token("1","Int")))))
				varSTR,
				varSTART,
				eval1398,
				config, -1)
			if err1397 != nil {
				return m.NoResult, err1397
			}
			return eval1397, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdecodeLengthPrefix", args: []m.K{c1, c2}}
}

func evalCheckInit(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1235
	// source: well-formedness.k @345
	// {| rule checkInit(#token("init","IeleName"),SCHED)=>`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(2af368dc8bd1531ada041d93b9750e3bb0e52f46b0d05b37f4c21ed68cf05858) contentStartColumn(10) contentStartLine(345) org.kframework.attributes.Location(Location(345,10,345,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(&m.KToken{Sort: m.SortIeleName, Value: "init"}) { // #token("init","IeleName")
		varSCHED := c2 // lhs KVariable SCHED
		// REQUIRES
		eval1401, err1401 := evalIsSchedule( // isSchedule(SCHED)
			varSCHED,
			config, -1)
		if err1401 != nil {
			return m.NoResult, err1401
		}
		if m.IsTrue(eval1401) {
			// RHS
			traceRuleApply("FUNC", 1235, "{| rule checkInit(#token(\"init\",\"IeleName\"),SCHED)=>`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2af368dc8bd1531ada041d93b9750e3bb0e52f46b0d05b37f4c21ed68cf05858) contentStartColumn(10) contentStartLine(345) org.kframework.attributes.Location(Location(345,10,345,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1402, err1402 := evalXuXeqXslashXeqKXu( // `_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))
				varSCHED,
				&m.KApply{Label: m.LblALBEXuIELEXhyphenCONSTANTS, List: []m.K{ // as-is ALBE_IELE-CONSTANTS
				}},
				config, -1)
			if err1402 != nil {
				return m.NoResult, err1402
			}
			return eval1402, nil
		}
	}

	// rule #1236
	// source: well-formedness.k @346
	// {| rule checkInit(_34,_35)=>#token("true","Bool") requires `_andBool_`(isSchedule(_35),isIeleName(_34)) ensures #token("true","Bool") [UNIQUE_ID(3ef1ae6cdfb591456f1dc05d1fdd03accb6b63709dc9b37fbbe509ade18cbc37) contentStartColumn(10) contentStartLine(346) org.kframework.attributes.Location(Location(346,10,346,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu34 := c1 // lhs KVariable _34
		varXu35 := c2 // lhs KVariable _35
		// REQUIRES
		eval1403, err1403 := evalIsSchedule( // isSchedule(_35)
			varXu35,
			config, -1)
		if err1403 != nil {
			return m.NoResult, err1403
		}
		eval1404, err1404 := evalIsIeleName( // isIeleName(_34)
			varXu34,
			config, -1)
		if err1404 != nil {
			return m.NoResult, err1404
		}
		if (m.IsTrue(eval1403)) &&
		   (m.IsTrue(eval1404)) {
			// RHS
			traceRuleApply("FUNC", 1236, "{| rule checkInit(_34,_35)=>#token(\"true\",\"Bool\") requires `_andBool_`(isSchedule(_35),isIeleName(_34)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3ef1ae6cdfb591456f1dc05d1fdd03accb6b63709dc9b37fbbe509ade18cbc37) contentStartColumn(10) contentStartLine(346) org.kframework.attributes.Location(Location(346,10,346,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCheckInit", args: []m.K{c1, c2}}
}

func evalXudividesIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1237
	// source: domains.k @409
	// {| rule `_dividesInt__INT`(I1,I2)=>`_==Int_`(`_%Int__INT`(I2,I1),#token("0","Int")) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token("true","Bool") [UNIQUE_ID(81f77f3fbad78d0c735f87bfe9eff8339b46a8ead5ca820f8d69aafef7cb551d) contentStartColumn(8) contentStartLine(409) org.kframework.attributes.Location(Location(409,8,409,58)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(I1) && isInt(I2)
			// RHS
			traceRuleApply("FUNC", 1237, "{| rule `_dividesInt__INT`(I1,I2)=>`_==Int_`(`_%Int__INT`(I2,I1),#token(\"0\",\"Int\")) requires `_andBool_`(isInt(I1),isInt(I2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(81f77f3fbad78d0c735f87bfe9eff8339b46a8ead5ca820f8d69aafef7cb551d) contentStartColumn(8) contentStartLine(409) org.kframework.attributes.Location(Location(409,8,409,58)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1406, err1406 := evalXuXpercentIntXuXuINT( // `_%Int__INT`(I2,I1)
				varI2,
				varI1,
				config, -1)
			if err1406 != nil {
				return m.NoResult, err1406
			}
			eval1405, err1405 := evalXuXeqXeqIntXu( // `_==Int_`(`_%Int__INT`(I2,I1),#token("0","Int"))
				eval1406,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1405 != nil {
				return m.NoResult, err1405
			}
			return eval1405, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXudividesIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsCurrentContractCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1238
	// source: ? @?
	// {| rule isCurrentContractCell(`<currentContract>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentContractXgt && len(kapp0.List) == 5 { // `<currentContract>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1407, err1407 := evalIsTypesCell( // isTypesCell(K0)
			varK0,
			config, -1)
		if err1407 != nil {
			return m.NoResult, err1407
		}
		eval1408, err1408 := evalIsContractNameCell( // isContractNameCell(K1)
			varK1,
			config, -1)
		if err1408 != nil {
			return m.NoResult, err1408
		}
		eval1409, err1409 := evalIsDeclaredContractsCell( // isDeclaredContractsCell(K2)
			varK2,
			config, -1)
		if err1409 != nil {
			return m.NoResult, err1409
		}
		eval1410, err1410 := evalIsFunctionBodiesCell( // isFunctionBodiesCell(K3)
			varK3,
			config, -1)
		if err1410 != nil {
			return m.NoResult, err1410
		}
		eval1411, err1411 := evalIsCurrentFunctionCell( // isCurrentFunctionCell(K4)
			varK4,
			config, -1)
		if err1411 != nil {
			return m.NoResult, err1411
		}
		if ((((m.IsTrue(eval1407)) &&
		   (m.IsTrue(eval1408))) &&
		   (m.IsTrue(eval1409))) &&
		   (m.IsTrue(eval1410))) &&
		   (m.IsTrue(eval1411)) {
			// RHS
			traceRuleApply("FUNC", 1238, "{| rule isCurrentContractCell(`<currentContract>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTypesCell(K0),isContractNameCell(K1)),isDeclaredContractsCell(K2)),isFunctionBodiesCell(K3)),isCurrentFunctionCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1239
	// source: ? @?
	// {| rule isCurrentContractCell(#KToken(#token("CurrentContractCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentContractCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1239, "{| rule isCurrentContractCell(#KToken(#token(\"CurrentContractCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1240
	// source: ? @?
	// {| rule isCurrentContractCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1240, "{| rule isCurrentContractCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsException(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1241
	// source: ? @?
	// {| rule isException(`#end_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashendXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#end_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1241, "{| rule isException(`#end_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1242
	// source: ? @?
	// {| rule isException(`#revert__IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashrevertXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#revert__IELE-INFRASTRUCTURE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1242, "{| rule isException(`#revert__IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1243
	// source: ? @?
	// {| rule isException(#KToken(#token("Exception","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortException { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1243, "{| rule isException(#KToken(#token(\"Exception\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1244
	// source: ? @?
	// {| rule isException(`#exception__IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#exception__IELE-INFRASTRUCTURE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1244, "{| rule isException(`#exception__IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1245
	// source: ? @?
	// {| rule isException(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1245, "{| rule isException(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCurrentMemoryCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1246
	// source: ? @?
	// {| rule isCurrentMemoryCell(#KToken(#token("CurrentMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1246, "{| rule isCurrentMemoryCell(#KToken(#token(\"CurrentMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1247
	// source: ? @?
	// {| rule isCurrentMemoryCell(`<currentMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentMemoryXgt && len(kapp0.List) == 1 { // `<currentMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1247, "{| rule isCurrentMemoryCell(`<currentMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1248
	// source: ? @?
	// {| rule isCurrentMemoryCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1248, "{| rule isCurrentMemoryCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSetXcolonchoice(c m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.choice
	lbl := m.LblSetXcolonchoice // Set:choice
	sort := m.SortKItem
	if hookRes, hookErr := setHooks.choice(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.choice, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSetXcolonchoice", args: []m.K{c}}
}

func evalXhashinvalidXquesXlsqbXuXrsqbXuIELE(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1249
	// source: iele.k @609
	// {| rule `#invalid?[_]_IELE`(`_=call_(_)_IELE-COMMON`(_358,`@__IELE-COMMON`(#token("iele.invalid","IeleName")),`.List{"operandList"}`(.KList)))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")) requires isLValues(_358) ensures #token("true","Bool") [UNIQUE_ID(755e67b04b11ee395f314dbfd245b5d1def1c85b72f0d26f349d17f950d886fd) contentStartColumn(10) contentStartLine(609) org.kframework.attributes.Location(Location(609,10,609,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(_358,`@__IELE-COMMON`(#token("iele.invalid","IeleName")),`.List{"operandList"}`(.KList))
		varXu358 := kapp0.List[0] // lhs KVariable _358
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(#token("iele.invalid","IeleName"))
			if kapp1.List[0].Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.invalid"}) { // #token("iele.invalid","IeleName")
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp2.List) == 0 { // `.List{"operandList"}`(.KList)
					// REQUIRES
					eval1412, err1412 := evalIsLValues( // isLValues(_358)
						varXu358,
						config, -1)
					if err1412 != nil {
						return m.NoResult, err1412
					}
					if m.IsTrue(eval1412) {
						// RHS
						traceRuleApply("FUNC", 1249, "{| rule `#invalid?[_]_IELE`(`_=call_(_)_IELE-COMMON`(_358,`@__IELE-COMMON`(#token(\"iele.invalid\",\"IeleName\")),`.List{\"operandList\"}`(.KList)))=>`#exception__IELE-INFRASTRUCTURE`(#token(\"4\",\"Int\")) requires isLValues(_358) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(755e67b04b11ee395f314dbfd245b5d1def1c85b72f0d26f349d17f950d886fd) contentStartColumn(10) contentStartLine(609) org.kframework.attributes.Location(Location(609,10,609,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						return &m.KApply{Label: m.LblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE, List: []m.K{ // as-is #exception__IELE-INFRASTRUCTURE
							/* rhs KToken */ m.NewIntFromString("4"),
						}}, nil
					}
				}
			}
		}
	}

	// rule #1250
	// source: iele.k @610
	// {| rule `#invalid?[_]_IELE`(OP)=>.K requires isInstruction(OP) ensures #token("true","Bool") [UNIQUE_ID(43666eaa451e18276da2ead8d0ebf03ef527e9141de5859fd75ab87553297f01) contentStartColumn(10) contentStartLine(610) org.kframework.attributes.Location(Location(610,10,610,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c // lhs KVariable OP
		// REQUIRES
		eval1413, err1413 := evalIsInstruction( // isInstruction(OP)
			varOP,
			config, -1)
		if err1413 != nil {
			return m.NoResult, err1413
		}
		if m.IsTrue(eval1413) {
			// RHS
			traceRuleApply("FUNC", 1250, "{| rule `#invalid?[_]_IELE`(OP)=>.K requires isInstruction(OP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(43666eaa451e18276da2ead8d0ebf03ef527e9141de5859fd75ab87553297f01) contentStartColumn(10) contentStartLine(610) org.kframework.attributes.Location(Location(610,10,610,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return m.EmptyKSequence, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashinvalidXquesXlsqbXuXrsqbXuIELE", args: []m.K{c}}
}

func evalInitPreviousGasCell(config m.K, guard int) (m.K, error) {
	// rule #1251
	// source: ? @?
	// {| rule initPreviousGasCell(.KList)=>`<previousGas>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e2098d0db531cef40d1f30f5a9fd445325a9d84e634da4918bed77541a1e61dc) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1251, "{| rule initPreviousGasCell(.KList)=>`<previousGas>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2098d0db531cef40d1f30f5a9fd445325a9d84e634da4918bed77541a1e61dc) initializer()] |}")
	return &m.KApply{Label: m.LblXltpreviousGasXgt, List: []m.K{ // as-is <previousGas>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitPreviousGasCell K = evalInitPreviousGasCell(m.InternedBottom)

func evalXhashparseHexWord(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1252
	// source: data.k @440
	// {| rule #parseHexWord(S)=>`String2Base`(`replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String")),#token("16","Int")) requires `_andBool_`(isString(S),`_andBool_`(`_=/=String__STRING`(S,#token("\"\"","String")),`_=/=String__STRING`(S,#token("\"0x\"","String")))) ensures #token("true","Bool") [UNIQUE_ID(fa117db413e10c075a027f3e6c33d2b87684f0c994988b342441238400b6921d) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,126)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES
		eval1414, err1414 := evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(S,#token("\"\"","String"))
			varS,
			/* rhs KToken */ m.NewString(""),
			config, -1)
		if err1414 != nil {
			return m.NoResult, err1414
		}
		eval1415, err1415 := evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(S,#token("\"0x\"","String"))
			varS,
			/* rhs KToken */ m.NewString("0x"),
			config, -1)
		if err1415 != nil {
			return m.NoResult, err1415
		}
		if /* rhs precomputed isString(S) */ /* && */
		   (m.IsTrue(eval1414)) &&
		   (m.IsTrue(eval1415)) {
			// RHS
			traceRuleApply("FUNC", 1252, "{| rule #parseHexWord(S)=>`String2Base`(`replaceAll(_,_,_)_STRING`(S,#token(\"\\\"0x\\\"\",\"String\"),#token(\"\\\"\\\"\",\"String\")),#token(\"16\",\"Int\")) requires `_andBool_`(isString(S),`_andBool_`(`_=/=String__STRING`(S,#token(\"\\\"\\\"\",\"String\")),`_=/=String__STRING`(S,#token(\"\\\"0x\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fa117db413e10c075a027f3e6c33d2b87684f0c994988b342441238400b6921d) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,126)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1417, err1417 := evalReplaceAllXlparenXuXcommaXuXcommaXuXrparenXuSTRING( // `replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String"))
				varS,
				/* rhs KToken */ m.NewString("0x"),
				/* rhs KToken */ m.NewString(""),
				config, -1)
			if err1417 != nil {
				return m.NoResult, err1417
			}
			eval1416, err1416 := evalString2Base( // `String2Base`(`replaceAll(_,_,_)_STRING`(S,#token("\"0x\"","String"),#token("\"\"","String")),#token("16","Int"))
				eval1417,
				/* rhs KToken */ m.NewIntFromString("16"),
				config, -1)
			if err1416 != nil {
				return m.NoResult, err1416
			}
			return eval1416, nil
		}
	}

	// rule #1253
	// source: data.k @438
	// {| rule #parseHexWord(#token("\"\"","String"))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(733ed9726916fbffa13a1cdee081ef86c96dc86c6284302ab398eff78811fb84) contentStartColumn(10) contentStartLine(438) org.kframework.attributes.Location(Location(438,10,438,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("")) { // #token("\"\"","String")
		// RHS
		traceRuleApply("FUNC", 1253, "{| rule #parseHexWord(#token(\"\\\"\\\"\",\"String\"))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(733ed9726916fbffa13a1cdee081ef86c96dc86c6284302ab398eff78811fb84) contentStartColumn(10) contentStartLine(438) org.kframework.attributes.Location(Location(438,10,438,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	// rule #1254
	// source: data.k @439
	// {| rule #parseHexWord(#token("\"0x\"","String"))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17cc11cff7617dfbdd845df1361a37796821cc01d56ec9fee1e1de70756a10d3) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("0x")) { // #token("\"0x\"","String")
		// RHS
		traceRuleApply("FUNC", 1254, "{| rule #parseHexWord(#token(\"\\\"0x\\\"\",\"String\"))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(17cc11cff7617dfbdd845df1361a37796821cc01d56ec9fee1e1de70756a10d3) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseHexWord", args: []m.K{c}}
}

func evalXhashaddr(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1255
	// source: data.k @382
	// {| rule #addr(W)=>`_modInt__INT`(W,`pow160_IELE-DATA`(.KList)) requires isInt(W) ensures #token("true","Bool") [UNIQUE_ID(5f920855f140a6dff067e9b559d6a1ea2659a57ec54f3cbcbe339bf2f5591b17) contentStartColumn(10) contentStartLine(382) org.kframework.attributes.Location(Location(382,10,382,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varW, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(W)
		// RHS
		traceRuleApply("FUNC", 1255, "{| rule #addr(W)=>`_modInt__INT`(W,`pow160_IELE-DATA`(.KList)) requires isInt(W) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5f920855f140a6dff067e9b559d6a1ea2659a57ec54f3cbcbe339bf2f5591b17) contentStartColumn(10) contentStartLine(382) org.kframework.attributes.Location(Location(382,10,382,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval1419, err1419 := evalPow160XuIELEXhyphenDATA(config, -1) // `pow160_IELE-DATA`(.KList)
		if err1419 != nil {
			return m.NoResult, err1419
		}
		eval1418, err1418 := evalXumodIntXuXuINT( // `_modInt__INT`(W,`pow160_IELE-DATA`(.KList))
			varW,
			eval1419,
			config, -1)
		if err1418 != nil {
			return m.NoResult, err1418
		}
		return eval1418, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashaddr", args: []m.K{c}}
}

func evalIsCondJumpInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1256
	// source: ? @?
	// {| rule isCondJumpInst(`br_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isIeleName(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `br_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1420, err1420 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1420 != nil {
			return m.NoResult, err1420
		}
		eval1421, err1421 := evalIsIeleName( // isIeleName(K1)
			varK1,
			config, -1)
		if err1421 != nil {
			return m.NoResult, err1421
		}
		if (m.IsTrue(eval1420)) &&
		   (m.IsTrue(eval1421)) {
			// RHS
			traceRuleApply("FUNC", 1256, "{| rule isCondJumpInst(`br_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isIeleName(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1257
	// source: ? @?
	// {| rule isCondJumpInst(#KToken(#token("CondJumpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCondJumpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1257, "{| rule isCondJumpInst(#KToken(#token(\"CondJumpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1258
	// source: ? @?
	// {| rule isCondJumpInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1258, "{| rule isCondJumpInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashgetStorageData(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.getStorageData
	lbl := m.LblXhashgetStorageData // #getStorageData
	sort := m.SortInt
	if hookRes, hookErr := blockchain.GetStorageData(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.getStorageData, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetStorageData", args: []m.K{c1, c2}}
}

func evalIsStaticCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1259
	// source: ? @?
	// {| rule isStaticCellOpt(`<static>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstaticXgt && len(kapp0.List) == 1 { // `<static>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 1259, "{| rule isStaticCellOpt(`<static>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1260
	// source: ? @?
	// {| rule isStaticCellOpt(#KToken(#token("StaticCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStaticCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1260, "{| rule isStaticCellOpt(#KToken(#token(\"StaticCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1261
	// source: ? @?
	// {| rule isStaticCellOpt(noStaticCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoStaticCell && len(kapp0.List) == 0 { // noStaticCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1261, "{| rule isStaticCellOpt(noStaticCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1262
	// source: ? @?
	// {| rule isStaticCellOpt(#KToken(#token("StaticCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStaticCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1262, "{| rule isStaticCellOpt(#KToken(#token(\"StaticCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1263
	// source: ? @?
	// {| rule isStaticCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1263, "{| rule isStaticCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallAddressInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1264
	// source: ? @?
	// {| rule isCallAddressInst(#KToken(#token("CallAddressInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallAddressInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1264, "{| rule isCallAddressInst(#KToken(#token(\"CallAddressInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1265
	// source: ? @?
	// {| rule isCallAddressInst(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1422, err1422 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1422 != nil {
			return m.NoResult, err1422
		}
		eval1423, err1423 := evalIsGlobalName( // isGlobalName(K1)
			varK1,
			config, -1)
		if err1423 != nil {
			return m.NoResult, err1423
		}
		eval1424, err1424 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1424 != nil {
			return m.NoResult, err1424
		}
		if ((m.IsTrue(eval1422)) &&
		   (m.IsTrue(eval1423))) &&
		   (m.IsTrue(eval1424)) {
			// RHS
			traceRuleApply("FUNC", 1265, "{| rule isCallAddressInst(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1266
	// source: ? @?
	// {| rule isCallAddressInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1266, "{| rule isCallAddressInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsExitCodeCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1267
	// source: ? @?
	// {| rule isExitCodeCellOpt(noExitCodeCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoExitCodeCell && len(kapp0.List) == 0 { // noExitCodeCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1267, "{| rule isExitCodeCellOpt(noExitCodeCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1268
	// source: ? @?
	// {| rule isExitCodeCellOpt(#KToken(#token("ExitCodeCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExitCodeCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1268, "{| rule isExitCodeCellOpt(#KToken(#token(\"ExitCodeCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1269
	// source: ? @?
	// {| rule isExitCodeCellOpt(#KToken(#token("ExitCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExitCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1269, "{| rule isExitCodeCellOpt(#KToken(#token(\"ExitCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1270
	// source: ? @?
	// {| rule isExitCodeCellOpt(`<exit-code>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexitXhyphencodeXgt && len(kapp0.List) == 1 { // `<exit-code>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1270, "{| rule isExitCodeCellOpt(`<exit-code>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1271
	// source: ? @?
	// {| rule isExitCodeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1271, "{| rule isExitCodeCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1272
	// source: ? @?
	// {| rule isSCellOpt(#KToken(#token("SCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1272, "{| rule isSCellOpt(#KToken(#token(\"SCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1273
	// source: ? @?
	// {| rule isSCellOpt(noSCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoSCell && len(kapp0.List) == 0 { // noSCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1273, "{| rule isSCellOpt(noSCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1274
	// source: ? @?
	// {| rule isSCellOpt(`<s>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsXgt && len(kapp0.List) == 1 { // `<s>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 1274, "{| rule isSCellOpt(`<s>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1275
	// source: ? @?
	// {| rule isSCellOpt(#KToken(#token("SCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1275, "{| rule isSCellOpt(#KToken(#token(\"SCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1276
	// source: ? @?
	// {| rule isSCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1276, "{| rule isSCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitTxPendingCell(config m.K, guard int) (m.K, error) {
	// rule #1277
	// source: ? @?
	// {| rule initTxPendingCell(.KList)=>`<txPending>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(162d3dec1357a2823698b93d4a1e5866a1cd2810839bcd6324c769a4b789f66f) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1277, "{| rule initTxPendingCell(.KList)=>`<txPending>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(162d3dec1357a2823698b93d4a1e5866a1cd2810839bcd6324c769a4b789f66f) initializer()] |}")
	eval1425, err1425 := evalXdotList(config, -1) // `.List`(.KList)
	if err1425 != nil {
		return m.NoResult, err1425
	}
	return &m.KApply{Label: m.LblXlttxPendingXgt, List: []m.K{ // as-is <txPending>
		eval1425,
	}}, nil

}

//var constInitTxPendingCell K = evalInitTxPendingCell(m.InternedBottom)

func evalXhashrlpDecodeAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1278
	// source: data.k @557
	// {| rule #rlpDecodeAux(STR,`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),LEN,POS))=>substrString(STR,POS,`_+Int_`(POS,LEN)) requires `_andBool_`(`_andBool_`(isInt(LEN),isString(STR)),isInt(POS)) ensures #token("true","Bool") [UNIQUE_ID(49f0755db97e860a5e5677da057bbdc989f7b6454aad180763460d844bcd4477) contentStartColumn(10) contentStartLine(557) org.kframework.attributes.Location(Location(557,10,557,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA && len(kapp0.List) == 3 { // `_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),LEN,POS)
			if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXhashstrXuIELEXhyphenDATA && len(kapp1.List) == 0 { // `#str_IELE-DATA`(.KList)
				if varLEN, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varPOS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(LEN) && isString(STR) && isInt(POS)
						// RHS
						traceRuleApply("FUNC", 1278, "{| rule #rlpDecodeAux(STR,`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),LEN,POS))=>substrString(STR,POS,`_+Int_`(POS,LEN)) requires `_andBool_`(`_andBool_`(isInt(LEN),isString(STR)),isInt(POS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(49f0755db97e860a5e5677da057bbdc989f7b6454aad180763460d844bcd4477) contentStartColumn(10) contentStartLine(557) org.kframework.attributes.Location(Location(557,10,557,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1427, err1427 := evalXuXplusIntXu( // `_+Int_`(POS,LEN)
							varPOS,
							varLEN,
							config, -1)
						if err1427 != nil {
							return m.NoResult, err1427
						}
						eval1426, err1426 := evalSubstrString( // substrString(STR,POS,`_+Int_`(POS,LEN))
							varSTR,
							varPOS,
							eval1427,
							config, -1)
						if err1426 != nil {
							return m.NoResult, err1426
						}
						return eval1426, nil
					}
				}
			}
		}
	}

	// rule #1279
	// source: data.k @558
	// {| rule #rlpDecodeAux(STR,`_(_,_)_IELE-DATA`(`#list_IELE-DATA`(.KList),LEN,POS))=>`[_]_IELE-DATA`(#rlpDecodeList(STR,POS)) requires `_andBool_`(`_andBool_`(isInt(LEN),isString(STR)),isInt(POS)) ensures #token("true","Bool") [UNIQUE_ID(2d6f78fb06015acfe5b17949155684482c4a4fd19890a313cdcca73da2d8218f) contentStartColumn(10) contentStartLine(558) org.kframework.attributes.Location(Location(558,10,558,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA && len(kapp0.List) == 3 { // `_(_,_)_IELE-DATA`(`#list_IELE-DATA`(.KList),LEN,POS)
			if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXhashlistXuIELEXhyphenDATA && len(kapp1.List) == 0 { // `#list_IELE-DATA`(.KList)
				if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varPOS, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(LEN) && isString(STR) && isInt(POS)
						// RHS
						traceRuleApply("FUNC", 1279, "{| rule #rlpDecodeAux(STR,`_(_,_)_IELE-DATA`(`#list_IELE-DATA`(.KList),LEN,POS))=>`[_]_IELE-DATA`(#rlpDecodeList(STR,POS)) requires `_andBool_`(`_andBool_`(isInt(LEN),isString(STR)),isInt(POS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2d6f78fb06015acfe5b17949155684482c4a4fd19890a313cdcca73da2d8218f) contentStartColumn(10) contentStartLine(558) org.kframework.attributes.Location(Location(558,10,558,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval1428, err1428 := evalXhashrlpDecodeList( // #rlpDecodeList(STR,POS)
							varSTR,
							varPOS,
							config, -1)
						if err1428 != nil {
							return m.NoResult, err1428
						}
						return &m.KApply{Label: m.LblXlsqbXuXrsqbXuIELEXhyphenDATA, List: []m.K{ // as-is [_]_IELE-DATA
							eval1428,
						}}, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpDecodeAux", args: []m.K{c1, c2}}
}

func evalIsLocalCallOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1280
	// source: ? @?
	// {| rule isLocalCallOp(`LOCALCALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALLDYN && len(kapp0.List) == 2 { // `LOCALCALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 1280, "{| rule isLocalCallOp(`LOCALCALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1281
	// source: ? @?
	// {| rule isLocalCallOp(`LOCALCALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALL && len(kapp0.List) == 3 { // `LOCALCALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 1281, "{| rule isLocalCallOp(`LOCALCALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1282
	// source: ? @?
	// {| rule isLocalCallOp(#KToken(#token("LocalCallOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1282, "{| rule isLocalCallOp(#KToken(#token(\"LocalCallOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1283
	// source: ? @?
	// {| rule isLocalCallOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1283, "{| rule isLocalCallOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashlambdaXuXu(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1284
	// source: data.k @451
	// {| rule `#lambda__`(STR)=>#parseByteStackAux(STR,`.WordStack_IELE-DATA`(.KList),#token("0","Int"),lengthString(STR)) requires isString(STR) ensures #token("true","Bool") [UNIQUE_ID(f956dad50cfef48868999bc60155f36e684cf730767e2558658993c72485ad90) org.kframework.attributes.Location(Location(451,32,451,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax K ::= "#fun" "(" K ")" "(" K ")")] |}
	// LHS
	if varSTR, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(STR)
		// RHS
		traceRuleApply("FUNC", 1284, "{| rule `#lambda__`(STR)=>#parseByteStackAux(STR,`.WordStack_IELE-DATA`(.KList),#token(\"0\",\"Int\"),lengthString(STR)) requires isString(STR) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f956dad50cfef48868999bc60155f36e684cf730767e2558658993c72485ad90) org.kframework.attributes.Location(Location(451,32,451,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax K ::= \"#fun\" \"(\" K \")\" \"(\" K \")\")] |}")
		eval1430, err1430 := evalLengthString( // lengthString(STR)
			varSTR,
			config, -1)
		if err1430 != nil {
			return m.NoResult, err1430
		}
		eval1429, err1429 := evalXhashparseByteStackAux( // #parseByteStackAux(STR,`.WordStack_IELE-DATA`(.KList),#token("0","Int"),lengthString(STR))
			varSTR,
			&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
			}},
			/* rhs KToken */ m.NewIntFromString("0"),
			eval1430,
			config, -1)
		if err1429 != nil {
			return m.NoResult, err1429
		}
		return eval1429, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlambdaXuXu", args: []m.K{c}}
}

func evalInitCurrentInstructionsCell(config m.K, guard int) (m.K, error) {
	// rule #1285
	// source: ? @?
	// {| rule initCurrentInstructionsCell(.KList)=>`<currentInstructions>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11e5abbcb047ef7d48bcb364a2785ae5b63e2187eb2359a5a67ff5e1dca67e56) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1285, "{| rule initCurrentInstructionsCell(.KList)=>`<currentInstructions>`(.K) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(11e5abbcb047ef7d48bcb364a2785ae5b63e2187eb2359a5a67ff5e1dca67e56) initializer()] |}")
	return &m.KApply{Label: m.LblXltcurrentInstructionsXgt, List: []m.K{ // as-is <currentInstructions>
		m.EmptyKSequence,
	}}, nil

}

//var constInitCurrentInstructionsCell K = evalInitCurrentInstructionsCell(m.InternedBottom)

func evalFreshInt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1286
	// source: domains.k @412
	// {| rule freshInt(I)=>I requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(d7221da1fa6b633137e79279efd265a289ea7e8496612615f43546422d446bc4) contentStartColumn(8) contentStartLine(412) org.kframework.attributes.Location(Location(412,8,412,28)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 1286, "{| rule freshInt(I)=>I requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d7221da1fa6b633137e79279efd265a289ea7e8496612615f43546422d446bc4) contentStartColumn(8) contentStartLine(412) org.kframework.attributes.Location(Location(412,8,412,28)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return varI, nil
	}

	return m.NoResult, &stuckError{funcName: "evalFreshInt", args: []m.K{c}}
}

func evalXhashwriteXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.write
	lbl := m.LblXhashwriteXlparenXuXcommaXuXrparenXuKXhyphenIO // #write(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.write(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.write, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashwriteXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalIsDifficultyCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1287
	// source: ? @?
	// {| rule isDifficultyCell(#KToken(#token("DifficultyCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDifficultyCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1287, "{| rule isDifficultyCell(#KToken(#token(\"DifficultyCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1288
	// source: ? @?
	// {| rule isDifficultyCell(`<difficulty>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdifficultyXgt && len(kapp0.List) == 1 { // `<difficulty>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1288, "{| rule isDifficultyCell(`<difficulty>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1289
	// source: ? @?
	// {| rule isDifficultyCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1289, "{| rule isDifficultyCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNregsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1290
	// source: ? @?
	// {| rule isNregsCell(#KToken(#token("NregsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNregsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1290, "{| rule isNregsCell(#KToken(#token(\"NregsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1291
	// source: ? @?
	// {| rule isNregsCell(`<nregs>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnregsXgt && len(kapp0.List) == 1 { // `<nregs>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1291, "{| rule isNregsCell(`<nregs>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1292
	// source: ? @?
	// {| rule isNregsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1292, "{| rule isNregsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashloadOffset(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1293
	// source: data.k @549
	// {| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>#token("0","Int") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_orBool__BOOL`(`_<Int__INT`(B0,#token("128","Int")),`_>=Int__INT`(B0,#token("192","Int")))) ensures #token("true","Bool") [UNIQUE_ID(262c2012a1a898689127c28ee80a10db3c2c1a94bf84c0b2b446fd049d9a0a73) contentStartColumn(10) contentStartLine(549) org.kframework.attributes.Location(Location(549,10,549,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval1431, err1431 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err1431 != nil {
				return m.NoResult, err1431
			}
			eval1432, err1432 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("128","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("128"),
				config, -1)
			if err1432 != nil {
				return m.NoResult, err1432
			}
			eval1433, err1433 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("192","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err1433 != nil {
				return m.NoResult, err1433
			}
			if (m.IsTrue(eval1431) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval1432)) || (m.IsTrue(eval1433))) {
				// RHS
				traceRuleApply("FUNC", 1293, "{| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>#token(\"0\",\"Int\") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_orBool__BOOL`(`_<Int__INT`(B0,#token(\"128\",\"Int\")),`_>=Int__INT`(B0,#token(\"192\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(262c2012a1a898689127c28ee80a10db3c2c1a94bf84c0b2b446fd049d9a0a73) contentStartColumn(10) contentStartLine(549) org.kframework.attributes.Location(Location(549,10,549,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return /* rhs KToken */ m.NewIntFromString("0"), nil
			}
		}
	}

	// rule #1294
	// source: data.k @550
	// {| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>#token("1","Int") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("128","Int")),`_<Int__INT`(B0,#token("184","Int")))) ensures #token("true","Bool") [UNIQUE_ID(b19391ea631fb12bc3bdb84f13b28c0dc604440036fb56a55b7f3e96ca1c8b3c) contentStartColumn(10) contentStartLine(550) org.kframework.attributes.Location(Location(550,10,550,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval1434, err1434 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err1434 != nil {
				return m.NoResult, err1434
			}
			eval1435, err1435 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("128","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("128"),
				config, -1)
			if err1435 != nil {
				return m.NoResult, err1435
			}
			eval1436, err1436 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("184","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("184"),
				config, -1)
			if err1436 != nil {
				return m.NoResult, err1436
			}
			if (m.IsTrue(eval1434) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval1435)) &&
			   (m.IsTrue(eval1436))) {
				// RHS
				traceRuleApply("FUNC", 1294, "{| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>#token(\"1\",\"Int\") requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"128\",\"Int\")),`_<Int__INT`(B0,#token(\"184\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b19391ea631fb12bc3bdb84f13b28c0dc604440036fb56a55b7f3e96ca1c8b3c) contentStartColumn(10) contentStartLine(550) org.kframework.attributes.Location(Location(550,10,550,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return /* rhs KToken */ m.NewIntFromString("1"), nil
			}
		}
	}

	// rule #1295
	// source: data.k @551
	// {| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>`_-Int__INT`(B0,#token("182","Int")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("184","Int")),`_<Int__INT`(B0,#token("192","Int")))) ensures #token("true","Bool") [UNIQUE_ID(dc810cf35510c47ccb30ea19f79c488831f16fb18c3fd04de2bae71daa00515a) contentStartColumn(10) contentStartLine(551) org.kframework.attributes.Location(Location(551,10,551,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(B0,WS)
		if varB0, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval1437, err1437 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err1437 != nil {
				return m.NoResult, err1437
			}
			eval1438, err1438 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("184","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("184"),
				config, -1)
			if err1438 != nil {
				return m.NoResult, err1438
			}
			eval1439, err1439 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("192","Int"))
				varB0,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err1439 != nil {
				return m.NoResult, err1439
			}
			if (m.IsTrue(eval1437) /* && */ /* rhs precomputed isInt(B0) */ ) &&
			   ((m.IsTrue(eval1438)) &&
			   (m.IsTrue(eval1439))) {
				// RHS
				traceRuleApply("FUNC", 1295, "{| rule #loadOffset(`_:__IELE-DATA`(B0,WS))=>`_-Int__INT`(B0,#token(\"182\",\"Int\")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"184\",\"Int\")),`_<Int__INT`(B0,#token(\"192\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dc810cf35510c47ccb30ea19f79c488831f16fb18c3fd04de2bae71daa00515a) contentStartColumn(10) contentStartLine(551) org.kframework.attributes.Location(Location(551,10,551,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1440, err1440 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("182","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("182"),
					config, -1)
				if err1440 != nil {
					return m.NoResult, err1440
				}
				return eval1440, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadOffset", args: []m.K{c}}
}

func evalIsSExtInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1296
	// source: ? @?
	// {| rule isSExtInst(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sext_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1441, err1441 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1441 != nil {
			return m.NoResult, err1441
		}
		eval1442, err1442 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1442 != nil {
			return m.NoResult, err1442
		}
		eval1443, err1443 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1443 != nil {
			return m.NoResult, err1443
		}
		if ((m.IsTrue(eval1441)) &&
		   (m.IsTrue(eval1442))) &&
		   (m.IsTrue(eval1443)) {
			// RHS
			traceRuleApply("FUNC", 1296, "{| rule isSExtInst(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1297
	// source: ? @?
	// {| rule isSExtInst(#KToken(#token("SExtInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSExtInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1297, "{| rule isSExtInst(#KToken(#token(\"SExtInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1298
	// source: ? @?
	// {| rule isSExtInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1298, "{| rule isSExtInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsenderAux2(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1299
	// source: data.k @399
	// {| rule #senderAux2(STR)=>#addr(#parseHexWord(`Keccak256`(STR))) requires `_andBool_`(isString(STR),`_=/=String__STRING`(STR,#token("\"\"","String"))) ensures #token("true","Bool") [UNIQUE_ID(10bc254a0246ae1a46fb6f263cf78e9890026fba48eb701a6d2071b15279ed74) contentStartColumn(10) contentStartLine(399) org.kframework.attributes.Location(Location(399,10,399,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES
		eval1444, err1444 := evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(STR,#token("\"\"","String"))
			varSTR,
			/* rhs KToken */ m.NewString(""),
			config, -1)
		if err1444 != nil {
			return m.NoResult, err1444
		}
		if /* rhs precomputed isString(STR) */ /* && */
		   m.IsTrue(eval1444) {
			// RHS
			traceRuleApply("FUNC", 1299, "{| rule #senderAux2(STR)=>#addr(#parseHexWord(`Keccak256`(STR))) requires `_andBool_`(isString(STR),`_=/=String__STRING`(STR,#token(\"\\\"\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(10bc254a0246ae1a46fb6f263cf78e9890026fba48eb701a6d2071b15279ed74) contentStartColumn(10) contentStartLine(399) org.kframework.attributes.Location(Location(399,10,399,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1447, err1447 := evalKeccak256( // `Keccak256`(STR)
				varSTR,
				config, -1)
			if err1447 != nil {
				return m.NoResult, err1447
			}
			eval1446, err1446 := evalXhashparseHexWord( // #parseHexWord(`Keccak256`(STR))
				eval1447,
				config, -1)
			if err1446 != nil {
				return m.NoResult, err1446
			}
			eval1445, err1445 := evalXhashaddr( // #addr(#parseHexWord(`Keccak256`(STR)))
				eval1446,
				config, -1)
			if err1445 != nil {
				return m.NoResult, err1445
			}
			return eval1445, nil
		}
	}

	// rule #1300
	// source: data.k @398
	// {| rule #senderAux2(#token("\"\"","String"))=>`.Account_IELE-DATA`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bb18b35b816cb11ede5dfe8d866b36898f8ee1f97d9b9cb8821ccb040a92a221) contentStartColumn(10) contentStartLine(398) org.kframework.attributes.Location(Location(398,10,398,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("")) { // #token("\"\"","String")
		// RHS
		traceRuleApply("FUNC", 1300, "{| rule #senderAux2(#token(\"\\\"\\\"\",\"String\"))=>`.Account_IELE-DATA`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb18b35b816cb11ede5dfe8d866b36898f8ee1f97d9b9cb8821ccb040a92a221) contentStartColumn(10) contentStartLine(398) org.kframework.attributes.Location(Location(398,10,398,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXdotAccountXuIELEXhyphenDATA, List: []m.K{ // as-is .Account_IELE-DATA
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsenderAux2", args: []m.K{c}}
}

func evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, config m.K, guard int) (m.K, error) {
	// rule #1301
	// source: iele-binary.k @323
	// {| rule `%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,_125)=>`.List{"operandList"}`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)),`_==Int_`(_125,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c20af036e517aa905b3173360241c62a3d60bf20c3b6097bfae52c95837a4f22) contentStartColumn(10) contentStartLine(323) org.kframework.attributes.Location(Location(323,10,323,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varXu125, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval1448, err1448 := evalXuXeqXeqIntXu( // `_==Int_`(_125,#token("0","Int"))
							varXu125,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err1448 != nil {
							return m.NoResult, err1448
						}
						if /* rhs precomputed isInt(REGS) && isInt(MASK) && isInt(IDX) && isInt(WIDTH) */ /* && */
						   m.IsTrue(eval1448) {
							// RHS
							traceRuleApply("FUNC", 1301, "{| rule `%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,_125)=>`.List{\"operandList\"}`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)),`_==Int_`(_125,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c20af036e517aa905b3173360241c62a3d60bf20c3b6097bfae52c95837a4f22) contentStartColumn(10) contentStartLine(323) org.kframework.attributes.Location(Location(323,10,323,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return &m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #1302
	// source: iele-binary.k @324
	// {| rule `%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,COUNT)=>operandList(`%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX),`%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token("1","Int")),`_-Int__INT`(COUNT,#token("1","Int")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(COUNT)),isInt(WIDTH)) ensures #token("true","Bool") [UNIQUE_ID(edb480ef27179310c77631361f31676973a6963de48adaf3f183a5e26fed8597) contentStartColumn(10) contentStartLine(324) org.kframework.attributes.Location(Location(324,10,324,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varREGS, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varWIDTH, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varMASK, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varIDX, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varCOUNT, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(REGS) && isInt(MASK) && isInt(IDX) && isInt(COUNT) && isInt(WIDTH)
						// RHS
						traceRuleApply("FUNC", 1302, "{| rule `%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX,COUNT)=>operandList(`%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX),`%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token(\"1\",\"Int\")),`_-Int__INT`(COUNT,#token(\"1\",\"Int\")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(COUNT)),isInt(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edb480ef27179310c77631361f31676973a6963de48adaf3f183a5e26fed8597) contentStartColumn(10) contentStartLine(324) org.kframework.attributes.Location(Location(324,10,324,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval1449, err1449 := evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX)
							varREGS,
							varWIDTH,
							varMASK,
							varIDX,
							config, -1)
						if err1449 != nil {
							return m.NoResult, err1449
						}
						eval1451, err1451 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
							varIDX,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err1451 != nil {
							return m.NoResult, err1451
						}
						eval1452, err1452 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(COUNT,#token("1","Int"))
							varCOUNT,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err1452 != nil {
							return m.NoResult, err1452
						}
						eval1450, err1450 := evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY( // `%o(_,_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,`_+Int_`(IDX,#token("1","Int")),`_-Int__INT`(COUNT,#token("1","Int")))
							varREGS,
							varWIDTH,
							varMASK,
							eval1451,
							eval1452,
							config, -1)
						if err1450 != nil {
							return m.NoResult, err1450
						}
						return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
							eval1449,
							eval1450,
						}}, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXpercentoXlparenXuXcommaXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY", args: []m.K{c1, c2, c3, c4, c5}}
}

func evalIsNonceCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1303
	// source: ? @?
	// {| rule isNonceCell(#KToken(#token("NonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1303, "{| rule isNonceCell(#KToken(#token(\"NonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1304
	// source: ? @?
	// {| rule isNonceCell(`<nonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnonceXgt && len(kapp0.List) == 1 { // `<nonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1304, "{| rule isNonceCell(`<nonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1305
	// source: ? @?
	// {| rule isNonceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1305, "{| rule isNonceCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNullOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1306
	// source: ? @?
	// {| rule isNullOp(#KToken(#token("NullOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNullOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1306, "{| rule isNullOp(#KToken(#token(\"NullOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1307
	// source: ? @?
	// {| rule isNullOp(`INVALID`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblINVALID && len(kapp0.List) == 0 { // `INVALID`(.KList)
		// RHS
		traceRuleApply("FUNC", 1307, "{| rule isNullOp(`INVALID`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1308
	// source: ? @?
	// {| rule isNullOp(`BR`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBR && len(kapp0.List) == 1 { // `BR`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1308, "{| rule isNullOp(`BR`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1309
	// source: ? @?
	// {| rule isNullOp(`BRLABEL`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRLABEL && len(kapp0.List) == 1 { // `BRLABEL`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1309, "{| rule isNullOp(`BRLABEL`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1310
	// source: ? @?
	// {| rule isNullOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1310, "{| rule isNullOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalList2Set(c m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.list2set
	lbl := m.LblList2Set // List2Set
	sort := m.SortSet
	if hookRes, hookErr := setHooks.list2set(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.list2set, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalList2Set", args: []m.K{c}}
}

func evalXuXltXltIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.shl
	lbl := m.LblXuXltXltIntXuXuINT // _<<Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.shl(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.shl, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXltIntXuXuINT", args: []m.K{c1, c2}}
}

func evalInitCallDataCell(config m.K, guard int) (m.K, error) {
	// rule #1311
	// source: ? @?
	// {| rule initCallDataCell(.KList)=>`<callData>`(`.List{"operandList"}`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1f8c723e65b7bb26f37583dc31112037a9f9e4f360be2ee2aec3588712ba8b60) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1311, "{| rule initCallDataCell(.KList)=>`<callData>`(`.List{\"operandList\"}`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1f8c723e65b7bb26f37583dc31112037a9f9e4f360be2ee2aec3588712ba8b60) initializer()] |}")
	return &m.KApply{Label: m.LblXltcallDataXgt, List: []m.K{ // as-is <callData>
		&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
		}},
	}}, nil

}

//var constInitCallDataCell K = evalInitCallDataCell(m.InternedBottom)

func evalIsMulInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1312
	// source: ? @?
	// {| rule isMulInst(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mul_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1453, err1453 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1453 != nil {
			return m.NoResult, err1453
		}
		eval1454, err1454 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1454 != nil {
			return m.NoResult, err1454
		}
		eval1455, err1455 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1455 != nil {
			return m.NoResult, err1455
		}
		if ((m.IsTrue(eval1453)) &&
		   (m.IsTrue(eval1454))) &&
		   (m.IsTrue(eval1455)) {
			// RHS
			traceRuleApply("FUNC", 1312, "{| rule isMulInst(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1313
	// source: ? @?
	// {| rule isMulInst(#KToken(#token("MulInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMulInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1313, "{| rule isMulInst(#KToken(#token(\"MulInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1314
	// source: ? @?
	// {| rule isMulInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1314, "{| rule isMulInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsAcctIDCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1315
	// source: ? @?
	// {| rule isAcctIDCell(`<acctID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltacctIDXgt && len(kapp0.List) == 1 { // `<acctID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1315, "{| rule isAcctIDCell(`<acctID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1316
	// source: ? @?
	// {| rule isAcctIDCell(#KToken(#token("AcctIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAcctIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1316, "{| rule isAcctIDCell(#KToken(#token(\"AcctIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1317
	// source: ? @?
	// {| rule isAcctIDCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1317, "{| rule isAcctIDCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBitsInWords(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1318
	// source: data.k @169
	// {| rule bitsInWords(I,`ALBE_IELE-CONSTANTS`(.KList))=>ceilDiv(I,#token("256","Int")) requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(8be293fc8bed4048cdeefa017b38acdce050a8beccc6725993f483082d1306f2) contentStartColumn(10) contentStartLine(169) org.kframework.attributes.Location(Location(169,10,169,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// REQUIRES precomputed isInt(I)
			// RHS
			traceRuleApply("FUNC", 1318, "{| rule bitsInWords(I,`ALBE_IELE-CONSTANTS`(.KList))=>ceilDiv(I,#token(\"256\",\"Int\")) requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8be293fc8bed4048cdeefa017b38acdce050a8beccc6725993f483082d1306f2) contentStartColumn(10) contentStartLine(169) org.kframework.attributes.Location(Location(169,10,169,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1456, err1456 := evalCeilDiv( // ceilDiv(I,#token("256","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("256"),
				config, -1)
			if err1456 != nil {
				return m.NoResult, err1456
			}
			return eval1456, nil
		}
	}

	// rule #1319
	// source: data.k @170
	// {| rule bitsInWords(I,_23)=>ceilDiv(I,#token("64","Int")) requires `_andBool_`(isInt(I),isSchedule(_23)) ensures #token("true","Bool") [UNIQUE_ID(e95b0da34cd7ef7a0eb6910a4d671ed1bcfe7474e082e6acc652d0d161585306) contentStartColumn(10) contentStartLine(170) org.kframework.attributes.Location(Location(170,10,170,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varXu23 := c2 // lhs KVariable _23
		// REQUIRES
		eval1457, err1457 := evalIsSchedule( // isSchedule(_23)
			varXu23,
			config, -1)
		if err1457 != nil {
			return m.NoResult, err1457
		}
		if /* rhs precomputed isInt(I) */ /* && */
		   m.IsTrue(eval1457) {
			// RHS
			traceRuleApply("FUNC", 1319, "{| rule bitsInWords(I,_23)=>ceilDiv(I,#token(\"64\",\"Int\")) requires `_andBool_`(isInt(I),isSchedule(_23)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e95b0da34cd7ef7a0eb6910a4d671ed1bcfe7474e082e6acc652d0d161585306) contentStartColumn(10) contentStartLine(170) org.kframework.attributes.Location(Location(170,10,170,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval1458, err1458 := evalCeilDiv( // ceilDiv(I,#token("64","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("64"),
				config, -1)
			if err1458 != nil {
				return m.NoResult, err1458
			}
			return eval1458, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalBitsInWords", args: []m.K{c1, c2}}
}

func evalIsAndInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1320
	// source: ? @?
	// {| rule isAndInst(#KToken(#token("AndInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAndInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1320, "{| rule isAndInst(#KToken(#token(\"AndInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1321
	// source: ? @?
	// {| rule isAndInst(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=and_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1459, err1459 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1459 != nil {
			return m.NoResult, err1459
		}
		eval1460, err1460 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1460 != nil {
			return m.NoResult, err1460
		}
		eval1461, err1461 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1461 != nil {
			return m.NoResult, err1461
		}
		if ((m.IsTrue(eval1459)) &&
		   (m.IsTrue(eval1460))) &&
		   (m.IsTrue(eval1461)) {
			// RHS
			traceRuleApply("FUNC", 1321, "{| rule isAndInst(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1322
	// source: ? @?
	// {| rule isAndInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1322, "{| rule isAndInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFuncLabelsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1323
	// source: ? @?
	// {| rule isFuncLabelsCellOpt(#KToken(#token("FuncLabelsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncLabelsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1323, "{| rule isFuncLabelsCellOpt(#KToken(#token(\"FuncLabelsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1324
	// source: ? @?
	// {| rule isFuncLabelsCellOpt(noFuncLabelsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFuncLabelsCell && len(kapp0.List) == 0 { // noFuncLabelsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1324, "{| rule isFuncLabelsCellOpt(noFuncLabelsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1325
	// source: ? @?
	// {| rule isFuncLabelsCellOpt(#KToken(#token("FuncLabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1325, "{| rule isFuncLabelsCellOpt(#KToken(#token(\"FuncLabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1326
	// source: ? @?
	// {| rule isFuncLabelsCellOpt(`<funcLabels>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncLabelsXgt && len(kapp0.List) == 1 { // `<funcLabels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 1326, "{| rule isFuncLabelsCellOpt(`<funcLabels>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1327
	// source: ? @?
	// {| rule isFuncLabelsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1327, "{| rule isFuncLabelsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalFunctionCellMapItem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.element
	lbl := m.LblFunctionCellMapItem // FunctionCellMapItem
	sort := m.SortFunctionCellMap
	if hookRes, hookErr := mapHooks.element(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFunctionCellMapItem", args: []m.K{c1, c2}}
}

func evalCcallarg(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1328
	// source: iele-gas.k @775
	// {| rule `Ccallarg`(SCHED,ARGS)=>#sizeRegs(ARGS) requires `_andBool_`(`_andBool_`(isOperands(ARGS),isSchedule(SCHED)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(84989c04322b55f9ad0d8f6f9a9a614e9d9d89645d17b770eed94187d3f5fcc9) contentStartColumn(10) contentStartLine(775) org.kframework.attributes.Location(Location(775,10,776,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		varARGS := c2 // lhs KVariable ARGS
		// REQUIRES
		eval1462, err1462 := evalIsOperands( // isOperands(ARGS)
			varARGS,
			config, -1)
		if err1462 != nil {
			return m.NoResult, err1462
		}
		eval1463, err1463 := evalIsSchedule( // isSchedule(SCHED)
			varSCHED,
			config, -1)
		if err1463 != nil {
			return m.NoResult, err1463
		}
		eval1464, err1464 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
			&m.KApply{Label: m.LblGnewmoveXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewmove_IELE-GAS
			}},
			varSCHED,
			config, -1)
		if err1464 != nil {
			return m.NoResult, err1464
		}
		if ((m.IsTrue(eval1462)) &&
		   (m.IsTrue(eval1463))) &&
		   (m.IsTrue(eval1464)) {
			// RHS
			traceRuleApply("FUNC", 1328, "{| rule `Ccallarg`(SCHED,ARGS)=>#sizeRegs(ARGS) requires `_andBool_`(`_andBool_`(isOperands(ARGS),isSchedule(SCHED)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84989c04322b55f9ad0d8f6f9a9a614e9d9d89645d17b770eed94187d3f5fcc9) contentStartColumn(10) contentStartLine(775) org.kframework.attributes.Location(Location(775,10,776,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1465, err1465 := evalXhashsizeRegs( // #sizeRegs(ARGS)
				varARGS,
				config, -1)
			if err1465 != nil {
				return m.NoResult, err1465
			}
			return eval1465, nil
		}
	}

	// rule #1329
	// source: iele-gas.k @773
	// {| rule `Ccallarg`(SCHED,ARGS)=>intSizes(ARGS) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInts(ARGS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(b11fb3bc9013e0ad3eff81f59d7f7a0fd043e0116c8f6a4adf7a976334a74ec9) contentStartColumn(10) contentStartLine(773) org.kframework.attributes.Location(Location(773,10,774,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		varARGS := c2 // lhs KVariable ARGS
		// REQUIRES
		eval1466, err1466 := evalIsSchedule( // isSchedule(SCHED)
			varSCHED,
			config, -1)
		if err1466 != nil {
			return m.NoResult, err1466
		}
		eval1467, err1467 := evalIsInts( // isInts(ARGS)
			varARGS,
			config, -1)
		if err1467 != nil {
			return m.NoResult, err1467
		}
		eval1468, err1468 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
			&m.KApply{Label: m.LblGnewmoveXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewmove_IELE-GAS
			}},
			varSCHED,
			config, -1)
		if err1468 != nil {
			return m.NoResult, err1468
		}
		if ((m.IsTrue(eval1466)) &&
		   (m.IsTrue(eval1467))) &&
		   (!(m.IsTrue(eval1468))) {
			// RHS
			traceRuleApply("FUNC", 1329, "{| rule `Ccallarg`(SCHED,ARGS)=>intSizes(ARGS) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInts(ARGS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b11fb3bc9013e0ad3eff81f59d7f7a0fd043e0116c8f6a4adf7a976334a74ec9) contentStartColumn(10) contentStartLine(773) org.kframework.attributes.Location(Location(773,10,774,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1469, err1469 := evalIntSizes( // intSizes(ARGS)
				varARGS,
				config, -1)
			if err1469 != nil {
				return m.NoResult, err1469
			}
			return eval1469, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCcallarg", args: []m.K{c1, c2}}
}

func evalSha256(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.sha256
	lbl := m.LblSha256 // Sha256
	sort := m.SortString
	if hookRes, hookErr := krypto.Sha256(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.sha256, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSha256", args: []m.K{c}}
}

func evalIsNparamsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1330
	// source: ? @?
	// {| rule isNparamsCell(#KToken(#token("NparamsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNparamsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1330, "{| rule isNparamsCell(#KToken(#token(\"NparamsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1331
	// source: ? @?
	// {| rule isNparamsCell(`<nparams>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnparamsXgt && len(kapp0.List) == 1 { // `<nparams>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1331, "{| rule isNparamsCell(`<nparams>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1332
	// source: ? @?
	// {| rule isNparamsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1332, "{| rule isNparamsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFiveOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1333
	// source: ? @?
	// {| rule isFiveOp(`LOG4`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG4 && len(kapp0.List) == 0 { // `LOG4`(.KList)
		// RHS
		traceRuleApply("FUNC", 1333, "{| rule isFiveOp(`LOG4`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1334
	// source: ? @?
	// {| rule isFiveOp(#KToken(#token("FiveOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFiveOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1334, "{| rule isFiveOp(#KToken(#token(\"FiveOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1335
	// source: ? @?
	// {| rule isFiveOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1335, "{| rule isFiveOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashloadFunction(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, config m.K, guard int) (m.K, error) {
	// rule #1336
	// source: iele.k @1764
	// {| rule #loadFunction(FUNCS,BLOCKS,`<program>`(`<functions>`(REST),`<funcIds>`(NAMES),`<funcLabels>`(LBLS),_0,_1,_2),NAME,_5,IDX)=>#loadDeclarations(FUNCS,`<program>`(`<functions>`(`_FunctionCellMap_`(REST,`FunctionCellMapItem`(_3,`<function>`(_3,_4,`<instructions>`(BLOCKS),`<jumpTable>`(#computeJumpTable(BLOCKS)),`<nregs>`(#computeNRegs(BLOCKS)))))),`<funcIds>`(`_Set_`(NAMES,`SetItem`(NAME))),`<funcLabels>`(`_Map_`(LBLS,`#if_#then_#else_#fi_K-EQUAL`(`_=/=K_`(NAME,#token("init","IeleName")),`_|->_`(IDX,NAME),`.Map`(.KList)))),_0,_1,_2),`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(NAME,#token("init","IeleName")),IDX,`_+Int_`(IDX,#token("1","Int")))) requires `_andBool_`(`_andBool_`(`_andBool_`(#mapChoice(_3,_5),#match(`<function>`(_3,_4,`<instructions>`(_101),`<jumpTable>`(_102),`<nregs>`(_103)),`Map:lookup`(_5,_3))),`_==K_`(`.FunctionCellMap`(.KList),`_[_<-undef]`(_5,_3))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(_103)),isInt(IDX)),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isProgramSizeCell(_1)),isExportedCell(_0)),isContractCodeCell(_2))),isSet(NAMES)),isBlocks(_101)),isIeleName(NAME)),isMap(_102)),isTopLevelDefinitions(FUNCS)),isMap(LBLS)),`_andBool_`(#token("true","Bool"),isFunctionCellMap(REST))),`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdCell(_3)),isNparamsCell(_4)))) ensures #token("true","Bool") [UNIQUE_ID(ca6998dee8b41057a3b12e43ac5329d70fd0f698384e4562900ea1d66d115c88) contentStartColumn(10) contentStartLine(1764) org.kframework.attributes.Location(Location(1764,10,1765,423)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varFUNCS := c1 // lhs KVariable FUNCS
		varBLOCKS := c2 // lhs KVariable BLOCKS
		if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblXltprogramXgt && len(kapp0.List) == 6 { // `<program>`(`<functions>`(REST),`<funcIds>`(NAMES),`<funcLabels>`(LBLS),_0,_1,_2)
			if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXltfunctionsXgt && len(kapp1.List) == 1 { // `<functions>`(REST)
				if varREST, t := kapp1.List[0].(*m.Map); t && varREST.Sort == m.SortFunctionCellMap { // lhs KVariable with hook:MAP.Map
					if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXltfuncIDsXgt && len(kapp2.List) == 1 { // `<funcIds>`(NAMES)
						if varNAMES, t := kapp2.List[0].(*m.Set); t && varNAMES.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
							if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXltfuncLabelsXgt && len(kapp3.List) == 1 { // `<funcLabels>`(LBLS)
								if varLBLS, t := kapp3.List[0].(*m.Map); t && varLBLS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varXu0 := kapp0.List[3] // lhs KVariable _0
									varXu1 := kapp0.List[4] // lhs KVariable _1
									varXu2 := kapp0.List[5] // lhs KVariable _2
									varNAME := c4 // lhs KVariable NAME
									varXu5 := c5 // lhs KVariable _5
									if varIDX, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
										// LOOKUPS
										if guard < 1336 {
											// lookup:#mapChoice(_3,_5)
											mapChoice0Eval := varXu5
											mapChoice0Obj, mapChoice0TypeOk := mapChoice0Eval.(*m.Map)
											if !mapChoice0TypeOk {
												return evalXhashloadFunction(c1, c2, c3, c4, c5, c6, config, 1336) // reapply
											}
											var mapChoice0Result m.K = m.InternedBottom
											for mapChoice0Key := range mapChoice0Obj.Data {
												var mapChoice0Err error
												mapChoice0Elem, mapChoice0Err := mapChoice0Key.ToKItem()
												if mapChoice0Err != nil {
													return m.NoResult, mapChoice0Err
												}
												varXu3 := mapChoice0Elem // lhs KVariable _3
												mapChoice0Result, mapChoice0Err = func() (m.K, error) {
													// lookup:#match(`<function>`(_3,_4,`<instructions>`(_101),`<jumpTable>`(_102),`<nregs>`(_103)),`Map:lookup`(_5,_3))
													eval1470, err1470 := evalMapXcolonlookup( // `Map:lookup`(_5,_3)
														varXu5,
														varXu3,
														config, -1)
													if err1470 != nil {
														return m.NoResult, err1470
													}
													matchEval1 := eval1470
													if _, isBottom := matchEval1.(*m.Bottom); isBottom {
														return evalXhashloadFunction(c1, c2, c3, c4, c5, c6, config, 1336) // reapply
													}
													if kapp0, t := matchEval1.(*m.KApply); t && kapp0.Label == m.LblXltfunctionXgt && len(kapp0.List) == 5 { // `<function>`(_3,_4,`<instructions>`(_101),`<jumpTable>`(_102),`<nregs>`(_103))
														if kapp0.List[0].Equals(varXu3) { // lhs KVariable, which reappears:_3
															varXu4 := kapp0.List[1] // lhs KVariable _4
															if kapp1, t := kapp0.List[2].(*m.KApply); t && kapp1.Label == m.LblXltinstructionsXgt && len(kapp1.List) == 1 { // `<instructions>`(_101)
																varXu101 := kapp1.List[0] // lhs KVariable _101
																if kapp2, t := kapp0.List[3].(*m.KApply); t && kapp2.Label == m.LblXltjumpTableXgt && len(kapp2.List) == 1 { // `<jumpTable>`(_102)
																	if varXu102, t := kapp2.List[0].(*m.Map); t && varXu102.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
																		if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXltnregsXgt && len(kapp3.List) == 1 { // `<nregs>`(_103)
																			if varXu103, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
																				// REQUIRES
																				eval1472, err1472 := evalXdotFunctionCellMap(config, -1) // `.FunctionCellMap`(.KList)
																				if err1472 != nil {
																					return m.NoResult, err1472
																				}
																				eval1473, err1473 := evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_5,_3)
																					varXu5,
																					varXu3,
																					config, -1)
																				if err1473 != nil {
																					return m.NoResult, err1473
																				}
																				eval1471, err1471 := evalXuXeqXeqKXu( // `_==K_`(`.FunctionCellMap`(.KList),`_[_<-undef]`(_5,_3))
																					eval1472,
																					eval1473,
																					config, -1)
																				if err1471 != nil {
																					return m.NoResult, err1471
																				}
																				eval1474, err1474 := evalIsBlocks( // isBlocks(BLOCKS)
																					varBLOCKS,
																					config, -1)
																				if err1474 != nil {
																					return m.NoResult, err1474
																				}
																				eval1475, err1475 := evalIsInt( // isInt(_103)
																					varXu103,
																					config, -1)
																				if err1475 != nil {
																					return m.NoResult, err1475
																				}
																				eval1476, err1476 := evalIsProgramSizeCell( // isProgramSizeCell(_1)
																					varXu1,
																					config, -1)
																				if err1476 != nil {
																					return m.NoResult, err1476
																				}
																				eval1477, err1477 := evalIsExportedCell( // isExportedCell(_0)
																					varXu0,
																					config, -1)
																				if err1477 != nil {
																					return m.NoResult, err1477
																				}
																				eval1478, err1478 := evalIsContractCodeCell( // isContractCodeCell(_2)
																					varXu2,
																					config, -1)
																				if err1478 != nil {
																					return m.NoResult, err1478
																				}
																				eval1479, err1479 := evalIsBlocks( // isBlocks(_101)
																					varXu101,
																					config, -1)
																				if err1479 != nil {
																					return m.NoResult, err1479
																				}
																				eval1480, err1480 := evalIsIeleName( // isIeleName(NAME)
																					varNAME,
																					config, -1)
																				if err1480 != nil {
																					return m.NoResult, err1480
																				}
																				eval1481, err1481 := evalIsMap( // isMap(_102)
																					varXu102,
																					config, -1)
																				if err1481 != nil {
																					return m.NoResult, err1481
																				}
																				eval1482, err1482 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(FUNCS)
																					varFUNCS,
																					config, -1)
																				if err1482 != nil {
																					return m.NoResult, err1482
																				}
																				eval1483, err1483 := evalIsFuncIDCell( // isFuncIdCell(_3)
																					varXu3,
																					config, -1)
																				if err1483 != nil {
																					return m.NoResult, err1483
																				}
																				eval1484, err1484 := evalIsNparamsCell( // isNparamsCell(_4)
																					varXu4,
																					config, -1)
																				if err1484 != nil {
																					return m.NoResult, err1484
																				}
																				if (/* rhs precomputed lookup #mapChoice && lookup #match */ /* && */
																				   m.IsTrue(eval1471)) &&
																				   ((((((((m.IsTrue(eval1474)) &&
																				   (m.IsTrue(eval1475)) /* && */ /* rhs precomputed isInt(IDX) */ ) &&
																				   (((/* rhs KToken */ /* && */
																				   m.IsTrue(eval1476)) &&
																				   (m.IsTrue(eval1477))) &&
																				   (m.IsTrue(eval1478))) /* && */ /* rhs precomputed isSet(NAMES) */ ) &&
																				   (m.IsTrue(eval1479))) &&
																				   (m.IsTrue(eval1480))) &&
																				   (m.IsTrue(eval1481))) &&
																				   (m.IsTrue(eval1482)) /* && */ /* rhs precomputed isMap(LBLS) */  /* && */ /* rhs precomputed KToken && isFunctionCellMap(REST) */ ) &&
																				   ((/* rhs KToken */ /* && */
																				   m.IsTrue(eval1483)) &&
																				   (m.IsTrue(eval1484)))) {
																					// RHS
																					traceRuleApply("FUNC", 1336, "{| rule #loadFunction(FUNCS,BLOCKS,`<program>`(`<functions>`(REST),`<funcIds>`(NAMES),`<funcLabels>`(LBLS),_0,_1,_2),NAME,_5,IDX)=>#loadDeclarations(FUNCS,`<program>`(`<functions>`(`_FunctionCellMap_`(REST,`FunctionCellMapItem`(_3,`<function>`(_3,_4,`<instructions>`(BLOCKS),`<jumpTable>`(#computeJumpTable(BLOCKS)),`<nregs>`(#computeNRegs(BLOCKS)))))),`<funcIds>`(`_Set_`(NAMES,`SetItem`(NAME))),`<funcLabels>`(`_Map_`(LBLS,`#if_#then_#else_#fi_K-EQUAL`(`_=/=K_`(NAME,#token(\"init\",\"IeleName\")),`_|->_`(IDX,NAME),`.Map`(.KList)))),_0,_1,_2),`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(NAME,#token(\"init\",\"IeleName\")),IDX,`_+Int_`(IDX,#token(\"1\",\"Int\")))) requires `_andBool_`(`_andBool_`(`_andBool_`(#mapChoice(_3,_5),#match(`<function>`(_3,_4,`<instructions>`(_101),`<jumpTable>`(_102),`<nregs>`(_103)),`Map:lookup`(_5,_3))),`_==K_`(`.FunctionCellMap`(.KList),`_[_<-undef]`(_5,_3))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isInt(_103)),isInt(IDX)),`_andBool_`(`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isProgramSizeCell(_1)),isExportedCell(_0)),isContractCodeCell(_2))),isSet(NAMES)),isBlocks(_101)),isIeleName(NAME)),isMap(_102)),isTopLevelDefinitions(FUNCS)),isMap(LBLS)),`_andBool_`(#token(\"true\",\"Bool\"),isFunctionCellMap(REST))),`_andBool_`(`_andBool_`(#token(\"true\",\"Bool\"),isFuncIdCell(_3)),isNparamsCell(_4)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ca6998dee8b41057a3b12e43ac5329d70fd0f698384e4562900ea1d66d115c88) contentStartColumn(10) contentStartLine(1764) org.kframework.attributes.Location(Location(1764,10,1765,423)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
																					eval1488, err1488 := evalXhashcomputeJumpTable( // #computeJumpTable(BLOCKS)
																						varBLOCKS,
																						config, -1)
																					if err1488 != nil {
																						return m.NoResult, err1488
																					}
																					eval1489, err1489 := evalXhashcomputeNRegs( // #computeNRegs(BLOCKS)
																						varBLOCKS,
																						config, -1)
																					if err1489 != nil {
																						return m.NoResult, err1489
																					}
																					eval1487, err1487 := evalFunctionCellMapItem( // `FunctionCellMapItem`(_3,`<function>`(_3,_4,`<instructions>`(BLOCKS),`<jumpTable>`(#computeJumpTable(BLOCKS)),`<nregs>`(#computeNRegs(BLOCKS))))
																						varXu3,
																						&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
																							varXu3,
																							varXu4,
																							&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
																								varBLOCKS,
																							}},
																							&m.KApply{Label: m.LblXltjumpTableXgt, List: []m.K{ // as-is <jumpTable>
																								eval1488,
																							}},
																							&m.KApply{Label: m.LblXltnregsXgt, List: []m.K{ // as-is <nregs>
																								eval1489,
																							}},
																						}},
																						config, -1)
																					if err1487 != nil {
																						return m.NoResult, err1487
																					}
																					eval1486, err1486 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(REST,`FunctionCellMapItem`(_3,`<function>`(_3,_4,`<instructions>`(BLOCKS),`<jumpTable>`(#computeJumpTable(BLOCKS)),`<nregs>`(#computeNRegs(BLOCKS)))))
																						varREST,
																						eval1487,
																						config, -1)
																					if err1486 != nil {
																						return m.NoResult, err1486
																					}
																					eval1491, err1491 := evalSetItem( // `SetItem`(NAME)
																						varNAME,
																						config, -1)
																					if err1491 != nil {
																						return m.NoResult, err1491
																					}
																					eval1490, err1490 := evalXuSetXu( // `_Set_`(NAMES,`SetItem`(NAME))
																						varNAMES,
																						eval1491,
																						config, -1)
																					if err1490 != nil {
																						return m.NoResult, err1490
																					}
																					eval1494, err1494 := evalXuXeqXslashXeqKXu( // `_=/=K_`(NAME,#token("init","IeleName"))
																						varNAME,
																						/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "init"},
																						config, -1)
																					if err1494 != nil {
																						return m.NoResult, err1494
																					}
																					eval1495, err1495 := evalXuXpipeXhyphenXgtXu( // `_|->_`(IDX,NAME)
																						varIDX,
																						varNAME,
																						config, -1)
																					if err1495 != nil {
																						return m.NoResult, err1495
																					}
																					eval1496, err1496 := evalXdotMap(config, -1) // `.Map`(.KList)
																					if err1496 != nil {
																						return m.NoResult, err1496
																					}
																					eval1493, err1493 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_=/=K_`(NAME,#token("init","IeleName")),`_|->_`(IDX,NAME),`.Map`(.KList))
																						eval1494,
																						eval1495,
																						eval1496,
																						config, -1)
																					if err1493 != nil {
																						return m.NoResult, err1493
																					}
																					eval1492, err1492 := evalXuMapXu( // `_Map_`(LBLS,`#if_#then_#else_#fi_K-EQUAL`(`_=/=K_`(NAME,#token("init","IeleName")),`_|->_`(IDX,NAME),`.Map`(.KList)))
																						varLBLS,
																						eval1493,
																						config, -1)
																					if err1492 != nil {
																						return m.NoResult, err1492
																					}
																					eval1498, err1498 := evalXuXeqXeqKXu( // `_==K_`(NAME,#token("init","IeleName"))
																						varNAME,
																						/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "init"},
																						config, -1)
																					if err1498 != nil {
																						return m.NoResult, err1498
																					}
																					eval1499, err1499 := evalXuXplusIntXu( // `_+Int_`(IDX,#token("1","Int"))
																						varIDX,
																						/* rhs KToken */ m.NewIntFromString("1"),
																						config, -1)
																					if err1499 != nil {
																						return m.NoResult, err1499
																					}
																					eval1497, err1497 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_==K_`(NAME,#token("init","IeleName")),IDX,`_+Int_`(IDX,#token("1","Int")))
																						eval1498,
																						varIDX,
																						eval1499,
																						config, -1)
																					if err1497 != nil {
																						return m.NoResult, err1497
																					}
																					eval1485, err1485 := evalXhashloadDeclarations( // #loadDeclarations(FUNCS,`<program>`(`<functions>`(`_FunctionCellMap_`(REST,`FunctionCellMapItem`(_3,`<function>`(_3,_4,`<instructions>`(BLOCKS),`<jumpTable>`(#computeJumpTable(BLOCKS)),`<nregs>`(#computeNRegs(BLOCKS)))))),`<funcIds>`(`_Set_`(NAMES,`SetItem`(NAME))),`<funcLabels>`(`_Map_`(LBLS,`#if_#then_#else_#fi_K-EQUAL`(`_=/=K_`(NAME,#token("init","IeleName")),`_|->_`(IDX,NAME),`.Map`(.KList)))),_0,_1,_2),`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(NAME,#token("init","IeleName")),IDX,`_+Int_`(IDX,#token("1","Int"))))
																						varFUNCS,
																						&m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
																							&m.KApply{Label: m.LblXltfunctionsXgt, List: []m.K{ // as-is <functions>
																								eval1486,
																							}},
																							&m.KApply{Label: m.LblXltfuncIDsXgt, List: []m.K{ // as-is <funcIds>
																								eval1490,
																							}},
																							&m.KApply{Label: m.LblXltfuncLabelsXgt, List: []m.K{ // as-is <funcLabels>
																								eval1492,
																							}},
																							varXu0,
																							varXu1,
																							varXu2,
																						}},
																						eval1497,
																						config, -1)
																					if err1485 != nil {
																						return m.NoResult, err1485
																					}
																					return eval1485, nil
																				}
																			}
																		}
																	}
																}
															}
														}
													} else {
														return evalXhashloadFunction(c1, c2, c3, c4, c5, c6, config, 1336) // reapply
													}

													return m.InternedBottom, nil // #setChoice end
												}()
												if mapChoice0Err != nil {
													return m.NoResult, mapChoice0Err
												}

											}
											if mapChoice0Result == m.InternedBottom {
												return evalXhashloadFunction(c1, c2, c3, c4, c5, c6, config, 1336) // reapply
											}
											return mapChoice0Result, nil

										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashloadFunction", args: []m.K{c1, c2, c3, c4, c5, c6}}
}

func evalBytes2Int(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.bytes2int
	lbl := m.LblBytes2Int // Bytes2Int
	sort := m.SortInt
	if hookRes, hookErr := bytesHooks.bytes2int(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.bytes2int, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBytes2Int", args: []m.K{c1, c2, c3}}
}

func evalString2Bytes(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.string2bytes
	lbl := m.LblString2Bytes // String2Bytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.string2bytes(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.string2bytes, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2Bytes", args: []m.K{c}}
}

func evalXuFunctionCellMapXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.concat
	lbl := m.LblXuFunctionCellMapXu // _FunctionCellMap_
	sort := m.SortFunctionCellMap
	if hookRes, hookErr := mapHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuFunctionCellMapXu", args: []m.K{c1, c2}}
}

func evalIsWellFormednessCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1337
	// source: ? @?
	// {| rule isWellFormednessCellOpt(#KToken(#token("WellFormednessCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1337, "{| rule isWellFormednessCellOpt(#KToken(#token(\"WellFormednessCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1338
	// source: ? @?
	// {| rule isWellFormednessCellOpt(#KToken(#token("WellFormednessCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1338, "{| rule isWellFormednessCellOpt(#KToken(#token(\"WellFormednessCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1339
	// source: ? @?
	// {| rule isWellFormednessCellOpt(noWellFormednessCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoWellFormednessCell && len(kapp0.List) == 0 { // noWellFormednessCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1339, "{| rule isWellFormednessCellOpt(noWellFormednessCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1340
	// source: ? @?
	// {| rule isWellFormednessCellOpt(`<well-formedness>`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXgt && len(kapp0.List) == 4 { // `<well-formedness>`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1500, err1500 := evalIsTypeCheckingCell( // isTypeCheckingCell(K0)
			varK0,
			config, -1)
		if err1500 != nil {
			return m.NoResult, err1500
		}
		eval1501, err1501 := evalIsWellFormednessScheduleCell( // isWellFormednessScheduleCell(K1)
			varK1,
			config, -1)
		if err1501 != nil {
			return m.NoResult, err1501
		}
		eval1502, err1502 := evalIsContractsCell( // isContractsCell(K2)
			varK2,
			config, -1)
		if err1502 != nil {
			return m.NoResult, err1502
		}
		eval1503, err1503 := evalIsCurrentContractCell( // isCurrentContractCell(K3)
			varK3,
			config, -1)
		if err1503 != nil {
			return m.NoResult, err1503
		}
		if (((m.IsTrue(eval1500)) &&
		   (m.IsTrue(eval1501))) &&
		   (m.IsTrue(eval1502))) &&
		   (m.IsTrue(eval1503)) {
			// RHS
			traceRuleApply("FUNC", 1340, "{| rule isWellFormednessCellOpt(`<well-formedness>`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1341
	// source: ? @?
	// {| rule isWellFormednessCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1341, "{| rule isWellFormednessCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMinIntXlparenXuXcommaXuXrparenXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.min
	lbl := m.LblMinIntXlparenXuXcommaXuXrparenXuINT // minInt(_,_)_INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.min(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.min, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1342
	// source: domains.k @397
	// {| rule `minInt(_,_)_INT`(I1,I2)=>I2 requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_>=Int__INT`(I1,I2)) ensures #token("true","Bool") [UNIQUE_ID(f93c59dd0bdb46ab467898db4ad231d94d30e5b88427054becac14f3969eff8e) contentStartColumn(8) contentStartLine(397) org.kframework.attributes.Location(Location(397,8,397,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1504, err1504 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(I1,I2)
				varI1,
				varI2,
				config, -1)
			if err1504 != nil {
				return m.NoResult, err1504
			}
			if /* rhs precomputed isInt(I1) && isInt(I2) */ /* && */
			   m.IsTrue(eval1504) {
				// RHS
				traceRuleApply("FUNC", 1342, "{| rule `minInt(_,_)_INT`(I1,I2)=>I2 requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_>=Int__INT`(I1,I2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f93c59dd0bdb46ab467898db4ad231d94d30e5b88427054becac14f3969eff8e) contentStartColumn(8) contentStartLine(397) org.kframework.attributes.Location(Location(397,8,397,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return varI2, nil
			}
		}
	}

	// rule #1343
	// source: domains.k @396
	// {| rule `minInt(_,_)_INT`(I1,I2)=>I1 requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_<=Int__INT`(I1,I2)) ensures #token("true","Bool") [UNIQUE_ID(c3daf36ef673ae6ce68430bc5170ec91b3d397f5f3e34aee375a841739bcfc9b) contentStartColumn(8) contentStartLine(396) org.kframework.attributes.Location(Location(396,8,396,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1505, err1505 := evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(I1,I2)
				varI1,
				varI2,
				config, -1)
			if err1505 != nil {
				return m.NoResult, err1505
			}
			if /* rhs precomputed isInt(I1) && isInt(I2) */ /* && */
			   m.IsTrue(eval1505) {
				// RHS
				traceRuleApply("FUNC", 1343, "{| rule `minInt(_,_)_INT`(I1,I2)=>I1 requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_<=Int__INT`(I1,I2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c3daf36ef673ae6ce68430bc5170ec91b3d397f5f3e34aee375a841739bcfc9b) contentStartColumn(8) contentStartLine(396) org.kframework.attributes.Location(Location(396,8,396,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return varI1, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalMinIntXlparenXuXcommaXuXrparenXuINT", args: []m.K{c1, c2}}
}

func evalIsMap(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortMap {
		return m.BoolTrue, nil
	}
	// rule #1344
	// source: ? @?
	// {| rule isMap(#KToken(#token("Map","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMap { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1344, "{| rule isMap(#KToken(#token(\"Map\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1345
	// source: ? @?
	// {| rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1345, "{| rule isMap(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitRegsCell(config m.K, guard int) (m.K, error) {
	// rule #1346
	// source: ? @?
	// {| rule initRegsCell(.KList)=>`<regs>`(`.Array_IELE-DATA`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(29bc5064c08b11bad5206db8218305875fcd62a4e7f6843227943b1dd2e264cd) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1346, "{| rule initRegsCell(.KList)=>`<regs>`(`.Array_IELE-DATA`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(29bc5064c08b11bad5206db8218305875fcd62a4e7f6843227943b1dd2e264cd) initializer()] |}")
	eval1506, err1506 := evalXdotArrayXuIELEXhyphenDATA(config, -1) // `.Array_IELE-DATA`(.KList)
	if err1506 != nil {
		return m.NoResult, err1506
	}
	return &m.KApply{Label: m.LblXltregsXgt, List: []m.K{ // as-is <regs>
		eval1506,
	}}, nil

}

func evalXuXltXuXgtXuIELEXhyphenGAS(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1347
	// source: iele-gas.k @1109
	// {| rule `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2c7ecc9dc586ea150b57a110d0e7f545f5fadee65ccc93debbb1d0f104c859c8) contentStartColumn(10) contentStartLine(1109) org.kframework.attributes.Location(Location(1109,10,1109,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGaddwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gaddword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1347, "{| rule `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c7ecc9dc586ea150b57a110d0e7f545f5fadee65ccc93debbb1d0f104c859c8) contentStartColumn(10) contentStartLine(1109) org.kframework.attributes.Location(Location(1109,10,1109,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1348
	// source: iele-gas.k @1000
	// {| rule `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b841e11da20e98e79d7ac3ac6e9744913d43085f71e81063e090bfcc67b6383e) contentStartColumn(10) contentStartLine(1000) org.kframework.attributes.Location(Location(1000,10,1000,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodmod_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1348, "{| rule `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b841e11da20e98e79d7ac3ac6e9744913d43085f71e81063e090bfcc67b6383e) contentStartColumn(10) contentStartLine(1000) org.kframework.attributes.Location(Location(1000,10,1000,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1349
	// source: iele-gas.k @1126
	// {| rule `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0e977d559b981b1413d2fa520a5200ba83a9f8e696bd7d6ef88d6753d581e728) contentStartColumn(10) contentStartLine(1126) org.kframework.attributes.Location(Location(1126,10,1126,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbitwisewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwiseword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1349, "{| rule `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0e977d559b981b1413d2fa520a5200ba83a9f8e696bd7d6ef88d6753d581e728) contentStartColumn(10) contentStartLine(1126) org.kframework.attributes.Location(Location(1126,10,1126,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1350
	// source: iele-gas.k @1044
	// {| rule `_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("50","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ade372b21233ab649661de66a18b76a11d6f9835ec9b395d4d7a5b7b9f3bfd5c) contentStartColumn(10) contentStartLine(1044) org.kframework.attributes.Location(Location(1044,10,1044,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1350, "{| rule `_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"50\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ade372b21233ab649661de66a18b76a11d6f9835ec9b395d4d7a5b7b9f3bfd5c) contentStartColumn(10) contentStartLine(1044) org.kframework.attributes.Location(Location(1044,10,1044,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("50"), nil
		}
	}

	// rule #1351
	// source: iele-gas.k @1146
	// {| rule `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a1621c2a57f2057c153b8c4dbe8475b7dff6a2e792571792cc882764c55e0524) contentStartColumn(10) contentStartLine(1146) org.kframework.attributes.Location(Location(1146,10,1146,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1351, "{| rule `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a1621c2a57f2057c153b8c4dbe8475b7dff6a2e792571792cc882764c55e0524) contentStartColumn(10) contentStartLine(1146) org.kframework.attributes.Location(Location(1146,10,1146,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1352
	// source: iele-gas.k @1183
	// {| rule `_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("26000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1e48185a1cc08b09924a8e75b2d429e892a9dda53b1d6f1df0ac0501326eade9) contentStartColumn(10) contentStartLine(1183) org.kframework.attributes.Location(Location(1183,10,1183,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecpairingpairXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairingpair_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1352, "{| rule `_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"26000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1e48185a1cc08b09924a8e75b2d429e892a9dda53b1d6f1df0ac0501326eade9) contentStartColumn(10) contentStartLine(1183) org.kframework.attributes.Location(Location(1183,10,1183,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("26000000"), nil
		}
	}

	// rule #1353
	// source: iele-gas.k @1043
	// {| rule `_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("100","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(00bb98423fb4c5dcf6c4c8e4660ede69662f1252c58540fc1b7d75bdf1f26703) contentStartColumn(10) contentStartLine(1043) org.kframework.attributes.Location(Location(1043,10,1043,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadkey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1353, "{| rule `_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"100\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00bb98423fb4c5dcf6c4c8e4660ede69662f1252c58540fc1b7d75bdf1f26703) contentStartColumn(10) contentStartLine(1043) org.kframework.attributes.Location(Location(1043,10,1043,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("100"), nil
		}
	}

	// rule #1354
	// source: iele-gas.k @1031
	// {| rule `_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("700","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(02ad061d14a0fa3ef177df4120ea8c565509f273c79b0171572e916d76680285) contentStartColumn(10) contentStartLine(1031) org.kframework.attributes.Location(Location(1031,10,1031,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGextcodesizeXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gextcodesize_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1354, "{| rule `_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"700\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(02ad061d14a0fa3ef177df4120ea8c565509f273c79b0171572e916d76680285) contentStartColumn(10) contentStartLine(1031) org.kframework.attributes.Location(Location(1031,10,1031,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("700"), nil
		}
	}

	// rule #1355
	// source: iele-gas.k @1024
	// {| rule `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3a2ca6ab58f4d87fadbfd5474bc642772097b773b6b0121d656be2e12bc8cde3) contentStartColumn(10) contentStartLine(1024) org.kframework.attributes.Location(Location(1024,10,1024,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadcellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadcell_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1355, "{| rule `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3a2ca6ab58f4d87fadbfd5474bc642772097b773b6b0121d656be2e12bc8cde3) contentStartColumn(10) contentStartLine(1024) org.kframework.attributes.Location(Location(1024,10,1024,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1356
	// source: iele-gas.k @1149
	// {| rule `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(348b9a16f417d5f09c513e099375afae7768b2d2688519d8df43188069684a92) contentStartColumn(10) contentStartLine(1149) org.kframework.attributes.Location(Location(1149,10,1149,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstoreword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1356, "{| rule `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(348b9a16f417d5f09c513e099375afae7768b2d2688519d8df43188069684a92) contentStartColumn(10) contentStartLine(1149) org.kframework.attributes.Location(Location(1149,10,1149,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4"), nil
		}
	}

	// rule #1357
	// source: iele-gas.k @1055
	// {| rule `_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("200","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ccfc77b7c282d64628755b11bbf6a284334b00950d9120bd68a6c54d39d219f1) contentStartColumn(10) contentStartLine(1055) org.kframework.attributes.Location(Location(1055,10,1055,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcodedepositXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcodedeposit_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1357, "{| rule `_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"200\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ccfc77b7c282d64628755b11bbf6a284334b00950d9120bd68a6c54d39d219f1) contentStartColumn(10) contentStartLine(1055) org.kframework.attributes.Location(Location(1055,10,1055,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("200"), nil
		}
	}

	// rule #1358
	// source: iele-gas.k @1052
	// {| rule `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("25000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(69da0696a2f0b3d6c25057d3bfacc16e54ae90e7885e7156dae5d936d1c132ca) contentStartColumn(10) contentStartLine(1052) org.kframework.attributes.Location(Location(1052,10,1052,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewaccount_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1358, "{| rule `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"25000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(69da0696a2f0b3d6c25057d3bfacc16e54ae90e7885e7156dae5d936d1c132ca) contentStartColumn(10) contentStartLine(1052) org.kframework.attributes.Location(Location(1052,10,1052,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("25000"), nil
		}
	}

	// rule #1359
	// source: iele-gas.k @1028
	// {| rule `_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(245196fd1c5bf384b4c02a7bff3031efe6712ce55597ab907fe2ef38d4abf991) contentStartColumn(10) contentStartLine(1028) org.kframework.attributes.Location(Location(1028,10,1028,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstore_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1359, "{| rule `_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(245196fd1c5bf384b4c02a7bff3031efe6712ce55597ab907fe2ef38d4abf991) contentStartColumn(10) contentStartLine(1028) org.kframework.attributes.Location(Location(1028,10,1028,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1360
	// source: iele-gas.k @1142
	// {| rule `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("8300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a261c87ec5dc052d6fe4cdf850849257692e0480fa6e65911c9bc3cb9f27c4c1) contentStartColumn(10) contentStartLine(1142) org.kframework.attributes.Location(Location(1142,10,1142,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha3XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1360, "{| rule `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"8300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a261c87ec5dc052d6fe4cdf850849257692e0480fa6e65911c9bc3cb9f27c4c1) contentStartColumn(10) contentStartLine(1142) org.kframework.attributes.Location(Location(1142,10,1142,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8300"), nil
		}
	}

	// rule #1361
	// source: iele-gas.k @988
	// {| rule `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9977ff6f4e34402423da3b67d6c5b8e806491363fb602f95499a4e329a170878) contentStartColumn(10) contentStartLine(988) org.kframework.attributes.Location(Location(988,10,988,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gadd_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1361, "{| rule `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9977ff6f4e34402423da3b67d6c5b8e806491363fb602f95499a4e329a170878) contentStartColumn(10) contentStartLine(988) org.kframework.attributes.Location(Location(988,10,988,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1362
	// source: iele-gas.k @1040
	// {| rule `_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1875","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c8024ddde9b8adbebff5d6d6f02d74fb4141562a6a92022174e0c3586acb3df7) contentStartColumn(10) contentStartLine(1040) org.kframework.attributes.Location(Location(1040,10,1040,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblRsstoresetXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rsstoreset_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1362, "{| rule `_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1875\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c8024ddde9b8adbebff5d6d6f02d74fb4141562a6a92022174e0c3586acb3df7) contentStartColumn(10) contentStartLine(1040) org.kframework.attributes.Location(Location(1040,10,1040,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1875"), nil
		}
	}

	// rule #1363
	// source: iele-gas.k @1010
	// {| rule `_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9d18bb2bcb493a158bdebcd72a63934e8f6c46a4626a17595fa6356af02ee8a9) contentStartColumn(10) contentStartLine(1010) org.kframework.attributes.Location(Location(1010,10,1010,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtwosXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwos_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1363, "{| rule `_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9d18bb2bcb493a158bdebcd72a63934e8f6c46a4626a17595fa6356af02ee8a9) contentStartColumn(10) contentStartLine(1010) org.kframework.attributes.Location(Location(1010,10,1010,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1364
	// source: iele-gas.k @1177
	// {| rule `_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("30","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(75a6fe4c481ddd168ddc790441a4be94be9270e7587ed159e1bddba49b135ad7) contentStartColumn(10) contentStartLine(1177) org.kframework.attributes.Location(Location(1177,10,1177,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha256wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1364, "{| rule `_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"30\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(75a6fe4c481ddd168ddc790441a4be94be9270e7587ed159e1bddba49b135ad7) contentStartColumn(10) contentStartLine(1177) org.kframework.attributes.Location(Location(1177,10,1177,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("30"), nil
		}
	}

	// rule #1365
	// source: iele-gas.k @1045
	// {| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0195ed1937967fedeb0027b83c125c0c296b532f7b07cb0cd0967d633689d7d9) contentStartColumn(10) contentStartLine(1045) org.kframework.attributes.Location(Location(1045,10,1045,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestruct_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1365, "{| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0195ed1937967fedeb0027b83c125c0c296b532f7b07cb0cd0967d633689d7d9) contentStartColumn(10) contentStartLine(1045) org.kframework.attributes.Location(Location(1045,10,1045,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1366
	// source: iele-gas.k @1162
	// {| rule `_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("8000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6fa5375d00eb07b413feca1f6e5cb82f4bcf40057cb42a10a7db7cd1b579731f) contentStartColumn(10) contentStartLine(1162) org.kframework.attributes.Location(Location(1162,10,1162,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadkey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1366, "{| rule `_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"8000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fa5375d00eb07b413feca1f6e5cb82f4bcf40057cb42a10a7db7cd1b579731f) contentStartColumn(10) contentStartLine(1162) org.kframework.attributes.Location(Location(1162,10,1162,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8000"), nil
		}
	}

	// rule #1367
	// source: iele-gas.k @1156
	// {| rule `_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4950000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(073cc8322bd2bd518788384535a4abc091e48573ba2dbdd47ea7a3a006139eef) contentStartColumn(10) contentStartLine(1156) org.kframework.attributes.Location(Location(1156,10,1156,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstore_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1367, "{| rule `_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4950000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(073cc8322bd2bd518788384535a4abc091e48573ba2dbdd47ea7a3a006139eef) contentStartColumn(10) contentStartLine(1156) org.kframework.attributes.Location(Location(1156,10,1156,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4950000"), nil
		}
	}

	// rule #1368
	// source: iele-gas.k @1174
	// {| rule `_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("200000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5d4b481701148547a8e794d2cb7df641aee13b8609264f54c8e30ddb1dbdbf8d) contentStartColumn(10) contentStartLine(1174) org.kframework.attributes.Location(Location(1174,10,1174,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcodedepositXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcodedeposit_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1368, "{| rule `_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"200000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d4b481701148547a8e794d2cb7df641aee13b8609264f54c8e30ddb1dbdbf8d) contentStartColumn(10) contentStartLine(1174) org.kframework.attributes.Location(Location(1174,10,1174,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("200000"), nil
		}
	}

	// rule #1369
	// source: iele-gas.k @1057
	// {| rule `_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("60","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(abb89d275bcc44a3492d0f0bd9c8ffcc59726bb7fd62b4fbfae25057efcb6709) contentStartColumn(10) contentStartLine(1057) org.kframework.attributes.Location(Location(1057,10,1057,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha256XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1369, "{| rule `_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"60\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(abb89d275bcc44a3492d0f0bd9c8ffcc59726bb7fd62b4fbfae25057efcb6709) contentStartColumn(10) contentStartLine(1057) org.kframework.attributes.Location(Location(1057,10,1057,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("60"), nil
		}
	}

	// rule #1370
	// source: iele-gas.k @989
	// {| rule `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d5a6ba6d8ca2f9c1a994e1c04ceb25d1dc07759b02326d2688a5c33a0df1c7c6) contentStartColumn(10) contentStartLine(989) org.kframework.attributes.Location(Location(989,10,989,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGaddwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gaddword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1370, "{| rule `_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5a6ba6d8ca2f9c1a994e1c04ceb25d1dc07759b02326d2688a5c33a0df1c7c6) contentStartColumn(10) contentStartLine(989) org.kframework.attributes.Location(Location(989,10,989,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1371
	// source: iele-gas.k @1020
	// {| rule `_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("10","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9510fb7981494f3f2bddb829718180cef9889c0f903e1c1df64311400ca372db) contentStartColumn(10) contentStartLine(1020) org.kframework.attributes.Location(Location(1020,10,1020,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbrcondXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbrcond_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1371, "{| rule `_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"10\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9510fb7981494f3f2bddb829718180cef9889c0f903e1c1df64311400ca372db) contentStartColumn(10) contentStartLine(1020) org.kframework.attributes.Location(Location(1020,10,1020,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("10"), nil
		}
	}

	// rule #1372
	// source: iele-gas.k @1186
	// {| rule `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0715852b91170e521a6f2e07c50081a666ed155a0a25c07dfaa99e096018d640) contentStartColumn(10) contentStartLine(1186) org.kframework.attributes.Location(Location(1186,10,1186,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSgasdivisorXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Sgasdivisor_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1372, "{| rule `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0715852b91170e521a6f2e07c50081a666ed155a0a25c07dfaa99e096018d640) contentStartColumn(10) contentStartLine(1186) org.kframework.attributes.Location(Location(1186,10,1186,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1000"), nil
		}
	}

	// rule #1373
	// source: iele-gas.k @1131
	// {| rule `_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11d95beb5ef5e362b047e2358733a2a37f4a4b665a4b38c95380c90fe0612e98) contentStartColumn(10) contentStartLine(1131) org.kframework.attributes.Location(Location(1131,10,1131,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtwoswordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwosword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1373, "{| rule `_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(11d95beb5ef5e362b047e2358733a2a37f4a4b665a4b38c95380c90fe0612e98) contentStartColumn(10) contentStartLine(1131) org.kframework.attributes.Location(Location(1131,10,1131,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1374
	// source: iele-gas.k @1180
	// {| rule `_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("35000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(95bf9d4f03843524c0f53523a209bfc91ed28357c2dddc071eb2104f853440f7) contentStartColumn(10) contentStartLine(1180) org.kframework.attributes.Location(Location(1180,10,1180,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecadd_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1374, "{| rule `_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"35000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(95bf9d4f03843524c0f53523a209bfc91ed28357c2dddc071eb2104f853440f7) contentStartColumn(10) contentStartLine(1180) org.kframework.attributes.Location(Location(1180,10,1180,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("35000"), nil
		}
	}

	// rule #1375
	// source: iele-gas.k @1014
	// {| rule `_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b1eaf6797ef03b3951ca10dba7149d6b5a32d480384f196484f02b25c81293ff) contentStartColumn(10) contentStartLine(1014) org.kframework.attributes.Location(Location(1014,10,1014,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbswapXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswap_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1375, "{| rule `_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b1eaf6797ef03b3951ca10dba7149d6b5a32d480384f196484f02b25c81293ff) contentStartColumn(10) contentStartLine(1014) org.kframework.attributes.Location(Location(1014,10,1014,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1376
	// source: iele-gas.k @1116
	// {| rule `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d3e1d54b2ef2ede652c38b9d28e1428d66069dc11e030d8ae9f45bfe9262254d) contentStartColumn(10) contentStartLine(1116) org.kframework.attributes.Location(Location(1116,10,1116,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1376, "{| rule `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3e1d54b2ef2ede652c38b9d28e1428d66069dc11e030d8ae9f45bfe9262254d) contentStartColumn(10) contentStartLine(1116) org.kframework.attributes.Location(Location(1116,10,1116,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1377
	// source: iele-gas.k @1062
	// {| rule `_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("40000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(35328e26c1f0f47044a82418b47078b1e79b417d25aafd18d3dbd1315f017e76) contentStartColumn(10) contentStartLine(1062) org.kframework.attributes.Location(Location(1062,10,1062,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecmul_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1377, "{| rule `_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"40000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(35328e26c1f0f47044a82418b47078b1e79b417d25aafd18d3dbd1315f017e76) contentStartColumn(10) contentStartLine(1062) org.kframework.attributes.Location(Location(1062,10,1062,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("40000"), nil
		}
	}

	// rule #1378
	// source: iele-gas.k @1067
	// {| rule `_<_>_IELE-GAS`(`Gtransaction_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("21000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(58814bfe5ebf98680542c005f647af421261ad2815b8beb8510ddafc32d310f0) contentStartColumn(10) contentStartLine(1067) org.kframework.attributes.Location(Location(1067,10,1067,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtransactionXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtransaction_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1378, "{| rule `_<_>_IELE-GAS`(`Gtransaction_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"21000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(58814bfe5ebf98680542c005f647af421261ad2815b8beb8510ddafc32d310f0) contentStartColumn(10) contentStartLine(1067) org.kframework.attributes.Location(Location(1067,10,1067,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("21000"), nil
		}
	}

	// rule #1379
	// source: iele-gas.k @1111
	// {| rule `_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e37e5e8d7ba2e72698d0e5258de062c5751a5255c42c61ab34146ff9e1c946c7) contentStartColumn(10) contentStartLine(1111) org.kframework.attributes.Location(Location(1111,10,1111,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1379, "{| rule `_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e37e5e8d7ba2e72698d0e5258de062c5751a5255c42c61ab34146ff9e1c946c7) contentStartColumn(10) contentStartLine(1111) org.kframework.attributes.Location(Location(1111,10,1111,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4"), nil
		}
	}

	// rule #1380
	// source: iele-gas.k @1060
	// {| rule `_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("30","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99c3ac9d3947107757d8205fdb36672b7a779edd79390ad2530de9b3cd979b75) contentStartColumn(10) contentStartLine(1060) org.kframework.attributes.Location(Location(1060,10,1060,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGrip160wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1380, "{| rule `_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"30\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99c3ac9d3947107757d8205fdb36672b7a779edd79390ad2530de9b3cd979b75) contentStartColumn(10) contentStartLine(1060) org.kframework.attributes.Location(Location(1060,10,1060,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("30"), nil
		}
	}

	// rule #1381
	// source: iele-gas.k @1128
	// {| rule `_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf3ea56213eb284644ee0be375cb202fbc7262839aa721af2be644755383ca52) contentStartColumn(10) contentStartLine(1128) org.kframework.attributes.Location(Location(1128,10,1128,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogarithmwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithmword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1381, "{| rule `_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cf3ea56213eb284644ee0be375cb202fbc7262839aa721af2be644755383ca52) contentStartColumn(10) contentStartLine(1128) org.kframework.attributes.Location(Location(1128,10,1128,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1382
	// source: iele-gas.k @1059
	// {| rule `_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("600","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a3068aa6b31a2b5cdcec448aadfb8deda30ea641ac3c832dcfc7e89d8cfb29f8) contentStartColumn(10) contentStartLine(1059) org.kframework.attributes.Location(Location(1059,10,1059,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGrip160XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1382, "{| rule `_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"600\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a3068aa6b31a2b5cdcec448aadfb8deda30ea641ac3c832dcfc7e89d8cfb29f8) contentStartColumn(10) contentStartLine(1059) org.kframework.attributes.Location(Location(1059,10,1059,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("600"), nil
		}
	}

	// rule #1383
	// source: iele-gas.k @1134
	// {| rule `_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8d6bb5342a52acb7382be161fd53b728e01689ec2e2e9e6a009ad447579feafb) contentStartColumn(10) contentStartLine(1134) org.kframework.attributes.Location(Location(1134,10,1134,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbswapXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswap_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1383, "{| rule `_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d6bb5342a52acb7382be161fd53b728e01689ec2e2e9e6a009ad447579feafb) contentStartColumn(10) contentStartLine(1134) org.kframework.attributes.Location(Location(1134,10,1134,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3300"), nil
		}
	}

	// rule #1384
	// source: iele-gas.k @1153
	// {| rule `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("375000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bb44ef3100ef69b7eaf034cba6c510fd1dcdc1d4a83b4e124f08f57ccb299fac) contentStartColumn(10) contentStartLine(1153) org.kframework.attributes.Location(Location(1153,10,1153,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glog_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1384, "{| rule `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"375000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb44ef3100ef69b7eaf034cba6c510fd1dcdc1d4a83b4e124f08f57ccb299fac) contentStartColumn(10) contentStartLine(1153) org.kframework.attributes.Location(Location(1153,10,1153,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("375000"), nil
		}
	}

	// rule #1385
	// source: iele-gas.k @1150
	// {| rule `_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("400000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d93511f84d3facf495cf8edd59e5ec485c30d07bc99641a097c1d384012abd2d) contentStartColumn(10) contentStartLine(1150) org.kframework.attributes.Location(Location(1150,10,1150,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbalanceXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbalance_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1385, "{| rule `_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"400000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d93511f84d3facf495cf8edd59e5ec485c30d07bc99641a097c1d384012abd2d) contentStartColumn(10) contentStartLine(1150) org.kframework.attributes.Location(Location(1150,10,1150,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("400000"), nil
		}
	}

	// rule #1386
	// source: iele-gas.k @1013
	// {| rule `_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("5","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(399f6571f9301883ad2895d76ef57fbf735459002aeb6536957c915370cee787) contentStartColumn(10) contentStartLine(1013) org.kframework.attributes.Location(Location(1013,10,1013,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsextwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsextword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1386, "{| rule `_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"5\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(399f6571f9301883ad2895d76ef57fbf735459002aeb6536957c915370cee787) contentStartColumn(10) contentStartLine(1013) org.kframework.attributes.Location(Location(1013,10,1013,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #1387
	// source: iele-gas.k @1051
	// {| rule `_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("9000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(12c44d11646877a4f63b5dfcace4294952d0dd8064a3d77c468884684569baee) contentStartColumn(10) contentStartLine(1051) org.kframework.attributes.Location(Location(1051,10,1051,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallvalueXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallvalue_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1387, "{| rule `_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"9000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(12c44d11646877a4f63b5dfcace4294952d0dd8064a3d77c468884684569baee) contentStartColumn(10) contentStartLine(1051) org.kframework.attributes.Location(Location(1051,10,1051,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("9000"), nil
		}
	}

	// rule #1388
	// source: iele-gas.k @1182
	// {| rule `_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("100000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9de784b0921facbd70bd9f19b25ae6ee5d4068383e5143bd7e0eb030cf81b460) contentStartColumn(10) contentStartLine(1182) org.kframework.attributes.Location(Location(1182,10,1182,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecpairingXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairing_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1388, "{| rule `_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"100000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9de784b0921facbd70bd9f19b25ae6ee5d4068383e5143bd7e0eb030cf81b460) contentStartColumn(10) contentStartLine(1182) org.kframework.attributes.Location(Location(1182,10,1182,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("100000000"), nil
		}
	}

	// rule #1389
	// source: iele-gas.k @1061
	// {| rule `_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("500","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0700ade7ec7cdd74a4e90cf03fe1d7b341b435544558b664c1295acf320e80b8) contentStartColumn(10) contentStartLine(1061) org.kframework.attributes.Location(Location(1061,10,1061,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecadd_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1389, "{| rule `_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"500\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0700ade7ec7cdd74a4e90cf03fe1d7b341b435544558b664c1295acf320e80b8) contentStartColumn(10) contentStartLine(1061) org.kframework.attributes.Location(Location(1061,10,1061,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("500"), nil
		}
	}

	// rule #1390
	// source: iele-gas.k @1054
	// {| rule `_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("33000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3c680970f9f304729650ca02c00317e06ba0a355568dc897deccf7c7ef41b36e) contentStartColumn(10) contentStartLine(1054) org.kframework.attributes.Location(Location(1054,10,1054,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcopycreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcopycreate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1390, "{| rule `_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"33000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c680970f9f304729650ca02c00317e06ba0a355568dc897deccf7c7ef41b36e) contentStartColumn(10) contentStartLine(1054) org.kframework.attributes.Location(Location(1054,10,1054,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("33000"), nil
		}
	}

	// rule #1391
	// source: iele-gas.k @1008
	// {| rule `_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(952fd21a9596df571fab482ab048f379df5b0c7b999c647760a73e4dcb7450dc) contentStartColumn(10) contentStartLine(1008) org.kframework.attributes.Location(Location(1008,10,1008,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogarithmwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithmword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1391, "{| rule `_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(952fd21a9596df571fab482ab048f379df5b0c7b999c647760a73e4dcb7450dc) contentStartColumn(10) contentStartLine(1008) org.kframework.attributes.Location(Location(1008,10,1008,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1392
	// source: iele-gas.k @1035
	// {| rule `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("375","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(27487dcb6cb58e1bd486509fc2196c811d3601732bde5ad567206a6a5c52c8f7) contentStartColumn(10) contentStartLine(1035) org.kframework.attributes.Location(Location(1035,10,1035,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogtopicXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogtopic_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1392, "{| rule `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"375\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(27487dcb6cb58e1bd486509fc2196c811d3601732bde5ad567206a6a5c52c8f7) contentStartColumn(10) contentStartLine(1035) org.kframework.attributes.Location(Location(1035,10,1035,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("375"), nil
		}
	}

	// rule #1393
	// source: iele-gas.k @1168
	// {| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("40000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2af4b5b46b30ef3f31a96c89042c00ff05b9c2531371b8c3f8960831162e2a6d) contentStartColumn(10) contentStartLine(1168) org.kframework.attributes.Location(Location(1168,10,1168,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcall_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1393, "{| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"40000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2af4b5b46b30ef3f31a96c89042c00ff05b9c2531371b8c3f8960831162e2a6d) contentStartColumn(10) contentStartLine(1168) org.kframework.attributes.Location(Location(1168,10,1168,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("40000"), nil
		}
	}

	// rule #1394
	// source: iele-gas.k @1068
	// {| rule `_<_>_IELE-GAS`(`Gtxcreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("53000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e5a60b321c3a7165f44d1253ef16d3c2968e1718121eb7b3240b48e2451c4058) contentStartColumn(10) contentStartLine(1068) org.kframework.attributes.Location(Location(1068,10,1068,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtxcreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxcreate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1394, "{| rule `_<_>_IELE-GAS`(`Gtxcreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"53000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e5a60b321c3a7165f44d1253ef16d3c2968e1718121eb7b3240b48e2451c4058) contentStartColumn(10) contentStartLine(1068) org.kframework.attributes.Location(Location(1068,10,1068,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("53000"), nil
		}
	}

	// rule #1395
	// source: iele-gas.k @1113
	// {| rule `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4900","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b5e3d1ef678e2e7df6182c8afc0f22953e56604c5b536d2151e6e0814af18632) contentStartColumn(10) contentStartLine(1113) org.kframework.attributes.Location(Location(1113,10,1113,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdiv_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1395, "{| rule `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4900\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b5e3d1ef678e2e7df6182c8afc0f22953e56604c5b536d2151e6e0814af18632) contentStartColumn(10) contentStartLine(1113) org.kframework.attributes.Location(Location(1113,10,1113,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4900"), nil
		}
	}

	// rule #1396
	// source: iele-gas.k @1122
	// {| rule `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("6000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(26620a9cebfbb0a2c9750268ec9be47f7e7bc5c9825012bd1d957889a3e7b8fc) contentStartColumn(10) contentStartLine(1122) org.kframework.attributes.Location(Location(1122,10,1122,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmod_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1396, "{| rule `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"6000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26620a9cebfbb0a2c9750268ec9be47f7e7bc5c9825012bd1d957889a3e7b8fc) contentStartColumn(10) contentStartLine(1122) org.kframework.attributes.Location(Location(1122,10,1122,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("6000"), nil
		}
	}

	// rule #1397
	// source: iele-gas.k @1018
	// {| rule `_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6b4a83faf788298a79fc20a3458b2b38fadf8ffa3be7943e0c17e821dc407b2b) contentStartColumn(10) contentStartLine(1018) org.kframework.attributes.Location(Location(1018,10,1018,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcmpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmpword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1397, "{| rule `_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6b4a83faf788298a79fc20a3458b2b38fadf8ffa3be7943e0c17e821dc407b2b) contentStartColumn(10) contentStartLine(1018) org.kframework.attributes.Location(Location(1018,10,1018,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1398
	// source: iele-gas.k @1114
	// {| rule `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("5","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3e71141a0ebcf6ea4842f8b56a02bfe00e5f7218e8d3e9c03c18fc3a8e622916) contentStartColumn(10) contentStartLine(1114) org.kframework.attributes.Location(Location(1114,10,1114,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1398, "{| rule `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"5\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3e71141a0ebcf6ea4842f8b56a02bfe00e5f7218e8d3e9c03c18fc3a8e622916) contentStartColumn(10) contentStartLine(1114) org.kframework.attributes.Location(Location(1114,10,1114,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #1399
	// source: iele-gas.k @1021
	// {| rule `_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("20","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b8c50ee0a9816bb13286557df5c5420a6b97ede326c9c98865b5af7662c507a8) contentStartColumn(10) contentStartLine(1021) org.kframework.attributes.Location(Location(1021,10,1021,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGblockhashXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gblockhash_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1399, "{| rule `_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"20\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b8c50ee0a9816bb13286557df5c5420a6b97ede326c9c98865b5af7662c507a8) contentStartColumn(10) contentStartLine(1021) org.kframework.attributes.Location(Location(1021,10,1021,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("20"), nil
		}
	}

	// rule #1400
	// source: iele-gas.k @1026
	// {| rule `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c75fda3794fdee941ba8b5f6c486082bea8b8a753f027e1d2537a53a8df094b5) contentStartColumn(10) contentStartLine(1026) org.kframework.attributes.Location(Location(1026,10,1026,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1400, "{| rule `_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c75fda3794fdee941ba8b5f6c486082bea8b8a753f027e1d2537a53a8df094b5) contentStartColumn(10) contentStartLine(1026) org.kframework.attributes.Location(Location(1026,10,1026,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1401
	// source: iele-gas.k @1133
	// {| rule `_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("5","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(660a522e8434e373d2ab63a7168d5ea847918dcd62acb548fb10a01c7c37bd55) contentStartColumn(10) contentStartLine(1133) org.kframework.attributes.Location(Location(1133,10,1133,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsextwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsextword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1401, "{| rule `_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"5\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(660a522e8434e373d2ab63a7168d5ea847918dcd62acb548fb10a01c7c37bd55) contentStartColumn(10) contentStartLine(1133) org.kframework.attributes.Location(Location(1133,10,1133,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #1402
	// source: iele-gas.k @1165
	// {| rule `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(80c6bfe7f91dfcccfdfcc621b4cf175386d17acd76166178fb86224ffea72958) contentStartColumn(10) contentStartLine(1165) org.kframework.attributes.Location(Location(1165,10,1165,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallmemory_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1402, "{| rule `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(80c6bfe7f91dfcccfdfcc621b4cf175386d17acd76166178fb86224ffea72958) contentStartColumn(10) contentStartLine(1165) org.kframework.attributes.Location(Location(1165,10,1165,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1403
	// source: iele-gas.k @1065
	// {| rule `_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3849d7850a434dbcf58ab8bdcc78a97993d7c60df7c90e36ee6ba33149ec718c) contentStartColumn(10) contentStartLine(1065) org.kframework.attributes.Location(Location(1065,10,1065,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmemory_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1403, "{| rule `_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3849d7850a434dbcf58ab8bdcc78a97993d7c60df7c90e36ee6ba33149ec718c) contentStartColumn(10) contentStartLine(1065) org.kframework.attributes.Location(Location(1065,10,1065,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1404
	// source: iele-gas.k @1176
	// {| rule `_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("25000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(026cfccfc94d14f7f67a6bb689091d1f5503c4d4af25372bf251579caf66db77) contentStartColumn(10) contentStartLine(1176) org.kframework.attributes.Location(Location(1176,10,1176,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha256XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1404, "{| rule `_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"25000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(026cfccfc94d14f7f67a6bb689091d1f5503c4d4af25372bf251579caf66db77) contentStartColumn(10) contentStartLine(1176) org.kframework.attributes.Location(Location(1176,10,1176,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("25000"), nil
		}
	}

	// rule #1405
	// source: iele-gas.k @1107
	// {| rule `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3cabac7a5193ddd3987eb771856ac7f782535e227e8500fa3ac4cf12cb34ce32) contentStartColumn(10) contentStartLine(1107) org.kframework.attributes.Location(Location(1107,10,1107,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGreadstateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Greadstate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1405, "{| rule `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3cabac7a5193ddd3987eb771856ac7f782535e227e8500fa3ac4cf12cb34ce32) contentStartColumn(10) contentStartLine(1107) org.kframework.attributes.Location(Location(1107,10,1107,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2000"), nil
		}
	}

	// rule #1406
	// source: iele-gas.k @1141
	// {| rule `_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("20000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bf02189ff39c9fed2769a73ed4d73aed78e004a4befd31321e805efd50dcc44f) contentStartColumn(10) contentStartLine(1141) org.kframework.attributes.Location(Location(1141,10,1141,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGblockhashXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gblockhash_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1406, "{| rule `_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"20000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bf02189ff39c9fed2769a73ed4d73aed78e004a4befd31321e805efd50dcc44f) contentStartColumn(10) contentStartLine(1141) org.kframework.attributes.Location(Location(1141,10,1141,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("20000"), nil
		}
	}

	// rule #1407
	// source: iele-gas.k @1118
	// {| rule `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("5300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e78a1be4bf85e079bce50d2bc930c860d71b9fdf72b682a12baba9998227efad) contentStartColumn(10) contentStartLine(1118) org.kframework.attributes.Location(Location(1118,10,1118,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1407, "{| rule `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"5300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e78a1be4bf85e079bce50d2bc930c860d71b9fdf72b682a12baba9998227efad) contentStartColumn(10) contentStartLine(1118) org.kframework.attributes.Location(Location(1118,10,1118,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5300"), nil
		}
	}

	// rule #1408
	// source: iele-gas.k @1047
	// {| rule `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(01f56d221fb62db7e0fc2467d9ed01b36c4b264460f7c47c255f6d8f50b9a1ea) contentStartColumn(10) contentStartLine(1047) org.kframework.attributes.Location(Location(1047,10,1047,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallregXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallreg_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1408, "{| rule `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01f56d221fb62db7e0fc2467d9ed01b36c4b264460f7c47c255f6d8f50b9a1ea) contentStartColumn(10) contentStartLine(1047) org.kframework.attributes.Location(Location(1047,10,1047,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1409
	// source: iele-gas.k @1063
	// {| rule `_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("100000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f7926404d3d40ce9be840e76c336468937f244bdbc3ae422c5faa1b8d4ea6030) contentStartColumn(10) contentStartLine(1063) org.kframework.attributes.Location(Location(1063,10,1063,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecpairingXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairing_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1409, "{| rule `_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"100000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f7926404d3d40ce9be840e76c336468937f244bdbc3ae422c5faa1b8d4ea6030) contentStartColumn(10) contentStartLine(1063) org.kframework.attributes.Location(Location(1063,10,1063,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("100000"), nil
		}
	}

	// rule #1410
	// source: iele-gas.k @1157
	// {| rule `_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b52931f22808ddeb5fd9dd371daaab125dd2e0bc229fe8c690657d51a90b9bad) contentStartColumn(10) contentStartLine(1157) org.kframework.attributes.Location(Location(1157,10,1157,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1410, "{| rule `_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b52931f22808ddeb5fd9dd371daaab125dd2e0bc229fe8c690657d51a90b9bad) contentStartColumn(10) contentStartLine(1157) org.kframework.attributes.Location(Location(1157,10,1157,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("300"), nil
		}
	}

	// rule #1411
	// source: iele-gas.k @1025
	// {| rule `_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7d9e228cfc5cd5cbbc68b91fe5f0beb41a70d9c421458c6fa8f8f404b2b92e26) contentStartColumn(10) contentStartLine(1025) org.kframework.attributes.Location(Location(1025,10,1025,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gload_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1411, "{| rule `_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d9e228cfc5cd5cbbc68b91fe5f0beb41a70d9c421458c6fa8f8f404b2b92e26) contentStartColumn(10) contentStartLine(1025) org.kframework.attributes.Location(Location(1025,10,1025,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1412
	// source: iele-gas.k @1110
	// {| rule `_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4900","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0cfef4abbacb7aa92cc035779e455ef14b99cc7246e97e1520503e0b722618e5) contentStartColumn(10) contentStartLine(1110) org.kframework.attributes.Location(Location(1110,10,1110,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmul_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1412, "{| rule `_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4900\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0cfef4abbacb7aa92cc035779e455ef14b99cc7246e97e1520503e0b722618e5) contentStartColumn(10) contentStartLine(1110) org.kframework.attributes.Location(Location(1110,10,1110,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4900"), nil
		}
	}

	// rule #1413
	// source: iele-gas.k @991
	// {| rule `_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0a57d96fd8760d8855ae11d599b7fdd590b13a0d72d2c49fd81352616358f9f2) contentStartColumn(10) contentStartLine(991) org.kframework.attributes.Location(Location(991,10,991,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1413, "{| rule `_<_>_IELE-GAS`(`Gmulword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a57d96fd8760d8855ae11d599b7fdd590b13a0d72d2c49fd81352616358f9f2) contentStartColumn(10) contentStartLine(991) org.kframework.attributes.Location(Location(991,10,991,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1414
	// source: iele-gas.k @1079
	// {| rule `_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("4096","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4efc26adf4874f41ae9962621a4f9a5c9e5d9d725fefb92ab93ad5e62fc8dba1) contentStartColumn(10) contentStartLine(1079) org.kframework.attributes.Location(Location(1079,10,1079,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSmemallowanceXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Smemallowance_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1414, "{| rule `_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"4096\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4efc26adf4874f41ae9962621a4f9a5c9e5d9d725fefb92ab93ad5e62fc8dba1) contentStartColumn(10) contentStartLine(1079) org.kframework.attributes.Location(Location(1079,10,1079,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4096"), nil
		}
	}

	// rule #1415
	// source: iele-gas.k @1001
	// {| rule `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5edb29293ca7acd42523b99a0935496fbd3aa400258af608d60eea1fe60558f8) contentStartColumn(10) contentStartLine(1001) org.kframework.attributes.Location(Location(1001,10,1001,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodexp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1415, "{| rule `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5edb29293ca7acd42523b99a0935496fbd3aa400258af608d60eea1fe60558f8) contentStartColumn(10) contentStartLine(1001) org.kframework.attributes.Location(Location(1001,10,1001,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1416
	// source: iele-gas.k @1175
	// {| rule `_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5914f3fa2e61f44f8d232df0902b39a46737ce97f4747e6e9048ce7bd92a90fa) contentStartColumn(10) contentStartLine(1175) org.kframework.attributes.Location(Location(1175,10,1175,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecrecXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecrec_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1416, "{| rule `_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5914f3fa2e61f44f8d232df0902b39a46737ce97f4747e6e9048ce7bd92a90fa) contentStartColumn(10) contentStartLine(1175) org.kframework.attributes.Location(Location(1175,10,1175,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3000000"), nil
		}
	}

	// rule #1417
	// source: iele-gas.k @1007
	// {| rule `_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f16677a6df53c2f28c4e6620fa476f681d2457d93bec602fb0ec8f1f4fd490b5) contentStartColumn(10) contentStartLine(1007) org.kframework.attributes.Location(Location(1007,10,1007,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogarithmXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithm_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1417, "{| rule `_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f16677a6df53c2f28c4e6620fa476f681d2457d93bec602fb0ec8f1f4fd490b5) contentStartColumn(10) contentStartLine(1007) org.kframework.attributes.Location(Location(1007,10,1007,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1418
	// source: iele-gas.k @1036
	// {| rule `_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(59208d0e071d20177a3b45d2ccb4616b9c8a215d09e762a4800bc9d74e3f5459) contentStartColumn(10) contentStartLine(1036) org.kframework.attributes.Location(Location(1036,10,1036,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstore_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1418, "{| rule `_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(59208d0e071d20177a3b45d2ccb4616b9c8a215d09e762a4800bc9d74e3f5459) contentStartColumn(10) contentStartLine(1036) org.kframework.attributes.Location(Location(1036,10,1036,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1000"), nil
		}
	}

	// rule #1419
	// source: iele-gas.k @997
	// {| rule `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("10","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a65feed7fa8584e28bb16a4283ede30d17d09da15007b98a9bd268984e024f74) contentStartColumn(10) contentStartLine(997) org.kframework.attributes.Location(Location(997,10,997,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1419, "{| rule `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"10\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a65feed7fa8584e28bb16a4283ede30d17d09da15007b98a9bd268984e024f74) contentStartColumn(10) contentStartLine(997) org.kframework.attributes.Location(Location(997,10,997,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("10"), nil
		}
	}

	// rule #1420
	// source: iele-gas.k @1181
	// {| rule `_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1700000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5d982b3c46549671f5ce164bea58afa53dbdc8a78cdecf8ad411ecff99ee84c4) contentStartColumn(10) contentStartLine(1181) org.kframework.attributes.Location(Location(1181,10,1181,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecmul_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1420, "{| rule `_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1700000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5d982b3c46549671f5ce164bea58afa53dbdc8a78cdecf8ad411ecff99ee84c4) contentStartColumn(10) contentStartLine(1181) org.kframework.attributes.Location(Location(1181,10,1181,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1700000"), nil
		}
	}

	// rule #1421
	// source: iele-gas.k @1046
	// {| rule `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11614a4c3b03e3aa717649049c0df8e9116eb8ae85536bc62e3240c7a89e3bc1) contentStartColumn(10) contentStartLine(1046) org.kframework.attributes.Location(Location(1046,10,1046,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallmemory_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1421, "{| rule `_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(11614a4c3b03e3aa717649049c0df8e9116eb8ae85536bc62e3240c7a89e3bc1) contentStartColumn(10) contentStartLine(1046) org.kframework.attributes.Location(Location(1046,10,1046,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1422
	// source: iele-gas.k @1005
	// {| rule `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11af96191b146f84eab92d2b0323e52c630462158711710eb499cc06b6256e65) contentStartColumn(10) contentStartLine(1005) org.kframework.attributes.Location(Location(1005,10,1005,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbitwiseXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwise_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1422, "{| rule `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(11af96191b146f84eab92d2b0323e52c630462158711710eb499cc06b6256e65) contentStartColumn(10) contentStartLine(1005) org.kframework.attributes.Location(Location(1005,10,1005,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1423
	// source: iele-gas.k @1125
	// {| rule `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2900","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c379507431b176cb6fc3bcbb5fa9ee3a62ef6627437aa535118ae1ab3d5c88fd) contentStartColumn(10) contentStartLine(1125) org.kframework.attributes.Location(Location(1125,10,1125,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbitwiseXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwise_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1423, "{| rule `_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2900\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c379507431b176cb6fc3bcbb5fa9ee3a62ef6627437aa535118ae1ab3d5c88fd) contentStartColumn(10) contentStartLine(1125) org.kframework.attributes.Location(Location(1125,10,1125,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2900"), nil
		}
	}

	// rule #1424
	// source: iele-gas.k @1123
	// {| rule `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2700","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(07a02b22008dab77fe3829d71b9e8f43bb668faecc7555fdda11a85eb996ed1b) contentStartColumn(10) contentStartLine(1123) org.kframework.attributes.Location(Location(1123,10,1123,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnotXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnot_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1424, "{| rule `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2700\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(07a02b22008dab77fe3829d71b9e8f43bb668faecc7555fdda11a85eb996ed1b) contentStartColumn(10) contentStartLine(1123) org.kframework.attributes.Location(Location(1123,10,1123,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2700"), nil
		}
	}

	// rule #1425
	// source: iele-gas.k @1038
	// {| rule `_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("500","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b091232c220bd838fa93db336d6520e117284fd72e70d181eab632b665f0ef95) contentStartColumn(10) contentStartLine(1038) org.kframework.attributes.Location(Location(1038,10,1038,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstorekeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstorekey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1425, "{| rule `_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"500\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b091232c220bd838fa93db336d6520e117284fd72e70d181eab632b665f0ef95) contentStartColumn(10) contentStartLine(1038) org.kframework.attributes.Location(Location(1038,10,1038,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("500"), nil
		}
	}

	// rule #1426
	// source: iele-gas.k @1030
	// {| rule `_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("400","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d34b0be2a5289d218025e10c7d6d390e94360e6aa2c4d387a73e768ce2022177) contentStartColumn(10) contentStartLine(1030) org.kframework.attributes.Location(Location(1030,10,1030,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbalanceXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbalance_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1426, "{| rule `_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"400\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d34b0be2a5289d218025e10c7d6d390e94360e6aa2c4d387a73e768ce2022177) contentStartColumn(10) contentStartLine(1030) org.kframework.attributes.Location(Location(1030,10,1030,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("400"), nil
		}
	}

	// rule #1427
	// source: iele-gas.k @1155
	// {| rule `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("375000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c4dbd36e7111e3aeee3935a86ba6fd68120b84c64f1630a06ec012b98a137810) contentStartColumn(10) contentStartLine(1155) org.kframework.attributes.Location(Location(1155,10,1155,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogtopicXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogtopic_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1427, "{| rule `_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"375000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c4dbd36e7111e3aeee3935a86ba6fd68120b84c64f1630a06ec012b98a137810) contentStartColumn(10) contentStartLine(1155) org.kframework.attributes.Location(Location(1155,10,1155,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("375000"), nil
		}
	}

	// rule #1428
	// source: iele-gas.k @1003
	// {| rule `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7d7cb5eb5f3dc5aeb02bee7e0489ed299996adf7c66dc26440a45350178cde50) contentStartColumn(10) contentStartLine(1003) org.kframework.attributes.Location(Location(1003,10,1003,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnotXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnot_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1428, "{| rule `_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d7cb5eb5f3dc5aeb02bee7e0489ed299996adf7c66dc26440a45350178cde50) contentStartColumn(10) contentStartLine(1003) org.kframework.attributes.Location(Location(1003,10,1003,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1429
	// source: iele-gas.k @1178
	// {| rule `_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("25000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6ca1e1bffd966afe06de5ff65d412b97d623d7d8af2fcd6c6bdc1174a01eaaee) contentStartColumn(10) contentStartLine(1178) org.kframework.attributes.Location(Location(1178,10,1178,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGrip160XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1429, "{| rule `_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"25000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ca1e1bffd966afe06de5ff65d412b97d623d7d8af2fcd6c6bdc1174a01eaaee) contentStartColumn(10) contentStartLine(1178) org.kframework.attributes.Location(Location(1178,10,1178,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("25000"), nil
		}
	}

	// rule #1430
	// source: iele-gas.k @1163
	// {| rule `_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3594064b858a83b8c25fa01bd88c1b583b947415a7561f72f343e29566e70fb2) contentStartColumn(10) contentStartLine(1163) org.kframework.attributes.Location(Location(1163,10,1163,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1430, "{| rule `_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3594064b858a83b8c25fa01bd88c1b583b947415a7561f72f343e29566e70fb2) contentStartColumn(10) contentStartLine(1163) org.kframework.attributes.Location(Location(1163,10,1163,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2000"), nil
		}
	}

	// rule #1431
	// source: iele-gas.k @1017
	// {| rule `_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(456d950a245bb19bf8ec76ef930b96140e25af3c27d6821bacf113fde88ad213) contentStartColumn(10) contentStartLine(1017) org.kframework.attributes.Location(Location(1017,10,1017,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcmpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1431, "{| rule `_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(456d950a245bb19bf8ec76ef930b96140e25af3c27d6821bacf113fde88ad213) contentStartColumn(10) contentStartLine(1017) org.kframework.attributes.Location(Location(1017,10,1017,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1432
	// source: iele-gas.k @1148
	// {| rule `_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3900","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ee25647aa17cd7410a76ba2cd4dca714476f7b730d0e701556eb30378aed8e87) contentStartColumn(10) contentStartLine(1148) org.kframework.attributes.Location(Location(1148,10,1148,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstore_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1432, "{| rule `_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3900\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ee25647aa17cd7410a76ba2cd4dca714476f7b730d0e701556eb30378aed8e87) contentStartColumn(10) contentStartLine(1148) org.kframework.attributes.Location(Location(1148,10,1148,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3900"), nil
		}
	}

	// rule #1433
	// source: iele-gas.k @1033
	// {| rule `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("375","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(43961dd2dee9ca453bb3bcceb586ce5243947aa856ac08179f06aec887b63350) contentStartColumn(10) contentStartLine(1033) org.kframework.attributes.Location(Location(1033,10,1033,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glog_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1433, "{| rule `_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"375\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(43961dd2dee9ca453bb3bcceb586ce5243947aa856ac08179f06aec887b63350) contentStartColumn(10) contentStartLine(1033) org.kframework.attributes.Location(Location(1033,10,1033,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("375"), nil
		}
	}

	// rule #1434
	// source: iele-gas.k @992
	// {| rule `_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ce2332052e8b3897173d0f38a0b3a2485f9b3b2e839689b14f2f212d75d9172c) contentStartColumn(10) contentStartLine(992) org.kframework.attributes.Location(Location(992,10,992,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1434, "{| rule `_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ce2332052e8b3897173d0f38a0b3a2485f9b3b2e839689b14f2f212d75d9172c) contentStartColumn(10) contentStartLine(992) org.kframework.attributes.Location(Location(992,10,992,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1435
	// source: iele-gas.k @1136
	// {| rule `_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1800","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c77f425e1aa0a263f7c24ee364ce0ca861dd3cc32293f3a196effb30526de9f7) contentStartColumn(10) contentStartLine(1136) org.kframework.attributes.Location(Location(1136,10,1136,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGiszeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Giszero_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1435, "{| rule `_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1800\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c77f425e1aa0a263f7c24ee364ce0ca861dd3cc32293f3a196effb30526de9f7) contentStartColumn(10) contentStartLine(1136) org.kframework.attributes.Location(Location(1136,10,1136,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1800"), nil
		}
	}

	// rule #1436
	// source: iele-gas.k @1152
	// {| rule `_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("700000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0817444909cf5e274042281646d4857bf5302dc2d46d55b9104edacb10fb0020) contentStartColumn(10) contentStartLine(1152) org.kframework.attributes.Location(Location(1152,10,1152,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcalladdressXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcalladdress_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1436, "{| rule `_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"700000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0817444909cf5e274042281646d4857bf5302dc2d46d55b9104edacb10fb0020) contentStartColumn(10) contentStartLine(1152) org.kframework.attributes.Location(Location(1152,10,1152,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("700000"), nil
		}
	}

	// rule #1437
	// source: iele-gas.k @1129
	// {| rule `_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2500","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6df2762d1d1070e19c94a956d849052fa49e06c82e26d1f67addeaa91b55b1c3) contentStartColumn(10) contentStartLine(1129) org.kframework.attributes.Location(Location(1129,10,1129,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbyteXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbyte_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1437, "{| rule `_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2500\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6df2762d1d1070e19c94a956d849052fa49e06c82e26d1f67addeaa91b55b1c3) contentStartColumn(10) contentStartLine(1129) org.kframework.attributes.Location(Location(1129,10,1129,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2500"), nil
		}
	}

	// rule #1438
	// source: iele-gas.k @1011
	// {| rule `_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("5","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6c848dd422f1df173d2d8251ab9d21f6ec0dfdbfebb7a1833f2757b569c4c9a3) contentStartColumn(10) contentStartLine(1011) org.kframework.attributes.Location(Location(1011,10,1011,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtwoswordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwosword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1438, "{| rule `_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"5\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6c848dd422f1df173d2d8251ab9d21f6ec0dfdbfebb7a1833f2757b569c4c9a3) contentStartColumn(10) contentStartLine(1011) org.kframework.attributes.Location(Location(1011,10,1011,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #1439
	// source: iele-gas.k @986
	// {| rule `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(43c4e1bb94f1d850698221321111b6a9a80871c7465589678e327ac54eea4968) contentStartColumn(10) contentStartLine(986) org.kframework.attributes.Location(Location(986,10,986,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmove_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1439, "{| rule `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(43c4e1bb94f1d850698221321111b6a9a80871c7465589678e327ac54eea4968) contentStartColumn(10) contentStartLine(986) org.kframework.attributes.Location(Location(986,10,986,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1440
	// source: iele-gas.k @1009
	// {| rule `_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5f07aa7ae491529cc4be5dc78ef66e6bfbd75eb7d382e60e2f1ab41f50c2f008) contentStartColumn(10) contentStartLine(1009) org.kframework.attributes.Location(Location(1009,10,1009,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbyteXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbyte_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1440, "{| rule `_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5f07aa7ae491529cc4be5dc78ef66e6bfbd75eb7d382e60e2f1ab41f50c2f008) contentStartColumn(10) contentStartLine(1009) org.kframework.attributes.Location(Location(1009,10,1009,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1441
	// source: iele-gas.k @1171
	// {| rule `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("25000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(45c29212cf4c6a5effdca6e2653b6c0167d54c40a7f0de79c0c03a032a37c112) contentStartColumn(10) contentStartLine(1171) org.kframework.attributes.Location(Location(1171,10,1171,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewaccount_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1441, "{| rule `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"25000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(45c29212cf4c6a5effdca6e2653b6c0167d54c40a7f0de79c0c03a032a37c112) contentStartColumn(10) contentStartLine(1171) org.kframework.attributes.Location(Location(1171,10,1171,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("25000000"), nil
		}
	}

	// rule #1442
	// source: iele-gas.k @1091
	// {| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token("5000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cfb0a21b58965392ab79ba3f8d683850f97c446c03aac6d2b698064b88fbfe86) contentStartColumn(10) contentStartLine(1091) org.kframework.attributes.Location(Location(1091,10,1091,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestruct_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1442, "{| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token(\"5000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cfb0a21b58965392ab79ba3f8d683850f97c446c03aac6d2b698064b88fbfe86) contentStartColumn(10) contentStartLine(1091) org.kframework.attributes.Location(Location(1091,10,1091,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5000"), nil
		}
	}

	// rule #1443
	// source: iele-gas.k @1002
	// {| rule `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f5179430c7143121aed46d58a873213333472448f153059aad4936356a34676a) contentStartColumn(10) contentStartLine(1002) org.kframework.attributes.Location(Location(1002,10,1002,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmod_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1443, "{| rule `_<_>_IELE-GAS`(`Gexpmod_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f5179430c7143121aed46d58a873213333472448f153059aad4936356a34676a) contentStartColumn(10) contentStartLine(1002) org.kframework.attributes.Location(Location(1002,10,1002,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1444
	// source: iele-gas.k @995
	// {| rule `_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(019d54c7a8d118aa9706d885ada36f89a45b7a7288fac139a9fbf8bfb1827d47) contentStartColumn(10) contentStartLine(995) org.kframework.attributes.Location(Location(995,10,995,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1444, "{| rule `_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(019d54c7a8d118aa9706d885ada36f89a45b7a7288fac139a9fbf8bfb1827d47) contentStartColumn(10) contentStartLine(995) org.kframework.attributes.Location(Location(995,10,995,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1445
	// source: iele-gas.k @994
	// {| rule `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(487551168f397e85caef309347e708f8cc23afa4436138a144ba2fbb6965871a) contentStartColumn(10) contentStartLine(994) org.kframework.attributes.Location(Location(994,10,994,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1445, "{| rule `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(487551168f397e85caef309347e708f8cc23afa4436138a144ba2fbb6965871a) contentStartColumn(10) contentStartLine(994) org.kframework.attributes.Location(Location(994,10,994,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1446
	// source: iele-gas.k @1006
	// {| rule `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f7f40cbe13d42d41383cdde4f0b24c61083d5e762ebc942bf28197ed14d612e7) contentStartColumn(10) contentStartLine(1006) org.kframework.attributes.Location(Location(1006,10,1006,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbitwisewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwiseword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1446, "{| rule `_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f7f40cbe13d42d41383cdde4f0b24c61083d5e762ebc942bf28197ed14d612e7) contentStartColumn(10) contentStartLine(1006) org.kframework.attributes.Location(Location(1006,10,1006,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1447
	// source: iele-gas.k @1115
	// {| rule `_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("8","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2bb566d7e2176be64da517ef7f35947a4d839f5e03ce6d65236b563f382e6cc1) contentStartColumn(10) contentStartLine(1115) org.kframework.attributes.Location(Location(1115,10,1115,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1447, "{| rule `_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"8\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2bb566d7e2176be64da517ef7f35947a4d839f5e03ce6d65236b563f382e6cc1) contentStartColumn(10) contentStartLine(1115) org.kframework.attributes.Location(Location(1115,10,1115,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8"), nil
		}
	}

	// rule #1448
	// source: iele-gas.k @1184
	// {| rule `_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("750","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(179acf7cf0645b5e045628b6ff65d7a2ce39e01fddaa14dadbd7249db0be39c3) contentStartColumn(10) contentStartLine(1184) org.kframework.attributes.Location(Location(1184,10,1184,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmemory_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1448, "{| rule `_<_>_IELE-GAS`(`Gmemory_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"750\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(179acf7cf0645b5e045628b6ff65d7a2ce39e01fddaa14dadbd7249db0be39c3) contentStartColumn(10) contentStartLine(1184) org.kframework.attributes.Location(Location(1184,10,1184,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("750"), nil
		}
	}

	// rule #1449
	// source: iele-gas.k @1004
	// {| rule `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4bee22653a18df2f89d57580fd20b647d9179ea4d6f7e19d92b2fcbaac61b3b0) contentStartColumn(10) contentStartLine(1004) org.kframework.attributes.Location(Location(1004,10,1004,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnotwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnotword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1449, "{| rule `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4bee22653a18df2f89d57580fd20b647d9179ea4d6f7e19d92b2fcbaac61b3b0) contentStartColumn(10) contentStartLine(1004) org.kframework.attributes.Location(Location(1004,10,1004,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1450
	// source: iele-gas.k @1022
	// {| rule `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("30","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e0e9c7cc68dd74a88bbfc539b4f4bb9aafc582cd5c08b6dacc48096352833a94) contentStartColumn(10) contentStartLine(1022) org.kframework.attributes.Location(Location(1022,10,1022,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha3XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1450, "{| rule `_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"30\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e0e9c7cc68dd74a88bbfc539b4f4bb9aafc582cd5c08b6dacc48096352833a94) contentStartColumn(10) contentStartLine(1022) org.kframework.attributes.Location(Location(1022,10,1022,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("30"), nil
		}
	}

	// rule #1451
	// source: iele-gas.k @990
	// {| rule `_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(86b4f6fca71eb7fff0ee4d57335f3d6791d8cda855904234891173604ce9aae1) contentStartColumn(10) contentStartLine(990) org.kframework.attributes.Location(Location(990,10,990,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmul_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1451, "{| rule `_<_>_IELE-GAS`(`Gmul_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(86b4f6fca71eb7fff0ee4d57335f3d6791d8cda855904234891173604ce9aae1) contentStartColumn(10) contentStartLine(990) org.kframework.attributes.Location(Location(990,10,990,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1452
	// source: iele-gas.k @1042
	// {| rule `_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("50","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d572bd603fe98045cab76f373c0a5324c5bb43b2b61015fd484a7c8618b9a532) contentStartColumn(10) contentStartLine(1042) org.kframework.attributes.Location(Location(1042,10,1042,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsload_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1452, "{| rule `_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"50\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d572bd603fe98045cab76f373c0a5324c5bb43b2b61015fd484a7c8618b9a532) contentStartColumn(10) contentStartLine(1042) org.kframework.attributes.Location(Location(1042,10,1042,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("50"), nil
		}
	}

	// rule #1453
	// source: iele-gas.k @1027
	// {| rule `_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7279b757f35f57b5d10ec43f5b06d87118dfb4337607b748eba07043519fbaa9) contentStartColumn(10) contentStartLine(1027) org.kframework.attributes.Location(Location(1027,10,1027,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstorecellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstorecell_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1453, "{| rule `_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7279b757f35f57b5d10ec43f5b06d87118dfb4337607b748eba07043519fbaa9) contentStartColumn(10) contentStartLine(1027) org.kframework.attributes.Location(Location(1027,10,1027,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1454
	// source: iele-gas.k @1143
	// {| rule `_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("20","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4addc48ab35c7f1c89fb34f0301a2a9d5598d44a8d10d0e73d8f0670f71dc638) contentStartColumn(10) contentStartLine(1143) org.kframework.attributes.Location(Location(1143,10,1143,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha3wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1454, "{| rule `_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"20\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4addc48ab35c7f1c89fb34f0301a2a9d5598d44a8d10d0e73d8f0670f71dc638) contentStartColumn(10) contentStartLine(1143) org.kframework.attributes.Location(Location(1143,10,1143,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("20"), nil
		}
	}

	// rule #1455
	// source: iele-gas.k @1064
	// {| rule `_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("80000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d92db1af542f357a1d91e5b11cc8d54f8984e9a936ccf7a9f483c8c3e6d35273) contentStartColumn(10) contentStartLine(1064) org.kframework.attributes.Location(Location(1064,10,1064,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecpairingpairXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairingpair_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1455, "{| rule `_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"80000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d92db1af542f357a1d91e5b11cc8d54f8984e9a936ccf7a9f483c8c3e6d35273) contentStartColumn(10) contentStartLine(1064) org.kframework.attributes.Location(Location(1064,10,1064,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("80000"), nil
		}
	}

	// rule #1456
	// source: iele-gas.k @1080
	// {| rule `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f646a8bf38744bcfca0fd437996681ccea110b8b5167962d7c3d88c1fcfdf6ff) contentStartColumn(10) contentStartLine(1080) org.kframework.attributes.Location(Location(1080,10,1080,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblSgasdivisorXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Sgasdivisor_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1456, "{| rule `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f646a8bf38744bcfca0fd437996681ccea110b8b5167962d7c3d88c1fcfdf6ff) contentStartColumn(10) contentStartLine(1080) org.kframework.attributes.Location(Location(1080,10,1080,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1457
	// source: iele-gas.k @1127
	// {| rule `_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c24f37406e53978c8de01c4d0cdb9fb3b7414d03e82d38a362b515ef653224ca) contentStartColumn(10) contentStartLine(1127) org.kframework.attributes.Location(Location(1127,10,1127,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogarithmXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithm_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1457, "{| rule `_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c24f37406e53978c8de01c4d0cdb9fb3b7414d03e82d38a362b515ef653224ca) contentStartColumn(10) contentStartLine(1127) org.kframework.attributes.Location(Location(1127,10,1127,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2300"), nil
		}
	}

	// rule #1458
	// source: iele-gas.k @1147
	// {| rule `_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2800","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f40928af5f18ad354a21d326fbcd371f3049fd117f3a505908d02b31826c52b9) contentStartColumn(10) contentStartLine(1147) org.kframework.attributes.Location(Location(1147,10,1147,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstorecellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstorecell_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1458, "{| rule `_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2800\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f40928af5f18ad354a21d326fbcd371f3049fd117f3a505908d02b31826c52b9) contentStartColumn(10) contentStartLine(1147) org.kframework.attributes.Location(Location(1147,10,1147,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2800"), nil
		}
	}

	// rule #1459
	// source: iele-gas.k @1072
	// {| rule `_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>`_*Int__INT`(#token("3","Int"),`_^Int__INT`(#token("10","Int"),#token("18","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e3591fada273119fdca45474e37ea31f9b005da07402163dfb266781a87bc6be) contentStartColumn(10) contentStartLine(1072) org.kframework.attributes.Location(Location(1072,10,1072,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblRbXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rb_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1459, "{| rule `_<_>_IELE-GAS`(`Rb_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>`_*Int__INT`(#token(\"3\",\"Int\"),`_^Int__INT`(#token(\"10\",\"Int\"),#token(\"18\",\"Int\"))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e3591fada273119fdca45474e37ea31f9b005da07402163dfb266781a87bc6be) contentStartColumn(10) contentStartLine(1072) org.kframework.attributes.Location(Location(1072,10,1072,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1508, err1508 := evalXuXxorIntXuXuINT( // `_^Int__INT`(#token("10","Int"),#token("18","Int"))
				/* rhs KToken */ m.NewIntFromString("10"),
				/* rhs KToken */ m.NewIntFromString("18"),
				config, -1)
			if err1508 != nil {
				return m.NoResult, err1508
			}
			eval1507, err1507 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("3","Int"),`_^Int__INT`(#token("10","Int"),#token("18","Int")))
				/* rhs KToken */ m.NewIntFromString("3"),
				eval1508,
				config, -1)
			if err1507 != nil {
				return m.NoResult, err1507
			}
			return eval1507, nil
		}
	}

	// rule #1460
	// source: iele-gas.k @1056
	// {| rule `_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2c074f27fe860e77ed7f276cd56f0bb9f590489802fbc4076d4c23c8ed282807) contentStartColumn(10) contentStartLine(1056) org.kframework.attributes.Location(Location(1056,10,1056,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGecrecXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecrec_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1460, "{| rule `_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c074f27fe860e77ed7f276cd56f0bb9f590489802fbc4076d4c23c8ed282807) contentStartColumn(10) contentStartLine(1056) org.kframework.attributes.Location(Location(1056,10,1056,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3000"), nil
		}
	}

	// rule #1461
	// source: iele-gas.k @993
	// {| rule `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bbaba470354cbeaa2759de75b88dd4ace1b7dc3be6cdbfd63e0ba23e05f65aed) contentStartColumn(10) contentStartLine(993) org.kframework.attributes.Location(Location(993,10,993,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGdivXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdiv_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1461, "{| rule `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bbaba470354cbeaa2759de75b88dd4ace1b7dc3be6cdbfd63e0ba23e05f65aed) contentStartColumn(10) contentStartLine(993) org.kframework.attributes.Location(Location(993,10,993,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1462
	// source: iele-gas.k @1140
	// {| rule `_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("5000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8b080f91e4c8dbbb2c3874413bf5cd17dbac7e709998534511257f441b608c5b) contentStartColumn(10) contentStartLine(1140) org.kframework.attributes.Location(Location(1140,10,1140,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbrcondXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbrcond_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1462, "{| rule `_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"5000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8b080f91e4c8dbbb2c3874413bf5cd17dbac7e709998534511257f441b608c5b) contentStartColumn(10) contentStartLine(1140) org.kframework.attributes.Location(Location(1140,10,1140,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5000"), nil
		}
	}

	// rule #1463
	// source: iele-gas.k @1029
	// {| rule `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(92cfeccbc09a3944220a24d5d6565d23a8bbb43b4b7c4f9e11543a8013fabccd) contentStartColumn(10) contentStartLine(1029) org.kframework.attributes.Location(Location(1029,10,1029,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstoreword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1463, "{| rule `_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(92cfeccbc09a3944220a24d5d6565d23a8bbb43b4b7c4f9e11543a8013fabccd) contentStartColumn(10) contentStartLine(1029) org.kframework.attributes.Location(Location(1029,10,1029,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1464
	// source: iele-gas.k @1161
	// {| rule `_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("190000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a53bd9aed1ea981334e21f8c15a19ac87c927a45a3e9e07c47cb13d14a85d78c) contentStartColumn(10) contentStartLine(1161) org.kframework.attributes.Location(Location(1161,10,1161,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsload_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1464, "{| rule `_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"190000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a53bd9aed1ea981334e21f8c15a19ac87c927a45a3e9e07c47cb13d14a85d78c) contentStartColumn(10) contentStartLine(1161) org.kframework.attributes.Location(Location(1161,10,1161,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("190000"), nil
		}
	}

	// rule #1465
	// source: iele-gas.k @1041
	// {| rule `_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1875","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(368c6b916f8a352a7cccd2dac360a4f422ac737a3f001b08849938e58be4fb7b) contentStartColumn(10) contentStartLine(1041) org.kframework.attributes.Location(Location(1041,10,1041,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoresetkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoresetkey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1465, "{| rule `_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1875\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(368c6b916f8a352a7cccd2dac360a4f422ac737a3f001b08849938e58be4fb7b) contentStartColumn(10) contentStartLine(1041) org.kframework.attributes.Location(Location(1041,10,1041,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1875"), nil
		}
	}

	// rule #1466
	// source: iele-gas.k @1070
	// {| rule `_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("68","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(61918caac9f7563a60b6fc90e146546ce48e6329a64de891032d570dcc031100) contentStartColumn(10) contentStartLine(1070) org.kframework.attributes.Location(Location(1070,10,1070,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtxdatanonzeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxdatanonzero_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1466, "{| rule `_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"68\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(61918caac9f7563a60b6fc90e146546ce48e6329a64de891032d570dcc031100) contentStartColumn(10) contentStartLine(1070) org.kframework.attributes.Location(Location(1070,10,1070,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("68"), nil
		}
	}

	// rule #1467
	// source: iele-gas.k @1034
	// {| rule `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("8","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0f2c3b496da571955617f683e6a2bacbf1f8a85f77636e50d0009dd325ae1454) contentStartColumn(10) contentStartLine(1034) org.kframework.attributes.Location(Location(1034,10,1034,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogdataXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogdata_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1467, "{| rule `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"8\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0f2c3b496da571955617f683e6a2bacbf1f8a85f77636e50d0009dd325ae1454) contentStartColumn(10) contentStartLine(1034) org.kframework.attributes.Location(Location(1034,10,1034,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8"), nil
		}
	}

	// rule #1468
	// source: iele-gas.k @999
	// {| rule `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("40","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(55b5c191b8200b40cba88f8d1632954c0cd624d884ce1eab05c4ed29a3d8f01d) contentStartColumn(10) contentStartLine(999) org.kframework.attributes.Location(Location(999,10,999,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1468, "{| rule `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"40\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(55b5c191b8200b40cba88f8d1632954c0cd624d884ce1eab05c4ed29a3d8f01d) contentStartColumn(10) contentStartLine(999) org.kframework.attributes.Location(Location(999,10,999,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("40"), nil
		}
	}

	// rule #1469
	// source: iele-gas.k @1151
	// {| rule `_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("700000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(23cfab909b0b66d22ceb96dbd1ee0f5256730ac242117853fb0f1b09ac3fe7ac) contentStartColumn(10) contentStartLine(1151) org.kframework.attributes.Location(Location(1151,10,1151,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGextcodesizeXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gextcodesize_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1469, "{| rule `_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"700000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(23cfab909b0b66d22ceb96dbd1ee0f5256730ac242117853fb0f1b09ac3fe7ac) contentStartColumn(10) contentStartLine(1151) org.kframework.attributes.Location(Location(1151,10,1151,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("700000"), nil
		}
	}

	// rule #1470
	// source: iele-gas.k @1012
	// {| rule `_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2103f80075a0e76eb7f40f6edbf265ace64926a4bbe18452bcb247bbf74f5bd9) contentStartColumn(10) contentStartLine(1012) org.kframework.attributes.Location(Location(1012,10,1012,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsextXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsext_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1470, "{| rule `_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2103f80075a0e76eb7f40f6edbf265ace64926a4bbe18452bcb247bbf74f5bd9) contentStartColumn(10) contentStartLine(1012) org.kframework.attributes.Location(Location(1012,10,1012,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1471
	// source: iele-gas.k @1106
	// {| rule `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(589a3f99aad864016c2e3f0d7023274fd855e693ecd459575bb478f1892185f8) contentStartColumn(10) contentStartLine(1106) org.kframework.attributes.Location(Location(1106,10,1106,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmove_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1471, "{| rule `_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(589a3f99aad864016c2e3f0d7023274fd855e693ecd459575bb478f1892185f8) contentStartColumn(10) contentStartLine(1106) org.kframework.attributes.Location(Location(1106,10,1106,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2000"), nil
		}
	}

	// rule #1472
	// source: iele-gas.k @1166
	// {| rule `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6b8a9174c16c0a6bf18f4f37917990d44ec0954955269c575f39a62ce7182b08) contentStartColumn(10) contentStartLine(1166) org.kframework.attributes.Location(Location(1166,10,1166,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallregXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallreg_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1472, "{| rule `_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6b8a9174c16c0a6bf18f4f37917990d44ec0954955269c575f39a62ce7182b08) contentStartColumn(10) contentStartLine(1166) org.kframework.attributes.Location(Location(1166,10,1166,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1000"), nil
		}
	}

	// rule #1473
	// source: iele-gas.k @1158
	// {| rule `_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("400","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(362ff0265ad07dd315bf4bf042efff9bafb09fbe0aa4ea53794461c49f249638) contentStartColumn(10) contentStartLine(1158) org.kframework.attributes.Location(Location(1158,10,1158,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstorekeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstorekey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1473, "{| rule `_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"400\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(362ff0265ad07dd315bf4bf042efff9bafb09fbe0aa4ea53794461c49f249638) contentStartColumn(10) contentStartLine(1158) org.kframework.attributes.Location(Location(1158,10,1158,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("400"), nil
		}
	}

	// rule #1474
	// source: iele-gas.k @1145
	// {| rule `_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(238db82d12413c52640a31be641e69d058521c718765433524fd38ab1f177e8e) contentStartColumn(10) contentStartLine(1145) org.kframework.attributes.Location(Location(1145,10,1145,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gload_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1474, "{| rule `_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(238db82d12413c52640a31be641e69d058521c718765433524fd38ab1f177e8e) contentStartColumn(10) contentStartLine(1145) org.kframework.attributes.Location(Location(1145,10,1145,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3300"), nil
		}
	}

	// rule #1475
	// source: iele-gas.k @998
	// {| rule `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(50208b40a8a80edc4b0f32bbd06226f0402090cdb6d320be9414df7e96e43f12) contentStartColumn(10) contentStartLine(998) org.kframework.attributes.Location(Location(998,10,998,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1475, "{| rule `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(50208b40a8a80edc4b0f32bbd06226f0402090cdb6d320be9414df7e96e43f12) contentStartColumn(10) contentStartLine(998) org.kframework.attributes.Location(Location(998,10,998,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1476
	// source: iele-gas.k @1039
	// {| rule `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("1875","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0a4702a57830d4913476ea58fcc306d649c198060aaed40fe8a6794631a40979) contentStartColumn(10) contentStartLine(1039) org.kframework.attributes.Location(Location(1039,10,1039,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoresetXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreset_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1476, "{| rule `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"1875\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a4702a57830d4913476ea58fcc306d649c198060aaed40fe8a6794631a40979) contentStartColumn(10) contentStartLine(1039) org.kframework.attributes.Location(Location(1039,10,1039,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1875"), nil
		}
	}

	// rule #1477
	// source: iele-gas.k @1112
	// {| rule `_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("4","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(14e0d112740642369f1743fe7274c1d863ba111a45da003b851a23d016c7e457) contentStartColumn(10) contentStartLine(1112) org.kframework.attributes.Location(Location(1112,10,1112,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGmulkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1477, "{| rule `_<_>_IELE-GAS`(`Gmulkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"4\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(14e0d112740642369f1743fe7274c1d863ba111a45da003b851a23d016c7e457) contentStartColumn(10) contentStartLine(1112) org.kframework.attributes.Location(Location(1112,10,1112,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4"), nil
		}
	}

	// rule #1478
	// source: iele-gas.k @1130
	// {| rule `_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3100","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ee29942e0d42fa0634a037f9c6d59ce479655c0abe866b946219f8d2f36b77b4) contentStartColumn(10) contentStartLine(1130) org.kframework.attributes.Location(Location(1130,10,1130,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtwosXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwos_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1478, "{| rule `_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3100\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ee29942e0d42fa0634a037f9c6d59ce479655c0abe866b946219f8d2f36b77b4) contentStartColumn(10) contentStartLine(1130) org.kframework.attributes.Location(Location(1130,10,1130,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3100"), nil
		}
	}

	// rule #1479
	// source: iele-gas.k @1173
	// {| rule `_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("33000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(852a7893ccf6c0599acb3f6e226b2df9bf3d8f4a357fe362f3d1ab44e3e1fd85) contentStartColumn(10) contentStartLine(1173) org.kframework.attributes.Location(Location(1173,10,1173,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcopycreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcopycreate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1479, "{| rule `_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"33000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(852a7893ccf6c0599acb3f6e226b2df9bf3d8f4a357fe362f3d1ab44e3e1fd85) contentStartColumn(10) contentStartLine(1173) org.kframework.attributes.Location(Location(1173,10,1173,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("33000000"), nil
		}
	}

	// rule #1480
	// source: iele-gas.k @1170
	// {| rule `_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("9000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(82988e258483d04e1f886e2d28d9b9acc31385d8c3b072d198dd105eb6f3dbfa) contentStartColumn(10) contentStartLine(1170) org.kframework.attributes.Location(Location(1170,10,1170,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallvalueXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallvalue_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1480, "{| rule `_<_>_IELE-GAS`(`Gcallvalue_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"9000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(82988e258483d04e1f886e2d28d9b9acc31385d8c3b072d198dd105eb6f3dbfa) contentStartColumn(10) contentStartLine(1170) org.kframework.attributes.Location(Location(1170,10,1170,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("9000000"), nil
		}
	}

	// rule #1481
	// source: iele-gas.k @1144
	// {| rule `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2900","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(33e4f3cbf5ecb794b1922dad1a441a7147ba4541bef987b2ed0aafb6e6873213) contentStartColumn(10) contentStartLine(1144) org.kframework.attributes.Location(Location(1144,10,1144,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGloadcellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadcell_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1481, "{| rule `_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2900\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33e4f3cbf5ecb794b1922dad1a441a7147ba4541bef987b2ed0aafb6e6873213) contentStartColumn(10) contentStartLine(1144) org.kframework.attributes.Location(Location(1144,10,1144,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2900"), nil
		}
	}

	// rule #1482
	// source: iele-gas.k @1159
	// {| rule `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1875000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9c39804eea1b6420785e9e1b91546294716ecfd4041e59f9a5e102b529f8f948) contentStartColumn(10) contentStartLine(1159) org.kframework.attributes.Location(Location(1159,10,1159,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoresetXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreset_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1482, "{| rule `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1875000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9c39804eea1b6420785e9e1b91546294716ecfd4041e59f9a5e102b529f8f948) contentStartColumn(10) contentStartLine(1159) org.kframework.attributes.Location(Location(1159,10,1159,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1875000"), nil
		}
	}

	// rule #1483
	// source: iele-gas.k @1124
	// {| rule `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7b0f8e005aacec78be5114db32864d78882106d4f829eb5b31c07a87c0fe63ae) contentStartColumn(10) contentStartLine(1124) org.kframework.attributes.Location(Location(1124,10,1124,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGnotwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnotword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1483, "{| rule `_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7b0f8e005aacec78be5114db32864d78882106d4f829eb5b31c07a87c0fe63ae) contentStartColumn(10) contentStartLine(1124) org.kframework.attributes.Location(Location(1124,10,1124,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1484
	// source: iele-gas.k @996
	// {| rule `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("50","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eeab58a20188caba611e55af480a007f63837938740c99ed9e0110c1c506b080) contentStartColumn(10) contentStartLine(996) org.kframework.attributes.Location(Location(996,10,996,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1484, "{| rule `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"50\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eeab58a20188caba611e55af480a007f63837938740c99ed9e0110c1c506b080) contentStartColumn(10) contentStartLine(996) org.kframework.attributes.Location(Location(996,10,996,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("50"), nil
		}
	}

	// rule #1485
	// source: iele-gas.k @1032
	// {| rule `_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("700","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7c9740696bd5277699d16bdc2e58f0fb353863d8160bbeee65f4620eee86e0d1) contentStartColumn(10) contentStartLine(1032) org.kframework.attributes.Location(Location(1032,10,1032,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcalladdressXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcalladdress_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1485, "{| rule `_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"700\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7c9740696bd5277699d16bdc2e58f0fb353863d8160bbeee65f4620eee86e0d1) contentStartColumn(10) contentStartLine(1032) org.kframework.attributes.Location(Location(1032,10,1032,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("700"), nil
		}
	}

	// rule #1486
	// source: iele-gas.k @1138
	// {| rule `_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(528fdb3817202828b3f893a8ff2879c5a1e92f8a49a33af0dfcdf987922c5461) contentStartColumn(10) contentStartLine(1138) org.kframework.attributes.Location(Location(1138,10,1138,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcmpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmpword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1486, "{| rule `_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(528fdb3817202828b3f893a8ff2879c5a1e92f8a49a33af0dfcdf987922c5461) contentStartColumn(10) contentStartLine(1138) org.kframework.attributes.Location(Location(1138,10,1138,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	// rule #1487
	// source: iele-gas.k @1132
	// {| rule `_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("3300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1817e126099f0b68830b2207a9ad5c60c578d2cd2bb3d209f50778e466bbc039) contentStartColumn(10) contentStartLine(1132) org.kframework.attributes.Location(Location(1132,10,1132,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsextXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsext_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1487, "{| rule `_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"3300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1817e126099f0b68830b2207a9ad5c60c578d2cd2bb3d209f50778e466bbc039) contentStartColumn(10) contentStartLine(1132) org.kframework.attributes.Location(Location(1132,10,1132,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3300"), nil
		}
	}

	// rule #1488
	// source: iele-gas.k @1015
	// {| rule `_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("5","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2b0dbc24c784fd539f539d4cfde6cbb4c2415f826e5f5207aa056669ecd341ec) contentStartColumn(10) contentStartLine(1015) org.kframework.attributes.Location(Location(1015,10,1015,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbswapwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswapword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1488, "{| rule `_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"5\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2b0dbc24c784fd539f539d4cfde6cbb4c2415f826e5f5207aa056669ecd341ec) contentStartColumn(10) contentStartLine(1015) org.kframework.attributes.Location(Location(1015,10,1015,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #1489
	// source: iele-gas.k @1179
	// {| rule `_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("30","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(14545862b9770578696e75e02574102fd33899be81a66f7ea9799e6d7b8c2427) contentStartColumn(10) contentStartLine(1179) org.kframework.attributes.Location(Location(1179,10,1179,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGrip160wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1489, "{| rule `_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"30\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(14545862b9770578696e75e02574102fd33899be81a66f7ea9799e6d7b8c2427) contentStartColumn(10) contentStartLine(1179) org.kframework.attributes.Location(Location(1179,10,1179,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("30"), nil
		}
	}

	// rule #1490
	// source: iele-gas.k @1137
	// {| rule `_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2500","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c09301e2adb857a6b084ffe407d77a961a6b0b4bdd166d870f3afc54aa13e933) contentStartColumn(10) contentStartLine(1137) org.kframework.attributes.Location(Location(1137,10,1137,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcmpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1490, "{| rule `_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2500\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c09301e2adb857a6b084ffe407d77a961a6b0b4bdd166d870f3afc54aa13e933) contentStartColumn(10) contentStartLine(1137) org.kframework.attributes.Location(Location(1137,10,1137,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2500"), nil
		}
	}

	// rule #1491
	// source: iele-gas.k @987
	// {| rule `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0bb26a1401e1f1b82642a9e93f85e868038ac554160cc04ed75a9905a663395f) contentStartColumn(10) contentStartLine(987) org.kframework.attributes.Location(Location(987,10,987,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGreadstateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Greadstate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1491, "{| rule `_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0bb26a1401e1f1b82642a9e93f85e868038ac554160cc04ed75a9905a663395f) contentStartColumn(10) contentStartLine(987) org.kframework.attributes.Location(Location(987,10,987,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2"), nil
		}
	}

	// rule #1492
	// source: iele-gas.k @1135
	// {| rule `_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("10","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(51b156a8e151ce7ae2c1526c86b389708d2c7946262e7a619d6f07d01deef2f6) contentStartColumn(10) contentStartLine(1135) org.kframework.attributes.Location(Location(1135,10,1135,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbswapwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswapword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1492, "{| rule `_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"10\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51b156a8e151ce7ae2c1526c86b389708d2c7946262e7a619d6f07d01deef2f6) contentStartColumn(10) contentStartLine(1135) org.kframework.attributes.Location(Location(1135,10,1135,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("10"), nil
		}
	}

	// rule #1493
	// source: iele-gas.k @1167
	// {| rule `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("6800","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(778093996c998b105d46a78738024ac2b07a5f5beb9646834cee1c4dd10b54b6) contentStartColumn(10) contentStartLine(1167) org.kframework.attributes.Location(Location(1167,10,1167,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlocalcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glocalcall_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1493, "{| rule `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"6800\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(778093996c998b105d46a78738024ac2b07a5f5beb9646834cee1c4dd10b54b6) contentStartColumn(10) contentStartLine(1167) org.kframework.attributes.Location(Location(1167,10,1167,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("6800"), nil
		}
	}

	// rule #1494
	// source: iele-gas.k @1016
	// {| rule `_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1620fb6cf96324d0954b7731078acf8b4a0b72f91f79f5f425b74e6c01eb39e) contentStartColumn(10) contentStartLine(1016) org.kframework.attributes.Location(Location(1016,10,1016,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGiszeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Giszero_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1494, "{| rule `_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f1620fb6cf96324d0954b7731078acf8b4a0b72f91f79f5f425b74e6c01eb39e) contentStartColumn(10) contentStartLine(1016) org.kframework.attributes.Location(Location(1016,10,1016,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1495
	// source: iele-gas.k @1058
	// {| rule `_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("3","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d5fd470038445c6f9a30039ec9a97a62d7d94a8642a9b29be9214e8a8cf02182) contentStartColumn(10) contentStartLine(1058) org.kframework.attributes.Location(Location(1058,10,1058,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha256wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1495, "{| rule `_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"3\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5fd470038445c6f9a30039ec9a97a62d7d94a8642a9b29be9214e8a8cf02182) contentStartColumn(10) contentStartLine(1058) org.kframework.attributes.Location(Location(1058,10,1058,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #1496
	// source: iele-gas.k @1117
	// {| rule `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("80","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b868123f5642be771d2e7d9d9b77d2ad6801547e58aff462a52b6cd71bfee81) contentStartColumn(10) contentStartLine(1117) org.kframework.attributes.Location(Location(1117,10,1117,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1496, "{| rule `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"80\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5b868123f5642be771d2e7d9d9b77d2ad6801547e58aff462a52b6cd71bfee81) contentStartColumn(10) contentStartLine(1117) org.kframework.attributes.Location(Location(1117,10,1117,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("80"), nil
		}
	}

	// rule #1497
	// source: iele-gas.k @1053
	// {| rule `_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("32000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(57ab0854369c11e3ede944566a95a1a428d3859e89090c7445e4fb52720fdffa) contentStartColumn(10) contentStartLine(1053) org.kframework.attributes.Location(Location(1053,10,1053,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcreate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1497, "{| rule `_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"32000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57ab0854369c11e3ede944566a95a1a428d3859e89090c7445e4fb52720fdffa) contentStartColumn(10) contentStartLine(1053) org.kframework.attributes.Location(Location(1053,10,1053,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("32000"), nil
		}
	}

	// rule #1498
	// source: iele-gas.k @1048
	// {| rule `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("11","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7d5835dacf5aea205522c2666317f2775e3739412b4461a737c4baee6457adb3) contentStartColumn(10) contentStartLine(1048) org.kframework.attributes.Location(Location(1048,10,1048,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlocalcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glocalcall_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1498, "{| rule `_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"11\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d5835dacf5aea205522c2666317f2775e3739412b4461a737c4baee6457adb3) contentStartColumn(10) contentStartLine(1048) org.kframework.attributes.Location(Location(1048,10,1048,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("11"), nil
		}
	}

	// rule #1499
	// source: iele-gas.k @1172
	// {| rule `_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("32000000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2fa0dc12acbd2b1acba9cdacc14f66ba32c5d82de0f2d358f92a904dcd5755c1) contentStartColumn(10) contentStartLine(1172) org.kframework.attributes.Location(Location(1172,10,1172,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcreate_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1499, "{| rule `_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"32000000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fa0dc12acbd2b1acba9cdacc14f66ba32c5d82de0f2d358f92a904dcd5755c1) contentStartColumn(10) contentStartLine(1172) org.kframework.attributes.Location(Location(1172,10,1172,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("32000000"), nil
		}
	}

	// rule #1500
	// source: iele-gas.k @1108
	// {| rule `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2800","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3e39f5b05670030f8107f3171ba6b32df32b2a9be8fa67f97cc9f0d296b8fc71) contentStartColumn(10) contentStartLine(1108) org.kframework.attributes.Location(Location(1108,10,1108,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gadd_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1500, "{| rule `_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2800\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3e39f5b05670030f8107f3171ba6b32df32b2a9be8fa67f97cc9f0d296b8fc71) contentStartColumn(10) contentStartLine(1108) org.kframework.attributes.Location(Location(1108,10,1108,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2800"), nil
		}
	}

	// rule #1501
	// source: iele-gas.k @1121
	// {| rule `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("8","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5090532e6a3abe6a303a7fbeaa9ea0dd4ad94ad2d41fec1167bd8b9ee6e70d57) contentStartColumn(10) contentStartLine(1121) org.kframework.attributes.Location(Location(1121,10,1121,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodexp_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1501, "{| rule `_<_>_IELE-GAS`(`Gexpmodexp_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"8\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5090532e6a3abe6a303a7fbeaa9ea0dd4ad94ad2d41fec1167bd8b9ee6e70d57) contentStartColumn(10) contentStartLine(1121) org.kframework.attributes.Location(Location(1121,10,1121,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8"), nil
		}
	}

	// rule #1502
	// source: iele-gas.k @1071
	// {| rule `_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("24000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(adb8b19b0bd1d58188a1aed20a0967dd72481ad45a44e3c6453245ca814f1640) contentStartColumn(10) contentStartLine(1071) org.kframework.attributes.Location(Location(1071,10,1071,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblRselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rselfdestruct_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1502, "{| rule `_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"24000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(adb8b19b0bd1d58188a1aed20a0967dd72481ad45a44e3c6453245ca814f1640) contentStartColumn(10) contentStartLine(1071) org.kframework.attributes.Location(Location(1071,10,1071,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("24000"), nil
		}
	}

	// rule #1503
	// source: iele-gas.k @1049
	// {| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("40","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(edf41faa7eaf745971d0dccc15b15825db0ea8521e79451cba832f2002809d56) contentStartColumn(10) contentStartLine(1049) org.kframework.attributes.Location(Location(1049,10,1049,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcall_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1503, "{| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"40\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(edf41faa7eaf745971d0dccc15b15825db0ea8521e79451cba832f2002809d56) contentStartColumn(10) contentStartLine(1049) org.kframework.attributes.Location(Location(1049,10,1049,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("40"), nil
		}
	}

	// rule #1504
	// source: iele-gas.k @1069
	// {| rule `_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("4","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3574381234ff0ac5a8f9d129fb5fe222cf6c90c4beca0f4965314ccfe438a1b6) contentStartColumn(10) contentStartLine(1069) org.kframework.attributes.Location(Location(1069,10,1069,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGtxdatazeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxdatazero_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1504, "{| rule `_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"4\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3574381234ff0ac5a8f9d129fb5fe222cf6c90c4beca0f4965314ccfe438a1b6) contentStartColumn(10) contentStartLine(1069) org.kframework.attributes.Location(Location(1069,10,1069,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("4"), nil
		}
	}

	// rule #1505
	// source: iele-gas.k @1154
	// {| rule `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("8000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99b731d7b85e9ef62e5d974ba6a0c10d9486701361bbb25210841745e4651fb7) contentStartColumn(10) contentStartLine(1154) org.kframework.attributes.Location(Location(1154,10,1154,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGlogdataXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogdata_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1505, "{| rule `_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"8000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(99b731d7b85e9ef62e5d974ba6a0c10d9486701361bbb25210841745e4651fb7) contentStartColumn(10) contentStartLine(1154) org.kframework.attributes.Location(Location(1154,10,1154,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8000"), nil
		}
	}

	// rule #1506
	// source: iele-gas.k @1139
	// {| rule `_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("5000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d9d189c5bc2a66176332ee49753686606301095c349a88c3beb927f45bd29fed) contentStartColumn(10) contentStartLine(1139) org.kframework.attributes.Location(Location(1139,10,1139,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbrXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbr_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1506, "{| rule `_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"5000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d9d189c5bc2a66176332ee49753686606301095c349a88c3beb927f45bd29fed) contentStartColumn(10) contentStartLine(1139) org.kframework.attributes.Location(Location(1139,10,1139,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5000"), nil
		}
	}

	// rule #1507
	// source: iele-gas.k @1019
	// {| rule `_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("8","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(91bdcb40e3e0dd96163fdeeebba90dc9611749525a9c851ba2e31f415cac6d4b) contentStartColumn(10) contentStartLine(1019) org.kframework.attributes.Location(Location(1019,10,1019,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGbrXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbr_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1507, "{| rule `_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"8\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(91bdcb40e3e0dd96163fdeeebba90dc9611749525a9c851ba2e31f415cac6d4b) contentStartColumn(10) contentStartLine(1019) org.kframework.attributes.Location(Location(1019,10,1019,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8"), nil
		}
	}

	// rule #1508
	// source: iele-gas.k @1164
	// {| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(30b09cd0b4c9f2471f09b8bf02531f03825922ffb6a6eb8bf1048b89f3d6c09b) contentStartColumn(10) contentStartLine(1164) org.kframework.attributes.Location(Location(1164,10,1164,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestruct_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1508, "{| rule `_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(30b09cd0b4c9f2471f09b8bf02531f03825922ffb6a6eb8bf1048b89f3d6c09b) contentStartColumn(10) contentStartLine(1164) org.kframework.attributes.Location(Location(1164,10,1164,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #1509
	// source: iele-gas.k @1050
	// {| rule `_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("2300","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ed070fcc4a3b8d52ed28a96d655fdb62c06ba50124f0d3b4128b17d547683520) contentStartColumn(10) contentStartLine(1050) org.kframework.attributes.Location(Location(1050,10,1050,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallstipendXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallstipend_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1509, "{| rule `_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"2300\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed070fcc4a3b8d52ed28a96d655fdb62c06ba50124f0d3b4128b17d547683520) contentStartColumn(10) contentStartLine(1050) org.kframework.attributes.Location(Location(1050,10,1050,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2300"), nil
		}
	}

	// rule #1510
	// source: iele-gas.k @1066
	// {| rule `_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("8192","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(95c50673f7614ff387ffc911187618a908285fff909da2763a528467c67f7c70) contentStartColumn(10) contentStartLine(1066) org.kframework.attributes.Location(Location(1066,10,1066,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGquadcoeffXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gquadcoeff_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1510, "{| rule `_<_>_IELE-GAS`(`Gquadcoeff_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"8192\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(95c50673f7614ff387ffc911187618a908285fff909da2763a528467c67f7c70) contentStartColumn(10) contentStartLine(1066) org.kframework.attributes.Location(Location(1066,10,1066,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("8192"), nil
		}
	}

	// rule #1511
	// source: iele-gas.k @1037
	// {| rule `_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("500","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(85355141d0a833b75a886e7f768a692a2837f050b9540b3809b373b8e8100cdf) contentStartColumn(10) contentStartLine(1037) org.kframework.attributes.Location(Location(1037,10,1037,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreword_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1511, "{| rule `_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"500\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85355141d0a833b75a886e7f768a692a2837f050b9540b3809b373b8e8100cdf) contentStartColumn(10) contentStartLine(1037) org.kframework.attributes.Location(Location(1037,10,1037,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("500"), nil
		}
	}

	// rule #1512
	// source: iele-gas.k @1090
	// {| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token("700","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7e02783f5bfe4f913a4d2cc30b29c0e1f89096d9466e1facba2651ead0a0423) contentStartColumn(10) contentStartLine(1090) org.kframework.attributes.Location(Location(1090,10,1090,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcall_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1512, "{| rule `_<_>_IELE-GAS`(`Gcall_IELE-GAS`(.KList),`ALBE_IELE-CONSTANTS`(.KList))=>#token(\"700\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d7e02783f5bfe4f913a4d2cc30b29c0e1f89096d9466e1facba2651ead0a0423) contentStartColumn(10) contentStartLine(1090) org.kframework.attributes.Location(Location(1090,10,1090,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("700"), nil
		}
	}

	// rule #1513
	// source: iele-gas.k @1023
	// {| rule `_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token("6","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b1df72c6ce59430aee767db9db919c84ab80a94904ac3715bc0790e2da44f579) contentStartColumn(10) contentStartLine(1023) org.kframework.attributes.Location(Location(1023,10,1023,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsha3wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3word_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp1.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1513, "{| rule `_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),`DEFAULT_IELE-GAS`(.KList))=>#token(\"6\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b1df72c6ce59430aee767db9db919c84ab80a94904ac3715bc0790e2da44f579) contentStartColumn(10) contentStartLine(1023) org.kframework.attributes.Location(Location(1023,10,1023,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("6"), nil
		}
	}

	// rule #1514
	// source: iele-gas.k @1120
	// {| rule `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("180","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d3c8f2c7f3fa843bc146a612c79b5c2aa7f7fb8e25c7ef38525b251eb49c120b) contentStartColumn(10) contentStartLine(1120) org.kframework.attributes.Location(Location(1120,10,1120,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodmod_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1514, "{| rule `_<_>_IELE-GAS`(`Gexpmodmod_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"180\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3c8f2c7f3fa843bc146a612c79b5c2aa7f7fb8e25c7ef38525b251eb49c120b) contentStartColumn(10) contentStartLine(1120) org.kframework.attributes.Location(Location(1120,10,1120,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("180"), nil
		}
	}

	// rule #1515
	// source: iele-gas.k @1160
	// {| rule `_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("1875000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d05578db9c3367c77db89c8fd7135978085a1fed5a63576dc29dba31000f33e4) contentStartColumn(10) contentStartLine(1160) org.kframework.attributes.Location(Location(1160,10,1160,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGsstoresetkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoresetkey_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1515, "{| rule `_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"1875000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d05578db9c3367c77db89c8fd7135978085a1fed5a63576dc29dba31000f33e4) contentStartColumn(10) contentStartLine(1160) org.kframework.attributes.Location(Location(1160,10,1160,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("1875000"), nil
		}
	}

	// rule #1516
	// source: iele-gas.k @1169
	// {| rule `_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("2300000","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c173aebb0966e051c3479f9648be1c6a506fc06d6f1a6257520fc006bf24b5c3) contentStartColumn(10) contentStartLine(1169) org.kframework.attributes.Location(Location(1169,10,1169,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGcallstipendXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallstipend_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1516, "{| rule `_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"2300000\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c173aebb0966e051c3479f9648be1c6a506fc06d6f1a6257520fc006bf24b5c3) contentStartColumn(10) contentStartLine(1169) org.kframework.attributes.Location(Location(1169,10,1169,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("2300000"), nil
		}
	}

	// rule #1517
	// source: iele-gas.k @1119
	// {| rule `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token("15","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6369426cbe1aa5c5803f215251bad8257bda38a02a15198b054081696d21a763) contentStartColumn(10) contentStartLine(1119) org.kframework.attributes.Location(Location(1119,10,1119,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblGexpmodkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodkara_IELE-GAS`(.KList)
		if kapp1, t := c2.(*m.KApply); t && kapp1.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp1.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// RHS
			traceRuleApply("FUNC", 1517, "{| rule `_<_>_IELE-GAS`(`Gexpmodkara_IELE-GAS`(.KList),`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"15\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6369426cbe1aa5c5803f215251bad8257bda38a02a15198b054081696d21a763) contentStartColumn(10) contentStartLine(1119) org.kframework.attributes.Location(Location(1119,10,1119,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("15"), nil
		}
	}

	// rule #1518
	// source: iele-gas.k @1187
	// {| rule `_<_>_IELE-GAS`(SCHEDCONST,`DANSE_IELE-CONSTANTS`(.KList))=>`_<_>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList)) requires isScheduleConst(SCHEDCONST) ensures #token("true","Bool") [UNIQUE_ID(ad79495e06c80d36cfce4c1ec3c0048e1704bd5bcf9dd3115cc45851cd7b7ec7) contentStartColumn(10) contentStartLine(1187) org.kframework.attributes.Location(Location(1187,10,1187,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHEDCONST := c1 // lhs KVariable SCHEDCONST
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
			// REQUIRES
			eval1509, err1509 := evalIsScheduleConst( // isScheduleConst(SCHEDCONST)
				varSCHEDCONST,
				config, -1)
			if err1509 != nil {
				return m.NoResult, err1509
			}
			if m.IsTrue(eval1509) {
				// RHS
				traceRuleApply("FUNC", 1518, "{| rule `_<_>_IELE-GAS`(SCHEDCONST,`DANSE_IELE-CONSTANTS`(.KList))=>`_<_>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList)) requires isScheduleConst(SCHEDCONST) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad79495e06c80d36cfce4c1ec3c0048e1704bd5bcf9dd3115cc45851cd7b7ec7) contentStartColumn(10) contentStartLine(1187) org.kframework.attributes.Location(Location(1187,10,1187,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval1510, err1510 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))
					varSCHEDCONST,
					&m.KApply{Label: m.LblALBEXuIELEXhyphenCONSTANTS, List: []m.K{ // as-is ALBE_IELE-CONSTANTS
					}},
					config, -1)
				if err1510 != nil {
					return m.NoResult, err1510
				}
				return eval1510, nil
			}
		}
	}

	// rule #1519
	// source: iele-gas.k @1092
	// {| rule `_<_>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))=>`_<_>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList)) requires isScheduleConst(SCHEDCONST) ensures #token("true","Bool") [UNIQUE_ID(1398e07804a89ba98b045c9b79191138239a6465977276116a45e21952d3608e) contentStartColumn(10) contentStartLine(1092) org.kframework.attributes.Location(Location(1092,10,1092,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHEDCONST := c1 // lhs KVariable SCHEDCONST
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
			// REQUIRES
			eval1511, err1511 := evalIsScheduleConst( // isScheduleConst(SCHEDCONST)
				varSCHEDCONST,
				config, -1)
			if err1511 != nil {
				return m.NoResult, err1511
			}
			if m.IsTrue(eval1511) {
				// RHS
				traceRuleApply("FUNC", 1519, "{| rule `_<_>_IELE-GAS`(SCHEDCONST,`ALBE_IELE-CONSTANTS`(.KList))=>`_<_>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList)) requires isScheduleConst(SCHEDCONST) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1398e07804a89ba98b045c9b79191138239a6465977276116a45e21952d3608e) contentStartColumn(10) contentStartLine(1092) org.kframework.attributes.Location(Location(1092,10,1092,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval1512, err1512 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(SCHEDCONST,`DEFAULT_IELE-GAS`(.KList))
					varSCHEDCONST,
					&m.KApply{Label: m.LblDEFAULTXuIELEXhyphenGAS, List: []m.K{ // as-is DEFAULT_IELE-GAS
					}},
					config, -1)
				if err1512 != nil {
					return m.NoResult, err1512
				}
				return eval1512, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXuXgtXuIELEXhyphenGAS", args: []m.K{c1, c2}}
}

func evalIsXhashRuleTag(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1520
	// source: ? @?
	// {| rule `is#RuleTag`(#KToken(#token("#RuleTag","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXhashRuleTag { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1520, "{| rule `is#RuleTag`(#KToken(#token(\"#RuleTag\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1521
	// source: ? @?
	// {| rule `is#RuleTag`(#KToken(#token("#LowerId","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXhashLowerID { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1521, "{| rule `is#RuleTag`(#KToken(#token(\"#LowerId\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1522
	// source: ? @?
	// {| rule `is#RuleTag`(#KToken(#token("#UpperId","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXhashUpperID { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1522, "{| rule `is#RuleTag`(#KToken(#token(\"#UpperId\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1523
	// source: ? @?
	// {| rule `is#RuleTag`(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1523, "{| rule `is#RuleTag`(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXltXltByteXuXuIELEXhyphenDATA(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1524
	// source: data.k @213
	// {| rule `_<<Byte__IELE-DATA`(N,M)=>`_<<Int__INT`(N,`_*Int__INT`(#token("8","Int"),M)) requires `_andBool_`(isInt(N),isInt(M)) ensures #token("true","Bool") [UNIQUE_ID(51d6885a5555d97b033ff4284ec02ecadd237866531542f0dfd68bd08184bc64) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varM, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(N) && isInt(M)
			// RHS
			traceRuleApply("FUNC", 1524, "{| rule `_<<Byte__IELE-DATA`(N,M)=>`_<<Int__INT`(N,`_*Int__INT`(#token(\"8\",\"Int\"),M)) requires `_andBool_`(isInt(N),isInt(M)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(51d6885a5555d97b033ff4284ec02ecadd237866531542f0dfd68bd08184bc64) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1514, err1514 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("8","Int"),M)
				/* rhs KToken */ m.NewIntFromString("8"),
				varM,
				config, -1)
			if err1514 != nil {
				return m.NoResult, err1514
			}
			eval1513, err1513 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(N,`_*Int__INT`(#token("8","Int"),M))
				varN,
				eval1514,
				config, -1)
			if err1513 != nil {
				return m.NoResult, err1513
			}
			return eval1513, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXltByteXuXuIELEXhyphenDATA", args: []m.K{c1, c2}}
}

func evalIsExportedCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1525
	// source: ? @?
	// {| rule isExportedCell(`<exported>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexportedXgt && len(kapp0.List) == 1 { // `<exported>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1525, "{| rule isExportedCell(`<exported>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1526
	// source: ? @?
	// {| rule isExportedCell(#KToken(#token("ExportedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExportedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1526, "{| rule isExportedCell(#KToken(#token(\"ExportedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1527
	// source: ? @?
	// {| rule isExportedCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1527, "{| rule isExportedCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalReplaceXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuSTRING(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.replace
	lbl := m.LblReplaceXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuSTRING // replace(_,_,_,_)_STRING
	sort := m.SortString
	if hookRes, hookErr := stringHooks.replace(c1, c2, c3, c4, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.replace, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1528
	// source: domains.k @570
	// {| rule `replace(_,_,_,_)_STRING`(Source,ToReplace,Replacement,Count)=>`_+String__STRING`(`_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source)),ToReplace,Replacement,`_-Int__INT`(Count,#token("1","Int")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isInt(Count)),isString(ToReplace)),`_>Int__INT`(Count,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(00a2618b5ebbb57a911b7f2ad35458f6b3e1d5cb14ef1e49468e9833e93e48c0) contentStartColumn(8) contentStartLine(570) org.kframework.attributes.Location(Location(570,8,573,30)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToReplace, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varReplacement, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				if varCount, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval1515, err1515 := evalXuXgtIntXuXuINT( // `_>Int__INT`(Count,#token("0","Int"))
						varCount,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err1515 != nil {
						return m.NoResult, err1515
					}
					if /* rhs precomputed isString(Replacement) && isString(Source) && isInt(Count) && isString(ToReplace) */ /* && */
					   m.IsTrue(eval1515) {
						// RHS
						traceRuleApply("FUNC", 1528, "{| rule `replace(_,_,_,_)_STRING`(Source,ToReplace,Replacement,Count)=>`_+String__STRING`(`_+String__STRING`(substrString(Source,#token(\"0\",\"Int\"),findString(Source,ToReplace,#token(\"0\",\"Int\"))),Replacement),`replace(_,_,_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToReplace,#token(\"0\",\"Int\")),lengthString(ToReplace)),lengthString(Source)),ToReplace,Replacement,`_-Int__INT`(Count,#token(\"1\",\"Int\")))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(Replacement),isString(Source)),isInt(Count)),isString(ToReplace)),`_>Int__INT`(Count,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(00a2618b5ebbb57a911b7f2ad35458f6b3e1d5cb14ef1e49468e9833e93e48c0) contentStartColumn(8) contentStartLine(570) org.kframework.attributes.Location(Location(570,8,573,30)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval1519, err1519 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
							varSource,
							varToReplace,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err1519 != nil {
							return m.NoResult, err1519
						}
						eval1518, err1518 := evalSubstrString( // substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int")))
							varSource,
							/* rhs KToken */ m.NewIntFromString("0"),
							eval1519,
							config, -1)
						if err1518 != nil {
							return m.NoResult, err1518
						}
						eval1517, err1517 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement)
							eval1518,
							varReplacement,
							config, -1)
						if err1517 != nil {
							return m.NoResult, err1517
						}
						eval1523, err1523 := evalFindString( // findString(Source,ToReplace,#token("0","Int"))
							varSource,
							varToReplace,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err1523 != nil {
							return m.NoResult, err1523
						}
						eval1524, err1524 := evalLengthString( // lengthString(ToReplace)
							varToReplace,
							config, -1)
						if err1524 != nil {
							return m.NoResult, err1524
						}
						eval1522, err1522 := evalXuXplusIntXu( // `_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace))
							eval1523,
							eval1524,
							config, -1)
						if err1522 != nil {
							return m.NoResult, err1522
						}
						eval1525, err1525 := evalLengthString( // lengthString(Source)
							varSource,
							config, -1)
						if err1525 != nil {
							return m.NoResult, err1525
						}
						eval1521, err1521 := evalSubstrString( // substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source))
							varSource,
							eval1522,
							eval1525,
							config, -1)
						if err1521 != nil {
							return m.NoResult, err1521
						}
						eval1526, err1526 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(Count,#token("1","Int"))
							varCount,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err1526 != nil {
							return m.NoResult, err1526
						}
						eval1520, err1520 := evalReplaceXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuSTRING( // `replace(_,_,_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source)),ToReplace,Replacement,`_-Int__INT`(Count,#token("1","Int")))
							eval1521,
							varToReplace,
							varReplacement,
							eval1526,
							config, -1)
						if err1520 != nil {
							return m.NoResult, err1520
						}
						eval1516, err1516 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(`_+String__STRING`(substrString(Source,#token("0","Int"),findString(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToReplace,#token("0","Int")),lengthString(ToReplace)),lengthString(Source)),ToReplace,Replacement,`_-Int__INT`(Count,#token("1","Int"))))
							eval1517,
							eval1520,
							config, -1)
						if err1516 != nil {
							return m.NoResult, err1516
						}
						return eval1516, nil
					}
				}
			}
		}
	}

	// rule #1529
	// source: domains.k @574
	// {| rule `replace(_,_,_,_)_STRING`(Source,_17,_18,_0)=>Source requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Source),isString(_18)),isString(_17)),`_==Int_`(_0,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ba5c0b944155cbe05f7bf6c179a2ed1e9baea983ec5099e8449b31926e9b3069) contentStartColumn(8) contentStartLine(574) org.kframework.attributes.Location(Location(574,8,574,49)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if _, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if _, t := c3.(*m.String); t { // lhs KVariable with hook:STRING.String
				if varXu0, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval1527, err1527 := evalXuXeqXeqIntXu( // `_==Int_`(_0,#token("0","Int"))
						varXu0,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err1527 != nil {
						return m.NoResult, err1527
					}
					if /* rhs precomputed isString(Source) && isString(_18) && isString(_17) */ /* && */
					   m.IsTrue(eval1527) {
						// RHS
						traceRuleApply("FUNC", 1529, "{| rule `replace(_,_,_,_)_STRING`(Source,_17,_18,_0)=>Source requires `_andBool_`(`_andBool_`(`_andBool_`(isString(Source),isString(_18)),isString(_17)),`_==Int_`(_0,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba5c0b944155cbe05f7bf6c179a2ed1e9baea983ec5099e8449b31926e9b3069) contentStartColumn(8) contentStartLine(574) org.kframework.attributes.Location(Location(574,8,574,49)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						return varSource, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalReplaceXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuSTRING", args: []m.K{c1, c2, c3, c4}}
}

func evalXhashtellXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.tell
	lbl := m.LblXhashtellXlparenXuXrparenXuKXhyphenIO // #tell(_)_K-IO
	sort := m.SortInt
	if hookRes, hookErr := ioHooks.tell(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.tell, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtellXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalLengthBytes(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.length
	lbl := m.LblLengthBytes // lengthBytes
	sort := m.SortInt
	if hookRes, hookErr := bytesHooks.length(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.length, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalLengthBytes", args: []m.K{c}}
}

func evalInitBlockhashCell(config m.K, guard int) (m.K, error) {
	// rule #1530
	// source: ? @?
	// {| rule initBlockhashCell(.KList)=>`<blockhash>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8a5ed12ded10dd68b8e5dd2fc23db016a0a55140f3dcf8ea76bf2d0885245059) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1530, "{| rule initBlockhashCell(.KList)=>`<blockhash>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8a5ed12ded10dd68b8e5dd2fc23db016a0a55140f3dcf8ea76bf2d0885245059) initializer()] |}")
	eval1528, err1528 := evalXdotList(config, -1) // `.List`(.KList)
	if err1528 != nil {
		return m.NoResult, err1528
	}
	return &m.KApply{Label: m.LblXltblockhashXgt, List: []m.K{ // as-is <blockhash>
		eval1528,
	}}, nil

}

//var constInitBlockhashCell K = evalInitBlockhashCell(m.InternedBottom)

func evalXhashunparseByteStack(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1531
	// source: data.k @480
	// {| rule #unparseByteStack(WS)=>#unparseByteStackAux(WS,`.StringBuffer_STRING-BUFFER-HOOKED`(.KList)) requires isWordStack(WS) ensures #token("true","Bool") [UNIQUE_ID(6bb075edbf5e13fbd893ad3a1ccc183aa67a53832bede1b27db1640259babdd8) contentStartColumn(10) contentStartLine(480) org.kframework.attributes.Location(Location(480,10,480,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c // lhs KVariable WS
		// REQUIRES
		eval1529, err1529 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err1529 != nil {
			return m.NoResult, err1529
		}
		if m.IsTrue(eval1529) {
			// RHS
			traceRuleApply("FUNC", 1531, "{| rule #unparseByteStack(WS)=>#unparseByteStackAux(WS,`.StringBuffer_STRING-BUFFER-HOOKED`(.KList)) requires isWordStack(WS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6bb075edbf5e13fbd893ad3a1ccc183aa67a53832bede1b27db1640259babdd8) contentStartColumn(10) contentStartLine(480) org.kframework.attributes.Location(Location(480,10,480,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1531, err1531 := evalXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED(config, -1) // `.StringBuffer_STRING-BUFFER-HOOKED`(.KList)
			if err1531 != nil {
				return m.NoResult, err1531
			}
			eval1530, err1530 := evalXhashunparseByteStackAux( // #unparseByteStackAux(WS,`.StringBuffer_STRING-BUFFER-HOOKED`(.KList))
				varWS,
				eval1531,
				config, -1)
			if err1530 != nil {
				return m.NoResult, err1530
			}
			return eval1530, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashunparseByteStack", args: []m.K{c}}
}

func evalIsIeleCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1532
	// source: ? @?
	// {| rule isIeleCell(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltieleXgt && len(kapp0.List) == 15 { // `<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval1532, err1532 := evalIsOutputCell( // isOutputCell(K0)
			varK0,
			config, -1)
		if err1532 != nil {
			return m.NoResult, err1532
		}
		eval1533, err1533 := evalIsCallStackCell( // isCallStackCell(K1)
			varK1,
			config, -1)
		if err1533 != nil {
			return m.NoResult, err1533
		}
		eval1534, err1534 := evalIsInterimStatesCell( // isInterimStatesCell(K2)
			varK2,
			config, -1)
		if err1534 != nil {
			return m.NoResult, err1534
		}
		eval1535, err1535 := evalIsSubstateStackCell( // isSubstateStackCell(K3)
			varK3,
			config, -1)
		if err1535 != nil {
			return m.NoResult, err1535
		}
		eval1536, err1536 := evalIsCallFrameCell( // isCallFrameCell(K4)
			varK4,
			config, -1)
		if err1536 != nil {
			return m.NoResult, err1536
		}
		eval1537, err1537 := evalIsSubstateCell( // isSubstateCell(K5)
			varK5,
			config, -1)
		if err1537 != nil {
			return m.NoResult, err1537
		}
		eval1538, err1538 := evalIsGasPriceCell( // isGasPriceCell(K6)
			varK6,
			config, -1)
		if err1538 != nil {
			return m.NoResult, err1538
		}
		eval1539, err1539 := evalIsOriginCell( // isOriginCell(K7)
			varK7,
			config, -1)
		if err1539 != nil {
			return m.NoResult, err1539
		}
		eval1540, err1540 := evalIsBeneficiaryCell( // isBeneficiaryCell(K8)
			varK8,
			config, -1)
		if err1540 != nil {
			return m.NoResult, err1540
		}
		eval1541, err1541 := evalIsDifficultyCell( // isDifficultyCell(K9)
			varK9,
			config, -1)
		if err1541 != nil {
			return m.NoResult, err1541
		}
		eval1542, err1542 := evalIsNumberCell( // isNumberCell(K10)
			varK10,
			config, -1)
		if err1542 != nil {
			return m.NoResult, err1542
		}
		eval1543, err1543 := evalIsGasLimitCell( // isGasLimitCell(K11)
			varK11,
			config, -1)
		if err1543 != nil {
			return m.NoResult, err1543
		}
		eval1544, err1544 := evalIsGasUsedCell( // isGasUsedCell(K12)
			varK12,
			config, -1)
		if err1544 != nil {
			return m.NoResult, err1544
		}
		eval1545, err1545 := evalIsTimestampCell( // isTimestampCell(K13)
			varK13,
			config, -1)
		if err1545 != nil {
			return m.NoResult, err1545
		}
		eval1546, err1546 := evalIsBlockhashCell( // isBlockhashCell(K14)
			varK14,
			config, -1)
		if err1546 != nil {
			return m.NoResult, err1546
		}
		if ((((((((((((((m.IsTrue(eval1532)) &&
		   (m.IsTrue(eval1533))) &&
		   (m.IsTrue(eval1534))) &&
		   (m.IsTrue(eval1535))) &&
		   (m.IsTrue(eval1536))) &&
		   (m.IsTrue(eval1537))) &&
		   (m.IsTrue(eval1538))) &&
		   (m.IsTrue(eval1539))) &&
		   (m.IsTrue(eval1540))) &&
		   (m.IsTrue(eval1541))) &&
		   (m.IsTrue(eval1542))) &&
		   (m.IsTrue(eval1543))) &&
		   (m.IsTrue(eval1544))) &&
		   (m.IsTrue(eval1545))) &&
		   (m.IsTrue(eval1546)) {
			// RHS
			traceRuleApply("FUNC", 1532, "{| rule isIeleCell(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1533
	// source: ? @?
	// {| rule isIeleCell(#KToken(#token("IeleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1533, "{| rule isIeleCell(#KToken(#token(\"IeleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1534
	// source: ? @?
	// {| rule isIeleCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1534, "{| rule isIeleCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitOutputCell(config m.K, guard int) (m.K, error) {
	// rule #1535
	// source: ? @?
	// {| rule initOutputCell(.KList)=>`<output>`(`.List{"operandList"}`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(50f4b691482ff4b24f36a307d0f6ce8bce37184dc09a53d5cd89bcafbd7d7f44) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1535, "{| rule initOutputCell(.KList)=>`<output>`(`.List{\"operandList\"}`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(50f4b691482ff4b24f36a307d0f6ce8bce37184dc09a53d5cd89bcafbd7d7f44) initializer()] |}")
	return &m.KApply{Label: m.LblXltoutputXgt, List: []m.K{ // as-is <output>
		&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
		}},
	}}, nil

}

//var constInitOutputCell K = evalInitOutputCell(m.InternedBottom)

func evalXhashcomputeJumpTable(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1536
	// source: iele.k @1800
	// {| rule #computeJumpTable(BLOCKS)=>#computeJumpTableAux(BLOCKS,`.Map`(.KList),`.Set`(.KList)) requires isBlocks(BLOCKS) ensures #token("true","Bool") [UNIQUE_ID(4438f304847fb3e0da4e6fbbfd109c1707e0ee51330b7f164532d5af46642cd9) contentStartColumn(10) contentStartLine(1800) org.kframework.attributes.Location(Location(1800,10,1800,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varBLOCKS := c // lhs KVariable BLOCKS
		// REQUIRES
		eval1547, err1547 := evalIsBlocks( // isBlocks(BLOCKS)
			varBLOCKS,
			config, -1)
		if err1547 != nil {
			return m.NoResult, err1547
		}
		if m.IsTrue(eval1547) {
			// RHS
			traceRuleApply("FUNC", 1536, "{| rule #computeJumpTable(BLOCKS)=>#computeJumpTableAux(BLOCKS,`.Map`(.KList),`.Set`(.KList)) requires isBlocks(BLOCKS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4438f304847fb3e0da4e6fbbfd109c1707e0ee51330b7f164532d5af46642cd9) contentStartColumn(10) contentStartLine(1800) org.kframework.attributes.Location(Location(1800,10,1800,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1549, err1549 := evalXdotMap(config, -1) // `.Map`(.KList)
			if err1549 != nil {
				return m.NoResult, err1549
			}
			eval1550, err1550 := evalXdotSet(config, -1) // `.Set`(.KList)
			if err1550 != nil {
				return m.NoResult, err1550
			}
			eval1548, err1548 := evalXhashcomputeJumpTableAux( // #computeJumpTableAux(BLOCKS,`.Map`(.KList),`.Set`(.KList))
				varBLOCKS,
				eval1549,
				eval1550,
				config, -1)
			if err1548 != nil {
				return m.NoResult, err1548
			}
			return eval1548, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcomputeJumpTable", args: []m.K{c}}
}

func evalXhashisValidContract(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1537
	// source: iele-binary.k @146
	// {| rule #isValidContract(CODE)=>isValidContractAux(CODE,#sizeWordStack(CODE)) requires isWordStack(CODE) ensures #token("true","Bool") [UNIQUE_ID(a38cb942944d1768dea8f507bf78fc58efca65ca9cde5285738e32d53aa9c485) contentStartColumn(10) contentStartLine(146) org.kframework.attributes.Location(Location(146,10,146,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCODE := c // lhs KVariable CODE
		// REQUIRES
		eval1551, err1551 := evalIsWordStack( // isWordStack(CODE)
			varCODE,
			config, -1)
		if err1551 != nil {
			return m.NoResult, err1551
		}
		if m.IsTrue(eval1551) {
			// RHS
			traceRuleApply("FUNC", 1537, "{| rule #isValidContract(CODE)=>isValidContractAux(CODE,#sizeWordStack(CODE)) requires isWordStack(CODE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a38cb942944d1768dea8f507bf78fc58efca65ca9cde5285738e32d53aa9c485) contentStartColumn(10) contentStartLine(146) org.kframework.attributes.Location(Location(146,10,146,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1553, err1553 := evalXhashsizeWordStack( // #sizeWordStack(CODE)
				varCODE,
				config, -1)
			if err1553 != nil {
				return m.NoResult, err1553
			}
			eval1552, err1552 := evalIsValidContractAux( // isValidContractAux(CODE,#sizeWordStack(CODE))
				varCODE,
				eval1553,
				config, -1)
			if err1552 != nil {
				return m.NoResult, err1552
			}
			return eval1552, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidContract", args: []m.K{c}}
}

func evalXhashgetNonce(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.getNonce
	lbl := m.LblXhashgetNonce // #getNonce
	sort := m.SortInt
	if hookRes, hookErr := blockchain.GetNonce(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.getNonce, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetNonce", args: []m.K{c}}
}

func evalXhashseekXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.seek
	lbl := m.LblXhashseekXlparenXuXcommaXuXrparenXuKXhyphenIO // #seek(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.seek(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.seek, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashseekXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalXuXeqXeqBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.eq
	lbl := m.LblXuXeqXeqBoolXuXuBOOL // _==Bool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.eq(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.eq, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1538
	// source: domains.k @778
	// {| rule `_==Bool__BOOL`(K1,K2)=>`_==K_`(K1,K2) requires `_andBool_`(isBool(K1),isBool(K2)) ensures #token("true","Bool") [UNIQUE_ID(a17699668426366833f88851c95d611be854ecef7a676d2061669bf689f05fd1) contentStartColumn(8) contentStartLine(778) org.kframework.attributes.Location(Location(778,8,778,43)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varK1, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if varK2, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K1) && isBool(K2)
			// RHS
			traceRuleApply("FUNC", 1538, "{| rule `_==Bool__BOOL`(K1,K2)=>`_==K_`(K1,K2) requires `_andBool_`(isBool(K1),isBool(K2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a17699668426366833f88851c95d611be854ecef7a676d2061669bf689f05fd1) contentStartColumn(8) contentStartLine(778) org.kframework.attributes.Location(Location(778,8,778,43)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1554, err1554 := evalXuXeqXeqKXu( // `_==K_`(K1,K2)
				varK1,
				varK2,
				config, -1)
			if err1554 != nil {
				return m.NoResult, err1554
			}
			return eval1554, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXeqXeqBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalSignExtendBitRangeInt(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.signExtendBitRange
	lbl := m.LblSignExtendBitRangeInt // signExtendBitRangeInt
	sort := m.SortInt
	if hookRes, hookErr := intHooks.signExtendBitRange(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.signExtendBitRange, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1539
	// source: domains.k @386
	// {| rule signExtendBitRangeInt(I,IDX,LEN)=>`_-Int__INT`(`_modInt__INT`(`_+Int_`(bitRangeInt(I,IDX,LEN),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))),`_<<Int__INT`(#token("1","Int"),LEN)),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))) requires `_andBool_`(`_andBool_`(isInt(I),isInt(LEN)),isInt(IDX)) ensures #token("true","Bool") [UNIQUE_ID(b413c3f4500443aec69bee9b10feb030330d60bd136c698a9947546393728a00) contentStartColumn(8) contentStartLine(386) org.kframework.attributes.Location(Location(386,8,386,149)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varIDX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEN, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(I) && isInt(LEN) && isInt(IDX)
				// RHS
				traceRuleApply("FUNC", 1539, "{| rule signExtendBitRangeInt(I,IDX,LEN)=>`_-Int__INT`(`_modInt__INT`(`_+Int_`(bitRangeInt(I,IDX,LEN),`_<<Int__INT`(#token(\"1\",\"Int\"),`_-Int__INT`(LEN,#token(\"1\",\"Int\")))),`_<<Int__INT`(#token(\"1\",\"Int\"),LEN)),`_<<Int__INT`(#token(\"1\",\"Int\"),`_-Int__INT`(LEN,#token(\"1\",\"Int\")))) requires `_andBool_`(`_andBool_`(isInt(I),isInt(LEN)),isInt(IDX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b413c3f4500443aec69bee9b10feb030330d60bd136c698a9947546393728a00) contentStartColumn(8) contentStartLine(386) org.kframework.attributes.Location(Location(386,8,386,149)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1558, err1558 := evalBitRangeInt( // bitRangeInt(I,IDX,LEN)
					varI,
					varIDX,
					varLEN,
					config, -1)
				if err1558 != nil {
					return m.NoResult, err1558
				}
				eval1560, err1560 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(LEN,#token("1","Int"))
					varLEN,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1560 != nil {
					return m.NoResult, err1560
				}
				eval1559, err1559 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))
					/* rhs KToken */ m.NewIntFromString("1"),
					eval1560,
					config, -1)
				if err1559 != nil {
					return m.NoResult, err1559
				}
				eval1557, err1557 := evalXuXplusIntXu( // `_+Int_`(bitRangeInt(I,IDX,LEN),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int"))))
					eval1558,
					eval1559,
					config, -1)
				if err1557 != nil {
					return m.NoResult, err1557
				}
				eval1561, err1561 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),LEN)
					/* rhs KToken */ m.NewIntFromString("1"),
					varLEN,
					config, -1)
				if err1561 != nil {
					return m.NoResult, err1561
				}
				eval1556, err1556 := evalXumodIntXuXuINT( // `_modInt__INT`(`_+Int_`(bitRangeInt(I,IDX,LEN),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))),`_<<Int__INT`(#token("1","Int"),LEN))
					eval1557,
					eval1561,
					config, -1)
				if err1556 != nil {
					return m.NoResult, err1556
				}
				eval1563, err1563 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(LEN,#token("1","Int"))
					varLEN,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1563 != nil {
					return m.NoResult, err1563
				}
				eval1562, err1562 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))
					/* rhs KToken */ m.NewIntFromString("1"),
					eval1563,
					config, -1)
				if err1562 != nil {
					return m.NoResult, err1562
				}
				eval1555, err1555 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_modInt__INT`(`_+Int_`(bitRangeInt(I,IDX,LEN),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int")))),`_<<Int__INT`(#token("1","Int"),LEN)),`_<<Int__INT`(#token("1","Int"),`_-Int__INT`(LEN,#token("1","Int"))))
					eval1556,
					eval1562,
					config, -1)
				if err1555 != nil {
					return m.NoResult, err1555
				}
				return eval1555, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalSignExtendBitRangeInt", args: []m.K{c1, c2, c3}}
}

func evalIsWellFormednessCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1540
	// source: ? @?
	// {| rule isWellFormednessCell(#KToken(#token("WellFormednessCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1540, "{| rule isWellFormednessCell(#KToken(#token(\"WellFormednessCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1541
	// source: ? @?
	// {| rule isWellFormednessCell(`<well-formedness>`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXgt && len(kapp0.List) == 4 { // `<well-formedness>`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1564, err1564 := evalIsTypeCheckingCell( // isTypeCheckingCell(K0)
			varK0,
			config, -1)
		if err1564 != nil {
			return m.NoResult, err1564
		}
		eval1565, err1565 := evalIsWellFormednessScheduleCell( // isWellFormednessScheduleCell(K1)
			varK1,
			config, -1)
		if err1565 != nil {
			return m.NoResult, err1565
		}
		eval1566, err1566 := evalIsContractsCell( // isContractsCell(K2)
			varK2,
			config, -1)
		if err1566 != nil {
			return m.NoResult, err1566
		}
		eval1567, err1567 := evalIsCurrentContractCell( // isCurrentContractCell(K3)
			varK3,
			config, -1)
		if err1567 != nil {
			return m.NoResult, err1567
		}
		if (((m.IsTrue(eval1564)) &&
		   (m.IsTrue(eval1565))) &&
		   (m.IsTrue(eval1566))) &&
		   (m.IsTrue(eval1567)) {
			// RHS
			traceRuleApply("FUNC", 1541, "{| rule isWellFormednessCell(`<well-formedness>`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCell(K0),isWellFormednessScheduleCell(K1)),isContractsCell(K2)),isCurrentContractCell(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1542
	// source: ? @?
	// {| rule isWellFormednessCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1542, "{| rule isWellFormednessCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLengthPrefix(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1543
	// source: ? @?
	// {| rule isLengthPrefix(`_(_,_)_IELE-DATA`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLengthPrefixType(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA && len(kapp0.List) == 3 { // `_(_,_)_IELE-DATA`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1568, err1568 := evalIsLengthPrefixType( // isLengthPrefixType(K0)
					varK0,
					config, -1)
				if err1568 != nil {
					return m.NoResult, err1568
				}
				if m.IsTrue(eval1568) /* && */ /* rhs precomputed isInt(K1) */  /* && */ /* rhs precomputed isInt(K2) */  {
					// RHS
					traceRuleApply("FUNC", 1543, "{| rule isLengthPrefix(`_(_,_)_IELE-DATA`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLengthPrefixType(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1544
	// source: ? @?
	// {| rule isLengthPrefix(#KToken(#token("LengthPrefix","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLengthPrefix { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1544, "{| rule isLengthPrefix(#KToken(#token(\"LengthPrefix\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1545
	// source: ? @?
	// {| rule isLengthPrefix(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1545, "{| rule isLengthPrefix(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSet(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: SET.Set
	if set, t := c.(*m.Set); t && set.Sort == m.SortSet {
		return m.BoolTrue, nil
	}
	// rule #1546
	// source: ? @?
	// {| rule isSet(#KToken(#token("Set","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSet { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1546, "{| rule isSet(#KToken(#token(\"Set\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1547
	// source: ? @?
	// {| rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1547, "{| rule isSet(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitExportedCell(config m.K, guard int) (m.K, error) {
	// rule #1548
	// source: ? @?
	// {| rule initExportedCell(.KList)=>`<exported>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ac9f0151f59cb53ed897ba7241c0efabb8b71690d6082112c4d0f3c60c33ebb9) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1548, "{| rule initExportedCell(.KList)=>`<exported>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ac9f0151f59cb53ed897ba7241c0efabb8b71690d6082112c4d0f3c60c33ebb9) initializer()] |}")
	eval1569, err1569 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err1569 != nil {
		return m.NoResult, err1569
	}
	return &m.KApply{Label: m.LblXltexportedXgt, List: []m.K{ // as-is <exported>
		eval1569,
	}}, nil

}

//var constInitExportedCell K = evalInitExportedCell(m.InternedBottom)

func evalIntrinsicTypesXuIELEXhyphenWELLXhyphenFORMEDNESS(config m.K, guard int) (m.K, error) {
	// rule #1549
	// source: well-formedness.k @310
	// {| rule `intrinsicTypes_IELE-WELL-FORMEDNESS`(.KList)=>`_Map_`(`_|->_`(#token("iele.invalid","IeleName"),funType(`.List{"typeList"}`(.KList),`.List{"typeList"}`(.KList))),`_Map_`(`_|->_`(#token("iele.gas","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gasprice","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))))))))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(76833a4b9dfd59390b2fe6d5e4d772387c1ed6f1004069a7342006b21e9a027d) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,328,22)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1549, "{| rule `intrinsicTypes_IELE-WELL-FORMEDNESS`(.KList)=>`_Map_`(`_|->_`(#token(\"iele.invalid\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),`.List{\"typeList\"}`(.KList))),`_Map_`(`_|->_`(#token(\"iele.gas\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.gasprice\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.gaslimit\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.beneficiary\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.timestamp\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.number\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.difficulty\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.address\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.origin\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.caller\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.callvalue\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.msize\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.codesize\",\"IeleName\"),funType(`.List{\"typeList\"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.blockhash\",\"IeleName\"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_Map_`(`_|->_`(#token(\"iele.balance\",\"IeleName\"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))),`_|->_`(#token(\"iele.extcodesize\",\"IeleName\"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{\"typeList\"}`(.KList)))))))))))))))))))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(76833a4b9dfd59390b2fe6d5e4d772387c1ed6f1004069a7342006b21e9a027d) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,328,22)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval1571, err1571 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.invalid","IeleName"),funType(`.List{"typeList"}`(.KList),`.List{"typeList"}`(.KList)))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.invalid"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
		}},
		config, -1)
	if err1571 != nil {
		return m.NoResult, err1571
	}
	eval1573, err1573 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.gas","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gas"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1573 != nil {
		return m.NoResult, err1573
	}
	eval1575, err1575 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.gasprice","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gasprice"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1575 != nil {
		return m.NoResult, err1575
	}
	eval1577, err1577 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.gaslimit"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1577 != nil {
		return m.NoResult, err1577
	}
	eval1579, err1579 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.beneficiary"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1579 != nil {
		return m.NoResult, err1579
	}
	eval1581, err1581 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.timestamp"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1581 != nil {
		return m.NoResult, err1581
	}
	eval1583, err1583 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.number"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1583 != nil {
		return m.NoResult, err1583
	}
	eval1585, err1585 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.difficulty"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1585 != nil {
		return m.NoResult, err1585
	}
	eval1587, err1587 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.address"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1587 != nil {
		return m.NoResult, err1587
	}
	eval1589, err1589 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.origin"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1589 != nil {
		return m.NoResult, err1589
	}
	eval1591, err1591 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.caller"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1591 != nil {
		return m.NoResult, err1591
	}
	eval1593, err1593 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.callvalue"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1593 != nil {
		return m.NoResult, err1593
	}
	eval1595, err1595 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.msize"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1595 != nil {
		return m.NoResult, err1595
	}
	eval1597, err1597 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.codesize"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1597 != nil {
		return m.NoResult, err1597
	}
	eval1599, err1599 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.blockhash"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1599 != nil {
		return m.NoResult, err1599
	}
	eval1601, err1601 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.balance"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1601 != nil {
		return m.NoResult, err1601
	}
	eval1602, err1602 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.extcodesize"},
		&m.KApply{Label: m.LblFunType, List: []m.K{ // as-is funType
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
			&m.KApply{Label: m.LblTypeList, List: []m.K{ // as-is typeList
				&m.KApply{Label: m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS, List: []m.K{ // as-is int_IELE-WELL-FORMEDNESS
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotetypeListXquoteXrbracket, List: []m.K{ // as-is .List{"typeList"}
				}},
			}},
		}},
		config, -1)
	if err1602 != nil {
		return m.NoResult, err1602
	}
	eval1600, err1600 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))
		eval1601,
		eval1602,
		config, -1)
	if err1600 != nil {
		return m.NoResult, err1600
	}
	eval1598, err1598 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))
		eval1599,
		eval1600,
		config, -1)
	if err1598 != nil {
		return m.NoResult, err1598
	}
	eval1596, err1596 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))
		eval1597,
		eval1598,
		config, -1)
	if err1596 != nil {
		return m.NoResult, err1596
	}
	eval1594, err1594 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))
		eval1595,
		eval1596,
		config, -1)
	if err1594 != nil {
		return m.NoResult, err1594
	}
	eval1592, err1592 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))
		eval1593,
		eval1594,
		config, -1)
	if err1592 != nil {
		return m.NoResult, err1592
	}
	eval1590, err1590 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))
		eval1591,
		eval1592,
		config, -1)
	if err1590 != nil {
		return m.NoResult, err1590
	}
	eval1588, err1588 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))
		eval1589,
		eval1590,
		config, -1)
	if err1588 != nil {
		return m.NoResult, err1588
	}
	eval1586, err1586 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))))
		eval1587,
		eval1588,
		config, -1)
	if err1586 != nil {
		return m.NoResult, err1586
	}
	eval1584, err1584 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))))
		eval1585,
		eval1586,
		config, -1)
	if err1584 != nil {
		return m.NoResult, err1584
	}
	eval1582, err1582 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))))))
		eval1583,
		eval1584,
		config, -1)
	if err1582 != nil {
		return m.NoResult, err1582
	}
	eval1580, err1580 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))))))
		eval1581,
		eval1582,
		config, -1)
	if err1580 != nil {
		return m.NoResult, err1580
	}
	eval1578, err1578 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))))))))
		eval1579,
		eval1580,
		config, -1)
	if err1578 != nil {
		return m.NoResult, err1578
	}
	eval1576, err1576 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))))))))
		eval1577,
		eval1578,
		config, -1)
	if err1576 != nil {
		return m.NoResult, err1576
	}
	eval1574, err1574 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.gasprice","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))))))))))
		eval1575,
		eval1576,
		config, -1)
	if err1574 != nil {
		return m.NoResult, err1574
	}
	eval1572, err1572 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.gas","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gasprice","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))))))))))))))))))
		eval1573,
		eval1574,
		config, -1)
	if err1572 != nil {
		return m.NoResult, err1572
	}
	eval1570, err1570 := evalXuMapXu( // `_Map_`(`_|->_`(#token("iele.invalid","IeleName"),funType(`.List{"typeList"}`(.KList),`.List{"typeList"}`(.KList))),`_Map_`(`_|->_`(#token("iele.gas","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gasprice","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.gaslimit","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.beneficiary","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.timestamp","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.number","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.difficulty","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.address","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.origin","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.caller","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.callvalue","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.msize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.codesize","IeleName"),funType(`.List{"typeList"}`(.KList),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.blockhash","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_Map_`(`_|->_`(#token("iele.balance","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)))),`_|->_`(#token("iele.extcodesize","IeleName"),funType(typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList)),typeList(`int_IELE-WELL-FORMEDNESS`(.KList),`.List{"typeList"}`(.KList))))))))))))))))))))
		eval1571,
		eval1572,
		config, -1)
	if err1570 != nil {
		return m.NoResult, err1570
	}
	return eval1570, nil

}

//var constIntrinsicTypesXuIELEXhyphenWELLXhyphenFORMEDNESS K = evalIntrinsicTypesXuIELEXhyphenWELLXhyphenFORMEDNESS(m.InternedBottom)

func evalInitContractNameCell(config m.K, guard int) (m.K, error) {
	// rule #1550
	// source: ? @?
	// {| rule initContractNameCell(.KList)=>`<contractName>`(#token("Main","IeleName")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9183ed71bed434330d2adb7f93c6799b41cc5c349758acf0d987fce6bd6c6814) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1550, "{| rule initContractNameCell(.KList)=>`<contractName>`(#token(\"Main\",\"IeleName\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9183ed71bed434330d2adb7f93c6799b41cc5c349758acf0d987fce6bd6c6814) initializer()] |}")
	return &m.KApply{Label: m.LblXltcontractNameXgt, List: []m.K{ // as-is <contractName>
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "Main"},
	}}, nil

}

//var constInitContractNameCell K = evalInitContractNameCell(m.InternedBottom)

func evalIsAccountCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1551
	// source: ? @?
	// {| rule isAccountCell(#KToken(#token("AccountCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1551, "{| rule isAccountCell(#KToken(#token(\"AccountCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1552
	// source: ? @?
	// {| rule isAccountCell(`<account>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountXgt && len(kapp0.List) == 5 { // `<account>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1603, err1603 := evalIsAcctIDCell( // isAcctIDCell(K0)
			varK0,
			config, -1)
		if err1603 != nil {
			return m.NoResult, err1603
		}
		eval1604, err1604 := evalIsBalanceCell( // isBalanceCell(K1)
			varK1,
			config, -1)
		if err1604 != nil {
			return m.NoResult, err1604
		}
		eval1605, err1605 := evalIsCodeCell( // isCodeCell(K2)
			varK2,
			config, -1)
		if err1605 != nil {
			return m.NoResult, err1605
		}
		eval1606, err1606 := evalIsStorageCell( // isStorageCell(K3)
			varK3,
			config, -1)
		if err1606 != nil {
			return m.NoResult, err1606
		}
		eval1607, err1607 := evalIsNonceCell( // isNonceCell(K4)
			varK4,
			config, -1)
		if err1607 != nil {
			return m.NoResult, err1607
		}
		if ((((m.IsTrue(eval1603)) &&
		   (m.IsTrue(eval1604))) &&
		   (m.IsTrue(eval1605))) &&
		   (m.IsTrue(eval1606))) &&
		   (m.IsTrue(eval1607)) {
			// RHS
			traceRuleApply("FUNC", 1552, "{| rule isAccountCell(`<account>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isAcctIDCell(K0),isBalanceCell(K1)),isCodeCell(K2)),isStorageCell(K3)),isNonceCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1553
	// source: ? @?
	// {| rule isAccountCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1553, "{| rule isAccountCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashparse(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.parse
	lbl := m.LblXhashparse // #parse
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.parse(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.parse, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparse", args: []m.K{c1, c2}}
}

func evalIsSendtoCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1554
	// source: ? @?
	// {| rule isSendtoCellOpt(noSendtoCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoSendtoCell && len(kapp0.List) == 0 { // noSendtoCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1554, "{| rule isSendtoCellOpt(noSendtoCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1555
	// source: ? @?
	// {| rule isSendtoCellOpt(`<sendto>`(K0))=>#token("true","Bool") requires isAccount(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsendtoXgt && len(kapp0.List) == 1 { // `<sendto>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1608, err1608 := evalIsAccount( // isAccount(K0)
			varK0,
			config, -1)
		if err1608 != nil {
			return m.NoResult, err1608
		}
		if m.IsTrue(eval1608) {
			// RHS
			traceRuleApply("FUNC", 1555, "{| rule isSendtoCellOpt(`<sendto>`(K0))=>#token(\"true\",\"Bool\") requires isAccount(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1556
	// source: ? @?
	// {| rule isSendtoCellOpt(#KToken(#token("SendtoCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSendtoCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1556, "{| rule isSendtoCellOpt(#KToken(#token(\"SendtoCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1557
	// source: ? @?
	// {| rule isSendtoCellOpt(#KToken(#token("SendtoCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSendtoCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1557, "{| rule isSendtoCellOpt(#KToken(#token(\"SendtoCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1558
	// source: ? @?
	// {| rule isSendtoCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1558, "{| rule isSendtoCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFunctionsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1559
	// source: ? @?
	// {| rule isFunctionsCellOpt(#KToken(#token("FunctionsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1559, "{| rule isFunctionsCellOpt(#KToken(#token(\"FunctionsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1560
	// source: ? @?
	// {| rule isFunctionsCellOpt(#KToken(#token("FunctionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1560, "{| rule isFunctionsCellOpt(#KToken(#token(\"FunctionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1561
	// source: ? @?
	// {| rule isFunctionsCellOpt(`<functions>`(K0))=>#token("true","Bool") requires isFunctionCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionsXgt && len(kapp0.List) == 1 { // `<functions>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortFunctionCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isFunctionCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 1561, "{| rule isFunctionsCellOpt(`<functions>`(K0))=>#token(\"true\",\"Bool\") requires isFunctionCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1562
	// source: ? @?
	// {| rule isFunctionsCellOpt(noFunctionsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFunctionsCell && len(kapp0.List) == 0 { // noFunctionsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1562, "{| rule isFunctionsCellOpt(noFunctionsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1563
	// source: ? @?
	// {| rule isFunctionsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1563, "{| rule isFunctionsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLengthPrefixType(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1564
	// source: ? @?
	// {| rule isLengthPrefixType(`#list_IELE-DATA`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashlistXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `#list_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 1564, "{| rule isLengthPrefixType(`#list_IELE-DATA`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1565
	// source: ? @?
	// {| rule isLengthPrefixType(`#str_IELE-DATA`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashstrXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `#str_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 1565, "{| rule isLengthPrefixType(`#str_IELE-DATA`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1566
	// source: ? @?
	// {| rule isLengthPrefixType(#KToken(#token("LengthPrefixType","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLengthPrefixType { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1566, "{| rule isLengthPrefixType(#KToken(#token(\"LengthPrefixType\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1567
	// source: ? @?
	// {| rule isLengthPrefixType(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1567, "{| rule isLengthPrefixType(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalRegistersLValues(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1568
	// source: iele.k @1868
	// {| rule registersLValues(lvalueList(`%__IELE-COMMON`(REG),REGS))=>`maxInt(_,_)_INT`(REG,registersLValues(REGS)) requires `_andBool_`(isInt(REG),isLValues(REGS)) ensures #token("true","Bool") [UNIQUE_ID(430205f187b159adf42b7134bce1e5fe9a0b2bd57d4207b476802bfea855df45) contentStartColumn(10) contentStartLine(1868) org.kframework.attributes.Location(Location(1868,10,1868,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLvalueList && len(kapp0.List) == 2 { // lvalueList(`%__IELE-COMMON`(REG),REGS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(REG)
			if varREG, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varREGS := kapp0.List[1] // lhs KVariable REGS
				// REQUIRES
				eval1609, err1609 := evalIsLValues( // isLValues(REGS)
					varREGS,
					config, -1)
				if err1609 != nil {
					return m.NoResult, err1609
				}
				if /* rhs precomputed isInt(REG) */ /* && */
				   m.IsTrue(eval1609) {
					// RHS
					traceRuleApply("FUNC", 1568, "{| rule registersLValues(lvalueList(`%__IELE-COMMON`(REG),REGS))=>`maxInt(_,_)_INT`(REG,registersLValues(REGS)) requires `_andBool_`(isInt(REG),isLValues(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(430205f187b159adf42b7134bce1e5fe9a0b2bd57d4207b476802bfea855df45) contentStartColumn(10) contentStartLine(1868) org.kframework.attributes.Location(Location(1868,10,1868,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval1611, err1611 := evalRegistersLValues( // registersLValues(REGS)
						varREGS,
						config, -1)
					if err1611 != nil {
						return m.NoResult, err1611
					}
					eval1610, err1610 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(REG,registersLValues(REGS))
						varREG,
						eval1611,
						config, -1)
					if err1610 != nil {
						return m.NoResult, err1610
					}
					return eval1610, nil
				}
			}
		}
	}

	// rule #1569
	// source: iele.k @1870
	// {| rule registersLValues(`.List{"lvalueList"}`(.KList))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(45f0de54a32275d1c67113750a897a05a77b3034c27c9bdf2e9b3b62b8c14621) contentStartColumn(10) contentStartLine(1870) org.kframework.attributes.Location(Location(1870,10,1870,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"lvalueList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1569, "{| rule registersLValues(`.List{\"lvalueList\"}`(.KList))=>#token(\"-1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(45f0de54a32275d1c67113750a897a05a77b3034c27c9bdf2e9b3b62b8c14621) contentStartColumn(10) contentStartLine(1870) org.kframework.attributes.Location(Location(1870,10,1870,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("-1"), nil
	}

	return m.NoResult, &stuckError{funcName: "evalRegistersLValues", args: []m.K{c}}
}

func evalByte(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1570
	// source: data.k @205
	// {| rule byte(N,W)=>bitRangeInt(W,`_<<Int__INT`(N,#token("3","Int")),#token("8","Int")) requires `_andBool_`(isInt(W),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(ee7d0bcc8ac1fb50199d96579dcd299c4f084062c25a0366a919ba444c4c91e2) contentStartColumn(10) contentStartLine(205) org.kframework.attributes.Location(Location(205,10,205,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varW, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(W) && isInt(N)
			// RHS
			traceRuleApply("FUNC", 1570, "{| rule byte(N,W)=>bitRangeInt(W,`_<<Int__INT`(N,#token(\"3\",\"Int\")),#token(\"8\",\"Int\")) requires `_andBool_`(isInt(W),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ee7d0bcc8ac1fb50199d96579dcd299c4f084062c25a0366a919ba444c4c91e2) contentStartColumn(10) contentStartLine(205) org.kframework.attributes.Location(Location(205,10,205,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1613, err1613 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(N,#token("3","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("3"),
				config, -1)
			if err1613 != nil {
				return m.NoResult, err1613
			}
			eval1612, err1612 := evalBitRangeInt( // bitRangeInt(W,`_<<Int__INT`(N,#token("3","Int")),#token("8","Int"))
				varW,
				eval1613,
				/* rhs KToken */ m.NewIntFromString("8"),
				config, -1)
			if err1612 != nil {
				return m.NoResult, err1612
			}
			return eval1612, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalByte", args: []m.K{c1, c2}}
}

func evalBN128Add(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.bn128add
	lbl := m.LblBN128Add // BN128Add
	sort := m.SortG1Point
	if hookRes, hookErr := krypto.Bn128add(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.bn128add, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBN128Add", args: []m.K{c1, c2}}
}

func evalXhashisValidFunctions(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1571
	// source: iele-binary.k @181
	// {| rule #isValidFunctions(`_:__IELE-DATA`(_76,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,SIZE)=>#isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token("5","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_76,#token("103","Int"))) ensures #token("true","Bool") [UNIQUE_ID(308c1dc94c2ef98efbd77b489e1ab12bfe8164e7394183cc46d55b72df75dd42) contentStartColumn(10) contentStartLine(181) org.kframework.attributes.Location(Location(181,10,181,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_76,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu76, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if _, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if _, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if _, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if _, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
												if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
													// REQUIRES
													eval1614, err1614 := evalIsWordStack( // isWordStack(WS)
														varWS,
														config, -1)
													if err1614 != nil {
														return m.NoResult, err1614
													}
													eval1615, err1615 := evalXuXeqXeqIntXu( // `_==Int_`(_76,#token("103","Int"))
														varXu76,
														/* rhs KToken */ m.NewIntFromString("103"),
														config, -1)
													if err1615 != nil {
														return m.NoResult, err1615
													}
													if (/* rhs precomputed isInt(W4) */ /* && */
													   m.IsTrue(eval1614) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
													   (m.IsTrue(eval1615)) {
														// RHS
														traceRuleApply("FUNC", 1571, "{| rule #isValidFunctions(`_:__IELE-DATA`(_76,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,SIZE)=>#isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token(\"5\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_76,#token(\"103\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(308c1dc94c2ef98efbd77b489e1ab12bfe8164e7394183cc46d55b72df75dd42) contentStartColumn(10) contentStartLine(181) org.kframework.attributes.Location(Location(181,10,181,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
														eval1617, err1617 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("5","Int"))
															varSIZE,
															/* rhs KToken */ m.NewIntFromString("5"),
															config, -1)
														if err1617 != nil {
															return m.NoResult, err1617
														}
														eval1616, err1616 := evalXhashisValidFunction( // #isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token("5","Int")))
															varWS,
															varNBITS,
															eval1617,
															config, -1)
														if err1616 != nil {
															return m.NoResult, err1616
														}
														return eval1616, nil
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1572
	// source: iele-binary.k @183
	// {| rule #isValidFunctions(`.WordStack_IELE-DATA`(.KList),_533,_112)=>#token("true","Bool") requires `_andBool_`(isInt(_533),`_==Int_`(_112,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5732038bae59e5465968770d9a9de4b153bf241507e8318aee711e57b32a19b0) contentStartColumn(10) contentStartLine(183) org.kframework.attributes.Location(Location(183,10,183,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varXu112, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1618, err1618 := evalXuXeqXeqIntXu( // `_==Int_`(_112,#token("0","Int"))
					varXu112,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err1618 != nil {
					return m.NoResult, err1618
				}
				if /* rhs precomputed isInt(_533) */ /* && */
				   m.IsTrue(eval1618) {
					// RHS
					traceRuleApply("FUNC", 1572, "{| rule #isValidFunctions(`.WordStack_IELE-DATA`(.KList),_533,_112)=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(_533),`_==Int_`(_112,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5732038bae59e5465968770d9a9de4b153bf241507e8318aee711e57b32a19b0) contentStartColumn(10) contentStartLine(183) org.kframework.attributes.Location(Location(183,10,183,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1573
	// source: iele-binary.k @182
	// {| rule #isValidFunctions(`_:__IELE-DATA`(_37,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,SIZE)=>#isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token("5","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_37,#token("104","Int"))) ensures #token("true","Bool") [UNIQUE_ID(e849b5b0e8c15bf80dcda17e2f2b4c1c8bbc6287193f01b34cdba006d4c4905e) contentStartColumn(10) contentStartLine(182) org.kframework.attributes.Location(Location(182,10,182,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_37,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu37, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if _, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if _, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if _, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if _, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
												if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
													// REQUIRES
													eval1619, err1619 := evalIsWordStack( // isWordStack(WS)
														varWS,
														config, -1)
													if err1619 != nil {
														return m.NoResult, err1619
													}
													eval1620, err1620 := evalXuXeqXeqIntXu( // `_==Int_`(_37,#token("104","Int"))
														varXu37,
														/* rhs KToken */ m.NewIntFromString("104"),
														config, -1)
													if err1620 != nil {
														return m.NoResult, err1620
													}
													if (/* rhs precomputed isInt(W4) */ /* && */
													   m.IsTrue(eval1619) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
													   (m.IsTrue(eval1620)) {
														// RHS
														traceRuleApply("FUNC", 1573, "{| rule #isValidFunctions(`_:__IELE-DATA`(_37,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,SIZE)=>#isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token(\"5\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(SIZE)),isInt(NBITS)),isInt(W3)),`_==Int_`(_37,#token(\"104\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e849b5b0e8c15bf80dcda17e2f2b4c1c8bbc6287193f01b34cdba006d4c4905e) contentStartColumn(10) contentStartLine(182) org.kframework.attributes.Location(Location(182,10,182,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
														eval1622, err1622 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("5","Int"))
															varSIZE,
															/* rhs KToken */ m.NewIntFromString("5"),
															config, -1)
														if err1622 != nil {
															return m.NoResult, err1622
														}
														eval1621, err1621 := evalXhashisValidFunction( // #isValidFunction(WS,NBITS,`_-Int__INT`(SIZE,#token("5","Int")))
															varWS,
															varNBITS,
															eval1622,
															config, -1)
														if err1621 != nil {
															return m.NoResult, err1621
														}
														return eval1621, nil
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1574
	// source: iele-binary.k @184
	// {| rule #isValidFunctions(_487,_488,_489)=>#token("false","Bool") requires `_andBool_`(`_andBool_`(isInt(_489),isInt(_488)),isWordStack(_487)) ensures #token("true","Bool") [UNIQUE_ID(7fc3d9e33e9cc970092a6f6a0cab3ab61b1171a94769ba3ec27eb4375914f6ef) contentStartColumn(10) contentStartLine(184) org.kframework.attributes.Location(Location(184,10,184,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu487 := c1 // lhs KVariable _487
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1623, err1623 := evalIsWordStack( // isWordStack(_487)
					varXu487,
					config, -1)
				if err1623 != nil {
					return m.NoResult, err1623
				}
				if /* rhs precomputed isInt(_489) && isInt(_488) */ /* && */
				   m.IsTrue(eval1623) {
					// RHS
					traceRuleApply("FUNC", 1574, "{| rule #isValidFunctions(_487,_488,_489)=>#token(\"false\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(_489),isInt(_488)),isWordStack(_487)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7fc3d9e33e9cc970092a6f6a0cab3ab61b1171a94769ba3ec27eb4375914f6ef) contentStartColumn(10) contentStartLine(184) org.kframework.attributes.Location(Location(184,10,184,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					return /* rhs KToken */ m.BoolFalse, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidFunctions", args: []m.K{c1, c2, c3}}
}

func evalInitCurrentContractCell(config m.K, guard int) (m.K, error) {
	// rule #1575
	// source: ? @?
	// {| rule initCurrentContractCell(.KList)=>`<currentContract>`(initTypesCell(.KList),initContractNameCell(.KList),initDeclaredContractsCell(.KList),initFunctionBodiesCell(.KList),initCurrentFunctionCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6e67ff9ed5f17819dce04d9c26a411c7725e5ffee3cda7bec8c4da5a84d135e0) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1575, "{| rule initCurrentContractCell(.KList)=>`<currentContract>`(initTypesCell(.KList),initContractNameCell(.KList),initDeclaredContractsCell(.KList),initFunctionBodiesCell(.KList),initCurrentFunctionCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6e67ff9ed5f17819dce04d9c26a411c7725e5ffee3cda7bec8c4da5a84d135e0) initializer()] |}")
	eval1624, err1624 := evalInitTypesCell(config, -1) // initTypesCell(.KList)
	if err1624 != nil {
		return m.NoResult, err1624
	}
	eval1625, err1625 := evalInitContractNameCell(config, -1) // initContractNameCell(.KList)
	if err1625 != nil {
		return m.NoResult, err1625
	}
	eval1626, err1626 := evalInitDeclaredContractsCell(config, -1) // initDeclaredContractsCell(.KList)
	if err1626 != nil {
		return m.NoResult, err1626
	}
	eval1627, err1627 := evalInitFunctionBodiesCell(config, -1) // initFunctionBodiesCell(.KList)
	if err1627 != nil {
		return m.NoResult, err1627
	}
	eval1628, err1628 := evalInitCurrentFunctionCell(config, -1) // initCurrentFunctionCell(.KList)
	if err1628 != nil {
		return m.NoResult, err1628
	}
	return &m.KApply{Label: m.LblXltcurrentContractXgt, List: []m.K{ // as-is <currentContract>
		eval1624,
		eval1625,
		eval1626,
		eval1627,
		eval1628,
	}}, nil

}

//var constInitCurrentContractCell K = evalInitCurrentContractCell(m.InternedBottom)

func evalXuXcolonXslashXeqKXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	return m.NoResult, &stuckError{funcName: "evalXuXcolonXslashXeqKXu", args: []m.K{c1, c2}}
}

func evalRipEmd160(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.ripemd160
	lbl := m.LblRipEmd160 // RipEmd160
	sort := m.SortString
	if hookRes, hookErr := krypto.Ripemd160(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.ripemd160, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalRipEmd160", args: []m.K{c}}
}

func evalIsExportedCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1576
	// source: ? @?
	// {| rule isExportedCellOpt(noExportedCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoExportedCell && len(kapp0.List) == 0 { // noExportedCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1576, "{| rule isExportedCellOpt(noExportedCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1577
	// source: ? @?
	// {| rule isExportedCellOpt(#KToken(#token("ExportedCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExportedCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1577, "{| rule isExportedCellOpt(#KToken(#token(\"ExportedCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1578
	// source: ? @?
	// {| rule isExportedCellOpt(#KToken(#token("ExportedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExportedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1578, "{| rule isExportedCellOpt(#KToken(#token(\"ExportedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1579
	// source: ? @?
	// {| rule isExportedCellOpt(`<exported>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexportedXgt && len(kapp0.List) == 1 { // `<exported>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1579, "{| rule isExportedCellOpt(`<exported>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1580
	// source: ? @?
	// {| rule isExportedCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1580, "{| rule isExportedCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCnew(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1581
	// source: iele-gas.k @770
	// {| rule `Cnew`(SCHED,ISEMPTY,VALUE)=>#token("0","Int") requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),`_orBool__BOOL`(`notBool_`(ISEMPTY),`_==Int_`(VALUE,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(dd981e6bc2bf00751f1b26fa2e868d09ef4a0c3cd415c9a1662fa342641a30f2) contentStartColumn(10) contentStartLine(770) org.kframework.attributes.Location(Location(770,10,771,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varISEMPTY, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			if varVALUE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1629, err1629 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err1629 != nil {
					return m.NoResult, err1629
				}
				eval1630, err1630 := evalXuXeqXeqIntXu( // `_==Int_`(VALUE,#token("0","Int"))
					varVALUE,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err1630 != nil {
					return m.NoResult, err1630
				}
				if (/* rhs precomputed isBool(ISEMPTY) && isInt(VALUE) */ /* && */
				   m.IsTrue(eval1629)) &&
				   ((!(m.IsTrue(varISEMPTY))) || (m.IsTrue(eval1630))) {
					// RHS
					traceRuleApply("FUNC", 1581, "{| rule `Cnew`(SCHED,ISEMPTY,VALUE)=>#token(\"0\",\"Int\") requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),`_orBool__BOOL`(`notBool_`(ISEMPTY),`_==Int_`(VALUE,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dd981e6bc2bf00751f1b26fa2e868d09ef4a0c3cd415c9a1662fa342641a30f2) contentStartColumn(10) contentStartLine(770) org.kframework.attributes.Location(Location(770,10,771,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					return /* rhs KToken */ m.NewIntFromString("0"), nil
				}
			}
		}
	}

	// rule #1582
	// source: iele-gas.k @768
	// {| rule `Cnew`(SCHED,ISEMPTY,VALUE)=>`_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_=/=Int__INT`(VALUE,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(d73053a910b86443b6e7fe84c76e0122d3d82d0565cef70cb092d3ba6194ac5f) contentStartColumn(10) contentStartLine(768) org.kframework.attributes.Location(Location(768,10,769,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varISEMPTY, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			if varVALUE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1631, err1631 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err1631 != nil {
					return m.NoResult, err1631
				}
				eval1632, err1632 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(VALUE,#token("0","Int"))
					varVALUE,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err1632 != nil {
					return m.NoResult, err1632
				}
				if (/* rhs precomputed isBool(ISEMPTY) && isInt(VALUE) */ /* && */
				   m.IsTrue(eval1631)) &&
				   ((m.IsTrue(varISEMPTY)) &&
				   (m.IsTrue(eval1632))) {
					// RHS
					traceRuleApply("FUNC", 1582, "{| rule `Cnew`(SCHED,ISEMPTY,VALUE)=>`_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(VALUE)),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_=/=Int__INT`(VALUE,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d73053a910b86443b6e7fe84c76e0122d3d82d0565cef70cb092d3ba6194ac5f) contentStartColumn(10) contentStartLine(768) org.kframework.attributes.Location(Location(768,10,769,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1633, err1633 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGnewaccountXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewaccount_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1633 != nil {
						return m.NoResult, err1633
					}
					return eval1633, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCnew", args: []m.K{c1, c2, c3}}
}

func evalIsStaticCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1583
	// source: ? @?
	// {| rule isStaticCell(#KToken(#token("StaticCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStaticCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1583, "{| rule isStaticCell(#KToken(#token(\"StaticCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1584
	// source: ? @?
	// {| rule isStaticCell(`<static>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstaticXgt && len(kapp0.List) == 1 { // `<static>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 1584, "{| rule isStaticCell(`<static>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1585
	// source: ? @?
	// {| rule isStaticCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1585, "{| rule isStaticCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitBalanceCell(config m.K, guard int) (m.K, error) {
	// rule #1586
	// source: ? @?
	// {| rule initBalanceCell(.KList)=>`<balance>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2d1fd0c9b35e626b84bea65b985e7f229698673887cb9b541a46abc54cada743) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1586, "{| rule initBalanceCell(.KList)=>`<balance>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2d1fd0c9b35e626b84bea65b985e7f229698673887cb9b541a46abc54cada743) initializer()] |}")
	return &m.KApply{Label: m.LblXltbalanceXgt, List: []m.K{ // as-is <balance>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitBalanceCell K = evalInitBalanceCell(m.InternedBottom)

func evalPadRightBytes(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.padRight
	lbl := m.LblPadRightBytes // padRightBytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.padRight(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.padRight, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalPadRightBytes", args: []m.K{c1, c2, c3}}
}

func evalReverseBytes(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.reverse
	lbl := m.LblReverseBytes // reverseBytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.reverse(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.reverse, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalReverseBytes", args: []m.K{c}}
}

func evalCgascap(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #1587
	// source: iele-gas.k @760
	// {| rule `Cgascap`(SCHED,GCAP,GAVAIL,GEXTRA)=>`minInt(_,_)_INT`(#allBut64th(`_-Int__INT`(GAVAIL,GEXTRA)),GCAP) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isSchedule(SCHED)),isInt(GEXTRA)),isInt(GAVAIL)),`_andBool_`(`_>=Int__INT`(GAVAIL,GEXTRA),`notBool_`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)))) ensures #token("true","Bool") [UNIQUE_ID(fcf4917720676970fea11d42896d52fae26df33376bd8bf9652855d76608c794) contentStartColumn(10) contentStartLine(760) org.kframework.attributes.Location(Location(760,10,760,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varGCAP, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varGAVAIL, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varGEXTRA, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval1634, err1634 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err1634 != nil {
						return m.NoResult, err1634
					}
					eval1635, err1635 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(GAVAIL,GEXTRA)
						varGAVAIL,
						varGEXTRA,
						config, -1)
					if err1635 != nil {
						return m.NoResult, err1635
					}
					eval1636, err1636 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGstaticcalldepthXuIELEXhyphenGAS, List: []m.K{ // as-is Gstaticcalldepth_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1636 != nil {
						return m.NoResult, err1636
					}
					if (/* rhs precomputed isInt(GCAP) */ /* && */
					   m.IsTrue(eval1634) /* && */ /* rhs precomputed isInt(GEXTRA) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ ) &&
					   ((m.IsTrue(eval1635)) &&
					   (!(m.IsTrue(eval1636)))) {
						// RHS
						traceRuleApply("FUNC", 1587, "{| rule `Cgascap`(SCHED,GCAP,GAVAIL,GEXTRA)=>`minInt(_,_)_INT`(#allBut64th(`_-Int__INT`(GAVAIL,GEXTRA)),GCAP) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isSchedule(SCHED)),isInt(GEXTRA)),isInt(GAVAIL)),`_andBool_`(`_>=Int__INT`(GAVAIL,GEXTRA),`notBool_`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fcf4917720676970fea11d42896d52fae26df33376bd8bf9652855d76608c794) contentStartColumn(10) contentStartLine(760) org.kframework.attributes.Location(Location(760,10,760,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval1639, err1639 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(GAVAIL,GEXTRA)
							varGAVAIL,
							varGEXTRA,
							config, -1)
						if err1639 != nil {
							return m.NoResult, err1639
						}
						eval1638, err1638 := evalXhashallBut64th( // #allBut64th(`_-Int__INT`(GAVAIL,GEXTRA))
							eval1639,
							config, -1)
						if err1638 != nil {
							return m.NoResult, err1638
						}
						eval1637, err1637 := evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(#allBut64th(`_-Int__INT`(GAVAIL,GEXTRA)),GCAP)
							eval1638,
							varGCAP,
							config, -1)
						if err1637 != nil {
							return m.NoResult, err1637
						}
						return eval1637, nil
					}
				}
			}
		}
	}

	// rule #1588
	// source: iele-gas.k @761
	// {| rule `Cgascap`(SCHED,GCAP,GAVAIL,GEXTRA)=>GCAP requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isSchedule(SCHED)),isInt(GEXTRA)),isInt(GAVAIL)),`_orBool__BOOL`(`_<Int__INT`(GAVAIL,GEXTRA),`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(a77301573e8f56d97b8f775dfaf19065b38186670785a8a0b531a8cb7461c8ca) contentStartColumn(10) contentStartLine(761) org.kframework.attributes.Location(Location(761,10,761,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varGCAP, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varGAVAIL, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varGEXTRA, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval1640, err1640 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err1640 != nil {
						return m.NoResult, err1640
					}
					eval1641, err1641 := evalXuXltIntXuXuINT( // `_<Int__INT`(GAVAIL,GEXTRA)
						varGAVAIL,
						varGEXTRA,
						config, -1)
					if err1641 != nil {
						return m.NoResult, err1641
					}
					eval1642, err1642 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGstaticcalldepthXuIELEXhyphenGAS, List: []m.K{ // as-is Gstaticcalldepth_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err1642 != nil {
						return m.NoResult, err1642
					}
					if (/* rhs precomputed isInt(GCAP) */ /* && */
					   m.IsTrue(eval1640) /* && */ /* rhs precomputed isInt(GEXTRA) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ ) &&
					   ((m.IsTrue(eval1641)) || (m.IsTrue(eval1642))) {
						// RHS
						traceRuleApply("FUNC", 1588, "{| rule `Cgascap`(SCHED,GCAP,GAVAIL,GEXTRA)=>GCAP requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isSchedule(SCHED)),isInt(GEXTRA)),isInt(GAVAIL)),`_orBool__BOOL`(`_<Int__INT`(GAVAIL,GEXTRA),`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a77301573e8f56d97b8f775dfaf19065b38186670785a8a0b531a8cb7461c8ca) contentStartColumn(10) contentStartLine(761) org.kframework.attributes.Location(Location(761,10,761,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						return varGCAP, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCgascap", args: []m.K{c1, c2, c3, c4}}
}

func evalInitInterimStatesCell(config m.K, guard int) (m.K, error) {
	// rule #1589
	// source: ? @?
	// {| rule initInterimStatesCell(.KList)=>`<interimStates>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d352ee8b7abfa57be511539962c9fb9fa34c755141c14d5d0d267122a618a99e) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1589, "{| rule initInterimStatesCell(.KList)=>`<interimStates>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d352ee8b7abfa57be511539962c9fb9fa34c755141c14d5d0d267122a618a99e) initializer()] |}")
	eval1643, err1643 := evalXdotList(config, -1) // `.List`(.KList)
	if err1643 != nil {
		return m.NoResult, err1643
	}
	return &m.KApply{Label: m.LblXltinterimStatesXgt, List: []m.K{ // as-is <interimStates>
		eval1643,
	}}, nil

}

//var constInitInterimStatesCell K = evalInitInterimStatesCell(m.InternedBottom)

func evalIsStringIeleName(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1590
	// source: ? @?
	// {| rule isStringIeleName(#KToken(#token("StringIeleName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStringIeleName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1590, "{| rule isStringIeleName(#KToken(#token(\"StringIeleName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1591
	// source: ? @?
	// {| rule isStringIeleName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1591, "{| rule isStringIeleName(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSubstateStackCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1592
	// source: ? @?
	// {| rule isSubstateStackCellOpt(noSubstateStackCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoSubstateStackCell && len(kapp0.List) == 0 { // noSubstateStackCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1592, "{| rule isSubstateStackCellOpt(noSubstateStackCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1593
	// source: ? @?
	// {| rule isSubstateStackCellOpt(#KToken(#token("SubstateStackCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateStackCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1593, "{| rule isSubstateStackCellOpt(#KToken(#token(\"SubstateStackCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1594
	// source: ? @?
	// {| rule isSubstateStackCellOpt(`<substateStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateStackXgt && len(kapp0.List) == 1 { // `<substateStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 1594, "{| rule isSubstateStackCellOpt(`<substateStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1595
	// source: ? @?
	// {| rule isSubstateStackCellOpt(#KToken(#token("SubstateStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1595, "{| rule isSubstateStackCellOpt(#KToken(#token(\"SubstateStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1596
	// source: ? @?
	// {| rule isSubstateStackCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1596, "{| rule isSubstateStackCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalGcdInt(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1597
	// source: data.k @191
	// {| rule gcdInt(A,B)=>#gcdInt(absInt(A),absInt(B)) requires `_andBool_`(`_andBool_`(isInt(B),isInt(A)),`_>=Int__INT`(absInt(A),absInt(B))) ensures #token("true","Bool") [UNIQUE_ID(1de079af10dc43a744698c974eadcdb5b8d7d575e609c712040a7681bb8029f5) contentStartColumn(10) contentStartLine(191) org.kframework.attributes.Location(Location(191,10,191,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varA, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varB, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1645, err1645 := evalAbsInt( // absInt(A)
				varA,
				config, -1)
			if err1645 != nil {
				return m.NoResult, err1645
			}
			eval1646, err1646 := evalAbsInt( // absInt(B)
				varB,
				config, -1)
			if err1646 != nil {
				return m.NoResult, err1646
			}
			eval1644, err1644 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(absInt(A),absInt(B))
				eval1645,
				eval1646,
				config, -1)
			if err1644 != nil {
				return m.NoResult, err1644
			}
			if /* rhs precomputed isInt(B) && isInt(A) */ /* && */
			   m.IsTrue(eval1644) {
				// RHS
				traceRuleApply("FUNC", 1597, "{| rule gcdInt(A,B)=>#gcdInt(absInt(A),absInt(B)) requires `_andBool_`(`_andBool_`(isInt(B),isInt(A)),`_>=Int__INT`(absInt(A),absInt(B))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1de079af10dc43a744698c974eadcdb5b8d7d575e609c712040a7681bb8029f5) contentStartColumn(10) contentStartLine(191) org.kframework.attributes.Location(Location(191,10,191,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1648, err1648 := evalAbsInt( // absInt(A)
					varA,
					config, -1)
				if err1648 != nil {
					return m.NoResult, err1648
				}
				eval1649, err1649 := evalAbsInt( // absInt(B)
					varB,
					config, -1)
				if err1649 != nil {
					return m.NoResult, err1649
				}
				eval1647, err1647 := evalXhashgcdInt( // #gcdInt(absInt(A),absInt(B))
					eval1648,
					eval1649,
					config, -1)
				if err1647 != nil {
					return m.NoResult, err1647
				}
				return eval1647, nil
			}
		}
	}

	// rule #1598
	// source: data.k @192
	// {| rule gcdInt(A,B)=>#gcdInt(absInt(B),absInt(A)) requires `_andBool_`(isInt(B),isInt(A)) ensures #token("true","Bool") [UNIQUE_ID(7d845e85aa8478c6bbe51211b6f81f347457a8c11b39a2f4fdb1367e4782e4d4) contentStartColumn(10) contentStartLine(192) org.kframework.attributes.Location(Location(192,10,192,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varA, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varB, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(B) && isInt(A)
			// RHS
			traceRuleApply("FUNC", 1598, "{| rule gcdInt(A,B)=>#gcdInt(absInt(B),absInt(A)) requires `_andBool_`(isInt(B),isInt(A)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d845e85aa8478c6bbe51211b6f81f347457a8c11b39a2f4fdb1367e4782e4d4) contentStartColumn(10) contentStartLine(192) org.kframework.attributes.Location(Location(192,10,192,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval1651, err1651 := evalAbsInt( // absInt(B)
				varB,
				config, -1)
			if err1651 != nil {
				return m.NoResult, err1651
			}
			eval1652, err1652 := evalAbsInt( // absInt(A)
				varA,
				config, -1)
			if err1652 != nil {
				return m.NoResult, err1652
			}
			eval1650, err1650 := evalXhashgcdInt( // #gcdInt(absInt(B),absInt(A))
				eval1651,
				eval1652,
				config, -1)
			if err1650 != nil {
				return m.NoResult, err1650
			}
			return eval1650, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalGcdInt", args: []m.K{c1, c2}}
}

func evalIsOperand(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #1599
	// source: ? @?
	// {| rule isOperand(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1599, "{| rule isOperand(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1600
	// source: ? @?
	// {| rule isOperand(#KToken(#token("GlobalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1600, "{| rule isOperand(#KToken(#token(\"GlobalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1601
	// source: ? @?
	// {| rule isOperand(#KToken(#token("LocalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1601, "{| rule isOperand(#KToken(#token(\"LocalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1602
	// source: ? @?
	// {| rule isOperand(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1602, "{| rule isOperand(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1603
	// source: ? @?
	// {| rule isOperand(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1603, "{| rule isOperand(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1604
	// source: ? @?
	// {| rule isOperand(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1604, "{| rule isOperand(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1605
	// source: ? @?
	// {| rule isOperand(`%__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `%__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1653, err1653 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1653 != nil {
			return m.NoResult, err1653
		}
		if m.IsTrue(eval1653) {
			// RHS
			traceRuleApply("FUNC", 1605, "{| rule isOperand(`%__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1606
	// source: ? @?
	// {| rule isOperand(`Ccall`(K0,K1,K2,K3,K4,K5,K6))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)),isInt(K3)),isInt(K4)),isInt(K5)),isInt(K6)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCcall && len(kapp0.List) == 7 { // `Ccall`(K0,K1,K2,K3,K4,K5,K6)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[3].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[5].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if _, t := kapp0.List[6].(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval1654, err1654 := evalIsSchedule( // isSchedule(K0)
								varK0,
								config, -1)
							if err1654 != nil {
								return m.NoResult, err1654
							}
							eval1655, err1655 := evalIsBExp( // isBExp(K1)
								varK1,
								config, -1)
							if err1655 != nil {
								return m.NoResult, err1655
							}
							if (m.IsTrue(eval1654)) &&
							   (m.IsTrue(eval1655)) /* && */ /* rhs precomputed isInt(K2) */  /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K5) */  /* && */ /* rhs precomputed isInt(K6) */  {
								// RHS
								traceRuleApply("FUNC", 1606, "{| rule isOperand(`Ccall`(K0,K1,K2,K3,K4,K5,K6))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)),isInt(K3)),isInt(K4)),isInt(K5)),isInt(K6)) ensures #token(\"true\",\"Bool\") [] |}")
								return /* rhs KToken */ m.BoolTrue, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1607
	// source: ? @?
	// {| rule isOperand(#KToken(#token("Operand","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOperand { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1607, "{| rule isOperand(#KToken(#token(\"Operand\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1608
	// source: ? @?
	// {| rule isOperand(`@__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `@__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1656, err1656 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1656 != nil {
			return m.NoResult, err1656
		}
		if m.IsTrue(eval1656) {
			// RHS
			traceRuleApply("FUNC", 1608, "{| rule isOperand(`@__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1609
	// source: ? @?
	// {| rule isOperand(#KToken(#token("IntConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIntConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1609, "{| rule isOperand(#KToken(#token(\"IntConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1610
	// source: ? @?
	// {| rule isOperand(#KToken(#token("LValue","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLValue { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1610, "{| rule isOperand(#KToken(#token(\"LValue\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1611
	// source: ? @?
	// {| rule isOperand(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1611, "{| rule isOperand(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1612
	// source: ? @?
	// {| rule isOperand(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1612, "{| rule isOperand(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1613
	// source: ? @?
	// {| rule isOperand(`Cselfdestruct`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCselfdestruct && len(kapp0.List) == 3 { // `Cselfdestruct`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1657, err1657 := evalIsSchedule( // isSchedule(K0)
				varK0,
				config, -1)
			if err1657 != nil {
				return m.NoResult, err1657
			}
			eval1658, err1658 := evalIsBExp( // isBExp(K1)
				varK1,
				config, -1)
			if err1658 != nil {
				return m.NoResult, err1658
			}
			if (m.IsTrue(eval1657)) &&
			   (m.IsTrue(eval1658)) /* && */ /* rhs precomputed isInt(K2) */  {
				// RHS
				traceRuleApply("FUNC", 1613, "{| rule isOperand(`Cselfdestruct`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1614
	// source: ? @?
	// {| rule isOperand(#KToken(#token("Constant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1614, "{| rule isOperand(#KToken(#token(\"Constant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1615
	// source: ? @?
	// {| rule isOperand(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1615, "{| rule isOperand(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1616
	// source: ? @?
	// {| rule isOperand(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1616, "{| rule isOperand(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1617
	// source: ? @?
	// {| rule isOperand(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1617, "{| rule isOperand(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1618
	// source: ? @?
	// {| rule isOperand(#KToken(#token("HexConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortHexConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1618, "{| rule isOperand(#KToken(#token(\"HexConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1619
	// source: ? @?
	// {| rule isOperand(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1619, "{| rule isOperand(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1620
	// source: ? @?
	// {| rule isOperand(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1620, "{| rule isOperand(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1621
	// source: ? @?
	// {| rule isOperand(`Ccallgas`(K0,K1,K2,K3,K4,K5,K6))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)),isInt(K3)),isInt(K4)),isInt(K5)),isInt(K6)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCcallgas && len(kapp0.List) == 7 { // `Ccallgas`(K0,K1,K2,K3,K4,K5,K6)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[3].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[5].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if _, t := kapp0.List[6].(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval1659, err1659 := evalIsSchedule( // isSchedule(K0)
								varK0,
								config, -1)
							if err1659 != nil {
								return m.NoResult, err1659
							}
							eval1660, err1660 := evalIsBExp( // isBExp(K1)
								varK1,
								config, -1)
							if err1660 != nil {
								return m.NoResult, err1660
							}
							if (m.IsTrue(eval1659)) &&
							   (m.IsTrue(eval1660)) /* && */ /* rhs precomputed isInt(K2) */  /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K5) */  /* && */ /* rhs precomputed isInt(K6) */  {
								// RHS
								traceRuleApply("FUNC", 1621, "{| rule isOperand(`Ccallgas`(K0,K1,K2,K3,K4,K5,K6))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(K0),isBExp(K1)),isInt(K2)),isInt(K3)),isInt(K4)),isInt(K5)),isInt(K6)) ensures #token(\"true\",\"Bool\") [] |}")
								return /* rhs KToken */ m.BoolTrue, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1622
	// source: ? @?
	// {| rule isOperand(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1622, "{| rule isOperand(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsKConfigVar(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1623
	// source: ? @?
	// {| rule isKConfigVar(#KToken(#token("KConfigVar","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKConfigVar { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1623, "{| rule isKConfigVar(#KToken(#token(\"KConfigVar\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1624
	// source: ? @?
	// {| rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1624, "{| rule isKConfigVar(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGasCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1625
	// source: ? @?
	// {| rule isGasCell(#KToken(#token("GasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1625, "{| rule isGasCell(#KToken(#token(\"GasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1626
	// source: ? @?
	// {| rule isGasCell(`<gas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasXgt && len(kapp0.List) == 1 { // `<gas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1626, "{| rule isGasCell(`<gas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1627
	// source: ? @?
	// {| rule isGasCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1627, "{| rule isGasCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSubstateCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1628
	// source: ? @?
	// {| rule isSubstateCellOpt(#KToken(#token("SubstateCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1628, "{| rule isSubstateCellOpt(#KToken(#token(\"SubstateCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1629
	// source: ? @?
	// {| rule isSubstateCellOpt(noSubstateCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoSubstateCell && len(kapp0.List) == 0 { // noSubstateCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1629, "{| rule isSubstateCellOpt(noSubstateCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1630
	// source: ? @?
	// {| rule isSubstateCellOpt(#KToken(#token("SubstateCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1630, "{| rule isSubstateCellOpt(#KToken(#token(\"SubstateCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1631
	// source: ? @?
	// {| rule isSubstateCellOpt(`<substate>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateXgt && len(kapp0.List) == 3 { // `<substate>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1661, err1661 := evalIsSelfDestructCell( // isSelfDestructCell(K0)
			varK0,
			config, -1)
		if err1661 != nil {
			return m.NoResult, err1661
		}
		eval1662, err1662 := evalIsLogDataCell( // isLogDataCell(K1)
			varK1,
			config, -1)
		if err1662 != nil {
			return m.NoResult, err1662
		}
		eval1663, err1663 := evalIsRefundCell( // isRefundCell(K2)
			varK2,
			config, -1)
		if err1663 != nil {
			return m.NoResult, err1663
		}
		if ((m.IsTrue(eval1661)) &&
		   (m.IsTrue(eval1662))) &&
		   (m.IsTrue(eval1663)) {
			// RHS
			traceRuleApply("FUNC", 1631, "{| rule isSubstateCellOpt(`<substate>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1632
	// source: ? @?
	// {| rule isSubstateCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1632, "{| rule isSubstateCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGasUsedCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1633
	// source: ? @?
	// {| rule isGasUsedCell(#KToken(#token("GasUsedCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasUsedCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1633, "{| rule isGasUsedCell(#KToken(#token(\"GasUsedCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1634
	// source: ? @?
	// {| rule isGasUsedCell(`<gasUsed>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasUsedXgt && len(kapp0.List) == 1 { // `<gasUsed>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1634, "{| rule isGasUsedCell(`<gasUsed>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1635
	// source: ? @?
	// {| rule isGasUsedCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1635, "{| rule isGasUsedCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashparseByteStackAux(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #1636
	// source: data.k @452
	// {| rule #parseByteStackAux(_22,WS,LEN,LEN)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isString(_22)) ensures #token("true","Bool") [UNIQUE_ID(9722ce12195beab1ea89ab7ef60c8946f0b71025e81bc90786d65a35c74e81c6) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		varWS := c2 // lhs KVariable WS
		if varLEN, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if c4.Equals(varLEN) { // lhs KVariable, which reappears:LEN
				// REQUIRES
				eval1664, err1664 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err1664 != nil {
					return m.NoResult, err1664
				}
				if m.IsTrue(eval1664) /* && */ /* rhs precomputed isInt(LEN) */  /* && */ /* rhs precomputed isString(_22) */  {
					// RHS
					traceRuleApply("FUNC", 1636, "{| rule #parseByteStackAux(_22,WS,LEN,LEN)=>#rev(WS,`.WordStack_IELE-DATA`(.KList)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isString(_22)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9722ce12195beab1ea89ab7ef60c8946f0b71025e81bc90786d65a35c74e81c6) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval1665, err1665 := evalXhashrev( // #rev(WS,`.WordStack_IELE-DATA`(.KList))
						varWS,
						&m.KApply{Label: m.LblXdotWordStackXuIELEXhyphenDATA, List: []m.K{ // as-is .WordStack_IELE-DATA
						}},
						config, -1)
					if err1665 != nil {
						return m.NoResult, err1665
					}
					return eval1665, nil
				}
			}
		}
	}

	// rule #1637
	// source: data.k @453
	// {| rule #parseByteStackAux(S,WS,I,LEN)=>#parseByteStackAux(S,`_:__IELE-DATA`(#parseHexWord(substrString(S,I,`_+Int_`(I,#token("2","Int")))),WS),`_+Int_`(I,#token("2","Int")),LEN) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(I)),isString(S)),isInt(LEN)) ensures #token("true","Bool") [UNIQUE_ID(6bed053ac08bf6246febdc25b6702e4178f7c5a592a2cabe917ee110fe953d71) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varS, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		varWS := c2 // lhs KVariable WS
		if varI, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEN, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval1666, err1666 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err1666 != nil {
					return m.NoResult, err1666
				}
				if m.IsTrue(eval1666) /* && */ /* rhs precomputed isInt(I) */  /* && */ /* rhs precomputed isString(S) */  /* && */ /* rhs precomputed isInt(LEN) */  {
					// RHS
					traceRuleApply("FUNC", 1637, "{| rule #parseByteStackAux(S,WS,I,LEN)=>#parseByteStackAux(S,`_:__IELE-DATA`(#parseHexWord(substrString(S,I,`_+Int_`(I,#token(\"2\",\"Int\")))),WS),`_+Int_`(I,#token(\"2\",\"Int\")),LEN) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(I)),isString(S)),isInt(LEN)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6bed053ac08bf6246febdc25b6702e4178f7c5a592a2cabe917ee110fe953d71) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval1670, err1670 := evalXuXplusIntXu( // `_+Int_`(I,#token("2","Int"))
						varI,
						/* rhs KToken */ m.NewIntFromString("2"),
						config, -1)
					if err1670 != nil {
						return m.NoResult, err1670
					}
					eval1669, err1669 := evalSubstrString( // substrString(S,I,`_+Int_`(I,#token("2","Int")))
						varS,
						varI,
						eval1670,
						config, -1)
					if err1669 != nil {
						return m.NoResult, err1669
					}
					eval1668, err1668 := evalXhashparseHexWord( // #parseHexWord(substrString(S,I,`_+Int_`(I,#token("2","Int"))))
						eval1669,
						config, -1)
					if err1668 != nil {
						return m.NoResult, err1668
					}
					eval1671, err1671 := evalXuXplusIntXu( // `_+Int_`(I,#token("2","Int"))
						varI,
						/* rhs KToken */ m.NewIntFromString("2"),
						config, -1)
					if err1671 != nil {
						return m.NoResult, err1671
					}
					eval1667, err1667 := evalXhashparseByteStackAux( // #parseByteStackAux(S,`_:__IELE-DATA`(#parseHexWord(substrString(S,I,`_+Int_`(I,#token("2","Int")))),WS),`_+Int_`(I,#token("2","Int")),LEN)
						varS,
						&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
							eval1668,
							varWS,
						}},
						eval1671,
						varLEN,
						config, -1)
					if err1667 != nil {
						return m.NoResult, err1667
					}
					return eval1667, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseByteStackAux", args: []m.K{c1, c2, c3, c4}}
}

func evalInitFunctionBodiesCell(config m.K, guard int) (m.K, error) {
	// rule #1638
	// source: ? @?
	// {| rule initFunctionBodiesCell(.KList)=>`<functionBodies>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(634ccd89c83ce2f32217f132827e262c1ac700af0ac5f09066ec348435f914a5) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1638, "{| rule initFunctionBodiesCell(.KList)=>`<functionBodies>`(.K) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(634ccd89c83ce2f32217f132827e262c1ac700af0ac5f09066ec348435f914a5) initializer()] |}")
	return &m.KApply{Label: m.LblXltfunctionBodiesXgt, List: []m.K{ // as-is <functionBodies>
		m.EmptyKSequence,
	}}, nil

}

//var constInitFunctionBodiesCell K = evalInitFunctionBodiesCell(m.InternedBottom)

func evalSubstrBytes(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.substr
	lbl := m.LblSubstrBytes // substrBytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.substr(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.substr, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSubstrBytes", args: []m.K{c1, c2, c3}}
}

func evalXuXltIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.lt
	lbl := m.LblXuXltIntXuXuINT // _<Int__INT
	sort := m.SortBool
	if hookRes, hookErr := intHooks.lt(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.lt, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltIntXuXuINT", args: []m.K{c1, c2}}
}

func evalInitGasPriceCell(config m.K, guard int) (m.K, error) {
	// rule #1639
	// source: ? @?
	// {| rule initGasPriceCell(.KList)=>`<gasPrice>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b7f6fc6eaa26d31e16473d25889b954c0a1a8563ef14d4755affbe7b93c32278) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1639, "{| rule initGasPriceCell(.KList)=>`<gasPrice>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b7f6fc6eaa26d31e16473d25889b954c0a1a8563ef14d4755affbe7b93c32278) initializer()] |}")
	return &m.KApply{Label: m.LblXltgasPriceXgt, List: []m.K{ // as-is <gasPrice>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitGasPriceCell K = evalInitGasPriceCell(m.InternedBottom)

func evalIsCallDataCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1640
	// source: ? @?
	// {| rule isCallDataCell(`<callData>`(K0))=>#token("true","Bool") requires isInts(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallDataXgt && len(kapp0.List) == 1 { // `<callData>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1672, err1672 := evalIsInts( // isInts(K0)
			varK0,
			config, -1)
		if err1672 != nil {
			return m.NoResult, err1672
		}
		if m.IsTrue(eval1672) {
			// RHS
			traceRuleApply("FUNC", 1640, "{| rule isCallDataCell(`<callData>`(K0))=>#token(\"true\",\"Bool\") requires isInts(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1641
	// source: ? @?
	// {| rule isCallDataCell(#KToken(#token("CallDataCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallDataCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1641, "{| rule isCallDataCell(#KToken(#token(\"CallDataCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1642
	// source: ? @?
	// {| rule isCallDataCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1642, "{| rule isCallDataCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsMessagesCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1643
	// source: ? @?
	// {| rule isMessagesCellFragment(`<messages>-fragment`(K0))=>#token("true","Bool") requires isMessageCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessagesXgtXhyphenfragment && len(kapp0.List) == 1 { // `<messages>-fragment`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMessageCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMessageCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 1643, "{| rule isMessagesCellFragment(`<messages>-fragment`(K0))=>#token(\"true\",\"Bool\") requires isMessageCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1644
	// source: ? @?
	// {| rule isMessagesCellFragment(#KToken(#token("MessagesCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessagesCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1644, "{| rule isMessagesCellFragment(#KToken(#token(\"MessagesCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1645
	// source: ? @?
	// {| rule isMessagesCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1645, "{| rule isMessagesCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalChrChar(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.chr
	lbl := m.LblChrChar // chrChar
	sort := m.SortString
	if hookRes, hookErr := stringHooks.chr(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.chr, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalChrChar", args: []m.K{c}}
}

func evalXudivIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.ediv
	lbl := m.LblXudivIntXuXuINT // _divInt__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.ediv(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.ediv, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1646
	// source: domains.k @388
	// {| rule `_divInt__INT`(I1,I2)=>`_/Int__INT`(`_-Int__INT`(I1,`_modInt__INT`(I1,I2)),I2) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_=/=Int__INT`(I2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b7fc8e019ea9840ee8c5e9232d39d7944e010f117308f672e92891325002610e) contentStartColumn(8) contentStartLine(388) org.kframework.attributes.Location(Location(388,8,389,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1673, err1673 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(I2,#token("0","Int"))
				varI2,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1673 != nil {
				return m.NoResult, err1673
			}
			if /* rhs precomputed isInt(I1) && isInt(I2) */ /* && */
			   m.IsTrue(eval1673) {
				// RHS
				traceRuleApply("FUNC", 1646, "{| rule `_divInt__INT`(I1,I2)=>`_/Int__INT`(`_-Int__INT`(I1,`_modInt__INT`(I1,I2)),I2) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_=/=Int__INT`(I2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b7fc8e019ea9840ee8c5e9232d39d7944e010f117308f672e92891325002610e) contentStartColumn(8) contentStartLine(388) org.kframework.attributes.Location(Location(388,8,389,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1676, err1676 := evalXumodIntXuXuINT( // `_modInt__INT`(I1,I2)
					varI1,
					varI2,
					config, -1)
				if err1676 != nil {
					return m.NoResult, err1676
				}
				eval1675, err1675 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(I1,`_modInt__INT`(I1,I2))
					varI1,
					eval1676,
					config, -1)
				if err1675 != nil {
					return m.NoResult, err1675
				}
				eval1674, err1674 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_-Int__INT`(I1,`_modInt__INT`(I1,I2)),I2)
					eval1675,
					varI2,
					config, -1)
				if err1674 != nil {
					return m.NoResult, err1674
				}
				return eval1674, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXudivIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsSLoadInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1647
	// source: ? @?
	// {| rule isSLoadInst(#KToken(#token("SLoadInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSLoadInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1647, "{| rule isSLoadInst(#KToken(#token(\"SLoadInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1648
	// source: ? @?
	// {| rule isSLoadInst(`_=sload__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sload__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1677, err1677 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1677 != nil {
			return m.NoResult, err1677
		}
		eval1678, err1678 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1678 != nil {
			return m.NoResult, err1678
		}
		if (m.IsTrue(eval1677)) &&
		   (m.IsTrue(eval1678)) {
			// RHS
			traceRuleApply("FUNC", 1648, "{| rule isSLoadInst(`_=sload__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1649
	// source: ? @?
	// {| rule isSLoadInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1649, "{| rule isSLoadInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitTypeCheckingCell(config m.K, guard int) (m.K, error) {
	// rule #1650
	// source: ? @?
	// {| rule initTypeCheckingCell(.KList)=>`<typeChecking>`(#token("false","Bool")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5949314465ab59ea9ed1ee5030eef0e3b393fb2f19448dc0da745bf799c0cb74) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1650, "{| rule initTypeCheckingCell(.KList)=>`<typeChecking>`(#token(\"false\",\"Bool\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5949314465ab59ea9ed1ee5030eef0e3b393fb2f19448dc0da745bf799c0cb74) initializer()] |}")
	return &m.KApply{Label: m.LblXlttypeCheckingXgt, List: []m.K{ // as-is <typeChecking>
		/* rhs KToken */ m.BoolFalse,
	}}, nil

}

//var constInitTypeCheckingCell K = evalInitTypeCheckingCell(m.InternedBottom)

func evalIsSelfdestructInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1651
	// source: ? @?
	// {| rule isSelfdestructInst(#KToken(#token("SelfdestructInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfdestructInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1651, "{| rule isSelfdestructInst(#KToken(#token(\"SelfdestructInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1652
	// source: ? @?
	// {| rule isSelfdestructInst(`selfdestruct__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1679, err1679 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1679 != nil {
			return m.NoResult, err1679
		}
		if m.IsTrue(eval1679) {
			// RHS
			traceRuleApply("FUNC", 1652, "{| rule isSelfdestructInst(`selfdestruct__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1653
	// source: ? @?
	// {| rule isSelfdestructInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1653, "{| rule isSelfdestructInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFromCell(config m.K, guard int) (m.K, error) {
	// rule #1654
	// source: ? @?
	// {| rule initFromCell(.KList)=>`<from>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7e5d6e78ced28f958cd71628cb21d76be3353651ec2aa8e7fb232bd0b0306b0b) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1654, "{| rule initFromCell(.KList)=>`<from>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7e5d6e78ced28f958cd71628cb21d76be3353651ec2aa8e7fb232bd0b0306b0b) initializer()] |}")
	return &m.KApply{Label: m.LblXltfromXgt, List: []m.K{ // as-is <from>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitFromCell K = evalInitFromCell(m.InternedBottom)

func evalIsIsZeroInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1655
	// source: ? @?
	// {| rule isIsZeroInst(`_=iszero__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=iszero__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1680, err1680 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1680 != nil {
			return m.NoResult, err1680
		}
		eval1681, err1681 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1681 != nil {
			return m.NoResult, err1681
		}
		if (m.IsTrue(eval1680)) &&
		   (m.IsTrue(eval1681)) {
			// RHS
			traceRuleApply("FUNC", 1655, "{| rule isIsZeroInst(`_=iszero__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1656
	// source: ? @?
	// {| rule isIsZeroInst(#KToken(#token("IsZeroInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIsZeroInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1656, "{| rule isIsZeroInst(#KToken(#token(\"IsZeroInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1657
	// source: ? @?
	// {| rule isIsZeroInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1657, "{| rule isIsZeroInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCallFrameCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1658
	// source: ? @?
	// {| rule isCallFrameCellOpt(noCallFrameCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallFrameCell && len(kapp0.List) == 0 { // noCallFrameCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1658, "{| rule isCallFrameCellOpt(noCallFrameCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1659
	// source: ? @?
	// {| rule isCallFrameCellOpt(#KToken(#token("CallFrameCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallFrameCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1659, "{| rule isCallFrameCellOpt(#KToken(#token(\"CallFrameCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1660
	// source: ? @?
	// {| rule isCallFrameCellOpt(#KToken(#token("CallFrameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallFrameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1660, "{| rule isCallFrameCellOpt(#KToken(#token(\"CallFrameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1661
	// source: ? @?
	// {| rule isCallFrameCellOpt(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallFrameXgt && len(kapp0.List) == 15 { // `<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval1682, err1682 := evalIsProgramCell( // isProgramCell(K0)
			varK0,
			config, -1)
		if err1682 != nil {
			return m.NoResult, err1682
		}
		eval1683, err1683 := evalIsCallDepthCell( // isCallDepthCell(K1)
			varK1,
			config, -1)
		if err1683 != nil {
			return m.NoResult, err1683
		}
		eval1684, err1684 := evalIsLocalCallsCell( // isLocalCallsCell(K2)
			varK2,
			config, -1)
		if err1684 != nil {
			return m.NoResult, err1684
		}
		eval1685, err1685 := evalIsIDCell( // isIdCell(K3)
			varK3,
			config, -1)
		if err1685 != nil {
			return m.NoResult, err1685
		}
		eval1686, err1686 := evalIsCallerCell( // isCallerCell(K4)
			varK4,
			config, -1)
		if err1686 != nil {
			return m.NoResult, err1686
		}
		eval1687, err1687 := evalIsCallDataCell( // isCallDataCell(K5)
			varK5,
			config, -1)
		if err1687 != nil {
			return m.NoResult, err1687
		}
		eval1688, err1688 := evalIsCallValueCell( // isCallValueCell(K6)
			varK6,
			config, -1)
		if err1688 != nil {
			return m.NoResult, err1688
		}
		eval1689, err1689 := evalIsRegsCell( // isRegsCell(K7)
			varK7,
			config, -1)
		if err1689 != nil {
			return m.NoResult, err1689
		}
		eval1690, err1690 := evalIsLocalMemCell( // isLocalMemCell(K8)
			varK8,
			config, -1)
		if err1690 != nil {
			return m.NoResult, err1690
		}
		eval1691, err1691 := evalIsPeakMemoryCell( // isPeakMemoryCell(K9)
			varK9,
			config, -1)
		if err1691 != nil {
			return m.NoResult, err1691
		}
		eval1692, err1692 := evalIsCurrentMemoryCell( // isCurrentMemoryCell(K10)
			varK10,
			config, -1)
		if err1692 != nil {
			return m.NoResult, err1692
		}
		eval1693, err1693 := evalIsFidCell( // isFidCell(K11)
			varK11,
			config, -1)
		if err1693 != nil {
			return m.NoResult, err1693
		}
		eval1694, err1694 := evalIsGasCell( // isGasCell(K12)
			varK12,
			config, -1)
		if err1694 != nil {
			return m.NoResult, err1694
		}
		eval1695, err1695 := evalIsPreviousGasCell( // isPreviousGasCell(K13)
			varK13,
			config, -1)
		if err1695 != nil {
			return m.NoResult, err1695
		}
		eval1696, err1696 := evalIsStaticCell( // isStaticCell(K14)
			varK14,
			config, -1)
		if err1696 != nil {
			return m.NoResult, err1696
		}
		if ((((((((((((((m.IsTrue(eval1682)) &&
		   (m.IsTrue(eval1683))) &&
		   (m.IsTrue(eval1684))) &&
		   (m.IsTrue(eval1685))) &&
		   (m.IsTrue(eval1686))) &&
		   (m.IsTrue(eval1687))) &&
		   (m.IsTrue(eval1688))) &&
		   (m.IsTrue(eval1689))) &&
		   (m.IsTrue(eval1690))) &&
		   (m.IsTrue(eval1691))) &&
		   (m.IsTrue(eval1692))) &&
		   (m.IsTrue(eval1693))) &&
		   (m.IsTrue(eval1694))) &&
		   (m.IsTrue(eval1695))) &&
		   (m.IsTrue(eval1696)) {
			// RHS
			traceRuleApply("FUNC", 1661, "{| rule isCallFrameCellOpt(`<callFrame>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isProgramCell(K0),isCallDepthCell(K1)),isLocalCallsCell(K2)),isIdCell(K3)),isCallerCell(K4)),isCallDataCell(K5)),isCallValueCell(K6)),isRegsCell(K7)),isLocalMemCell(K8)),isPeakMemoryCell(K9)),isCurrentMemoryCell(K10)),isFidCell(K11)),isGasCell(K12)),isPreviousGasCell(K13)),isStaticCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1662
	// source: ? @?
	// {| rule isCallFrameCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1662, "{| rule isCallFrameCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuorBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.or
	lbl := m.LblXuorBoolXuXuBOOL // _orBool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.or(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.or, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1663
	// source: domains.k @320
	// {| rule `_orBool__BOOL`(B,#token("false","Bool"))=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(630487d34ae5fc313a9b8cae2ad45b7b80671058bca3c97a7864774c5a431711) contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1663, "{| rule `_orBool__BOOL`(B,#token(\"false\",\"Bool\"))=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(630487d34ae5fc313a9b8cae2ad45b7b80671058bca3c97a7864774c5a431711) contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #1664
	// source: domains.k @318
	// {| rule `_orBool__BOOL`(_7,#token("true","Bool"))=>#token("true","Bool") requires isBool(_7) ensures #token("true","Bool") [UNIQUE_ID(497077a299480dbc06eccb33cd98338014bd125c4c601cb88a765dbcb334b14b) contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,318,34)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolTrue) { // #token("true","Bool")
			// REQUIRES precomputed isBool(_7)
			// RHS
			traceRuleApply("FUNC", 1664, "{| rule `_orBool__BOOL`(_7,#token(\"true\",\"Bool\"))=>#token(\"true\",\"Bool\") requires isBool(_7) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(497077a299480dbc06eccb33cd98338014bd125c4c601cb88a765dbcb334b14b) contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,318,34)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1665
	// source: domains.k @319
	// {| rule `_orBool__BOOL`(#token("false","Bool"),B)=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(ababa6e5e3735076933657815e24f99518fe532715ea97eae22ead8e30097b53) contentStartColumn(8) contentStartLine(319) org.kframework.attributes.Location(Location(319,8,319,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if varB, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1665, "{| rule `_orBool__BOOL`(#token(\"false\",\"Bool\"),B)=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ababa6e5e3735076933657815e24f99518fe532715ea97eae22ead8e30097b53) contentStartColumn(8) contentStartLine(319) org.kframework.attributes.Location(Location(319,8,319,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #1666
	// source: domains.k @317
	// {| rule `_orBool__BOOL`(#token("true","Bool"),_0)=>#token("true","Bool") requires isBool(_0) ensures #token("true","Bool") [UNIQUE_ID(166d732e9fd6609a71feb6d62f8a420d291ac81be018b646ee1177935b008f01) contentStartColumn(8) contentStartLine(317) org.kframework.attributes.Location(Location(317,8,317,34)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		if _, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(_0)
			// RHS
			traceRuleApply("FUNC", 1666, "{| rule `_orBool__BOOL`(#token(\"true\",\"Bool\"),_0)=>#token(\"true\",\"Bool\") requires isBool(_0) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(166d732e9fd6609a71feb6d62f8a420d291ac81be018b646ee1177935b008f01) contentStartColumn(8) contentStartLine(317) org.kframework.attributes.Location(Location(317,8,317,34)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuorBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalUpdateMap(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.updateAll
	lbl := m.LblUpdateMap // updateMap
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.updateAll(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.updateAll, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalUpdateMap", args: []m.K{c1, c2}}
}

func evalCeilDiv(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1667
	// source: data.k @138
	// {| rule ceilDiv(I1,I2)=>`_/Int__INT`(`_+Int_`(I1,`_-Int__INT`(I2,#token("1","Int"))),I2) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_>Int__INT`(I2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(312d24e7a72b96ab162994e3656846c7594cf10056e74fecce2fcf173a94c9c2) contentStartColumn(10) contentStartLine(138) org.kframework.attributes.Location(Location(138,10,138,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1697, err1697 := evalXuXgtIntXuXuINT( // `_>Int__INT`(I2,#token("0","Int"))
				varI2,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1697 != nil {
				return m.NoResult, err1697
			}
			if /* rhs precomputed isInt(I1) && isInt(I2) */ /* && */
			   m.IsTrue(eval1697) {
				// RHS
				traceRuleApply("FUNC", 1667, "{| rule ceilDiv(I1,I2)=>`_/Int__INT`(`_+Int_`(I1,`_-Int__INT`(I2,#token(\"1\",\"Int\"))),I2) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_>Int__INT`(I2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(312d24e7a72b96ab162994e3656846c7594cf10056e74fecce2fcf173a94c9c2) contentStartColumn(10) contentStartLine(138) org.kframework.attributes.Location(Location(138,10,138,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval1700, err1700 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(I2,#token("1","Int"))
					varI2,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err1700 != nil {
					return m.NoResult, err1700
				}
				eval1699, err1699 := evalXuXplusIntXu( // `_+Int_`(I1,`_-Int__INT`(I2,#token("1","Int")))
					varI1,
					eval1700,
					config, -1)
				if err1699 != nil {
					return m.NoResult, err1699
				}
				eval1698, err1698 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_+Int_`(I1,`_-Int__INT`(I2,#token("1","Int"))),I2)
					eval1699,
					varI2,
					config, -1)
				if err1698 != nil {
					return m.NoResult, err1698
				}
				return eval1698, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCeilDiv", args: []m.K{c1, c2}}
}

func evalInt2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.int2string
	lbl := m.LblInt2String // Int2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.int2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.int2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalInt2String", args: []m.K{c}}
}

func evalIsInstructionsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1668
	// source: ? @?
	// {| rule isInstructionsCell(#KToken(#token("InstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1668, "{| rule isInstructionsCell(#KToken(#token(\"InstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1669
	// source: ? @?
	// {| rule isInstructionsCell(`<instructions>`(K0))=>#token("true","Bool") requires isBlocks(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinstructionsXgt && len(kapp0.List) == 1 { // `<instructions>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1701, err1701 := evalIsBlocks( // isBlocks(K0)
			varK0,
			config, -1)
		if err1701 != nil {
			return m.NoResult, err1701
		}
		if m.IsTrue(eval1701) {
			// RHS
			traceRuleApply("FUNC", 1669, "{| rule isInstructionsCell(`<instructions>`(K0))=>#token(\"true\",\"Bool\") requires isBlocks(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1670
	// source: ? @?
	// {| rule isInstructionsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1670, "{| rule isInstructionsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXeqXslashXeqKXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: KEQUAL.ne
	lbl := m.LblXuXeqXslashXeqKXu // _=/=K_
	sort := m.SortBool
	if hookRes, hookErr := kequalHooks.ne(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KEQUAL.ne, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1671
	// source: domains.k @776
	// {| rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires `_andBool_`(isK(K1),isK(K2)) ensures #token("true","Bool") [UNIQUE_ID(0221882a8af3c088550dce160a5b2e48351ef2431aad518a72f3d65258a4066d) contentStartColumn(8) contentStartLine(776) org.kframework.attributes.Location(Location(776,8,776,45)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varK1 := c1 // lhs KVariable K1
		varK2 := c2 // lhs KVariable K2
		// REQUIRES precomputed isK && isK
		// RHS
		traceRuleApply("FUNC", 1671, "{| rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires `_andBool_`(isK(K1),isK(K2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0221882a8af3c088550dce160a5b2e48351ef2431aad518a72f3d65258a4066d) contentStartColumn(8) contentStartLine(776) org.kframework.attributes.Location(Location(776,8,776,45)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval1703, err1703 := evalXuXeqXeqKXu( // `_==K_`(K1,K2)
			varK1,
			varK2,
			config, -1)
		if err1703 != nil {
			return m.NoResult, err1703
		}
		eval1702, err1702 := evalNotBoolXu( // `notBool_`(`_==K_`(K1,K2))
			eval1703,
			config, -1)
		if err1702 != nil {
			return m.NoResult, err1702
		}
		return eval1702, nil
	}

}

func evalIsScheduleCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1672
	// source: ? @?
	// {| rule isScheduleCellOpt(noScheduleCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoScheduleCell && len(kapp0.List) == 0 { // noScheduleCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1672, "{| rule isScheduleCellOpt(noScheduleCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1673
	// source: ? @?
	// {| rule isScheduleCellOpt(#KToken(#token("ScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1673, "{| rule isScheduleCellOpt(#KToken(#token(\"ScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1674
	// source: ? @?
	// {| rule isScheduleCellOpt(#KToken(#token("ScheduleCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1674, "{| rule isScheduleCellOpt(#KToken(#token(\"ScheduleCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1675
	// source: ? @?
	// {| rule isScheduleCellOpt(`<schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltscheduleXgt && len(kapp0.List) == 1 { // `<schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1704, err1704 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err1704 != nil {
			return m.NoResult, err1704
		}
		if m.IsTrue(eval1704) {
			// RHS
			traceRuleApply("FUNC", 1675, "{| rule isScheduleCellOpt(`<schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1676
	// source: ? @?
	// {| rule isScheduleCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1676, "{| rule isScheduleCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLocalName(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1677
	// source: ? @?
	// {| rule isLocalName(#KToken(#token("LocalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1677, "{| rule isLocalName(#KToken(#token(\"LocalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1678
	// source: ? @?
	// {| rule isLocalName(`%__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `%__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1705, err1705 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1705 != nil {
			return m.NoResult, err1705
		}
		if m.IsTrue(eval1705) {
			// RHS
			traceRuleApply("FUNC", 1678, "{| rule isLocalName(`%__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1679
	// source: ? @?
	// {| rule isLocalName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1679, "{| rule isLocalName(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsInstruction(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1680
	// source: ? @?
	// {| rule isInstruction(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=and_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1706, err1706 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1706 != nil {
			return m.NoResult, err1706
		}
		eval1707, err1707 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1707 != nil {
			return m.NoResult, err1707
		}
		eval1708, err1708 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1708 != nil {
			return m.NoResult, err1708
		}
		if ((m.IsTrue(eval1706)) &&
		   (m.IsTrue(eval1707))) &&
		   (m.IsTrue(eval1708)) {
			// RHS
			traceRuleApply("FUNC", 1680, "{| rule isInstruction(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1681
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("TwosInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTwosInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1681, "{| rule isInstruction(#KToken(#token(\"TwosInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1682
	// source: ? @?
	// {| rule isInstruction(`_=sha3__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1709, err1709 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1709 != nil {
			return m.NoResult, err1709
		}
		eval1710, err1710 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1710 != nil {
			return m.NoResult, err1710
		}
		if (m.IsTrue(eval1709)) &&
		   (m.IsTrue(eval1710)) {
			// RHS
			traceRuleApply("FUNC", 1682, "{| rule isInstruction(`_=sha3__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1683
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1683, "{| rule isInstruction(#KToken(#token(\"ModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1684
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SHA3Inst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSHA3Inst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1684, "{| rule isInstruction(#KToken(#token(\"SHA3Inst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1685
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ExpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1685, "{| rule isInstruction(#KToken(#token(\"ExpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1686
	// source: ? @?
	// {| rule isInstruction(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=div_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1711, err1711 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1711 != nil {
			return m.NoResult, err1711
		}
		eval1712, err1712 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1712 != nil {
			return m.NoResult, err1712
		}
		eval1713, err1713 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1713 != nil {
			return m.NoResult, err1713
		}
		if ((m.IsTrue(eval1711)) &&
		   (m.IsTrue(eval1712))) &&
		   (m.IsTrue(eval1713)) {
			// RHS
			traceRuleApply("FUNC", 1686, "{| rule isInstruction(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1687
	// source: ? @?
	// {| rule isInstruction(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1714, err1714 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1714 != nil {
			return m.NoResult, err1714
		}
		eval1715, err1715 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1715 != nil {
			return m.NoResult, err1715
		}
		eval1716, err1716 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1716 != nil {
			return m.NoResult, err1716
		}
		eval1717, err1717 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1717 != nil {
			return m.NoResult, err1717
		}
		if (((m.IsTrue(eval1714)) &&
		   (m.IsTrue(eval1715))) &&
		   (m.IsTrue(eval1716))) &&
		   (m.IsTrue(eval1717)) {
			// RHS
			traceRuleApply("FUNC", 1687, "{| rule isInstruction(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1688
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ReturnInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortReturnInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1688, "{| rule isInstruction(#KToken(#token(\"ReturnInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1689
	// source: ? @?
	// {| rule isInstruction(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=or_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1718, err1718 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1718 != nil {
			return m.NoResult, err1718
		}
		eval1719, err1719 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1719 != nil {
			return m.NoResult, err1719
		}
		eval1720, err1720 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1720 != nil {
			return m.NoResult, err1720
		}
		if ((m.IsTrue(eval1718)) &&
		   (m.IsTrue(eval1719))) &&
		   (m.IsTrue(eval1720)) {
			// RHS
			traceRuleApply("FUNC", 1689, "{| rule isInstruction(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1690
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("AddModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAddModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1690, "{| rule isInstruction(#KToken(#token(\"AddModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1691
	// source: ? @?
	// {| rule isInstruction(`ret__IELE-COMMON`(K0))=>#token("true","Bool") requires isNonEmptyOperands(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `ret__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1721, err1721 := evalIsNonEmptyOperands( // isNonEmptyOperands(K0)
			varK0,
			config, -1)
		if err1721 != nil {
			return m.NoResult, err1721
		}
		if m.IsTrue(eval1721) {
			// RHS
			traceRuleApply("FUNC", 1691, "{| rule isInstruction(`ret__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isNonEmptyOperands(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1692
	// source: ? @?
	// {| rule isInstruction(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=exp_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1722, err1722 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1722 != nil {
			return m.NoResult, err1722
		}
		eval1723, err1723 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1723 != nil {
			return m.NoResult, err1723
		}
		eval1724, err1724 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1724 != nil {
			return m.NoResult, err1724
		}
		if ((m.IsTrue(eval1722)) &&
		   (m.IsTrue(eval1723))) &&
		   (m.IsTrue(eval1724)) {
			// RHS
			traceRuleApply("FUNC", 1692, "{| rule isInstruction(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1693
	// source: ? @?
	// {| rule isInstruction(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1725, err1725 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1725 != nil {
			return m.NoResult, err1725
		}
		eval1726, err1726 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1726 != nil {
			return m.NoResult, err1726
		}
		eval1727, err1727 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1727 != nil {
			return m.NoResult, err1727
		}
		eval1728, err1728 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1728 != nil {
			return m.NoResult, err1728
		}
		if (((m.IsTrue(eval1725)) &&
		   (m.IsTrue(eval1726))) &&
		   (m.IsTrue(eval1727))) &&
		   (m.IsTrue(eval1728)) {
			// RHS
			traceRuleApply("FUNC", 1693, "{| rule isInstruction(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1694
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("LocalCallInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1694, "{| rule isInstruction(#KToken(#token(\"LocalCallInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1695
	// source: ? @?
	// {| rule isInstruction(`SHA256_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHA256XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `SHA256_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1695, "{| rule isInstruction(`SHA256_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1696
	// source: ? @?
	// {| rule isInstruction(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=twos_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1729, err1729 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1729 != nil {
			return m.NoResult, err1729
		}
		eval1730, err1730 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1730 != nil {
			return m.NoResult, err1730
		}
		eval1731, err1731 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1731 != nil {
			return m.NoResult, err1731
		}
		if ((m.IsTrue(eval1729)) &&
		   (m.IsTrue(eval1730))) &&
		   (m.IsTrue(eval1731)) {
			// RHS
			traceRuleApply("FUNC", 1696, "{| rule isInstruction(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1697
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("NotInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNotInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1697, "{| rule isInstruction(#KToken(#token(\"NotInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1698
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("BswapInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBswapInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1698, "{| rule isInstruction(#KToken(#token(\"BswapInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1699
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("IsZeroInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIsZeroInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1699, "{| rule isInstruction(#KToken(#token(\"IsZeroInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1700
	// source: ? @?
	// {| rule isInstruction(`selfdestruct__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1732, err1732 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1732 != nil {
			return m.NoResult, err1732
		}
		if m.IsTrue(eval1732) {
			// RHS
			traceRuleApply("FUNC", 1700, "{| rule isInstruction(`selfdestruct__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1701
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("JumpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1701, "{| rule isInstruction(#KToken(#token(\"JumpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1702
	// source: ? @?
	// {| rule isInstruction(`call_(_)_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `call_(_)_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1733, err1733 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1733 != nil {
			return m.NoResult, err1733
		}
		eval1734, err1734 := evalIsOperands( // isOperands(K1)
			varK1,
			config, -1)
		if err1734 != nil {
			return m.NoResult, err1734
		}
		if (m.IsTrue(eval1733)) &&
		   (m.IsTrue(eval1734)) {
			// RHS
			traceRuleApply("FUNC", 1702, "{| rule isInstruction(`call_(_)_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1703
	// source: ? @?
	// {| rule isInstruction(`_=iszero__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=iszero__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1735, err1735 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1735 != nil {
			return m.NoResult, err1735
		}
		eval1736, err1736 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1736 != nil {
			return m.NoResult, err1736
		}
		if (m.IsTrue(eval1735)) &&
		   (m.IsTrue(eval1736)) {
			// RHS
			traceRuleApply("FUNC", 1703, "{| rule isInstruction(`_=iszero__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1704
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("CallAddressInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallAddressInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1704, "{| rule isInstruction(#KToken(#token(\"CallAddressInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1705
	// source: ? @?
	// {| rule isInstruction(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECPAIRINGXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1705, "{| rule isInstruction(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1706
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("AccountCallInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCallInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1706, "{| rule isInstruction(#KToken(#token(\"AccountCallInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1707
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SExtInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSExtInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1707, "{| rule isInstruction(#KToken(#token(\"SExtInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1708
	// source: ? @?
	// {| rule isInstruction(`RIP160_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRIP160XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `RIP160_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1708, "{| rule isInstruction(`RIP160_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1709
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SelfdestructInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSelfdestructInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1709, "{| rule isInstruction(#KToken(#token(\"SelfdestructInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1710
	// source: ? @?
	// {| rule isInstruction(`_=not__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqnotXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=not__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1737, err1737 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1737 != nil {
			return m.NoResult, err1737
		}
		eval1738, err1738 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1738 != nil {
			return m.NoResult, err1738
		}
		if (m.IsTrue(eval1737)) &&
		   (m.IsTrue(eval1738)) {
			// RHS
			traceRuleApply("FUNC", 1710, "{| rule isInstruction(`_=not__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1711
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("AndInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAndInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1711, "{| rule isInstruction(#KToken(#token(\"AndInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1712
	// source: ? @?
	// {| rule isInstruction(`br__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `br__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1739, err1739 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err1739 != nil {
			return m.NoResult, err1739
		}
		if m.IsTrue(eval1739) {
			// RHS
			traceRuleApply("FUNC", 1712, "{| rule isInstruction(`br__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1713
	// source: ? @?
	// {| rule isInstruction(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sext_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1740, err1740 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1740 != nil {
			return m.NoResult, err1740
		}
		eval1741, err1741 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1741 != nil {
			return m.NoResult, err1741
		}
		eval1742, err1742 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1742 != nil {
			return m.NoResult, err1742
		}
		if ((m.IsTrue(eval1740)) &&
		   (m.IsTrue(eval1741))) &&
		   (m.IsTrue(eval1742)) {
			// RHS
			traceRuleApply("FUNC", 1713, "{| rule isInstruction(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1714
	// source: ? @?
	// {| rule isInstruction(`_=__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1743, err1743 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1743 != nil {
			return m.NoResult, err1743
		}
		eval1744, err1744 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1744 != nil {
			return m.NoResult, err1744
		}
		if (m.IsTrue(eval1743)) &&
		   (m.IsTrue(eval1744)) {
			// RHS
			traceRuleApply("FUNC", 1714, "{| rule isInstruction(`_=__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1715
	// source: ? @?
	// {| rule isInstruction(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mod_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1745, err1745 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1745 != nil {
			return m.NoResult, err1745
		}
		eval1746, err1746 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1746 != nil {
			return m.NoResult, err1746
		}
		eval1747, err1747 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1747 != nil {
			return m.NoResult, err1747
		}
		if ((m.IsTrue(eval1745)) &&
		   (m.IsTrue(eval1746))) &&
		   (m.IsTrue(eval1747)) {
			// RHS
			traceRuleApply("FUNC", 1715, "{| rule isInstruction(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1716
	// source: ? @?
	// {| rule isInstruction(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=add_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1748, err1748 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1748 != nil {
			return m.NoResult, err1748
		}
		eval1749, err1749 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1749 != nil {
			return m.NoResult, err1749
		}
		eval1750, err1750 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1750 != nil {
			return m.NoResult, err1750
		}
		if ((m.IsTrue(eval1748)) &&
		   (m.IsTrue(eval1749))) &&
		   (m.IsTrue(eval1750)) {
			// RHS
			traceRuleApply("FUNC", 1716, "{| rule isInstruction(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1717
	// source: ? @?
	// {| rule isInstruction(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isPredicate(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=cmp__,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1751, err1751 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1751 != nil {
			return m.NoResult, err1751
		}
		eval1752, err1752 := evalIsPredicate( // isPredicate(K1)
			varK1,
			config, -1)
		if err1752 != nil {
			return m.NoResult, err1752
		}
		eval1753, err1753 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1753 != nil {
			return m.NoResult, err1753
		}
		eval1754, err1754 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1754 != nil {
			return m.NoResult, err1754
		}
		if (((m.IsTrue(eval1751)) &&
		   (m.IsTrue(eval1752))) &&
		   (m.IsTrue(eval1753))) &&
		   (m.IsTrue(eval1754)) {
			// RHS
			traceRuleApply("FUNC", 1717, "{| rule isInstruction(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isPredicate(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1718
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("LogInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLogInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1718, "{| rule isInstruction(#KToken(#token(\"LogInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1719
	// source: ? @?
	// {| rule isInstruction(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1755, err1755 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1755 != nil {
			return m.NoResult, err1755
		}
		eval1756, err1756 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err1756 != nil {
			return m.NoResult, err1756
		}
		eval1757, err1757 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1757 != nil {
			return m.NoResult, err1757
		}
		eval1758, err1758 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err1758 != nil {
			return m.NoResult, err1758
		}
		eval1759, err1759 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err1759 != nil {
			return m.NoResult, err1759
		}
		if ((((m.IsTrue(eval1755)) &&
		   (m.IsTrue(eval1756))) &&
		   (m.IsTrue(eval1757))) &&
		   (m.IsTrue(eval1758))) &&
		   (m.IsTrue(eval1759)) {
			// RHS
			traceRuleApply("FUNC", 1719, "{| rule isInstruction(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1720
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SStoreInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSStoreInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1720, "{| rule isInstruction(#KToken(#token(\"SStoreInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1721
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("Instruction","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInstruction { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1721, "{| rule isInstruction(#KToken(#token(\"Instruction\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1722
	// source: ? @?
	// {| rule isInstruction(`log__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1760, err1760 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1760 != nil {
			return m.NoResult, err1760
		}
		if m.IsTrue(eval1760) {
			// RHS
			traceRuleApply("FUNC", 1722, "{| rule isInstruction(`log__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1723
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("LoadInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLoadInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1723, "{| rule isInstruction(#KToken(#token(\"LoadInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1724
	// source: ? @?
	// {| rule isInstruction(`ID_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblIDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ID_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1724, "{| rule isInstruction(`ID_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1725
	// source: ? @?
	// {| rule isInstruction(`store_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1761, err1761 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1761 != nil {
			return m.NoResult, err1761
		}
		eval1762, err1762 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1762 != nil {
			return m.NoResult, err1762
		}
		if (m.IsTrue(eval1761)) &&
		   (m.IsTrue(eval1762)) {
			// RHS
			traceRuleApply("FUNC", 1725, "{| rule isInstruction(`store_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1726
	// source: ? @?
	// {| rule isInstruction(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)),isOperand(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval1763, err1763 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err1763 != nil {
			return m.NoResult, err1763
		}
		eval1764, err1764 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1764 != nil {
			return m.NoResult, err1764
		}
		eval1765, err1765 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1765 != nil {
			return m.NoResult, err1765
		}
		eval1766, err1766 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err1766 != nil {
			return m.NoResult, err1766
		}
		eval1767, err1767 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err1767 != nil {
			return m.NoResult, err1767
		}
		eval1768, err1768 := evalIsOperand( // isOperand(K5)
			varK5,
			config, -1)
		if err1768 != nil {
			return m.NoResult, err1768
		}
		if (((((m.IsTrue(eval1763)) &&
		   (m.IsTrue(eval1764))) &&
		   (m.IsTrue(eval1765))) &&
		   (m.IsTrue(eval1766))) &&
		   (m.IsTrue(eval1767))) &&
		   (m.IsTrue(eval1768)) {
			// RHS
			traceRuleApply("FUNC", 1726, "{| rule isInstruction(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)),isOperand(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1727
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ShiftInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortShiftInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1727, "{| rule isInstruction(#KToken(#token(\"ShiftInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1728
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ExpModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExpModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1728, "{| rule isInstruction(#KToken(#token(\"ExpModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1729
	// source: ? @?
	// {| rule isInstruction(`br_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isIeleName(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `br_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1769, err1769 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1769 != nil {
			return m.NoResult, err1769
		}
		eval1770, err1770 := evalIsIeleName( // isIeleName(K1)
			varK1,
			config, -1)
		if err1770 != nil {
			return m.NoResult, err1770
		}
		if (m.IsTrue(eval1769)) &&
		   (m.IsTrue(eval1770)) {
			// RHS
			traceRuleApply("FUNC", 1729, "{| rule isInstruction(`br_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isIeleName(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1730
	// source: ? @?
	// {| rule isInstruction(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=xor_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1771, err1771 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1771 != nil {
			return m.NoResult, err1771
		}
		eval1772, err1772 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1772 != nil {
			return m.NoResult, err1772
		}
		eval1773, err1773 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1773 != nil {
			return m.NoResult, err1773
		}
		if ((m.IsTrue(eval1771)) &&
		   (m.IsTrue(eval1772))) &&
		   (m.IsTrue(eval1773)) {
			// RHS
			traceRuleApply("FUNC", 1730, "{| rule isInstruction(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1731
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("OrInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOrInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1731, "{| rule isInstruction(#KToken(#token(\"OrInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1732
	// source: ? @?
	// {| rule isInstruction(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1774, err1774 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err1774 != nil {
			return m.NoResult, err1774
		}
		eval1775, err1775 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1775 != nil {
			return m.NoResult, err1775
		}
		eval1776, err1776 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1776 != nil {
			return m.NoResult, err1776
		}
		eval1777, err1777 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err1777 != nil {
			return m.NoResult, err1777
		}
		eval1778, err1778 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err1778 != nil {
			return m.NoResult, err1778
		}
		if ((((m.IsTrue(eval1774)) &&
		   (m.IsTrue(eval1775))) &&
		   (m.IsTrue(eval1776))) &&
		   (m.IsTrue(eval1777))) &&
		   (m.IsTrue(eval1778)) {
			// RHS
			traceRuleApply("FUNC", 1732, "{| rule isInstruction(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1733
	// source: ? @?
	// {| rule isInstruction(`revert__IELE-COMMON`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRevertXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `revert__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1779, err1779 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1779 != nil {
			return m.NoResult, err1779
		}
		if m.IsTrue(eval1779) {
			// RHS
			traceRuleApply("FUNC", 1733, "{| rule isInstruction(`revert__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1734
	// source: ? @?
	// {| rule isInstruction(`_=log2__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqlog2XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=log2__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1780, err1780 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1780 != nil {
			return m.NoResult, err1780
		}
		eval1781, err1781 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1781 != nil {
			return m.NoResult, err1781
		}
		if (m.IsTrue(eval1780)) &&
		   (m.IsTrue(eval1781)) {
			// RHS
			traceRuleApply("FUNC", 1734, "{| rule isInstruction(`_=log2__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1735
	// source: ? @?
	// {| rule isInstruction(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=shift_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1782, err1782 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1782 != nil {
			return m.NoResult, err1782
		}
		eval1783, err1783 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1783 != nil {
			return m.NoResult, err1783
		}
		eval1784, err1784 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1784 != nil {
			return m.NoResult, err1784
		}
		if ((m.IsTrue(eval1782)) &&
		   (m.IsTrue(eval1783))) &&
		   (m.IsTrue(eval1784)) {
			// RHS
			traceRuleApply("FUNC", 1735, "{| rule isInstruction(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1736
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("DivInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDivInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1736, "{| rule isInstruction(#KToken(#token(\"DivInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1737
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("AddInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAddInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1737, "{| rule isInstruction(#KToken(#token(\"AddInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1738
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("MulModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMulModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1738, "{| rule isInstruction(#KToken(#token(\"MulModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1739
	// source: ? @?
	// {| rule isInstruction(`_=sload__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sload__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1785, err1785 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1785 != nil {
			return m.NoResult, err1785
		}
		eval1786, err1786 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1786 != nil {
			return m.NoResult, err1786
		}
		if (m.IsTrue(eval1785)) &&
		   (m.IsTrue(eval1786)) {
			// RHS
			traceRuleApply("FUNC", 1739, "{| rule isInstruction(`_=sload__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1740
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SubInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1740, "{| rule isInstruction(#KToken(#token(\"SubInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1741
	// source: ? @?
	// {| rule isInstruction(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isIeleName(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval1787, err1787 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1787 != nil {
			return m.NoResult, err1787
		}
		eval1788, err1788 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err1788 != nil {
			return m.NoResult, err1788
		}
		eval1789, err1789 := evalIsIeleName( // isIeleName(K2)
			varK2,
			config, -1)
		if err1789 != nil {
			return m.NoResult, err1789
		}
		eval1790, err1790 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err1790 != nil {
			return m.NoResult, err1790
		}
		eval1791, err1791 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err1791 != nil {
			return m.NoResult, err1791
		}
		if ((((m.IsTrue(eval1787)) &&
		   (m.IsTrue(eval1788))) &&
		   (m.IsTrue(eval1789))) &&
		   (m.IsTrue(eval1790))) &&
		   (m.IsTrue(eval1791)) {
			// RHS
			traceRuleApply("FUNC", 1741, "{| rule isInstruction(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isIeleName(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1742
	// source: ? @?
	// {| rule isInstruction(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECMULXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1742, "{| rule isInstruction(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1743
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("ByteInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortByteInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1743, "{| rule isInstruction(#KToken(#token(\"ByteInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1744
	// source: ? @?
	// {| rule isInstruction(`sstore_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1792, err1792 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1792 != nil {
			return m.NoResult, err1792
		}
		eval1793, err1793 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1793 != nil {
			return m.NoResult, err1793
		}
		if (m.IsTrue(eval1792)) &&
		   (m.IsTrue(eval1793)) {
			// RHS
			traceRuleApply("FUNC", 1744, "{| rule isInstruction(`sstore_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1745
	// source: ? @?
	// {| rule isInstruction(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sub_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1794, err1794 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1794 != nil {
			return m.NoResult, err1794
		}
		eval1795, err1795 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1795 != nil {
			return m.NoResult, err1795
		}
		eval1796, err1796 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1796 != nil {
			return m.NoResult, err1796
		}
		if ((m.IsTrue(eval1794)) &&
		   (m.IsTrue(eval1795))) &&
		   (m.IsTrue(eval1796)) {
			// RHS
			traceRuleApply("FUNC", 1745, "{| rule isInstruction(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1746
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("CondJumpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCondJumpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1746, "{| rule isInstruction(#KToken(#token(\"CondJumpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1747
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("StoreInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStoreInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1747, "{| rule isInstruction(#KToken(#token(\"StoreInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1748
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("XorInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXorInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1748, "{| rule isInstruction(#KToken(#token(\"XorInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1749
	// source: ? @?
	// {| rule isInstruction(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=byte_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1797, err1797 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1797 != nil {
			return m.NoResult, err1797
		}
		eval1798, err1798 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1798 != nil {
			return m.NoResult, err1798
		}
		eval1799, err1799 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1799 != nil {
			return m.NoResult, err1799
		}
		if ((m.IsTrue(eval1797)) &&
		   (m.IsTrue(eval1798))) &&
		   (m.IsTrue(eval1799)) {
			// RHS
			traceRuleApply("FUNC", 1749, "{| rule isInstruction(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1750
	// source: ? @?
	// {| rule isInstruction(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1800, err1800 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1800 != nil {
			return m.NoResult, err1800
		}
		eval1801, err1801 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1801 != nil {
			return m.NoResult, err1801
		}
		eval1802, err1802 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1802 != nil {
			return m.NoResult, err1802
		}
		eval1803, err1803 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1803 != nil {
			return m.NoResult, err1803
		}
		if (((m.IsTrue(eval1800)) &&
		   (m.IsTrue(eval1801))) &&
		   (m.IsTrue(eval1802))) &&
		   (m.IsTrue(eval1803)) {
			// RHS
			traceRuleApply("FUNC", 1750, "{| rule isInstruction(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1751
	// source: ? @?
	// {| rule isInstruction(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mul_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1804, err1804 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1804 != nil {
			return m.NoResult, err1804
		}
		eval1805, err1805 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1805 != nil {
			return m.NoResult, err1805
		}
		eval1806, err1806 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1806 != nil {
			return m.NoResult, err1806
		}
		if ((m.IsTrue(eval1804)) &&
		   (m.IsTrue(eval1805))) &&
		   (m.IsTrue(eval1806)) {
			// RHS
			traceRuleApply("FUNC", 1751, "{| rule isInstruction(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1752
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("PseudoInstruction","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPseudoInstruction { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1752, "{| rule isInstruction(#KToken(#token(\"PseudoInstruction\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1753
	// source: ? @?
	// {| rule isInstruction(`ECREC_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECRECXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECREC_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1753, "{| rule isInstruction(`ECREC_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1754
	// source: ? @?
	// {| rule isInstruction(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1807, err1807 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1807 != nil {
			return m.NoResult, err1807
		}
		eval1808, err1808 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1808 != nil {
			return m.NoResult, err1808
		}
		eval1809, err1809 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1809 != nil {
			return m.NoResult, err1809
		}
		eval1810, err1810 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1810 != nil {
			return m.NoResult, err1810
		}
		if (((m.IsTrue(eval1807)) &&
		   (m.IsTrue(eval1808))) &&
		   (m.IsTrue(eval1809))) &&
		   (m.IsTrue(eval1810)) {
			// RHS
			traceRuleApply("FUNC", 1754, "{| rule isInstruction(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1755
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("MulInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMulInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1755, "{| rule isInstruction(#KToken(#token(\"MulInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1756
	// source: ? @?
	// {| rule isInstruction(`ECADD_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECADDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECADD_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 1756, "{| rule isInstruction(`ECADD_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1757
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("CreateInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCreateInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1757, "{| rule isInstruction(#KToken(#token(\"CreateInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1758
	// source: ? @?
	// {| rule isInstruction(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperands(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1811, err1811 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err1811 != nil {
			return m.NoResult, err1811
		}
		eval1812, err1812 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1812 != nil {
			return m.NoResult, err1812
		}
		eval1813, err1813 := evalIsOperands( // isOperands(K2)
			varK2,
			config, -1)
		if err1813 != nil {
			return m.NoResult, err1813
		}
		if ((m.IsTrue(eval1811)) &&
		   (m.IsTrue(eval1812))) &&
		   (m.IsTrue(eval1813)) {
			// RHS
			traceRuleApply("FUNC", 1758, "{| rule isInstruction(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperands(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1759
	// source: ? @?
	// {| rule isInstruction(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=bswap_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1814, err1814 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1814 != nil {
			return m.NoResult, err1814
		}
		eval1815, err1815 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1815 != nil {
			return m.NoResult, err1815
		}
		eval1816, err1816 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1816 != nil {
			return m.NoResult, err1816
		}
		if ((m.IsTrue(eval1814)) &&
		   (m.IsTrue(eval1815))) &&
		   (m.IsTrue(eval1816)) {
			// RHS
			traceRuleApply("FUNC", 1759, "{| rule isInstruction(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1760
	// source: ? @?
	// {| rule isInstruction(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval1817, err1817 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1817 != nil {
			return m.NoResult, err1817
		}
		eval1818, err1818 := evalIsGlobalName( // isGlobalName(K1)
			varK1,
			config, -1)
		if err1818 != nil {
			return m.NoResult, err1818
		}
		eval1819, err1819 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1819 != nil {
			return m.NoResult, err1819
		}
		if ((m.IsTrue(eval1817)) &&
		   (m.IsTrue(eval1818))) &&
		   (m.IsTrue(eval1819)) {
			// RHS
			traceRuleApply("FUNC", 1760, "{| rule isInstruction(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1761
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("SLoadInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSLoadInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1761, "{| rule isInstruction(#KToken(#token(\"SLoadInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1762
	// source: ? @?
	// {| rule isInstruction(label(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLabel && len(kapp0.List) == 1 { // label(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1762, "{| rule isInstruction(label(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1763
	// source: ? @?
	// {| rule isInstruction(`retvoid_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetvoidXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `retvoid_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1763, "{| rule isInstruction(`retvoid_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1764
	// source: ? @?
	// {| rule isInstruction(`log_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1820, err1820 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1820 != nil {
			return m.NoResult, err1820
		}
		eval1821, err1821 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err1821 != nil {
			return m.NoResult, err1821
		}
		if (m.IsTrue(eval1820)) &&
		   (m.IsTrue(eval1821)) {
			// RHS
			traceRuleApply("FUNC", 1764, "{| rule isInstruction(`log_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1765
	// source: ? @?
	// {| rule isInstruction(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval1822, err1822 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err1822 != nil {
			return m.NoResult, err1822
		}
		eval1823, err1823 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1823 != nil {
			return m.NoResult, err1823
		}
		eval1824, err1824 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err1824 != nil {
			return m.NoResult, err1824
		}
		eval1825, err1825 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err1825 != nil {
			return m.NoResult, err1825
		}
		if (((m.IsTrue(eval1822)) &&
		   (m.IsTrue(eval1823))) &&
		   (m.IsTrue(eval1824))) &&
		   (m.IsTrue(eval1825)) {
			// RHS
			traceRuleApply("FUNC", 1765, "{| rule isInstruction(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1766
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("AssignInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAssignInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1766, "{| rule isInstruction(#KToken(#token(\"AssignInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1767
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("CmpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCmpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1767, "{| rule isInstruction(#KToken(#token(\"CmpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1768
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("RevertInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortRevertInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1768, "{| rule isInstruction(#KToken(#token(\"RevertInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1769
	// source: ? @?
	// {| rule isInstruction(#KToken(#token("PrecompiledOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPrecompiledOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1769, "{| rule isInstruction(#KToken(#token(\"PrecompiledOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1770
	// source: ? @?
	// {| rule isInstruction(`_=load__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1826, err1826 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err1826 != nil {
			return m.NoResult, err1826
		}
		eval1827, err1827 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err1827 != nil {
			return m.NoResult, err1827
		}
		if (m.IsTrue(eval1826)) &&
		   (m.IsTrue(eval1827)) {
			// RHS
			traceRuleApply("FUNC", 1770, "{| rule isInstruction(`_=load__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1771
	// source: ? @?
	// {| rule isInstruction(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1771, "{| rule isInstruction(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashopenXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.open
	lbl := m.LblXhashopenXlparenXuXcommaXuXrparenXuKXhyphenIO // #open(_,_)_K-IO
	sort := m.SortInt
	if hookRes, hookErr := ioHooks.open(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.open, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashopenXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalInitOriginCell(config m.K, guard int) (m.K, error) {
	// rule #1772
	// source: ? @?
	// {| rule initOriginCell(.KList)=>`<origin>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4c67430e78cf9c595af62d0489b88d7e7decb2e142defd2232c2f3055ad9a804) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1772, "{| rule initOriginCell(.KList)=>`<origin>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c67430e78cf9c595af62d0489b88d7e7decb2e142defd2232c2f3055ad9a804) initializer()] |}")
	return &m.KApply{Label: m.LblXltoriginXgt, List: []m.K{ // as-is <origin>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitOriginCell K = evalInitOriginCell(m.InternedBottom)

func evalGXstarXlparenXuXcommaXuXcommaXuXrparenXuIELEXhyphenGAS(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1773
	// source: iele-gas.k @825
	// {| rule `G*(_,_,_)_IELE-GAS`(GAVAIL,GLIMIT,REFUND)=>`_+Int_`(GAVAIL,`minInt(_,_)_INT`(`_/Int__INT`(`_-Int__INT`(GLIMIT,GAVAIL),#token("2","Int")),REFUND)) requires `_andBool_`(`_andBool_`(isInt(REFUND),isInt(GAVAIL)),isInt(GLIMIT)) ensures #token("true","Bool") [UNIQUE_ID(f7975ab6ffe7133cdaf7eceefbb89c6d6f56fc5b5ac9fcd47071acc01a56ea67) contentStartColumn(10) contentStartLine(825) org.kframework.attributes.Location(Location(825,10,825,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varGAVAIL, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varGLIMIT, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varREFUND, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(REFUND) && isInt(GAVAIL) && isInt(GLIMIT)
				// RHS
				traceRuleApply("FUNC", 1773, "{| rule `G*(_,_,_)_IELE-GAS`(GAVAIL,GLIMIT,REFUND)=>`_+Int_`(GAVAIL,`minInt(_,_)_INT`(`_/Int__INT`(`_-Int__INT`(GLIMIT,GAVAIL),#token(\"2\",\"Int\")),REFUND)) requires `_andBool_`(`_andBool_`(isInt(REFUND),isInt(GAVAIL)),isInt(GLIMIT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f7975ab6ffe7133cdaf7eceefbb89c6d6f56fc5b5ac9fcd47071acc01a56ea67) contentStartColumn(10) contentStartLine(825) org.kframework.attributes.Location(Location(825,10,825,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1831, err1831 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(GLIMIT,GAVAIL)
					varGLIMIT,
					varGAVAIL,
					config, -1)
				if err1831 != nil {
					return m.NoResult, err1831
				}
				eval1830, err1830 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_-Int__INT`(GLIMIT,GAVAIL),#token("2","Int"))
					eval1831,
					/* rhs KToken */ m.NewIntFromString("2"),
					config, -1)
				if err1830 != nil {
					return m.NoResult, err1830
				}
				eval1829, err1829 := evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(`_/Int__INT`(`_-Int__INT`(GLIMIT,GAVAIL),#token("2","Int")),REFUND)
					eval1830,
					varREFUND,
					config, -1)
				if err1829 != nil {
					return m.NoResult, err1829
				}
				eval1828, err1828 := evalXuXplusIntXu( // `_+Int_`(GAVAIL,`minInt(_,_)_INT`(`_/Int__INT`(`_-Int__INT`(GLIMIT,GAVAIL),#token("2","Int")),REFUND))
					varGAVAIL,
					eval1829,
					config, -1)
				if err1828 != nil {
					return m.NoResult, err1828
				}
				return eval1828, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalGXstarXlparenXuXcommaXuXcommaXuXrparenXuIELEXhyphenGAS", args: []m.K{c1, c2, c3}}
}

func evalXuXpipeXhyphenXgtXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.element
	lbl := m.LblXuXpipeXhyphenXgtXu // _|->_
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.element(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXpipeXhyphenXgtXu", args: []m.K{c1, c2}}
}

func evalInitFuncCell(config m.K, guard int) (m.K, error) {
	// rule #1774
	// source: ? @?
	// {| rule initFuncCell(.KList)=>`<func>`(#token("deposit","IeleName")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1a474b318ba8e9ccef22abeeae84211de52e06f5c9ed0a271aeb0e445dedeeab) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1774, "{| rule initFuncCell(.KList)=>`<func>`(#token(\"deposit\",\"IeleName\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a474b318ba8e9ccef22abeeae84211de52e06f5c9ed0a271aeb0e445dedeeab) initializer()] |}")
	return &m.KApply{Label: m.LblXltfuncXgt, List: []m.K{ // as-is <func>
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
	}}, nil

}

//var constInitFuncCell K = evalInitFuncCell(m.InternedBottom)

func evalString2IeleName(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.string2token
	lbl := m.LblString2IeleName // String2IeleName
	sort := m.SortIeleName
	if hookRes, hookErr := stringHooks.string2token(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.string2token, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2IeleName", args: []m.K{c}}
}

func evalXhashopWidth(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1775
	// source: iele-binary.k @333
	// {| rule #opWidth(OP,NBITS)=>`_+Int_`(#opCodeWidth(OP),ceilDiv(`_*Int__INT`(NBITS,#numArgs(OP)),#token("8","Int"))) requires `_andBool_`(isInt(NBITS),isOpCode(OP)) ensures #token("true","Bool") [UNIQUE_ID(9ce435c72672d9cb921a6b5205f9103f97dab533b1ac16021c1139d83ef40d98) contentStartColumn(10) contentStartLine(333) org.kframework.attributes.Location(Location(333,10,333,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c1 // lhs KVariable OP
		if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval1832, err1832 := evalIsOpCode( // isOpCode(OP)
				varOP,
				config, -1)
			if err1832 != nil {
				return m.NoResult, err1832
			}
			if /* rhs precomputed isInt(NBITS) */ /* && */
			   m.IsTrue(eval1832) {
				// RHS
				traceRuleApply("FUNC", 1775, "{| rule #opWidth(OP,NBITS)=>`_+Int_`(#opCodeWidth(OP),ceilDiv(`_*Int__INT`(NBITS,#numArgs(OP)),#token(\"8\",\"Int\"))) requires `_andBool_`(isInt(NBITS),isOpCode(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9ce435c72672d9cb921a6b5205f9103f97dab533b1ac16021c1139d83ef40d98) contentStartColumn(10) contentStartLine(333) org.kframework.attributes.Location(Location(333,10,333,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval1834, err1834 := evalXhashopCodeWidth( // #opCodeWidth(OP)
					varOP,
					config, -1)
				if err1834 != nil {
					return m.NoResult, err1834
				}
				eval1837, err1837 := evalXhashnumArgs( // #numArgs(OP)
					varOP,
					config, -1)
				if err1837 != nil {
					return m.NoResult, err1837
				}
				eval1836, err1836 := evalXuXstarIntXuXuINT( // `_*Int__INT`(NBITS,#numArgs(OP))
					varNBITS,
					eval1837,
					config, -1)
				if err1836 != nil {
					return m.NoResult, err1836
				}
				eval1835, err1835 := evalCeilDiv( // ceilDiv(`_*Int__INT`(NBITS,#numArgs(OP)),#token("8","Int"))
					eval1836,
					/* rhs KToken */ m.NewIntFromString("8"),
					config, -1)
				if err1835 != nil {
					return m.NoResult, err1835
				}
				eval1833, err1833 := evalXuXplusIntXu( // `_+Int_`(#opCodeWidth(OP),ceilDiv(`_*Int__INT`(NBITS,#numArgs(OP)),#token("8","Int")))
					eval1834,
					eval1835,
					config, -1)
				if err1833 != nil {
					return m.NoResult, err1833
				}
				return eval1833, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashopWidth", args: []m.K{c1, c2}}
}

func evalXhashparseWord(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1776
	// source: data.k @442
	// {| rule #parseWord(#token("\"\"","String"))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8bfa60143877e7943263708ed8a7c746297d54743be539e57148c039ec2a4e83) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("")) { // #token("\"\"","String")
		// RHS
		traceRuleApply("FUNC", 1776, "{| rule #parseWord(#token(\"\\\"\\\"\",\"String\"))=>#token(\"0\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8bfa60143877e7943263708ed8a7c746297d54743be539e57148c039ec2a4e83) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewIntFromString("0"), nil
	}

	// rule #1777
	// source: data.k @443
	// {| rule #parseWord(S)=>#parseHexWord(S) requires `_andBool_`(isString(S),`_andBool_`(`_>=Int__INT`(lengthString(S),#token("2","Int")),`_==String__STRING`(substrString(S,#token("0","Int"),#token("2","Int")),#token("\"0x\"","String")))) ensures #token("true","Bool") [UNIQUE_ID(a2077a786fd85043bd8a86f6a30df1cf9931d599c67b3a97d1a00c6ad04ef9fa) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,121)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES
		eval1839, err1839 := evalLengthString( // lengthString(S)
			varS,
			config, -1)
		if err1839 != nil {
			return m.NoResult, err1839
		}
		eval1838, err1838 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(lengthString(S),#token("2","Int"))
			eval1839,
			/* rhs KToken */ m.NewIntFromString("2"),
			config, -1)
		if err1838 != nil {
			return m.NoResult, err1838
		}
		eval1841, err1841 := evalSubstrString( // substrString(S,#token("0","Int"),#token("2","Int"))
			varS,
			/* rhs KToken */ m.NewIntFromString("0"),
			/* rhs KToken */ m.NewIntFromString("2"),
			config, -1)
		if err1841 != nil {
			return m.NoResult, err1841
		}
		eval1840, err1840 := evalXuXeqXeqStringXuXuSTRING( // `_==String__STRING`(substrString(S,#token("0","Int"),#token("2","Int")),#token("\"0x\"","String"))
			eval1841,
			/* rhs KToken */ m.NewString("0x"),
			config, -1)
		if err1840 != nil {
			return m.NoResult, err1840
		}
		if /* rhs precomputed isString(S) */ /* && */
		   (m.IsTrue(eval1838)) &&
		   (m.IsTrue(eval1840)) {
			// RHS
			traceRuleApply("FUNC", 1777, "{| rule #parseWord(S)=>#parseHexWord(S) requires `_andBool_`(isString(S),`_andBool_`(`_>=Int__INT`(lengthString(S),#token(\"2\",\"Int\")),`_==String__STRING`(substrString(S,#token(\"0\",\"Int\"),#token(\"2\",\"Int\")),#token(\"\\\"0x\\\"\",\"String\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a2077a786fd85043bd8a86f6a30df1cf9931d599c67b3a97d1a00c6ad04ef9fa) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,121)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval1842, err1842 := evalXhashparseHexWord( // #parseHexWord(S)
				varS,
				config, -1)
			if err1842 != nil {
				return m.NoResult, err1842
			}
			return eval1842, nil
		}
	}

	// rule #1778
	// source: data.k @444
	// {| rule #parseWord(S)=>`String2Int`(S) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(c4292fcc71f306af58ef5f81af9f50deb9734a08eca47fa325097a1da5a63c17) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 1778, "{| rule #parseWord(S)=>`String2Int`(S) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c4292fcc71f306af58ef5f81af9f50deb9734a08eca47fa325097a1da5a63c17) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
		eval1843, err1843 := evalString2Int( // `String2Int`(S)
			varS,
			config, -1)
		if err1843 != nil {
			return m.NoResult, err1843
		}
		return eval1843, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseWord", args: []m.K{c}}
}

func evalXhashprecompiledXuIELEXhyphenPRECOMPILED(config m.K, guard int) (m.K, error) {
	// rule #1779
	// source: iele.k @1573
	// {| rule `#precompiled_IELE-PRECOMPILED`(.KList)=>`<program>`(`<functions>`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecadd","IeleName")),`<function>`(`<funcId>`(#token("iele.ecadd","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecmul","IeleName")),`<function>`(`<funcId>`(#token("iele.ecmul","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECMUL_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<function>`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECPAIRING_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))),`<funcIds>`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName"))),`SetItem`(#token("iele.ecpairing","IeleName")))),`<funcLabels>`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))),`_|->_`(#token("4","Int"),#token("iele.id","IeleName"))),`_|->_`(#token("5","Int"),#token("iele.ecadd","IeleName"))),`_|->_`(#token("6","Int"),#token("iele.ecmul","IeleName"))),`_|->_`(#token("7","Int"),#token("iele.ecpairing","IeleName")))),`<exported>`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName"))),`SetItem`(#token("iele.ecpairing","IeleName")))),initProgramSizeCell(.KList),initContractCodeCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(388f28fe0586e27edbdff58f16c984d8d42a5091b1b6f54d49cccd94cfe179d1) contentStartColumn(10) contentStartLine(1573) org.kframework.attributes.Location(Location(1573,10,1612,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1779, "{| rule `#precompiled_IELE-PRECOMPILED`(.KList)=>`<program>`(`<functions>`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token(\"iele.ecrec\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.ecrec\",\"IeleName\")),`<nparams>`(#token(\"4\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.sha256\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.sha256\",\"IeleName\")),`<nparams>`(#token(\"2\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.rip160\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.rip160\",\"IeleName\")),`<nparams>`(#token(\"2\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.id\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.id\",\"IeleName\")),`<nparams>`(#token(\"1\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.ecadd\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.ecadd\",\"IeleName\")),`<nparams>`(#token(\"4\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.ecmul\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.ecmul\",\"IeleName\")),`<nparams>`(#token(\"3\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECMUL_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token(\"iele.ecpairing\",\"IeleName\")),`<function>`(`<funcId>`(#token(\"iele.ecpairing\",\"IeleName\")),`<nparams>`(#token(\"3\",\"Int\")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECPAIRING_IELE-PRECOMPILED`(.KList),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))),`<funcIds>`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token(\"iele.ecrec\",\"IeleName\")),`SetItem`(#token(\"iele.sha256\",\"IeleName\"))),`SetItem`(#token(\"iele.rip160\",\"IeleName\"))),`SetItem`(#token(\"iele.id\",\"IeleName\"))),`SetItem`(#token(\"iele.ecadd\",\"IeleName\"))),`SetItem`(#token(\"iele.ecmul\",\"IeleName\"))),`SetItem`(#token(\"iele.ecpairing\",\"IeleName\")))),`<funcLabels>`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token(\"1\",\"Int\"),#token(\"iele.ecrec\",\"IeleName\")),`_|->_`(#token(\"2\",\"Int\"),#token(\"iele.sha256\",\"IeleName\"))),`_|->_`(#token(\"3\",\"Int\"),#token(\"iele.rip160\",\"IeleName\"))),`_|->_`(#token(\"4\",\"Int\"),#token(\"iele.id\",\"IeleName\"))),`_|->_`(#token(\"5\",\"Int\"),#token(\"iele.ecadd\",\"IeleName\"))),`_|->_`(#token(\"6\",\"Int\"),#token(\"iele.ecmul\",\"IeleName\"))),`_|->_`(#token(\"7\",\"Int\"),#token(\"iele.ecpairing\",\"IeleName\")))),`<exported>`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token(\"iele.ecrec\",\"IeleName\")),`SetItem`(#token(\"iele.sha256\",\"IeleName\"))),`SetItem`(#token(\"iele.rip160\",\"IeleName\"))),`SetItem`(#token(\"iele.id\",\"IeleName\"))),`SetItem`(#token(\"iele.ecadd\",\"IeleName\"))),`SetItem`(#token(\"iele.ecmul\",\"IeleName\"))),`SetItem`(#token(\"iele.ecpairing\",\"IeleName\")))),initProgramSizeCell(.KList),initContractCodeCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(388f28fe0586e27edbdff58f16c984d8d42a5091b1b6f54d49cccd94cfe179d1) contentStartColumn(10) contentStartLine(1573) org.kframework.attributes.Location(Location(1573,10,1612,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval1851, err1851 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1851 != nil {
		return m.NoResult, err1851
	}
	eval1852, err1852 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1852 != nil {
		return m.NoResult, err1852
	}
	eval1850, err1850 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("4"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblECRECXuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is ECREC_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1851,
			eval1852,
		}},
		config, -1)
	if err1850 != nil {
		return m.NoResult, err1850
	}
	eval1854, err1854 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1854 != nil {
		return m.NoResult, err1854
	}
	eval1855, err1855 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1855 != nil {
		return m.NoResult, err1855
	}
	eval1853, err1853 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("2"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblSHA256XuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is SHA256_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1854,
			eval1855,
		}},
		config, -1)
	if err1853 != nil {
		return m.NoResult, err1853
	}
	eval1849, err1849 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1850,
		eval1853,
		config, -1)
	if err1849 != nil {
		return m.NoResult, err1849
	}
	eval1857, err1857 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1857 != nil {
		return m.NoResult, err1857
	}
	eval1858, err1858 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1858 != nil {
		return m.NoResult, err1858
	}
	eval1856, err1856 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("2"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblRIP160XuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is RIP160_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1857,
			eval1858,
		}},
		config, -1)
	if err1856 != nil {
		return m.NoResult, err1856
	}
	eval1848, err1848 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1849,
		eval1856,
		config, -1)
	if err1848 != nil {
		return m.NoResult, err1848
	}
	eval1860, err1860 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1860 != nil {
		return m.NoResult, err1860
	}
	eval1861, err1861 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1861 != nil {
		return m.NoResult, err1861
	}
	eval1859, err1859 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.id"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.id"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("1"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblIDXuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is ID_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1860,
			eval1861,
		}},
		config, -1)
	if err1859 != nil {
		return m.NoResult, err1859
	}
	eval1847, err1847 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1848,
		eval1859,
		config, -1)
	if err1847 != nil {
		return m.NoResult, err1847
	}
	eval1863, err1863 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1863 != nil {
		return m.NoResult, err1863
	}
	eval1864, err1864 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1864 != nil {
		return m.NoResult, err1864
	}
	eval1862, err1862 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.ecadd","IeleName")),`<function>`(`<funcId>`(#token("iele.ecadd","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("4"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblECADDXuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is ECADD_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1863,
			eval1864,
		}},
		config, -1)
	if err1862 != nil {
		return m.NoResult, err1862
	}
	eval1846, err1846 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecadd","IeleName")),`<function>`(`<funcId>`(#token("iele.ecadd","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1847,
		eval1862,
		config, -1)
	if err1846 != nil {
		return m.NoResult, err1846
	}
	eval1866, err1866 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1866 != nil {
		return m.NoResult, err1866
	}
	eval1867, err1867 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1867 != nil {
		return m.NoResult, err1867
	}
	eval1865, err1865 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.ecmul","IeleName")),`<function>`(`<funcId>`(#token("iele.ecmul","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECMUL_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("3"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblECMULXuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is ECMUL_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1866,
			eval1867,
		}},
		config, -1)
	if err1865 != nil {
		return m.NoResult, err1865
	}
	eval1845, err1845 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecadd","IeleName")),`<function>`(`<funcId>`(#token("iele.ecadd","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecmul","IeleName")),`<function>`(`<funcId>`(#token("iele.ecmul","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECMUL_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1846,
		eval1865,
		config, -1)
	if err1845 != nil {
		return m.NoResult, err1845
	}
	eval1869, err1869 := evalInitJumpTableCell(config, -1) // initJumpTableCell(.KList)
	if err1869 != nil {
		return m.NoResult, err1869
	}
	eval1870, err1870 := evalInitNregsCell(config, -1) // initNregsCell(.KList)
	if err1870 != nil {
		return m.NoResult, err1870
	}
	eval1868, err1868 := evalFunctionCellMapItem( // `FunctionCellMapItem`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<function>`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECPAIRING_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))
		&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
			/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"},
		}},
		&m.KApply{Label: m.LblXltfunctionXgt, List: []m.K{ // as-is <function>
			&m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"},
			}},
			&m.KApply{Label: m.LblXltnparamsXgt, List: []m.K{ // as-is <nparams>
				/* rhs KToken */ m.NewIntFromString("3"),
			}},
			&m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
				&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
					&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
						&m.KApply{Label: m.LblECPAIRINGXuIELEXhyphenPRECOMPILED, List: []m.K{ // as-is ECPAIRING_IELE-PRECOMPILED
						}},
						&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
					}},
				}},
			}},
			eval1869,
			eval1870,
		}},
		config, -1)
	if err1868 != nil {
		return m.NoResult, err1868
	}
	eval1844, err1844 := evalXuFunctionCellMapXu( // `_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`_FunctionCellMap_`(`FunctionCellMapItem`(`<funcId>`(#token("iele.ecrec","IeleName")),`<function>`(`<funcId>`(#token("iele.ecrec","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECREC_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))),`FunctionCellMapItem`(`<funcId>`(#token("iele.sha256","IeleName")),`<function>`(`<funcId>`(#token("iele.sha256","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`SHA256_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.rip160","IeleName")),`<function>`(`<funcId>`(#token("iele.rip160","IeleName")),`<nparams>`(#token("2","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`RIP160_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.id","IeleName")),`<function>`(`<funcId>`(#token("iele.id","IeleName")),`<nparams>`(#token("1","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ID_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecadd","IeleName")),`<function>`(`<funcId>`(#token("iele.ecadd","IeleName")),`<nparams>`(#token("4","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECADD_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecmul","IeleName")),`<function>`(`<funcId>`(#token("iele.ecmul","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECMUL_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList)))),`FunctionCellMapItem`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<function>`(`<funcId>`(#token("iele.ecpairing","IeleName")),`<nparams>`(#token("3","Int")),`<instructions>`(`___IELE-COMMON`(instructionList(`ECPAIRING_IELE-PRECOMPILED`(.KList),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),initJumpTableCell(.KList),initNregsCell(.KList))))
		eval1845,
		eval1868,
		config, -1)
	if err1844 != nil {
		return m.NoResult, err1844
	}
	eval1877, err1877 := evalSetItem( // `SetItem`(#token("iele.ecrec","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"},
		config, -1)
	if err1877 != nil {
		return m.NoResult, err1877
	}
	eval1878, err1878 := evalSetItem( // `SetItem`(#token("iele.sha256","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"},
		config, -1)
	if err1878 != nil {
		return m.NoResult, err1878
	}
	eval1876, err1876 := evalXuSetXu( // `_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName")))
		eval1877,
		eval1878,
		config, -1)
	if err1876 != nil {
		return m.NoResult, err1876
	}
	eval1879, err1879 := evalSetItem( // `SetItem`(#token("iele.rip160","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"},
		config, -1)
	if err1879 != nil {
		return m.NoResult, err1879
	}
	eval1875, err1875 := evalXuSetXu( // `_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName")))
		eval1876,
		eval1879,
		config, -1)
	if err1875 != nil {
		return m.NoResult, err1875
	}
	eval1880, err1880 := evalSetItem( // `SetItem`(#token("iele.id","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.id"},
		config, -1)
	if err1880 != nil {
		return m.NoResult, err1880
	}
	eval1874, err1874 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName")))
		eval1875,
		eval1880,
		config, -1)
	if err1874 != nil {
		return m.NoResult, err1874
	}
	eval1881, err1881 := evalSetItem( // `SetItem`(#token("iele.ecadd","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"},
		config, -1)
	if err1881 != nil {
		return m.NoResult, err1881
	}
	eval1873, err1873 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName")))
		eval1874,
		eval1881,
		config, -1)
	if err1873 != nil {
		return m.NoResult, err1873
	}
	eval1882, err1882 := evalSetItem( // `SetItem`(#token("iele.ecmul","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"},
		config, -1)
	if err1882 != nil {
		return m.NoResult, err1882
	}
	eval1872, err1872 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName")))
		eval1873,
		eval1882,
		config, -1)
	if err1872 != nil {
		return m.NoResult, err1872
	}
	eval1883, err1883 := evalSetItem( // `SetItem`(#token("iele.ecpairing","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"},
		config, -1)
	if err1883 != nil {
		return m.NoResult, err1883
	}
	eval1871, err1871 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName"))),`SetItem`(#token("iele.ecpairing","IeleName")))
		eval1872,
		eval1883,
		config, -1)
	if err1871 != nil {
		return m.NoResult, err1871
	}
	eval1890, err1890 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName"))
		/* rhs KToken */ m.NewIntFromString("1"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"},
		config, -1)
	if err1890 != nil {
		return m.NoResult, err1890
	}
	eval1891, err1891 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))
		/* rhs KToken */ m.NewIntFromString("2"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"},
		config, -1)
	if err1891 != nil {
		return m.NoResult, err1891
	}
	eval1889, err1889 := evalXuMapXu( // `_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName")))
		eval1890,
		eval1891,
		config, -1)
	if err1889 != nil {
		return m.NoResult, err1889
	}
	eval1892, err1892 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))
		/* rhs KToken */ m.NewIntFromString("3"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"},
		config, -1)
	if err1892 != nil {
		return m.NoResult, err1892
	}
	eval1888, err1888 := evalXuMapXu( // `_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName")))
		eval1889,
		eval1892,
		config, -1)
	if err1888 != nil {
		return m.NoResult, err1888
	}
	eval1893, err1893 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("4","Int"),#token("iele.id","IeleName"))
		/* rhs KToken */ m.NewIntFromString("4"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.id"},
		config, -1)
	if err1893 != nil {
		return m.NoResult, err1893
	}
	eval1887, err1887 := evalXuMapXu( // `_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))),`_|->_`(#token("4","Int"),#token("iele.id","IeleName")))
		eval1888,
		eval1893,
		config, -1)
	if err1887 != nil {
		return m.NoResult, err1887
	}
	eval1894, err1894 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("5","Int"),#token("iele.ecadd","IeleName"))
		/* rhs KToken */ m.NewIntFromString("5"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"},
		config, -1)
	if err1894 != nil {
		return m.NoResult, err1894
	}
	eval1886, err1886 := evalXuMapXu( // `_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))),`_|->_`(#token("4","Int"),#token("iele.id","IeleName"))),`_|->_`(#token("5","Int"),#token("iele.ecadd","IeleName")))
		eval1887,
		eval1894,
		config, -1)
	if err1886 != nil {
		return m.NoResult, err1886
	}
	eval1895, err1895 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("6","Int"),#token("iele.ecmul","IeleName"))
		/* rhs KToken */ m.NewIntFromString("6"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"},
		config, -1)
	if err1895 != nil {
		return m.NoResult, err1895
	}
	eval1885, err1885 := evalXuMapXu( // `_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))),`_|->_`(#token("4","Int"),#token("iele.id","IeleName"))),`_|->_`(#token("5","Int"),#token("iele.ecadd","IeleName"))),`_|->_`(#token("6","Int"),#token("iele.ecmul","IeleName")))
		eval1886,
		eval1895,
		config, -1)
	if err1885 != nil {
		return m.NoResult, err1885
	}
	eval1896, err1896 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("7","Int"),#token("iele.ecpairing","IeleName"))
		/* rhs KToken */ m.NewIntFromString("7"),
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"},
		config, -1)
	if err1896 != nil {
		return m.NoResult, err1896
	}
	eval1884, err1884 := evalXuMapXu( // `_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("1","Int"),#token("iele.ecrec","IeleName")),`_|->_`(#token("2","Int"),#token("iele.sha256","IeleName"))),`_|->_`(#token("3","Int"),#token("iele.rip160","IeleName"))),`_|->_`(#token("4","Int"),#token("iele.id","IeleName"))),`_|->_`(#token("5","Int"),#token("iele.ecadd","IeleName"))),`_|->_`(#token("6","Int"),#token("iele.ecmul","IeleName"))),`_|->_`(#token("7","Int"),#token("iele.ecpairing","IeleName")))
		eval1885,
		eval1896,
		config, -1)
	if err1884 != nil {
		return m.NoResult, err1884
	}
	eval1903, err1903 := evalSetItem( // `SetItem`(#token("iele.ecrec","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"},
		config, -1)
	if err1903 != nil {
		return m.NoResult, err1903
	}
	eval1904, err1904 := evalSetItem( // `SetItem`(#token("iele.sha256","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"},
		config, -1)
	if err1904 != nil {
		return m.NoResult, err1904
	}
	eval1902, err1902 := evalXuSetXu( // `_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName")))
		eval1903,
		eval1904,
		config, -1)
	if err1902 != nil {
		return m.NoResult, err1902
	}
	eval1905, err1905 := evalSetItem( // `SetItem`(#token("iele.rip160","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"},
		config, -1)
	if err1905 != nil {
		return m.NoResult, err1905
	}
	eval1901, err1901 := evalXuSetXu( // `_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName")))
		eval1902,
		eval1905,
		config, -1)
	if err1901 != nil {
		return m.NoResult, err1901
	}
	eval1906, err1906 := evalSetItem( // `SetItem`(#token("iele.id","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.id"},
		config, -1)
	if err1906 != nil {
		return m.NoResult, err1906
	}
	eval1900, err1900 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName")))
		eval1901,
		eval1906,
		config, -1)
	if err1900 != nil {
		return m.NoResult, err1900
	}
	eval1907, err1907 := evalSetItem( // `SetItem`(#token("iele.ecadd","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"},
		config, -1)
	if err1907 != nil {
		return m.NoResult, err1907
	}
	eval1899, err1899 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName")))
		eval1900,
		eval1907,
		config, -1)
	if err1899 != nil {
		return m.NoResult, err1899
	}
	eval1908, err1908 := evalSetItem( // `SetItem`(#token("iele.ecmul","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"},
		config, -1)
	if err1908 != nil {
		return m.NoResult, err1908
	}
	eval1898, err1898 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName")))
		eval1899,
		eval1908,
		config, -1)
	if err1898 != nil {
		return m.NoResult, err1898
	}
	eval1909, err1909 := evalSetItem( // `SetItem`(#token("iele.ecpairing","IeleName"))
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"},
		config, -1)
	if err1909 != nil {
		return m.NoResult, err1909
	}
	eval1897, err1897 := evalXuSetXu( // `_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`_Set_`(`SetItem`(#token("iele.ecrec","IeleName")),`SetItem`(#token("iele.sha256","IeleName"))),`SetItem`(#token("iele.rip160","IeleName"))),`SetItem`(#token("iele.id","IeleName"))),`SetItem`(#token("iele.ecadd","IeleName"))),`SetItem`(#token("iele.ecmul","IeleName"))),`SetItem`(#token("iele.ecpairing","IeleName")))
		eval1898,
		eval1909,
		config, -1)
	if err1897 != nil {
		return m.NoResult, err1897
	}
	eval1910, err1910 := evalInitProgramSizeCell(config, -1) // initProgramSizeCell(.KList)
	if err1910 != nil {
		return m.NoResult, err1910
	}
	eval1911, err1911 := evalInitContractCodeCell(config, -1) // initContractCodeCell(.KList)
	if err1911 != nil {
		return m.NoResult, err1911
	}
	return &m.KApply{Label: m.LblXltprogramXgt, List: []m.K{ // as-is <program>
		&m.KApply{Label: m.LblXltfunctionsXgt, List: []m.K{ // as-is <functions>
			eval1844,
		}},
		&m.KApply{Label: m.LblXltfuncIDsXgt, List: []m.K{ // as-is <funcIds>
			eval1871,
		}},
		&m.KApply{Label: m.LblXltfuncLabelsXgt, List: []m.K{ // as-is <funcLabels>
			eval1884,
		}},
		&m.KApply{Label: m.LblXltexportedXgt, List: []m.K{ // as-is <exported>
			eval1897,
		}},
		eval1910,
		eval1911,
	}}, nil

}

//var constXhashprecompiledXuIELEXhyphenPRECOMPILED K = evalXhashprecompiledXuIELEXhyphenPRECOMPILED(m.InternedBottom)

func evalXhashdasmFunctions(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #1780
	// source: iele-binary.k @172
	// {| rule #dasmFunctions(`_:__IELE-DATA`(_59,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,FUNCS,NAME)=>#dasmFunction(#token("false","Bool"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),WS,NBITS,FUNCS,`.List{"instructionList"}`(.KList),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isMap(FUNCS)),isInt(NBITS)),isInt(W3)),`_==Int_`(_59,#token("103","Int"))) ensures #token("true","Bool") [UNIQUE_ID(56b2d2df48960b1ee1d6ccac0c57fc4d9100cc079cc167c5026eefde32cee018) contentStartColumn(10) contentStartLine(172) org.kframework.attributes.Location(Location(172,10,172,236)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_59,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu59, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
												if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
													varNAME := c4 // lhs KVariable NAME
													// REQUIRES
													eval1912, err1912 := evalIsWordStack( // isWordStack(WS)
														varWS,
														config, -1)
													if err1912 != nil {
														return m.NoResult, err1912
													}
													eval1913, err1913 := evalIsIeleName( // isIeleName(NAME)
														varNAME,
														config, -1)
													if err1913 != nil {
														return m.NoResult, err1913
													}
													eval1914, err1914 := evalXuXeqXeqIntXu( // `_==Int_`(_59,#token("103","Int"))
														varXu59,
														/* rhs KToken */ m.NewIntFromString("103"),
														config, -1)
													if err1914 != nil {
														return m.NoResult, err1914
													}
													if ((/* rhs precomputed isInt(W4) */ /* && */
													   m.IsTrue(eval1912)) &&
													   (m.IsTrue(eval1913)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
													   (m.IsTrue(eval1914)) {
														// RHS
														traceRuleApply("FUNC", 1780, "{| rule #dasmFunctions(`_:__IELE-DATA`(_59,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,FUNCS,NAME)=>#dasmFunction(#token(\"false\",\"Bool\"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4),WS,NBITS,FUNCS,`.List{\"instructionList\"}`(.KList),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isMap(FUNCS)),isInt(NBITS)),isInt(W3)),`_==Int_`(_59,#token(\"103\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(56b2d2df48960b1ee1d6ccac0c57fc4d9100cc079cc167c5026eefde32cee018) contentStartColumn(10) contentStartLine(172) org.kframework.attributes.Location(Location(172,10,172,236)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
														eval1919, err1919 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
															varW1,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1919 != nil {
															return m.NoResult, err1919
														}
														eval1918, err1918 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
															eval1919,
															varW2,
															config, -1)
														if err1918 != nil {
															return m.NoResult, err1918
														}
														eval1921, err1921 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
															varW1,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1921 != nil {
															return m.NoResult, err1921
														}
														eval1920, err1920 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
															eval1921,
															varW2,
															config, -1)
														if err1920 != nil {
															return m.NoResult, err1920
														}
														eval1917, err1917 := evalMapXcolonlookupOrDefault( // `Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))
															varFUNCS,
															eval1918,
															eval1920,
															config, -1)
														if err1917 != nil {
															return m.NoResult, err1917
														}
														eval1916, err1916 := evalGetIeleName( // getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)))
															eval1917,
															config, -1)
														if err1916 != nil {
															return m.NoResult, err1916
														}
														eval1923, err1923 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
															varW3,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1923 != nil {
															return m.NoResult, err1923
														}
														eval1922, err1922 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
															eval1923,
															varW4,
															config, -1)
														if err1922 != nil {
															return m.NoResult, err1922
														}
														eval1915, err1915 := evalXhashdasmFunction( // #dasmFunction(#token("false","Bool"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),WS,NBITS,FUNCS,`.List{"instructionList"}`(.KList),.K)
															/* rhs KToken */ m.BoolFalse,
															eval1916,
															varNAME,
															eval1922,
															varWS,
															varNBITS,
															varFUNCS,
															&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
															}},
															m.EmptyKSequence,
															config, -1)
														if err1915 != nil {
															return m.NoResult, err1915
														}
														return eval1915, nil
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1781
	// source: iele-binary.k @173
	// {| rule #dasmFunctions(`_:__IELE-DATA`(_52,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,FUNCS,NAME)=>#dasmFunction(#token("true","Bool"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),WS,NBITS,FUNCS,`.List{"instructionList"}`(.KList),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isMap(FUNCS)),isInt(NBITS)),isInt(W3)),`_==Int_`(_52,#token("104","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ac1cf97aee0016c2399461698b4696f1dc09b1c1261d10f206e152f2dbcfb8d9) contentStartColumn(10) contentStartLine(173) org.kframework.attributes.Location(Location(173,10,173,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_52,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu52, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
												if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
													varNAME := c4 // lhs KVariable NAME
													// REQUIRES
													eval1924, err1924 := evalIsWordStack( // isWordStack(WS)
														varWS,
														config, -1)
													if err1924 != nil {
														return m.NoResult, err1924
													}
													eval1925, err1925 := evalIsIeleName( // isIeleName(NAME)
														varNAME,
														config, -1)
													if err1925 != nil {
														return m.NoResult, err1925
													}
													eval1926, err1926 := evalXuXeqXeqIntXu( // `_==Int_`(_52,#token("104","Int"))
														varXu52,
														/* rhs KToken */ m.NewIntFromString("104"),
														config, -1)
													if err1926 != nil {
														return m.NoResult, err1926
													}
													if ((/* rhs precomputed isInt(W4) */ /* && */
													   m.IsTrue(eval1924)) &&
													   (m.IsTrue(eval1925)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
													   (m.IsTrue(eval1926)) {
														// RHS
														traceRuleApply("FUNC", 1781, "{| rule #dasmFunctions(`_:__IELE-DATA`(_52,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))),NBITS,FUNCS,NAME)=>#dasmFunction(#token(\"true\",\"Bool\"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4),WS,NBITS,FUNCS,`.List{\"instructionList\"}`(.KList),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isMap(FUNCS)),isInt(NBITS)),isInt(W3)),`_==Int_`(_52,#token(\"104\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ac1cf97aee0016c2399461698b4696f1dc09b1c1261d10f206e152f2dbcfb8d9) contentStartColumn(10) contentStartLine(173) org.kframework.attributes.Location(Location(173,10,173,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
														eval1931, err1931 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
															varW1,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1931 != nil {
															return m.NoResult, err1931
														}
														eval1930, err1930 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
															eval1931,
															varW2,
															config, -1)
														if err1930 != nil {
															return m.NoResult, err1930
														}
														eval1933, err1933 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
															varW1,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1933 != nil {
															return m.NoResult, err1933
														}
														eval1932, err1932 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
															eval1933,
															varW2,
															config, -1)
														if err1932 != nil {
															return m.NoResult, err1932
														}
														eval1929, err1929 := evalMapXcolonlookupOrDefault( // `Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))
															varFUNCS,
															eval1930,
															eval1932,
															config, -1)
														if err1929 != nil {
															return m.NoResult, err1929
														}
														eval1928, err1928 := evalGetIeleName( // getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)))
															eval1929,
															config, -1)
														if err1928 != nil {
															return m.NoResult, err1928
														}
														eval1935, err1935 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
															varW3,
															/* rhs KToken */ m.NewIntFromString("256"),
															config, -1)
														if err1935 != nil {
															return m.NoResult, err1935
														}
														eval1934, err1934 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
															eval1935,
															varW4,
															config, -1)
														if err1934 != nil {
															return m.NoResult, err1934
														}
														eval1927, err1927 := evalXhashdasmFunction( // #dasmFunction(#token("true","Bool"),getIeleName(`Map:lookupOrDefault`(FUNCS,`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2))),NAME,`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),WS,NBITS,FUNCS,`.List{"instructionList"}`(.KList),.K)
															/* rhs KToken */ m.BoolTrue,
															eval1928,
															varNAME,
															eval1934,
															varWS,
															varNBITS,
															varFUNCS,
															&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
															}},
															m.EmptyKSequence,
															config, -1)
														if err1927 != nil {
															return m.NoResult, err1927
														}
														return eval1927, nil
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1782
	// source: iele-binary.k @174
	// {| rule #dasmFunctions(`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,NAME)=>`.List{"topLevelDefinitionList"}`(.KList) requires `_andBool_`(`_andBool_`(isIeleName(NAME),isMap(FUNCS)),isInt(NBITS)) ensures #token("true","Bool") [UNIQUE_ID(110ef2e0d88c545d29992b1489690b565ebcc059305832564524f13a2494c61d) contentStartColumn(10) contentStartLine(174) org.kframework.attributes.Location(Location(174,10,174,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
				varNAME := c4 // lhs KVariable NAME
				// REQUIRES
				eval1936, err1936 := evalIsIeleName( // isIeleName(NAME)
					varNAME,
					config, -1)
				if err1936 != nil {
					return m.NoResult, err1936
				}
				if m.IsTrue(eval1936) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */  {
					// RHS
					traceRuleApply("FUNC", 1782, "{| rule #dasmFunctions(`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,NAME)=>`.List{\"topLevelDefinitionList\"}`(.KList) requires `_andBool_`(`_andBool_`(isIeleName(NAME),isMap(FUNCS)),isInt(NBITS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(110ef2e0d88c545d29992b1489690b565ebcc059305832564524f13a2494c61d) contentStartColumn(10) contentStartLine(174) org.kframework.attributes.Location(Location(174,10,174,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return &m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
					}}, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmFunctions", args: []m.K{c1, c2, c3, c4}}
}

func evalIsContract(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1783
	// source: ? @?
	// {| rule isContract(`.List{"contractDefinitionList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"contractDefinitionList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1783, "{| rule isContract(`.List{\"contractDefinitionList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1784
	// source: ? @?
	// {| rule isContract(`#emptyCode_IELE-CONFIGURATION`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashemptyCodeXuIELEXhyphenCONFIGURATION && len(kapp0.List) == 0 { // `#emptyCode_IELE-CONFIGURATION`(.KList)
		// RHS
		traceRuleApply("FUNC", 1784, "{| rule isContract(`#emptyCode_IELE-CONFIGURATION`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1785
	// source: ? @?
	// {| rule isContract(#KToken(#token("Contract","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContract { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1785, "{| rule isContract(#KToken(#token(\"Contract\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1786
	// source: ? @?
	// {| rule isContract(contractDefinitionList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isContractDefinition(K0),isContract(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1937, err1937 := evalIsContractDefinition( // isContractDefinition(K0)
			varK0,
			config, -1)
		if err1937 != nil {
			return m.NoResult, err1937
		}
		eval1938, err1938 := evalIsContract( // isContract(K1)
			varK1,
			config, -1)
		if err1938 != nil {
			return m.NoResult, err1938
		}
		if (m.IsTrue(eval1937)) &&
		   (m.IsTrue(eval1938)) {
			// RHS
			traceRuleApply("FUNC", 1786, "{| rule isContract(contractDefinitionList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isContractDefinition(K0),isContract(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1787
	// source: ? @?
	// {| rule isContract(`#illFormed_IELE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashillFormedXuIELE && len(kapp0.List) == 0 { // `#illFormed_IELE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1787, "{| rule isContract(`#illFormed_IELE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1788
	// source: ? @?
	// {| rule isContract(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1788, "{| rule isContract(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashoverApproxKara(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1789
	// source: iele-gas.k @910
	// {| rule #overApproxKara(N)=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token("32","Int")),`_*Int__INT`(N,N),`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token("1024","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int")),`_*Int__INT`(#token("48","Int"),N)),#token("768","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int")),`_*Int__INT`(#token("432","Int"),N)),#token("197376","Int")))) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(d34e4d75c350304b89695af8981276a628d8eb868e18bbee0ddcd5e9a8d02b43) contentStartColumn(10) contentStartLine(910) org.kframework.attributes.Location(Location(910,10,913,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 1789, "{| rule #overApproxKara(N)=>`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token(\"32\",\"Int\")),`_*Int__INT`(N,N),`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token(\"1024\",\"Int\")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token(\"4\",\"Int\")),`_*Int__INT`(#token(\"48\",\"Int\"),N)),#token(\"768\",\"Int\")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token(\"16\",\"Int\")),`_*Int__INT`(#token(\"432\",\"Int\"),N)),#token(\"197376\",\"Int\")))) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d34e4d75c350304b89695af8981276a628d8eb868e18bbee0ddcd5e9a8d02b43) contentStartColumn(10) contentStartLine(910) org.kframework.attributes.Location(Location(910,10,913,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval1940, err1940 := evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(N,#token("32","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("32"),
			config, -1)
		if err1940 != nil {
			return m.NoResult, err1940
		}
		eval1941, err1941 := evalXuXstarIntXuXuINT( // `_*Int__INT`(N,N)
			varN,
			varN,
			config, -1)
		if err1941 != nil {
			return m.NoResult, err1941
		}
		eval1943, err1943 := evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(N,#token("1024","Int"))
			varN,
			/* rhs KToken */ m.NewIntFromString("1024"),
			config, -1)
		if err1943 != nil {
			return m.NoResult, err1943
		}
		eval1947, err1947 := evalXuXstarIntXuXuINT( // `_*Int__INT`(N,N)
			varN,
			varN,
			config, -1)
		if err1947 != nil {
			return m.NoResult, err1947
		}
		eval1946, err1946 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int"))
			eval1947,
			/* rhs KToken */ m.NewIntFromString("4"),
			config, -1)
		if err1946 != nil {
			return m.NoResult, err1946
		}
		eval1948, err1948 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("48","Int"),N)
			/* rhs KToken */ m.NewIntFromString("48"),
			varN,
			config, -1)
		if err1948 != nil {
			return m.NoResult, err1948
		}
		eval1945, err1945 := evalXuXplusIntXu( // `_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int")),`_*Int__INT`(#token("48","Int"),N))
			eval1946,
			eval1948,
			config, -1)
		if err1945 != nil {
			return m.NoResult, err1945
		}
		eval1944, err1944 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int")),`_*Int__INT`(#token("48","Int"),N)),#token("768","Int"))
			eval1945,
			/* rhs KToken */ m.NewIntFromString("768"),
			config, -1)
		if err1944 != nil {
			return m.NoResult, err1944
		}
		eval1952, err1952 := evalXuXstarIntXuXuINT( // `_*Int__INT`(N,N)
			varN,
			varN,
			config, -1)
		if err1952 != nil {
			return m.NoResult, err1952
		}
		eval1951, err1951 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int"))
			eval1952,
			/* rhs KToken */ m.NewIntFromString("16"),
			config, -1)
		if err1951 != nil {
			return m.NoResult, err1951
		}
		eval1953, err1953 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("432","Int"),N)
			/* rhs KToken */ m.NewIntFromString("432"),
			varN,
			config, -1)
		if err1953 != nil {
			return m.NoResult, err1953
		}
		eval1950, err1950 := evalXuXplusIntXu( // `_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int")),`_*Int__INT`(#token("432","Int"),N))
			eval1951,
			eval1953,
			config, -1)
		if err1950 != nil {
			return m.NoResult, err1950
		}
		eval1949, err1949 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int")),`_*Int__INT`(#token("432","Int"),N)),#token("197376","Int"))
			eval1950,
			/* rhs KToken */ m.NewIntFromString("197376"),
			config, -1)
		if err1949 != nil {
			return m.NoResult, err1949
		}
		eval1942, err1942 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token("1024","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int")),`_*Int__INT`(#token("48","Int"),N)),#token("768","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int")),`_*Int__INT`(#token("432","Int"),N)),#token("197376","Int")))
			eval1943,
			eval1944,
			eval1949,
			config, -1)
		if err1942 != nil {
			return m.NoResult, err1942
		}
		eval1939, err1939 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token("32","Int")),`_*Int__INT`(N,N),`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(N,#token("1024","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("4","Int")),`_*Int__INT`(#token("48","Int"),N)),#token("768","Int")),`_-Int__INT`(`_+Int_`(`_/Int__INT`(`_*Int__INT`(N,N),#token("16","Int")),`_*Int__INT`(#token("432","Int"),N)),#token("197376","Int"))))
			eval1940,
			eval1941,
			eval1942,
			config, -1)
		if err1939 != nil {
			return m.NoResult, err1939
		}
		return eval1939, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashoverApproxKara", args: []m.K{c}}
}

func evalXhashputcXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.putc
	lbl := m.LblXhashputcXlparenXuXcommaXuXrparenXuKXhyphenIO // #putc(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.putc(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.putc, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashputcXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalIsTxGasLimitCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1790
	// source: ? @?
	// {| rule isTxGasLimitCellOpt(#KToken(#token("TxGasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1790, "{| rule isTxGasLimitCellOpt(#KToken(#token(\"TxGasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1791
	// source: ? @?
	// {| rule isTxGasLimitCellOpt(#KToken(#token("TxGasLimitCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasLimitCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1791, "{| rule isTxGasLimitCellOpt(#KToken(#token(\"TxGasLimitCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1792
	// source: ? @?
	// {| rule isTxGasLimitCellOpt(noTxGasLimitCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTxGasLimitCell && len(kapp0.List) == 0 { // noTxGasLimitCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1792, "{| rule isTxGasLimitCellOpt(noTxGasLimitCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1793
	// source: ? @?
	// {| rule isTxGasLimitCellOpt(`<txGasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasLimitXgt && len(kapp0.List) == 1 { // `<txGasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1793, "{| rule isTxGasLimitCellOpt(`<txGasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1794
	// source: ? @?
	// {| rule isTxGasLimitCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1794, "{| rule isTxGasLimitCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalAssignBytesRange(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #1795
	// source: data.k @370
	// {| rule assignBytesRange(B,I,B')=>B requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isBytes(B')),isBytes(B)),`_==K_`(B',`.Bytes_BYTES-HOOKED`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(729bb33128e14bd5fc83a715bfbf0c434e7751b14e03dd2902650140e8934fe8) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,371,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varB, t := c1.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varBXapos, t := c3.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
				// REQUIRES
				eval1955, err1955 := evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
				if err1955 != nil {
					return m.NoResult, err1955
				}
				eval1954, err1954 := evalXuXeqXeqKXu( // `_==K_`(B',`.Bytes_BYTES-HOOKED`(.KList))
					varBXapos,
					eval1955,
					config, -1)
				if err1954 != nil {
					return m.NoResult, err1954
				}
				if /* rhs precomputed isInt(I) && isBytes(B') && isBytes(B) */ /* && */
				   m.IsTrue(eval1954) {
					// RHS
					traceRuleApply("FUNC", 1795, "{| rule assignBytesRange(B,I,B')=>B requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isBytes(B')),isBytes(B)),`_==K_`(B',`.Bytes_BYTES-HOOKED`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(729bb33128e14bd5fc83a715bfbf0c434e7751b14e03dd2902650140e8934fe8) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,371,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					return varB, nil
				}
			}
		}
	}

	// rule #1796
	// source: data.k @368
	// {| rule assignBytesRange(B,I,B')=>replaceAtBytes(padRightBytes(B,`_+Int_`(I,lengthBytes(B')),#token("0","Int")),I,B') requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isBytes(B')),isBytes(B)),`_=/=K_`(B',`.Bytes_BYTES-HOOKED`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(5f3fcd9cca1e7af7568a9cc7bbc903eb311b75ede732b8f1e4b346b6526b9859) contentStartColumn(10) contentStartLine(368) org.kframework.attributes.Location(Location(368,10,369,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varB, t := c1.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varBXapos, t := c3.(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
				// REQUIRES
				eval1957, err1957 := evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
				if err1957 != nil {
					return m.NoResult, err1957
				}
				eval1956, err1956 := evalXuXeqXslashXeqKXu( // `_=/=K_`(B',`.Bytes_BYTES-HOOKED`(.KList))
					varBXapos,
					eval1957,
					config, -1)
				if err1956 != nil {
					return m.NoResult, err1956
				}
				if /* rhs precomputed isInt(I) && isBytes(B') && isBytes(B) */ /* && */
				   m.IsTrue(eval1956) {
					// RHS
					traceRuleApply("FUNC", 1796, "{| rule assignBytesRange(B,I,B')=>replaceAtBytes(padRightBytes(B,`_+Int_`(I,lengthBytes(B')),#token(\"0\",\"Int\")),I,B') requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isBytes(B')),isBytes(B)),`_=/=K_`(B',`.Bytes_BYTES-HOOKED`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5f3fcd9cca1e7af7568a9cc7bbc903eb311b75ede732b8f1e4b346b6526b9859) contentStartColumn(10) contentStartLine(368) org.kframework.attributes.Location(Location(368,10,369,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval1961, err1961 := evalLengthBytes( // lengthBytes(B')
						varBXapos,
						config, -1)
					if err1961 != nil {
						return m.NoResult, err1961
					}
					eval1960, err1960 := evalXuXplusIntXu( // `_+Int_`(I,lengthBytes(B'))
						varI,
						eval1961,
						config, -1)
					if err1960 != nil {
						return m.NoResult, err1960
					}
					eval1959, err1959 := evalPadRightBytes( // padRightBytes(B,`_+Int_`(I,lengthBytes(B')),#token("0","Int"))
						varB,
						eval1960,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err1959 != nil {
						return m.NoResult, err1959
					}
					eval1958, err1958 := evalReplaceAtBytes( // replaceAtBytes(padRightBytes(B,`_+Int_`(I,lengthBytes(B')),#token("0","Int")),I,B')
						eval1959,
						varI,
						varBXapos,
						config, -1)
					if err1958 != nil {
						return m.NoResult, err1958
					}
					return eval1958, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalAssignBytesRange", args: []m.K{c1, c2, c3}}
}

func evalIsIELECommand(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1797
	// source: ? @?
	// {| rule isIELECommand(#KToken(#token("IELECommand","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIELECommand { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1797, "{| rule isIELECommand(#KToken(#token(\"IELECommand\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1798
	// source: ? @?
	// {| rule isIELECommand(`#endVM_IELE-NODE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashendVMXuIELEXhyphenNODE && len(kapp0.List) == 0 { // `#endVM_IELE-NODE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1798, "{| rule isIELECommand(`#endVM_IELE-NODE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1799
	// source: ? @?
	// {| rule isIELECommand(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1799, "{| rule isIELECommand(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXlsqbXuXltXhyphenXuXrsqb(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.update
	lbl := m.LblXuXlsqbXuXltXhyphenXuXrsqb // _[_<-_]
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.update(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.update, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXltXhyphenXuXrsqb", args: []m.K{c1, c2, c3}}
}

func evalXhashremoveZerosAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1800
	// source: data.k @412
	// {| rule #removeZerosAux(`.List`(.KList),_0)=>`.Map`(.KList) requires `_==K_`(`.Map`(.KList),_0) ensures #token("true","Bool") [UNIQUE_ID(fa43c5026c175aa64ba09f2324e60ba24d042284e4dcc14733e25c7228cdda95) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if list0, t := c1.(*m.List); t && list0.Sort == m.SortList && list0.Label == m.LblXuListXu {
		if len(list0.Data) == 0 { // empty list `.List`(.KList)
			varXu0 := c2 // lhs KVariable _0
			// REQUIRES
			eval1963, err1963 := evalXdotMap(config, -1) // `.Map`(.KList)
			if err1963 != nil {
				return m.NoResult, err1963
			}
			eval1962, err1962 := evalXuXeqXeqKXu( // `_==K_`(`.Map`(.KList),_0)
				eval1963,
				varXu0,
				config, -1)
			if err1962 != nil {
				return m.NoResult, err1962
			}
			if m.IsTrue(eval1962) {
				// RHS
				traceRuleApply("FUNC", 1800, "{| rule #removeZerosAux(`.List`(.KList),_0)=>`.Map`(.KList) requires `_==K_`(`.Map`(.KList),_0) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fa43c5026c175aa64ba09f2324e60ba24d042284e4dcc14733e25c7228cdda95) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval1964, err1964 := evalXdotMap(config, -1) // `.Map`(.KList)
				if err1964 != nil {
					return m.NoResult, err1964
				}
				return eval1964, nil
			}
		}
	}

	// rule #1801
	// source: data.k @413
	// {| rule #removeZerosAux(`_List_`(`ListItem`(KEY),L),_0)=>#removeZerosAux(L,REST) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(REST,`_[_<-undef]`(_0,KEY)),#match(_5,`Map:lookup`(_0,KEY))),`_andBool_`(`_andBool_`(isMap(REST),isKItem(KEY)),isList(L))),`_==Int_`(_5,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d3fbb0c084180c60e070bbbcad2defc1579d0c9e8ca3225a6d471f2f8d5d5b2a) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if list0, t := c1.(*m.List); t && list0.Sort == m.SortList && list0.Label == m.LblXuListXu {
		if len(list0.Data) >= 1 { // list `_List_`(`ListItem`(KEY),L)
			// list head: `ListItem`(KEY)
			varKEY := list0.Data[0] // lhs KVariable KEY
			var lisTail1 m.K
			lisTail1 = &m.List { Sort: list0.Sort, Label: list0.Label, Data: list0.Data[1:] }
			if varL, t := lisTail1.(*m.List); t && varL.Sort == m.SortList { // lhs KVariable with hook:LIST.List
				varXu0 := c2 // lhs KVariable _0
				// LOOKUPS
				if guard < 1801 {
					// lookup:#match(REST,`_[_<-undef]`(_0,KEY))
					eval1965, err1965 := evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_0,KEY)
						varXu0,
						varKEY,
						config, -1)
					if err1965 != nil {
						return m.NoResult, err1965
					}
					matchEval0 := eval1965
					if _, isBottom := matchEval0.(*m.Bottom); isBottom {
						return evalXhashremoveZerosAux(c1, c2, config, 1801) // reapply
					}
					if varREST, t := matchEval0.(*m.Map); t && varREST.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						// lookup:#match(_5,`Map:lookup`(_0,KEY))
						eval1966, err1966 := evalMapXcolonlookup( // `Map:lookup`(_0,KEY)
							varXu0,
							varKEY,
							config, -1)
						if err1966 != nil {
							return m.NoResult, err1966
						}
						matchEval1 := eval1966
						if _, isBottom := matchEval1.(*m.Bottom); isBottom {
							return evalXhashremoveZerosAux(c1, c2, config, 1801) // reapply
						}
						if varXu5, t := matchEval1.(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval1967, err1967 := evalIsMap( // isMap(REST)
								varREST,
								config, -1)
							if err1967 != nil {
								return m.NoResult, err1967
							}
							eval1968, err1968 := evalXuXeqXeqIntXu( // `_==Int_`(_5,#token("0","Int"))
								varXu5,
								/* rhs KToken */ m.NewIntFromString("0"),
								config, -1)
							if err1968 != nil {
								return m.NoResult, err1968
							}
							if (/* rhs precomputed lookup #match && lookup #match */ /* && */
							   m.IsTrue(eval1967) /* && */ /* rhs precomputed isKItem */  /* && */ /* rhs precomputed isList(L) */ ) &&
							   (m.IsTrue(eval1968)) {
								// RHS
								traceRuleApply("FUNC", 1801, "{| rule #removeZerosAux(`_List_`(`ListItem`(KEY),L),_0)=>#removeZerosAux(L,REST) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(REST,`_[_<-undef]`(_0,KEY)),#match(_5,`Map:lookup`(_0,KEY))),`_andBool_`(`_andBool_`(isMap(REST),isKItem(KEY)),isList(L))),`_==Int_`(_5,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d3fbb0c084180c60e070bbbcad2defc1579d0c9e8ca3225a6d471f2f8d5d5b2a) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval1969, err1969 := evalXhashremoveZerosAux( // #removeZerosAux(L,REST)
									varL,
									varREST,
									config, -1)
								if err1969 != nil {
									return m.NoResult, err1969
								}
								return eval1969, nil
							}
						} else {
							return evalXhashremoveZerosAux(c1, c2, config, 1801) // reapply
						}
					} else {
						return evalXhashremoveZerosAux(c1, c2, config, 1801) // reapply
					}
				}
			}
		}
	}

	// rule #1802
	// source: data.k @414
	// {| rule #removeZerosAux(`_List_`(`ListItem`(KEY),L),_0)=>`_Map_`(`_|->_`(KEY,VALUE),#removeZerosAux(L,REST)) requires `_andBool_`(`_andBool_`(#match(REST,`_[_<-undef]`(_0,KEY)),#match(VALUE,`Map:lookup`(_0,KEY))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKItem(VALUE),isMap(REST)),isKItem(KEY)),isList(L)),`_=/=K_`(VALUE,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(26418d36def5c61ecff3802445f2d7a6a0a68af5e09f2c9ec49ad40a58298247) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if list0, t := c1.(*m.List); t && list0.Sort == m.SortList && list0.Label == m.LblXuListXu {
		if len(list0.Data) >= 1 { // list `_List_`(`ListItem`(KEY),L)
			// list head: `ListItem`(KEY)
			varKEY := list0.Data[0] // lhs KVariable KEY
			var lisTail1 m.K
			lisTail1 = &m.List { Sort: list0.Sort, Label: list0.Label, Data: list0.Data[1:] }
			if varL, t := lisTail1.(*m.List); t && varL.Sort == m.SortList { // lhs KVariable with hook:LIST.List
				varXu0 := c2 // lhs KVariable _0
				// LOOKUPS
				if guard < 1802 {
					// lookup:#match(REST,`_[_<-undef]`(_0,KEY))
					eval1970, err1970 := evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_0,KEY)
						varXu0,
						varKEY,
						config, -1)
					if err1970 != nil {
						return m.NoResult, err1970
					}
					matchEval0 := eval1970
					if _, isBottom := matchEval0.(*m.Bottom); isBottom {
						return evalXhashremoveZerosAux(c1, c2, config, 1802) // reapply
					}
					if varREST, t := matchEval0.(*m.Map); t && varREST.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						// lookup:#match(VALUE,`Map:lookup`(_0,KEY))
						eval1971, err1971 := evalMapXcolonlookup( // `Map:lookup`(_0,KEY)
							varXu0,
							varKEY,
							config, -1)
						if err1971 != nil {
							return m.NoResult, err1971
						}
						matchEval1 := eval1971
						if _, isBottom := matchEval1.(*m.Bottom); isBottom {
							return evalXhashremoveZerosAux(c1, c2, config, 1802) // reapply
						}
						varVALUE := matchEval1 // lhs KVariable VALUE
						// REQUIRES
						eval1972, err1972 := evalIsMap( // isMap(REST)
							varREST,
							config, -1)
						if err1972 != nil {
							return m.NoResult, err1972
						}
						eval1973, err1973 := evalXuXeqXslashXeqKXu( // `_=/=K_`(VALUE,#token("0","Int"))
							varVALUE,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err1973 != nil {
							return m.NoResult, err1973
						}
						if /* rhs precomputed lookup #match && lookup #match */ /* && */
						   (/* rhs precomputed isKItem */ /* && */
						   m.IsTrue(eval1972) /* && */ /* rhs precomputed isKItem */  /* && */ /* rhs precomputed isList(L) */ ) &&
						   (m.IsTrue(eval1973)) {
							// RHS
							traceRuleApply("FUNC", 1802, "{| rule #removeZerosAux(`_List_`(`ListItem`(KEY),L),_0)=>`_Map_`(`_|->_`(KEY,VALUE),#removeZerosAux(L,REST)) requires `_andBool_`(`_andBool_`(#match(REST,`_[_<-undef]`(_0,KEY)),#match(VALUE,`Map:lookup`(_0,KEY))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKItem(VALUE),isMap(REST)),isKItem(KEY)),isList(L)),`_=/=K_`(VALUE,#token(\"0\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26418d36def5c61ecff3802445f2d7a6a0a68af5e09f2c9ec49ad40a58298247) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
							eval1975, err1975 := evalXuXpipeXhyphenXgtXu( // `_|->_`(KEY,VALUE)
								varKEY,
								varVALUE,
								config, -1)
							if err1975 != nil {
								return m.NoResult, err1975
							}
							eval1976, err1976 := evalXhashremoveZerosAux( // #removeZerosAux(L,REST)
								varL,
								varREST,
								config, -1)
							if err1976 != nil {
								return m.NoResult, err1976
							}
							eval1974, err1974 := evalXuMapXu( // `_Map_`(`_|->_`(KEY,VALUE),#removeZerosAux(L,REST))
								eval1975,
								eval1976,
								config, -1)
							if err1974 != nil {
								return m.NoResult, err1974
							}
							return eval1974, nil
						}
					} else {
						return evalXhashremoveZerosAux(c1, c2, config, 1802) // reapply
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashremoveZerosAux", args: []m.K{c1, c2}}
}

func evalIsInt(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #1803
	// source: ? @?
	// {| rule isInt(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1803, "{| rule isInt(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1804
	// source: ? @?
	// {| rule isInt(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1804, "{| rule isInt(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1805
	// source: ? @?
	// {| rule isInt(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1805, "{| rule isInt(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1806
	// source: ? @?
	// {| rule isInt(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1806, "{| rule isInt(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1807
	// source: ? @?
	// {| rule isInt(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1807, "{| rule isInt(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1808
	// source: ? @?
	// {| rule isInt(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1808, "{| rule isInt(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1809
	// source: ? @?
	// {| rule isInt(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1809, "{| rule isInt(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1810
	// source: ? @?
	// {| rule isInt(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1810, "{| rule isInt(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1811
	// source: ? @?
	// {| rule isInt(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1811, "{| rule isInt(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1812
	// source: ? @?
	// {| rule isInt(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1812, "{| rule isInt(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1813
	// source: ? @?
	// {| rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1813, "{| rule isInt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPredicate(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1814
	// source: ? @?
	// {| rule isPredicate(`le_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLeXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `le_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1814, "{| rule isPredicate(`le_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1815
	// source: ? @?
	// {| rule isPredicate(`lt_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLtXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `lt_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1815, "{| rule isPredicate(`lt_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1816
	// source: ? @?
	// {| rule isPredicate(#KToken(#token("Predicate","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPredicate { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1816, "{| rule isPredicate(#KToken(#token(\"Predicate\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1817
	// source: ? @?
	// {| rule isPredicate(`gt_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `gt_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1817, "{| rule isPredicate(`gt_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1818
	// source: ? @?
	// {| rule isPredicate(`ge_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGeXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `ge_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1818, "{| rule isPredicate(`ge_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1819
	// source: ? @?
	// {| rule isPredicate(`ne_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNeXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `ne_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1819, "{| rule isPredicate(`ne_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1820
	// source: ? @?
	// {| rule isPredicate(`eq_IELE-COMMON`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEqXuIELEXhyphenCOMMON && len(kapp0.List) == 0 { // `eq_IELE-COMMON`(.KList)
		// RHS
		traceRuleApply("FUNC", 1820, "{| rule isPredicate(`eq_IELE-COMMON`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1821
	// source: ? @?
	// {| rule isPredicate(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1821, "{| rule isPredicate(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPreviousGasCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1822
	// source: ? @?
	// {| rule isPreviousGasCellOpt(#KToken(#token("PreviousGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPreviousGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1822, "{| rule isPreviousGasCellOpt(#KToken(#token(\"PreviousGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1823
	// source: ? @?
	// {| rule isPreviousGasCellOpt(`<previousGas>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpreviousGasXgt && len(kapp0.List) == 1 { // `<previousGas>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1823, "{| rule isPreviousGasCellOpt(`<previousGas>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1824
	// source: ? @?
	// {| rule isPreviousGasCellOpt(#KToken(#token("PreviousGasCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPreviousGasCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1824, "{| rule isPreviousGasCellOpt(#KToken(#token(\"PreviousGasCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1825
	// source: ? @?
	// {| rule isPreviousGasCellOpt(noPreviousGasCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoPreviousGasCell && len(kapp0.List) == 0 { // noPreviousGasCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1825, "{| rule isPreviousGasCellOpt(noPreviousGasCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1826
	// source: ? @?
	// {| rule isPreviousGasCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1826, "{| rule isPreviousGasCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXdotBytesXuBYTESXhyphenHOOKED(config m.K, guard int) (m.K, error) {
	//hook: BYTES.empty
	lbl := m.LblXdotBytesXuBYTESXhyphenHOOKED // .Bytes_BYTES-HOOKED
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.empty(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.empty, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotBytesXuBYTESXhyphenHOOKED", args: nil}
}

func evalIsAccountsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1827
	// source: ? @?
	// {| rule isAccountsCellOpt(noAccountsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoAccountsCell && len(kapp0.List) == 0 { // noAccountsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1827, "{| rule isAccountsCellOpt(noAccountsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1828
	// source: ? @?
	// {| rule isAccountsCellOpt(#KToken(#token("AccountsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1828, "{| rule isAccountsCellOpt(#KToken(#token(\"AccountsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1829
	// source: ? @?
	// {| rule isAccountsCellOpt(`<accounts>`(K0))=>#token("true","Bool") requires isAccountCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountsXgt && len(kapp0.List) == 1 { // `<accounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortAccountCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isAccountCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 1829, "{| rule isAccountsCellOpt(`<accounts>`(K0))=>#token(\"true\",\"Bool\") requires isAccountCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1830
	// source: ? @?
	// {| rule isAccountsCellOpt(#KToken(#token("AccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1830, "{| rule isAccountsCellOpt(#KToken(#token(\"AccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1831
	// source: ? @?
	// {| rule isAccountsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1831, "{| rule isAccountsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuimpliesBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.implies
	lbl := m.LblXuimpliesBoolXuXuBOOL // _impliesBool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.implies(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.implies, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1832
	// source: domains.k @328
	// {| rule `_impliesBool__BOOL`(#token("false","Bool"),_6)=>#token("true","Bool") requires isBool(_6) ensures #token("true","Bool") [UNIQUE_ID(3497d026ef9468fdac7e6b5de6841fad0118b17ca073ba25af4c5d8573a167b2) contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,40)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if _, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(_6)
			// RHS
			traceRuleApply("FUNC", 1832, "{| rule `_impliesBool__BOOL`(#token(\"false\",\"Bool\"),_6)=>#token(\"true\",\"Bool\") requires isBool(_6) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3497d026ef9468fdac7e6b5de6841fad0118b17ca073ba25af4c5d8573a167b2) contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,40)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1833
	// source: domains.k @329
	// {| rule `_impliesBool__BOOL`(_9,#token("true","Bool"))=>#token("true","Bool") requires isBool(_9) ensures #token("true","Bool") [UNIQUE_ID(7fdeea13463fa86d05e4d5bfb9e9c627b90ab57930f712fef1bfc08543a87d74) contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,39)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolTrue) { // #token("true","Bool")
			// REQUIRES precomputed isBool(_9)
			// RHS
			traceRuleApply("FUNC", 1833, "{| rule `_impliesBool__BOOL`(_9,#token(\"true\",\"Bool\"))=>#token(\"true\",\"Bool\") requires isBool(_9) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7fdeea13463fa86d05e4d5bfb9e9c627b90ab57930f712fef1bfc08543a87d74) contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,39)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1834
	// source: domains.k @327
	// {| rule `_impliesBool__BOOL`(#token("true","Bool"),B)=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(278435b95efb1a1ce04f6d701b12e6438c3cf3aee8019b41ea93b05755d379d7) contentStartColumn(8) contentStartLine(327) org.kframework.attributes.Location(Location(327,8,327,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		if varB, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1834, "{| rule `_impliesBool__BOOL`(#token(\"true\",\"Bool\"),B)=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(278435b95efb1a1ce04f6d701b12e6438c3cf3aee8019b41ea93b05755d379d7) contentStartColumn(8) contentStartLine(327) org.kframework.attributes.Location(Location(327,8,327,36)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #1835
	// source: domains.k @330
	// {| rule `_impliesBool__BOOL`(B,#token("false","Bool"))=>`notBool_`(B) requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(0129e06009c7500aefab482e1bc8e348010c6bd01acd15725172192c05a70831) contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,45)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 1835, "{| rule `_impliesBool__BOOL`(B,#token(\"false\",\"Bool\"))=>`notBool_`(B) requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0129e06009c7500aefab482e1bc8e348010c6bd01acd15725172192c05a70831) contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,45)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1977, err1977 := evalNotBoolXu( // `notBool_`(B)
				varB,
				config, -1)
			if err1977 != nil {
				return m.NoResult, err1977
			}
			return eval1977, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuimpliesBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalIsIeleName(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #1836
	// source: ? @?
	// {| rule isIeleName(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1836, "{| rule isIeleName(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1837
	// source: ? @?
	// {| rule isIeleName(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1837, "{| rule isIeleName(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1838
	// source: ? @?
	// {| rule isIeleName(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1838, "{| rule isIeleName(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1839
	// source: ? @?
	// {| rule isIeleName(#KToken(#token("IeleName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1839, "{| rule isIeleName(#KToken(#token(\"IeleName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1840
	// source: ? @?
	// {| rule isIeleName(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1840, "{| rule isIeleName(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1841
	// source: ? @?
	// {| rule isIeleName(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1841, "{| rule isIeleName(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1842
	// source: ? @?
	// {| rule isIeleName(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1842, "{| rule isIeleName(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1843
	// source: ? @?
	// {| rule isIeleName(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1843, "{| rule isIeleName(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1844
	// source: ? @?
	// {| rule isIeleName(#KToken(#token("NumericIeleName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNumericIeleName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1844, "{| rule isIeleName(#KToken(#token(\"NumericIeleName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1845
	// source: ? @?
	// {| rule isIeleName(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1845, "{| rule isIeleName(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1846
	// source: ? @?
	// {| rule isIeleName(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 1846, "{| rule isIeleName(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1847
	// source: ? @?
	// {| rule isIeleName(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1847, "{| rule isIeleName(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1848
	// source: ? @?
	// {| rule isIeleName(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1848, "{| rule isIeleName(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitTxNonceCell(config m.K, guard int) (m.K, error) {
	// rule #1849
	// source: ? @?
	// {| rule initTxNonceCell(.KList)=>`<txNonce>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(57d780461663a694cd0a155b15fe4c0e1bb401381cccf504e39a6c6349ae87b7) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1849, "{| rule initTxNonceCell(.KList)=>`<txNonce>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57d780461663a694cd0a155b15fe4c0e1bb401381cccf504e39a6c6349ae87b7) initializer()] |}")
	return &m.KApply{Label: m.LblXlttxNonceXgt, List: []m.K{ // as-is <txNonce>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitTxNonceCell K = evalInitTxNonceCell(m.InternedBottom)

func evalIsExitCodeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1850
	// source: ? @?
	// {| rule isExitCodeCell(`<exit-code>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltexitXhyphencodeXgt && len(kapp0.List) == 1 { // `<exit-code>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1850, "{| rule isExitCodeCell(`<exit-code>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1851
	// source: ? @?
	// {| rule isExitCodeCell(#KToken(#token("ExitCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExitCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1851, "{| rule isExitCodeCell(#KToken(#token(\"ExitCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1852
	// source: ? @?
	// {| rule isExitCodeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1852, "{| rule isExitCodeCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalMaxIntXlparenXuXcommaXuXrparenXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.max
	lbl := m.LblMaxIntXlparenXuXcommaXuXrparenXuINT // maxInt(_,_)_INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.max(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.max, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMaxIntXlparenXuXcommaXuXrparenXuINT", args: []m.K{c1, c2}}
}

func evalFillArray(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.fill
	lbl := m.LblFillArray // fillArray
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.fill(c1, c2, c3, c4, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.fill, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFillArray", args: []m.K{c1, c2, c3, c4}}
}

func evalIsActiveAccountsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1853
	// source: ? @?
	// {| rule isActiveAccountsCell(#KToken(#token("ActiveAccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortActiveAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1853, "{| rule isActiveAccountsCell(#KToken(#token(\"ActiveAccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1854
	// source: ? @?
	// {| rule isActiveAccountsCell(`<activeAccounts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltactiveAccountsXgt && len(kapp0.List) == 1 { // `<activeAccounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 1854, "{| rule isActiveAccountsCell(`<activeAccounts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1855
	// source: ? @?
	// {| rule isActiveAccountsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1855, "{| rule isActiveAccountsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsizeRegs(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1856
	// source: data.k @99
	// {| rule #sizeRegs(REGS)=>#sizeRegsAux(REGS,#token("0","Int")) requires isOperands(REGS) ensures #token("true","Bool") [UNIQUE_ID(76fb7e824f56776fdf473130b0ba606dc63a9b0465ce5a36b85cdadda3c639fc) contentStartColumn(10) contentStartLine(99) org.kframework.attributes.Location(Location(99,10,99,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varREGS := c // lhs KVariable REGS
		// REQUIRES
		eval1978, err1978 := evalIsOperands( // isOperands(REGS)
			varREGS,
			config, -1)
		if err1978 != nil {
			return m.NoResult, err1978
		}
		if m.IsTrue(eval1978) {
			// RHS
			traceRuleApply("FUNC", 1856, "{| rule #sizeRegs(REGS)=>#sizeRegsAux(REGS,#token(\"0\",\"Int\")) requires isOperands(REGS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(76fb7e824f56776fdf473130b0ba606dc63a9b0465ce5a36b85cdadda3c639fc) contentStartColumn(10) contentStartLine(99) org.kframework.attributes.Location(Location(99,10,99,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1979, err1979 := evalXhashsizeRegsAux( // #sizeRegsAux(REGS,#token("0","Int"))
				varREGS,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err1979 != nil {
				return m.NoResult, err1979
			}
			return eval1979, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeRegs", args: []m.K{c}}
}

func evalXuMapXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.concat
	lbl := m.LblXuMapXu // _Map_
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuMapXu", args: []m.K{c1, c2}}
}

func evalXuXhyphenIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.sub
	lbl := m.LblXuXhyphenIntXuXuINT // _-Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.sub(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.sub, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXhyphenIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsBalanceCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1857
	// source: ? @?
	// {| rule isBalanceCell(#KToken(#token("BalanceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBalanceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1857, "{| rule isBalanceCell(#KToken(#token(\"BalanceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1858
	// source: ? @?
	// {| rule isBalanceCell(`<balance>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbalanceXgt && len(kapp0.List) == 1 { // `<balance>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1858, "{| rule isBalanceCell(`<balance>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1859
	// source: ? @?
	// {| rule isBalanceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1859, "{| rule isBalanceCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalFloat2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.float2string
	lbl := m.LblFloat2String // Float2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.float2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.float2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFloat2String", args: []m.K{c}}
}

func evalBN128Mul(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.bn128mul
	lbl := m.LblBN128Mul // BN128Mul
	sort := m.SortG1Point
	if hookRes, hookErr := krypto.Bn128mul(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.bn128mul, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBN128Mul", args: []m.K{c1, c2}}
}

func evalIsReturnType(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1860
	// source: ? @?
	// {| rule isReturnType(`.List{"typeList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetypeListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"typeList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1860, "{| rule isReturnType(`.List{\"typeList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1861
	// source: ? @?
	// {| rule isReturnType(`unknown_IELE-WELL-FORMEDNESS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUnknownXuIELEXhyphenWELLXhyphenFORMEDNESS && len(kapp0.List) == 0 { // `unknown_IELE-WELL-FORMEDNESS`(.KList)
		// RHS
		traceRuleApply("FUNC", 1861, "{| rule isReturnType(`unknown_IELE-WELL-FORMEDNESS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1862
	// source: ? @?
	// {| rule isReturnType(#KToken(#token("ReturnType","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortReturnType { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1862, "{| rule isReturnType(#KToken(#token(\"ReturnType\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1863
	// source: ? @?
	// {| rule isReturnType(typeList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTypeList && len(kapp0.List) == 2 { // typeList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval1980, err1980 := evalIsType( // isType(K0)
			varK0,
			config, -1)
		if err1980 != nil {
			return m.NoResult, err1980
		}
		eval1981, err1981 := evalIsTypes( // isTypes(K1)
			varK1,
			config, -1)
		if err1981 != nil {
			return m.NoResult, err1981
		}
		if (m.IsTrue(eval1980)) &&
		   (m.IsTrue(eval1981)) {
			// RHS
			traceRuleApply("FUNC", 1863, "{| rule isReturnType(typeList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1864
	// source: ? @?
	// {| rule isReturnType(#KToken(#token("Types","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypes { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1864, "{| rule isReturnType(#KToken(#token(\"Types\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1865
	// source: ? @?
	// {| rule isReturnType(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1865, "{| rule isReturnType(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInt2Bytes(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.int2bytes
	lbl := m.LblInt2Bytes // Int2Bytes
	sort := m.SortBytes
	if hookRes, hookErr := bytesHooks.int2bytes(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.int2bytes, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalInt2Bytes", args: []m.K{c1, c2, c3}}
}

func evalXuXcolonXeqKXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	return m.NoResult, &stuckError{funcName: "evalXuXcolonXeqKXu", args: []m.K{c1, c2}}
}

func evalIsBeneficiaryCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1866
	// source: ? @?
	// {| rule isBeneficiaryCellOpt(#KToken(#token("BeneficiaryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBeneficiaryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1866, "{| rule isBeneficiaryCellOpt(#KToken(#token(\"BeneficiaryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1867
	// source: ? @?
	// {| rule isBeneficiaryCellOpt(noBeneficiaryCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoBeneficiaryCell && len(kapp0.List) == 0 { // noBeneficiaryCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1867, "{| rule isBeneficiaryCellOpt(noBeneficiaryCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1868
	// source: ? @?
	// {| rule isBeneficiaryCellOpt(#KToken(#token("BeneficiaryCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBeneficiaryCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1868, "{| rule isBeneficiaryCellOpt(#KToken(#token(\"BeneficiaryCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1869
	// source: ? @?
	// {| rule isBeneficiaryCellOpt(`<beneficiary>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbeneficiaryXgt && len(kapp0.List) == 1 { // `<beneficiary>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1869, "{| rule isBeneficiaryCellOpt(`<beneficiary>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1870
	// source: ? @?
	// {| rule isBeneficiaryCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1870, "{| rule isBeneficiaryCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIeleName2String(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1871
	// source: data.k @114
	// {| rule `IeleName2String`(I)=>`Int2String`(I) requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(e28db6b39b0fb9f45ad7106804546e1735c61d332db1eef6f8790371e24c7f88) contentStartColumn(10) contentStartLine(114) org.kframework.attributes.Location(Location(114,10,114,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 1871, "{| rule `IeleName2String`(I)=>`Int2String`(I) requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e28db6b39b0fb9f45ad7106804546e1735c61d332db1eef6f8790371e24c7f88) contentStartColumn(10) contentStartLine(114) org.kframework.attributes.Location(Location(114,10,114,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval1982, err1982 := evalInt2String( // `Int2String`(I)
			varI,
			config, -1)
		if err1982 != nil {
			return m.NoResult, err1982
		}
		return eval1982, nil
	}

	// rule #1872
	// source: data.k @115
	// {| rule `IeleName2String`(N)=>`IeleNameToken2String`(N) requires isIeleName(N) ensures #token("true","Bool") [UNIQUE_ID(a14f0f4c2f8dc7ffe62155bf5b23ecd8a0c371e8aa649c7ae072c391119a0628) contentStartColumn(10) contentStartLine(115) org.kframework.attributes.Location(Location(115,10,115,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varN := c // lhs KVariable N
		// REQUIRES
		eval1983, err1983 := evalIsIeleName( // isIeleName(N)
			varN,
			config, -1)
		if err1983 != nil {
			return m.NoResult, err1983
		}
		if m.IsTrue(eval1983) {
			// RHS
			traceRuleApply("FUNC", 1872, "{| rule `IeleName2String`(N)=>`IeleNameToken2String`(N) requires isIeleName(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a14f0f4c2f8dc7ffe62155bf5b23ecd8a0c371e8aa649c7ae072c391119a0628) contentStartColumn(10) contentStartLine(115) org.kframework.attributes.Location(Location(115,10,115,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval1984, err1984 := evalIeleNameToken2String( // `IeleNameToken2String`(N)
				varN,
				config, -1)
			if err1984 != nil {
				return m.NoResult, err1984
			}
			return eval1984, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIeleName2String", args: []m.K{c}}
}

func evalInitGasLimitCell(config m.K, guard int) (m.K, error) {
	// rule #1873
	// source: ? @?
	// {| rule initGasLimitCell(.KList)=>`<gasLimit>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f61b7150c109e53333d9e1e1cb4a065bbf71cd36f3dfd09a039bcaae28487bc5) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1873, "{| rule initGasLimitCell(.KList)=>`<gasLimit>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f61b7150c109e53333d9e1e1cb4a065bbf71cd36f3dfd09a039bcaae28487bc5) initializer()] |}")
	return &m.KApply{Label: m.LblXltgasLimitXgt, List: []m.K{ // as-is <gasLimit>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitGasLimitCell K = evalInitGasLimitCell(m.InternedBottom)

func evalInitTypesCell(config m.K, guard int) (m.K, error) {
	// rule #1874
	// source: ? @?
	// {| rule initTypesCell(.KList)=>`<types>`(`intrinsicTypes_IELE-WELL-FORMEDNESS`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4348d98f507919ab5d2ead316c813b31fa46df964ee59cc3024b432f1afad7a0) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1874, "{| rule initTypesCell(.KList)=>`<types>`(`intrinsicTypes_IELE-WELL-FORMEDNESS`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4348d98f507919ab5d2ead316c813b31fa46df964ee59cc3024b432f1afad7a0) initializer()] |}")
	eval1985, err1985 := evalIntrinsicTypesXuIELEXhyphenWELLXhyphenFORMEDNESS(config, -1) // `intrinsicTypes_IELE-WELL-FORMEDNESS`(.KList)
	if err1985 != nil {
		return m.NoResult, err1985
	}
	return &m.KApply{Label: m.LblXlttypesXgt, List: []m.K{ // as-is <types>
		eval1985,
	}}, nil

}

//var constInitTypesCell K = evalInitTypesCell(m.InternedBottom)

func evalXhashadjustedBitLength(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1875
	// source: iele-gas.k @931
	// {| rule #adjustedBitLength(LEX,EX)=>`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(LEX,#token("1","Int")),#token("0","Int"),`_*Int__INT`(#token("64","Int"),`_-Int__INT`(LEX,#token("1","Int")))),#adjustedBitLengthAux(twos(#token("8","Int"),EX)))) requires `_andBool_`(isInt(LEX),isInt(EX)) ensures #token("true","Bool") [UNIQUE_ID(e2a0e590c93b8be9e13bcf62bd63b2a9f2b3a9a7c4a1bd20f942746fd049c91e) contentStartColumn(10) contentStartLine(931) org.kframework.attributes.Location(Location(931,10,931,143)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varLEX, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varEX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(LEX) && isInt(EX)
			// RHS
			traceRuleApply("FUNC", 1875, "{| rule #adjustedBitLength(LEX,EX)=>`maxInt(_,_)_INT`(#token(\"1\",\"Int\"),`_+Int_`(`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(LEX,#token(\"1\",\"Int\")),#token(\"0\",\"Int\"),`_*Int__INT`(#token(\"64\",\"Int\"),`_-Int__INT`(LEX,#token(\"1\",\"Int\")))),#adjustedBitLengthAux(twos(#token(\"8\",\"Int\"),EX)))) requires `_andBool_`(isInt(LEX),isInt(EX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2a0e590c93b8be9e13bcf62bd63b2a9f2b3a9a7c4a1bd20f942746fd049c91e) contentStartColumn(10) contentStartLine(931) org.kframework.attributes.Location(Location(931,10,931,143)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval1989, err1989 := evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(LEX,#token("1","Int"))
				varLEX,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err1989 != nil {
				return m.NoResult, err1989
			}
			eval1991, err1991 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(LEX,#token("1","Int"))
				varLEX,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err1991 != nil {
				return m.NoResult, err1991
			}
			eval1990, err1990 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#token("64","Int"),`_-Int__INT`(LEX,#token("1","Int")))
				/* rhs KToken */ m.NewIntFromString("64"),
				eval1991,
				config, -1)
			if err1990 != nil {
				return m.NoResult, err1990
			}
			eval1988, err1988 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(LEX,#token("1","Int")),#token("0","Int"),`_*Int__INT`(#token("64","Int"),`_-Int__INT`(LEX,#token("1","Int"))))
				eval1989,
				/* rhs KToken */ m.NewIntFromString("0"),
				eval1990,
				config, -1)
			if err1988 != nil {
				return m.NoResult, err1988
			}
			eval1993, err1993 := evalTwos( // twos(#token("8","Int"),EX)
				/* rhs KToken */ m.NewIntFromString("8"),
				varEX,
				config, -1)
			if err1993 != nil {
				return m.NoResult, err1993
			}
			eval1992, err1992 := evalXhashadjustedBitLengthAux( // #adjustedBitLengthAux(twos(#token("8","Int"),EX))
				eval1993,
				config, -1)
			if err1992 != nil {
				return m.NoResult, err1992
			}
			eval1987, err1987 := evalXuXplusIntXu( // `_+Int_`(`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(LEX,#token("1","Int")),#token("0","Int"),`_*Int__INT`(#token("64","Int"),`_-Int__INT`(LEX,#token("1","Int")))),#adjustedBitLengthAux(twos(#token("8","Int"),EX)))
				eval1988,
				eval1992,
				config, -1)
			if err1987 != nil {
				return m.NoResult, err1987
			}
			eval1986, err1986 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(`#if_#then_#else_#fi_K-EQUAL`(`_<=Int__INT`(LEX,#token("1","Int")),#token("0","Int"),`_*Int__INT`(#token("64","Int"),`_-Int__INT`(LEX,#token("1","Int")))),#adjustedBitLengthAux(twos(#token("8","Int"),EX))))
				/* rhs KToken */ m.NewIntFromString("1"),
				eval1987,
				config, -1)
			if err1986 != nil {
				return m.NoResult, err1986
			}
			return eval1986, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashadjustedBitLength", args: []m.K{c1, c2}}
}

func evalIsSubstateStackCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1876
	// source: ? @?
	// {| rule isSubstateStackCell(#KToken(#token("SubstateStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1876, "{| rule isSubstateStackCell(#KToken(#token(\"SubstateStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1877
	// source: ? @?
	// {| rule isSubstateStackCell(`<substateStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateStackXgt && len(kapp0.List) == 1 { // `<substateStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 1877, "{| rule isSubstateStackCell(`<substateStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1878
	// source: ? @?
	// {| rule isSubstateStackCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1878, "{| rule isSubstateStackCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitWellFormednessScheduleCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1879
	// source: ? @?
	// {| rule initWellFormednessScheduleCell(Init)=>`<well-formedness-schedule>`(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))) requires isSchedule(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))) ensures #token("true","Bool") [UNIQUE_ID(385069ec71236774cefde3cbb2488a29c171d8af0f99b2fc60ca6fba670ea508) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES
		eval1996, err1996 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))
			varInit,
			/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$SCHEDULE"},
			config, -1)
		if err1996 != nil {
			return m.NoResult, err1996
		}
		eval1995, err1995 := evalProjectXcolonSchedule( // `project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))
			eval1996,
			config, -1)
		if err1995 != nil {
			return m.NoResult, err1995
		}
		eval1994, err1994 := evalIsSchedule( // isSchedule(`project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))))
			eval1995,
			config, -1)
		if err1994 != nil {
			return m.NoResult, err1994
		}
		if m.IsTrue(eval1994) {
			// RHS
			traceRuleApply("FUNC", 1879, "{| rule initWellFormednessScheduleCell(Init)=>`<well-formedness-schedule>`(`project:Schedule`(`Map:lookup`(Init,#token(\"$SCHEDULE\",\"KConfigVar\")))) requires isSchedule(`project:Schedule`(`Map:lookup`(Init,#token(\"$SCHEDULE\",\"KConfigVar\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(385069ec71236774cefde3cbb2488a29c171d8af0f99b2fc60ca6fba670ea508) initializer()] |}")
			eval1998, err1998 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$SCHEDULE","KConfigVar"))
				varInit,
				/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$SCHEDULE"},
				config, -1)
			if err1998 != nil {
				return m.NoResult, err1998
			}
			eval1997, err1997 := evalProjectXcolonSchedule( // `project:Schedule`(`Map:lookup`(Init,#token("$SCHEDULE","KConfigVar")))
				eval1998,
				config, -1)
			if err1997 != nil {
				return m.NoResult, err1997
			}
			return &m.KApply{Label: m.LblXltwellXhyphenformednessXhyphenscheduleXgt, List: []m.K{ // as-is <well-formedness-schedule>
				eval1997,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalInitWellFormednessScheduleCell", args: []m.K{c}}
}

func evalIsContractCodeCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1880
	// source: ? @?
	// {| rule isContractCodeCellOpt(`<contractCode>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractCodeXgt && len(kapp0.List) == 1 { // `<contractCode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval1999, err1999 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err1999 != nil {
			return m.NoResult, err1999
		}
		if m.IsTrue(eval1999) {
			// RHS
			traceRuleApply("FUNC", 1880, "{| rule isContractCodeCellOpt(`<contractCode>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1881
	// source: ? @?
	// {| rule isContractCodeCellOpt(#KToken(#token("ContractCodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1881, "{| rule isContractCodeCellOpt(#KToken(#token(\"ContractCodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1882
	// source: ? @?
	// {| rule isContractCodeCellOpt(#KToken(#token("ContractCodeCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractCodeCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1882, "{| rule isContractCodeCellOpt(#KToken(#token(\"ContractCodeCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1883
	// source: ? @?
	// {| rule isContractCodeCellOpt(noContractCodeCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoContractCodeCell && len(kapp0.List) == 0 { // noContractCodeCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1883, "{| rule isContractCodeCellOpt(noContractCodeCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1884
	// source: ? @?
	// {| rule isContractCodeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1884, "{| rule isContractCodeCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsG1Point(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1885
	// source: ? @?
	// {| rule isG1Point(`(_,_)_KRYPTO`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlparenXuXcommaXuXrparenXuKRYPTO && len(kapp0.List) == 2 { // `(_,_)_KRYPTO`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 1885, "{| rule isG1Point(`(_,_)_KRYPTO`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1886
	// source: ? @?
	// {| rule isG1Point(#KToken(#token("G1Point","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortG1Point { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1886, "{| rule isG1Point(#KToken(#token(\"G1Point\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1887
	// source: ? @?
	// {| rule isG1Point(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1887, "{| rule isG1Point(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCurrentInstructionsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1888
	// source: ? @?
	// {| rule isCurrentInstructionsCell(`<currentInstructions>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentInstructionsXgt && len(kapp0.List) == 1 { // `<currentInstructions>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 1888, "{| rule isCurrentInstructionsCell(`<currentInstructions>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1889
	// source: ? @?
	// {| rule isCurrentInstructionsCell(#KToken(#token("CurrentInstructionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentInstructionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1889, "{| rule isCurrentInstructionsCell(#KToken(#token(\"CurrentInstructionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1890
	// source: ? @?
	// {| rule isCurrentInstructionsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1890, "{| rule isCurrentInstructionsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLocalMemCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1891
	// source: ? @?
	// {| rule isLocalMemCell(#KToken(#token("LocalMemCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalMemCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1891, "{| rule isLocalMemCell(#KToken(#token(\"LocalMemCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1892
	// source: ? @?
	// {| rule isLocalMemCell(`<localMem>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalMemXgt && len(kapp0.List) == 1 { // `<localMem>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 1892, "{| rule isLocalMemCell(`<localMem>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1893
	// source: ? @?
	// {| rule isLocalMemCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1893, "{| rule isLocalMemCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1894
	// source: ? @?
	// {| rule isSCell(`<s>`(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsXgt && len(kapp0.List) == 1 { // `<s>`(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 1894, "{| rule isSCell(`<s>`(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1895
	// source: ? @?
	// {| rule isSCell(#KToken(#token("SCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1895, "{| rule isSCell(#KToken(#token(\"SCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1896
	// source: ? @?
	// {| rule isSCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1896, "{| rule isSCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsubcontract(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1897
	// source: iele.k @1418
	// {| rule #subcontract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_353,_354,_355) #as CONTRACT,_356),NAME)=>contractDefinitionList(CONTRACT,`.List{"contractDefinitionList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isContract(_356)),isInt(_353)),isString(_354)),isTopLevelDefinitions(_355)),isContractDefinition(CONTRACT)) ensures #token("true","Bool") [UNIQUE_ID(ad0a1ad84cf667d74eab46c99841d072559c5357cbd403a91fe9d0d28c1b5fdf) contentStartColumn(10) contentStartLine(1418) org.kframework.attributes.Location(Location(1418,10,1418,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_353,_354,_355) #as CONTRACT,_356)
		if varCONTRACT, t := kapp0.List[0].(*m.KApply); t && varCONTRACT.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(varCONTRACT.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,_353,_354,_355) as CONTRACT
			varNAME := varCONTRACT.List[0] // lhs KVariable NAME
			if _, t := varCONTRACT.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := varCONTRACT.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu355 := varCONTRACT.List[3] // lhs KVariable _355
					varXu356 := kapp0.List[1] // lhs KVariable _356
					if c2.Equals(varNAME) { // lhs KVariable, which reappears:NAME
						// REQUIRES
						eval2000, err2000 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err2000 != nil {
							return m.NoResult, err2000
						}
						eval2001, err2001 := evalIsContract( // isContract(_356)
							varXu356,
							config, -1)
						if err2001 != nil {
							return m.NoResult, err2001
						}
						eval2002, err2002 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_355)
							varXu355,
							config, -1)
						if err2002 != nil {
							return m.NoResult, err2002
						}
						eval2003, err2003 := evalIsContractDefinition( // isContractDefinition(CONTRACT)
							varCONTRACT,
							config, -1)
						if err2003 != nil {
							return m.NoResult, err2003
						}
						if (((m.IsTrue(eval2000)) &&
						   (m.IsTrue(eval2001)) /* && */ /* rhs precomputed isInt(_353) */  /* && */ /* rhs precomputed isString(_354) */ ) &&
						   (m.IsTrue(eval2002))) &&
						   (m.IsTrue(eval2003)) {
							// RHS
							traceRuleApply("FUNC", 1897, "{| rule #subcontract(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_353,_354,_355) #as CONTRACT,_356),NAME)=>contractDefinitionList(CONTRACT,`.List{\"contractDefinitionList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isContract(_356)),isInt(_353)),isString(_354)),isTopLevelDefinitions(_355)),isContractDefinition(CONTRACT)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad0a1ad84cf667d74eab46c99841d072559c5357cbd403a91fe9d0d28c1b5fdf) contentStartColumn(10) contentStartLine(1418) org.kframework.attributes.Location(Location(1418,10,1418,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return &m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
								varCONTRACT,
								&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #1898
	// source: iele.k @1419
	// {| rule #subcontract(contractDefinitionList(CONTRACT,CONTRACTS),NAME)=>contractDefinitionList(CONTRACT,#subcontract(CONTRACTS,NAME)) requires `_andBool_`(`_andBool_`(isIeleName(NAME),isContractDefinition(CONTRACT)),isContract(CONTRACTS)) ensures #token("true","Bool") [UNIQUE_ID(57da3e3427e6978e2113eabdd286d969fe248006de6036919cf70b17491f49cc) contentStartColumn(10) contentStartLine(1419) org.kframework.attributes.Location(Location(1419,10,1419,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(CONTRACT,CONTRACTS)
		varCONTRACT := kapp0.List[0] // lhs KVariable CONTRACT
		varCONTRACTS := kapp0.List[1] // lhs KVariable CONTRACTS
		varNAME := c2 // lhs KVariable NAME
		// REQUIRES
		eval2004, err2004 := evalIsIeleName( // isIeleName(NAME)
			varNAME,
			config, -1)
		if err2004 != nil {
			return m.NoResult, err2004
		}
		eval2005, err2005 := evalIsContractDefinition( // isContractDefinition(CONTRACT)
			varCONTRACT,
			config, -1)
		if err2005 != nil {
			return m.NoResult, err2005
		}
		eval2006, err2006 := evalIsContract( // isContract(CONTRACTS)
			varCONTRACTS,
			config, -1)
		if err2006 != nil {
			return m.NoResult, err2006
		}
		if ((m.IsTrue(eval2004)) &&
		   (m.IsTrue(eval2005))) &&
		   (m.IsTrue(eval2006)) {
			// RHS
			traceRuleApply("FUNC", 1898, "{| rule #subcontract(contractDefinitionList(CONTRACT,CONTRACTS),NAME)=>contractDefinitionList(CONTRACT,#subcontract(CONTRACTS,NAME)) requires `_andBool_`(`_andBool_`(isIeleName(NAME),isContractDefinition(CONTRACT)),isContract(CONTRACTS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57da3e3427e6978e2113eabdd286d969fe248006de6036919cf70b17491f49cc) contentStartColumn(10) contentStartLine(1419) org.kframework.attributes.Location(Location(1419,10,1419,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval2007, err2007 := evalXhashsubcontract( // #subcontract(CONTRACTS,NAME)
				varCONTRACTS,
				varNAME,
				config, -1)
			if err2007 != nil {
				return m.NoResult, err2007
			}
			return &m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
				varCONTRACT,
				eval2007,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsubcontract", args: []m.K{c1, c2}}
}

func evalInitSCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1899
	// source: domains.k @1337
	// {| rule initSCell(_39)=>`<s>`(#applyRule(#token("regular","#RuleTag"))) requires isMap(_39) ensures #token("true","Bool") [UNIQUE_ID(0258cd4989a4e677b830e0c0b1bb66fda62ca76eb24d3e18864b6c3b727162a5) contentStartColumn(10) contentStartLine(1337) org.kframework.attributes.Location(Location(1337,10,1337,44)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu39, t := c.(*m.Map); t && varXu39.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES precomputed isMap(_39)
		// RHS
		traceRuleApply("FUNC", 1899, "{| rule initSCell(_39)=>`<s>`(#applyRule(#token(\"regular\",\"#RuleTag\"))) requires isMap(_39) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0258cd4989a4e677b830e0c0b1bb66fda62ca76eb24d3e18864b6c3b727162a5) contentStartColumn(10) contentStartLine(1337) org.kframework.attributes.Location(Location(1337,10,1337,44)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXltsXgt, List: []m.K{ // as-is <s>
			&m.KApply{Label: m.LblXhashapplyRule, List: []m.K{ // as-is #applyRule
				/* rhs KToken */ &m.KToken{Sort: m.SortXhashRuleTag, Value: "regular"},
			}},
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInitSCell", args: []m.K{c}}
}

func evalXuXxorXpercentIntXuXuXuINT(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.powmod
	lbl := m.LblXuXxorXpercentIntXuXuXuINT // _^%Int___INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.powmod(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.powmod, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXxorXpercentIntXuXuXuINT", args: []m.K{c1, c2, c3}}
}

func evalIsDifficultyCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1900
	// source: ? @?
	// {| rule isDifficultyCellOpt(#KToken(#token("DifficultyCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDifficultyCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1900, "{| rule isDifficultyCellOpt(#KToken(#token(\"DifficultyCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1901
	// source: ? @?
	// {| rule isDifficultyCellOpt(#KToken(#token("DifficultyCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDifficultyCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1901, "{| rule isDifficultyCellOpt(#KToken(#token(\"DifficultyCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1902
	// source: ? @?
	// {| rule isDifficultyCellOpt(noDifficultyCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoDifficultyCell && len(kapp0.List) == 0 { // noDifficultyCell(.KList)
		// RHS
		traceRuleApply("FUNC", 1902, "{| rule isDifficultyCellOpt(noDifficultyCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1903
	// source: ? @?
	// {| rule isDifficultyCellOpt(`<difficulty>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdifficultyXgt && len(kapp0.List) == 1 { // `<difficulty>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1903, "{| rule isDifficultyCellOpt(`<difficulty>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1904
	// source: ? @?
	// {| rule isDifficultyCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1904, "{| rule isDifficultyCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsWellFormednessScheduleCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1905
	// source: ? @?
	// {| rule isWellFormednessScheduleCell(#KToken(#token("WellFormednessScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1905, "{| rule isWellFormednessScheduleCell(#KToken(#token(\"WellFormednessScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1906
	// source: ? @?
	// {| rule isWellFormednessScheduleCell(`<well-formedness-schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXhyphenscheduleXgt && len(kapp0.List) == 1 { // `<well-formedness-schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2008, err2008 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err2008 != nil {
			return m.NoResult, err2008
		}
		if m.IsTrue(eval2008) {
			// RHS
			traceRuleApply("FUNC", 1906, "{| rule isWellFormednessScheduleCell(`<well-formedness-schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1907
	// source: ? @?
	// {| rule isWellFormednessScheduleCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1907, "{| rule isWellFormednessScheduleCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashstatXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.stat
	lbl := m.LblXhashstatXlparenXuXrparenXuKXhyphenIO // #stat(_)_K-IO
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.stat(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.stat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashstatXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalIsFunctionsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1908
	// source: ? @?
	// {| rule isFunctionsCell(`<functions>`(K0))=>#token("true","Bool") requires isFunctionCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionsXgt && len(kapp0.List) == 1 { // `<functions>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortFunctionCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isFunctionCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 1908, "{| rule isFunctionsCell(`<functions>`(K0))=>#token(\"true\",\"Bool\") requires isFunctionCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1909
	// source: ? @?
	// {| rule isFunctionsCell(#KToken(#token("FunctionsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1909, "{| rule isFunctionsCell(#KToken(#token(\"FunctionsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1910
	// source: ? @?
	// {| rule isFunctionsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1910, "{| rule isFunctionsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTopLevelDefinitions(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1911
	// source: ? @?
	// {| rule isTopLevelDefinitions(#KToken(#token("TopLevelDefinitions","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTopLevelDefinitions { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1911, "{| rule isTopLevelDefinitions(#KToken(#token(\"TopLevelDefinitions\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1912
	// source: ? @?
	// {| rule isTopLevelDefinitions(topLevelDefinitionList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isTopLevelDefinition(K0),isTopLevelDefinitions(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTopLevelDefinitionList && len(kapp0.List) == 2 { // topLevelDefinitionList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2009, err2009 := evalIsTopLevelDefinition( // isTopLevelDefinition(K0)
			varK0,
			config, -1)
		if err2009 != nil {
			return m.NoResult, err2009
		}
		eval2010, err2010 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(K1)
			varK1,
			config, -1)
		if err2010 != nil {
			return m.NoResult, err2010
		}
		if (m.IsTrue(eval2009)) &&
		   (m.IsTrue(eval2010)) {
			// RHS
			traceRuleApply("FUNC", 1912, "{| rule isTopLevelDefinitions(topLevelDefinitionList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isTopLevelDefinition(K0),isTopLevelDefinitions(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1913
	// source: ? @?
	// {| rule isTopLevelDefinitions(`.List{"topLevelDefinitionList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"topLevelDefinitionList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 1913, "{| rule isTopLevelDefinitions(`.List{\"topLevelDefinitionList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1914
	// source: ? @?
	// {| rule isTopLevelDefinitions(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1914, "{| rule isTopLevelDefinitions(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSetXcolondifference(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.difference
	lbl := m.LblSetXcolondifference // Set:difference
	sort := m.SortSet
	if hookRes, hookErr := setHooks.difference(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.difference, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSetXcolondifference", args: []m.K{c1, c2}}
}

func evalIsCallOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1915
	// source: ? @?
	// {| rule isCallOp(`CALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLDYN && len(kapp0.List) == 2 { // `CALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 1915, "{| rule isCallOp(`CALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1916
	// source: ? @?
	// {| rule isCallOp(`STATICCALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALL && len(kapp0.List) == 3 { // `STATICCALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 1916, "{| rule isCallOp(`STATICCALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1917
	// source: ? @?
	// {| rule isCallOp(#KToken(#token("CallOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1917, "{| rule isCallOp(#KToken(#token(\"CallOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1918
	// source: ? @?
	// {| rule isCallOp(`CALLADDRESS`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLADDRESS && len(kapp0.List) == 1 { // `CALLADDRESS`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1918, "{| rule isCallOp(`CALLADDRESS`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1919
	// source: ? @?
	// {| rule isCallOp(`CALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALL && len(kapp0.List) == 3 { // `CALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 1919, "{| rule isCallOp(`CALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #1920
	// source: ? @?
	// {| rule isCallOp(`STATICCALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALLDYN && len(kapp0.List) == 2 { // `STATICCALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 1920, "{| rule isCallOp(`STATICCALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #1921
	// source: ? @?
	// {| rule isCallOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1921, "{| rule isCallOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsProgramSizeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1922
	// source: ? @?
	// {| rule isProgramSizeCell(`<programSize>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramSizeXgt && len(kapp0.List) == 1 { // `<programSize>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 1922, "{| rule isProgramSizeCell(`<programSize>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1923
	// source: ? @?
	// {| rule isProgramSizeCell(#KToken(#token("ProgramSizeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramSizeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1923, "{| rule isProgramSizeCell(#KToken(#token(\"ProgramSizeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1924
	// source: ? @?
	// {| rule isProgramSizeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1924, "{| rule isProgramSizeCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsStrategy(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1925
	// source: ? @?
	// {| rule isStrategy(#STUCK(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashSTUCK && len(kapp0.List) == 0 { // #STUCK(.KList)
		// RHS
		traceRuleApply("FUNC", 1925, "{| rule isStrategy(#STUCK(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1926
	// source: ? @?
	// {| rule isStrategy(#appliedRule(K0))=>#token("true","Bool") requires `is#RuleTag`(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashappliedRule && len(kapp0.List) == 1 { // #appliedRule(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2011, err2011 := evalIsXhashRuleTag( // `is#RuleTag`(K0)
			varK0,
			config, -1)
		if err2011 != nil {
			return m.NoResult, err2011
		}
		if m.IsTrue(eval2011) {
			// RHS
			traceRuleApply("FUNC", 1926, "{| rule isStrategy(#appliedRule(K0))=>#token(\"true\",\"Bool\") requires `is#RuleTag`(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1927
	// source: ? @?
	// {| rule isStrategy(#KToken(#token("Strategy","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStrategy { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 1927, "{| rule isStrategy(#KToken(#token(\"Strategy\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #1928
	// source: ? @?
	// {| rule isStrategy(#applyRule(K0))=>#token("true","Bool") requires `is#RuleTag`(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashapplyRule && len(kapp0.List) == 1 { // #applyRule(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2012, err2012 := evalIsXhashRuleTag( // `is#RuleTag`(K0)
			varK0,
			config, -1)
		if err2012 != nil {
			return m.NoResult, err2012
		}
		if m.IsTrue(eval2012) {
			// RHS
			traceRuleApply("FUNC", 1928, "{| rule isStrategy(#applyRule(K0))=>#token(\"true\",\"Bool\") requires `is#RuleTag`(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #1929
	// source: ? @?
	// {| rule isStrategy(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 1929, "{| rule isStrategy(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: KEQUAL.ite
	lbl := m.LblXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL // #if_#then_#else_#fi_K-EQUAL
	sort := m.SortK
	if hookRes, hookErr := kequalHooks.ite(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KEQUAL.ite, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #1930
	// source: domains.k @783
	// {| rule `#if_#then_#else_#fi_K-EQUAL`(C,_11,B2)=>B2 requires `_andBool_`(isBool(C),`notBool_`(C)) ensures #token("true","Bool") [UNIQUE_ID(d46b5ae094d17de19ef9725da497c32e21813c6e4b5a0d6a2c4b03bd55bb312c) contentStartColumn(8) contentStartLine(783) org.kframework.attributes.Location(Location(783,8,783,64)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varC, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		doNothing(c2) // varXu11 := c2 // lhs KVariable not used
		varB2 := c3 // lhs KVariable B2
		// REQUIRES
		if /* rhs precomputed isBool(C) */ /* && */
		   !(m.IsTrue(varC)) {
			// RHS
			traceRuleApply("FUNC", 1930, "{| rule `#if_#then_#else_#fi_K-EQUAL`(C,_11,B2)=>B2 requires `_andBool_`(isBool(C),`notBool_`(C)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d46b5ae094d17de19ef9725da497c32e21813c6e4b5a0d6a2c4b03bd55bb312c) contentStartColumn(8) contentStartLine(783) org.kframework.attributes.Location(Location(783,8,783,64)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return varB2, nil
		}
	}

	// rule #1931
	// source: domains.k @782
	// {| rule `#if_#then_#else_#fi_K-EQUAL`(C,B1,_10)=>B1 requires `_andBool_`(isBool(C),C) ensures #token("true","Bool") [UNIQUE_ID(0883a4d4051090478d6b8a7ac8d4e0e15e7708308fa24e63137b9ac7e87383aa) contentStartColumn(8) contentStartLine(782) org.kframework.attributes.Location(Location(782,8,782,56)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varC, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		varB1 := c2 // lhs KVariable B1
		doNothing(c3) // varXu10 := c3 // lhs KVariable not used
		// REQUIRES
		if /* rhs precomputed isBool(C) */ /* && */
		   m.IsTrue(varC) {
			// RHS
			traceRuleApply("FUNC", 1931, "{| rule `#if_#then_#else_#fi_K-EQUAL`(C,B1,_10)=>B1 requires `_andBool_`(isBool(C),C) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0883a4d4051090478d6b8a7ac8d4e0e15e7708308fa24e63137b9ac7e87383aa) contentStartColumn(8) contentStartLine(782) org.kframework.attributes.Location(Location(782,8,782,56)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return varB1, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL", args: []m.K{c1, c2, c3}}
}

func evalInitCodeCell(config m.K, guard int) (m.K, error) {
	// rule #1932
	// source: ? @?
	// {| rule initCodeCell(.KList)=>`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(69884668630b6dda8387b80cd9af5030e4e0827e78e5e989aef2acc2afbce53d) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 1932, "{| rule initCodeCell(.KList)=>`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),#token(\"0\",\"Int\"),#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),#token(\"0\",\"Int\")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(69884668630b6dda8387b80cd9af5030e4e0827e78e5e989aef2acc2afbce53d) initializer()] |}")
	return &m.KApply{Label: m.LblXltcodeXgt, List: []m.K{ // as-is <code>
		&m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
			&m.KApply{Label: m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, List: []m.K{ // as-is contract_!__{_}_IELE-CONFIGURATION
				/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.Wallet"},
				/* rhs KToken */ m.NewIntFromString("0"),
				/* rhs KToken */ m.NewString(""),
				&m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
					&m.KApply{Label: m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is definepublic_{_}_IELE-COMMON
						&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
							&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
								/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
							}},
							/* rhs KToken */ m.NewIntFromString("0"),
						}},
						&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
							&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
								&m.KApply{Label: m.LblRetXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ret__IELE-COMMON
									&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
									}},
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
								}},
							}},
							&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
							}},
						}},
					}},
					&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
					}},
				}},
			}},
			&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
			}},
		}},
	}}, nil

}

//var constInitCodeCell K = evalInitCodeCell(m.InternedBottom)

func evalXuXplusXdotXplusIeleNameXuXuIELEXhyphenBINARY(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #1933
	// source: iele-binary.k @167
	// {| rule `_+.+IeleName__IELE-BINARY`(N,M)=>`String2IeleName`(`_+String__STRING`(`_+String__STRING`(`IeleName2String`(N),#token("\".\"","String")),`IeleName2String`(M))) requires `_andBool_`(isIeleName(M),isIeleName(N)) ensures #token("true","Bool") [UNIQUE_ID(afd85a7cc93ed8205db2014bc7907efcfc267d0ef4f7c851252a4a340fe3410a) contentStartColumn(10) contentStartLine(167) org.kframework.attributes.Location(Location(167,10,167,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varN := c1 // lhs KVariable N
		varM := c2 // lhs KVariable M
		// REQUIRES
		eval2013, err2013 := evalIsIeleName( // isIeleName(M)
			varM,
			config, -1)
		if err2013 != nil {
			return m.NoResult, err2013
		}
		eval2014, err2014 := evalIsIeleName( // isIeleName(N)
			varN,
			config, -1)
		if err2014 != nil {
			return m.NoResult, err2014
		}
		if (m.IsTrue(eval2013)) &&
		   (m.IsTrue(eval2014)) {
			// RHS
			traceRuleApply("FUNC", 1933, "{| rule `_+.+IeleName__IELE-BINARY`(N,M)=>`String2IeleName`(`_+String__STRING`(`_+String__STRING`(`IeleName2String`(N),#token(\"\\\".\\\"\",\"String\")),`IeleName2String`(M))) requires `_andBool_`(isIeleName(M),isIeleName(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(afd85a7cc93ed8205db2014bc7907efcfc267d0ef4f7c851252a4a340fe3410a) contentStartColumn(10) contentStartLine(167) org.kframework.attributes.Location(Location(167,10,167,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2018, err2018 := evalIeleName2String( // `IeleName2String`(N)
				varN,
				config, -1)
			if err2018 != nil {
				return m.NoResult, err2018
			}
			eval2017, err2017 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(`IeleName2String`(N),#token("\".\"","String"))
				eval2018,
				/* rhs KToken */ m.NewString("."),
				config, -1)
			if err2017 != nil {
				return m.NoResult, err2017
			}
			eval2019, err2019 := evalIeleName2String( // `IeleName2String`(M)
				varM,
				config, -1)
			if err2019 != nil {
				return m.NoResult, err2019
			}
			eval2016, err2016 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(`_+String__STRING`(`IeleName2String`(N),#token("\".\"","String")),`IeleName2String`(M))
				eval2017,
				eval2019,
				config, -1)
			if err2016 != nil {
				return m.NoResult, err2016
			}
			eval2015, err2015 := evalString2IeleName( // `String2IeleName`(`_+String__STRING`(`_+String__STRING`(`IeleName2String`(N),#token("\".\"","String")),`IeleName2String`(M)))
				eval2016,
				config, -1)
			if err2015 != nil {
				return m.NoResult, err2015
			}
			return eval2015, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusXdotXplusIeleNameXuXuIELEXhyphenBINARY", args: []m.K{c1, c2}}
}

func evalXhashdasmOpCode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #1934
	// source: iele-binary.k @440
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_50,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`STATICCALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_50,#token("245","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d009614d8c9962d77c07a59d07ad735cc68d38bb08e1db07490418551ec5c97c) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_50,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu50, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											// REQUIRES
											eval2020, err2020 := evalIsWordStack( // isWordStack(WS)
												varWS,
												config, -1)
											if err2020 != nil {
												return m.NoResult, err2020
											}
											eval2021, err2021 := evalXuXeqXeqIntXu( // `_==Int_`(_50,#token("245","Int"))
												varXu50,
												/* rhs KToken */ m.NewIntFromString("245"),
												config, -1)
											if err2021 != nil {
												return m.NoResult, err2021
											}
											if (/* rhs precomputed isInt(W4) */ /* && */
											   m.IsTrue(eval2020) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
											   (m.IsTrue(eval2021)) {
												// RHS
												traceRuleApply("FUNC", 1934, "{| rule #dasmOpCode(`_:__IELE-DATA`(_50,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`STATICCALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_50,#token(\"245\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d009614d8c9962d77c07a59d07ad735cc68d38bb08e1db07490418551ec5c97c) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
												eval2023, err2023 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
													varW1,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2023 != nil {
													return m.NoResult, err2023
												}
												eval2022, err2022 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
													eval2023,
													varW2,
													config, -1)
												if err2022 != nil {
													return m.NoResult, err2022
												}
												eval2025, err2025 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
													varW3,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2025 != nil {
													return m.NoResult, err2025
												}
												eval2024, err2024 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
													eval2025,
													varW4,
													config, -1)
												if err2024 != nil {
													return m.NoResult, err2024
												}
												return &m.KApply{Label: m.LblSTATICCALLDYN, List: []m.K{ // as-is STATICCALLDYN
													eval2022,
													eval2024,
												}}, nil
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1935
	// source: iele-binary.k @387
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_123,_692))=>`NE`(.KList) requires `_andBool_`(isWordStack(_692),`_==Int_`(_123,#token("15","Int"))) ensures #token("true","Bool") [UNIQUE_ID(26fb798c1b488397ebb8c2d6373d739c76b0e4f22d21ad6d1a18bed1ae715479) contentStartColumn(10) contentStartLine(387) org.kframework.attributes.Location(Location(387,10,387,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_123,_692)
		if varXu123, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu692 := kapp0.List[1] // lhs KVariable _692
			// REQUIRES
			eval2026, err2026 := evalIsWordStack( // isWordStack(_692)
				varXu692,
				config, -1)
			if err2026 != nil {
				return m.NoResult, err2026
			}
			eval2027, err2027 := evalXuXeqXeqIntXu( // `_==Int_`(_123,#token("15","Int"))
				varXu123,
				/* rhs KToken */ m.NewIntFromString("15"),
				config, -1)
			if err2027 != nil {
				return m.NoResult, err2027
			}
			if (m.IsTrue(eval2026)) &&
			   (m.IsTrue(eval2027)) {
				// RHS
				traceRuleApply("FUNC", 1935, "{| rule #dasmOpCode(`_:__IELE-DATA`(_123,_692))=>`NE`(.KList) requires `_andBool_`(isWordStack(_692),`_==Int_`(_123,#token(\"15\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(26fb798c1b488397ebb8c2d6373d739c76b0e4f22d21ad6d1a18bed1ae715479) contentStartColumn(10) contentStartLine(387) org.kframework.attributes.Location(Location(387,10,387,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblNE, List: []m.K{ // as-is NE
				}}, nil
			}
		}
	}

	// rule #1936
	// source: iele-binary.k @409
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_116,_656))=>`EXTCODESIZE`(.KList) requires `_andBool_`(isWordStack(_656),`_==Int_`(_116,#token("59","Int"))) ensures #token("true","Bool") [UNIQUE_ID(33c8dd2650926198d37566d5b37ae89b0116ca06ebbb099db39e5c65a2d74999) contentStartColumn(10) contentStartLine(409) org.kframework.attributes.Location(Location(409,10,409,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_116,_656)
		if varXu116, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu656 := kapp0.List[1] // lhs KVariable _656
			// REQUIRES
			eval2028, err2028 := evalIsWordStack( // isWordStack(_656)
				varXu656,
				config, -1)
			if err2028 != nil {
				return m.NoResult, err2028
			}
			eval2029, err2029 := evalXuXeqXeqIntXu( // `_==Int_`(_116,#token("59","Int"))
				varXu116,
				/* rhs KToken */ m.NewIntFromString("59"),
				config, -1)
			if err2029 != nil {
				return m.NoResult, err2029
			}
			if (m.IsTrue(eval2028)) &&
			   (m.IsTrue(eval2029)) {
				// RHS
				traceRuleApply("FUNC", 1936, "{| rule #dasmOpCode(`_:__IELE-DATA`(_116,_656))=>`EXTCODESIZE`(.KList) requires `_andBool_`(isWordStack(_656),`_==Int_`(_116,#token(\"59\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33c8dd2650926198d37566d5b37ae89b0116ca06ebbb099db39e5c65a2d74999) contentStartColumn(10) contentStartLine(409) org.kframework.attributes.Location(Location(409,10,409,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblEXTCODESIZE, List: []m.K{ // as-is EXTCODESIZE
				}}, nil
			}
		}
	}

	// rule #1937
	// source: iele-binary.k @378
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_63,_644))=>`DIV`(.KList) requires `_andBool_`(isWordStack(_644),`_==Int_`(_63,#token("4","Int"))) ensures #token("true","Bool") [UNIQUE_ID(9248b00cea68973154cb5bf1e7cdce67b02f57c26fdd33c109ff1374b4f5539a) contentStartColumn(10) contentStartLine(378) org.kframework.attributes.Location(Location(378,10,378,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_63,_644)
		if varXu63, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu644 := kapp0.List[1] // lhs KVariable _644
			// REQUIRES
			eval2030, err2030 := evalIsWordStack( // isWordStack(_644)
				varXu644,
				config, -1)
			if err2030 != nil {
				return m.NoResult, err2030
			}
			eval2031, err2031 := evalXuXeqXeqIntXu( // `_==Int_`(_63,#token("4","Int"))
				varXu63,
				/* rhs KToken */ m.NewIntFromString("4"),
				config, -1)
			if err2031 != nil {
				return m.NoResult, err2031
			}
			if (m.IsTrue(eval2030)) &&
			   (m.IsTrue(eval2031)) {
				// RHS
				traceRuleApply("FUNC", 1937, "{| rule #dasmOpCode(`_:__IELE-DATA`(_63,_644))=>`DIV`(.KList) requires `_andBool_`(isWordStack(_644),`_==Int_`(_63,#token(\"4\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9248b00cea68973154cb5bf1e7cdce67b02f57c26fdd33c109ff1374b4f5539a) contentStartColumn(10) contentStartLine(378) org.kframework.attributes.Location(Location(378,10,378,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblDIV, List: []m.K{ // as-is DIV
				}}, nil
			}
		}
	}

	// rule #1938
	// source: iele-binary.k @401
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_85,_606))=>`SHA3`(.KList) requires `_andBool_`(isWordStack(_606),`_==Int_`(_85,#token("32","Int"))) ensures #token("true","Bool") [UNIQUE_ID(8d63fe29883c123bdaa18760d92243a8b7e248f4d21aeb7f11a41756006a1172) contentStartColumn(10) contentStartLine(401) org.kframework.attributes.Location(Location(401,10,401,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_85,_606)
		if varXu85, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu606 := kapp0.List[1] // lhs KVariable _606
			// REQUIRES
			eval2032, err2032 := evalIsWordStack( // isWordStack(_606)
				varXu606,
				config, -1)
			if err2032 != nil {
				return m.NoResult, err2032
			}
			eval2033, err2033 := evalXuXeqXeqIntXu( // `_==Int_`(_85,#token("32","Int"))
				varXu85,
				/* rhs KToken */ m.NewIntFromString("32"),
				config, -1)
			if err2033 != nil {
				return m.NoResult, err2033
			}
			if (m.IsTrue(eval2032)) &&
			   (m.IsTrue(eval2033)) {
				// RHS
				traceRuleApply("FUNC", 1938, "{| rule #dasmOpCode(`_:__IELE-DATA`(_85,_606))=>`SHA3`(.KList) requires `_andBool_`(isWordStack(_606),`_==Int_`(_85,#token(\"32\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d63fe29883c123bdaa18760d92243a8b7e248f4d21aeb7f11a41756006a1172) contentStartColumn(10) contentStartLine(401) org.kframework.attributes.Location(Location(401,10,401,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSHA3, List: []m.K{ // as-is SHA3
				}}, nil
			}
		}
	}

	// rule #1939
	// source: iele-binary.k @416
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_45,_544))=>`MLOADN`(.KList) requires `_andBool_`(isWordStack(_544),`_==Int_`(_45,#token("80","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ab9e5e0af72db26369aec5a4bbe2d694184bf0c9b0a90e9f03f46fefabfac264) contentStartColumn(10) contentStartLine(416) org.kframework.attributes.Location(Location(416,10,416,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_45,_544)
		if varXu45, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu544 := kapp0.List[1] // lhs KVariable _544
			// REQUIRES
			eval2034, err2034 := evalIsWordStack( // isWordStack(_544)
				varXu544,
				config, -1)
			if err2034 != nil {
				return m.NoResult, err2034
			}
			eval2035, err2035 := evalXuXeqXeqIntXu( // `_==Int_`(_45,#token("80","Int"))
				varXu45,
				/* rhs KToken */ m.NewIntFromString("80"),
				config, -1)
			if err2035 != nil {
				return m.NoResult, err2035
			}
			if (m.IsTrue(eval2034)) &&
			   (m.IsTrue(eval2035)) {
				// RHS
				traceRuleApply("FUNC", 1939, "{| rule #dasmOpCode(`_:__IELE-DATA`(_45,_544))=>`MLOADN`(.KList) requires `_andBool_`(isWordStack(_544),`_==Int_`(_45,#token(\"80\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab9e5e0af72db26369aec5a4bbe2d694184bf0c9b0a90e9f03f46fefabfac264) contentStartColumn(10) contentStartLine(416) org.kframework.attributes.Location(Location(416,10,416,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMLOADN, List: []m.K{ // as-is MLOADN
				}}, nil
			}
		}
	}

	// rule #1940
	// source: iele-binary.k @438
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_129,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`CALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_129,#token("243","Int"))) ensures #token("true","Bool") [UNIQUE_ID(fe2ed608692024544d409be1928959f03eaa59ea83e52705890fcdab5e089a5a) contentStartColumn(10) contentStartLine(438) org.kframework.attributes.Location(Location(438,10,438,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_129,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu129, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											// REQUIRES
											eval2036, err2036 := evalIsWordStack( // isWordStack(WS)
												varWS,
												config, -1)
											if err2036 != nil {
												return m.NoResult, err2036
											}
											eval2037, err2037 := evalXuXeqXeqIntXu( // `_==Int_`(_129,#token("243","Int"))
												varXu129,
												/* rhs KToken */ m.NewIntFromString("243"),
												config, -1)
											if err2037 != nil {
												return m.NoResult, err2037
											}
											if (/* rhs precomputed isInt(W4) */ /* && */
											   m.IsTrue(eval2036) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
											   (m.IsTrue(eval2037)) {
												// RHS
												traceRuleApply("FUNC", 1940, "{| rule #dasmOpCode(`_:__IELE-DATA`(_129,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`CALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_129,#token(\"243\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fe2ed608692024544d409be1928959f03eaa59ea83e52705890fcdab5e089a5a) contentStartColumn(10) contentStartLine(438) org.kframework.attributes.Location(Location(438,10,438,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
												eval2039, err2039 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
													varW1,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2039 != nil {
													return m.NoResult, err2039
												}
												eval2038, err2038 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
													eval2039,
													varW2,
													config, -1)
												if err2038 != nil {
													return m.NoResult, err2038
												}
												eval2041, err2041 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
													varW3,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2041 != nil {
													return m.NoResult, err2041
												}
												eval2040, err2040 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
													eval2041,
													varW4,
													config, -1)
												if err2040 != nil {
													return m.NoResult, err2040
												}
												return &m.KApply{Label: m.LblCALLDYN, List: []m.K{ // as-is CALLDYN
													eval2038,
													eval2040,
												}}, nil
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1941
	// source: iele-binary.k @403
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_65,_479))=>`BALANCE`(.KList) requires `_andBool_`(isWordStack(_479),`_==Int_`(_65,#token("49","Int"))) ensures #token("true","Bool") [UNIQUE_ID(62494b2102f0d091817cb9cb50dc4cd489ffbb332a730d657f41b057f9d41f10) contentStartColumn(10) contentStartLine(403) org.kframework.attributes.Location(Location(403,10,403,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_65,_479)
		if varXu65, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu479 := kapp0.List[1] // lhs KVariable _479
			// REQUIRES
			eval2042, err2042 := evalIsWordStack( // isWordStack(_479)
				varXu479,
				config, -1)
			if err2042 != nil {
				return m.NoResult, err2042
			}
			eval2043, err2043 := evalXuXeqXeqIntXu( // `_==Int_`(_65,#token("49","Int"))
				varXu65,
				/* rhs KToken */ m.NewIntFromString("49"),
				config, -1)
			if err2043 != nil {
				return m.NoResult, err2043
			}
			if (m.IsTrue(eval2042)) &&
			   (m.IsTrue(eval2043)) {
				// RHS
				traceRuleApply("FUNC", 1941, "{| rule #dasmOpCode(`_:__IELE-DATA`(_65,_479))=>`BALANCE`(.KList) requires `_andBool_`(isWordStack(_479),`_==Int_`(_65,#token(\"49\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62494b2102f0d091817cb9cb50dc4cd489ffbb332a730d657f41b057f9d41f10) contentStartColumn(10) contentStartLine(403) org.kframework.attributes.Location(Location(403,10,403,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblBALANCE, List: []m.K{ // as-is BALANCE
				}}, nil
			}
		}
	}

	// rule #1942
	// source: iele-binary.k @400
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_38,_574))=>`LOGARITHM2`(.KList) requires `_andBool_`(isWordStack(_574),`_==Int_`(_38,#token("28","Int"))) ensures #token("true","Bool") [UNIQUE_ID(2fa87357a1723aa8c818ba1109b59757b513b5ced6db7c3bc1275b0bfc985529) contentStartColumn(10) contentStartLine(400) org.kframework.attributes.Location(Location(400,10,400,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_38,_574)
		if varXu38, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu574 := kapp0.List[1] // lhs KVariable _574
			// REQUIRES
			eval2044, err2044 := evalIsWordStack( // isWordStack(_574)
				varXu574,
				config, -1)
			if err2044 != nil {
				return m.NoResult, err2044
			}
			eval2045, err2045 := evalXuXeqXeqIntXu( // `_==Int_`(_38,#token("28","Int"))
				varXu38,
				/* rhs KToken */ m.NewIntFromString("28"),
				config, -1)
			if err2045 != nil {
				return m.NoResult, err2045
			}
			if (m.IsTrue(eval2044)) &&
			   (m.IsTrue(eval2045)) {
				// RHS
				traceRuleApply("FUNC", 1942, "{| rule #dasmOpCode(`_:__IELE-DATA`(_38,_574))=>`LOGARITHM2`(.KList) requires `_andBool_`(isWordStack(_574),`_==Int_`(_38,#token(\"28\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fa87357a1723aa8c818ba1109b59757b513b5ced6db7c3bc1275b0bfc985529) contentStartColumn(10) contentStartLine(400) org.kframework.attributes.Location(Location(400,10,400,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOGARITHM2, List: []m.K{ // as-is LOGARITHM2
				}}, nil
			}
		}
	}

	// rule #1943
	// source: iele-binary.k @405
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_53,_640))=>`CALLER`(.KList) requires `_andBool_`(isWordStack(_640),`_==Int_`(_53,#token("51","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d9ea0dd0238b30b903f03a605ccf5c056a405539eb4f1f74555578c59fffd91f) contentStartColumn(10) contentStartLine(405) org.kframework.attributes.Location(Location(405,10,405,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_53,_640)
		if varXu53, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu640 := kapp0.List[1] // lhs KVariable _640
			// REQUIRES
			eval2046, err2046 := evalIsWordStack( // isWordStack(_640)
				varXu640,
				config, -1)
			if err2046 != nil {
				return m.NoResult, err2046
			}
			eval2047, err2047 := evalXuXeqXeqIntXu( // `_==Int_`(_53,#token("51","Int"))
				varXu53,
				/* rhs KToken */ m.NewIntFromString("51"),
				config, -1)
			if err2047 != nil {
				return m.NoResult, err2047
			}
			if (m.IsTrue(eval2046)) &&
			   (m.IsTrue(eval2047)) {
				// RHS
				traceRuleApply("FUNC", 1943, "{| rule #dasmOpCode(`_:__IELE-DATA`(_53,_640))=>`CALLER`(.KList) requires `_andBool_`(isWordStack(_640),`_==Int_`(_53,#token(\"51\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d9ea0dd0238b30b903f03a605ccf5c056a405539eb4f1f74555578c59fffd91f) contentStartColumn(10) contentStartLine(405) org.kframework.attributes.Location(Location(405,10,405,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblCALLER, List: []m.K{ // as-is CALLER
				}}, nil
			}
		}
	}

	// rule #1944
	// source: iele-binary.k @445
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_42,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`CALLADDRESS`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_42,#token("250","Int"))) ensures #token("true","Bool") [UNIQUE_ID(3b88ae43ee5484e6a833a5e8d2a3996cbc290850bd8819f71a886a9c903361ac) contentStartColumn(10) contentStartLine(445) org.kframework.attributes.Location(Location(445,10,445,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_42,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu42, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2048, err2048 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2048 != nil {
								return m.NoResult, err2048
							}
							eval2049, err2049 := evalXuXeqXeqIntXu( // `_==Int_`(_42,#token("250","Int"))
								varXu42,
								/* rhs KToken */ m.NewIntFromString("250"),
								config, -1)
							if err2049 != nil {
								return m.NoResult, err2049
							}
							if (m.IsTrue(eval2048) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2049)) {
								// RHS
								traceRuleApply("FUNC", 1944, "{| rule #dasmOpCode(`_:__IELE-DATA`(_42,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`CALLADDRESS`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_42,#token(\"250\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3b88ae43ee5484e6a833a5e8d2a3996cbc290850bd8819f71a886a9c903361ac) contentStartColumn(10) contentStartLine(445) org.kframework.attributes.Location(Location(445,10,445,79)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2051, err2051 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2051 != nil {
									return m.NoResult, err2051
								}
								eval2050, err2050 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2051,
									varW2,
									config, -1)
								if err2050 != nil {
									return m.NoResult, err2050
								}
								return &m.KApply{Label: m.LblCALLADDRESS, List: []m.K{ // as-is CALLADDRESS
									eval2050,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1945
	// source: iele-binary.k @410
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_101,_596))=>`BLOCKHASH`(.KList) requires `_andBool_`(isWordStack(_596),`_==Int_`(_101,#token("64","Int"))) ensures #token("true","Bool") [UNIQUE_ID(2477d2a0fe54da27a503270a4d22f866b9ac8a4ad2b3a802e8dbc258e01bd5ac) contentStartColumn(10) contentStartLine(410) org.kframework.attributes.Location(Location(410,10,410,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_101,_596)
		if varXu101, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu596 := kapp0.List[1] // lhs KVariable _596
			// REQUIRES
			eval2052, err2052 := evalIsWordStack( // isWordStack(_596)
				varXu596,
				config, -1)
			if err2052 != nil {
				return m.NoResult, err2052
			}
			eval2053, err2053 := evalXuXeqXeqIntXu( // `_==Int_`(_101,#token("64","Int"))
				varXu101,
				/* rhs KToken */ m.NewIntFromString("64"),
				config, -1)
			if err2053 != nil {
				return m.NoResult, err2053
			}
			if (m.IsTrue(eval2052)) &&
			   (m.IsTrue(eval2053)) {
				// RHS
				traceRuleApply("FUNC", 1945, "{| rule #dasmOpCode(`_:__IELE-DATA`(_101,_596))=>`BLOCKHASH`(.KList) requires `_andBool_`(isWordStack(_596),`_==Int_`(_101,#token(\"64\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2477d2a0fe54da27a503270a4d22f866b9ac8a4ad2b3a802e8dbc258e01bd5ac) contentStartColumn(10) contentStartLine(410) org.kframework.attributes.Location(Location(410,10,410,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblBLOCKHASH, List: []m.K{ // as-is BLOCKHASH
				}}, nil
			}
		}
	}

	// rule #1946
	// source: iele-binary.k @442
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_54,_694))=>`REVERT`(.KList) requires `_andBool_`(isWordStack(_694),`_==Int_`(_54,#token("247","Int"))) ensures #token("true","Bool") [UNIQUE_ID(05a033f56f74cfde5f62b8243e9a15bc87e6517af6204241c799272a8486bcba) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_54,_694)
		if varXu54, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu694 := kapp0.List[1] // lhs KVariable _694
			// REQUIRES
			eval2054, err2054 := evalIsWordStack( // isWordStack(_694)
				varXu694,
				config, -1)
			if err2054 != nil {
				return m.NoResult, err2054
			}
			eval2055, err2055 := evalXuXeqXeqIntXu( // `_==Int_`(_54,#token("247","Int"))
				varXu54,
				/* rhs KToken */ m.NewIntFromString("247"),
				config, -1)
			if err2055 != nil {
				return m.NoResult, err2055
			}
			if (m.IsTrue(eval2054)) &&
			   (m.IsTrue(eval2055)) {
				// RHS
				traceRuleApply("FUNC", 1946, "{| rule #dasmOpCode(`_:__IELE-DATA`(_54,_694))=>`REVERT`(.KList) requires `_andBool_`(isWordStack(_694),`_==Int_`(_54,#token(\"247\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(05a033f56f74cfde5f62b8243e9a15bc87e6517af6204241c799272a8486bcba) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblREVERT, List: []m.K{ // as-is REVERT
				}}, nil
			}
		}
	}

	// rule #1947
	// source: iele-binary.k @385
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_41,_576))=>`TWOS`(.KList) requires `_andBool_`(isWordStack(_576),`_==Int_`(_41,#token("12","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4a214d7a473c970165fe0ee0bf67869bd104c302a55a1aa1fcbb4e01ba46ed2e) contentStartColumn(10) contentStartLine(385) org.kframework.attributes.Location(Location(385,10,385,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_41,_576)
		if varXu41, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu576 := kapp0.List[1] // lhs KVariable _576
			// REQUIRES
			eval2056, err2056 := evalIsWordStack( // isWordStack(_576)
				varXu576,
				config, -1)
			if err2056 != nil {
				return m.NoResult, err2056
			}
			eval2057, err2057 := evalXuXeqXeqIntXu( // `_==Int_`(_41,#token("12","Int"))
				varXu41,
				/* rhs KToken */ m.NewIntFromString("12"),
				config, -1)
			if err2057 != nil {
				return m.NoResult, err2057
			}
			if (m.IsTrue(eval2056)) &&
			   (m.IsTrue(eval2057)) {
				// RHS
				traceRuleApply("FUNC", 1947, "{| rule #dasmOpCode(`_:__IELE-DATA`(_41,_576))=>`TWOS`(.KList) requires `_andBool_`(isWordStack(_576),`_==Int_`(_41,#token(\"12\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4a214d7a473c970165fe0ee0bf67869bd104c302a55a1aa1fcbb4e01ba46ed2e) contentStartColumn(10) contentStartLine(385) org.kframework.attributes.Location(Location(385,10,385,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblTWOS, List: []m.K{ // as-is TWOS
				}}, nil
			}
		}
	}

	// rule #1948
	// source: iele-binary.k @424
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_47,_472))=>`MOVE`(.KList) requires `_andBool_`(isWordStack(_472),`_==Int_`(_47,#token("96","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c2a12dd150296a6ce08d359cb04fb305cd49f5339ad35b408962e61790c7290c) contentStartColumn(10) contentStartLine(424) org.kframework.attributes.Location(Location(424,10,424,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_47,_472)
		if varXu47, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu472 := kapp0.List[1] // lhs KVariable _472
			// REQUIRES
			eval2058, err2058 := evalIsWordStack( // isWordStack(_472)
				varXu472,
				config, -1)
			if err2058 != nil {
				return m.NoResult, err2058
			}
			eval2059, err2059 := evalXuXeqXeqIntXu( // `_==Int_`(_47,#token("96","Int"))
				varXu47,
				/* rhs KToken */ m.NewIntFromString("96"),
				config, -1)
			if err2059 != nil {
				return m.NoResult, err2059
			}
			if (m.IsTrue(eval2058)) &&
			   (m.IsTrue(eval2059)) {
				// RHS
				traceRuleApply("FUNC", 1948, "{| rule #dasmOpCode(`_:__IELE-DATA`(_47,_472))=>`MOVE`(.KList) requires `_andBool_`(isWordStack(_472),`_==Int_`(_47,#token(\"96\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c2a12dd150296a6ce08d359cb04fb305cd49f5339ad35b408962e61790c7290c) contentStartColumn(10) contentStartLine(424) org.kframework.attributes.Location(Location(424,10,424,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMOVE, List: []m.K{ // as-is MOVE
				}}, nil
			}
		}
	}

	// rule #1949
	// source: iele-binary.k @392
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_104,_613))=>`EQ`(.KList) requires `_andBool_`(isWordStack(_613),`_==Int_`(_104,#token("20","Int"))) ensures #token("true","Bool") [UNIQUE_ID(702b0fe4e526c7699c2744ee0ef09a0daff8bb12c63c8be537c8cfc770a4e349) contentStartColumn(10) contentStartLine(392) org.kframework.attributes.Location(Location(392,10,392,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_104,_613)
		if varXu104, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu613 := kapp0.List[1] // lhs KVariable _613
			// REQUIRES
			eval2060, err2060 := evalIsWordStack( // isWordStack(_613)
				varXu613,
				config, -1)
			if err2060 != nil {
				return m.NoResult, err2060
			}
			eval2061, err2061 := evalXuXeqXeqIntXu( // `_==Int_`(_104,#token("20","Int"))
				varXu104,
				/* rhs KToken */ m.NewIntFromString("20"),
				config, -1)
			if err2061 != nil {
				return m.NoResult, err2061
			}
			if (m.IsTrue(eval2060)) &&
			   (m.IsTrue(eval2061)) {
				// RHS
				traceRuleApply("FUNC", 1949, "{| rule #dasmOpCode(`_:__IELE-DATA`(_104,_613))=>`EQ`(.KList) requires `_andBool_`(isWordStack(_613),`_==Int_`(_104,#token(\"20\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(702b0fe4e526c7699c2744ee0ef09a0daff8bb12c63c8be537c8cfc770a4e349) contentStartColumn(10) contentStartLine(392) org.kframework.attributes.Location(Location(392,10,392,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblEQ, List: []m.K{ // as-is EQ
				}}, nil
			}
		}
	}

	// rule #1950
	// source: iele-binary.k @441
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_40,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`RETURN`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_40,#token("246","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ab151aa2be3f3305c92f2d969c95c3ec6da37423f9025cae1e98f6c6d6f453e3) contentStartColumn(10) contentStartLine(441) org.kframework.attributes.Location(Location(441,10,441,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_40,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu40, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2062, err2062 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2062 != nil {
								return m.NoResult, err2062
							}
							eval2063, err2063 := evalXuXeqXeqIntXu( // `_==Int_`(_40,#token("246","Int"))
								varXu40,
								/* rhs KToken */ m.NewIntFromString("246"),
								config, -1)
							if err2063 != nil {
								return m.NoResult, err2063
							}
							if (m.IsTrue(eval2062) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2063)) {
								// RHS
								traceRuleApply("FUNC", 1950, "{| rule #dasmOpCode(`_:__IELE-DATA`(_40,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`RETURN`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_40,#token(\"246\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab151aa2be3f3305c92f2d969c95c3ec6da37423f9025cae1e98f6c6d6f453e3) contentStartColumn(10) contentStartLine(441) org.kframework.attributes.Location(Location(441,10,441,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2065, err2065 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2065 != nil {
									return m.NoResult, err2065
								}
								eval2064, err2064 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2065,
									varW2,
									config, -1)
								if err2064 != nil {
									return m.NoResult, err2064
								}
								return &m.KApply{Label: m.LblRETURN, List: []m.K{ // as-is RETURN
									eval2064,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1951
	// source: iele-binary.k @423
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_99,_616))=>`GAS`(.KList) requires `_andBool_`(isWordStack(_616),`_==Int_`(_99,#token("87","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d43c648e69c5ef64e75b53092dfc915087d981bb79de6112dd9f80b6ca318938) contentStartColumn(10) contentStartLine(423) org.kframework.attributes.Location(Location(423,10,423,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_99,_616)
		if varXu99, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu616 := kapp0.List[1] // lhs KVariable _616
			// REQUIRES
			eval2066, err2066 := evalIsWordStack( // isWordStack(_616)
				varXu616,
				config, -1)
			if err2066 != nil {
				return m.NoResult, err2066
			}
			eval2067, err2067 := evalXuXeqXeqIntXu( // `_==Int_`(_99,#token("87","Int"))
				varXu99,
				/* rhs KToken */ m.NewIntFromString("87"),
				config, -1)
			if err2067 != nil {
				return m.NoResult, err2067
			}
			if (m.IsTrue(eval2066)) &&
			   (m.IsTrue(eval2067)) {
				// RHS
				traceRuleApply("FUNC", 1951, "{| rule #dasmOpCode(`_:__IELE-DATA`(_99,_616))=>`GAS`(.KList) requires `_andBool_`(isWordStack(_616),`_==Int_`(_99,#token(\"87\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d43c648e69c5ef64e75b53092dfc915087d981bb79de6112dd9f80b6ca318938) contentStartColumn(10) contentStartLine(423) org.kframework.attributes.Location(Location(423,10,423,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblGAS, List: []m.K{ // as-is GAS
				}}, nil
			}
		}
	}

	// rule #1952
	// source: iele-binary.k @383
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_43,_643))=>`EXPMOD`(.KList) requires `_andBool_`(isWordStack(_643),`_==Int_`(_43,#token("10","Int"))) ensures #token("true","Bool") [UNIQUE_ID(805318a3dfeb6d402de0cd70066aaa2d1ad2f3c834b34bcf122d1aa3324745fc) contentStartColumn(10) contentStartLine(383) org.kframework.attributes.Location(Location(383,10,383,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_43,_643)
		if varXu43, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu643 := kapp0.List[1] // lhs KVariable _643
			// REQUIRES
			eval2068, err2068 := evalIsWordStack( // isWordStack(_643)
				varXu643,
				config, -1)
			if err2068 != nil {
				return m.NoResult, err2068
			}
			eval2069, err2069 := evalXuXeqXeqIntXu( // `_==Int_`(_43,#token("10","Int"))
				varXu43,
				/* rhs KToken */ m.NewIntFromString("10"),
				config, -1)
			if err2069 != nil {
				return m.NoResult, err2069
			}
			if (m.IsTrue(eval2068)) &&
			   (m.IsTrue(eval2069)) {
				// RHS
				traceRuleApply("FUNC", 1952, "{| rule #dasmOpCode(`_:__IELE-DATA`(_43,_643))=>`EXPMOD`(.KList) requires `_andBool_`(isWordStack(_643),`_==Int_`(_43,#token(\"10\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(805318a3dfeb6d402de0cd70066aaa2d1ad2f3c834b34bcf122d1aa3324745fc) contentStartColumn(10) contentStartLine(383) org.kframework.attributes.Location(Location(383,10,383,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblEXPMOD, List: []m.K{ // as-is EXPMOD
				}}, nil
			}
		}
	}

	// rule #1953
	// source: iele-binary.k @433
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_77,_612))=>`LOG3`(.KList) requires `_andBool_`(isWordStack(_612),`_==Int_`(_77,#token("163","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0feba8d6dfa427c4b18343da59915f02758970137ddb2b6bb1a5096222dbe137) contentStartColumn(10) contentStartLine(433) org.kframework.attributes.Location(Location(433,10,433,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_77,_612)
		if varXu77, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu612 := kapp0.List[1] // lhs KVariable _612
			// REQUIRES
			eval2070, err2070 := evalIsWordStack( // isWordStack(_612)
				varXu612,
				config, -1)
			if err2070 != nil {
				return m.NoResult, err2070
			}
			eval2071, err2071 := evalXuXeqXeqIntXu( // `_==Int_`(_77,#token("163","Int"))
				varXu77,
				/* rhs KToken */ m.NewIntFromString("163"),
				config, -1)
			if err2071 != nil {
				return m.NoResult, err2071
			}
			if (m.IsTrue(eval2070)) &&
			   (m.IsTrue(eval2071)) {
				// RHS
				traceRuleApply("FUNC", 1953, "{| rule #dasmOpCode(`_:__IELE-DATA`(_77,_612))=>`LOG3`(.KList) requires `_andBool_`(isWordStack(_612),`_==Int_`(_77,#token(\"163\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0feba8d6dfa427c4b18343da59915f02758970137ddb2b6bb1a5096222dbe137) contentStartColumn(10) contentStartLine(433) org.kframework.attributes.Location(Location(433,10,433,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOG3, List: []m.K{ // as-is LOG3
				}}, nil
			}
		}
	}

	// rule #1954
	// source: iele-binary.k @430
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_111,_609))=>`LOG0`(.KList) requires `_andBool_`(isWordStack(_609),`_==Int_`(_111,#token("160","Int"))) ensures #token("true","Bool") [UNIQUE_ID(f623defe5debe9f1b5fabced683a052217ec64e4aa517a0edc3d957b63629d09) contentStartColumn(10) contentStartLine(430) org.kframework.attributes.Location(Location(430,10,430,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_111,_609)
		if varXu111, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu609 := kapp0.List[1] // lhs KVariable _609
			// REQUIRES
			eval2072, err2072 := evalIsWordStack( // isWordStack(_609)
				varXu609,
				config, -1)
			if err2072 != nil {
				return m.NoResult, err2072
			}
			eval2073, err2073 := evalXuXeqXeqIntXu( // `_==Int_`(_111,#token("160","Int"))
				varXu111,
				/* rhs KToken */ m.NewIntFromString("160"),
				config, -1)
			if err2073 != nil {
				return m.NoResult, err2073
			}
			if (m.IsTrue(eval2072)) &&
			   (m.IsTrue(eval2073)) {
				// RHS
				traceRuleApply("FUNC", 1954, "{| rule #dasmOpCode(`_:__IELE-DATA`(_111,_609))=>`LOG0`(.KList) requires `_andBool_`(isWordStack(_609),`_==Int_`(_111,#token(\"160\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f623defe5debe9f1b5fabced683a052217ec64e4aa517a0edc3d957b63629d09) contentStartColumn(10) contentStartLine(430) org.kframework.attributes.Location(Location(430,10,430,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOG0, List: []m.K{ // as-is LOG0
				}}, nil
			}
		}
	}

	// rule #1955
	// source: iele-binary.k @417
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_106,_673))=>`MLOAD`(.KList) requires `_andBool_`(isWordStack(_673),`_==Int_`(_106,#token("81","Int"))) ensures #token("true","Bool") [UNIQUE_ID(7de1a74577e50186e0af49a263b3a6a0856bf1feaa639a2050bf7b9800ee19de) contentStartColumn(10) contentStartLine(417) org.kframework.attributes.Location(Location(417,10,417,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_106,_673)
		if varXu106, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu673 := kapp0.List[1] // lhs KVariable _673
			// REQUIRES
			eval2074, err2074 := evalIsWordStack( // isWordStack(_673)
				varXu673,
				config, -1)
			if err2074 != nil {
				return m.NoResult, err2074
			}
			eval2075, err2075 := evalXuXeqXeqIntXu( // `_==Int_`(_106,#token("81","Int"))
				varXu106,
				/* rhs KToken */ m.NewIntFromString("81"),
				config, -1)
			if err2075 != nil {
				return m.NoResult, err2075
			}
			if (m.IsTrue(eval2074)) &&
			   (m.IsTrue(eval2075)) {
				// RHS
				traceRuleApply("FUNC", 1955, "{| rule #dasmOpCode(`_:__IELE-DATA`(_106,_673))=>`MLOAD`(.KList) requires `_andBool_`(isWordStack(_673),`_==Int_`(_106,#token(\"81\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7de1a74577e50186e0af49a263b3a6a0856bf1feaa639a2050bf7b9800ee19de) contentStartColumn(10) contentStartLine(417) org.kframework.attributes.Location(Location(417,10,417,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMLOAD, List: []m.K{ // as-is MLOAD
				}}, nil
			}
		}
	}

	// rule #1956
	// source: iele-binary.k @397
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_60,_626))=>`NOT`(.KList) requires `_andBool_`(isWordStack(_626),`_==Int_`(_60,#token("25","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5de2a816b7587b30eac75bcda1886835007a60dbb05fc7db06ecd667f4dce91a) contentStartColumn(10) contentStartLine(397) org.kframework.attributes.Location(Location(397,10,397,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_60,_626)
		if varXu60, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu626 := kapp0.List[1] // lhs KVariable _626
			// REQUIRES
			eval2076, err2076 := evalIsWordStack( // isWordStack(_626)
				varXu626,
				config, -1)
			if err2076 != nil {
				return m.NoResult, err2076
			}
			eval2077, err2077 := evalXuXeqXeqIntXu( // `_==Int_`(_60,#token("25","Int"))
				varXu60,
				/* rhs KToken */ m.NewIntFromString("25"),
				config, -1)
			if err2077 != nil {
				return m.NoResult, err2077
			}
			if (m.IsTrue(eval2076)) &&
			   (m.IsTrue(eval2077)) {
				// RHS
				traceRuleApply("FUNC", 1956, "{| rule #dasmOpCode(`_:__IELE-DATA`(_60,_626))=>`NOT`(.KList) requires `_andBool_`(isWordStack(_626),`_==Int_`(_60,#token(\"25\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5de2a816b7587b30eac75bcda1886835007a60dbb05fc7db06ecd667f4dce91a) contentStartColumn(10) contentStartLine(397) org.kframework.attributes.Location(Location(397,10,397,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblNOT, List: []m.K{ // as-is NOT
				}}, nil
			}
		}
	}

	// rule #1957
	// source: iele-binary.k @389
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_58,_553))=>`GT`(.KList) requires `_andBool_`(isWordStack(_553),`_==Int_`(_58,#token("17","Int"))) ensures #token("true","Bool") [UNIQUE_ID(52adc7093f9ce1f08a8d8a03f43b9cac429e67849fdbe163943eb4679b4e37e7) contentStartColumn(10) contentStartLine(389) org.kframework.attributes.Location(Location(389,10,389,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_58,_553)
		if varXu58, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu553 := kapp0.List[1] // lhs KVariable _553
			// REQUIRES
			eval2078, err2078 := evalIsWordStack( // isWordStack(_553)
				varXu553,
				config, -1)
			if err2078 != nil {
				return m.NoResult, err2078
			}
			eval2079, err2079 := evalXuXeqXeqIntXu( // `_==Int_`(_58,#token("17","Int"))
				varXu58,
				/* rhs KToken */ m.NewIntFromString("17"),
				config, -1)
			if err2079 != nil {
				return m.NoResult, err2079
			}
			if (m.IsTrue(eval2078)) &&
			   (m.IsTrue(eval2079)) {
				// RHS
				traceRuleApply("FUNC", 1957, "{| rule #dasmOpCode(`_:__IELE-DATA`(_58,_553))=>`GT`(.KList) requires `_andBool_`(isWordStack(_553),`_==Int_`(_58,#token(\"17\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(52adc7093f9ce1f08a8d8a03f43b9cac429e67849fdbe163943eb4679b4e37e7) contentStartColumn(10) contentStartLine(389) org.kframework.attributes.Location(Location(389,10,389,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblGT, List: []m.K{ // as-is GT
				}}, nil
			}
		}
	}

	// rule #1958
	// source: iele-binary.k @432
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_57,_475))=>`LOG2`(.KList) requires `_andBool_`(isWordStack(_475),`_==Int_`(_57,#token("162","Int"))) ensures #token("true","Bool") [UNIQUE_ID(43fd687b006b7ed86db775d6c25187fd4f5c38f4c08e0d0e054eec82cbcbebba) contentStartColumn(10) contentStartLine(432) org.kframework.attributes.Location(Location(432,10,432,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_57,_475)
		if varXu57, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu475 := kapp0.List[1] // lhs KVariable _475
			// REQUIRES
			eval2080, err2080 := evalIsWordStack( // isWordStack(_475)
				varXu475,
				config, -1)
			if err2080 != nil {
				return m.NoResult, err2080
			}
			eval2081, err2081 := evalXuXeqXeqIntXu( // `_==Int_`(_57,#token("162","Int"))
				varXu57,
				/* rhs KToken */ m.NewIntFromString("162"),
				config, -1)
			if err2081 != nil {
				return m.NoResult, err2081
			}
			if (m.IsTrue(eval2080)) &&
			   (m.IsTrue(eval2081)) {
				// RHS
				traceRuleApply("FUNC", 1958, "{| rule #dasmOpCode(`_:__IELE-DATA`(_57,_475))=>`LOG2`(.KList) requires `_andBool_`(isWordStack(_475),`_==Int_`(_57,#token(\"162\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(43fd687b006b7ed86db775d6c25187fd4f5c38f4c08e0d0e054eec82cbcbebba) contentStartColumn(10) contentStartLine(432) org.kframework.attributes.Location(Location(432,10,432,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOG2, List: []m.K{ // as-is LOG2
				}}, nil
			}
		}
	}

	// rule #1959
	// source: iele-binary.k @406
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_107,_486))=>`CALLVALUE`(.KList) requires `_andBool_`(isWordStack(_486),`_==Int_`(_107,#token("52","Int"))) ensures #token("true","Bool") [UNIQUE_ID(f62988933c8f69a6c077b5fbcdedb26aa92ded1a6ae3399c3f19a6e9b34dd144) contentStartColumn(10) contentStartLine(406) org.kframework.attributes.Location(Location(406,10,406,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_107,_486)
		if varXu107, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu486 := kapp0.List[1] // lhs KVariable _486
			// REQUIRES
			eval2082, err2082 := evalIsWordStack( // isWordStack(_486)
				varXu486,
				config, -1)
			if err2082 != nil {
				return m.NoResult, err2082
			}
			eval2083, err2083 := evalXuXeqXeqIntXu( // `_==Int_`(_107,#token("52","Int"))
				varXu107,
				/* rhs KToken */ m.NewIntFromString("52"),
				config, -1)
			if err2083 != nil {
				return m.NoResult, err2083
			}
			if (m.IsTrue(eval2082)) &&
			   (m.IsTrue(eval2083)) {
				// RHS
				traceRuleApply("FUNC", 1959, "{| rule #dasmOpCode(`_:__IELE-DATA`(_107,_486))=>`CALLVALUE`(.KList) requires `_andBool_`(isWordStack(_486),`_==Int_`(_107,#token(\"52\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f62988933c8f69a6c077b5fbcdedb26aa92ded1a6ae3399c3f19a6e9b34dd144) contentStartColumn(10) contentStartLine(406) org.kframework.attributes.Location(Location(406,10,406,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblCALLVALUE, List: []m.K{ // as-is CALLVALUE
				}}, nil
			}
		}
	}

	// rule #1960
	// source: iele-binary.k @388
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_92,_706))=>`LT`(.KList) requires `_andBool_`(isWordStack(_706),`_==Int_`(_92,#token("16","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b7c9a476ef87c98812a0e14b510ba455f1d95ebb9bf19420455150db3b1d544d) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,388,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_92,_706)
		if varXu92, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu706 := kapp0.List[1] // lhs KVariable _706
			// REQUIRES
			eval2084, err2084 := evalIsWordStack( // isWordStack(_706)
				varXu706,
				config, -1)
			if err2084 != nil {
				return m.NoResult, err2084
			}
			eval2085, err2085 := evalXuXeqXeqIntXu( // `_==Int_`(_92,#token("16","Int"))
				varXu92,
				/* rhs KToken */ m.NewIntFromString("16"),
				config, -1)
			if err2085 != nil {
				return m.NoResult, err2085
			}
			if (m.IsTrue(eval2084)) &&
			   (m.IsTrue(eval2085)) {
				// RHS
				traceRuleApply("FUNC", 1960, "{| rule #dasmOpCode(`_:__IELE-DATA`(_92,_706))=>`LT`(.KList) requires `_andBool_`(isWordStack(_706),`_==Int_`(_92,#token(\"16\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b7c9a476ef87c98812a0e14b510ba455f1d95ebb9bf19420455150db3b1d544d) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,388,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLT, List: []m.K{ // as-is LT
				}}, nil
			}
		}
	}

	// rule #1961
	// source: iele-binary.k @443
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_90,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`LOCALCALL`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),`_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_90,#token("248","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c63145acee7be3a1b3adf4649cf7f05acc4ec320f49a614948c230537be64237) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_90,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))))
		if varXu90, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if kapp5, t := kapp4.List[1].(*m.KApply); t && kapp5.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp5.List) == 2 { // `_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))
												if varW5, t := kapp5.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
													if kapp6, t := kapp5.List[1].(*m.KApply); t && kapp6.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp6.List) == 2 { // `_:__IELE-DATA`(W6,WS)
														if varW6, t := kapp6.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
															varWS := kapp6.List[1] // lhs KVariable WS
															// REQUIRES
															eval2086, err2086 := evalIsWordStack( // isWordStack(WS)
																varWS,
																config, -1)
															if err2086 != nil {
																return m.NoResult, err2086
															}
															eval2087, err2087 := evalXuXeqXeqIntXu( // `_==Int_`(_90,#token("248","Int"))
																varXu90,
																/* rhs KToken */ m.NewIntFromString("248"),
																config, -1)
															if err2087 != nil {
																return m.NoResult, err2087
															}
															if (/* rhs precomputed isInt(W4) */ /* && */
															   m.IsTrue(eval2086) /* && */ /* rhs precomputed isInt(W6) */  /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W5) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
															   (m.IsTrue(eval2087)) {
																// RHS
																traceRuleApply("FUNC", 1961, "{| rule #dasmOpCode(`_:__IELE-DATA`(_90,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`LOCALCALL`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4),`_+Int_`(`_*Int__INT`(W5,#token(\"256\",\"Int\")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_90,#token(\"248\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c63145acee7be3a1b3adf4649cf7f05acc4ec320f49a614948c230537be64237) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
																eval2089, err2089 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
																	varW1,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2089 != nil {
																	return m.NoResult, err2089
																}
																eval2088, err2088 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
																	eval2089,
																	varW2,
																	config, -1)
																if err2088 != nil {
																	return m.NoResult, err2088
																}
																eval2091, err2091 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
																	varW3,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2091 != nil {
																	return m.NoResult, err2091
																}
																eval2090, err2090 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
																	eval2091,
																	varW4,
																	config, -1)
																if err2090 != nil {
																	return m.NoResult, err2090
																}
																eval2093, err2093 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W5,#token("256","Int"))
																	varW5,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2093 != nil {
																	return m.NoResult, err2093
																}
																eval2092, err2092 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)
																	eval2093,
																	varW6,
																	config, -1)
																if err2092 != nil {
																	return m.NoResult, err2092
																}
																return &m.KApply{Label: m.LblLOCALCALL, List: []m.K{ // as-is LOCALCALL
																	eval2088,
																	eval2090,
																	eval2092,
																}}, nil
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1962
	// source: iele-binary.k @391
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_51,_536))=>`GE`(.KList) requires `_andBool_`(isWordStack(_536),`_==Int_`(_51,#token("19","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0a66631a4de74cd0a8705095c1b315f3965bb045f386dec9e6bc5b6634ba2787) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_51,_536)
		if varXu51, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu536 := kapp0.List[1] // lhs KVariable _536
			// REQUIRES
			eval2094, err2094 := evalIsWordStack( // isWordStack(_536)
				varXu536,
				config, -1)
			if err2094 != nil {
				return m.NoResult, err2094
			}
			eval2095, err2095 := evalXuXeqXeqIntXu( // `_==Int_`(_51,#token("19","Int"))
				varXu51,
				/* rhs KToken */ m.NewIntFromString("19"),
				config, -1)
			if err2095 != nil {
				return m.NoResult, err2095
			}
			if (m.IsTrue(eval2094)) &&
			   (m.IsTrue(eval2095)) {
				// RHS
				traceRuleApply("FUNC", 1962, "{| rule #dasmOpCode(`_:__IELE-DATA`(_51,_536))=>`GE`(.KList) requires `_andBool_`(isWordStack(_536),`_==Int_`(_51,#token(\"19\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0a66631a4de74cd0a8705095c1b315f3965bb045f386dec9e6bc5b6634ba2787) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblGE, List: []m.K{ // as-is GE
				}}, nil
			}
		}
	}

	// rule #1963
	// source: iele-binary.k @394
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_108,_679))=>`AND`(.KList) requires `_andBool_`(isWordStack(_679),`_==Int_`(_108,#token("22","Int"))) ensures #token("true","Bool") [UNIQUE_ID(fe05270809712dfa5422cb62c0046350ddf7568d91a0680748cf7beabdd76cc9) contentStartColumn(10) contentStartLine(394) org.kframework.attributes.Location(Location(394,10,394,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_108,_679)
		if varXu108, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu679 := kapp0.List[1] // lhs KVariable _679
			// REQUIRES
			eval2096, err2096 := evalIsWordStack( // isWordStack(_679)
				varXu679,
				config, -1)
			if err2096 != nil {
				return m.NoResult, err2096
			}
			eval2097, err2097 := evalXuXeqXeqIntXu( // `_==Int_`(_108,#token("22","Int"))
				varXu108,
				/* rhs KToken */ m.NewIntFromString("22"),
				config, -1)
			if err2097 != nil {
				return m.NoResult, err2097
			}
			if (m.IsTrue(eval2096)) &&
			   (m.IsTrue(eval2097)) {
				// RHS
				traceRuleApply("FUNC", 1963, "{| rule #dasmOpCode(`_:__IELE-DATA`(_108,_679))=>`AND`(.KList) requires `_andBool_`(isWordStack(_679),`_==Int_`(_108,#token(\"22\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fe05270809712dfa5422cb62c0046350ddf7568d91a0680748cf7beabdd76cc9) contentStartColumn(10) contentStartLine(394) org.kframework.attributes.Location(Location(394,10,394,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblAND, List: []m.K{ // as-is AND
				}}, nil
			}
		}
	}

	// rule #1964
	// source: iele-binary.k @418
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_113,_515))=>`MSTOREN`(.KList) requires `_andBool_`(isWordStack(_515),`_==Int_`(_113,#token("82","Int"))) ensures #token("true","Bool") [UNIQUE_ID(f7fde5a9273c32d11a953b9369aa007907e99b077aca2152eb40a6e24fe05a86) contentStartColumn(10) contentStartLine(418) org.kframework.attributes.Location(Location(418,10,418,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_113,_515)
		if varXu113, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu515 := kapp0.List[1] // lhs KVariable _515
			// REQUIRES
			eval2098, err2098 := evalIsWordStack( // isWordStack(_515)
				varXu515,
				config, -1)
			if err2098 != nil {
				return m.NoResult, err2098
			}
			eval2099, err2099 := evalXuXeqXeqIntXu( // `_==Int_`(_113,#token("82","Int"))
				varXu113,
				/* rhs KToken */ m.NewIntFromString("82"),
				config, -1)
			if err2099 != nil {
				return m.NoResult, err2099
			}
			if (m.IsTrue(eval2098)) &&
			   (m.IsTrue(eval2099)) {
				// RHS
				traceRuleApply("FUNC", 1964, "{| rule #dasmOpCode(`_:__IELE-DATA`(_113,_515))=>`MSTOREN`(.KList) requires `_andBool_`(isWordStack(_515),`_==Int_`(_113,#token(\"82\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f7fde5a9273c32d11a953b9369aa007907e99b077aca2152eb40a6e24fe05a86) contentStartColumn(10) contentStartLine(418) org.kframework.attributes.Location(Location(418,10,418,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMSTOREN, List: []m.K{ // as-is MSTOREN
				}}, nil
			}
		}
	}

	// rule #1965
	// source: iele-binary.k @431
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_109,_695))=>`LOG1`(.KList) requires `_andBool_`(isWordStack(_695),`_==Int_`(_109,#token("161","Int"))) ensures #token("true","Bool") [UNIQUE_ID(e1cd90aded7737cb0c509b8c622a67a707a27343b9f6a057bb1e9eec6ed74135) contentStartColumn(10) contentStartLine(431) org.kframework.attributes.Location(Location(431,10,431,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_109,_695)
		if varXu109, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu695 := kapp0.List[1] // lhs KVariable _695
			// REQUIRES
			eval2100, err2100 := evalIsWordStack( // isWordStack(_695)
				varXu695,
				config, -1)
			if err2100 != nil {
				return m.NoResult, err2100
			}
			eval2101, err2101 := evalXuXeqXeqIntXu( // `_==Int_`(_109,#token("161","Int"))
				varXu109,
				/* rhs KToken */ m.NewIntFromString("161"),
				config, -1)
			if err2101 != nil {
				return m.NoResult, err2101
			}
			if (m.IsTrue(eval2100)) &&
			   (m.IsTrue(eval2101)) {
				// RHS
				traceRuleApply("FUNC", 1965, "{| rule #dasmOpCode(`_:__IELE-DATA`(_109,_695))=>`LOG1`(.KList) requires `_andBool_`(isWordStack(_695),`_==Int_`(_109,#token(\"161\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e1cd90aded7737cb0c509b8c622a67a707a27343b9f6a057bb1e9eec6ed74135) contentStartColumn(10) contentStartLine(431) org.kframework.attributes.Location(Location(431,10,431,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOG1, List: []m.K{ // as-is LOG1
				}}, nil
			}
		}
	}

	// rule #1966
	// source: iele-binary.k @377
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_68,_611))=>`SUB`(.KList) requires `_andBool_`(isWordStack(_611),`_==Int_`(_68,#token("3","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4c324643f3a2d8a3419be35b0fbb3fdb47e1d8d6297d8bee26bb16004ee71b4e) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_68,_611)
		if varXu68, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu611 := kapp0.List[1] // lhs KVariable _611
			// REQUIRES
			eval2102, err2102 := evalIsWordStack( // isWordStack(_611)
				varXu611,
				config, -1)
			if err2102 != nil {
				return m.NoResult, err2102
			}
			eval2103, err2103 := evalXuXeqXeqIntXu( // `_==Int_`(_68,#token("3","Int"))
				varXu68,
				/* rhs KToken */ m.NewIntFromString("3"),
				config, -1)
			if err2103 != nil {
				return m.NoResult, err2103
			}
			if (m.IsTrue(eval2102)) &&
			   (m.IsTrue(eval2103)) {
				// RHS
				traceRuleApply("FUNC", 1966, "{| rule #dasmOpCode(`_:__IELE-DATA`(_68,_611))=>`SUB`(.KList) requires `_andBool_`(isWordStack(_611),`_==Int_`(_68,#token(\"3\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c324643f3a2d8a3419be35b0fbb3fdb47e1d8d6297d8bee26bb16004ee71b4e) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSUB, List: []m.K{ // as-is SUB
				}}, nil
			}
		}
	}

	// rule #1967
	// source: iele-binary.k @428
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_82,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BRC`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_82,#token("101","Int"))) ensures #token("true","Bool") [UNIQUE_ID(dc2febc94f27de77438843868e8d623a06f60fbfbfcae16897a087a0d86aba05) contentStartColumn(10) contentStartLine(428) org.kframework.attributes.Location(Location(428,10,428,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_82,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu82, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2104, err2104 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2104 != nil {
								return m.NoResult, err2104
							}
							eval2105, err2105 := evalXuXeqXeqIntXu( // `_==Int_`(_82,#token("101","Int"))
								varXu82,
								/* rhs KToken */ m.NewIntFromString("101"),
								config, -1)
							if err2105 != nil {
								return m.NoResult, err2105
							}
							if (m.IsTrue(eval2104) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2105)) {
								// RHS
								traceRuleApply("FUNC", 1967, "{| rule #dasmOpCode(`_:__IELE-DATA`(_82,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BRC`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_82,#token(\"101\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dc2febc94f27de77438843868e8d623a06f60fbfbfcae16897a087a0d86aba05) contentStartColumn(10) contentStartLine(428) org.kframework.attributes.Location(Location(428,10,428,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2107, err2107 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2107 != nil {
									return m.NoResult, err2107
								}
								eval2106, err2106 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2107,
									varW2,
									config, -1)
								if err2106 != nil {
									return m.NoResult, err2106
								}
								return &m.KApply{Label: m.LblBRC, List: []m.K{ // as-is BRC
									eval2106,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1968
	// source: iele-binary.k @381
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_81,_661))=>`ADDMOD`(.KList) requires `_andBool_`(isWordStack(_661),`_==Int_`(_81,#token("8","Int"))) ensures #token("true","Bool") [UNIQUE_ID(8c2ed4307881f7a862981fddd13f5c2cff364ff4158b4b152511d1998fcbf5c4) contentStartColumn(10) contentStartLine(381) org.kframework.attributes.Location(Location(381,10,381,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_81,_661)
		if varXu81, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu661 := kapp0.List[1] // lhs KVariable _661
			// REQUIRES
			eval2108, err2108 := evalIsWordStack( // isWordStack(_661)
				varXu661,
				config, -1)
			if err2108 != nil {
				return m.NoResult, err2108
			}
			eval2109, err2109 := evalXuXeqXeqIntXu( // `_==Int_`(_81,#token("8","Int"))
				varXu81,
				/* rhs KToken */ m.NewIntFromString("8"),
				config, -1)
			if err2109 != nil {
				return m.NoResult, err2109
			}
			if (m.IsTrue(eval2108)) &&
			   (m.IsTrue(eval2109)) {
				// RHS
				traceRuleApply("FUNC", 1968, "{| rule #dasmOpCode(`_:__IELE-DATA`(_81,_661))=>`ADDMOD`(.KList) requires `_andBool_`(isWordStack(_661),`_==Int_`(_81,#token(\"8\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c2ed4307881f7a862981fddd13f5c2cff364ff4158b4b152511d1998fcbf5c4) contentStartColumn(10) contentStartLine(381) org.kframework.attributes.Location(Location(381,10,381,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblADDMOD, List: []m.K{ // as-is ADDMOD
				}}, nil
			}
		}
	}

	// rule #1969
	// source: iele-binary.k @402
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_95,_499))=>`ADDRESS`(.KList) requires `_andBool_`(isWordStack(_499),`_==Int_`(_95,#token("48","Int"))) ensures #token("true","Bool") [UNIQUE_ID(394b2b22a61b9ea26310c4bbf27b6aacc11f736f5b5df333b5b3242f2266b9ba) contentStartColumn(10) contentStartLine(402) org.kframework.attributes.Location(Location(402,10,402,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_95,_499)
		if varXu95, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu499 := kapp0.List[1] // lhs KVariable _499
			// REQUIRES
			eval2110, err2110 := evalIsWordStack( // isWordStack(_499)
				varXu499,
				config, -1)
			if err2110 != nil {
				return m.NoResult, err2110
			}
			eval2111, err2111 := evalXuXeqXeqIntXu( // `_==Int_`(_95,#token("48","Int"))
				varXu95,
				/* rhs KToken */ m.NewIntFromString("48"),
				config, -1)
			if err2111 != nil {
				return m.NoResult, err2111
			}
			if (m.IsTrue(eval2110)) &&
			   (m.IsTrue(eval2111)) {
				// RHS
				traceRuleApply("FUNC", 1969, "{| rule #dasmOpCode(`_:__IELE-DATA`(_95,_499))=>`ADDRESS`(.KList) requires `_andBool_`(isWordStack(_499),`_==Int_`(_95,#token(\"48\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(394b2b22a61b9ea26310c4bbf27b6aacc11f736f5b5df333b5b3242f2266b9ba) contentStartColumn(10) contentStartLine(402) org.kframework.attributes.Location(Location(402,10,402,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblADDRESS, List: []m.K{ // as-is ADDRESS
				}}, nil
			}
		}
	}

	// rule #1970
	// source: iele-binary.k @436
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_118,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`COPYCREATE`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_118,#token("241","Int"))) ensures #token("true","Bool") [UNIQUE_ID(42234414e49101ac75e3783176fcdb996b5ac8e3628a2fb6f49c885e63843de8) contentStartColumn(10) contentStartLine(436) org.kframework.attributes.Location(Location(436,10,436,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_118,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu118, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2112, err2112 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2112 != nil {
								return m.NoResult, err2112
							}
							eval2113, err2113 := evalXuXeqXeqIntXu( // `_==Int_`(_118,#token("241","Int"))
								varXu118,
								/* rhs KToken */ m.NewIntFromString("241"),
								config, -1)
							if err2113 != nil {
								return m.NoResult, err2113
							}
							if (m.IsTrue(eval2112) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2113)) {
								// RHS
								traceRuleApply("FUNC", 1970, "{| rule #dasmOpCode(`_:__IELE-DATA`(_118,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`COPYCREATE`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_118,#token(\"241\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(42234414e49101ac75e3783176fcdb996b5ac8e3628a2fb6f49c885e63843de8) contentStartColumn(10) contentStartLine(436) org.kframework.attributes.Location(Location(436,10,436,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2115, err2115 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2115 != nil {
									return m.NoResult, err2115
								}
								eval2114, err2114 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2115,
									varW2,
									config, -1)
								if err2114 != nil {
									return m.NoResult, err2114
								}
								return &m.KApply{Label: m.LblCOPYCREATE, List: []m.K{ // as-is COPYCREATE
									eval2114,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1971
	// source: iele-binary.k @427
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_66,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BR`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_66,#token("100","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5e763734e0f9952258ef234a4b92df0eab122cf4009d52995174edb296f5abb2) contentStartColumn(10) contentStartLine(427) org.kframework.attributes.Location(Location(427,10,427,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_66,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu66, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2116, err2116 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2116 != nil {
								return m.NoResult, err2116
							}
							eval2117, err2117 := evalXuXeqXeqIntXu( // `_==Int_`(_66,#token("100","Int"))
								varXu66,
								/* rhs KToken */ m.NewIntFromString("100"),
								config, -1)
							if err2117 != nil {
								return m.NoResult, err2117
							}
							if (m.IsTrue(eval2116) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2117)) {
								// RHS
								traceRuleApply("FUNC", 1971, "{| rule #dasmOpCode(`_:__IELE-DATA`(_66,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BR`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_66,#token(\"100\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5e763734e0f9952258ef234a4b92df0eab122cf4009d52995174edb296f5abb2) contentStartColumn(10) contentStartLine(427) org.kframework.attributes.Location(Location(427,10,427,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2119, err2119 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2119 != nil {
									return m.NoResult, err2119
								}
								eval2118, err2118 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2119,
									varW2,
									config, -1)
								if err2118 != nil {
									return m.NoResult, err2118
								}
								return &m.KApply{Label: m.LblBR, List: []m.K{ // as-is BR
									eval2118,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1972
	// source: iele-binary.k @446
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_117,_653))=>`INVALID`(.KList) requires `_andBool_`(isWordStack(_653),`_==Int_`(_117,#token("254","Int"))) ensures #token("true","Bool") [UNIQUE_ID(a32479878cead8403723836767851cf6fcade745b0e3e78dea268962b5caf56f) contentStartColumn(10) contentStartLine(446) org.kframework.attributes.Location(Location(446,10,446,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_117,_653)
		if varXu117, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu653 := kapp0.List[1] // lhs KVariable _653
			// REQUIRES
			eval2120, err2120 := evalIsWordStack( // isWordStack(_653)
				varXu653,
				config, -1)
			if err2120 != nil {
				return m.NoResult, err2120
			}
			eval2121, err2121 := evalXuXeqXeqIntXu( // `_==Int_`(_117,#token("254","Int"))
				varXu117,
				/* rhs KToken */ m.NewIntFromString("254"),
				config, -1)
			if err2121 != nil {
				return m.NoResult, err2121
			}
			if (m.IsTrue(eval2120)) &&
			   (m.IsTrue(eval2121)) {
				// RHS
				traceRuleApply("FUNC", 1972, "{| rule #dasmOpCode(`_:__IELE-DATA`(_117,_653))=>`INVALID`(.KList) requires `_andBool_`(isWordStack(_653),`_==Int_`(_117,#token(\"254\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a32479878cead8403723836767851cf6fcade745b0e3e78dea268962b5caf56f) contentStartColumn(10) contentStartLine(446) org.kframework.attributes.Location(Location(446,10,446,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblINVALID, List: []m.K{ // as-is INVALID
				}}, nil
			}
		}
	}

	// rule #1973
	// source: iele-binary.k @439
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_39,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`STATICCALL`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),`_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_39,#token("244","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0bb3c3917789ae021212b5bd383f1d0d3cc16d68958b9a40c5edb0e6f0e88f30) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_39,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))))
		if varXu39, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if kapp5, t := kapp4.List[1].(*m.KApply); t && kapp5.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp5.List) == 2 { // `_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))
												if varW5, t := kapp5.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
													if kapp6, t := kapp5.List[1].(*m.KApply); t && kapp6.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp6.List) == 2 { // `_:__IELE-DATA`(W6,WS)
														if varW6, t := kapp6.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
															varWS := kapp6.List[1] // lhs KVariable WS
															// REQUIRES
															eval2122, err2122 := evalIsWordStack( // isWordStack(WS)
																varWS,
																config, -1)
															if err2122 != nil {
																return m.NoResult, err2122
															}
															eval2123, err2123 := evalXuXeqXeqIntXu( // `_==Int_`(_39,#token("244","Int"))
																varXu39,
																/* rhs KToken */ m.NewIntFromString("244"),
																config, -1)
															if err2123 != nil {
																return m.NoResult, err2123
															}
															if (/* rhs precomputed isInt(W4) */ /* && */
															   m.IsTrue(eval2122) /* && */ /* rhs precomputed isInt(W6) */  /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W5) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
															   (m.IsTrue(eval2123)) {
																// RHS
																traceRuleApply("FUNC", 1973, "{| rule #dasmOpCode(`_:__IELE-DATA`(_39,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`STATICCALL`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4),`_+Int_`(`_*Int__INT`(W5,#token(\"256\",\"Int\")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_39,#token(\"244\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0bb3c3917789ae021212b5bd383f1d0d3cc16d68958b9a40c5edb0e6f0e88f30) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
																eval2125, err2125 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
																	varW1,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2125 != nil {
																	return m.NoResult, err2125
																}
																eval2124, err2124 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
																	eval2125,
																	varW2,
																	config, -1)
																if err2124 != nil {
																	return m.NoResult, err2124
																}
																eval2127, err2127 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
																	varW3,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2127 != nil {
																	return m.NoResult, err2127
																}
																eval2126, err2126 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
																	eval2127,
																	varW4,
																	config, -1)
																if err2126 != nil {
																	return m.NoResult, err2126
																}
																eval2129, err2129 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W5,#token("256","Int"))
																	varW5,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2129 != nil {
																	return m.NoResult, err2129
																}
																eval2128, err2128 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)
																	eval2129,
																	varW6,
																	config, -1)
																if err2128 != nil {
																	return m.NoResult, err2128
																}
																return &m.KApply{Label: m.LblSTATICCALL, List: []m.K{ // as-is STATICCALL
																	eval2124,
																	eval2126,
																	eval2128,
																}}, nil
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1974
	// source: iele-binary.k @380
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_122,_682))=>`EXP`(.KList) requires `_andBool_`(isWordStack(_682),`_==Int_`(_122,#token("7","Int"))) ensures #token("true","Bool") [UNIQUE_ID(9a2953a868494551d1f5ff4c68a3654e4e34497f9604a76b8a67df2500f1aa81) contentStartColumn(10) contentStartLine(380) org.kframework.attributes.Location(Location(380,10,380,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_122,_682)
		if varXu122, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu682 := kapp0.List[1] // lhs KVariable _682
			// REQUIRES
			eval2130, err2130 := evalIsWordStack( // isWordStack(_682)
				varXu682,
				config, -1)
			if err2130 != nil {
				return m.NoResult, err2130
			}
			eval2131, err2131 := evalXuXeqXeqIntXu( // `_==Int_`(_122,#token("7","Int"))
				varXu122,
				/* rhs KToken */ m.NewIntFromString("7"),
				config, -1)
			if err2131 != nil {
				return m.NoResult, err2131
			}
			if (m.IsTrue(eval2130)) &&
			   (m.IsTrue(eval2131)) {
				// RHS
				traceRuleApply("FUNC", 1974, "{| rule #dasmOpCode(`_:__IELE-DATA`(_122,_682))=>`EXP`(.KList) requires `_andBool_`(isWordStack(_682),`_==Int_`(_122,#token(\"7\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a2953a868494551d1f5ff4c68a3654e4e34497f9604a76b8a67df2500f1aa81) contentStartColumn(10) contentStartLine(380) org.kframework.attributes.Location(Location(380,10,380,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblEXP, List: []m.K{ // as-is EXP
				}}, nil
			}
		}
	}

	// rule #1975
	// source: iele-binary.k @447
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_127,_662))=>`SELFDESTRUCT`(.KList) requires `_andBool_`(isWordStack(_662),`_==Int_`(_127,#token("255","Int"))) ensures #token("true","Bool") [UNIQUE_ID(f1f3be39e92cf8eb7d77398d889ef02d2e3dbf5289cfae241fb0228001386200) contentStartColumn(10) contentStartLine(447) org.kframework.attributes.Location(Location(447,10,447,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_127,_662)
		if varXu127, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu662 := kapp0.List[1] // lhs KVariable _662
			// REQUIRES
			eval2132, err2132 := evalIsWordStack( // isWordStack(_662)
				varXu662,
				config, -1)
			if err2132 != nil {
				return m.NoResult, err2132
			}
			eval2133, err2133 := evalXuXeqXeqIntXu( // `_==Int_`(_127,#token("255","Int"))
				varXu127,
				/* rhs KToken */ m.NewIntFromString("255"),
				config, -1)
			if err2133 != nil {
				return m.NoResult, err2133
			}
			if (m.IsTrue(eval2132)) &&
			   (m.IsTrue(eval2133)) {
				// RHS
				traceRuleApply("FUNC", 1975, "{| rule #dasmOpCode(`_:__IELE-DATA`(_127,_662))=>`SELFDESTRUCT`(.KList) requires `_andBool_`(isWordStack(_662),`_==Int_`(_127,#token(\"255\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f1f3be39e92cf8eb7d77398d889ef02d2e3dbf5289cfae241fb0228001386200) contentStartColumn(10) contentStartLine(447) org.kframework.attributes.Location(Location(447,10,447,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSELFDESTRUCT, List: []m.K{ // as-is SELFDESTRUCT
				}}, nil
			}
		}
	}

	// rule #1976
	// source: iele-binary.k @434
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_131,_568))=>`LOG4`(.KList) requires `_andBool_`(isWordStack(_568),`_==Int_`(_131,#token("164","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5a3772d109907c9198074c63b20db777ee3d57f68ea18850630950af90a10e22) contentStartColumn(10) contentStartLine(434) org.kframework.attributes.Location(Location(434,10,434,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_131,_568)
		if varXu131, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu568 := kapp0.List[1] // lhs KVariable _568
			// REQUIRES
			eval2134, err2134 := evalIsWordStack( // isWordStack(_568)
				varXu568,
				config, -1)
			if err2134 != nil {
				return m.NoResult, err2134
			}
			eval2135, err2135 := evalXuXeqXeqIntXu( // `_==Int_`(_131,#token("164","Int"))
				varXu131,
				/* rhs KToken */ m.NewIntFromString("164"),
				config, -1)
			if err2135 != nil {
				return m.NoResult, err2135
			}
			if (m.IsTrue(eval2134)) &&
			   (m.IsTrue(eval2135)) {
				// RHS
				traceRuleApply("FUNC", 1976, "{| rule #dasmOpCode(`_:__IELE-DATA`(_131,_568))=>`LOG4`(.KList) requires `_andBool_`(isWordStack(_568),`_==Int_`(_131,#token(\"164\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5a3772d109907c9198074c63b20db777ee3d57f68ea18850630950af90a10e22) contentStartColumn(10) contentStartLine(434) org.kframework.attributes.Location(Location(434,10,434,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLOG4, List: []m.K{ // as-is LOG4
				}}, nil
			}
		}
	}

	// rule #1977
	// source: iele-binary.k @375
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_75,_471))=>`ADD`(.KList) requires `_andBool_`(isWordStack(_471),`_==Int_`(_75,#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(30812831ea25600490001b1d3ada37796803e09e3b2684b7f9dc332476d294a6) contentStartColumn(10) contentStartLine(375) org.kframework.attributes.Location(Location(375,10,375,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_75,_471)
		if varXu75, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu471 := kapp0.List[1] // lhs KVariable _471
			// REQUIRES
			eval2136, err2136 := evalIsWordStack( // isWordStack(_471)
				varXu471,
				config, -1)
			if err2136 != nil {
				return m.NoResult, err2136
			}
			eval2137, err2137 := evalXuXeqXeqIntXu( // `_==Int_`(_75,#token("1","Int"))
				varXu75,
				/* rhs KToken */ m.NewIntFromString("1"),
				config, -1)
			if err2137 != nil {
				return m.NoResult, err2137
			}
			if (m.IsTrue(eval2136)) &&
			   (m.IsTrue(eval2137)) {
				// RHS
				traceRuleApply("FUNC", 1977, "{| rule #dasmOpCode(`_:__IELE-DATA`(_75,_471))=>`ADD`(.KList) requires `_andBool_`(isWordStack(_471),`_==Int_`(_75,#token(\"1\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(30812831ea25600490001b1d3ada37796803e09e3b2684b7f9dc332476d294a6) contentStartColumn(10) contentStartLine(375) org.kframework.attributes.Location(Location(375,10,375,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblADD, List: []m.K{ // as-is ADD
				}}, nil
			}
		}
	}

	// rule #1978
	// source: iele-binary.k @384
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_114,_537))=>`SIGNEXTEND`(.KList) requires `_andBool_`(isWordStack(_537),`_==Int_`(_114,#token("11","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0ef9bae57b5692355e8a28191b9a75c883b78aef5b8db6f31343a466a6d68d0c) contentStartColumn(10) contentStartLine(384) org.kframework.attributes.Location(Location(384,10,384,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_114,_537)
		if varXu114, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu537 := kapp0.List[1] // lhs KVariable _537
			// REQUIRES
			eval2138, err2138 := evalIsWordStack( // isWordStack(_537)
				varXu537,
				config, -1)
			if err2138 != nil {
				return m.NoResult, err2138
			}
			eval2139, err2139 := evalXuXeqXeqIntXu( // `_==Int_`(_114,#token("11","Int"))
				varXu114,
				/* rhs KToken */ m.NewIntFromString("11"),
				config, -1)
			if err2139 != nil {
				return m.NoResult, err2139
			}
			if (m.IsTrue(eval2138)) &&
			   (m.IsTrue(eval2139)) {
				// RHS
				traceRuleApply("FUNC", 1978, "{| rule #dasmOpCode(`_:__IELE-DATA`(_114,_537))=>`SIGNEXTEND`(.KList) requires `_andBool_`(isWordStack(_537),`_==Int_`(_114,#token(\"11\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ef9bae57b5692355e8a28191b9a75c883b78aef5b8db6f31343a466a6d68d0c) contentStartColumn(10) contentStartLine(384) org.kframework.attributes.Location(Location(384,10,384,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSIGNEXTEND, List: []m.K{ // as-is SIGNEXTEND
				}}, nil
			}
		}
	}

	// rule #1979
	// source: iele-binary.k @396
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_55,_689))=>`XOR`(.KList) requires `_andBool_`(isWordStack(_689),`_==Int_`(_55,#token("24","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6cadf7c918d2fea46f6d27187bd2b2220075a349ecad0d55f6ae57304d8aaff0) contentStartColumn(10) contentStartLine(396) org.kframework.attributes.Location(Location(396,10,396,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_55,_689)
		if varXu55, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu689 := kapp0.List[1] // lhs KVariable _689
			// REQUIRES
			eval2140, err2140 := evalIsWordStack( // isWordStack(_689)
				varXu689,
				config, -1)
			if err2140 != nil {
				return m.NoResult, err2140
			}
			eval2141, err2141 := evalXuXeqXeqIntXu( // `_==Int_`(_55,#token("24","Int"))
				varXu55,
				/* rhs KToken */ m.NewIntFromString("24"),
				config, -1)
			if err2141 != nil {
				return m.NoResult, err2141
			}
			if (m.IsTrue(eval2140)) &&
			   (m.IsTrue(eval2141)) {
				// RHS
				traceRuleApply("FUNC", 1979, "{| rule #dasmOpCode(`_:__IELE-DATA`(_55,_689))=>`XOR`(.KList) requires `_andBool_`(isWordStack(_689),`_==Int_`(_55,#token(\"24\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6cadf7c918d2fea46f6d27187bd2b2220075a349ecad0d55f6ae57304d8aaff0) contentStartColumn(10) contentStartLine(396) org.kframework.attributes.Location(Location(396,10,396,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblXOR, List: []m.K{ // as-is XOR
				}}, nil
			}
		}
	}

	// rule #1980
	// source: iele-binary.k @421
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_69,_546))=>`SSTORE`(.KList) requires `_andBool_`(isWordStack(_546),`_==Int_`(_69,#token("85","Int"))) ensures #token("true","Bool") [UNIQUE_ID(af874506c055d5a8d16f5aac0f12e6db82e30e804fbd15c788b3201ae1a2187d) contentStartColumn(10) contentStartLine(421) org.kframework.attributes.Location(Location(421,10,421,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_69,_546)
		if varXu69, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu546 := kapp0.List[1] // lhs KVariable _546
			// REQUIRES
			eval2142, err2142 := evalIsWordStack( // isWordStack(_546)
				varXu546,
				config, -1)
			if err2142 != nil {
				return m.NoResult, err2142
			}
			eval2143, err2143 := evalXuXeqXeqIntXu( // `_==Int_`(_69,#token("85","Int"))
				varXu69,
				/* rhs KToken */ m.NewIntFromString("85"),
				config, -1)
			if err2143 != nil {
				return m.NoResult, err2143
			}
			if (m.IsTrue(eval2142)) &&
			   (m.IsTrue(eval2143)) {
				// RHS
				traceRuleApply("FUNC", 1980, "{| rule #dasmOpCode(`_:__IELE-DATA`(_69,_546))=>`SSTORE`(.KList) requires `_andBool_`(isWordStack(_546),`_==Int_`(_69,#token(\"85\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(af874506c055d5a8d16f5aac0f12e6db82e30e804fbd15c788b3201ae1a2187d) contentStartColumn(10) contentStartLine(421) org.kframework.attributes.Location(Location(421,10,421,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSSTORE, List: []m.K{ // as-is SSTORE
				}}, nil
			}
		}
	}

	// rule #1981
	// source: iele-binary.k @399
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_100,_707))=>`SHIFT`(.KList) requires `_andBool_`(isWordStack(_707),`_==Int_`(_100,#token("27","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d5c6b306d6bd6bd7a8926684724eb60fa94c3e1c42186ab2b817b4c32a914984) contentStartColumn(10) contentStartLine(399) org.kframework.attributes.Location(Location(399,10,399,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_100,_707)
		if varXu100, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu707 := kapp0.List[1] // lhs KVariable _707
			// REQUIRES
			eval2144, err2144 := evalIsWordStack( // isWordStack(_707)
				varXu707,
				config, -1)
			if err2144 != nil {
				return m.NoResult, err2144
			}
			eval2145, err2145 := evalXuXeqXeqIntXu( // `_==Int_`(_100,#token("27","Int"))
				varXu100,
				/* rhs KToken */ m.NewIntFromString("27"),
				config, -1)
			if err2145 != nil {
				return m.NoResult, err2145
			}
			if (m.IsTrue(eval2144)) &&
			   (m.IsTrue(eval2145)) {
				// RHS
				traceRuleApply("FUNC", 1981, "{| rule #dasmOpCode(`_:__IELE-DATA`(_100,_707))=>`SHIFT`(.KList) requires `_andBool_`(isWordStack(_707),`_==Int_`(_100,#token(\"27\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d5c6b306d6bd6bd7a8926684724eb60fa94c3e1c42186ab2b817b4c32a914984) contentStartColumn(10) contentStartLine(399) org.kframework.attributes.Location(Location(399,10,399,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSHIFT, List: []m.K{ // as-is SHIFT
				}}, nil
			}
		}
	}

	// rule #1982
	// source: iele-binary.k @413
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_120,_513))=>`NUMBER`(.KList) requires `_andBool_`(isWordStack(_513),`_==Int_`(_120,#token("67","Int"))) ensures #token("true","Bool") [UNIQUE_ID(01d3ea1ceba61d48b6bcdaa94ec6419a911164b0a05df87d10aded4d385ca49a) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_120,_513)
		if varXu120, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu513 := kapp0.List[1] // lhs KVariable _513
			// REQUIRES
			eval2146, err2146 := evalIsWordStack( // isWordStack(_513)
				varXu513,
				config, -1)
			if err2146 != nil {
				return m.NoResult, err2146
			}
			eval2147, err2147 := evalXuXeqXeqIntXu( // `_==Int_`(_120,#token("67","Int"))
				varXu120,
				/* rhs KToken */ m.NewIntFromString("67"),
				config, -1)
			if err2147 != nil {
				return m.NoResult, err2147
			}
			if (m.IsTrue(eval2146)) &&
			   (m.IsTrue(eval2147)) {
				// RHS
				traceRuleApply("FUNC", 1982, "{| rule #dasmOpCode(`_:__IELE-DATA`(_120,_513))=>`NUMBER`(.KList) requires `_andBool_`(isWordStack(_513),`_==Int_`(_120,#token(\"67\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01d3ea1ceba61d48b6bcdaa94ec6419a911164b0a05df87d10aded4d385ca49a) contentStartColumn(10) contentStartLine(413) org.kframework.attributes.Location(Location(413,10,413,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblNUMBER, List: []m.K{ // as-is NUMBER
				}}, nil
			}
		}
	}

	// rule #1983
	// source: iele-binary.k @407
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_79,_470))=>`CODESIZE`(.KList) requires `_andBool_`(isWordStack(_470),`_==Int_`(_79,#token("56","Int"))) ensures #token("true","Bool") [UNIQUE_ID(44cbc08ec30e6e5e1a7d3f56b4a46dd4564a838601dd582e7e6b0d1bc9be8405) contentStartColumn(10) contentStartLine(407) org.kframework.attributes.Location(Location(407,10,407,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_79,_470)
		if varXu79, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu470 := kapp0.List[1] // lhs KVariable _470
			// REQUIRES
			eval2148, err2148 := evalIsWordStack( // isWordStack(_470)
				varXu470,
				config, -1)
			if err2148 != nil {
				return m.NoResult, err2148
			}
			eval2149, err2149 := evalXuXeqXeqIntXu( // `_==Int_`(_79,#token("56","Int"))
				varXu79,
				/* rhs KToken */ m.NewIntFromString("56"),
				config, -1)
			if err2149 != nil {
				return m.NoResult, err2149
			}
			if (m.IsTrue(eval2148)) &&
			   (m.IsTrue(eval2149)) {
				// RHS
				traceRuleApply("FUNC", 1983, "{| rule #dasmOpCode(`_:__IELE-DATA`(_79,_470))=>`CODESIZE`(.KList) requires `_andBool_`(isWordStack(_470),`_==Int_`(_79,#token(\"56\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(44cbc08ec30e6e5e1a7d3f56b4a46dd4564a838601dd582e7e6b0d1bc9be8405) contentStartColumn(10) contentStartLine(407) org.kframework.attributes.Location(Location(407,10,407,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblCODESIZE, List: []m.K{ // as-is CODESIZE
				}}, nil
			}
		}
	}

	// rule #1984
	// source: iele-binary.k @412
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_83,_603))=>`TIMESTAMP`(.KList) requires `_andBool_`(isWordStack(_603),`_==Int_`(_83,#token("66","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d6de3b7cb6104f9d6d9ab159ca7c2de7ab7ebd9cb64b9b22db8ada884633a066) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_83,_603)
		if varXu83, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu603 := kapp0.List[1] // lhs KVariable _603
			// REQUIRES
			eval2150, err2150 := evalIsWordStack( // isWordStack(_603)
				varXu603,
				config, -1)
			if err2150 != nil {
				return m.NoResult, err2150
			}
			eval2151, err2151 := evalXuXeqXeqIntXu( // `_==Int_`(_83,#token("66","Int"))
				varXu83,
				/* rhs KToken */ m.NewIntFromString("66"),
				config, -1)
			if err2151 != nil {
				return m.NoResult, err2151
			}
			if (m.IsTrue(eval2150)) &&
			   (m.IsTrue(eval2151)) {
				// RHS
				traceRuleApply("FUNC", 1984, "{| rule #dasmOpCode(`_:__IELE-DATA`(_83,_603))=>`TIMESTAMP`(.KList) requires `_andBool_`(isWordStack(_603),`_==Int_`(_83,#token(\"66\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d6de3b7cb6104f9d6d9ab159ca7c2de7ab7ebd9cb64b9b22db8ada884633a066) contentStartColumn(10) contentStartLine(412) org.kframework.attributes.Location(Location(412,10,412,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblTIMESTAMP, List: []m.K{ // as-is TIMESTAMP
				}}, nil
			}
		}
	}

	// rule #1985
	// source: iele-binary.k @376
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_126,_627))=>`MUL`(.KList) requires `_andBool_`(isWordStack(_627),`_==Int_`(_126,#token("2","Int"))) ensures #token("true","Bool") [UNIQUE_ID(a92608fbc3b96bdf190dfdd55dfbc4f46048d4f72b171061b72f3b2b59b18054) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_126,_627)
		if varXu126, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu627 := kapp0.List[1] // lhs KVariable _627
			// REQUIRES
			eval2152, err2152 := evalIsWordStack( // isWordStack(_627)
				varXu627,
				config, -1)
			if err2152 != nil {
				return m.NoResult, err2152
			}
			eval2153, err2153 := evalXuXeqXeqIntXu( // `_==Int_`(_126,#token("2","Int"))
				varXu126,
				/* rhs KToken */ m.NewIntFromString("2"),
				config, -1)
			if err2153 != nil {
				return m.NoResult, err2153
			}
			if (m.IsTrue(eval2152)) &&
			   (m.IsTrue(eval2153)) {
				// RHS
				traceRuleApply("FUNC", 1985, "{| rule #dasmOpCode(`_:__IELE-DATA`(_126,_627))=>`MUL`(.KList) requires `_andBool_`(isWordStack(_627),`_==Int_`(_126,#token(\"2\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a92608fbc3b96bdf190dfdd55dfbc4f46048d4f72b171061b72f3b2b59b18054) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMUL, List: []m.K{ // as-is MUL
				}}, nil
			}
		}
	}

	// rule #1986
	// source: iele-binary.k @379
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_64,_715))=>`MOD`(.KList) requires `_andBool_`(isWordStack(_715),`_==Int_`(_64,#token("6","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5ea4954251bb4112d6bf5cd3cf8f8bffbee31e3949e495324bd5e032ed3d2eed) contentStartColumn(10) contentStartLine(379) org.kframework.attributes.Location(Location(379,10,379,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_64,_715)
		if varXu64, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu715 := kapp0.List[1] // lhs KVariable _715
			// REQUIRES
			eval2154, err2154 := evalIsWordStack( // isWordStack(_715)
				varXu715,
				config, -1)
			if err2154 != nil {
				return m.NoResult, err2154
			}
			eval2155, err2155 := evalXuXeqXeqIntXu( // `_==Int_`(_64,#token("6","Int"))
				varXu64,
				/* rhs KToken */ m.NewIntFromString("6"),
				config, -1)
			if err2155 != nil {
				return m.NoResult, err2155
			}
			if (m.IsTrue(eval2154)) &&
			   (m.IsTrue(eval2155)) {
				// RHS
				traceRuleApply("FUNC", 1986, "{| rule #dasmOpCode(`_:__IELE-DATA`(_64,_715))=>`MOD`(.KList) requires `_andBool_`(isWordStack(_715),`_==Int_`(_64,#token(\"6\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5ea4954251bb4112d6bf5cd3cf8f8bffbee31e3949e495324bd5e032ed3d2eed) contentStartColumn(10) contentStartLine(379) org.kframework.attributes.Location(Location(379,10,379,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMOD, List: []m.K{ // as-is MOD
				}}, nil
			}
		}
	}

	// rule #1987
	// source: iele-binary.k @404
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_61,_498))=>`ORIGIN`(.KList) requires `_andBool_`(isWordStack(_498),`_==Int_`(_61,#token("50","Int"))) ensures #token("true","Bool") [UNIQUE_ID(a41c66c496ad657ec087d7efeb6764e06261deb7eec4f2fc432bfa64a052e162) contentStartColumn(10) contentStartLine(404) org.kframework.attributes.Location(Location(404,10,404,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_61,_498)
		if varXu61, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu498 := kapp0.List[1] // lhs KVariable _498
			// REQUIRES
			eval2156, err2156 := evalIsWordStack( // isWordStack(_498)
				varXu498,
				config, -1)
			if err2156 != nil {
				return m.NoResult, err2156
			}
			eval2157, err2157 := evalXuXeqXeqIntXu( // `_==Int_`(_61,#token("50","Int"))
				varXu61,
				/* rhs KToken */ m.NewIntFromString("50"),
				config, -1)
			if err2157 != nil {
				return m.NoResult, err2157
			}
			if (m.IsTrue(eval2156)) &&
			   (m.IsTrue(eval2157)) {
				// RHS
				traceRuleApply("FUNC", 1987, "{| rule #dasmOpCode(`_:__IELE-DATA`(_61,_498))=>`ORIGIN`(.KList) requires `_andBool_`(isWordStack(_498),`_==Int_`(_61,#token(\"50\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a41c66c496ad657ec087d7efeb6764e06261deb7eec4f2fc432bfa64a052e162) contentStartColumn(10) contentStartLine(404) org.kframework.attributes.Location(Location(404,10,404,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblORIGIN, List: []m.K{ // as-is ORIGIN
				}}, nil
			}
		}
	}

	// rule #1988
	// source: iele-binary.k @435
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_93,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`CREATE`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_93,#token("240","Int"))) ensures #token("true","Bool") [UNIQUE_ID(63f140810a583c59d831d9a2fa7e1291ea6da2686797bece004bebe9c9ac1d73) contentStartColumn(10) contentStartLine(435) org.kframework.attributes.Location(Location(435,10,435,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_93,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu93, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											// REQUIRES
											eval2158, err2158 := evalIsWordStack( // isWordStack(WS)
												varWS,
												config, -1)
											if err2158 != nil {
												return m.NoResult, err2158
											}
											eval2159, err2159 := evalXuXeqXeqIntXu( // `_==Int_`(_93,#token("240","Int"))
												varXu93,
												/* rhs KToken */ m.NewIntFromString("240"),
												config, -1)
											if err2159 != nil {
												return m.NoResult, err2159
											}
											if (/* rhs precomputed isInt(W4) */ /* && */
											   m.IsTrue(eval2158) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
											   (m.IsTrue(eval2159)) {
												// RHS
												traceRuleApply("FUNC", 1988, "{| rule #dasmOpCode(`_:__IELE-DATA`(_93,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`CREATE`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_93,#token(\"240\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63f140810a583c59d831d9a2fa7e1291ea6da2686797bece004bebe9c9ac1d73) contentStartColumn(10) contentStartLine(435) org.kframework.attributes.Location(Location(435,10,435,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
												eval2161, err2161 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
													varW1,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2161 != nil {
													return m.NoResult, err2161
												}
												eval2160, err2160 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
													eval2161,
													varW2,
													config, -1)
												if err2160 != nil {
													return m.NoResult, err2160
												}
												eval2163, err2163 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
													varW3,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2163 != nil {
													return m.NoResult, err2163
												}
												eval2162, err2162 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
													eval2163,
													varW4,
													config, -1)
												if err2162 != nil {
													return m.NoResult, err2162
												}
												return &m.KApply{Label: m.LblCREATE, List: []m.K{ // as-is CREATE
													eval2160,
													eval2162,
												}}, nil
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1989
	// source: iele-binary.k @420
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_96,_619))=>`SLOAD`(.KList) requires `_andBool_`(isWordStack(_619),`_==Int_`(_96,#token("84","Int"))) ensures #token("true","Bool") [UNIQUE_ID(25ba7c20ead0ce6e0811dfd3e99e1dcb16a34ce381ae5b599247aee19f6dbba5) contentStartColumn(10) contentStartLine(420) org.kframework.attributes.Location(Location(420,10,420,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_96,_619)
		if varXu96, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu619 := kapp0.List[1] // lhs KVariable _619
			// REQUIRES
			eval2164, err2164 := evalIsWordStack( // isWordStack(_619)
				varXu619,
				config, -1)
			if err2164 != nil {
				return m.NoResult, err2164
			}
			eval2165, err2165 := evalXuXeqXeqIntXu( // `_==Int_`(_96,#token("84","Int"))
				varXu96,
				/* rhs KToken */ m.NewIntFromString("84"),
				config, -1)
			if err2165 != nil {
				return m.NoResult, err2165
			}
			if (m.IsTrue(eval2164)) &&
			   (m.IsTrue(eval2165)) {
				// RHS
				traceRuleApply("FUNC", 1989, "{| rule #dasmOpCode(`_:__IELE-DATA`(_96,_619))=>`SLOAD`(.KList) requires `_andBool_`(isWordStack(_619),`_==Int_`(_96,#token(\"84\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(25ba7c20ead0ce6e0811dfd3e99e1dcb16a34ce381ae5b599247aee19f6dbba5) contentStartColumn(10) contentStartLine(420) org.kframework.attributes.Location(Location(420,10,420,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblSLOAD, List: []m.K{ // as-is SLOAD
				}}, nil
			}
		}
	}

	// rule #1990
	// source: iele-binary.k @398
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_91,_668))=>`BYTE`(.KList) requires `_andBool_`(isWordStack(_668),`_==Int_`(_91,#token("26","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d0f77d578bdf78641f1395ff6801c7e206f21485938eb80a8f59a768329773a4) contentStartColumn(10) contentStartLine(398) org.kframework.attributes.Location(Location(398,10,398,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_91,_668)
		if varXu91, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu668 := kapp0.List[1] // lhs KVariable _668
			// REQUIRES
			eval2166, err2166 := evalIsWordStack( // isWordStack(_668)
				varXu668,
				config, -1)
			if err2166 != nil {
				return m.NoResult, err2166
			}
			eval2167, err2167 := evalXuXeqXeqIntXu( // `_==Int_`(_91,#token("26","Int"))
				varXu91,
				/* rhs KToken */ m.NewIntFromString("26"),
				config, -1)
			if err2167 != nil {
				return m.NoResult, err2167
			}
			if (m.IsTrue(eval2166)) &&
			   (m.IsTrue(eval2167)) {
				// RHS
				traceRuleApply("FUNC", 1990, "{| rule #dasmOpCode(`_:__IELE-DATA`(_91,_668))=>`BYTE`(.KList) requires `_andBool_`(isWordStack(_668),`_==Int_`(_91,#token(\"26\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0f77d578bdf78641f1395ff6801c7e206f21485938eb80a8f59a768329773a4) contentStartColumn(10) contentStartLine(398) org.kframework.attributes.Location(Location(398,10,398,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblBYTE, List: []m.K{ // as-is BYTE
				}}, nil
			}
		}
	}

	// rule #1991
	// source: iele-binary.k @425
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_97,WS))=>#dasmLoad(#token("97","Int"),#loadLen(WS),#loadOffset(WS),WS) requires `_andBool_`(isWordStack(WS),`_==Int_`(_97,#token("97","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c2133373160bdd538589cafd779461b16262b24ca8cdade2fc096945e1cdc0f7) contentStartColumn(10) contentStartLine(425) org.kframework.attributes.Location(Location(425,10,425,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_97,WS)
		if varXu97, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval2168, err2168 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err2168 != nil {
				return m.NoResult, err2168
			}
			eval2169, err2169 := evalXuXeqXeqIntXu( // `_==Int_`(_97,#token("97","Int"))
				varXu97,
				/* rhs KToken */ m.NewIntFromString("97"),
				config, -1)
			if err2169 != nil {
				return m.NoResult, err2169
			}
			if (m.IsTrue(eval2168)) &&
			   (m.IsTrue(eval2169)) {
				// RHS
				traceRuleApply("FUNC", 1991, "{| rule #dasmOpCode(`_:__IELE-DATA`(_97,WS))=>#dasmLoad(#token(\"97\",\"Int\"),#loadLen(WS),#loadOffset(WS),WS) requires `_andBool_`(isWordStack(WS),`_==Int_`(_97,#token(\"97\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c2133373160bdd538589cafd779461b16262b24ca8cdade2fc096945e1cdc0f7) contentStartColumn(10) contentStartLine(425) org.kframework.attributes.Location(Location(425,10,425,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2171, err2171 := evalXhashloadLen( // #loadLen(WS)
					varWS,
					config, -1)
				if err2171 != nil {
					return m.NoResult, err2171
				}
				eval2172, err2172 := evalXhashloadOffset( // #loadOffset(WS)
					varWS,
					config, -1)
				if err2172 != nil {
					return m.NoResult, err2172
				}
				eval2170, err2170 := evalXhashdasmLoad( // #dasmLoad(#token("97","Int"),#loadLen(WS),#loadOffset(WS),WS)
					/* rhs KToken */ m.NewIntFromString("97"),
					eval2171,
					eval2172,
					varWS,
					config, -1)
				if err2170 != nil {
					return m.NoResult, err2170
				}
				return eval2170, nil
			}
		}
	}

	// rule #1992
	// source: iele-binary.k @382
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_130,_497))=>`MULMOD`(.KList) requires `_andBool_`(isWordStack(_497),`_==Int_`(_130,#token("9","Int"))) ensures #token("true","Bool") [UNIQUE_ID(bcb79817fca331e9e14c3cdbca480e61abfec3f5662c777d5f23ef637231fb57) contentStartColumn(10) contentStartLine(382) org.kframework.attributes.Location(Location(382,10,382,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_130,_497)
		if varXu130, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu497 := kapp0.List[1] // lhs KVariable _497
			// REQUIRES
			eval2173, err2173 := evalIsWordStack( // isWordStack(_497)
				varXu497,
				config, -1)
			if err2173 != nil {
				return m.NoResult, err2173
			}
			eval2174, err2174 := evalXuXeqXeqIntXu( // `_==Int_`(_130,#token("9","Int"))
				varXu130,
				/* rhs KToken */ m.NewIntFromString("9"),
				config, -1)
			if err2174 != nil {
				return m.NoResult, err2174
			}
			if (m.IsTrue(eval2173)) &&
			   (m.IsTrue(eval2174)) {
				// RHS
				traceRuleApply("FUNC", 1992, "{| rule #dasmOpCode(`_:__IELE-DATA`(_130,_497))=>`MULMOD`(.KList) requires `_andBool_`(isWordStack(_497),`_==Int_`(_130,#token(\"9\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bcb79817fca331e9e14c3cdbca480e61abfec3f5662c777d5f23ef637231fb57) contentStartColumn(10) contentStartLine(382) org.kframework.attributes.Location(Location(382,10,382,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMULMOD, List: []m.K{ // as-is MULMOD
				}}, nil
			}
		}
	}

	// rule #1993
	// source: iele-binary.k @390
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_56,_704))=>`LE`(.KList) requires `_andBool_`(isWordStack(_704),`_==Int_`(_56,#token("18","Int"))) ensures #token("true","Bool") [UNIQUE_ID(a120d412a85ca180e282b03baaf4faef287d366ab5f7055514807d7898e01f72) contentStartColumn(10) contentStartLine(390) org.kframework.attributes.Location(Location(390,10,390,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_56,_704)
		if varXu56, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu704 := kapp0.List[1] // lhs KVariable _704
			// REQUIRES
			eval2175, err2175 := evalIsWordStack( // isWordStack(_704)
				varXu704,
				config, -1)
			if err2175 != nil {
				return m.NoResult, err2175
			}
			eval2176, err2176 := evalXuXeqXeqIntXu( // `_==Int_`(_56,#token("18","Int"))
				varXu56,
				/* rhs KToken */ m.NewIntFromString("18"),
				config, -1)
			if err2176 != nil {
				return m.NoResult, err2176
			}
			if (m.IsTrue(eval2175)) &&
			   (m.IsTrue(eval2176)) {
				// RHS
				traceRuleApply("FUNC", 1993, "{| rule #dasmOpCode(`_:__IELE-DATA`(_56,_704))=>`LE`(.KList) requires `_andBool_`(isWordStack(_704),`_==Int_`(_56,#token(\"18\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a120d412a85ca180e282b03baaf4faef287d366ab5f7055514807d7898e01f72) contentStartColumn(10) contentStartLine(390) org.kframework.attributes.Location(Location(390,10,390,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblLE, List: []m.K{ // as-is LE
				}}, nil
			}
		}
	}

	// rule #1994
	// source: iele-binary.k @414
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_103,_625))=>`DIFFICULTY`(.KList) requires `_andBool_`(isWordStack(_625),`_==Int_`(_103,#token("68","Int"))) ensures #token("true","Bool") [UNIQUE_ID(80656e013d80e634d027c182a8437bddaa64e0122cc43da5abd4018486cb916d) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_103,_625)
		if varXu103, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu625 := kapp0.List[1] // lhs KVariable _625
			// REQUIRES
			eval2177, err2177 := evalIsWordStack( // isWordStack(_625)
				varXu625,
				config, -1)
			if err2177 != nil {
				return m.NoResult, err2177
			}
			eval2178, err2178 := evalXuXeqXeqIntXu( // `_==Int_`(_103,#token("68","Int"))
				varXu103,
				/* rhs KToken */ m.NewIntFromString("68"),
				config, -1)
			if err2178 != nil {
				return m.NoResult, err2178
			}
			if (m.IsTrue(eval2177)) &&
			   (m.IsTrue(eval2178)) {
				// RHS
				traceRuleApply("FUNC", 1994, "{| rule #dasmOpCode(`_:__IELE-DATA`(_103,_625))=>`DIFFICULTY`(.KList) requires `_andBool_`(isWordStack(_625),`_==Int_`(_103,#token(\"68\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(80656e013d80e634d027c182a8437bddaa64e0122cc43da5abd4018486cb916d) contentStartColumn(10) contentStartLine(414) org.kframework.attributes.Location(Location(414,10,414,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblDIFFICULTY, List: []m.K{ // as-is DIFFICULTY
				}}, nil
			}
		}
	}

	// rule #1995
	// source: iele-binary.k @429
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_87,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BRLABEL`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_87,#token("102","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4c7b179c96b95e2a6df2e7dea9ff703d6d0910713590c45ec24b6f04020e0eaf) contentStartColumn(10) contentStartLine(429) org.kframework.attributes.Location(Location(429,10,429,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_87,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu87, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							// REQUIRES
							eval2179, err2179 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err2179 != nil {
								return m.NoResult, err2179
							}
							eval2180, err2180 := evalXuXeqXeqIntXu( // `_==Int_`(_87,#token("102","Int"))
								varXu87,
								/* rhs KToken */ m.NewIntFromString("102"),
								config, -1)
							if err2180 != nil {
								return m.NoResult, err2180
							}
							if (m.IsTrue(eval2179) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */ ) &&
							   (m.IsTrue(eval2180)) {
								// RHS
								traceRuleApply("FUNC", 1995, "{| rule #dasmOpCode(`_:__IELE-DATA`(_87,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))))=>`BRLABEL`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2)) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W2)),isInt(W1)),`_==Int_`(_87,#token(\"102\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4c7b179c96b95e2a6df2e7dea9ff703d6d0910713590c45ec24b6f04020e0eaf) contentStartColumn(10) contentStartLine(429) org.kframework.attributes.Location(Location(429,10,429,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2182, err2182 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
									varW1,
									/* rhs KToken */ m.NewIntFromString("256"),
									config, -1)
								if err2182 != nil {
									return m.NoResult, err2182
								}
								eval2181, err2181 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
									eval2182,
									varW2,
									config, -1)
								if err2181 != nil {
									return m.NoResult, err2181
								}
								return &m.KApply{Label: m.LblBRLABEL, List: []m.K{ // as-is BRLABEL
									eval2181,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #1996
	// source: iele-binary.k @408
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_102,_527))=>`GASPRICE`(.KList) requires `_andBool_`(isWordStack(_527),`_==Int_`(_102,#token("58","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b92bab55a8c782732db4e80be04ee40ab837bd823aa6dc9bac60f0b20805918e) contentStartColumn(10) contentStartLine(408) org.kframework.attributes.Location(Location(408,10,408,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_102,_527)
		if varXu102, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu527 := kapp0.List[1] // lhs KVariable _527
			// REQUIRES
			eval2183, err2183 := evalIsWordStack( // isWordStack(_527)
				varXu527,
				config, -1)
			if err2183 != nil {
				return m.NoResult, err2183
			}
			eval2184, err2184 := evalXuXeqXeqIntXu( // `_==Int_`(_102,#token("58","Int"))
				varXu102,
				/* rhs KToken */ m.NewIntFromString("58"),
				config, -1)
			if err2184 != nil {
				return m.NoResult, err2184
			}
			if (m.IsTrue(eval2183)) &&
			   (m.IsTrue(eval2184)) {
				// RHS
				traceRuleApply("FUNC", 1996, "{| rule #dasmOpCode(`_:__IELE-DATA`(_102,_527))=>`GASPRICE`(.KList) requires `_andBool_`(isWordStack(_527),`_==Int_`(_102,#token(\"58\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b92bab55a8c782732db4e80be04ee40ab837bd823aa6dc9bac60f0b20805918e) contentStartColumn(10) contentStartLine(408) org.kframework.attributes.Location(Location(408,10,408,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblGASPRICE, List: []m.K{ // as-is GASPRICE
				}}, nil
			}
		}
	}

	// rule #1997
	// source: iele-binary.k @444
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_78,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`LOCALCALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_78,#token("249","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6872ae63103bd03569c4d238a42a99ef5e80d076eeb83171ac1685b6418c387b) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_78,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))))
		if varXu78, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS)))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,WS)
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											varWS := kapp4.List[1] // lhs KVariable WS
											// REQUIRES
											eval2185, err2185 := evalIsWordStack( // isWordStack(WS)
												varWS,
												config, -1)
											if err2185 != nil {
												return m.NoResult, err2185
											}
											eval2186, err2186 := evalXuXeqXeqIntXu( // `_==Int_`(_78,#token("249","Int"))
												varXu78,
												/* rhs KToken */ m.NewIntFromString("249"),
												config, -1)
											if err2186 != nil {
												return m.NoResult, err2186
											}
											if (/* rhs precomputed isInt(W4) */ /* && */
											   m.IsTrue(eval2185) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
											   (m.IsTrue(eval2186)) {
												// RHS
												traceRuleApply("FUNC", 1997, "{| rule #dasmOpCode(`_:__IELE-DATA`(_78,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,WS))))))=>`LOCALCALLDYN`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W2)),isInt(W1)),isInt(W3)),`_==Int_`(_78,#token(\"249\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6872ae63103bd03569c4d238a42a99ef5e80d076eeb83171ac1685b6418c387b) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
												eval2188, err2188 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
													varW1,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2188 != nil {
													return m.NoResult, err2188
												}
												eval2187, err2187 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
													eval2188,
													varW2,
													config, -1)
												if err2187 != nil {
													return m.NoResult, err2187
												}
												eval2190, err2190 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
													varW3,
													/* rhs KToken */ m.NewIntFromString("256"),
													config, -1)
												if err2190 != nil {
													return m.NoResult, err2190
												}
												eval2189, err2189 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
													eval2190,
													varW4,
													config, -1)
												if err2189 != nil {
													return m.NoResult, err2189
												}
												return &m.KApply{Label: m.LblLOCALCALLDYN, List: []m.K{ // as-is LOCALCALLDYN
													eval2187,
													eval2189,
												}}, nil
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #1998
	// source: iele-binary.k @422
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_44,_520))=>`MSIZE`(.KList) requires `_andBool_`(isWordStack(_520),`_==Int_`(_44,#token("86","Int"))) ensures #token("true","Bool") [UNIQUE_ID(77f2a88d550ba87a2101d1dbbf7f4a5ec517f223e43689ea5900f47088821d40) contentStartColumn(10) contentStartLine(422) org.kframework.attributes.Location(Location(422,10,422,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_44,_520)
		if varXu44, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu520 := kapp0.List[1] // lhs KVariable _520
			// REQUIRES
			eval2191, err2191 := evalIsWordStack( // isWordStack(_520)
				varXu520,
				config, -1)
			if err2191 != nil {
				return m.NoResult, err2191
			}
			eval2192, err2192 := evalXuXeqXeqIntXu( // `_==Int_`(_44,#token("86","Int"))
				varXu44,
				/* rhs KToken */ m.NewIntFromString("86"),
				config, -1)
			if err2192 != nil {
				return m.NoResult, err2192
			}
			if (m.IsTrue(eval2191)) &&
			   (m.IsTrue(eval2192)) {
				// RHS
				traceRuleApply("FUNC", 1998, "{| rule #dasmOpCode(`_:__IELE-DATA`(_44,_520))=>`MSIZE`(.KList) requires `_andBool_`(isWordStack(_520),`_==Int_`(_44,#token(\"86\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(77f2a88d550ba87a2101d1dbbf7f4a5ec517f223e43689ea5900f47088821d40) contentStartColumn(10) contentStartLine(422) org.kframework.attributes.Location(Location(422,10,422,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMSIZE, List: []m.K{ // as-is MSIZE
				}}, nil
			}
		}
	}

	// rule #1999
	// source: iele-binary.k @419
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_67,_469))=>`MSTORE`(.KList) requires `_andBool_`(isWordStack(_469),`_==Int_`(_67,#token("83","Int"))) ensures #token("true","Bool") [UNIQUE_ID(2deba7d63cb9e876b566d4d82d1420f961ae2de078ac604d27428642cf552ab1) contentStartColumn(10) contentStartLine(419) org.kframework.attributes.Location(Location(419,10,419,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_67,_469)
		if varXu67, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu469 := kapp0.List[1] // lhs KVariable _469
			// REQUIRES
			eval2193, err2193 := evalIsWordStack( // isWordStack(_469)
				varXu469,
				config, -1)
			if err2193 != nil {
				return m.NoResult, err2193
			}
			eval2194, err2194 := evalXuXeqXeqIntXu( // `_==Int_`(_67,#token("83","Int"))
				varXu67,
				/* rhs KToken */ m.NewIntFromString("83"),
				config, -1)
			if err2194 != nil {
				return m.NoResult, err2194
			}
			if (m.IsTrue(eval2193)) &&
			   (m.IsTrue(eval2194)) {
				// RHS
				traceRuleApply("FUNC", 1999, "{| rule #dasmOpCode(`_:__IELE-DATA`(_67,_469))=>`MSTORE`(.KList) requires `_andBool_`(isWordStack(_469),`_==Int_`(_67,#token(\"83\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2deba7d63cb9e876b566d4d82d1420f961ae2de078ac604d27428642cf552ab1) contentStartColumn(10) contentStartLine(419) org.kframework.attributes.Location(Location(419,10,419,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblMSTORE, List: []m.K{ // as-is MSTORE
				}}, nil
			}
		}
	}

	// rule #2000
	// source: iele-binary.k @437
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_105,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`CALL`(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),`_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4),`_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_105,#token("242","Int"))) ensures #token("true","Bool") [UNIQUE_ID(73fc03ccf1c9eb9a168387bf2d717c7e809c0355e219322ceca111e52a86a2e2) contentStartColumn(10) contentStartLine(437) org.kframework.attributes.Location(Location(437,10,437,134)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_105,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))))
		if varXu105, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))))
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))
								if varW3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS)))
										if varW4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if kapp5, t := kapp4.List[1].(*m.KApply); t && kapp5.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp5.List) == 2 { // `_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))
												if varW5, t := kapp5.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
													if kapp6, t := kapp5.List[1].(*m.KApply); t && kapp6.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp6.List) == 2 { // `_:__IELE-DATA`(W6,WS)
														if varW6, t := kapp6.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
															varWS := kapp6.List[1] // lhs KVariable WS
															// REQUIRES
															eval2195, err2195 := evalIsWordStack( // isWordStack(WS)
																varWS,
																config, -1)
															if err2195 != nil {
																return m.NoResult, err2195
															}
															eval2196, err2196 := evalXuXeqXeqIntXu( // `_==Int_`(_105,#token("242","Int"))
																varXu105,
																/* rhs KToken */ m.NewIntFromString("242"),
																config, -1)
															if err2196 != nil {
																return m.NoResult, err2196
															}
															if (/* rhs precomputed isInt(W4) */ /* && */
															   m.IsTrue(eval2195) /* && */ /* rhs precomputed isInt(W6) */  /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W5) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
															   (m.IsTrue(eval2196)) {
																// RHS
																traceRuleApply("FUNC", 2000, "{| rule #dasmOpCode(`_:__IELE-DATA`(_105,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(W5,`_:__IELE-DATA`(W6,WS))))))))=>`CALL`(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),`_+Int_`(`_*Int__INT`(W3,#token(\"256\",\"Int\")),W4),`_+Int_`(`_*Int__INT`(W5,#token(\"256\",\"Int\")),W6)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W4),isWordStack(WS)),isInt(W6)),isInt(W2)),isInt(W5)),isInt(W1)),isInt(W3)),`_==Int_`(_105,#token(\"242\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(73fc03ccf1c9eb9a168387bf2d717c7e809c0355e219322ceca111e52a86a2e2) contentStartColumn(10) contentStartLine(437) org.kframework.attributes.Location(Location(437,10,437,134)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
																eval2198, err2198 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
																	varW1,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2198 != nil {
																	return m.NoResult, err2198
																}
																eval2197, err2197 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
																	eval2198,
																	varW2,
																	config, -1)
																if err2197 != nil {
																	return m.NoResult, err2197
																}
																eval2200, err2200 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W3,#token("256","Int"))
																	varW3,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2200 != nil {
																	return m.NoResult, err2200
																}
																eval2199, err2199 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W3,#token("256","Int")),W4)
																	eval2200,
																	varW4,
																	config, -1)
																if err2199 != nil {
																	return m.NoResult, err2199
																}
																eval2202, err2202 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W5,#token("256","Int"))
																	varW5,
																	/* rhs KToken */ m.NewIntFromString("256"),
																	config, -1)
																if err2202 != nil {
																	return m.NoResult, err2202
																}
																eval2201, err2201 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W5,#token("256","Int")),W6)
																	eval2202,
																	varW6,
																	config, -1)
																if err2201 != nil {
																	return m.NoResult, err2201
																}
																return &m.KApply{Label: m.LblCALL, List: []m.K{ // as-is CALL
																	eval2197,
																	eval2199,
																	eval2201,
																}}, nil
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2001
	// source: iele-binary.k @411
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_124,_705))=>`BENEFICIARY`(.KList) requires `_andBool_`(isWordStack(_705),`_==Int_`(_124,#token("65","Int"))) ensures #token("true","Bool") [UNIQUE_ID(1cbf10b1da58989fa1e13cc7b072d83c35bf853dceddfc8c8b865f475d0ee7ef) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_124,_705)
		if varXu124, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu705 := kapp0.List[1] // lhs KVariable _705
			// REQUIRES
			eval2203, err2203 := evalIsWordStack( // isWordStack(_705)
				varXu705,
				config, -1)
			if err2203 != nil {
				return m.NoResult, err2203
			}
			eval2204, err2204 := evalXuXeqXeqIntXu( // `_==Int_`(_124,#token("65","Int"))
				varXu124,
				/* rhs KToken */ m.NewIntFromString("65"),
				config, -1)
			if err2204 != nil {
				return m.NoResult, err2204
			}
			if (m.IsTrue(eval2203)) &&
			   (m.IsTrue(eval2204)) {
				// RHS
				traceRuleApply("FUNC", 2001, "{| rule #dasmOpCode(`_:__IELE-DATA`(_124,_705))=>`BENEFICIARY`(.KList) requires `_andBool_`(isWordStack(_705),`_==Int_`(_124,#token(\"65\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1cbf10b1da58989fa1e13cc7b072d83c35bf853dceddfc8c8b865f475d0ee7ef) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblBENEFICIARY, List: []m.K{ // as-is BENEFICIARY
				}}, nil
			}
		}
	}

	// rule #2002
	// source: iele-binary.k @386
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_74,_648))=>`BSWAP`(.KList) requires `_andBool_`(isWordStack(_648),`_==Int_`(_74,#token("13","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ba3f0d0bf7544722f0c2a68bf99d498f774ed0d9aa4e55362ce09643824da8fc) contentStartColumn(10) contentStartLine(386) org.kframework.attributes.Location(Location(386,10,386,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_74,_648)
		if varXu74, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu648 := kapp0.List[1] // lhs KVariable _648
			// REQUIRES
			eval2205, err2205 := evalIsWordStack( // isWordStack(_648)
				varXu648,
				config, -1)
			if err2205 != nil {
				return m.NoResult, err2205
			}
			eval2206, err2206 := evalXuXeqXeqIntXu( // `_==Int_`(_74,#token("13","Int"))
				varXu74,
				/* rhs KToken */ m.NewIntFromString("13"),
				config, -1)
			if err2206 != nil {
				return m.NoResult, err2206
			}
			if (m.IsTrue(eval2205)) &&
			   (m.IsTrue(eval2206)) {
				// RHS
				traceRuleApply("FUNC", 2002, "{| rule #dasmOpCode(`_:__IELE-DATA`(_74,_648))=>`BSWAP`(.KList) requires `_andBool_`(isWordStack(_648),`_==Int_`(_74,#token(\"13\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba3f0d0bf7544722f0c2a68bf99d498f774ed0d9aa4e55362ce09643824da8fc) contentStartColumn(10) contentStartLine(386) org.kframework.attributes.Location(Location(386,10,386,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblBSWAP, List: []m.K{ // as-is BSWAP
				}}, nil
			}
		}
	}

	// rule #2003
	// source: iele-binary.k @393
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_110,_593))=>`ISZERO`(.KList) requires `_andBool_`(isWordStack(_593),`_==Int_`(_110,#token("21","Int"))) ensures #token("true","Bool") [UNIQUE_ID(54e89b45521389841b5bcefafc5323bc461d2162d8461bc6e5b1ef11b9aea0f9) contentStartColumn(10) contentStartLine(393) org.kframework.attributes.Location(Location(393,10,393,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_110,_593)
		if varXu110, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu593 := kapp0.List[1] // lhs KVariable _593
			// REQUIRES
			eval2207, err2207 := evalIsWordStack( // isWordStack(_593)
				varXu593,
				config, -1)
			if err2207 != nil {
				return m.NoResult, err2207
			}
			eval2208, err2208 := evalXuXeqXeqIntXu( // `_==Int_`(_110,#token("21","Int"))
				varXu110,
				/* rhs KToken */ m.NewIntFromString("21"),
				config, -1)
			if err2208 != nil {
				return m.NoResult, err2208
			}
			if (m.IsTrue(eval2207)) &&
			   (m.IsTrue(eval2208)) {
				// RHS
				traceRuleApply("FUNC", 2003, "{| rule #dasmOpCode(`_:__IELE-DATA`(_110,_593))=>`ISZERO`(.KList) requires `_andBool_`(isWordStack(_593),`_==Int_`(_110,#token(\"21\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(54e89b45521389841b5bcefafc5323bc461d2162d8461bc6e5b1ef11b9aea0f9) contentStartColumn(10) contentStartLine(393) org.kframework.attributes.Location(Location(393,10,393,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblISZERO, List: []m.K{ // as-is ISZERO
				}}, nil
			}
		}
	}

	// rule #2004
	// source: iele-binary.k @415
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_48,_521))=>`GASLIMIT`(.KList) requires `_andBool_`(isWordStack(_521),`_==Int_`(_48,#token("69","Int"))) ensures #token("true","Bool") [UNIQUE_ID(01a65d73910603caf840c3bff611216ea38b1bb597d7021a2d09575d63a09da7) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_48,_521)
		if varXu48, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu521 := kapp0.List[1] // lhs KVariable _521
			// REQUIRES
			eval2209, err2209 := evalIsWordStack( // isWordStack(_521)
				varXu521,
				config, -1)
			if err2209 != nil {
				return m.NoResult, err2209
			}
			eval2210, err2210 := evalXuXeqXeqIntXu( // `_==Int_`(_48,#token("69","Int"))
				varXu48,
				/* rhs KToken */ m.NewIntFromString("69"),
				config, -1)
			if err2210 != nil {
				return m.NoResult, err2210
			}
			if (m.IsTrue(eval2209)) &&
			   (m.IsTrue(eval2210)) {
				// RHS
				traceRuleApply("FUNC", 2004, "{| rule #dasmOpCode(`_:__IELE-DATA`(_48,_521))=>`GASLIMIT`(.KList) requires `_andBool_`(isWordStack(_521),`_==Int_`(_48,#token(\"69\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(01a65d73910603caf840c3bff611216ea38b1bb597d7021a2d09575d63a09da7) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblGASLIMIT, List: []m.K{ // as-is GASLIMIT
				}}, nil
			}
		}
	}

	// rule #2005
	// source: iele-binary.k @395
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_89,_641))=>`OR`(.KList) requires `_andBool_`(isWordStack(_641),`_==Int_`(_89,#token("23","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6ec20847e26aea8a57b6cedd0dbc67a2426ef25de20bbc81b04b8e9862ee65f3) contentStartColumn(10) contentStartLine(395) org.kframework.attributes.Location(Location(395,10,395,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_89,_641)
		if varXu89, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varXu641 := kapp0.List[1] // lhs KVariable _641
			// REQUIRES
			eval2211, err2211 := evalIsWordStack( // isWordStack(_641)
				varXu641,
				config, -1)
			if err2211 != nil {
				return m.NoResult, err2211
			}
			eval2212, err2212 := evalXuXeqXeqIntXu( // `_==Int_`(_89,#token("23","Int"))
				varXu89,
				/* rhs KToken */ m.NewIntFromString("23"),
				config, -1)
			if err2212 != nil {
				return m.NoResult, err2212
			}
			if (m.IsTrue(eval2211)) &&
			   (m.IsTrue(eval2212)) {
				// RHS
				traceRuleApply("FUNC", 2005, "{| rule #dasmOpCode(`_:__IELE-DATA`(_89,_641))=>`OR`(.KList) requires `_andBool_`(isWordStack(_641),`_==Int_`(_89,#token(\"23\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ec20847e26aea8a57b6cedd0dbc67a2426ef25de20bbc81b04b8e9862ee65f3) contentStartColumn(10) contentStartLine(395) org.kframework.attributes.Location(Location(395,10,395,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblOR, List: []m.K{ // as-is OR
				}}, nil
			}
		}
	}

	// rule #2006
	// source: iele-binary.k @426
	// {| rule #dasmOpCode(`_:__IELE-DATA`(_84,WS))=>#dasmLoad(#token("98","Int"),#loadLen(WS),#loadOffset(WS),WS) requires `_andBool_`(isWordStack(WS),`_==Int_`(_84,#token("98","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d537cbaf7ffe49d25cc369f4f85a739aa8e787ff8179ea615157402dba768823) contentStartColumn(10) contentStartLine(426) org.kframework.attributes.Location(Location(426,10,426,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_84,WS)
		if varXu84, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			// REQUIRES
			eval2213, err2213 := evalIsWordStack( // isWordStack(WS)
				varWS,
				config, -1)
			if err2213 != nil {
				return m.NoResult, err2213
			}
			eval2214, err2214 := evalXuXeqXeqIntXu( // `_==Int_`(_84,#token("98","Int"))
				varXu84,
				/* rhs KToken */ m.NewIntFromString("98"),
				config, -1)
			if err2214 != nil {
				return m.NoResult, err2214
			}
			if (m.IsTrue(eval2213)) &&
			   (m.IsTrue(eval2214)) {
				// RHS
				traceRuleApply("FUNC", 2006, "{| rule #dasmOpCode(`_:__IELE-DATA`(_84,WS))=>#dasmLoad(#token(\"98\",\"Int\"),#loadLen(WS),#loadOffset(WS),WS) requires `_andBool_`(isWordStack(WS),`_==Int_`(_84,#token(\"98\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d537cbaf7ffe49d25cc369f4f85a739aa8e787ff8179ea615157402dba768823) contentStartColumn(10) contentStartLine(426) org.kframework.attributes.Location(Location(426,10,426,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2216, err2216 := evalXhashloadLen( // #loadLen(WS)
					varWS,
					config, -1)
				if err2216 != nil {
					return m.NoResult, err2216
				}
				eval2217, err2217 := evalXhashloadOffset( // #loadOffset(WS)
					varWS,
					config, -1)
				if err2217 != nil {
					return m.NoResult, err2217
				}
				eval2215, err2215 := evalXhashdasmLoad( // #dasmLoad(#token("98","Int"),#loadLen(WS),#loadOffset(WS),WS)
					/* rhs KToken */ m.NewIntFromString("98"),
					eval2216,
					eval2217,
					varWS,
					config, -1)
				if err2215 != nil {
					return m.NoResult, err2215
				}
				return eval2215, nil
			}
		}
	}

	// rule #2007
	// source: iele-binary.k @448
	// {| rule #dasmOpCode(_552)=>encodingError(.KList) requires isWordStack(_552) ensures #token("true","Bool") [UNIQUE_ID(2e9ec120fd8bad9335eb88d235ea4480271bd311956cc9ff1eac54a878d419dc) contentStartColumn(10) contentStartLine(448) org.kframework.attributes.Location(Location(448,10,448,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu552 := c // lhs KVariable _552
		// REQUIRES
		eval2218, err2218 := evalIsWordStack( // isWordStack(_552)
			varXu552,
			config, -1)
		if err2218 != nil {
			return m.NoResult, err2218
		}
		if m.IsTrue(eval2218) {
			// RHS
			traceRuleApply("FUNC", 2007, "{| rule #dasmOpCode(_552)=>encodingError(.KList) requires isWordStack(_552) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2e9ec120fd8bad9335eb88d235ea4480271bd311956cc9ff1eac54a878d419dc) contentStartColumn(10) contentStartLine(448) org.kframework.attributes.Location(Location(448,10,448,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return &m.KApply{Label: m.LblEncodingError, List: []m.K{ // as-is encodingError
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmOpCode", args: []m.K{c}}
}

func evalXhashstdoutXuKXhyphenIO(config m.K, guard int) (m.K, error) {
	// rule #2008
	// source: domains.k @922
	// {| rule `#stdout_K-IO`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd57288699ac44a10b4d3e3c65ee3ad16f98646109e64ed7a5ac726279e39ae9) contentStartColumn(8) contentStartLine(922) org.kframework.attributes.Location(Location(922,8,922,20)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2008, "{| rule `#stdout_K-IO`(.KList)=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fd57288699ac44a10b4d3e3c65ee3ad16f98646109e64ed7a5ac726279e39ae9) contentStartColumn(8) contentStartLine(922) org.kframework.attributes.Location(Location(922,8,922,20)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return /* rhs KToken */ m.NewIntFromString("1"), nil

}

//var constXhashstdoutXuKXhyphenIO K = evalXhashstdoutXuKXhyphenIO(m.InternedBottom)

func evalXhashrlpDecodeListAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2009
	// source: data.k @565
	// {| rule #rlpDecodeListAux(STR,POS,`_(_,_)_IELE-DATA`(_25,L,P))=>`_,__IELE-DATA`(rlpDecode(substrString(STR,POS,`_+Int_`(L,P))),#rlpDecodeList(STR,`_+Int_`(L,P))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(POS)),isInt(L)),isInt(P)),isLengthPrefixType(_25)) ensures #token("true","Bool") [UNIQUE_ID(6d199feb8812b1c2c3bd2fc62a174f25836162bf7ddd4a9b36f3dd9198952ddb) contentStartColumn(10) contentStartLine(565) org.kframework.attributes.Location(Location(565,10,565,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varPOS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA && len(kapp0.List) == 3 { // `_(_,_)_IELE-DATA`(_25,L,P)
				varXu25 := kapp0.List[0] // lhs KVariable _25
				if varL, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varP, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval2219, err2219 := evalIsLengthPrefixType( // isLengthPrefixType(_25)
							varXu25,
							config, -1)
						if err2219 != nil {
							return m.NoResult, err2219
						}
						if /* rhs precomputed isString(STR) && isInt(POS) && isInt(L) && isInt(P) */ /* && */
						   m.IsTrue(eval2219) {
							// RHS
							traceRuleApply("FUNC", 2009, "{| rule #rlpDecodeListAux(STR,POS,`_(_,_)_IELE-DATA`(_25,L,P))=>`_,__IELE-DATA`(rlpDecode(substrString(STR,POS,`_+Int_`(L,P))),#rlpDecodeList(STR,`_+Int_`(L,P))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(POS)),isInt(L)),isInt(P)),isLengthPrefixType(_25)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6d199feb8812b1c2c3bd2fc62a174f25836162bf7ddd4a9b36f3dd9198952ddb) contentStartColumn(10) contentStartLine(565) org.kframework.attributes.Location(Location(565,10,565,140)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval2222, err2222 := evalXuXplusIntXu( // `_+Int_`(L,P)
								varL,
								varP,
								config, -1)
							if err2222 != nil {
								return m.NoResult, err2222
							}
							eval2221, err2221 := evalSubstrString( // substrString(STR,POS,`_+Int_`(L,P))
								varSTR,
								varPOS,
								eval2222,
								config, -1)
							if err2221 != nil {
								return m.NoResult, err2221
							}
							eval2220, err2220 := evalRlpDecode( // rlpDecode(substrString(STR,POS,`_+Int_`(L,P)))
								eval2221,
								config, -1)
							if err2220 != nil {
								return m.NoResult, err2220
							}
							eval2224, err2224 := evalXuXplusIntXu( // `_+Int_`(L,P)
								varL,
								varP,
								config, -1)
							if err2224 != nil {
								return m.NoResult, err2224
							}
							eval2223, err2223 := evalXhashrlpDecodeList( // #rlpDecodeList(STR,`_+Int_`(L,P))
								varSTR,
								eval2224,
								config, -1)
							if err2223 != nil {
								return m.NoResult, err2223
							}
							return &m.KApply{Label: m.LblXuXcommaXuXuIELEXhyphenDATA, List: []m.K{ // as-is _,__IELE-DATA
								eval2220,
								eval2223,
							}}, nil
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpDecodeListAux", args: []m.K{c1, c2, c3}}
}

func evalInitActiveAccountsCell(config m.K, guard int) (m.K, error) {
	// rule #2010
	// source: ? @?
	// {| rule initActiveAccountsCell(.KList)=>`<activeAccounts>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ae83e64ae5e234e1170eadf405cfd35c8b2e0b149230a443be86c384107dc694) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2010, "{| rule initActiveAccountsCell(.KList)=>`<activeAccounts>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ae83e64ae5e234e1170eadf405cfd35c8b2e0b149230a443be86c384107dc694) initializer()] |}")
	eval2225, err2225 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err2225 != nil {
		return m.NoResult, err2225
	}
	return &m.KApply{Label: m.LblXltactiveAccountsXgt, List: []m.K{ // as-is <activeAccounts>
		eval2225,
	}}, nil

}

//var constInitActiveAccountsCell K = evalInitActiveAccountsCell(m.InternedBottom)

func evalIsFunctionNameCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2011
	// source: ? @?
	// {| rule isFunctionNameCell(`<functionName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionNameXgt && len(kapp0.List) == 1 { // `<functionName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2226, err2226 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err2226 != nil {
			return m.NoResult, err2226
		}
		if m.IsTrue(eval2226) {
			// RHS
			traceRuleApply("FUNC", 2011, "{| rule isFunctionNameCell(`<functionName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2012
	// source: ? @?
	// {| rule isFunctionNameCell(#KToken(#token("FunctionNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2012, "{| rule isFunctionNameCell(#KToken(#token(\"FunctionNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2013
	// source: ? @?
	// {| rule isFunctionNameCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2013, "{| rule isFunctionNameCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCheckGasCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2014
	// source: ? @?
	// {| rule isCheckGasCellOpt(`<checkGas>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcheckGasXgt && len(kapp0.List) == 1 { // `<checkGas>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 2014, "{| rule isCheckGasCellOpt(`<checkGas>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2015
	// source: ? @?
	// {| rule isCheckGasCellOpt(#KToken(#token("CheckGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCheckGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2015, "{| rule isCheckGasCellOpt(#KToken(#token(\"CheckGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2016
	// source: ? @?
	// {| rule isCheckGasCellOpt(#KToken(#token("CheckGasCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCheckGasCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2016, "{| rule isCheckGasCellOpt(#KToken(#token(\"CheckGasCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2017
	// source: ? @?
	// {| rule isCheckGasCellOpt(noCheckGasCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCheckGasCell && len(kapp0.List) == 0 { // noCheckGasCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2017, "{| rule isCheckGasCellOpt(noCheckGasCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2018
	// source: ? @?
	// {| rule isCheckGasCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2018, "{| rule isCheckGasCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXgtXeqStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.ge
	lbl := m.LblXuXgtXeqStringXuXuSTRING // _>=String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.ge(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.ge, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2019
	// source: domains.k @551
	// {| rule `_>=String__STRING`(S1,S2)=>`notBool_`(`_<String__STRING`(S1,S2)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token("true","Bool") [UNIQUE_ID(2e24bd4be2ac7aa21b58ac7fe4e1e4e70e5e69437dff6c98e3ff986df28f5b21) contentStartColumn(8) contentStartLine(551) org.kframework.attributes.Location(Location(551,8,551,63)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES precomputed isString(S2) && isString(S1)
			// RHS
			traceRuleApply("FUNC", 2019, "{| rule `_>=String__STRING`(S1,S2)=>`notBool_`(`_<String__STRING`(S1,S2)) requires `_andBool_`(isString(S2),isString(S1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2e24bd4be2ac7aa21b58ac7fe4e1e4e70e5e69437dff6c98e3ff986df28f5b21) contentStartColumn(8) contentStartLine(551) org.kframework.attributes.Location(Location(551,8,551,63)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2228, err2228 := evalXuXltStringXuXuSTRING( // `_<String__STRING`(S1,S2)
				varS1,
				varS2,
				config, -1)
			if err2228 != nil {
				return m.NoResult, err2228
			}
			eval2227, err2227 := evalNotBoolXu( // `notBool_`(`_<String__STRING`(S1,S2))
				eval2228,
				config, -1)
			if err2227 != nil {
				return m.NoResult, err2227
			}
			return eval2227, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXgtXeqStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalXhashcallAddress(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2020
	// source: iele.k @1780
	// {| rule #callAddress(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_48,_49,FUNCS),_50),NAME,FUNC)=>#callAddressAux(FUNCS,FUNC,#token("1","Int")) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(_49),isInt(_48)),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isIeleName(FUNC)),isContract(_50)) ensures #token("true","Bool") [UNIQUE_ID(c989d2686520322152c507924771ef7971c357befb6050f04bec4a33f333d408) contentStartColumn(10) contentStartLine(1780) org.kframework.attributes.Location(Location(1780,10,1780,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_48,_49,FUNCS),_50)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,_48,_49,FUNCS)
			varNAME := kapp1.List[0] // lhs KVariable NAME
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varFUNCS := kapp1.List[3] // lhs KVariable FUNCS
					varXu50 := kapp0.List[1] // lhs KVariable _50
					if c2.Equals(varNAME) { // lhs KVariable, which reappears:NAME
						varFUNC := c3 // lhs KVariable FUNC
						// REQUIRES
						eval2229, err2229 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err2229 != nil {
							return m.NoResult, err2229
						}
						eval2230, err2230 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(FUNCS)
							varFUNCS,
							config, -1)
						if err2230 != nil {
							return m.NoResult, err2230
						}
						eval2231, err2231 := evalIsIeleName( // isIeleName(FUNC)
							varFUNC,
							config, -1)
						if err2231 != nil {
							return m.NoResult, err2231
						}
						eval2232, err2232 := evalIsContract( // isContract(_50)
							varXu50,
							config, -1)
						if err2232 != nil {
							return m.NoResult, err2232
						}
						if (((/* rhs precomputed isString(_49) && isInt(_48) */ /* && */
						   m.IsTrue(eval2229)) &&
						   (m.IsTrue(eval2230))) &&
						   (m.IsTrue(eval2231))) &&
						   (m.IsTrue(eval2232)) {
							// RHS
							traceRuleApply("FUNC", 2020, "{| rule #callAddress(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,_48,_49,FUNCS),_50),NAME,FUNC)=>#callAddressAux(FUNCS,FUNC,#token(\"1\",\"Int\")) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isString(_49),isInt(_48)),isIeleName(NAME)),isTopLevelDefinitions(FUNCS)),isIeleName(FUNC)),isContract(_50)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c989d2686520322152c507924771ef7971c357befb6050f04bec4a33f333d408) contentStartColumn(10) contentStartLine(1780) org.kframework.attributes.Location(Location(1780,10,1780,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval2233, err2233 := evalXhashcallAddressAux( // #callAddressAux(FUNCS,FUNC,#token("1","Int"))
								varFUNCS,
								varFUNC,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err2233 != nil {
								return m.NoResult, err2233
							}
							return eval2233, nil
						}
					}
				}
			}
		}
	}

	// rule #2021
	// source: iele.k @1781
	// {| rule #callAddress(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_63,_64,_65,_66),REST),NAME,FUNC)=>#callAddress(REST,NAME,FUNC) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(_66),isString(_65)),isIeleName(NAME)),isContract(REST)),isInt(_64)),isIeleName(FUNC)),isIeleName(_63)) ensures #token("true","Bool") [UNIQUE_ID(c5469d62754a2025a235934231262501f6d1700ff3d9a46c7d90596282058e35) contentStartColumn(10) contentStartLine(1781) org.kframework.attributes.Location(Location(1781,10,1781,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_63,_64,_65,_66),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_63,_64,_65,_66)
			varXu63 := kapp1.List[0] // lhs KVariable _63
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu66 := kapp1.List[3] // lhs KVariable _66
					varREST := kapp0.List[1] // lhs KVariable REST
					varNAME := c2 // lhs KVariable NAME
					varFUNC := c3 // lhs KVariable FUNC
					// REQUIRES
					eval2234, err2234 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_66)
						varXu66,
						config, -1)
					if err2234 != nil {
						return m.NoResult, err2234
					}
					eval2235, err2235 := evalIsIeleName( // isIeleName(NAME)
						varNAME,
						config, -1)
					if err2235 != nil {
						return m.NoResult, err2235
					}
					eval2236, err2236 := evalIsContract( // isContract(REST)
						varREST,
						config, -1)
					if err2236 != nil {
						return m.NoResult, err2236
					}
					eval2237, err2237 := evalIsIeleName( // isIeleName(FUNC)
						varFUNC,
						config, -1)
					if err2237 != nil {
						return m.NoResult, err2237
					}
					eval2238, err2238 := evalIsIeleName( // isIeleName(_63)
						varXu63,
						config, -1)
					if err2238 != nil {
						return m.NoResult, err2238
					}
					if ((((m.IsTrue(eval2234) /* && */ /* rhs precomputed isString(_65) */ ) &&
					   (m.IsTrue(eval2235))) &&
					   (m.IsTrue(eval2236)) /* && */ /* rhs precomputed isInt(_64) */ ) &&
					   (m.IsTrue(eval2237))) &&
					   (m.IsTrue(eval2238)) {
						// RHS
						traceRuleApply("FUNC", 2021, "{| rule #callAddress(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_63,_64,_65,_66),REST),NAME,FUNC)=>#callAddress(REST,NAME,FUNC) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(_66),isString(_65)),isIeleName(NAME)),isContract(REST)),isInt(_64)),isIeleName(FUNC)),isIeleName(_63)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c5469d62754a2025a235934231262501f6d1700ff3d9a46c7d90596282058e35) contentStartColumn(10) contentStartLine(1781) org.kframework.attributes.Location(Location(1781,10,1781,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval2239, err2239 := evalXhashcallAddress( // #callAddress(REST,NAME,FUNC)
							varREST,
							varNAME,
							varFUNC,
							config, -1)
						if err2239 != nil {
							return m.NoResult, err2239
						}
						return eval2239, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcallAddress", args: []m.K{c1, c2, c3}}
}

func evalAssignWordStackRange(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2022
	// source: data.k @299
	// {| rule assignWordStackRange(WS1,N,WS2)=>`_++__IELE-DATA`(#take(N,WS1),`_++__IELE-DATA`(WS2,#drop(`_+Int_`(N,#sizeWordStack(WS2)),WS1))) requires `_andBool_`(`_andBool_`(isWordStack(WS2),isWordStack(WS1)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(b6588cd5f775da082f1f8eb411f9aef280727d5cef099f763a623e27da755f67) contentStartColumn(10) contentStartLine(299) org.kframework.attributes.Location(Location(299,10,299,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS1 := c1 // lhs KVariable WS1
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS2 := c3 // lhs KVariable WS2
			// REQUIRES
			eval2240, err2240 := evalIsWordStack( // isWordStack(WS2)
				varWS2,
				config, -1)
			if err2240 != nil {
				return m.NoResult, err2240
			}
			eval2241, err2241 := evalIsWordStack( // isWordStack(WS1)
				varWS1,
				config, -1)
			if err2241 != nil {
				return m.NoResult, err2241
			}
			if (m.IsTrue(eval2240)) &&
			   (m.IsTrue(eval2241)) /* && */ /* rhs precomputed isInt(N) */  {
				// RHS
				traceRuleApply("FUNC", 2022, "{| rule assignWordStackRange(WS1,N,WS2)=>`_++__IELE-DATA`(#take(N,WS1),`_++__IELE-DATA`(WS2,#drop(`_+Int_`(N,#sizeWordStack(WS2)),WS1))) requires `_andBool_`(`_andBool_`(isWordStack(WS2),isWordStack(WS1)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b6588cd5f775da082f1f8eb411f9aef280727d5cef099f763a623e27da755f67) contentStartColumn(10) contentStartLine(299) org.kframework.attributes.Location(Location(299,10,299,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2243, err2243 := evalXhashtake( // #take(N,WS1)
					varN,
					varWS1,
					config, -1)
				if err2243 != nil {
					return m.NoResult, err2243
				}
				eval2247, err2247 := evalXhashsizeWordStack( // #sizeWordStack(WS2)
					varWS2,
					config, -1)
				if err2247 != nil {
					return m.NoResult, err2247
				}
				eval2246, err2246 := evalXuXplusIntXu( // `_+Int_`(N,#sizeWordStack(WS2))
					varN,
					eval2247,
					config, -1)
				if err2246 != nil {
					return m.NoResult, err2246
				}
				eval2245, err2245 := evalXhashdrop( // #drop(`_+Int_`(N,#sizeWordStack(WS2)),WS1)
					eval2246,
					varWS1,
					config, -1)
				if err2245 != nil {
					return m.NoResult, err2245
				}
				eval2244, err2244 := evalXuXplusXplusXuXuIELEXhyphenDATA( // `_++__IELE-DATA`(WS2,#drop(`_+Int_`(N,#sizeWordStack(WS2)),WS1))
					varWS2,
					eval2245,
					config, -1)
				if err2244 != nil {
					return m.NoResult, err2244
				}
				eval2242, err2242 := evalXuXplusXplusXuXuIELEXhyphenDATA( // `_++__IELE-DATA`(#take(N,WS1),`_++__IELE-DATA`(WS2,#drop(`_+Int_`(N,#sizeWordStack(WS2)),WS1)))
					eval2243,
					eval2244,
					config, -1)
				if err2242 != nil {
					return m.NoResult, err2242
				}
				return eval2242, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalAssignWordStackRange", args: []m.K{c1, c2, c3}}
}

func evalSizeMap(c m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.size
	lbl := m.LblSizeMap // sizeMap
	sort := m.SortInt
	if hookRes, hookErr := mapHooks.size(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.size, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSizeMap", args: []m.K{c}}
}

func evalIsSubstateCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2023
	// source: ? @?
	// {| rule isSubstateCell(#KToken(#token("SubstateCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2023, "{| rule isSubstateCell(#KToken(#token(\"SubstateCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2024
	// source: ? @?
	// {| rule isSubstateCell(`<substate>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateXgt && len(kapp0.List) == 3 { // `<substate>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2248, err2248 := evalIsSelfDestructCell( // isSelfDestructCell(K0)
			varK0,
			config, -1)
		if err2248 != nil {
			return m.NoResult, err2248
		}
		eval2249, err2249 := evalIsLogDataCell( // isLogDataCell(K1)
			varK1,
			config, -1)
		if err2249 != nil {
			return m.NoResult, err2249
		}
		eval2250, err2250 := evalIsRefundCell( // isRefundCell(K2)
			varK2,
			config, -1)
		if err2250 != nil {
			return m.NoResult, err2250
		}
		if ((m.IsTrue(eval2248)) &&
		   (m.IsTrue(eval2249))) &&
		   (m.IsTrue(eval2250)) {
			// RHS
			traceRuleApply("FUNC", 2024, "{| rule isSubstateCell(`<substate>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isSelfDestructCell(K0),isLogDataCell(K1)),isRefundCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2025
	// source: ? @?
	// {| rule isSubstateCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2025, "{| rule isSubstateCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsizeLVals(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2026
	// source: data.k @106
	// {| rule #sizeLVals(REGS)=>#sizeLValuesAux(REGS,#token("0","Int")) requires isLValues(REGS) ensures #token("true","Bool") [UNIQUE_ID(89bb540e4fb4cd59aef019b81ca75148ebff9645f2d6ae05ee7dcb2890d6d625) contentStartColumn(10) contentStartLine(106) org.kframework.attributes.Location(Location(106,10,106,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varREGS := c // lhs KVariable REGS
		// REQUIRES
		eval2251, err2251 := evalIsLValues( // isLValues(REGS)
			varREGS,
			config, -1)
		if err2251 != nil {
			return m.NoResult, err2251
		}
		if m.IsTrue(eval2251) {
			// RHS
			traceRuleApply("FUNC", 2026, "{| rule #sizeLVals(REGS)=>#sizeLValuesAux(REGS,#token(\"0\",\"Int\")) requires isLValues(REGS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(89bb540e4fb4cd59aef019b81ca75148ebff9645f2d6ae05ee7dcb2890d6d625) contentStartColumn(10) contentStartLine(106) org.kframework.attributes.Location(Location(106,10,106,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2252, err2252 := evalXhashsizeLValuesAux( // #sizeLValuesAux(REGS,#token("0","Int"))
				varREGS,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err2252 != nil {
				return m.NoResult, err2252
			}
			return eval2252, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeLVals", args: []m.K{c}}
}

func evalG0create(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2027
	// source: iele-gas.k @817
	// {| rule `G0create`(SCHED,WS,ARGS)=>`G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS)),#token("192","Int"))),#token("true","Bool")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isSchedule(SCHED)),isInts(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(cc565acdf038b046eb9f678ba4301b17c543ef039cd69436d26c7e7dfd70a5a7) contentStartColumn(10) contentStartLine(817) org.kframework.attributes.Location(Location(817,10,817,161)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		varWS := c2 // lhs KVariable WS
		varARGS := c3 // lhs KVariable ARGS
		// REQUIRES
		eval2253, err2253 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err2253 != nil {
			return m.NoResult, err2253
		}
		eval2254, err2254 := evalIsSchedule( // isSchedule(SCHED)
			varSCHED,
			config, -1)
		if err2254 != nil {
			return m.NoResult, err2254
		}
		eval2255, err2255 := evalIsInts( // isInts(ARGS)
			varARGS,
			config, -1)
		if err2255 != nil {
			return m.NoResult, err2255
		}
		if ((m.IsTrue(eval2253)) &&
		   (m.IsTrue(eval2254))) &&
		   (m.IsTrue(eval2255)) {
			// RHS
			traceRuleApply("FUNC", 2027, "{| rule `G0create`(SCHED,WS,ARGS)=>`G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS)),#token(\"192\",\"Int\"))),#token(\"true\",\"Bool\")) requires `_andBool_`(`_andBool_`(isWordStack(WS),isSchedule(SCHED)),isInts(ARGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cc565acdf038b046eb9f678ba4301b17c543ef039cd69436d26c7e7dfd70a5a7) contentStartColumn(10) contentStartLine(817) org.kframework.attributes.Location(Location(817,10,817,161)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2261, err2261 := evalXhashunparseByteStack( // #unparseByteStack(WS)
				varWS,
				config, -1)
			if err2261 != nil {
				return m.NoResult, err2261
			}
			eval2260, err2260 := evalXhashrlpEncodeString( // #rlpEncodeString(#unparseByteStack(WS))
				eval2261,
				config, -1)
			if err2260 != nil {
				return m.NoResult, err2260
			}
			eval2262, err2262 := evalRlpEncodeInts( // rlpEncodeInts(ARGS)
				varARGS,
				config, -1)
			if err2262 != nil {
				return m.NoResult, err2262
			}
			eval2259, err2259 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS))
				eval2260,
				eval2262,
				config, -1)
			if err2259 != nil {
				return m.NoResult, err2259
			}
			eval2258, err2258 := evalXhashrlpEncodeLength( // #rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS)),#token("192","Int"))
				eval2259,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err2258 != nil {
				return m.NoResult, err2258
			}
			eval2257, err2257 := evalXhashparseByteStackRaw( // #parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS)),#token("192","Int")))
				eval2258,
				config, -1)
			if err2257 != nil {
				return m.NoResult, err2257
			}
			eval2256, err2256 := evalG0aux( // `G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(#unparseByteStack(WS)),rlpEncodeInts(ARGS)),#token("192","Int"))),#token("true","Bool"))
				varSCHED,
				eval2257,
				/* rhs KToken */ m.BoolTrue,
				config, -1)
			if err2256 != nil {
				return m.NoResult, err2256
			}
			return eval2256, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalG0create", args: []m.K{c1, c2, c3}}
}

func evalSubstrString(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.substr
	lbl := m.LblSubstrString // substrString
	sort := m.SortString
	if hookRes, hookErr := stringHooks.substr(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.substr, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSubstrString", args: []m.K{c1, c2, c3}}
}

func evalIsCurrentFunctionCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2028
	// source: ? @?
	// {| rule isCurrentFunctionCellOpt(`<currentFunction>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentFunctionXgt && len(kapp0.List) == 3 { // `<currentFunction>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2263, err2263 := evalIsFunctionNameCell( // isFunctionNameCell(K0)
			varK0,
			config, -1)
		if err2263 != nil {
			return m.NoResult, err2263
		}
		eval2264, err2264 := evalIsLabelsCell( // isLabelsCell(K1)
			varK1,
			config, -1)
		if err2264 != nil {
			return m.NoResult, err2264
		}
		eval2265, err2265 := evalIsCurrentInstructionsCell( // isCurrentInstructionsCell(K2)
			varK2,
			config, -1)
		if err2265 != nil {
			return m.NoResult, err2265
		}
		if ((m.IsTrue(eval2263)) &&
		   (m.IsTrue(eval2264))) &&
		   (m.IsTrue(eval2265)) {
			// RHS
			traceRuleApply("FUNC", 2028, "{| rule isCurrentFunctionCellOpt(`<currentFunction>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2029
	// source: ? @?
	// {| rule isCurrentFunctionCellOpt(noCurrentFunctionCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCurrentFunctionCell && len(kapp0.List) == 0 { // noCurrentFunctionCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2029, "{| rule isCurrentFunctionCellOpt(noCurrentFunctionCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2030
	// source: ? @?
	// {| rule isCurrentFunctionCellOpt(#KToken(#token("CurrentFunctionCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentFunctionCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2030, "{| rule isCurrentFunctionCellOpt(#KToken(#token(\"CurrentFunctionCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2031
	// source: ? @?
	// {| rule isCurrentFunctionCellOpt(#KToken(#token("CurrentFunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2031, "{| rule isCurrentFunctionCellOpt(#KToken(#token(\"CurrentFunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2032
	// source: ? @?
	// {| rule isCurrentFunctionCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2032, "{| rule isCurrentFunctionCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGeneratedTopCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2033
	// source: ? @?
	// {| rule isGeneratedTopCellFragment(#KToken(#token("GeneratedTopCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGeneratedTopCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2033, "{| rule isGeneratedTopCellFragment(#KToken(#token(\"GeneratedTopCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2034
	// source: ? @?
	// {| rule isGeneratedTopCellFragment(`<generatedTop>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCellOpt(K0),isSCellOpt(K1)),isExitCodeCellOpt(K2)),isModeCellOpt(K3)),isScheduleCellOpt(K4)),isCheckGasCellOpt(K5)),isWellFormednessCellOpt(K6)),isIeleCellOpt(K7)),isNetworkCellOpt(K8)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgeneratedTopXgtXhyphenfragment && len(kapp0.List) == 9 { // `<generatedTop>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		// REQUIRES
		eval2266, err2266 := evalIsKCellOpt( // isKCellOpt(K0)
			varK0,
			config, -1)
		if err2266 != nil {
			return m.NoResult, err2266
		}
		eval2267, err2267 := evalIsSCellOpt( // isSCellOpt(K1)
			varK1,
			config, -1)
		if err2267 != nil {
			return m.NoResult, err2267
		}
		eval2268, err2268 := evalIsExitCodeCellOpt( // isExitCodeCellOpt(K2)
			varK2,
			config, -1)
		if err2268 != nil {
			return m.NoResult, err2268
		}
		eval2269, err2269 := evalIsModeCellOpt( // isModeCellOpt(K3)
			varK3,
			config, -1)
		if err2269 != nil {
			return m.NoResult, err2269
		}
		eval2270, err2270 := evalIsScheduleCellOpt( // isScheduleCellOpt(K4)
			varK4,
			config, -1)
		if err2270 != nil {
			return m.NoResult, err2270
		}
		eval2271, err2271 := evalIsCheckGasCellOpt( // isCheckGasCellOpt(K5)
			varK5,
			config, -1)
		if err2271 != nil {
			return m.NoResult, err2271
		}
		eval2272, err2272 := evalIsWellFormednessCellOpt( // isWellFormednessCellOpt(K6)
			varK6,
			config, -1)
		if err2272 != nil {
			return m.NoResult, err2272
		}
		eval2273, err2273 := evalIsIeleCellOpt( // isIeleCellOpt(K7)
			varK7,
			config, -1)
		if err2273 != nil {
			return m.NoResult, err2273
		}
		eval2274, err2274 := evalIsNetworkCellOpt( // isNetworkCellOpt(K8)
			varK8,
			config, -1)
		if err2274 != nil {
			return m.NoResult, err2274
		}
		if ((((((((m.IsTrue(eval2266)) &&
		   (m.IsTrue(eval2267))) &&
		   (m.IsTrue(eval2268))) &&
		   (m.IsTrue(eval2269))) &&
		   (m.IsTrue(eval2270))) &&
		   (m.IsTrue(eval2271))) &&
		   (m.IsTrue(eval2272))) &&
		   (m.IsTrue(eval2273))) &&
		   (m.IsTrue(eval2274)) {
			// RHS
			traceRuleApply("FUNC", 2034, "{| rule isGeneratedTopCellFragment(`<generatedTop>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKCellOpt(K0),isSCellOpt(K1)),isExitCodeCellOpt(K2)),isModeCellOpt(K3)),isScheduleCellOpt(K4)),isCheckGasCellOpt(K5)),isWellFormednessCellOpt(K6)),isIeleCellOpt(K7)),isNetworkCellOpt(K8)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2035
	// source: ? @?
	// {| rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2035, "{| rule isGeneratedTopCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalSize(c m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.size
	lbl := m.LblSize // size
	sort := m.SortInt
	if hookRes, hookErr := setHooks.size(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.size, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSize", args: []m.K{c}}
}

func evalIsCallStackCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2036
	// source: ? @?
	// {| rule isCallStackCell(`<callStack>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallStackXgt && len(kapp0.List) == 1 { // `<callStack>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2036, "{| rule isCallStackCell(`<callStack>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2037
	// source: ? @?
	// {| rule isCallStackCell(#KToken(#token("CallStackCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallStackCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2037, "{| rule isCallStackCell(#KToken(#token(\"CallStackCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2038
	// source: ? @?
	// {| rule isCallStackCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2038, "{| rule isCallStackCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsDivInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2039
	// source: ? @?
	// {| rule isDivInst(#KToken(#token("DivInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDivInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2039, "{| rule isDivInst(#KToken(#token(\"DivInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2040
	// source: ? @?
	// {| rule isDivInst(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=div_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2275, err2275 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2275 != nil {
			return m.NoResult, err2275
		}
		eval2276, err2276 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2276 != nil {
			return m.NoResult, err2276
		}
		eval2277, err2277 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2277 != nil {
			return m.NoResult, err2277
		}
		if ((m.IsTrue(eval2275)) &&
		   (m.IsTrue(eval2276))) &&
		   (m.IsTrue(eval2277)) {
			// RHS
			traceRuleApply("FUNC", 2040, "{| rule isDivInst(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2041
	// source: ? @?
	// {| rule isDivInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2041, "{| rule isDivInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCpricedmem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2042
	// source: iele-gas.k @415
	// {| rule `Cpricedmem`(SCHED,N)=>`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(N,`_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),SCHED))) requires `_andBool_`(isSchedule(SCHED),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(1c56c077f64e28e93d6662f25bb8284ca9850569d48f3b24cc984980f45e4884) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval2278, err2278 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err2278 != nil {
				return m.NoResult, err2278
			}
			if m.IsTrue(eval2278) /* && */ /* rhs precomputed isInt(N) */  {
				// RHS
				traceRuleApply("FUNC", 2042, "{| rule `Cpricedmem`(SCHED,N)=>`maxInt(_,_)_INT`(#token(\"0\",\"Int\"),`_-Int__INT`(N,`_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),SCHED))) requires `_andBool_`(isSchedule(SCHED),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1c56c077f64e28e93d6662f25bb8284ca9850569d48f3b24cc984980f45e4884) contentStartColumn(10) contentStartLine(415) org.kframework.attributes.Location(Location(415,10,415,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2281, err2281 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblSmemallowanceXuIELEXhyphenGAS, List: []m.K{ // as-is Smemallowance_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err2281 != nil {
					return m.NoResult, err2281
				}
				eval2280, err2280 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(N,`_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),SCHED))
					varN,
					eval2281,
					config, -1)
				if err2280 != nil {
					return m.NoResult, err2280
				}
				eval2279, err2279 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(N,`_<_>_IELE-GAS`(`Smemallowance_IELE-GAS`(.KList),SCHED)))
					/* rhs KToken */ m.NewIntFromString("0"),
					eval2280,
					config, -1)
				if err2279 != nil {
					return m.NoResult, err2279
				}
				return eval2279, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCpricedmem", args: []m.K{c1, c2}}
}

func evalIsFunctionsCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2043
	// source: ? @?
	// {| rule isFunctionsCellFragment(#KToken(#token("FunctionsCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionsCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2043, "{| rule isFunctionsCellFragment(#KToken(#token(\"FunctionsCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2044
	// source: ? @?
	// {| rule isFunctionsCellFragment(`<functions>-fragment`(K0))=>#token("true","Bool") requires isFunctionCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionsXgtXhyphenfragment && len(kapp0.List) == 1 { // `<functions>-fragment`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortFunctionCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isFunctionCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 2044, "{| rule isFunctionsCellFragment(`<functions>-fragment`(K0))=>#token(\"true\",\"Bool\") requires isFunctionCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2045
	// source: ? @?
	// {| rule isFunctionsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2045, "{| rule isFunctionsCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFidCell(config m.K, guard int) (m.K, error) {
	// rule #2046
	// source: ? @?
	// {| rule initFidCell(.KList)=>`<fid>`(#token("deposit","IeleName")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9cae4ff91bd899e61d4fab5c924e19bf973d9e551b5421259267efde7411c089) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2046, "{| rule initFidCell(.KList)=>`<fid>`(#token(\"deposit\",\"IeleName\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9cae4ff91bd899e61d4fab5c924e19bf973d9e551b5421259267efde7411c089) initializer()] |}")
	return &m.KApply{Label: m.LblXltfidXgt, List: []m.K{ // as-is <fid>
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
	}}, nil

}

//var constInitFidCell K = evalInitFidCell(m.InternedBottom)

func evalInitCallStackCell(config m.K, guard int) (m.K, error) {
	// rule #2047
	// source: ? @?
	// {| rule initCallStackCell(.KList)=>`<callStack>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(aa7af52bbdfb2bc1857b97da4c1c6b81ee768bcbeb775e83396c9ff82357ee91) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2047, "{| rule initCallStackCell(.KList)=>`<callStack>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aa7af52bbdfb2bc1857b97da4c1c6b81ee768bcbeb775e83396c9ff82357ee91) initializer()] |}")
	eval2282, err2282 := evalXdotList(config, -1) // `.List`(.KList)
	if err2282 != nil {
		return m.NoResult, err2282
	}
	return &m.KApply{Label: m.LblXltcallStackXgt, List: []m.K{ // as-is <callStack>
		eval2282,
	}}, nil

}

//var constInitCallStackCell K = evalInitCallStackCell(m.InternedBottom)

func evalXhashrlpEncodeBytes(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2048
	// source: data.k @511
	// {| rule #rlpEncodeBytes(WORD,LEN)=>#rlpEncodeString(`Bytes2String`(`Int2Bytes`(LEN,WORD,bigEndianBytes(.KList)))) requires `_andBool_`(isInt(LEN),isInt(WORD)) ensures #token("true","Bool") [UNIQUE_ID(0ccfd3b36e5774ab8321e85b69b8b08b1d1b9862b2e44a146bfcb602ba14cff0) contentStartColumn(10) contentStartLine(511) org.kframework.attributes.Location(Location(511,10,511,96)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varWORD, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varLEN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(LEN) && isInt(WORD)
			// RHS
			traceRuleApply("FUNC", 2048, "{| rule #rlpEncodeBytes(WORD,LEN)=>#rlpEncodeString(`Bytes2String`(`Int2Bytes`(LEN,WORD,bigEndianBytes(.KList)))) requires `_andBool_`(isInt(LEN),isInt(WORD)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ccfd3b36e5774ab8321e85b69b8b08b1d1b9862b2e44a146bfcb602ba14cff0) contentStartColumn(10) contentStartLine(511) org.kframework.attributes.Location(Location(511,10,511,96)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2285, err2285 := evalInt2Bytes( // `Int2Bytes`(LEN,WORD,bigEndianBytes(.KList))
				varLEN,
				varWORD,
				&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
				}},
				config, -1)
			if err2285 != nil {
				return m.NoResult, err2285
			}
			eval2284, err2284 := evalBytes2String( // `Bytes2String`(`Int2Bytes`(LEN,WORD,bigEndianBytes(.KList)))
				eval2285,
				config, -1)
			if err2284 != nil {
				return m.NoResult, err2284
			}
			eval2283, err2283 := evalXhashrlpEncodeString( // #rlpEncodeString(`Bytes2String`(`Int2Bytes`(LEN,WORD,bigEndianBytes(.KList))))
				eval2284,
				config, -1)
			if err2283 != nil {
				return m.NoResult, err2283
			}
			return eval2283, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeBytes", args: []m.K{c1, c2}}
}

func evalIsIeleCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2049
	// source: ? @?
	// {| rule isIeleCellOpt(#KToken(#token("IeleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2049, "{| rule isIeleCellOpt(#KToken(#token(\"IeleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2050
	// source: ? @?
	// {| rule isIeleCellOpt(#KToken(#token("IeleCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2050, "{| rule isIeleCellOpt(#KToken(#token(\"IeleCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2051
	// source: ? @?
	// {| rule isIeleCellOpt(noIeleCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoIeleCell && len(kapp0.List) == 0 { // noIeleCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2051, "{| rule isIeleCellOpt(noIeleCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2052
	// source: ? @?
	// {| rule isIeleCellOpt(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltieleXgt && len(kapp0.List) == 15 { // `<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval2286, err2286 := evalIsOutputCell( // isOutputCell(K0)
			varK0,
			config, -1)
		if err2286 != nil {
			return m.NoResult, err2286
		}
		eval2287, err2287 := evalIsCallStackCell( // isCallStackCell(K1)
			varK1,
			config, -1)
		if err2287 != nil {
			return m.NoResult, err2287
		}
		eval2288, err2288 := evalIsInterimStatesCell( // isInterimStatesCell(K2)
			varK2,
			config, -1)
		if err2288 != nil {
			return m.NoResult, err2288
		}
		eval2289, err2289 := evalIsSubstateStackCell( // isSubstateStackCell(K3)
			varK3,
			config, -1)
		if err2289 != nil {
			return m.NoResult, err2289
		}
		eval2290, err2290 := evalIsCallFrameCell( // isCallFrameCell(K4)
			varK4,
			config, -1)
		if err2290 != nil {
			return m.NoResult, err2290
		}
		eval2291, err2291 := evalIsSubstateCell( // isSubstateCell(K5)
			varK5,
			config, -1)
		if err2291 != nil {
			return m.NoResult, err2291
		}
		eval2292, err2292 := evalIsGasPriceCell( // isGasPriceCell(K6)
			varK6,
			config, -1)
		if err2292 != nil {
			return m.NoResult, err2292
		}
		eval2293, err2293 := evalIsOriginCell( // isOriginCell(K7)
			varK7,
			config, -1)
		if err2293 != nil {
			return m.NoResult, err2293
		}
		eval2294, err2294 := evalIsBeneficiaryCell( // isBeneficiaryCell(K8)
			varK8,
			config, -1)
		if err2294 != nil {
			return m.NoResult, err2294
		}
		eval2295, err2295 := evalIsDifficultyCell( // isDifficultyCell(K9)
			varK9,
			config, -1)
		if err2295 != nil {
			return m.NoResult, err2295
		}
		eval2296, err2296 := evalIsNumberCell( // isNumberCell(K10)
			varK10,
			config, -1)
		if err2296 != nil {
			return m.NoResult, err2296
		}
		eval2297, err2297 := evalIsGasLimitCell( // isGasLimitCell(K11)
			varK11,
			config, -1)
		if err2297 != nil {
			return m.NoResult, err2297
		}
		eval2298, err2298 := evalIsGasUsedCell( // isGasUsedCell(K12)
			varK12,
			config, -1)
		if err2298 != nil {
			return m.NoResult, err2298
		}
		eval2299, err2299 := evalIsTimestampCell( // isTimestampCell(K13)
			varK13,
			config, -1)
		if err2299 != nil {
			return m.NoResult, err2299
		}
		eval2300, err2300 := evalIsBlockhashCell( // isBlockhashCell(K14)
			varK14,
			config, -1)
		if err2300 != nil {
			return m.NoResult, err2300
		}
		if ((((((((((((((m.IsTrue(eval2286)) &&
		   (m.IsTrue(eval2287))) &&
		   (m.IsTrue(eval2288))) &&
		   (m.IsTrue(eval2289))) &&
		   (m.IsTrue(eval2290))) &&
		   (m.IsTrue(eval2291))) &&
		   (m.IsTrue(eval2292))) &&
		   (m.IsTrue(eval2293))) &&
		   (m.IsTrue(eval2294))) &&
		   (m.IsTrue(eval2295))) &&
		   (m.IsTrue(eval2296))) &&
		   (m.IsTrue(eval2297))) &&
		   (m.IsTrue(eval2298))) &&
		   (m.IsTrue(eval2299))) &&
		   (m.IsTrue(eval2300)) {
			// RHS
			traceRuleApply("FUNC", 2052, "{| rule isIeleCellOpt(`<iele>`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCell(K0),isCallStackCell(K1)),isInterimStatesCell(K2)),isSubstateStackCell(K3)),isCallFrameCell(K4)),isSubstateCell(K5)),isGasPriceCell(K6)),isOriginCell(K7)),isBeneficiaryCell(K8)),isDifficultyCell(K9)),isNumberCell(K10)),isGasLimitCell(K11)),isGasUsedCell(K12)),isTimestampCell(K13)),isBlockhashCell(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2053
	// source: ? @?
	// {| rule isIeleCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2053, "{| rule isIeleCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsWellFormednessCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2054
	// source: ? @?
	// {| rule isWellFormednessCellFragment(#KToken(#token("WellFormednessCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2054, "{| rule isWellFormednessCellFragment(#KToken(#token(\"WellFormednessCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2055
	// source: ? @?
	// {| rule isWellFormednessCellFragment(`<well-formedness>-fragment`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCellOpt(K0),isWellFormednessScheduleCellOpt(K1)),isContractsCellOpt(K2)),isCurrentContractCellOpt(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXgtXhyphenfragment && len(kapp0.List) == 4 { // `<well-formedness>-fragment`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2301, err2301 := evalIsTypeCheckingCellOpt( // isTypeCheckingCellOpt(K0)
			varK0,
			config, -1)
		if err2301 != nil {
			return m.NoResult, err2301
		}
		eval2302, err2302 := evalIsWellFormednessScheduleCellOpt( // isWellFormednessScheduleCellOpt(K1)
			varK1,
			config, -1)
		if err2302 != nil {
			return m.NoResult, err2302
		}
		eval2303, err2303 := evalIsContractsCellOpt( // isContractsCellOpt(K2)
			varK2,
			config, -1)
		if err2303 != nil {
			return m.NoResult, err2303
		}
		eval2304, err2304 := evalIsCurrentContractCellOpt( // isCurrentContractCellOpt(K3)
			varK3,
			config, -1)
		if err2304 != nil {
			return m.NoResult, err2304
		}
		if (((m.IsTrue(eval2301)) &&
		   (m.IsTrue(eval2302))) &&
		   (m.IsTrue(eval2303))) &&
		   (m.IsTrue(eval2304)) {
			// RHS
			traceRuleApply("FUNC", 2055, "{| rule isWellFormednessCellFragment(`<well-formedness>-fragment`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isTypeCheckingCellOpt(K0),isWellFormednessScheduleCellOpt(K1)),isContractsCellOpt(K2)),isCurrentContractCellOpt(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2056
	// source: ? @?
	// {| rule isWellFormednessCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2056, "{| rule isWellFormednessCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsAccountCallInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2057
	// source: ? @?
	// {| rule isAccountCallInst(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)),isOperand(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval2305, err2305 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2305 != nil {
			return m.NoResult, err2305
		}
		eval2306, err2306 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2306 != nil {
			return m.NoResult, err2306
		}
		eval2307, err2307 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2307 != nil {
			return m.NoResult, err2307
		}
		eval2308, err2308 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2308 != nil {
			return m.NoResult, err2308
		}
		eval2309, err2309 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2309 != nil {
			return m.NoResult, err2309
		}
		eval2310, err2310 := evalIsOperand( // isOperand(K5)
			varK5,
			config, -1)
		if err2310 != nil {
			return m.NoResult, err2310
		}
		if (((((m.IsTrue(eval2305)) &&
		   (m.IsTrue(eval2306))) &&
		   (m.IsTrue(eval2307))) &&
		   (m.IsTrue(eval2308))) &&
		   (m.IsTrue(eval2309))) &&
		   (m.IsTrue(eval2310)) {
			// RHS
			traceRuleApply("FUNC", 2057, "{| rule isAccountCallInst(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)),isOperand(K5)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2058
	// source: ? @?
	// {| rule isAccountCallInst(#KToken(#token("AccountCallInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountCallInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2058, "{| rule isAccountCallInst(#KToken(#token(\"AccountCallInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2059
	// source: ? @?
	// {| rule isAccountCallInst(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2311, err2311 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2311 != nil {
			return m.NoResult, err2311
		}
		eval2312, err2312 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2312 != nil {
			return m.NoResult, err2312
		}
		eval2313, err2313 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2313 != nil {
			return m.NoResult, err2313
		}
		eval2314, err2314 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2314 != nil {
			return m.NoResult, err2314
		}
		eval2315, err2315 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2315 != nil {
			return m.NoResult, err2315
		}
		if ((((m.IsTrue(eval2311)) &&
		   (m.IsTrue(eval2312))) &&
		   (m.IsTrue(eval2313))) &&
		   (m.IsTrue(eval2314))) &&
		   (m.IsTrue(eval2315)) {
			// RHS
			traceRuleApply("FUNC", 2059, "{| rule isAccountCallInst(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperand(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2060
	// source: ? @?
	// {| rule isAccountCallInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2060, "{| rule isAccountCallInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsCreateOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2061
	// source: ? @?
	// {| rule isCreateOp(`CREATE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCREATE && len(kapp0.List) == 2 { // `CREATE`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2061, "{| rule isCreateOp(`CREATE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2062
	// source: ? @?
	// {| rule isCreateOp(#KToken(#token("CreateOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCreateOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2062, "{| rule isCreateOp(#KToken(#token(\"CreateOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2063
	// source: ? @?
	// {| rule isCreateOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2063, "{| rule isCreateOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsG2Point(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2064
	// source: ? @?
	// {| rule isG2Point(#KToken(#token("G2Point","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortG2Point { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2064, "{| rule isG2Point(#KToken(#token(\"G2Point\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2065
	// source: ? @?
	// {| rule isG2Point(`(_x_,_x_)_KRYPTO`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)),isInt(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlparenXuxXuXcommaXuxXuXrparenXuKRYPTO && len(kapp0.List) == 4 { // `(_x_,_x_)_KRYPTO`(K0,K1,K2,K3)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[3].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2) && isInt(K3)
						// RHS
						traceRuleApply("FUNC", 2065, "{| rule isG2Point(`(_x_,_x_)_KRYPTO`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)),isInt(K3)) ensures #token(\"true\",\"Bool\") [] |}")
						return /* rhs KToken */ m.BoolTrue, nil
					}
				}
			}
		}
	}

	// rule #2066
	// source: ? @?
	// {| rule isG2Point(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2066, "{| rule isG2Point(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsIeleCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2067
	// source: ? @?
	// {| rule isIeleCellFragment(#KToken(#token("IeleCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIeleCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2067, "{| rule isIeleCellFragment(#KToken(#token(\"IeleCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2068
	// source: ? @?
	// {| rule isIeleCellFragment(`<iele>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCellOpt(K0),isCallStackCellOpt(K1)),isInterimStatesCellOpt(K2)),isSubstateStackCellOpt(K3)),isCallFrameCellOpt(K4)),isSubstateCellOpt(K5)),isGasPriceCellOpt(K6)),isOriginCellOpt(K7)),isBeneficiaryCellOpt(K8)),isDifficultyCellOpt(K9)),isNumberCellOpt(K10)),isGasLimitCellOpt(K11)),isGasUsedCellOpt(K12)),isTimestampCellOpt(K13)),isBlockhashCellOpt(K14)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltieleXgtXhyphenfragment && len(kapp0.List) == 15 { // `<iele>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		varK6 := kapp0.List[6] // lhs KVariable K6
		varK7 := kapp0.List[7] // lhs KVariable K7
		varK8 := kapp0.List[8] // lhs KVariable K8
		varK9 := kapp0.List[9] // lhs KVariable K9
		varK10 := kapp0.List[10] // lhs KVariable K10
		varK11 := kapp0.List[11] // lhs KVariable K11
		varK12 := kapp0.List[12] // lhs KVariable K12
		varK13 := kapp0.List[13] // lhs KVariable K13
		varK14 := kapp0.List[14] // lhs KVariable K14
		// REQUIRES
		eval2316, err2316 := evalIsOutputCellOpt( // isOutputCellOpt(K0)
			varK0,
			config, -1)
		if err2316 != nil {
			return m.NoResult, err2316
		}
		eval2317, err2317 := evalIsCallStackCellOpt( // isCallStackCellOpt(K1)
			varK1,
			config, -1)
		if err2317 != nil {
			return m.NoResult, err2317
		}
		eval2318, err2318 := evalIsInterimStatesCellOpt( // isInterimStatesCellOpt(K2)
			varK2,
			config, -1)
		if err2318 != nil {
			return m.NoResult, err2318
		}
		eval2319, err2319 := evalIsSubstateStackCellOpt( // isSubstateStackCellOpt(K3)
			varK3,
			config, -1)
		if err2319 != nil {
			return m.NoResult, err2319
		}
		eval2320, err2320 := evalIsCallFrameCellOpt( // isCallFrameCellOpt(K4)
			varK4,
			config, -1)
		if err2320 != nil {
			return m.NoResult, err2320
		}
		eval2321, err2321 := evalIsSubstateCellOpt( // isSubstateCellOpt(K5)
			varK5,
			config, -1)
		if err2321 != nil {
			return m.NoResult, err2321
		}
		eval2322, err2322 := evalIsGasPriceCellOpt( // isGasPriceCellOpt(K6)
			varK6,
			config, -1)
		if err2322 != nil {
			return m.NoResult, err2322
		}
		eval2323, err2323 := evalIsOriginCellOpt( // isOriginCellOpt(K7)
			varK7,
			config, -1)
		if err2323 != nil {
			return m.NoResult, err2323
		}
		eval2324, err2324 := evalIsBeneficiaryCellOpt( // isBeneficiaryCellOpt(K8)
			varK8,
			config, -1)
		if err2324 != nil {
			return m.NoResult, err2324
		}
		eval2325, err2325 := evalIsDifficultyCellOpt( // isDifficultyCellOpt(K9)
			varK9,
			config, -1)
		if err2325 != nil {
			return m.NoResult, err2325
		}
		eval2326, err2326 := evalIsNumberCellOpt( // isNumberCellOpt(K10)
			varK10,
			config, -1)
		if err2326 != nil {
			return m.NoResult, err2326
		}
		eval2327, err2327 := evalIsGasLimitCellOpt( // isGasLimitCellOpt(K11)
			varK11,
			config, -1)
		if err2327 != nil {
			return m.NoResult, err2327
		}
		eval2328, err2328 := evalIsGasUsedCellOpt( // isGasUsedCellOpt(K12)
			varK12,
			config, -1)
		if err2328 != nil {
			return m.NoResult, err2328
		}
		eval2329, err2329 := evalIsTimestampCellOpt( // isTimestampCellOpt(K13)
			varK13,
			config, -1)
		if err2329 != nil {
			return m.NoResult, err2329
		}
		eval2330, err2330 := evalIsBlockhashCellOpt( // isBlockhashCellOpt(K14)
			varK14,
			config, -1)
		if err2330 != nil {
			return m.NoResult, err2330
		}
		if ((((((((((((((m.IsTrue(eval2316)) &&
		   (m.IsTrue(eval2317))) &&
		   (m.IsTrue(eval2318))) &&
		   (m.IsTrue(eval2319))) &&
		   (m.IsTrue(eval2320))) &&
		   (m.IsTrue(eval2321))) &&
		   (m.IsTrue(eval2322))) &&
		   (m.IsTrue(eval2323))) &&
		   (m.IsTrue(eval2324))) &&
		   (m.IsTrue(eval2325))) &&
		   (m.IsTrue(eval2326))) &&
		   (m.IsTrue(eval2327))) &&
		   (m.IsTrue(eval2328))) &&
		   (m.IsTrue(eval2329))) &&
		   (m.IsTrue(eval2330)) {
			// RHS
			traceRuleApply("FUNC", 2068, "{| rule isIeleCellFragment(`<iele>-fragment`(K0,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOutputCellOpt(K0),isCallStackCellOpt(K1)),isInterimStatesCellOpt(K2)),isSubstateStackCellOpt(K3)),isCallFrameCellOpt(K4)),isSubstateCellOpt(K5)),isGasPriceCellOpt(K6)),isOriginCellOpt(K7)),isBeneficiaryCellOpt(K8)),isDifficultyCellOpt(K9)),isNumberCellOpt(K10)),isGasLimitCellOpt(K11)),isGasUsedCellOpt(K12)),isTimestampCellOpt(K13)),isBlockhashCellOpt(K14)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2069
	// source: ? @?
	// {| rule isIeleCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2069, "{| rule isIeleCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsXhashUpperID(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2070
	// source: ? @?
	// {| rule `is#UpperId`(#KToken(#token("#UpperId","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortXhashUpperID { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2070, "{| rule `is#UpperId`(#KToken(#token(\"#UpperId\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2071
	// source: ? @?
	// {| rule `is#UpperId`(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2071, "{| rule `is#UpperId`(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitTxOrderCell(config m.K, guard int) (m.K, error) {
	// rule #2072
	// source: ? @?
	// {| rule initTxOrderCell(.KList)=>`<txOrder>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(956285450c60069b8df75ed41e75f9a13a3c8ddf1bc9e965c59a6e3845e59179) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2072, "{| rule initTxOrderCell(.KList)=>`<txOrder>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(956285450c60069b8df75ed41e75f9a13a3c8ddf1bc9e965c59a6e3845e59179) initializer()] |}")
	eval2331, err2331 := evalXdotList(config, -1) // `.List`(.KList)
	if err2331 != nil {
		return m.NoResult, err2331
	}
	return &m.KApply{Label: m.LblXlttxOrderXgt, List: []m.K{ // as-is <txOrder>
		eval2331,
	}}, nil

}

//var constInitTxOrderCell K = evalInitTxOrderCell(m.InternedBottom)

func evalIsKItem(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: STRING.String
	if _, t := c.(*m.String); t {
		return m.BoolTrue, nil
	}
	// predicate rule: LIST.List
	if list, t := c.(*m.List); t && list.Sort == m.SortList {
		return m.BoolTrue, nil
	}
	// predicate rule: FLOAT.Float
	if _, t := c.(*m.Float); t {
		return m.BoolTrue, nil
	}
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: BYTES.Bytes
	if _, t := c.(*m.Bytes); t {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortAccountCellMap {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortFunctionCellMap {
		return m.BoolTrue, nil
	}
	// predicate rule: SET.Set
	if set, t := c.(*m.Set); t && set.Sort == m.SortSet {
		return m.BoolTrue, nil
	}
	// predicate rule: BUFFER.StringBuffer
	if _, t := c.(*m.StringBuffer); t {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortMap {
		return m.BoolTrue, nil
	}
	// predicate rule: ARRAY.Array
	if arr, t := c.(*m.Array); t && arr.Sort == m.SortArray {
		return m.BoolTrue, nil
	}
	// predicate rule: K.KItem
	return m.BoolTrue, nil
	// unreachable predicate rule: INT.Int
	/* if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	} */
	// unreachable predicate rule: MAP.Map
	/* if mp, t := c.(*m.Map); t && mp.Sort == m.SortMessageCellMap {
		return m.BoolTrue, nil
	} */
}

func evalIsStoreInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2073
	// source: ? @?
	// {| rule isStoreInst(`store_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2332, err2332 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2332 != nil {
			return m.NoResult, err2332
		}
		eval2333, err2333 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2333 != nil {
			return m.NoResult, err2333
		}
		if (m.IsTrue(eval2332)) &&
		   (m.IsTrue(eval2333)) {
			// RHS
			traceRuleApply("FUNC", 2073, "{| rule isStoreInst(`store_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2074
	// source: ? @?
	// {| rule isStoreInst(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2334, err2334 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2334 != nil {
			return m.NoResult, err2334
		}
		eval2335, err2335 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2335 != nil {
			return m.NoResult, err2335
		}
		eval2336, err2336 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2336 != nil {
			return m.NoResult, err2336
		}
		eval2337, err2337 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2337 != nil {
			return m.NoResult, err2337
		}
		if (((m.IsTrue(eval2334)) &&
		   (m.IsTrue(eval2335))) &&
		   (m.IsTrue(eval2336))) &&
		   (m.IsTrue(eval2337)) {
			// RHS
			traceRuleApply("FUNC", 2074, "{| rule isStoreInst(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2075
	// source: ? @?
	// {| rule isStoreInst(#KToken(#token("StoreInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStoreInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2075, "{| rule isStoreInst(#KToken(#token(\"StoreInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2076
	// source: ? @?
	// {| rule isStoreInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2076, "{| rule isStoreInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalListXcolonset(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.update
	lbl := m.LblListXcolonset // List:set
	sort := m.SortList
	if hookRes, hookErr := listHooks.update(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.update, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalListXcolonset", args: []m.K{c1, c2, c3}}
}

func evalKeys(c m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.keys
	lbl := m.LblKeys // keys
	sort := m.SortSet
	if hookRes, hookErr := mapHooks.keys(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.keys, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalKeys", args: []m.K{c}}
}

func evalIsMessagesCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2077
	// source: ? @?
	// {| rule isMessagesCellOpt(#KToken(#token("MessagesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessagesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2077, "{| rule isMessagesCellOpt(#KToken(#token(\"MessagesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2078
	// source: ? @?
	// {| rule isMessagesCellOpt(#KToken(#token("MessagesCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessagesCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2078, "{| rule isMessagesCellOpt(#KToken(#token(\"MessagesCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2079
	// source: ? @?
	// {| rule isMessagesCellOpt(noMessagesCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoMessagesCell && len(kapp0.List) == 0 { // noMessagesCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2079, "{| rule isMessagesCellOpt(noMessagesCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2080
	// source: ? @?
	// {| rule isMessagesCellOpt(`<messages>`(K0))=>#token("true","Bool") requires isMessageCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessagesXgt && len(kapp0.List) == 1 { // `<messages>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMessageCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMessageCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 2080, "{| rule isMessagesCellOpt(`<messages>`(K0))=>#token(\"true\",\"Bool\") requires isMessageCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2081
	// source: ? @?
	// {| rule isMessagesCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2081, "{| rule isMessagesCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTxOrderCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2082
	// source: ? @?
	// {| rule isTxOrderCellOpt(#KToken(#token("TxOrderCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxOrderCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2082, "{| rule isTxOrderCellOpt(#KToken(#token(\"TxOrderCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2083
	// source: ? @?
	// {| rule isTxOrderCellOpt(#KToken(#token("TxOrderCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxOrderCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2083, "{| rule isTxOrderCellOpt(#KToken(#token(\"TxOrderCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2084
	// source: ? @?
	// {| rule isTxOrderCellOpt(`<txOrder>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxOrderXgt && len(kapp0.List) == 1 { // `<txOrder>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2084, "{| rule isTxOrderCellOpt(`<txOrder>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2085
	// source: ? @?
	// {| rule isTxOrderCellOpt(noTxOrderCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTxOrderCell && len(kapp0.List) == 0 { // noTxOrderCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2085, "{| rule isTxOrderCellOpt(noTxOrderCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2086
	// source: ? @?
	// {| rule isTxOrderCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2086, "{| rule isTxOrderCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(config m.K, guard int) (m.K, error) {
	// rule #2087
	// source: iele.k @1569
	// {| rule `#precompiledAccount_IELE-PRECOMPILED`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(794572399b5a6932ecbffbf047df966e212d74058570f0d8a40e833feb5e1c9f) contentStartColumn(10) contentStartLine(1569) org.kframework.attributes.Location(Location(1569,10,1569,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2087, "{| rule `#precompiledAccount_IELE-PRECOMPILED`(.KList)=>#token(\"1\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(794572399b5a6932ecbffbf047df966e212d74058570f0d8a40e833feb5e1c9f) contentStartColumn(10) contentStartLine(1569) org.kframework.attributes.Location(Location(1569,10,1569,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return /* rhs KToken */ m.NewIntFromString("1"), nil

}

//var constXhashprecompiledAccountXuIELEXhyphenPRECOMPILED K = evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(m.InternedBottom)

func evalIsCreateInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2088
	// source: ? @?
	// {| rule isCreateInst(#KToken(#token("CreateInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCreateInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2088, "{| rule isCreateInst(#KToken(#token(\"CreateInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2089
	// source: ? @?
	// {| rule isCreateInst(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isIeleName(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2338, err2338 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2338 != nil {
			return m.NoResult, err2338
		}
		eval2339, err2339 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2339 != nil {
			return m.NoResult, err2339
		}
		eval2340, err2340 := evalIsIeleName( // isIeleName(K2)
			varK2,
			config, -1)
		if err2340 != nil {
			return m.NoResult, err2340
		}
		eval2341, err2341 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2341 != nil {
			return m.NoResult, err2341
		}
		eval2342, err2342 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2342 != nil {
			return m.NoResult, err2342
		}
		if ((((m.IsTrue(eval2338)) &&
		   (m.IsTrue(eval2339))) &&
		   (m.IsTrue(eval2340))) &&
		   (m.IsTrue(eval2341))) &&
		   (m.IsTrue(eval2342)) {
			// RHS
			traceRuleApply("FUNC", 2089, "{| rule isCreateInst(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isIeleName(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2090
	// source: ? @?
	// {| rule isCreateInst(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2343, err2343 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2343 != nil {
			return m.NoResult, err2343
		}
		eval2344, err2344 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2344 != nil {
			return m.NoResult, err2344
		}
		eval2345, err2345 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2345 != nil {
			return m.NoResult, err2345
		}
		eval2346, err2346 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2346 != nil {
			return m.NoResult, err2346
		}
		eval2347, err2347 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2347 != nil {
			return m.NoResult, err2347
		}
		if ((((m.IsTrue(eval2343)) &&
		   (m.IsTrue(eval2344))) &&
		   (m.IsTrue(eval2345))) &&
		   (m.IsTrue(eval2346))) &&
		   (m.IsTrue(eval2347)) {
			// RHS
			traceRuleApply("FUNC", 2090, "{| rule isCreateInst(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isLValue(K1)),isOperand(K2)),isOperands(K3)),isOperand(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2091
	// source: ? @?
	// {| rule isCreateInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2091, "{| rule isCreateInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdasmLoad(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #2092
	// source: iele-binary.k @452
	// {| rule #dasmLoad(_94,LEN,POS,WS)=>`LOADPOS`(`_+Int_`(LEN,POS),#asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isInt(POS)),`_==Int_`(_94,#token("97","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ce48bbc5f73a9b980fd171bcf8173101cb6fef9d0d2316efd08beb2813b76df5) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu94, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varLEN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varPOS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS := c4 // lhs KVariable WS
				// REQUIRES
				eval2348, err2348 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err2348 != nil {
					return m.NoResult, err2348
				}
				eval2349, err2349 := evalXuXeqXeqIntXu( // `_==Int_`(_94,#token("97","Int"))
					varXu94,
					/* rhs KToken */ m.NewIntFromString("97"),
					config, -1)
				if err2349 != nil {
					return m.NoResult, err2349
				}
				if (m.IsTrue(eval2348) /* && */ /* rhs precomputed isInt(LEN) */  /* && */ /* rhs precomputed isInt(POS) */ ) &&
				   (m.IsTrue(eval2349)) {
					// RHS
					traceRuleApply("FUNC", 2092, "{| rule #dasmLoad(_94,LEN,POS,WS)=>`LOADPOS`(`_+Int_`(LEN,POS),#asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isInt(POS)),`_==Int_`(_94,#token(\"97\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ce48bbc5f73a9b980fd171bcf8173101cb6fef9d0d2316efd08beb2813b76df5) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval2350, err2350 := evalXuXplusIntXu( // `_+Int_`(LEN,POS)
						varLEN,
						varPOS,
						config, -1)
					if err2350 != nil {
						return m.NoResult, err2350
					}
					eval2352, err2352 := evalXuXlsqbXuXdotXdotXuXrsqbXuIELEXhyphenDATA( // `_[_.._]_IELE-DATA`(WS,POS,LEN)
						varWS,
						varPOS,
						varLEN,
						config, -1)
					if err2352 != nil {
						return m.NoResult, err2352
					}
					eval2351, err2351 := evalXhashasUnsigned( // #asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))
						eval2352,
						config, -1)
					if err2351 != nil {
						return m.NoResult, err2351
					}
					return &m.KApply{Label: m.LblLOADPOS, List: []m.K{ // as-is LOADPOS
						eval2350,
						eval2351,
					}}, nil
				}
			}
		}
	}

	// rule #2093
	// source: iele-binary.k @453
	// {| rule #dasmLoad(_46,LEN,POS,WS)=>`LOADNEG`(`_+Int_`(LEN,POS),#asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isInt(POS)),`_==Int_`(_46,#token("98","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d121554b5825798f9b7ba43b87a202127a168dbc6abc972654e3008a16c0afe2) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu46, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varLEN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varPOS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS := c4 // lhs KVariable WS
				// REQUIRES
				eval2353, err2353 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err2353 != nil {
					return m.NoResult, err2353
				}
				eval2354, err2354 := evalXuXeqXeqIntXu( // `_==Int_`(_46,#token("98","Int"))
					varXu46,
					/* rhs KToken */ m.NewIntFromString("98"),
					config, -1)
				if err2354 != nil {
					return m.NoResult, err2354
				}
				if (m.IsTrue(eval2353) /* && */ /* rhs precomputed isInt(LEN) */  /* && */ /* rhs precomputed isInt(POS) */ ) &&
				   (m.IsTrue(eval2354)) {
					// RHS
					traceRuleApply("FUNC", 2093, "{| rule #dasmLoad(_46,LEN,POS,WS)=>`LOADNEG`(`_+Int_`(LEN,POS),#asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(LEN)),isInt(POS)),`_==Int_`(_46,#token(\"98\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d121554b5825798f9b7ba43b87a202127a168dbc6abc972654e3008a16c0afe2) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval2355, err2355 := evalXuXplusIntXu( // `_+Int_`(LEN,POS)
						varLEN,
						varPOS,
						config, -1)
					if err2355 != nil {
						return m.NoResult, err2355
					}
					eval2357, err2357 := evalXuXlsqbXuXdotXdotXuXrsqbXuIELEXhyphenDATA( // `_[_.._]_IELE-DATA`(WS,POS,LEN)
						varWS,
						varPOS,
						varLEN,
						config, -1)
					if err2357 != nil {
						return m.NoResult, err2357
					}
					eval2356, err2356 := evalXhashasUnsigned( // #asUnsigned(`_[_.._]_IELE-DATA`(WS,POS,LEN))
						eval2357,
						config, -1)
					if err2356 != nil {
						return m.NoResult, err2356
					}
					return &m.KApply{Label: m.LblLOADNEG, List: []m.K{ // as-is LOADNEG
						eval2355,
						eval2356,
					}}, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmLoad", args: []m.K{c1, c2, c3, c4}}
}

func evalIsFunctionDefinition(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2094
	// source: ? @?
	// {| rule isFunctionDefinition(`define_{_}_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `define_{_}_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2358, err2358 := evalIsFunctionSignature( // isFunctionSignature(K0)
			varK0,
			config, -1)
		if err2358 != nil {
			return m.NoResult, err2358
		}
		eval2359, err2359 := evalIsBlocks( // isBlocks(K1)
			varK1,
			config, -1)
		if err2359 != nil {
			return m.NoResult, err2359
		}
		if (m.IsTrue(eval2358)) &&
		   (m.IsTrue(eval2359)) {
			// RHS
			traceRuleApply("FUNC", 2094, "{| rule isFunctionDefinition(`define_{_}_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2095
	// source: ? @?
	// {| rule isFunctionDefinition(`definepublic_{_}_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `definepublic_{_}_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2360, err2360 := evalIsFunctionSignature( // isFunctionSignature(K0)
			varK0,
			config, -1)
		if err2360 != nil {
			return m.NoResult, err2360
		}
		eval2361, err2361 := evalIsBlocks( // isBlocks(K1)
			varK1,
			config, -1)
		if err2361 != nil {
			return m.NoResult, err2361
		}
		if (m.IsTrue(eval2360)) &&
		   (m.IsTrue(eval2361)) {
			// RHS
			traceRuleApply("FUNC", 2095, "{| rule isFunctionDefinition(`definepublic_{_}_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isFunctionSignature(K0),isBlocks(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2096
	// source: ? @?
	// {| rule isFunctionDefinition(#KToken(#token("FunctionDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2096, "{| rule isFunctionDefinition(#KToken(#token(\"FunctionDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2097
	// source: ? @?
	// {| rule isFunctionDefinition(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2097, "{| rule isFunctionDefinition(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBswap(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2098
	// source: data.k @229
	// {| rule bswap(N,W)=>`Bytes2Int`(`Int2Bytes`(N,twos(N,W),bigEndianBytes(.KList)),littleEndianBytes(.KList),unsignedBytes(.KList)) requires `_andBool_`(isInt(W),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(85edd9781ab8b2e2644680e55ac74825a0a46f52f7dd891bc39b09278a052e10) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varW, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(W) && isInt(N)
			// RHS
			traceRuleApply("FUNC", 2098, "{| rule bswap(N,W)=>`Bytes2Int`(`Int2Bytes`(N,twos(N,W),bigEndianBytes(.KList)),littleEndianBytes(.KList),unsignedBytes(.KList)) requires `_andBool_`(isInt(W),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85edd9781ab8b2e2644680e55ac74825a0a46f52f7dd891bc39b09278a052e10) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2364, err2364 := evalTwos( // twos(N,W)
				varN,
				varW,
				config, -1)
			if err2364 != nil {
				return m.NoResult, err2364
			}
			eval2363, err2363 := evalInt2Bytes( // `Int2Bytes`(N,twos(N,W),bigEndianBytes(.KList))
				varN,
				eval2364,
				&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
				}},
				config, -1)
			if err2363 != nil {
				return m.NoResult, err2363
			}
			eval2362, err2362 := evalBytes2Int( // `Bytes2Int`(`Int2Bytes`(N,twos(N,W),bigEndianBytes(.KList)),littleEndianBytes(.KList),unsignedBytes(.KList))
				eval2363,
				&m.KApply{Label: m.LblLittleEndianBytes, List: []m.K{ // as-is littleEndianBytes
				}},
				&m.KApply{Label: m.LblUnsignedBytes, List: []m.K{ // as-is unsignedBytes
				}},
				config, -1)
			if err2362 != nil {
				return m.NoResult, err2362
			}
			return eval2362, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalBswap", args: []m.K{c1, c2}}
}

func evalIsCheckGasCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2099
	// source: ? @?
	// {| rule isCheckGasCell(#KToken(#token("CheckGasCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCheckGasCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2099, "{| rule isCheckGasCell(#KToken(#token(\"CheckGasCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2100
	// source: ? @?
	// {| rule isCheckGasCell(`<checkGas>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcheckGasXgt && len(kapp0.List) == 1 { // `<checkGas>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 2100, "{| rule isCheckGasCell(`<checkGas>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2101
	// source: ? @?
	// {| rule isCheckGasCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2101, "{| rule isCheckGasCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBytes(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BYTES.Bytes
	if _, t := c.(*m.Bytes); t {
		return m.BoolTrue, nil
	}
	// rule #2102
	// source: ? @?
	// {| rule isBytes(#KToken(#token("Bytes","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBytes { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2102, "{| rule isBytes(#KToken(#token(\"Bytes\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2103
	// source: ? @?
	// {| rule isBytes(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2103, "{| rule isBytes(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsValidG2Point(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.bn128g2valid
	lbl := m.LblIsValidG2Point // isValidG2Point
	sort := m.SortBool
	if hookRes, hookErr := krypto.Bn128g2valid(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.bn128g2valid, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalIsValidG2Point", args: []m.K{c}}
}

func evalXhashlambdaXuXu2(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #2104
	// source: iele-binary.k @148
	// {| rule `#lambda__2`(DECLSIZE,SIZE,WS,NBITS)=>`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("4","Int")),DECLSIZE),#isValidStringTable(#take(`_-Int__INT`(DECLSIZE,#token("2","Int")),WS),NBITS,`_-Int__INT`(DECLSIZE,#token("2","Int")))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(DECLSIZE)),isInt(NBITS)) ensures #token("true","Bool") [UNIQUE_ID(458b1d631d490fed2d5628c55a41addea1ce1751299df2a58031a6eb73452e83) org.kframework.attributes.Location(Location(148,73,148,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax K ::= "#fun" "(" K ")" "(" K ")")] |}
	// LHS
	if varDECLSIZE, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varSIZE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := c3 // lhs KVariable WS
			if varNBITS, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval2365, err2365 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err2365 != nil {
					return m.NoResult, err2365
				}
				if m.IsTrue(eval2365) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(DECLSIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  {
					// RHS
					traceRuleApply("FUNC", 2104, "{| rule `#lambda__2`(DECLSIZE,SIZE,WS,NBITS)=>`_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token(\"4\",\"Int\")),DECLSIZE),#isValidStringTable(#take(`_-Int__INT`(DECLSIZE,#token(\"2\",\"Int\")),WS),NBITS,`_-Int__INT`(DECLSIZE,#token(\"2\",\"Int\")))) requires `_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(DECLSIZE)),isInt(NBITS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(458b1d631d490fed2d5628c55a41addea1ce1751299df2a58031a6eb73452e83) org.kframework.attributes.Location(Location(148,73,148,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax K ::= \"#fun\" \"(\" K \")\" \"(\" K \")\")] |}")
					eval2368, err2368 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("4","Int"))
						varSIZE,
						/* rhs KToken */ m.NewIntFromString("4"),
						config, -1)
					if err2368 != nil {
						return m.NoResult, err2368
					}
					eval2367, err2367 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(`_-Int__INT`(SIZE,#token("4","Int")),DECLSIZE)
						eval2368,
						varDECLSIZE,
						config, -1)
					if err2367 != nil {
						return m.NoResult, err2367
					}
					eval2371, err2371 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(DECLSIZE,#token("2","Int"))
						varDECLSIZE,
						/* rhs KToken */ m.NewIntFromString("2"),
						config, -1)
					if err2371 != nil {
						return m.NoResult, err2371
					}
					eval2370, err2370 := evalXhashtake( // #take(`_-Int__INT`(DECLSIZE,#token("2","Int")),WS)
						eval2371,
						varWS,
						config, -1)
					if err2370 != nil {
						return m.NoResult, err2370
					}
					eval2372, err2372 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(DECLSIZE,#token("2","Int"))
						varDECLSIZE,
						/* rhs KToken */ m.NewIntFromString("2"),
						config, -1)
					if err2372 != nil {
						return m.NoResult, err2372
					}
					eval2369, err2369 := evalXhashisValidStringTable( // #isValidStringTable(#take(`_-Int__INT`(DECLSIZE,#token("2","Int")),WS),NBITS,`_-Int__INT`(DECLSIZE,#token("2","Int")))
						eval2370,
						varNBITS,
						eval2372,
						config, -1)
					if err2369 != nil {
						return m.NoResult, err2369
					}
					eval2366, err2366 := evalXuandBoolXu( // `_andBool_`(`_>=Int__INT`(`_-Int__INT`(SIZE,#token("4","Int")),DECLSIZE),#isValidStringTable(#take(`_-Int__INT`(DECLSIZE,#token("2","Int")),WS),NBITS,`_-Int__INT`(DECLSIZE,#token("2","Int"))))
						eval2367,
						eval2369,
						config, -1)
					if err2366 != nil {
						return m.NoResult, err2366
					}
					return eval2366, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlambdaXuXu2", args: []m.K{c1, c2, c3, c4}}
}

func evalXhashstderrXuKXhyphenIO(config m.K, guard int) (m.K, error) {
	// rule #2105
	// source: domains.k @923
	// {| rule `#stderr_K-IO`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11ef087f50cc8e9fe0fe6a8b028370816f2f2a3573af358ab6ca98318723d0e5) contentStartColumn(8) contentStartLine(923) org.kframework.attributes.Location(Location(923,8,923,20)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2105, "{| rule `#stderr_K-IO`(.KList)=>#token(\"2\",\"Int\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(11ef087f50cc8e9fe0fe6a8b028370816f2f2a3573af358ab6ca98318723d0e5) contentStartColumn(8) contentStartLine(923) org.kframework.attributes.Location(Location(923,8,923,20)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	return /* rhs KToken */ m.NewIntFromString("2"), nil

}

//var constXhashstderrXuKXhyphenIO K = evalXhashstderrXuKXhyphenIO(m.InternedBottom)

func evalInitExitCodeCell(config m.K, guard int) (m.K, error) {
	// rule #2106
	// source: ? @?
	// {| rule initExitCodeCell(.KList)=>`<exit-code>`(#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1764828c2623fd09c8eec6e4a97fdba1b6d2490450350882a1fc5c76b0a7715) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2106, "{| rule initExitCodeCell(.KList)=>`<exit-code>`(#token(\"1\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f1764828c2623fd09c8eec6e4a97fdba1b6d2490450350882a1fc5c76b0a7715) initializer()] |}")
	return &m.KApply{Label: m.LblXltexitXhyphencodeXgt, List: []m.K{ // as-is <exit-code>
		/* rhs KToken */ m.NewIntFromString("1"),
	}}, nil

}

//var constInitExitCodeCell K = evalInitExitCodeCell(m.InternedBottom)

func evalXuinXukeysXlparenXuXrparenXuMAP(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.in_keys
	lbl := m.LblXuinXukeysXlparenXuXrparenXuMAP // _in_keys(_)_MAP
	sort := m.SortBool
	if hookRes, hookErr := mapHooks.inKeys(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.in_keys, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuinXukeysXlparenXuXrparenXuMAP", args: []m.K{c1, c2}}
}

func evalInitFuncIDsCell(config m.K, guard int) (m.K, error) {
	// rule #2107
	// source: ? @?
	// {| rule initFuncIdsCell(.KList)=>`<funcIds>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fc25c2c6b7610b2ce995eef92152421d77a805066c804d5ead20fd81c38e1d44) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2107, "{| rule initFuncIdsCell(.KList)=>`<funcIds>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fc25c2c6b7610b2ce995eef92152421d77a805066c804d5ead20fd81c38e1d44) initializer()] |}")
	eval2373, err2373 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err2373 != nil {
		return m.NoResult, err2373
	}
	return &m.KApply{Label: m.LblXltfuncIDsXgt, List: []m.K{ // as-is <funcIds>
		eval2373,
	}}, nil

}

//var constInitFuncIDsCell K = evalInitFuncIDsCell(m.InternedBottom)

func evalFindChar(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.findChar
	lbl := m.LblFindChar // findChar
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.findChar(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.findChar, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2108
	// source: domains.k @554
	// {| rule findChar(_14,#token("\"\"","String"),_15)=>#token("-1","Int") requires `_andBool_`(isInt(_15),isString(_14)) ensures #token("true","Bool") [UNIQUE_ID(3c92cdc7bbe8b210d199a92b38a24538ca780f801572b653c3cb72d6d89a2adf) contentStartColumn(8) contentStartLine(554) org.kframework.attributes.Location(Location(554,8,554,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if c2.Equals(m.NewString("")) { // #token("\"\"","String")
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_15) && isString(_14)
				// RHS
				traceRuleApply("FUNC", 2108, "{| rule findChar(_14,#token(\"\\\"\\\"\",\"String\"),_15)=>#token(\"-1\",\"Int\") requires `_andBool_`(isInt(_15),isString(_14)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3c92cdc7bbe8b210d199a92b38a24538ca780f801572b653c3cb72d6d89a2adf) contentStartColumn(8) contentStartLine(554) org.kframework.attributes.Location(Location(554,8,554,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("-1"), nil
			}
		}
	}

	// rule #2109
	// source: domains.k @553
	// {| rule findChar(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),#token("-1","Int")),findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isString(S2)),isString(S1)),`_=/=String__STRING`(S2,#token("\"\"","String"))) ensures #token("true","Bool") [UNIQUE_ID(5a89a8f3b78438530e84da3913f33203b224f3c348d32f09785edd80c9cfe137) contentStartColumn(8) contentStartLine(553) org.kframework.attributes.Location(Location(553,8,553,431)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varI, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval2374, err2374 := evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(S2,#token("\"\"","String"))
					varS2,
					/* rhs KToken */ m.NewString(""),
					config, -1)
				if err2374 != nil {
					return m.NoResult, err2374
				}
				if /* rhs precomputed isInt(I) && isString(S2) && isString(S1) */ /* && */
				   m.IsTrue(eval2374) {
					// RHS
					traceRuleApply("FUNC", 2109, "{| rule findChar(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findString(S1,substrString(S2,#token(\"0\",\"Int\"),#token(\"1\",\"Int\")),I),#token(\"-1\",\"Int\")),findChar(S1,substrString(S2,#token(\"1\",\"Int\"),lengthString(S2)),I),`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(S1,substrString(S2,#token(\"1\",\"Int\"),lengthString(S2)),I),#token(\"-1\",\"Int\")),findString(S1,substrString(S2,#token(\"0\",\"Int\"),#token(\"1\",\"Int\")),I),`minInt(_,_)_INT`(findString(S1,substrString(S2,#token(\"0\",\"Int\"),#token(\"1\",\"Int\")),I),findChar(S1,substrString(S2,#token(\"1\",\"Int\"),lengthString(S2)),I)))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isString(S2)),isString(S1)),`_=/=String__STRING`(S2,#token(\"\\\"\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(5a89a8f3b78438530e84da3913f33203b224f3c348d32f09785edd80c9cfe137) contentStartColumn(8) contentStartLine(553) org.kframework.attributes.Location(Location(553,8,553,431)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval2378, err2378 := evalSubstrString( // substrString(S2,#token("0","Int"),#token("1","Int"))
						varS2,
						/* rhs KToken */ m.NewIntFromString("0"),
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err2378 != nil {
						return m.NoResult, err2378
					}
					eval2377, err2377 := evalFindString( // findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I)
						varS1,
						eval2378,
						varI,
						config, -1)
					if err2377 != nil {
						return m.NoResult, err2377
					}
					eval2376, err2376 := evalXuXeqXeqIntXu( // `_==Int_`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int"))
						eval2377,
						/* rhs KToken */ m.NewIntFromString("-1"),
						config, -1)
					if err2376 != nil {
						return m.NoResult, err2376
					}
					eval2381, err2381 := evalLengthString( // lengthString(S2)
						varS2,
						config, -1)
					if err2381 != nil {
						return m.NoResult, err2381
					}
					eval2380, err2380 := evalSubstrString( // substrString(S2,#token("1","Int"),lengthString(S2))
						varS2,
						/* rhs KToken */ m.NewIntFromString("1"),
						eval2381,
						config, -1)
					if err2380 != nil {
						return m.NoResult, err2380
					}
					eval2379, err2379 := evalFindChar( // findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)
						varS1,
						eval2380,
						varI,
						config, -1)
					if err2379 != nil {
						return m.NoResult, err2379
					}
					eval2386, err2386 := evalLengthString( // lengthString(S2)
						varS2,
						config, -1)
					if err2386 != nil {
						return m.NoResult, err2386
					}
					eval2385, err2385 := evalSubstrString( // substrString(S2,#token("1","Int"),lengthString(S2))
						varS2,
						/* rhs KToken */ m.NewIntFromString("1"),
						eval2386,
						config, -1)
					if err2385 != nil {
						return m.NoResult, err2385
					}
					eval2384, err2384 := evalFindChar( // findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)
						varS1,
						eval2385,
						varI,
						config, -1)
					if err2384 != nil {
						return m.NoResult, err2384
					}
					eval2383, err2383 := evalXuXeqXeqIntXu( // `_==Int_`(findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),#token("-1","Int"))
						eval2384,
						/* rhs KToken */ m.NewIntFromString("-1"),
						config, -1)
					if err2383 != nil {
						return m.NoResult, err2383
					}
					eval2388, err2388 := evalSubstrString( // substrString(S2,#token("0","Int"),#token("1","Int"))
						varS2,
						/* rhs KToken */ m.NewIntFromString("0"),
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err2388 != nil {
						return m.NoResult, err2388
					}
					eval2387, err2387 := evalFindString( // findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I)
						varS1,
						eval2388,
						varI,
						config, -1)
					if err2387 != nil {
						return m.NoResult, err2387
					}
					eval2391, err2391 := evalSubstrString( // substrString(S2,#token("0","Int"),#token("1","Int"))
						varS2,
						/* rhs KToken */ m.NewIntFromString("0"),
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err2391 != nil {
						return m.NoResult, err2391
					}
					eval2390, err2390 := evalFindString( // findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I)
						varS1,
						eval2391,
						varI,
						config, -1)
					if err2390 != nil {
						return m.NoResult, err2390
					}
					eval2394, err2394 := evalLengthString( // lengthString(S2)
						varS2,
						config, -1)
					if err2394 != nil {
						return m.NoResult, err2394
					}
					eval2393, err2393 := evalSubstrString( // substrString(S2,#token("1","Int"),lengthString(S2))
						varS2,
						/* rhs KToken */ m.NewIntFromString("1"),
						eval2394,
						config, -1)
					if err2393 != nil {
						return m.NoResult, err2393
					}
					eval2392, err2392 := evalFindChar( // findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)
						varS1,
						eval2393,
						varI,
						config, -1)
					if err2392 != nil {
						return m.NoResult, err2392
					}
					eval2389, err2389 := evalMinIntXlparenXuXcommaXuXrparenXuINT( // `minInt(_,_)_INT`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I))
						eval2390,
						eval2392,
						config, -1)
					if err2389 != nil {
						return m.NoResult, err2389
					}
					eval2382, err2382 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),#token("-1","Int")),findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)))
						eval2383,
						eval2387,
						eval2389,
						config, -1)
					if err2382 != nil {
						return m.NoResult, err2382
					}
					eval2375, err2375 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I),#token("-1","Int")),findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT`(findString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),findChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I))))
						eval2376,
						eval2379,
						eval2382,
						config, -1)
					if err2375 != nil {
						return m.NoResult, err2375
					}
					return eval2375, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalFindChar", args: []m.K{c1, c2, c3}}
}

func evalSetXcolonin(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.in
	lbl := m.LblSetXcolonin // Set:in
	sort := m.SortBool
	if hookRes, hookErr := setHooks.in(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.in, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSetXcolonin", args: []m.K{c1, c2}}
}

func evalIsK(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: STRING.String
	if _, t := c.(*m.String); t {
		return m.BoolTrue, nil
	}
	// predicate rule: LIST.List
	if list, t := c.(*m.List); t && list.Sort == m.SortList {
		return m.BoolTrue, nil
	}
	// predicate rule: FLOAT.Float
	if _, t := c.(*m.Float); t {
		return m.BoolTrue, nil
	}
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: BYTES.Bytes
	if _, t := c.(*m.Bytes); t {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortAccountCellMap {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortFunctionCellMap {
		return m.BoolTrue, nil
	}
	// predicate rule: SET.Set
	if set, t := c.(*m.Set); t && set.Sort == m.SortSet {
		return m.BoolTrue, nil
	}
	// predicate rule: BUFFER.StringBuffer
	if _, t := c.(*m.StringBuffer); t {
		return m.BoolTrue, nil
	}
	// predicate rule: MAP.Map
	if mp, t := c.(*m.Map); t && mp.Sort == m.SortMap {
		return m.BoolTrue, nil
	}
	// predicate rule: ARRAY.Array
	if arr, t := c.(*m.Array); t && arr.Sort == m.SortArray {
		return m.BoolTrue, nil
	}
	// predicate rule: K.KItem
	return m.BoolTrue, nil
	// unreachable predicate rule: INT.Int
	/* if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	} */
	// unreachable predicate rule: MAP.Map
	/* if mp, t := c.(*m.Map); t && mp.Sort == m.SortMessageCellMap {
		return m.BoolTrue, nil
	} */
	// unreachable predicate rule: K.K
	/* return m.BoolTrue, nil */
}

func evalIsScheduleFlag(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2110
	// source: ? @?
	// {| rule isScheduleFlag(`Gnewarith_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGnewarithXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewarith_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2110, "{| rule isScheduleFlag(`Gnewarith_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2111
	// source: ? @?
	// {| rule isScheduleFlag(#KToken(#token("ScheduleFlag","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleFlag { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2111, "{| rule isScheduleFlag(#KToken(#token(\"ScheduleFlag\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2112
	// source: ? @?
	// {| rule isScheduleFlag(`Gnewmove_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGnewmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewmove_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2112, "{| rule isScheduleFlag(`Gnewmove_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2113
	// source: ? @?
	// {| rule isScheduleFlag(`Gselfdestructnewaccount_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGselfdestructnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestructnewaccount_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2113, "{| rule isScheduleFlag(`Gselfdestructnewaccount_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2114
	// source: ? @?
	// {| rule isScheduleFlag(`Gstaticcalldepth_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGstaticcalldepthXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstaticcalldepth_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2114, "{| rule isScheduleFlag(`Gstaticcalldepth_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2115
	// source: ? @?
	// {| rule isScheduleFlag(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2115, "{| rule isScheduleFlag(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalString2Int(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.string2int
	lbl := m.LblString2Int // String2Int
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.string2int(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.string2int, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalString2Int", args: []m.K{c}}
}

func evalInitStorageCell(config m.K, guard int) (m.K, error) {
	// rule #2116
	// source: ? @?
	// {| rule initStorageCell(.KList)=>`<storage>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(27ecb44669b3ce9462d8f07f7780067578b0803bcb1c186e48ba8d773163eccd) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2116, "{| rule initStorageCell(.KList)=>`<storage>`(`.Map`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(27ecb44669b3ce9462d8f07f7780067578b0803bcb1c186e48ba8d773163eccd) initializer()] |}")
	eval2395, err2395 := evalXdotMap(config, -1) // `.Map`(.KList)
	if err2395 != nil {
		return m.NoResult, err2395
	}
	return &m.KApply{Label: m.LblXltstorageXgt, List: []m.K{ // as-is <storage>
		eval2395,
	}}, nil

}

//var constInitStorageCell K = evalInitStorageCell(m.InternedBottom)

func evalBytesInWords(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2117
	// source: data.k @174
	// {| rule bytesInWords(I)=>ceilDiv(I,#token("8","Int")) requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(2263c4a900f1fc3910cc5b8e07d41e3964ff538d848c2cb18181d6b3dc8066c0) contentStartColumn(10) contentStartLine(174) org.kframework.attributes.Location(Location(174,10,174,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 2117, "{| rule bytesInWords(I)=>ceilDiv(I,#token(\"8\",\"Int\")) requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2263c4a900f1fc3910cc5b8e07d41e3964ff538d848c2cb18181d6b3dc8066c0) contentStartColumn(10) contentStartLine(174) org.kframework.attributes.Location(Location(174,10,174,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval2396, err2396 := evalCeilDiv( // ceilDiv(I,#token("8","Int"))
			varI,
			/* rhs KToken */ m.NewIntFromString("8"),
			config, -1)
		if err2396 != nil {
			return m.NoResult, err2396
		}
		return eval2396, nil
	}

	return m.NoResult, &stuckError{funcName: "evalBytesInWords", args: []m.K{c}}
}

func evalCexp(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #2118
	// source: iele-gas.k @871
	// {| rule `Cexp`(SCHED,L1,W1,W2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),#adjustedBitLength(L1,W1))),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isInt(W1)),isInt(L1)),`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(d0a8302e69a1a8cc3d93a478c754584e5e24049353a83f6c3107dd23de4de9c8) contentStartColumn(10) contentStartLine(871) org.kframework.attributes.Location(Location(871,10,875,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW1, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW2, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval2397, err2397 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err2397 != nil {
						return m.NoResult, err2397
					}
					eval2398, err2398 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGnewarithXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewarith_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err2398 != nil {
						return m.NoResult, err2398
					}
					if (/* rhs precomputed isInt(W2) */ /* && */
					   m.IsTrue(eval2397) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(L1) */ ) &&
					   (m.IsTrue(eval2398)) {
						// RHS
						traceRuleApply("FUNC", 2118, "{| rule `Cexp`(SCHED,L1,W1,W2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token(\"64\",\"Int\")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),#adjustedBitLength(L1,W1))),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isInt(W1)),isInt(L1)),`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0a8302e69a1a8cc3d93a478c754584e5e24049353a83f6c3107dd23de4de9c8) contentStartColumn(10) contentStartLine(871) org.kframework.attributes.Location(Location(871,10,875,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval2402, err2402 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpkara_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2402 != nil {
							return m.NoResult, err2402
						}
						eval2406, err2406 := evalXhashadjustedBitLength( // #adjustedBitLength(L1,W1)
							varL1,
							varW1,
							config, -1)
						if err2406 != nil {
							return m.NoResult, err2406
						}
						eval2405, err2405 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#adjustedBitLength(L1,W1),W2)
							eval2406,
							varW2,
							config, -1)
						if err2405 != nil {
							return m.NoResult, err2405
						}
						eval2404, err2404 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int"))
							eval2405,
							/* rhs KToken */ m.NewIntFromString("64"),
							config, -1)
						if err2404 != nil {
							return m.NoResult, err2404
						}
						eval2403, err2403 := evalXhashoverApproxKara( // #overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))
							eval2404,
							config, -1)
						if err2403 != nil {
							return m.NoResult, err2403
						}
						eval2401, err2401 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int"))))
							eval2402,
							eval2403,
							config, -1)
						if err2401 != nil {
							return m.NoResult, err2401
						}
						eval2408, err2408 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpwordXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpword_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2408 != nil {
							return m.NoResult, err2408
						}
						eval2409, err2409 := evalXhashadjustedBitLength( // #adjustedBitLength(L1,W1)
							varL1,
							varW1,
							config, -1)
						if err2409 != nil {
							return m.NoResult, err2409
						}
						eval2407, err2407 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),#adjustedBitLength(L1,W1))
							eval2408,
							eval2409,
							config, -1)
						if err2407 != nil {
							return m.NoResult, err2407
						}
						eval2400, err2400 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),#adjustedBitLength(L1,W1)))
							eval2401,
							eval2407,
							config, -1)
						if err2400 != nil {
							return m.NoResult, err2400
						}
						eval2410, err2410 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpXuIELEXhyphenGAS, List: []m.K{ // as-is Gexp_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2410 != nil {
							return m.NoResult, err2410
						}
						eval2399, err2399 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),#adjustedBitLength(L1,W1))),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED))
							eval2400,
							eval2410,
							config, -1)
						if err2399 != nil {
							return m.NoResult, err2399
						}
						return eval2399, nil
					}
				}
			}
		}
	}

	// rule #2119
	// source: iele-gas.k @865
	// {| rule `Cexp`(SCHED,L1,W1,W2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isInt(W1)),isInt(L1)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(d35bd9013892604ec228b167f645a3e8c1a346534a82d8014de036aacb0e784e) contentStartColumn(10) contentStartLine(865) org.kframework.attributes.Location(Location(865,10,869,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW1, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varW2, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval2411, err2411 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err2411 != nil {
						return m.NoResult, err2411
					}
					eval2412, err2412 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGnewarithXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewarith_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err2412 != nil {
						return m.NoResult, err2412
					}
					if (/* rhs precomputed isInt(W2) */ /* && */
					   m.IsTrue(eval2411) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(L1) */ ) &&
					   (!(m.IsTrue(eval2412))) {
						// RHS
						traceRuleApply("FUNC", 2119, "{| rule `Cexp`(SCHED,L1,W1,W2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token(\"64\",\"Int\")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isInt(W1)),isInt(L1)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d35bd9013892604ec228b167f645a3e8c1a346534a82d8014de036aacb0e784e) contentStartColumn(10) contentStartLine(865) org.kframework.attributes.Location(Location(865,10,869,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval2416, err2416 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpkara_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2416 != nil {
							return m.NoResult, err2416
						}
						eval2420, err2420 := evalXhashadjustedBitLength( // #adjustedBitLength(L1,W1)
							varL1,
							varW1,
							config, -1)
						if err2420 != nil {
							return m.NoResult, err2420
						}
						eval2419, err2419 := evalXuXstarIntXuXuINT( // `_*Int__INT`(#adjustedBitLength(L1,W1),W2)
							eval2420,
							varW2,
							config, -1)
						if err2419 != nil {
							return m.NoResult, err2419
						}
						eval2418, err2418 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int"))
							eval2419,
							/* rhs KToken */ m.NewIntFromString("64"),
							config, -1)
						if err2418 != nil {
							return m.NoResult, err2418
						}
						eval2417, err2417 := evalXhashoverApproxKara( // #overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))
							eval2418,
							config, -1)
						if err2417 != nil {
							return m.NoResult, err2417
						}
						eval2415, err2415 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int"))))
							eval2416,
							eval2417,
							config, -1)
						if err2415 != nil {
							return m.NoResult, err2415
						}
						eval2422, err2422 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpwordXuIELEXhyphenGAS, List: []m.K{ // as-is Gexpword_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2422 != nil {
							return m.NoResult, err2422
						}
						eval2421, err2421 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),L1)
							eval2422,
							varL1,
							config, -1)
						if err2421 != nil {
							return m.NoResult, err2421
						}
						eval2414, err2414 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),L1))
							eval2415,
							eval2421,
							config, -1)
						if err2414 != nil {
							return m.NoResult, err2414
						}
						eval2423, err2423 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGexpXuIELEXhyphenGAS, List: []m.K{ // as-is Gexp_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err2423 != nil {
							return m.NoResult, err2423
						}
						eval2413, err2413 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpkara_IELE-GAS`(.KList),SCHED),#overApproxKara(`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(L1,W1),W2),#token("64","Int")))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gexpword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gexp_IELE-GAS`(.KList),SCHED))
							eval2414,
							eval2423,
							config, -1)
						if err2413 != nil {
							return m.NoResult, err2413
						}
						return eval2413, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCexp", args: []m.K{c1, c2, c3, c4}}
}

func evalIsCurrentFunctionCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2120
	// source: ? @?
	// {| rule isCurrentFunctionCell(`<currentFunction>`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcurrentFunctionXgt && len(kapp0.List) == 3 { // `<currentFunction>`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2424, err2424 := evalIsFunctionNameCell( // isFunctionNameCell(K0)
			varK0,
			config, -1)
		if err2424 != nil {
			return m.NoResult, err2424
		}
		eval2425, err2425 := evalIsLabelsCell( // isLabelsCell(K1)
			varK1,
			config, -1)
		if err2425 != nil {
			return m.NoResult, err2425
		}
		eval2426, err2426 := evalIsCurrentInstructionsCell( // isCurrentInstructionsCell(K2)
			varK2,
			config, -1)
		if err2426 != nil {
			return m.NoResult, err2426
		}
		if ((m.IsTrue(eval2424)) &&
		   (m.IsTrue(eval2425))) &&
		   (m.IsTrue(eval2426)) {
			// RHS
			traceRuleApply("FUNC", 2120, "{| rule isCurrentFunctionCell(`<currentFunction>`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isFunctionNameCell(K0),isLabelsCell(K1)),isCurrentInstructionsCell(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2121
	// source: ? @?
	// {| rule isCurrentFunctionCell(#KToken(#token("CurrentFunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCurrentFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2121, "{| rule isCurrentFunctionCell(#KToken(#token(\"CurrentFunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2122
	// source: ? @?
	// {| rule isCurrentFunctionCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2122, "{| rule isCurrentFunctionCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLocalCallsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2123
	// source: ? @?
	// {| rule isLocalCallsCellOpt(noLocalCallsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoLocalCallsCell && len(kapp0.List) == 0 { // noLocalCallsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2123, "{| rule isLocalCallsCellOpt(noLocalCallsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2124
	// source: ? @?
	// {| rule isLocalCallsCellOpt(`<localCalls>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalCallsXgt && len(kapp0.List) == 1 { // `<localCalls>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2124, "{| rule isLocalCallsCellOpt(`<localCalls>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2125
	// source: ? @?
	// {| rule isLocalCallsCellOpt(#KToken(#token("LocalCallsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2125, "{| rule isLocalCallsCellOpt(#KToken(#token(\"LocalCallsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2126
	// source: ? @?
	// {| rule isLocalCallsCellOpt(#KToken(#token("LocalCallsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2126, "{| rule isLocalCallsCellOpt(#KToken(#token(\"LocalCallsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2127
	// source: ? @?
	// {| rule isLocalCallsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2127, "{| rule isLocalCallsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsizeLValuesAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2128
	// source: data.k @107
	// {| rule #sizeLValuesAux(lvalueList(REG,REGS),N)=>#sizeLValuesAux(REGS,`_+Int_`(N,#token("1","Int"))) requires `_andBool_`(`_andBool_`(isLValues(REGS),isInt(N)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(8720bb666b25734e583948650524d825e60e5d913fa6a6078ab49e32cfb10bf7) contentStartColumn(10) contentStartLine(107) org.kframework.attributes.Location(Location(107,10,107,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLvalueList && len(kapp0.List) == 2 { // lvalueList(REG,REGS)
		varREG := kapp0.List[0] // lhs KVariable REG
		varREGS := kapp0.List[1] // lhs KVariable REGS
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval2427, err2427 := evalIsLValues( // isLValues(REGS)
				varREGS,
				config, -1)
			if err2427 != nil {
				return m.NoResult, err2427
			}
			eval2428, err2428 := evalIsLValue( // isLValue(REG)
				varREG,
				config, -1)
			if err2428 != nil {
				return m.NoResult, err2428
			}
			if (m.IsTrue(eval2427) /* && */ /* rhs precomputed isInt(N) */ ) &&
			   (m.IsTrue(eval2428)) {
				// RHS
				traceRuleApply("FUNC", 2128, "{| rule #sizeLValuesAux(lvalueList(REG,REGS),N)=>#sizeLValuesAux(REGS,`_+Int_`(N,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(isLValues(REGS),isInt(N)),isLValue(REG)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8720bb666b25734e583948650524d825e60e5d913fa6a6078ab49e32cfb10bf7) contentStartColumn(10) contentStartLine(107) org.kframework.attributes.Location(Location(107,10,107,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2430, err2430 := evalXuXplusIntXu( // `_+Int_`(N,#token("1","Int"))
					varN,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err2430 != nil {
					return m.NoResult, err2430
				}
				eval2429, err2429 := evalXhashsizeLValuesAux( // #sizeLValuesAux(REGS,`_+Int_`(N,#token("1","Int")))
					varREGS,
					eval2430,
					config, -1)
				if err2429 != nil {
					return m.NoResult, err2429
				}
				return eval2429, nil
			}
		}
	}

	// rule #2129
	// source: data.k @108
	// {| rule #sizeLValuesAux(`.List{"lvalueList"}`(.KList),N)=>N requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(e93ab88d23b1729336b3e271ab7e4038a3e46563a0070662bb511bb65976f2f3) contentStartColumn(10) contentStartLine(108) org.kframework.attributes.Location(Location(108,10,108,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelvalueListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"lvalueList"}`(.KList)
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(N)
			// RHS
			traceRuleApply("FUNC", 2129, "{| rule #sizeLValuesAux(`.List{\"lvalueList\"}`(.KList),N)=>N requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e93ab88d23b1729336b3e271ab7e4038a3e46563a0070662bb511bb65976f2f3) contentStartColumn(10) contentStartLine(108) org.kframework.attributes.Location(Location(108,10,108,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varN, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeLValuesAux", args: []m.K{c1, c2}}
}

func evalXhashrlpEncodeLength(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2130
	// source: data.k @525
	// {| rule #rlpEncodeLength(STR,OFFSET)=>#rlpEncodeLengthAux(STR,OFFSET,`Bytes2String`(`Int2BytesNoLen`(lengthString(STR),bigEndianBytes(.KList),unsignedBytes(.KList)))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(OFFSET)),`_>=Int__INT`(lengthString(STR),#token("56","Int"))) ensures #token("true","Bool") [UNIQUE_ID(fde62720240b05c47bec7b5a4b3f3a2b7e8d4d9e11ad8de162aba42b337db4b3) contentStartColumn(10) contentStartLine(525) org.kframework.attributes.Location(Location(525,10,525,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varOFFSET, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval2432, err2432 := evalLengthString( // lengthString(STR)
				varSTR,
				config, -1)
			if err2432 != nil {
				return m.NoResult, err2432
			}
			eval2431, err2431 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(lengthString(STR),#token("56","Int"))
				eval2432,
				/* rhs KToken */ m.NewIntFromString("56"),
				config, -1)
			if err2431 != nil {
				return m.NoResult, err2431
			}
			if /* rhs precomputed isString(STR) && isInt(OFFSET) */ /* && */
			   m.IsTrue(eval2431) {
				// RHS
				traceRuleApply("FUNC", 2130, "{| rule #rlpEncodeLength(STR,OFFSET)=>#rlpEncodeLengthAux(STR,OFFSET,`Bytes2String`(`Int2BytesNoLen`(lengthString(STR),bigEndianBytes(.KList),unsignedBytes(.KList)))) requires `_andBool_`(`_andBool_`(isString(STR),isInt(OFFSET)),`_>=Int__INT`(lengthString(STR),#token(\"56\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fde62720240b05c47bec7b5a4b3f3a2b7e8d4d9e11ad8de162aba42b337db4b3) contentStartColumn(10) contentStartLine(525) org.kframework.attributes.Location(Location(525,10,525,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval2436, err2436 := evalLengthString( // lengthString(STR)
					varSTR,
					config, -1)
				if err2436 != nil {
					return m.NoResult, err2436
				}
				eval2435, err2435 := evalInt2BytesNoLen( // `Int2BytesNoLen`(lengthString(STR),bigEndianBytes(.KList),unsignedBytes(.KList))
					eval2436,
					&m.KApply{Label: m.LblBigEndianBytes, List: []m.K{ // as-is bigEndianBytes
					}},
					&m.KApply{Label: m.LblUnsignedBytes, List: []m.K{ // as-is unsignedBytes
					}},
					config, -1)
				if err2435 != nil {
					return m.NoResult, err2435
				}
				eval2434, err2434 := evalBytes2String( // `Bytes2String`(`Int2BytesNoLen`(lengthString(STR),bigEndianBytes(.KList),unsignedBytes(.KList)))
					eval2435,
					config, -1)
				if err2434 != nil {
					return m.NoResult, err2434
				}
				eval2433, err2433 := evalXhashrlpEncodeLengthAux( // #rlpEncodeLengthAux(STR,OFFSET,`Bytes2String`(`Int2BytesNoLen`(lengthString(STR),bigEndianBytes(.KList),unsignedBytes(.KList))))
					varSTR,
					varOFFSET,
					eval2434,
					config, -1)
				if err2433 != nil {
					return m.NoResult, err2433
				}
				return eval2433, nil
			}
		}
	}

	// rule #2131
	// source: data.k @524
	// {| rule #rlpEncodeLength(STR,OFFSET)=>`_+String__STRING`(chrChar(`_+Int_`(lengthString(STR),OFFSET)),STR) requires `_andBool_`(`_andBool_`(isString(STR),isInt(OFFSET)),`_<Int__INT`(lengthString(STR),#token("56","Int"))) ensures #token("true","Bool") [UNIQUE_ID(497c45b7e1a69ba4e420cbb7ff78d2dd00764ca10a8f8bb719f3ecd07c92e288) contentStartColumn(10) contentStartLine(524) org.kframework.attributes.Location(Location(524,10,524,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varOFFSET, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval2438, err2438 := evalLengthString( // lengthString(STR)
				varSTR,
				config, -1)
			if err2438 != nil {
				return m.NoResult, err2438
			}
			eval2437, err2437 := evalXuXltIntXuXuINT( // `_<Int__INT`(lengthString(STR),#token("56","Int"))
				eval2438,
				/* rhs KToken */ m.NewIntFromString("56"),
				config, -1)
			if err2437 != nil {
				return m.NoResult, err2437
			}
			if /* rhs precomputed isString(STR) && isInt(OFFSET) */ /* && */
			   m.IsTrue(eval2437) {
				// RHS
				traceRuleApply("FUNC", 2131, "{| rule #rlpEncodeLength(STR,OFFSET)=>`_+String__STRING`(chrChar(`_+Int_`(lengthString(STR),OFFSET)),STR) requires `_andBool_`(`_andBool_`(isString(STR),isInt(OFFSET)),`_<Int__INT`(lengthString(STR),#token(\"56\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(497c45b7e1a69ba4e420cbb7ff78d2dd00764ca10a8f8bb719f3ecd07c92e288) contentStartColumn(10) contentStartLine(524) org.kframework.attributes.Location(Location(524,10,524,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval2442, err2442 := evalLengthString( // lengthString(STR)
					varSTR,
					config, -1)
				if err2442 != nil {
					return m.NoResult, err2442
				}
				eval2441, err2441 := evalXuXplusIntXu( // `_+Int_`(lengthString(STR),OFFSET)
					eval2442,
					varOFFSET,
					config, -1)
				if err2441 != nil {
					return m.NoResult, err2441
				}
				eval2440, err2440 := evalChrChar( // chrChar(`_+Int_`(lengthString(STR),OFFSET))
					eval2441,
					config, -1)
				if err2440 != nil {
					return m.NoResult, err2440
				}
				eval2439, err2439 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(chrChar(`_+Int_`(lengthString(STR),OFFSET)),STR)
					eval2440,
					varSTR,
					config, -1)
				if err2439 != nil {
					return m.NoResult, err2439
				}
				return eval2439, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeLength", args: []m.K{c1, c2}}
}

func evalXhashnewAddr(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2132
	// source: data.k @391
	// {| rule #newAddr(ACCT,NONCE)=>#addr(#parseHexWord(`Keccak256`(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE)),#token("192","Int"))))) requires `_andBool_`(isInt(ACCT),isInt(NONCE)) ensures #token("true","Bool") [UNIQUE_ID(04310c1de4a3a289d3bfa491f32cd3d32a6265f854eaa88980e1cd2b5a8ee0dd) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,146)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varACCT, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varNONCE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(ACCT) && isInt(NONCE)
			// RHS
			traceRuleApply("FUNC", 2132, "{| rule #newAddr(ACCT,NONCE)=>#addr(#parseHexWord(`Keccak256`(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token(\"20\",\"Int\")),#rlpEncodeWord(NONCE)),#token(\"192\",\"Int\"))))) requires `_andBool_`(isInt(ACCT),isInt(NONCE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04310c1de4a3a289d3bfa491f32cd3d32a6265f854eaa88980e1cd2b5a8ee0dd) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,146)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2448, err2448 := evalXhashrlpEncodeBytes( // #rlpEncodeBytes(ACCT,#token("20","Int"))
				varACCT,
				/* rhs KToken */ m.NewIntFromString("20"),
				config, -1)
			if err2448 != nil {
				return m.NoResult, err2448
			}
			eval2449, err2449 := evalXhashrlpEncodeWord( // #rlpEncodeWord(NONCE)
				varNONCE,
				config, -1)
			if err2449 != nil {
				return m.NoResult, err2449
			}
			eval2447, err2447 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE))
				eval2448,
				eval2449,
				config, -1)
			if err2447 != nil {
				return m.NoResult, err2447
			}
			eval2446, err2446 := evalXhashrlpEncodeLength( // #rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE)),#token("192","Int"))
				eval2447,
				/* rhs KToken */ m.NewIntFromString("192"),
				config, -1)
			if err2446 != nil {
				return m.NoResult, err2446
			}
			eval2445, err2445 := evalKeccak256( // `Keccak256`(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE)),#token("192","Int")))
				eval2446,
				config, -1)
			if err2445 != nil {
				return m.NoResult, err2445
			}
			eval2444, err2444 := evalXhashparseHexWord( // #parseHexWord(`Keccak256`(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE)),#token("192","Int"))))
				eval2445,
				config, -1)
			if err2444 != nil {
				return m.NoResult, err2444
			}
			eval2443, err2443 := evalXhashaddr( // #addr(#parseHexWord(`Keccak256`(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeBytes(ACCT,#token("20","Int")),#rlpEncodeWord(NONCE)),#token("192","Int")))))
				eval2444,
				config, -1)
			if err2443 != nil {
				return m.NoResult, err2443
			}
			return eval2443, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashnewAddr", args: []m.K{c1, c2}}
}

func evalIsScheduleConst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2133
	// source: ? @?
	// {| rule isScheduleConst(`Gadd_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gadd_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2133, "{| rule isScheduleConst(`Gadd_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2134
	// source: ? @?
	// {| rule isScheduleConst(`Gbitwise_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbitwiseXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwise_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2134, "{| rule isScheduleConst(`Gbitwise_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2135
	// source: ? @?
	// {| rule isScheduleConst(`Gexp_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexp_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2135, "{| rule isScheduleConst(`Gexp_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2136
	// source: ? @?
	// {| rule isScheduleConst(`Gdiv_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGdivXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdiv_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2136, "{| rule isScheduleConst(`Gdiv_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2137
	// source: ? @?
	// {| rule isScheduleConst(`Gstore_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstore_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2137, "{| rule isScheduleConst(`Gstore_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2138
	// source: ? @?
	// {| rule isScheduleConst(`Gsstoresetkey_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsstoresetkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoresetkey_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2138, "{| rule isScheduleConst(`Gsstoresetkey_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2139
	// source: ? @?
	// {| rule isScheduleConst(`Smemallowance_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSmemallowanceXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Smemallowance_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2139, "{| rule isScheduleConst(`Smemallowance_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2140
	// source: ? @?
	// {| rule isScheduleConst(`Gbr_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbrXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbr_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2140, "{| rule isScheduleConst(`Gbr_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2141
	// source: ? @?
	// {| rule isScheduleConst(`Glogarithm_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlogarithmXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithm_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2141, "{| rule isScheduleConst(`Glogarithm_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2142
	// source: ? @?
	// {| rule isScheduleConst(`Grip160_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGrip160XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2142, "{| rule isScheduleConst(`Grip160_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2143
	// source: ? @?
	// {| rule isScheduleConst(`Gmemory_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmemory_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2143, "{| rule isScheduleConst(`Gmemory_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2144
	// source: ? @?
	// {| rule isScheduleConst(`Gstoreword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstoreword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2144, "{| rule isScheduleConst(`Gstoreword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2145
	// source: ? @?
	// {| rule isScheduleConst(#KToken(#token("ScheduleConst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleConst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2145, "{| rule isScheduleConst(#KToken(#token(\"ScheduleConst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2146
	// source: ? @?
	// {| rule isScheduleConst(`Grip160word_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGrip160wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Grip160word_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2146, "{| rule isScheduleConst(`Grip160word_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2147
	// source: ? @?
	// {| rule isScheduleConst(`Gblockhash_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGblockhashXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gblockhash_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2147, "{| rule isScheduleConst(`Gblockhash_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2148
	// source: ? @?
	// {| rule isScheduleConst(`Gecrec_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGecrecXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecrec_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2148, "{| rule isScheduleConst(`Gecrec_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2149
	// source: ? @?
	// {| rule isScheduleConst(`Gsstoreset_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsstoresetXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreset_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2149, "{| rule isScheduleConst(`Gsstoreset_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2150
	// source: ? @?
	// {| rule isScheduleConst(`Gsstoreword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsstorewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstoreword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2150, "{| rule isScheduleConst(`Gsstoreword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2151
	// source: ? @?
	// {| rule isScheduleConst(`Gexpmod_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmod_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2151, "{| rule isScheduleConst(`Gexpmod_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2152
	// source: ? @?
	// {| rule isScheduleConst(`Gtwos_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtwosXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwos_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2152, "{| rule isScheduleConst(`Gtwos_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2153
	// source: ? @?
	// {| rule isScheduleConst(`Gtransaction_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtransactionXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtransaction_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2153, "{| rule isScheduleConst(`Gtransaction_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2154
	// source: ? @?
	// {| rule isScheduleConst(`Gtwosword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtwoswordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtwosword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2154, "{| rule isScheduleConst(`Gtwosword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2155
	// source: ? @?
	// {| rule isScheduleConst(`Gquadcoeff_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGquadcoeffXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gquadcoeff_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2155, "{| rule isScheduleConst(`Gquadcoeff_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2156
	// source: ? @?
	// {| rule isScheduleConst(`Gsha3word_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsha3wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3word_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2156, "{| rule isScheduleConst(`Gsha3word_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2157
	// source: ? @?
	// {| rule isScheduleConst(`Gecpairingpair_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGecpairingpairXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairingpair_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2157, "{| rule isScheduleConst(`Gecpairingpair_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2158
	// source: ? @?
	// {| rule isScheduleConst(`Gcopycreate_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcopycreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcopycreate_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2158, "{| rule isScheduleConst(`Gcopycreate_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2159
	// source: ? @?
	// {| rule isScheduleConst(`Gecmul_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGecmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecmul_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2159, "{| rule isScheduleConst(`Gecmul_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2160
	// source: ? @?
	// {| rule isScheduleConst(`Gbalance_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbalanceXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbalance_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2160, "{| rule isScheduleConst(`Gbalance_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2161
	// source: ? @?
	// {| rule isScheduleConst(`Gecadd_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGecaddXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecadd_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2161, "{| rule isScheduleConst(`Gecadd_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2162
	// source: ? @?
	// {| rule isScheduleConst(`Gcallmemory_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcallmemoryXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallmemory_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2162, "{| rule isScheduleConst(`Gcallmemory_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2163
	// source: ? @?
	// {| rule isScheduleConst(`Gsloadword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2163, "{| rule isScheduleConst(`Gsloadword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2164
	// source: ? @?
	// {| rule isScheduleConst(`Glogdata_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlogdataXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogdata_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2164, "{| rule isScheduleConst(`Glogdata_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2165
	// source: ? @?
	// {| rule isScheduleConst(`Gbswap_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbswapXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswap_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2165, "{| rule isScheduleConst(`Gbswap_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2166
	// source: ? @?
	// {| rule isScheduleConst(`Gsstore_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsstoreXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstore_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2166, "{| rule isScheduleConst(`Gsstore_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2167
	// source: ? @?
	// {| rule isScheduleConst(`Gloadword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGloadwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2167, "{| rule isScheduleConst(`Gloadword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2168
	// source: ? @?
	// {| rule isScheduleConst(`Gdivword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGdivwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2168, "{| rule isScheduleConst(`Gdivword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2169
	// source: ? @?
	// {| rule isScheduleConst(`Gmove_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGmoveXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmove_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2169, "{| rule isScheduleConst(`Gmove_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2170
	// source: ? @?
	// {| rule isScheduleConst(`Gbyte_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbyteXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbyte_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2170, "{| rule isScheduleConst(`Gbyte_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2171
	// source: ? @?
	// {| rule isScheduleConst(`Gcallreg_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcallregXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallreg_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2171, "{| rule isScheduleConst(`Gcallreg_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2172
	// source: ? @?
	// {| rule isScheduleConst(`Gexpmodmod_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpmodmodXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodmod_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2172, "{| rule isScheduleConst(`Gexpmodmod_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2173
	// source: ? @?
	// {| rule isScheduleConst(`Gtxdatanonzero_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtxdatanonzeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxdatanonzero_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2173, "{| rule isScheduleConst(`Gtxdatanonzero_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2174
	// source: ? @?
	// {| rule isScheduleConst(`Gtxdatazero_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtxdatazeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxdatazero_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2174, "{| rule isScheduleConst(`Gtxdatazero_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2175
	// source: ? @?
	// {| rule isScheduleConst(`Gnewaccount_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGnewaccountXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnewaccount_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2175, "{| rule isScheduleConst(`Gnewaccount_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2176
	// source: ? @?
	// {| rule isScheduleConst(`Glogarithmword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlogarithmwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogarithmword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2176, "{| rule isScheduleConst(`Glogarithmword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2177
	// source: ? @?
	// {| rule isScheduleConst(`Gbrcond_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbrcondXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbrcond_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2177, "{| rule isScheduleConst(`Gbrcond_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2178
	// source: ? @?
	// {| rule isScheduleConst(`Gcallstipend_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcallstipendXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallstipend_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2178, "{| rule isScheduleConst(`Gcallstipend_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2179
	// source: ? @?
	// {| rule isScheduleConst(`Gmul_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGmulXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmul_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2179, "{| rule isScheduleConst(`Gmul_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2180
	// source: ? @?
	// {| rule isScheduleConst(`Gtxcreate_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGtxcreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gtxcreate_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2180, "{| rule isScheduleConst(`Gtxcreate_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2181
	// source: ? @?
	// {| rule isScheduleConst(`Giszero_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGiszeroXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Giszero_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2181, "{| rule isScheduleConst(`Giszero_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2182
	// source: ? @?
	// {| rule isScheduleConst(`Gexpmodkara_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpmodkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodkara_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2182, "{| rule isScheduleConst(`Gexpmodkara_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2183
	// source: ? @?
	// {| rule isScheduleConst(`Gdivkara_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGdivkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gdivkara_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2183, "{| rule isScheduleConst(`Gdivkara_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2184
	// source: ? @?
	// {| rule isScheduleConst(`Glog_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlogXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glog_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2184, "{| rule isScheduleConst(`Glog_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2185
	// source: ? @?
	// {| rule isScheduleConst(`Greadstate_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGreadstateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Greadstate_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2185, "{| rule isScheduleConst(`Greadstate_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2186
	// source: ? @?
	// {| rule isScheduleConst(`Rsstoreset_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRsstoresetXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rsstoreset_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2186, "{| rule isScheduleConst(`Rsstoreset_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2187
	// source: ? @?
	// {| rule isScheduleConst(`Gnot_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGnotXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnot_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2187, "{| rule isScheduleConst(`Gnot_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2188
	// source: ? @?
	// {| rule isScheduleConst(`Gselfdestruct_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gselfdestruct_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2188, "{| rule isScheduleConst(`Gselfdestruct_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2189
	// source: ? @?
	// {| rule isScheduleConst(`Gsloadkey_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsloadkeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsloadkey_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2189, "{| rule isScheduleConst(`Gsloadkey_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2190
	// source: ? @?
	// {| rule isScheduleConst(`Gcalladdress_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcalladdressXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcalladdress_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2190, "{| rule isScheduleConst(`Gcalladdress_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2191
	// source: ? @?
	// {| rule isScheduleConst(`Gexpmodexp_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpmodexpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpmodexp_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2191, "{| rule isScheduleConst(`Gexpmodexp_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2192
	// source: ? @?
	// {| rule isScheduleConst(`Gaddword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGaddwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gaddword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2192, "{| rule isScheduleConst(`Gaddword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2193
	// source: ? @?
	// {| rule isScheduleConst(`Gecpairing_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGecpairingXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gecpairing_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2193, "{| rule isScheduleConst(`Gecpairing_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2194
	// source: ? @?
	// {| rule isScheduleConst(`Gloadcell_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGloadcellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gloadcell_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2194, "{| rule isScheduleConst(`Gloadcell_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2195
	// source: ? @?
	// {| rule isScheduleConst(`Gcodedeposit_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcodedepositXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcodedeposit_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2195, "{| rule isScheduleConst(`Gcodedeposit_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2196
	// source: ? @?
	// {| rule isScheduleConst(`Gsha3_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsha3XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha3_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2196, "{| rule isScheduleConst(`Gsha3_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2197
	// source: ? @?
	// {| rule isScheduleConst(`Gexpkara_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpkara_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2197, "{| rule isScheduleConst(`Gexpkara_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2198
	// source: ? @?
	// {| rule isScheduleConst(`Gsha256_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsha256XuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2198, "{| rule isScheduleConst(`Gsha256_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2199
	// source: ? @?
	// {| rule isScheduleConst(`Glogtopic_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlogtopicXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glogtopic_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2199, "{| rule isScheduleConst(`Glogtopic_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2200
	// source: ? @?
	// {| rule isScheduleConst(`Gsstorekey_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsstorekeyXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsstorekey_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2200, "{| rule isScheduleConst(`Gsstorekey_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2201
	// source: ? @?
	// {| rule isScheduleConst(`Gexpword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGexpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gexpword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2201, "{| rule isScheduleConst(`Gexpword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2202
	// source: ? @?
	// {| rule isScheduleConst(`Gcall_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcall_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2202, "{| rule isScheduleConst(`Gcall_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2203
	// source: ? @?
	// {| rule isScheduleConst(`Sgasdivisor_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSgasdivisorXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Sgasdivisor_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2203, "{| rule isScheduleConst(`Sgasdivisor_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2204
	// source: ? @?
	// {| rule isScheduleConst(`Gsload_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsload_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2204, "{| rule isScheduleConst(`Gsload_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2205
	// source: ? @?
	// {| rule isScheduleConst(`Gcmpword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcmpwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmpword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2205, "{| rule isScheduleConst(`Gcmpword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2206
	// source: ? @?
	// {| rule isScheduleConst(`Gcmp_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcmpXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcmp_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2206, "{| rule isScheduleConst(`Gcmp_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2207
	// source: ? @?
	// {| rule isScheduleConst(`Gextcodesize_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGextcodesizeXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gextcodesize_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2207, "{| rule isScheduleConst(`Gextcodesize_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2208
	// source: ? @?
	// {| rule isScheduleConst(`Gsext_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsextXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsext_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2208, "{| rule isScheduleConst(`Gsext_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2209
	// source: ? @?
	// {| rule isScheduleConst(`Gsha256word_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsha256wordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsha256word_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2209, "{| rule isScheduleConst(`Gsha256word_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2210
	// source: ? @?
	// {| rule isScheduleConst(`Gnotword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGnotwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gnotword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2210, "{| rule isScheduleConst(`Gnotword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2211
	// source: ? @?
	// {| rule isScheduleConst(`Gload_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGloadXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gload_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2211, "{| rule isScheduleConst(`Gload_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2212
	// source: ? @?
	// {| rule isScheduleConst(`Gmulword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGmulwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2212, "{| rule isScheduleConst(`Gmulword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2213
	// source: ? @?
	// {| rule isScheduleConst(`Gsextword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGsextwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gsextword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2213, "{| rule isScheduleConst(`Gsextword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2214
	// source: ? @?
	// {| rule isScheduleConst(`Glocalcall_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlocalcallXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Glocalcall_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2214, "{| rule isScheduleConst(`Glocalcall_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2215
	// source: ? @?
	// {| rule isScheduleConst(`Rb_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRbXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rb_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2215, "{| rule isScheduleConst(`Rb_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2216
	// source: ? @?
	// {| rule isScheduleConst(`Gbitwiseword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbitwisewordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbitwiseword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2216, "{| rule isScheduleConst(`Gbitwiseword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2217
	// source: ? @?
	// {| rule isScheduleConst(`Gbswapword_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGbswapwordXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gbswapword_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2217, "{| rule isScheduleConst(`Gbswapword_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2218
	// source: ? @?
	// {| rule isScheduleConst(`Rselfdestruct_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRselfdestructXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Rselfdestruct_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2218, "{| rule isScheduleConst(`Rselfdestruct_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2219
	// source: ? @?
	// {| rule isScheduleConst(`Gcreate_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcreateXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcreate_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2219, "{| rule isScheduleConst(`Gcreate_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2220
	// source: ? @?
	// {| rule isScheduleConst(`Gmulkara_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGmulkaraXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gmulkara_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2220, "{| rule isScheduleConst(`Gmulkara_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2221
	// source: ? @?
	// {| rule isScheduleConst(`Gcallvalue_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGcallvalueXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gcallvalue_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2221, "{| rule isScheduleConst(`Gcallvalue_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2222
	// source: ? @?
	// {| rule isScheduleConst(`Gstorecell_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGstorecellXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `Gstorecell_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2222, "{| rule isScheduleConst(`Gstorecell_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2223
	// source: ? @?
	// {| rule isScheduleConst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2223, "{| rule isScheduleConst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashsystem(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.system
	lbl := m.LblXhashsystem // #system
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.system(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.system, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsystem", args: []m.K{c}}
}

func evalIsString(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: STRING.String
	if _, t := c.(*m.String); t {
		return m.BoolTrue, nil
	}
	// rule #2224
	// source: ? @?
	// {| rule isString(#KToken(#token("String","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortString { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2224, "{| rule isString(#KToken(#token(\"String\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2225
	// source: ? @?
	// {| rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2225, "{| rule isString(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsGasPriceCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2226
	// source: ? @?
	// {| rule isGasPriceCellOpt(#KToken(#token("GasPriceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasPriceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2226, "{| rule isGasPriceCellOpt(#KToken(#token(\"GasPriceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2227
	// source: ? @?
	// {| rule isGasPriceCellOpt(`<gasPrice>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltgasPriceXgt && len(kapp0.List) == 1 { // `<gasPrice>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2227, "{| rule isGasPriceCellOpt(`<gasPrice>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2228
	// source: ? @?
	// {| rule isGasPriceCellOpt(noGasPriceCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoGasPriceCell && len(kapp0.List) == 0 { // noGasPriceCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2228, "{| rule isGasPriceCellOpt(noGasPriceCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2229
	// source: ? @?
	// {| rule isGasPriceCellOpt(#KToken(#token("GasPriceCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGasPriceCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2229, "{| rule isGasPriceCellOpt(#KToken(#token(\"GasPriceCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2230
	// source: ? @?
	// {| rule isGasPriceCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2230, "{| rule isGasPriceCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsList(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: LIST.List
	if list, t := c.(*m.List); t && list.Sort == m.SortList {
		return m.BoolTrue, nil
	}
	// rule #2231
	// source: ? @?
	// {| rule isList(#KToken(#token("List","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortList { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2231, "{| rule isList(#KToken(#token(\"List\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2232
	// source: ? @?
	// {| rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2232, "{| rule isList(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXlsqbXuXdotXdotXuXrsqbXuIELEXhyphenDATA(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2233
	// source: data.k @291
	// {| rule `_[_.._]_IELE-DATA`(WS,START,WIDTH)=>#take(chop(WIDTH),#drop(chop(START),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(WIDTH)),isInt(START)) ensures #token("true","Bool") [UNIQUE_ID(8d5c5ce2e0c32037218c0998cc24f1ffa15d1f65d56bbf30db9c2a11d554e77e) contentStartColumn(10) contentStartLine(291) org.kframework.attributes.Location(Location(291,10,291,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c1 // lhs KVariable WS
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varWIDTH, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval2450, err2450 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err2450 != nil {
					return m.NoResult, err2450
				}
				if m.IsTrue(eval2450) /* && */ /* rhs precomputed isInt(WIDTH) */  /* && */ /* rhs precomputed isInt(START) */  {
					// RHS
					traceRuleApply("FUNC", 2233, "{| rule `_[_.._]_IELE-DATA`(WS,START,WIDTH)=>#take(chop(WIDTH),#drop(chop(START),WS)) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(WIDTH)),isInt(START)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d5c5ce2e0c32037218c0998cc24f1ffa15d1f65d56bbf30db9c2a11d554e77e) contentStartColumn(10) contentStartLine(291) org.kframework.attributes.Location(Location(291,10,291,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval2452, err2452 := evalChop( // chop(WIDTH)
						varWIDTH,
						config, -1)
					if err2452 != nil {
						return m.NoResult, err2452
					}
					eval2454, err2454 := evalChop( // chop(START)
						varSTART,
						config, -1)
					if err2454 != nil {
						return m.NoResult, err2454
					}
					eval2453, err2453 := evalXhashdrop( // #drop(chop(START),WS)
						eval2454,
						varWS,
						config, -1)
					if err2453 != nil {
						return m.NoResult, err2453
					}
					eval2451, err2451 := evalXhashtake( // #take(chop(WIDTH),#drop(chop(START),WS))
						eval2452,
						eval2453,
						config, -1)
					if err2451 != nil {
						return m.NoResult, err2451
					}
					return eval2451, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXdotXdotXuXrsqbXuIELEXhyphenDATA", args: []m.K{c1, c2, c3}}
}

func evalIsFunctionCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2234
	// source: ? @?
	// {| rule isFunctionCellFragment(`<function>-fragment`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCellOpt(K0),isNparamsCellOpt(K1)),isInstructionsCellOpt(K2)),isJumpTableCellOpt(K3)),isNregsCellOpt(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionXgtXhyphenfragment && len(kapp0.List) == 5 { // `<function>-fragment`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2455, err2455 := evalIsFuncIDCellOpt( // isFuncIdCellOpt(K0)
			varK0,
			config, -1)
		if err2455 != nil {
			return m.NoResult, err2455
		}
		eval2456, err2456 := evalIsNparamsCellOpt( // isNparamsCellOpt(K1)
			varK1,
			config, -1)
		if err2456 != nil {
			return m.NoResult, err2456
		}
		eval2457, err2457 := evalIsInstructionsCellOpt( // isInstructionsCellOpt(K2)
			varK2,
			config, -1)
		if err2457 != nil {
			return m.NoResult, err2457
		}
		eval2458, err2458 := evalIsJumpTableCellOpt( // isJumpTableCellOpt(K3)
			varK3,
			config, -1)
		if err2458 != nil {
			return m.NoResult, err2458
		}
		eval2459, err2459 := evalIsNregsCellOpt( // isNregsCellOpt(K4)
			varK4,
			config, -1)
		if err2459 != nil {
			return m.NoResult, err2459
		}
		if ((((m.IsTrue(eval2455)) &&
		   (m.IsTrue(eval2456))) &&
		   (m.IsTrue(eval2457))) &&
		   (m.IsTrue(eval2458))) &&
		   (m.IsTrue(eval2459)) {
			// RHS
			traceRuleApply("FUNC", 2234, "{| rule isFunctionCellFragment(`<function>-fragment`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCellOpt(K0),isNparamsCellOpt(K1)),isInstructionsCellOpt(K2)),isJumpTableCellOpt(K3)),isNregsCellOpt(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2235
	// source: ? @?
	// {| rule isFunctionCellFragment(#KToken(#token("FunctionCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2235, "{| rule isFunctionCellFragment(#KToken(#token(\"FunctionCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2236
	// source: ? @?
	// {| rule isFunctionCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2236, "{| rule isFunctionCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitRefundCell(config m.K, guard int) (m.K, error) {
	// rule #2237
	// source: ? @?
	// {| rule initRefundCell(.KList)=>`<refund>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(316d968a5571a2e9794f89f7e617f871e377f7885d2163ca1940cd8874909c41) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2237, "{| rule initRefundCell(.KList)=>`<refund>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(316d968a5571a2e9794f89f7e617f871e377f7885d2163ca1940cd8874909c41) initializer()] |}")
	return &m.KApply{Label: m.LblXltrefundXgt, List: []m.K{ // as-is <refund>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitRefundCell K = evalInitRefundCell(m.InternedBottom)

func evalXhashlambdaXuXu4(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, c7 m.K, c8 m.K, c9 m.K, c10 m.K, c11 m.K, config m.K, guard int) (m.K, error) {
	// rule #2238
	// source: iele-node.k @60
	// {| rule `#lambda__4`(CONTRACT,ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE)=>`#checkContract__IELE`(CONTRACT)~>`#create_______IELE`(ACCTFROM,#newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token("1","Int"))),`_*Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),VALUE,CONTRACT,`ListToInts`(ARGS))~>`#codeDeposit_______IELE`(#newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token("1","Int"))),#sizeWordStack(CODE),CONTRACT,`%__IELE-COMMON`(#token("0","Int")),`%__IELE-COMMON`(#token("1","Int")),#token("true","Bool"))~>`#trimAccounts_IELE-NODE`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isList(ARGS)),isSchedule(SCHED)),isContract(CONTRACT)),isInt(NONCE)),isWordStack(CODE)),isInt(ACCTFROM)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(b7a9b977555b2166ceed544df0904cf1afe6daaacb9788562cefd7d8bd6a5b75) org.kframework.attributes.Location(Location(60,27,64,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax K ::= "#fun" "(" K ")" "(" K ")")] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCONTRACT := c1 // lhs KVariable CONTRACT
		if varACCTFROM, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if c3.Equals(varACCTFROM) { // lhs KVariable, which reappears:ACCTFROM
				if varNONCE, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varGAVAIL, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						varSCHED := c6 // lhs KVariable SCHED
						if varVALUE, t := c7.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varARGS, t := c8.(*m.List); t && varARGS.Sort == m.SortList { // lhs KVariable with hook:LIST.List
								if c9.Equals(varACCTFROM) { // lhs KVariable, which reappears:ACCTFROM
									if c10.Equals(varNONCE) { // lhs KVariable, which reappears:NONCE
										varCODE := c11 // lhs KVariable CODE
										// REQUIRES
										eval2460, err2460 := evalIsSchedule( // isSchedule(SCHED)
											varSCHED,
											config, -1)
										if err2460 != nil {
											return m.NoResult, err2460
										}
										eval2461, err2461 := evalIsContract( // isContract(CONTRACT)
											varCONTRACT,
											config, -1)
										if err2461 != nil {
											return m.NoResult, err2461
										}
										eval2462, err2462 := evalIsWordStack( // isWordStack(CODE)
											varCODE,
											config, -1)
										if err2462 != nil {
											return m.NoResult, err2462
										}
										if ((/* rhs precomputed isInt(VALUE) && isList(ARGS) */ /* && */
										   m.IsTrue(eval2460)) &&
										   (m.IsTrue(eval2461)) /* && */ /* rhs precomputed isInt(NONCE) */ ) &&
										   (m.IsTrue(eval2462)) /* && */ /* rhs precomputed isInt(ACCTFROM) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  {
											// RHS
											traceRuleApply("FUNC", 2238, "{| rule `#lambda__4`(CONTRACT,ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE)=>`#checkContract__IELE`(CONTRACT)~>`#create_______IELE`(ACCTFROM,#newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token(\"1\",\"Int\"))),`_*Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),VALUE,CONTRACT,`ListToInts`(ARGS))~>`#codeDeposit_______IELE`(#newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token(\"1\",\"Int\"))),#sizeWordStack(CODE),CONTRACT,`%__IELE-COMMON`(#token(\"0\",\"Int\")),`%__IELE-COMMON`(#token(\"1\",\"Int\")),#token(\"true\",\"Bool\"))~>`#trimAccounts_IELE-NODE`(.KList) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isList(ARGS)),isSchedule(SCHED)),isContract(CONTRACT)),isInt(NONCE)),isWordStack(CODE)),isInt(ACCTFROM)),isInt(GAVAIL)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b7a9b977555b2166ceed544df0904cf1afe6daaacb9788562cefd7d8bd6a5b75) org.kframework.attributes.Location(Location(60,27,64,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax K ::= \"#fun\" \"(\" K \")\" \"(\" K \")\")] |}")
											eval2464, err2464 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(NONCE,#token("1","Int"))
												varNONCE,
												/* rhs KToken */ m.NewIntFromString("1"),
												config, -1)
											if err2464 != nil {
												return m.NoResult, err2464
											}
											eval2463, err2463 := evalXhashnewAddr( // #newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token("1","Int")))
												varACCTFROM,
												eval2464,
												config, -1)
											if err2463 != nil {
												return m.NoResult, err2463
											}
											eval2466, err2466 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)
												&m.KApply{Label: m.LblSgasdivisorXuIELEXhyphenGAS, List: []m.K{ // as-is Sgasdivisor_IELE-GAS
												}},
												varSCHED,
												config, -1)
											if err2466 != nil {
												return m.NoResult, err2466
											}
											eval2465, err2465 := evalXuXstarIntXuXuINT( // `_*Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED))
												varGAVAIL,
												eval2466,
												config, -1)
											if err2465 != nil {
												return m.NoResult, err2465
											}
											eval2467, err2467 := evalListToInts( // `ListToInts`(ARGS)
												varARGS,
												config, -1)
											if err2467 != nil {
												return m.NoResult, err2467
											}
											eval2469, err2469 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(NONCE,#token("1","Int"))
												varNONCE,
												/* rhs KToken */ m.NewIntFromString("1"),
												config, -1)
											if err2469 != nil {
												return m.NoResult, err2469
											}
											eval2468, err2468 := evalXhashnewAddr( // #newAddr(ACCTFROM,`_-Int__INT`(NONCE,#token("1","Int")))
												varACCTFROM,
												eval2469,
												config, -1)
											if err2468 != nil {
												return m.NoResult, err2468
											}
											eval2470, err2470 := evalXhashsizeWordStack( // #sizeWordStack(CODE)
												varCODE,
												config, -1)
											if err2470 != nil {
												return m.NoResult, err2470
											}
											return assembleKSequence(
												&m.KApply{Label: m.LblXhashcheckContractXuXuIELE, List: []m.K{ // as-is #checkContract__IELE
													varCONTRACT,
												}},
												&m.KApply{Label: m.LblXhashcreateXuXuXuXuXuXuXuIELE, List: []m.K{ // as-is #create_______IELE
													varACCTFROM,
													eval2463,
													eval2465,
													varVALUE,
													varCONTRACT,
													eval2467,
												}},
												&m.KApply{Label: m.LblXhashcodeDepositXuXuXuXuXuXuXuIELE, List: []m.K{ // as-is #codeDeposit_______IELE
													eval2468,
													eval2470,
													varCONTRACT,
													&m.KApply{Label: m.LblXpercentXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is %__IELE-COMMON
														/* rhs KToken */ m.NewIntFromString("0"),
													}},
													&m.KApply{Label: m.LblXpercentXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is %__IELE-COMMON
														/* rhs KToken */ m.NewIntFromString("1"),
													}},
													/* rhs KToken */ m.BoolTrue,
												}},
												&m.KApply{Label: m.LblXhashtrimAccountsXuIELEXhyphenNODE, List: []m.K{ // as-is #trimAccounts_IELE-NODE
												}},
											), nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlambdaXuXu4", args: []m.K{c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11}}
}

func evalInitNumberCell(config m.K, guard int) (m.K, error) {
	// rule #2239
	// source: ? @?
	// {| rule initNumberCell(.KList)=>`<number>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(28c73ab807ebdc0d274168883da8afe887f30d9583c80ae40b9a12c73806818c) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2239, "{| rule initNumberCell(.KList)=>`<number>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(28c73ab807ebdc0d274168883da8afe887f30d9583c80ae40b9a12c73806818c) initializer()] |}")
	return &m.KApply{Label: m.LblXltnumberXgt, List: []m.K{ // as-is <number>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitNumberCell K = evalInitNumberCell(m.InternedBottom)

func evalIsContractsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2240
	// source: ? @?
	// {| rule isContractsCellOpt(#KToken(#token("ContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2240, "{| rule isContractsCellOpt(#KToken(#token(\"ContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2241
	// source: ? @?
	// {| rule isContractsCellOpt(noContractsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoContractsCell && len(kapp0.List) == 0 { // noContractsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2241, "{| rule isContractsCellOpt(noContractsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2242
	// source: ? @?
	// {| rule isContractsCellOpt(`<contracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractsXgt && len(kapp0.List) == 1 { // `<contracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 2242, "{| rule isContractsCellOpt(`<contracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2243
	// source: ? @?
	// {| rule isContractsCellOpt(#KToken(#token("ContractsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2243, "{| rule isContractsCellOpt(#KToken(#token(\"ContractsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2244
	// source: ? @?
	// {| rule isContractsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2244, "{| rule isContractsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXgtStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.gt
	lbl := m.LblXuXgtStringXuXuSTRING // _>String__STRING
	sort := m.SortBool
	if hookRes, hookErr := stringHooks.gt(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.gt, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2245
	// source: domains.k @550
	// {| rule `_>String__STRING`(S1,S2)=>`_<String__STRING`(S2,S1) requires `_andBool_`(isString(S2),isString(S1)) ensures #token("true","Bool") [UNIQUE_ID(85f6517ce0e2b7074d495585267afa5b0502e09d5bf63c57fb6c6d77174aa16a) contentStartColumn(8) contentStartLine(550) org.kframework.attributes.Location(Location(550,8,550,52)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES precomputed isString(S2) && isString(S1)
			// RHS
			traceRuleApply("FUNC", 2245, "{| rule `_>String__STRING`(S1,S2)=>`_<String__STRING`(S2,S1) requires `_andBool_`(isString(S2),isString(S1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(85f6517ce0e2b7074d495585267afa5b0502e09d5bf63c57fb6c6d77174aa16a) contentStartColumn(8) contentStartLine(550) org.kframework.attributes.Location(Location(550,8,550,52)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2471, err2471 := evalXuXltStringXuXuSTRING( // `_<String__STRING`(S2,S1)
				varS2,
				varS1,
				config, -1)
			if err2471 != nil {
				return m.NoResult, err2471
			}
			return eval2471, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuXgtStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalIsModeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2246
	// source: ? @?
	// {| rule isModeCell(`<mode>`(K0))=>#token("true","Bool") requires isMode(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmodeXgt && len(kapp0.List) == 1 { // `<mode>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2472, err2472 := evalIsMode( // isMode(K0)
			varK0,
			config, -1)
		if err2472 != nil {
			return m.NoResult, err2472
		}
		if m.IsTrue(eval2472) {
			// RHS
			traceRuleApply("FUNC", 2246, "{| rule isModeCell(`<mode>`(K0))=>#token(\"true\",\"Bool\") requires isMode(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2247
	// source: ? @?
	// {| rule isModeCell(#KToken(#token("ModeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortModeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2247, "{| rule isModeCell(#KToken(#token(\"ModeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2248
	// source: ? @?
	// {| rule isModeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2248, "{| rule isModeCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashlambdaXuXu3(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, c7 m.K, c8 m.K, c9 m.K, c10 m.K, config m.K, guard int) (m.K, error) {
	// rule #2249
	// source: iele-node.k @60
	// {| rule `#lambda__3`(CODE,ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE)=>`#lambda__4`(`#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token("Main","IeleName")),`#illFormed_IELE`(.KList)),ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE) requires isWordStack(CODE) ensures #token("true","Bool") [UNIQUE_ID(146a7ceca8740abf00e930398836e2d3a871286dcfaa3d87ee2cc69dbf56af62) org.kframework.attributes.Location(Location(60,14,64,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax K ::= "#fun" "(" K ")" "(" K ")")] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCODE := c1 // lhs KVariable CODE
		if varACCTFROM, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if c3.Equals(varACCTFROM) { // lhs KVariable, which reappears:ACCTFROM
				if varNONCE, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varGAVAIL, t := c5.(*m.Int); t { // lhs KVariable with hook:INT.Int
						varSCHED := c6 // lhs KVariable SCHED
						if varVALUE, t := c7.(*m.Int); t { // lhs KVariable with hook:INT.Int
							if varARGS, t := c8.(*m.List); t && varARGS.Sort == m.SortList { // lhs KVariable with hook:LIST.List
								if c9.Equals(varACCTFROM) { // lhs KVariable, which reappears:ACCTFROM
									if c10.Equals(varNONCE) { // lhs KVariable, which reappears:NONCE
										// REQUIRES
										eval2473, err2473 := evalIsWordStack( // isWordStack(CODE)
											varCODE,
											config, -1)
										if err2473 != nil {
											return m.NoResult, err2473
										}
										if m.IsTrue(eval2473) {
											// RHS
											traceRuleApply("FUNC", 2249, "{| rule `#lambda__3`(CODE,ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE)=>`#lambda__4`(`#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token(\"Main\",\"IeleName\")),`#illFormed_IELE`(.KList)),ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE) requires isWordStack(CODE) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(146a7ceca8740abf00e930398836e2d3a871286dcfaa3d87ee2cc69dbf56af62) org.kframework.attributes.Location(Location(60,14,64,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax K ::= \"#fun\" \"(\" K \")\" \"(\" K \")\")] |}")
											eval2476, err2476 := evalXhashisValidContract( // #isValidContract(CODE)
												varCODE,
												config, -1)
											if err2476 != nil {
												return m.NoResult, err2476
											}
											eval2477, err2477 := evalXhashdasmContract( // #dasmContract(CODE,#token("Main","IeleName"))
												varCODE,
												/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "Main"},
												config, -1)
											if err2477 != nil {
												return m.NoResult, err2477
											}
											eval2475, err2475 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token("Main","IeleName")),`#illFormed_IELE`(.KList))
												eval2476,
												eval2477,
												&m.KApply{Label: m.LblXhashillFormedXuIELE, List: []m.K{ // as-is #illFormed_IELE
												}},
												config, -1)
											if err2475 != nil {
												return m.NoResult, err2475
											}
											eval2474, err2474 := evalXhashlambdaXuXu4( // `#lambda__4`(`#if_#then_#else_#fi_K-EQUAL`(#isValidContract(CODE),#dasmContract(CODE,#token("Main","IeleName")),`#illFormed_IELE`(.KList)),ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE,CODE)
												eval2475,
												varACCTFROM,
												varACCTFROM,
												varNONCE,
												varGAVAIL,
												varSCHED,
												varVALUE,
												varARGS,
												varACCTFROM,
												varNONCE,
												varCODE,
												config, -1)
											if err2474 != nil {
												return m.NoResult, err2474
											}
											return eval2474, nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlambdaXuXu3", args: []m.K{c1, c2, c3, c4, c5, c6, c7, c8, c9, c10}}
}

func evalInitStaticCell(config m.K, guard int) (m.K, error) {
	// rule #2250
	// source: ? @?
	// {| rule initStaticCell(.KList)=>`<static>`(#token("false","Bool")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(20e65445a00a51c325048b361ddeb22cfeb26314ed7617fffd801499451fa411) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2250, "{| rule initStaticCell(.KList)=>`<static>`(#token(\"false\",\"Bool\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(20e65445a00a51c325048b361ddeb22cfeb26314ed7617fffd801499451fa411) initializer()] |}")
	return &m.KApply{Label: m.LblXltstaticXgt, List: []m.K{ // as-is <static>
		/* rhs KToken */ m.BoolFalse,
	}}, nil

}

//var constInitStaticCell K = evalInitStaticCell(m.InternedBottom)

func evalInitLocalMemCell(config m.K, guard int) (m.K, error) {
	// rule #2251
	// source: ? @?
	// {| rule initLocalMemCell(.KList)=>`<localMem>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e98f78b39396999125566a10cdc7cbe99952cb07ca8461c6e420c32ac1b7198c) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2251, "{| rule initLocalMemCell(.KList)=>`<localMem>`(`.Map`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e98f78b39396999125566a10cdc7cbe99952cb07ca8461c6e420c32ac1b7198c) initializer()] |}")
	eval2478, err2478 := evalXdotMap(config, -1) // `.Map`(.KList)
	if err2478 != nil {
		return m.NoResult, err2478
	}
	return &m.KApply{Label: m.LblXltlocalMemXgt, List: []m.K{ // as-is <localMem>
		eval2478,
	}}, nil

}

//var constInitLocalMemCell K = evalInitLocalMemCell(m.InternedBottom)

func evalXhashgetBlockhash(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.getBlockhash
	lbl := m.LblXhashgetBlockhash // #getBlockhash
	sort := m.SortInt
	if hookRes, hookErr := blockchain.GetBlockhash(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.getBlockhash, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetBlockhash", args: []m.K{c}}
}

func evalXhashregisters(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2252
	// source: iele.k @1836
	// {| rule #registers(`_=exp_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(39054b7d84488ee581133150e0bebd623f98feed4ea8f398af161bf4239e0d4a) contentStartColumn(10) contentStartLine(1836) org.kframework.attributes.Location(Location(1836,10,1836,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=exp_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2252, "{| rule #registers(`_=exp_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(39054b7d84488ee581133150e0bebd623f98feed4ea8f398af161bf4239e0d4a) contentStartColumn(10) contentStartLine(1836) org.kframework.attributes.Location(Location(1836,10,1836,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2480, err2480 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2480 != nil {
									return m.NoResult, err2480
								}
								eval2479, err2479 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2480,
									config, -1)
								if err2479 != nil {
									return m.NoResult, err2479
								}
								return eval2479, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2253
	// source: iele.k @1861
	// {| rule #registers(`revert__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token("true","Bool") [UNIQUE_ID(e454b574420f1d4aa732c63cbda7b22c8d0e88bde76aa650e06d0ffd47bbea91) contentStartColumn(10) contentStartLine(1861) org.kframework.attributes.Location(Location(1861,10,1861,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRevertXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `revert__IELE-COMMON`(`%__IELE-COMMON`(R1))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(R1)
				// RHS
				traceRuleApply("FUNC", 2253, "{| rule #registers(`revert__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e454b574420f1d4aa732c63cbda7b22c8d0e88bde76aa650e06d0ffd47bbea91) contentStartColumn(10) contentStartLine(1861) org.kframework.attributes.Location(Location(1861,10,1861,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varR1, nil
			}
		}
	}

	// rule #2254
	// source: iele.k @1863
	// {| rule #registers(`log_,__IELE-COMMON`(`%__IELE-COMMON`(R1),R2))=>`maxInt(_,_)_INT`(R1,registersOperands(R2)) requires `_andBool_`(isNonEmptyOperands(R2),isInt(R1)) ensures #token("true","Bool") [UNIQUE_ID(0f1b2a71739608c338f20bbdaa371873904e85fe67c4fea0419eb04e4a7e2cc9) contentStartColumn(10) contentStartLine(1863) org.kframework.attributes.Location(Location(1863,10,1863,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(`%__IELE-COMMON`(R1),R2)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varR2 := kapp0.List[1] // lhs KVariable R2
				// REQUIRES
				eval2481, err2481 := evalIsNonEmptyOperands( // isNonEmptyOperands(R2)
					varR2,
					config, -1)
				if err2481 != nil {
					return m.NoResult, err2481
				}
				if m.IsTrue(eval2481) /* && */ /* rhs precomputed isInt(R1) */  {
					// RHS
					traceRuleApply("FUNC", 2254, "{| rule #registers(`log_,__IELE-COMMON`(`%__IELE-COMMON`(R1),R2))=>`maxInt(_,_)_INT`(R1,registersOperands(R2)) requires `_andBool_`(isNonEmptyOperands(R2),isInt(R1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0f1b2a71739608c338f20bbdaa371873904e85fe67c4fea0419eb04e4a7e2cc9) contentStartColumn(10) contentStartLine(1863) org.kframework.attributes.Location(Location(1863,10,1863,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval2483, err2483 := evalRegistersOperands( // registersOperands(R2)
						varR2,
						config, -1)
					if err2483 != nil {
						return m.NoResult, err2483
					}
					eval2482, err2482 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,registersOperands(R2))
						varR1,
						eval2483,
						config, -1)
					if err2482 != nil {
						return m.NoResult, err2482
					}
					return eval2482, nil
				}
			}
		}
	}

	// rule #2255
	// source: iele.k @1846
	// {| rule #registers(`_=or_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(a008a0b3b615df98c72fce07d89a959634d49f66da73d36fb9ed1ffa14912555) contentStartColumn(10) contentStartLine(1846) org.kframework.attributes.Location(Location(1846,10,1846,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=or_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2255, "{| rule #registers(`_=or_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a008a0b3b615df98c72fce07d89a959634d49f66da73d36fb9ed1ffa14912555) contentStartColumn(10) contentStartLine(1846) org.kframework.attributes.Location(Location(1846,10,1846,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2485, err2485 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2485 != nil {
									return m.NoResult, err2485
								}
								eval2484, err2484 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2485,
									config, -1)
								if err2484 != nil {
									return m.NoResult, err2484
								}
								return eval2484, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2256
	// source: iele.k @1829
	// {| rule #registers(`_=iszero__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(663a8be92c2ace4360f76199d487eead081e4abcbe2bc94057dca21b759d151a) contentStartColumn(10) contentStartLine(1829) org.kframework.attributes.Location(Location(1829,10,1829,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=iszero__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2256, "{| rule #registers(`_=iszero__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(663a8be92c2ace4360f76199d487eead081e4abcbe2bc94057dca21b759d151a) contentStartColumn(10) contentStartLine(1829) org.kframework.attributes.Location(Location(1829,10,1829,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2486, err2486 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2486 != nil {
							return m.NoResult, err2486
						}
						return eval2486, nil
					}
				}
			}
		}
	}

	// rule #2257
	// source: iele.k @1853
	// {| rule #registers(`_=call_(_)_IELE-COMMON`(R1,`@__IELE-COMMON`(_55),R2))=>`maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2)) requires `_andBool_`(`_andBool_`(isLValues(R1),isIeleName(_55)),isOperands(R2)) ensures #token("true","Bool") [UNIQUE_ID(57d5cc50800407b9501945c7b52194f8d727033dc15306f79388d4c437dae913) contentStartColumn(10) contentStartLine(1853) org.kframework.attributes.Location(Location(1853,10,1853,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(R1,`@__IELE-COMMON`(_55),R2)
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(_55)
			varXu55 := kapp1.List[0] // lhs KVariable _55
			varR2 := kapp0.List[2] // lhs KVariable R2
			// REQUIRES
			eval2487, err2487 := evalIsLValues( // isLValues(R1)
				varR1,
				config, -1)
			if err2487 != nil {
				return m.NoResult, err2487
			}
			eval2488, err2488 := evalIsIeleName( // isIeleName(_55)
				varXu55,
				config, -1)
			if err2488 != nil {
				return m.NoResult, err2488
			}
			eval2489, err2489 := evalIsOperands( // isOperands(R2)
				varR2,
				config, -1)
			if err2489 != nil {
				return m.NoResult, err2489
			}
			if ((m.IsTrue(eval2487)) &&
			   (m.IsTrue(eval2488))) &&
			   (m.IsTrue(eval2489)) {
				// RHS
				traceRuleApply("FUNC", 2257, "{| rule #registers(`_=call_(_)_IELE-COMMON`(R1,`@__IELE-COMMON`(_55),R2))=>`maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2)) requires `_andBool_`(`_andBool_`(isLValues(R1),isIeleName(_55)),isOperands(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57d5cc50800407b9501945c7b52194f8d727033dc15306f79388d4c437dae913) contentStartColumn(10) contentStartLine(1853) org.kframework.attributes.Location(Location(1853,10,1853,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval2491, err2491 := evalRegistersLValues( // registersLValues(R1)
					varR1,
					config, -1)
				if err2491 != nil {
					return m.NoResult, err2491
				}
				eval2492, err2492 := evalRegistersOperands( // registersOperands(R2)
					varR2,
					config, -1)
				if err2492 != nil {
					return m.NoResult, err2492
				}
				eval2490, err2490 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2))
					eval2491,
					eval2492,
					config, -1)
				if err2490 != nil {
					return m.NoResult, err2490
				}
				return eval2490, nil
			}
		}
	}

	// rule #2258
	// source: iele.k @1842
	// {| rule #registers(`_=sext_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(e7b862ccd7a0c91f3116a5e5882e09d164077803ba0da7aa3a592f53b34ee27b) contentStartColumn(10) contentStartLine(1842) org.kframework.attributes.Location(Location(1842,10,1842,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sext_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2258, "{| rule #registers(`_=sext_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e7b862ccd7a0c91f3116a5e5882e09d164077803ba0da7aa3a592f53b34ee27b) contentStartColumn(10) contentStartLine(1842) org.kframework.attributes.Location(Location(1842,10,1842,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2494, err2494 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2494 != nil {
									return m.NoResult, err2494
								}
								eval2493, err2493 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2494,
									config, -1)
								if err2493 != nil {
									return m.NoResult, err2493
								}
								return eval2493, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2259
	// source: iele.k @1831
	// {| rule #registers(`_=log2__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(0c8d9f30198f0fa55e0a5f72b9945e9b51db6dfba1ad66867dee1664b38797ea) contentStartColumn(10) contentStartLine(1831) org.kframework.attributes.Location(Location(1831,10,1831,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqlog2XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=log2__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2259, "{| rule #registers(`_=log2__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c8d9f30198f0fa55e0a5f72b9945e9b51db6dfba1ad66867dee1664b38797ea) contentStartColumn(10) contentStartLine(1831) org.kframework.attributes.Location(Location(1831,10,1831,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2495, err2495 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2495 != nil {
							return m.NoResult, err2495
						}
						return eval2495, nil
					}
				}
			}
		}
	}

	// rule #2260
	// source: iele.k @1821
	// {| rule #registers(`_=__IELE-COMMON`(`%__IELE-COMMON`(R1),_67))=>R1 requires `_andBool_`(isInt(_67),isInt(R1)) ensures #token("true","Bool") [UNIQUE_ID(2f32445c7cf753a7769948c5ca1d57828e017e41d49888e54c8b57c02c449fd2) contentStartColumn(10) contentStartLine(1821) org.kframework.attributes.Location(Location(1821,10,1821,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=__IELE-COMMON`(`%__IELE-COMMON`(R1),_67)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(_67) && isInt(R1)
					// RHS
					traceRuleApply("FUNC", 2260, "{| rule #registers(`_=__IELE-COMMON`(`%__IELE-COMMON`(R1),_67))=>R1 requires `_andBool_`(isInt(_67),isInt(R1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2f32445c7cf753a7769948c5ca1d57828e017e41d49888e54c8b57c02c449fd2) contentStartColumn(10) contentStartLine(1821) org.kframework.attributes.Location(Location(1821,10,1821,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return varR1, nil
				}
			}
		}
	}

	// rule #2261
	// source: iele.k @1824
	// {| rule #registers(`_=load_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(3eff22cc2ff7c68bfc7b40c71d4057a50b1bb9901cd86ab853be6e41238a157a) contentStartColumn(10) contentStartLine(1824) org.kframework.attributes.Location(Location(1824,10,1824,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[3].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R4)
									if varR4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R4) && isInt(R2)
										// RHS
										traceRuleApply("FUNC", 2261, "{| rule #registers(`_=load_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3eff22cc2ff7c68bfc7b40c71d4057a50b1bb9901cd86ab853be6e41238a157a) contentStartColumn(10) contentStartLine(1824) org.kframework.attributes.Location(Location(1824,10,1824,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2498, err2498 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,R4)
											varR3,
											varR4,
											config, -1)
										if err2498 != nil {
											return m.NoResult, err2498
										}
										eval2497, err2497 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))
											varR2,
											eval2498,
											config, -1)
										if err2497 != nil {
											return m.NoResult, err2497
										}
										eval2496, err2496 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4)))
											varR1,
											eval2497,
											config, -1)
										if err2496 != nil {
											return m.NoResult, err2496
										}
										return eval2496, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2262
	// source: iele.k @1855
	// {| rule #registers(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_97),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isIeleName(_97)),isOperands(R3)) ensures #token("true","Bool") [UNIQUE_ID(548201224897584a553ef38c884f6363e80b55af6a416cc830df78a1728f3b6d) contentStartColumn(10) contentStartLine(1855) org.kframework.attributes.Location(Location(1855,10,1855,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_97),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4))
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(_97)
			varXu97 := kapp1.List[0] // lhs KVariable _97
			if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
				if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varR3 := kapp0.List[3] // lhs KVariable R3
					if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R4)
						if varR4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES
							eval2499, err2499 := evalIsLValues( // isLValues(R1)
								varR1,
								config, -1)
							if err2499 != nil {
								return m.NoResult, err2499
							}
							eval2500, err2500 := evalIsIeleName( // isIeleName(_97)
								varXu97,
								config, -1)
							if err2500 != nil {
								return m.NoResult, err2500
							}
							eval2501, err2501 := evalIsOperands( // isOperands(R3)
								varR3,
								config, -1)
							if err2501 != nil {
								return m.NoResult, err2501
							}
							if ((m.IsTrue(eval2499) /* && */ /* rhs precomputed isInt(R4) */  /* && */ /* rhs precomputed isInt(R2) */ ) &&
							   (m.IsTrue(eval2500))) &&
							   (m.IsTrue(eval2501)) {
								// RHS
								traceRuleApply("FUNC", 2262, "{| rule #registers(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_97),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isIeleName(_97)),isOperands(R3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(548201224897584a553ef38c884f6363e80b55af6a416cc830df78a1728f3b6d) contentStartColumn(10) contentStartLine(1855) org.kframework.attributes.Location(Location(1855,10,1855,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2503, err2503 := evalRegistersLValues( // registersLValues(R1)
									varR1,
									config, -1)
								if err2503 != nil {
									return m.NoResult, err2503
								}
								eval2506, err2506 := evalRegistersOperands( // registersOperands(R3)
									varR3,
									config, -1)
								if err2506 != nil {
									return m.NoResult, err2506
								}
								eval2505, err2505 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R3),R4)
									eval2506,
									varR4,
									config, -1)
								if err2505 != nil {
									return m.NoResult, err2505
								}
								eval2504, err2504 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))
									varR2,
									eval2505,
									config, -1)
								if err2504 != nil {
									return m.NoResult, err2504
								}
								eval2502, err2502 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4)))
									eval2503,
									eval2504,
									config, -1)
								if err2502 != nil {
									return m.NoResult, err2502
								}
								return eval2502, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2263
	// source: iele.k @1830
	// {| rule #registers(`_=not__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(c292485e6f3bbd2457f2837600717b40f986e8ee1b01c7577c17f9f305fec194) contentStartColumn(10) contentStartLine(1830) org.kframework.attributes.Location(Location(1830,10,1830,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqnotXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=not__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2263, "{| rule #registers(`_=not__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c292485e6f3bbd2457f2837600717b40f986e8ee1b01c7577c17f9f305fec194) contentStartColumn(10) contentStartLine(1830) org.kframework.attributes.Location(Location(1830,10,1830,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2507, err2507 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2507 != nil {
							return m.NoResult, err2507
						}
						return eval2507, nil
					}
				}
			}
		}
	}

	// rule #2264
	// source: iele.k @1850
	// {| rule #registers(`_=sha3__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(c4620dfe7be7713a8570a8171331224d76c5ef0731eb23481bc90b8330f8be81) contentStartColumn(10) contentStartLine(1850) org.kframework.attributes.Location(Location(1850,10,1850,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2264, "{| rule #registers(`_=sha3__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c4620dfe7be7713a8570a8171331224d76c5ef0731eb23481bc90b8330f8be81) contentStartColumn(10) contentStartLine(1850) org.kframework.attributes.Location(Location(1850,10,1850,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2508, err2508 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2508 != nil {
							return m.NoResult, err2508
						}
						return eval2508, nil
					}
				}
			}
		}
	}

	// rule #2265
	// source: iele.k @1864
	// {| rule #registers(`_,_=create_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),_85,R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(R1),isInt(R4)),isInt(R2)),isIeleName(_85)),isOperands(R3)) ensures #token("true","Bool") [UNIQUE_ID(bb64ff9e4817085dbd286183bbd6e99c43f346aab1917f06e829120d5a73e0d1) contentStartColumn(10) contentStartLine(1864) org.kframework.attributes.Location(Location(1864,10,1864,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),_85,R3,`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varXu85 := kapp0.List[2] // lhs KVariable _85
						varR3 := kapp0.List[3] // lhs KVariable R3
						if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R4)
							if varR4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES
								eval2509, err2509 := evalIsIeleName( // isIeleName(_85)
									varXu85,
									config, -1)
								if err2509 != nil {
									return m.NoResult, err2509
								}
								eval2510, err2510 := evalIsOperands( // isOperands(R3)
									varR3,
									config, -1)
								if err2510 != nil {
									return m.NoResult, err2510
								}
								if (/* rhs precomputed isInt(R1) && isInt(R4) && isInt(R2) */ /* && */
								   m.IsTrue(eval2509)) &&
								   (m.IsTrue(eval2510)) {
									// RHS
									traceRuleApply("FUNC", 2265, "{| rule #registers(`_,_=create_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),_85,R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(R1),isInt(R4)),isInt(R2)),isIeleName(_85)),isOperands(R3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bb64ff9e4817085dbd286183bbd6e99c43f346aab1917f06e829120d5a73e0d1) contentStartColumn(10) contentStartLine(1864) org.kframework.attributes.Location(Location(1864,10,1864,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval2514, err2514 := evalRegistersOperands( // registersOperands(R3)
										varR3,
										config, -1)
									if err2514 != nil {
										return m.NoResult, err2514
									}
									eval2513, err2513 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R3),R4)
										eval2514,
										varR4,
										config, -1)
									if err2513 != nil {
										return m.NoResult, err2513
									}
									eval2512, err2512 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4))
										varR2,
										eval2513,
										config, -1)
									if err2512 != nil {
										return m.NoResult, err2512
									}
									eval2511, err2511 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),R4)))
										varR1,
										eval2512,
										config, -1)
									if err2511 != nil {
										return m.NoResult, err2511
									}
									return eval2511, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2266
	// source: iele.k @1825
	// {| rule #registers(`store_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(245b3e26f290a22df6ff26db16eabff671256147647a340e75419167096dda59) contentStartColumn(10) contentStartLine(1825) org.kframework.attributes.Location(Location(1825,10,1825,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2266, "{| rule #registers(`store_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(245b3e26f290a22df6ff26db16eabff671256147647a340e75419167096dda59) contentStartColumn(10) contentStartLine(1825) org.kframework.attributes.Location(Location(1825,10,1825,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2515, err2515 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2515 != nil {
							return m.NoResult, err2515
						}
						return eval2515, nil
					}
				}
			}
		}
	}

	// rule #2267
	// source: iele.k @1865
	// {| rule #registers(`_,_=copycreate_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),R4,`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersOperands(R4),R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isOperands(R4)),isInt(R2)),isInt(R5)) ensures #token("true","Bool") [UNIQUE_ID(ab289545671bc749074c7cc1c012c718c3559c4f67c938855930b9818994f76b) contentStartColumn(10) contentStartLine(1865) org.kframework.attributes.Location(Location(1865,10,1865,133)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),R4,`%__IELE-COMMON`(R5))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								varR4 := kapp0.List[3] // lhs KVariable R4
								if kapp4, t := kapp0.List[4].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R5)
									if varR5, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES
										eval2516, err2516 := evalIsOperands( // isOperands(R4)
											varR4,
											config, -1)
										if err2516 != nil {
											return m.NoResult, err2516
										}
										if /* rhs precomputed isInt(R3) && isInt(R1) */ /* && */
										   m.IsTrue(eval2516) /* && */ /* rhs precomputed isInt(R2) */  /* && */ /* rhs precomputed isInt(R5) */  {
											// RHS
											traceRuleApply("FUNC", 2267, "{| rule #registers(`_,_=copycreate_(_)send__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),R4,`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersOperands(R4),R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isOperands(R4)),isInt(R2)),isInt(R5)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ab289545671bc749074c7cc1c012c718c3559c4f67c938855930b9818994f76b) contentStartColumn(10) contentStartLine(1865) org.kframework.attributes.Location(Location(1865,10,1865,133)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
											eval2521, err2521 := evalRegistersOperands( // registersOperands(R4)
												varR4,
												config, -1)
											if err2521 != nil {
												return m.NoResult, err2521
											}
											eval2520, err2520 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R4),R5)
												eval2521,
												varR5,
												config, -1)
											if err2520 != nil {
												return m.NoResult, err2520
											}
											eval2519, err2519 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersOperands(R4),R5))
												varR3,
												eval2520,
												config, -1)
											if err2519 != nil {
												return m.NoResult, err2519
											}
											eval2518, err2518 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersOperands(R4),R5)))
												varR2,
												eval2519,
												config, -1)
											if err2518 != nil {
												return m.NoResult, err2518
											}
											eval2517, err2517 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersOperands(R4),R5))))
												varR1,
												eval2518,
												config, -1)
											if err2517 != nil {
												return m.NoResult, err2517
											}
											return eval2517, nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2268
	// source: iele.k @1841
	// {| rule #registers(`_=byte_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(f1e141bd7d914f4a0c9871bf410f4b324e71e105caa49778efce0769cd818e73) contentStartColumn(10) contentStartLine(1841) org.kframework.attributes.Location(Location(1841,10,1841,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=byte_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2268, "{| rule #registers(`_=byte_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f1e141bd7d914f4a0c9871bf410f4b324e71e105caa49778efce0769cd818e73) contentStartColumn(10) contentStartLine(1841) org.kframework.attributes.Location(Location(1841,10,1841,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2523, err2523 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2523 != nil {
									return m.NoResult, err2523
								}
								eval2522, err2522 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2523,
									config, -1)
								if err2522 != nil {
									return m.NoResult, err2522
								}
								return eval2522, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2269
	// source: iele.k @1851
	// {| rule #registers(`br__IELE-COMMON`(_95))=>#token("-1","Int") requires isIeleName(_95) ensures #token("true","Bool") [UNIQUE_ID(721e548a66e5742b6b4decdee5aaba4c84af66c2b9f8be8964c0ea981d47866d) contentStartColumn(10) contentStartLine(1851) org.kframework.attributes.Location(Location(1851,10,1851,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `br__IELE-COMMON`(_95)
		varXu95 := kapp0.List[0] // lhs KVariable _95
		// REQUIRES
		eval2524, err2524 := evalIsIeleName( // isIeleName(_95)
			varXu95,
			config, -1)
		if err2524 != nil {
			return m.NoResult, err2524
		}
		if m.IsTrue(eval2524) {
			// RHS
			traceRuleApply("FUNC", 2269, "{| rule #registers(`br__IELE-COMMON`(_95))=>#token(\"-1\",\"Int\") requires isIeleName(_95) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(721e548a66e5742b6b4decdee5aaba4c84af66c2b9f8be8964c0ea981d47866d) contentStartColumn(10) contentStartLine(1851) org.kframework.attributes.Location(Location(1851,10,1851,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("-1"), nil
		}
	}

	// rule #2270
	// source: iele.k @1828
	// {| rule #registers(`sstore_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(53a31570eec914c06ac8a1ca69d6f319caddae703d6ae19264853090e5d4c2ff) contentStartColumn(10) contentStartLine(1828) org.kframework.attributes.Location(Location(1828,10,1828,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2270, "{| rule #registers(`sstore_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(53a31570eec914c06ac8a1ca69d6f319caddae703d6ae19264853090e5d4c2ff) contentStartColumn(10) contentStartLine(1828) org.kframework.attributes.Location(Location(1828,10,1828,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2525, err2525 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2525 != nil {
							return m.NoResult, err2525
						}
						return eval2525, nil
					}
				}
			}
		}
	}

	// rule #2271
	// source: iele.k @1856
	// {| rule #registers(`_=call_(_)_IELE-COMMON`(R1,`%__IELE-COMMON`(R3),R2))=>`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2))) requires `_andBool_`(`_andBool_`(isLValues(R1),isInt(R3)),isOperands(R2)) ensures #token("true","Bool") [UNIQUE_ID(b6cbd6927f057cd468d890a8efec77c7293c0c7cef7fe4566ba29d440f180cd3) contentStartColumn(10) contentStartLine(1856) org.kframework.attributes.Location(Location(1856,10,1856,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(R1,`%__IELE-COMMON`(R3),R2)
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R3)
			if varR3, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varR2 := kapp0.List[2] // lhs KVariable R2
				// REQUIRES
				eval2526, err2526 := evalIsLValues( // isLValues(R1)
					varR1,
					config, -1)
				if err2526 != nil {
					return m.NoResult, err2526
				}
				eval2527, err2527 := evalIsOperands( // isOperands(R2)
					varR2,
					config, -1)
				if err2527 != nil {
					return m.NoResult, err2527
				}
				if (m.IsTrue(eval2526) /* && */ /* rhs precomputed isInt(R3) */ ) &&
				   (m.IsTrue(eval2527)) {
					// RHS
					traceRuleApply("FUNC", 2271, "{| rule #registers(`_=call_(_)_IELE-COMMON`(R1,`%__IELE-COMMON`(R3),R2))=>`maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2))) requires `_andBool_`(`_andBool_`(isLValues(R1),isInt(R3)),isOperands(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b6cbd6927f057cd468d890a8efec77c7293c0c7cef7fe4566ba29d440f180cd3) contentStartColumn(10) contentStartLine(1856) org.kframework.attributes.Location(Location(1856,10,1856,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval2530, err2530 := evalRegistersLValues( // registersLValues(R1)
						varR1,
						config, -1)
					if err2530 != nil {
						return m.NoResult, err2530
					}
					eval2531, err2531 := evalRegistersOperands( // registersOperands(R2)
						varR2,
						config, -1)
					if err2531 != nil {
						return m.NoResult, err2531
					}
					eval2529, err2529 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2))
						eval2530,
						eval2531,
						config, -1)
					if err2529 != nil {
						return m.NoResult, err2529
					}
					eval2528, err2528 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,`maxInt(_,_)_INT`(registersLValues(R1),registersOperands(R2)))
						varR3,
						eval2529,
						config, -1)
					if err2528 != nil {
						return m.NoResult, err2528
					}
					return eval2528, nil
				}
			}
		}
	}

	// rule #2272
	// source: iele.k @1847
	// {| rule #registers(`_=xor_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(46f05e2972f5c075d884bb92038a139ad5ee18fc2e56d81e6db86409aff9ec49) contentStartColumn(10) contentStartLine(1847) org.kframework.attributes.Location(Location(1847,10,1847,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=xor_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2272, "{| rule #registers(`_=xor_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(46f05e2972f5c075d884bb92038a139ad5ee18fc2e56d81e6db86409aff9ec49) contentStartColumn(10) contentStartLine(1847) org.kframework.attributes.Location(Location(1847,10,1847,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2533, err2533 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2533 != nil {
									return m.NoResult, err2533
								}
								eval2532, err2532 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2533,
									config, -1)
								if err2532 != nil {
									return m.NoResult, err2532
								}
								return eval2532, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2273
	// source: iele.k @1849
	// {| rule #registers(`_=cmp__,__IELE-COMMON`(`%__IELE-COMMON`(R1),_89,`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_89),isInt(R3)),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(f68d1218acadc8932f71294c5bf92cfc204f66e605e5ad14e691965c8bd170dd) contentStartColumn(10) contentStartLine(1849) org.kframework.attributes.Location(Location(1849,10,1849,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=cmp__,__IELE-COMMON`(`%__IELE-COMMON`(R1),_89,`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varXu89 := kapp0.List[1] // lhs KVariable _89
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[3].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES
								eval2534, err2534 := evalIsPredicate( // isPredicate(_89)
									varXu89,
									config, -1)
								if err2534 != nil {
									return m.NoResult, err2534
								}
								if m.IsTrue(eval2534) /* && */ /* rhs precomputed isInt(R3) */  /* && */ /* rhs precomputed isInt(R1) */  /* && */ /* rhs precomputed isInt(R2) */  {
									// RHS
									traceRuleApply("FUNC", 2273, "{| rule #registers(`_=cmp__,__IELE-COMMON`(`%__IELE-COMMON`(R1),_89,`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_89),isInt(R3)),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f68d1218acadc8932f71294c5bf92cfc204f66e605e5ad14e691965c8bd170dd) contentStartColumn(10) contentStartLine(1849) org.kframework.attributes.Location(Location(1849,10,1849,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval2536, err2536 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
										varR2,
										varR3,
										config, -1)
									if err2536 != nil {
										return m.NoResult, err2536
									}
									eval2535, err2535 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
										varR1,
										eval2536,
										config, -1)
									if err2535 != nil {
										return m.NoResult, err2535
									}
									return eval2535, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2274
	// source: iele.k @1854
	// {| rule #registers(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_56),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isIeleName(_56)),isOperands(R3)),isInt(R5)) ensures #token("true","Bool") [UNIQUE_ID(293abb8a5650d6ade9cd731256cb88d65170c88c1260310faf7f15b35df735b8) contentStartColumn(10) contentStartLine(1854) org.kframework.attributes.Location(Location(1854,10,1854,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_56),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5))
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `@__IELE-COMMON`(_56)
			varXu56 := kapp1.List[0] // lhs KVariable _56
			if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
				if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varR3 := kapp0.List[3] // lhs KVariable R3
					if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R4)
						if varR4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp4, t := kapp0.List[5].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R5)
								if varR5, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									// REQUIRES
									eval2537, err2537 := evalIsLValues( // isLValues(R1)
										varR1,
										config, -1)
									if err2537 != nil {
										return m.NoResult, err2537
									}
									eval2538, err2538 := evalIsIeleName( // isIeleName(_56)
										varXu56,
										config, -1)
									if err2538 != nil {
										return m.NoResult, err2538
									}
									eval2539, err2539 := evalIsOperands( // isOperands(R3)
										varR3,
										config, -1)
									if err2539 != nil {
										return m.NoResult, err2539
									}
									if ((m.IsTrue(eval2537) /* && */ /* rhs precomputed isInt(R4) */  /* && */ /* rhs precomputed isInt(R2) */ ) &&
									   (m.IsTrue(eval2538))) &&
									   (m.IsTrue(eval2539)) /* && */ /* rhs precomputed isInt(R5) */  {
										// RHS
										traceRuleApply("FUNC", 2274, "{| rule #registers(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`@__IELE-COMMON`(_56),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isIeleName(_56)),isOperands(R3)),isInt(R5)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(293abb8a5650d6ade9cd731256cb88d65170c88c1260310faf7f15b35df735b8) contentStartColumn(10) contentStartLine(1854) org.kframework.attributes.Location(Location(1854,10,1854,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2541, err2541 := evalRegistersLValues( // registersLValues(R1)
											varR1,
											config, -1)
										if err2541 != nil {
											return m.NoResult, err2541
										}
										eval2544, err2544 := evalRegistersOperands( // registersOperands(R3)
											varR3,
											config, -1)
										if err2544 != nil {
											return m.NoResult, err2544
										}
										eval2545, err2545 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R4,R5)
											varR4,
											varR5,
											config, -1)
										if err2545 != nil {
											return m.NoResult, err2545
										}
										eval2543, err2543 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5))
											eval2544,
											eval2545,
											config, -1)
										if err2543 != nil {
											return m.NoResult, err2543
										}
										eval2542, err2542 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))
											varR2,
											eval2543,
											config, -1)
										if err2542 != nil {
											return m.NoResult, err2542
										}
										eval2540, err2540 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5))))
											eval2541,
											eval2542,
											config, -1)
										if err2540 != nil {
											return m.NoResult, err2540
										}
										return eval2540, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2275
	// source: iele.k @1852
	// {| rule #registers(`br_,__IELE-COMMON`(`%__IELE-COMMON`(R1),_99))=>R1 requires `_andBool_`(isInt(R1),isIeleName(_99)) ensures #token("true","Bool") [UNIQUE_ID(4a5a075fafce26d7574d1081a779c54472f642a46bcbd652edd210195f8a756c) contentStartColumn(10) contentStartLine(1852) org.kframework.attributes.Location(Location(1852,10,1852,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `br_,__IELE-COMMON`(`%__IELE-COMMON`(R1),_99)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varXu99 := kapp0.List[1] // lhs KVariable _99
				// REQUIRES
				eval2546, err2546 := evalIsIeleName( // isIeleName(_99)
					varXu99,
					config, -1)
				if err2546 != nil {
					return m.NoResult, err2546
				}
				if /* rhs precomputed isInt(R1) */ /* && */
				   m.IsTrue(eval2546) {
					// RHS
					traceRuleApply("FUNC", 2275, "{| rule #registers(`br_,__IELE-COMMON`(`%__IELE-COMMON`(R1),_99))=>R1 requires `_andBool_`(isInt(R1),isIeleName(_99)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4a5a075fafce26d7574d1081a779c54472f642a46bcbd652edd210195f8a756c) contentStartColumn(10) contentStartLine(1852) org.kframework.attributes.Location(Location(1852,10,1852,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return varR1, nil
				}
			}
		}
	}

	// rule #2276
	// source: iele.k @1838
	// {| rule #registers(`_=addmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(1a23dc4a7bbff22f557a588c27b2288da19e9adac8ad6e17c2ccbbdbdee05d88) contentStartColumn(10) contentStartLine(1838) org.kframework.attributes.Location(Location(1838,10,1838,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=addmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[3].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R4)
									if varR4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R4) && isInt(R2)
										// RHS
										traceRuleApply("FUNC", 2276, "{| rule #registers(`_=addmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1a23dc4a7bbff22f557a588c27b2288da19e9adac8ad6e17c2ccbbdbdee05d88) contentStartColumn(10) contentStartLine(1838) org.kframework.attributes.Location(Location(1838,10,1838,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2549, err2549 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,R4)
											varR3,
											varR4,
											config, -1)
										if err2549 != nil {
											return m.NoResult, err2549
										}
										eval2548, err2548 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))
											varR2,
											eval2549,
											config, -1)
										if err2548 != nil {
											return m.NoResult, err2548
										}
										eval2547, err2547 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4)))
											varR1,
											eval2548,
											config, -1)
										if err2547 != nil {
											return m.NoResult, err2547
										}
										return eval2547, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2277
	// source: iele.k @1862
	// {| rule #registers(`log__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token("true","Bool") [UNIQUE_ID(da57fe54eb15b83fcca3479113e7f550197b17ac034ee103897b7f96c801738e) contentStartColumn(10) contentStartLine(1862) org.kframework.attributes.Location(Location(1862,10,1862,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(`%__IELE-COMMON`(R1))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(R1)
				// RHS
				traceRuleApply("FUNC", 2277, "{| rule #registers(`log__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(da57fe54eb15b83fcca3479113e7f550197b17ac034ee103897b7f96c801738e) contentStartColumn(10) contentStartLine(1862) org.kframework.attributes.Location(Location(1862,10,1862,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varR1, nil
			}
		}
	}

	// rule #2278
	// source: iele.k @1859
	// {| rule #registers(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R5),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isInt(R5)),isOperands(R3)) ensures #token("true","Bool") [UNIQUE_ID(d0fe1d4009e37d99b061e87529dba4b72f29e40573945486533b7c6415265380) contentStartColumn(10) contentStartLine(1859) org.kframework.attributes.Location(Location(1859,10,1859,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R5),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4))
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R5)
			if varR5, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varR3 := kapp0.List[3] // lhs KVariable R3
						if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R4)
							if varR4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES
								eval2550, err2550 := evalIsLValues( // isLValues(R1)
									varR1,
									config, -1)
								if err2550 != nil {
									return m.NoResult, err2550
								}
								eval2551, err2551 := evalIsOperands( // isOperands(R3)
									varR3,
									config, -1)
								if err2551 != nil {
									return m.NoResult, err2551
								}
								if (m.IsTrue(eval2550) /* && */ /* rhs precomputed isInt(R4) */  /* && */ /* rhs precomputed isInt(R2) */  /* && */ /* rhs precomputed isInt(R5) */ ) &&
								   (m.IsTrue(eval2551)) {
									// RHS
									traceRuleApply("FUNC", 2278, "{| rule #registers(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R5),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isInt(R5)),isOperands(R3)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d0fe1d4009e37d99b061e87529dba4b72f29e40573945486533b7c6415265380) contentStartColumn(10) contentStartLine(1859) org.kframework.attributes.Location(Location(1859,10,1859,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
									eval2553, err2553 := evalRegistersLValues( // registersLValues(R1)
										varR1,
										config, -1)
									if err2553 != nil {
										return m.NoResult, err2553
									}
									eval2556, err2556 := evalRegistersOperands( // registersOperands(R3)
										varR3,
										config, -1)
									if err2556 != nil {
										return m.NoResult, err2556
									}
									eval2557, err2557 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R4,R5)
										varR4,
										varR5,
										config, -1)
									if err2557 != nil {
										return m.NoResult, err2557
									}
									eval2555, err2555 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5))
										eval2556,
										eval2557,
										config, -1)
									if err2555 != nil {
										return m.NoResult, err2555
									}
									eval2554, err2554 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5)))
										varR2,
										eval2555,
										config, -1)
									if err2554 != nil {
										return m.NoResult, err2554
									}
									eval2552, err2552 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,R5))))
										eval2553,
										eval2554,
										config, -1)
									if err2552 != nil {
										return m.NoResult, err2552
									}
									return eval2552, nil
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2279
	// source: iele.k @1845
	// {| rule #registers(`_=and_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(cfa075a67174dfbb56fdd78d1927112dbf839308ce2ec6d84b5ff3c20f40cede) contentStartColumn(10) contentStartLine(1845) org.kframework.attributes.Location(Location(1845,10,1845,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=and_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2279, "{| rule #registers(`_=and_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cfa075a67174dfbb56fdd78d1927112dbf839308ce2ec6d84b5ff3c20f40cede) contentStartColumn(10) contentStartLine(1845) org.kframework.attributes.Location(Location(1845,10,1845,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2559, err2559 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2559 != nil {
									return m.NoResult, err2559
								}
								eval2558, err2558 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2559,
									config, -1)
								if err2558 != nil {
									return m.NoResult, err2558
								}
								return eval2558, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2280
	// source: iele.k @1860
	// {| rule #registers(`ret__IELE-COMMON`(R1))=>registersOperands(R1) requires isNonEmptyOperands(R1) ensures #token("true","Bool") [UNIQUE_ID(738f721cffed88a7f6f9a757d1cc6d7d293df1f554342db1a891c1100aaff986) contentStartColumn(10) contentStartLine(1860) org.kframework.attributes.Location(Location(1860,10,1860,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `ret__IELE-COMMON`(R1)
		varR1 := kapp0.List[0] // lhs KVariable R1
		// REQUIRES
		eval2560, err2560 := evalIsNonEmptyOperands( // isNonEmptyOperands(R1)
			varR1,
			config, -1)
		if err2560 != nil {
			return m.NoResult, err2560
		}
		if m.IsTrue(eval2560) {
			// RHS
			traceRuleApply("FUNC", 2280, "{| rule #registers(`ret__IELE-COMMON`(R1))=>registersOperands(R1) requires isNonEmptyOperands(R1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(738f721cffed88a7f6f9a757d1cc6d7d293df1f554342db1a891c1100aaff986) contentStartColumn(10) contentStartLine(1860) org.kframework.attributes.Location(Location(1860,10,1860,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval2561, err2561 := evalRegistersOperands( // registersOperands(R1)
				varR1,
				config, -1)
			if err2561 != nil {
				return m.NoResult, err2561
			}
			return eval2561, nil
		}
	}

	// rule #2281
	// source: iele.k @1834
	// {| rule #registers(`_=sub_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(175bb43cf75f3186d6a33e07040d10765556b5022f9e55ecf0a8dcd52a1eddf7) contentStartColumn(10) contentStartLine(1834) org.kframework.attributes.Location(Location(1834,10,1834,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sub_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2281, "{| rule #registers(`_=sub_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(175bb43cf75f3186d6a33e07040d10765556b5022f9e55ecf0a8dcd52a1eddf7) contentStartColumn(10) contentStartLine(1834) org.kframework.attributes.Location(Location(1834,10,1834,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2563, err2563 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2563 != nil {
									return m.NoResult, err2563
								}
								eval2562, err2562 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2563,
									config, -1)
								if err2562 != nil {
									return m.NoResult, err2562
								}
								return eval2562, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2282
	// source: iele.k @1866
	// {| rule #registers(`selfdestruct__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token("true","Bool") [UNIQUE_ID(40912852d8c63ce17c993f49ada381ba76f21dffe653aaef352a4ef4a5d558e7) contentStartColumn(10) contentStartLine(1866) org.kframework.attributes.Location(Location(1866,10,1866,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(`%__IELE-COMMON`(R1))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(R1)
				// RHS
				traceRuleApply("FUNC", 2282, "{| rule #registers(`selfdestruct__IELE-COMMON`(`%__IELE-COMMON`(R1)))=>R1 requires isInt(R1) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(40912852d8c63ce17c993f49ada381ba76f21dffe653aaef352a4ef4a5d558e7) contentStartColumn(10) contentStartLine(1866) org.kframework.attributes.Location(Location(1866,10,1866,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varR1, nil
			}
		}
	}

	// rule #2283
	// source: iele.k @1840
	// {| rule #registers(`_=expmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(b1b221cb97e6d60812878e0286c9cd6709d0474e15d2a1d832128cb639b93439) contentStartColumn(10) contentStartLine(1840) org.kframework.attributes.Location(Location(1840,10,1840,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=expmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[3].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R4)
									if varR4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R4) && isInt(R2)
										// RHS
										traceRuleApply("FUNC", 2283, "{| rule #registers(`_=expmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b1b221cb97e6d60812878e0286c9cd6709d0474e15d2a1d832128cb639b93439) contentStartColumn(10) contentStartLine(1840) org.kframework.attributes.Location(Location(1840,10,1840,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2566, err2566 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,R4)
											varR3,
											varR4,
											config, -1)
										if err2566 != nil {
											return m.NoResult, err2566
										}
										eval2565, err2565 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))
											varR2,
											eval2566,
											config, -1)
										if err2565 != nil {
											return m.NoResult, err2565
										}
										eval2564, err2564 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4)))
											varR1,
											eval2565,
											config, -1)
										if err2564 != nil {
											return m.NoResult, err2564
										}
										return eval2564, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2284
	// source: iele.k @1823
	// {| rule #registers(`_=load__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(700bc05441f019606021470f2fd61d6eda9f007fddd2f6e88dfc7d2ad0049af8) contentStartColumn(10) contentStartLine(1823) org.kframework.attributes.Location(Location(1823,10,1823,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2284, "{| rule #registers(`_=load__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(700bc05441f019606021470f2fd61d6eda9f007fddd2f6e88dfc7d2ad0049af8) contentStartColumn(10) contentStartLine(1823) org.kframework.attributes.Location(Location(1823,10,1823,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2567, err2567 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2567 != nil {
							return m.NoResult, err2567
						}
						return eval2567, nil
					}
				}
			}
		}
	}

	// rule #2285
	// source: iele.k @1832
	// {| rule #registers(`_=add_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(6dab64ef1b2fddf5fa3082ec98f3ae9bcf6786f7a74923299ea01eed73f7563d) contentStartColumn(10) contentStartLine(1832) org.kframework.attributes.Location(Location(1832,10,1832,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=add_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2285, "{| rule #registers(`_=add_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6dab64ef1b2fddf5fa3082ec98f3ae9bcf6786f7a74923299ea01eed73f7563d) contentStartColumn(10) contentStartLine(1832) org.kframework.attributes.Location(Location(1832,10,1832,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2569, err2569 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2569 != nil {
									return m.NoResult, err2569
								}
								eval2568, err2568 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2569,
									config, -1)
								if err2568 != nil {
									return m.NoResult, err2568
								}
								return eval2568, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2286
	// source: iele.k @1844
	// {| rule #registers(`_=bswap_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(c3d89d066d3a1ce4bb54b00f07f950b300132aa5a9704977f365c772ae3a6c97) contentStartColumn(10) contentStartLine(1844) org.kframework.attributes.Location(Location(1844,10,1844,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=bswap_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2286, "{| rule #registers(`_=bswap_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c3d89d066d3a1ce4bb54b00f07f950b300132aa5a9704977f365c772ae3a6c97) contentStartColumn(10) contentStartLine(1844) org.kframework.attributes.Location(Location(1844,10,1844,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2571, err2571 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2571 != nil {
									return m.NoResult, err2571
								}
								eval2570, err2570 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2571,
									config, -1)
								if err2570 != nil {
									return m.NoResult, err2570
								}
								return eval2570, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2287
	// source: iele.k @1839
	// {| rule #registers(`_=mulmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(48b27b7437d4df54ca14a50d405f6a559707635930bb0d610d96d3f7b352dd7e) contentStartColumn(10) contentStartLine(1839) org.kframework.attributes.Location(Location(1839,10,1839,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=mulmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[3].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R4)
									if varR4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R4) && isInt(R2)
										// RHS
										traceRuleApply("FUNC", 2287, "{| rule #registers(`_=mulmod_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(48b27b7437d4df54ca14a50d405f6a559707635930bb0d610d96d3f7b352dd7e) contentStartColumn(10) contentStartLine(1839) org.kframework.attributes.Location(Location(1839,10,1839,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2574, err2574 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,R4)
											varR3,
											varR4,
											config, -1)
										if err2574 != nil {
											return m.NoResult, err2574
										}
										eval2573, err2573 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))
											varR2,
											eval2574,
											config, -1)
										if err2573 != nil {
											return m.NoResult, err2573
										}
										eval2572, err2572 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4)))
											varR1,
											eval2573,
											config, -1)
										if err2572 != nil {
											return m.NoResult, err2572
										}
										return eval2572, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2288
	// source: iele.k @1833
	// {| rule #registers(`_=mul_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(b88c46338f6f45e9153f185aa9f5853337e35420a82f5a2daa7fed62b4b77f07) contentStartColumn(10) contentStartLine(1833) org.kframework.attributes.Location(Location(1833,10,1833,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mul_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2288, "{| rule #registers(`_=mul_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b88c46338f6f45e9153f185aa9f5853337e35420a82f5a2daa7fed62b4b77f07) contentStartColumn(10) contentStartLine(1833) org.kframework.attributes.Location(Location(1833,10,1833,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2576, err2576 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2576 != nil {
									return m.NoResult, err2576
								}
								eval2575, err2575 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2576,
									config, -1)
								if err2575 != nil {
									return m.NoResult, err2575
								}
								return eval2575, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2289
	// source: iele.k @1827
	// {| rule #registers(`_=sload__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(d7c883ee00de56f81af819f2a5262015b26b338ee383c9e6f33aebe2811a2459) contentStartColumn(10) contentStartLine(1827) org.kframework.attributes.Location(Location(1827,10,1827,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sload__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2289, "{| rule #registers(`_=sload__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d7c883ee00de56f81af819f2a5262015b26b338ee383c9e6f33aebe2811a2459) contentStartColumn(10) contentStartLine(1827) org.kframework.attributes.Location(Location(1827,10,1827,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2577, err2577 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2577 != nil {
							return m.NoResult, err2577
						}
						return eval2577, nil
					}
				}
			}
		}
	}

	// rule #2290
	// source: iele.k @1843
	// {| rule #registers(`_=twos_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(bcd95e9b5b48c5366eb785e5cce10d873e8fa5fd83a93c4c0fb0d585964461c4) contentStartColumn(10) contentStartLine(1843) org.kframework.attributes.Location(Location(1843,10,1843,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=twos_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2290, "{| rule #registers(`_=twos_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bcd95e9b5b48c5366eb785e5cce10d873e8fa5fd83a93c4c0fb0d585964461c4) contentStartColumn(10) contentStartLine(1843) org.kframework.attributes.Location(Location(1843,10,1843,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2579, err2579 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2579 != nil {
									return m.NoResult, err2579
								}
								eval2578, err2578 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2579,
									config, -1)
								if err2578 != nil {
									return m.NoResult, err2578
								}
								return eval2578, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2291
	// source: iele.k @1822
	// {| rule #registers(`_=__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(6cc8b4e57738c309c1376cd32ffd66da65329a310bbad4a0fe7ac931f080c498) contentStartColumn(10) contentStartLine(1822) org.kframework.attributes.Location(Location(1822,10,1822,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES precomputed isInt(R1) && isInt(R2)
						// RHS
						traceRuleApply("FUNC", 2291, "{| rule #registers(`_=__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(isInt(R1),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6cc8b4e57738c309c1376cd32ffd66da65329a310bbad4a0fe7ac931f080c498) contentStartColumn(10) contentStartLine(1822) org.kframework.attributes.Location(Location(1822,10,1822,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval2580, err2580 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
							varR1,
							varR2,
							config, -1)
						if err2580 != nil {
							return m.NoResult, err2580
						}
						return eval2580, nil
					}
				}
			}
		}
	}

	// rule #2292
	// source: iele.k @1858
	// {| rule #registers(`_=calladdress_at__IELE-COMMON`(`%__IELE-COMMON`(R1),_73,`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(`_andBool_`(isGlobalName(_73),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(426fe36cfb2d8a3862acde21c6be8cb24fc9ddf3dd200614807594eb2ad9a150) contentStartColumn(10) contentStartLine(1858) org.kframework.attributes.Location(Location(1858,10,1858,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(`%__IELE-COMMON`(R1),_73,`%__IELE-COMMON`(R2))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varXu73 := kapp0.List[1] // lhs KVariable _73
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						// REQUIRES
						eval2581, err2581 := evalIsGlobalName( // isGlobalName(_73)
							varXu73,
							config, -1)
						if err2581 != nil {
							return m.NoResult, err2581
						}
						if m.IsTrue(eval2581) /* && */ /* rhs precomputed isInt(R1) */  /* && */ /* rhs precomputed isInt(R2) */  {
							// RHS
							traceRuleApply("FUNC", 2292, "{| rule #registers(`_=calladdress_at__IELE-COMMON`(`%__IELE-COMMON`(R1),_73,`%__IELE-COMMON`(R2)))=>`maxInt(_,_)_INT`(R1,R2) requires `_andBool_`(`_andBool_`(isGlobalName(_73),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(426fe36cfb2d8a3862acde21c6be8cb24fc9ddf3dd200614807594eb2ad9a150) contentStartColumn(10) contentStartLine(1858) org.kframework.attributes.Location(Location(1858,10,1858,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval2582, err2582 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,R2)
								varR1,
								varR2,
								config, -1)
							if err2582 != nil {
								return m.NoResult, err2582
							}
							return eval2582, nil
						}
					}
				}
			}
		}
	}

	// rule #2293
	// source: iele.k @1837
	// {| rule #registers(`_=mod_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(63bda0635bcf4740bfde4141a1a1929ddd5361dd82df137bee64a56b7c1b6a2e) contentStartColumn(10) contentStartLine(1837) org.kframework.attributes.Location(Location(1837,10,1837,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mod_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2293, "{| rule #registers(`_=mod_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63bda0635bcf4740bfde4141a1a1929ddd5361dd82df137bee64a56b7c1b6a2e) contentStartColumn(10) contentStartLine(1837) org.kframework.attributes.Location(Location(1837,10,1837,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2584, err2584 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2584 != nil {
									return m.NoResult, err2584
								}
								eval2583, err2583 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2584,
									config, -1)
								if err2583 != nil {
									return m.NoResult, err2583
								}
								return eval2583, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2294
	// source: iele.k @1835
	// {| rule #registers(`_=div_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(3d35a86c5bdaaf2e5a07d3be0e9657edd05e91b39e513a38f124f24e3ba5cd54) contentStartColumn(10) contentStartLine(1835) org.kframework.attributes.Location(Location(1835,10,1835,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=div_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2294, "{| rule #registers(`_=div_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3d35a86c5bdaaf2e5a07d3be0e9657edd05e91b39e513a38f124f24e3ba5cd54) contentStartColumn(10) contentStartLine(1835) org.kframework.attributes.Location(Location(1835,10,1835,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2586, err2586 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2586 != nil {
									return m.NoResult, err2586
								}
								eval2585, err2585 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2586,
									config, -1)
								if err2585 != nil {
									return m.NoResult, err2585
								}
								return eval2585, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2295
	// source: iele.k @1857
	// {| rule #registers(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R6),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isInt(R6)),isOperands(R3)),isInt(R5)) ensures #token("true","Bool") [UNIQUE_ID(09e39c5e30f676c39c3e0a458e1ffddb12a83aa02f485739a6c25847c1ab1fe4) contentStartColumn(10) contentStartLine(1857) org.kframework.attributes.Location(Location(1857,10,1857,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R6),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5))
		varR1 := kapp0.List[0] // lhs KVariable R1
		if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R6)
			if varR6, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[2].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varR3 := kapp0.List[3] // lhs KVariable R3
						if kapp3, t := kapp0.List[4].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R4)
							if varR4, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[5].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R5)
									if varR5, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES
										eval2587, err2587 := evalIsLValues( // isLValues(R1)
											varR1,
											config, -1)
										if err2587 != nil {
											return m.NoResult, err2587
										}
										eval2588, err2588 := evalIsOperands( // isOperands(R3)
											varR3,
											config, -1)
										if err2588 != nil {
											return m.NoResult, err2588
										}
										if (m.IsTrue(eval2587) /* && */ /* rhs precomputed isInt(R4) */  /* && */ /* rhs precomputed isInt(R2) */  /* && */ /* rhs precomputed isInt(R6) */ ) &&
										   (m.IsTrue(eval2588)) /* && */ /* rhs precomputed isInt(R5) */  {
											// RHS
											traceRuleApply("FUNC", 2295, "{| rule #registers(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(R1,`%__IELE-COMMON`(R6),`%__IELE-COMMON`(R2),R3,`%__IELE-COMMON`(R4),`%__IELE-COMMON`(R5)))=>`maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(R1),isInt(R4)),isInt(R2)),isInt(R6)),isOperands(R3)),isInt(R5)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(09e39c5e30f676c39c3e0a458e1ffddb12a83aa02f485739a6c25847c1ab1fe4) contentStartColumn(10) contentStartLine(1857) org.kframework.attributes.Location(Location(1857,10,1857,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
											eval2590, err2590 := evalRegistersLValues( // registersLValues(R1)
												varR1,
												config, -1)
											if err2590 != nil {
												return m.NoResult, err2590
											}
											eval2593, err2593 := evalRegistersOperands( // registersOperands(R3)
												varR3,
												config, -1)
											if err2593 != nil {
												return m.NoResult, err2593
											}
											eval2595, err2595 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R5,R6)
												varR5,
												varR6,
												config, -1)
											if err2595 != nil {
												return m.NoResult, err2595
											}
											eval2594, err2594 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6))
												varR4,
												eval2595,
												config, -1)
											if err2594 != nil {
												return m.NoResult, err2594
											}
											eval2592, err2592 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6)))
												eval2593,
												eval2594,
												config, -1)
											if err2592 != nil {
												return m.NoResult, err2592
											}
											eval2591, err2591 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6))))
												varR2,
												eval2592,
												config, -1)
											if err2591 != nil {
												return m.NoResult, err2591
											}
											eval2589, err2589 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(registersLValues(R1),`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(registersOperands(R3),`maxInt(_,_)_INT`(R4,`maxInt(_,_)_INT`(R5,R6)))))
												eval2590,
												eval2591,
												config, -1)
											if err2589 != nil {
												return m.NoResult, err2589
											}
											return eval2589, nil
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2296
	// source: iele.k @1848
	// {| rule #registers(`_=shift_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(6121848f098c9659afe90f4385ae29f7bb5a5d05d3006b52dbaeae547cb08b55) contentStartColumn(10) contentStartLine(1848) org.kframework.attributes.Location(Location(1848,10,1848,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=shift_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R2)
								// RHS
								traceRuleApply("FUNC", 2296, "{| rule #registers(`_=shift_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3)) requires `_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6121848f098c9659afe90f4385ae29f7bb5a5d05d3006b52dbaeae547cb08b55) contentStartColumn(10) contentStartLine(1848) org.kframework.attributes.Location(Location(1848,10,1848,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
								eval2597, err2597 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,R3)
									varR2,
									varR3,
									config, -1)
								if err2597 != nil {
									return m.NoResult, err2597
								}
								eval2596, err2596 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,R3))
									varR1,
									eval2597,
									config, -1)
								if err2596 != nil {
									return m.NoResult, err2596
								}
								return eval2596, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2297
	// source: iele.k @1826
	// {| rule #registers(`store_,_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token("true","Bool") [UNIQUE_ID(6714ef5e55e9737dfbf509ba1788ba9edb035d0949420a264abb80bf8736ae70) contentStartColumn(10) contentStartLine(1826) org.kframework.attributes.Location(Location(1826,10,1826,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4))
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(R1)
			if varR1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if kapp2, t := kapp0.List[1].(*m.KApply); t && kapp2.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp2.List) == 1 { // `%__IELE-COMMON`(R2)
					if varR2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
						if kapp3, t := kapp0.List[2].(*m.KApply); t && kapp3.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp3.List) == 1 { // `%__IELE-COMMON`(R3)
							if varR3, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
								if kapp4, t := kapp0.List[3].(*m.KApply); t && kapp4.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp4.List) == 1 { // `%__IELE-COMMON`(R4)
									if varR4, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
										// REQUIRES precomputed isInt(R3) && isInt(R1) && isInt(R4) && isInt(R2)
										// RHS
										traceRuleApply("FUNC", 2297, "{| rule #registers(`store_,_,_,__IELE-COMMON`(`%__IELE-COMMON`(R1),`%__IELE-COMMON`(R2),`%__IELE-COMMON`(R3),`%__IELE-COMMON`(R4)))=>`maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(R3),isInt(R1)),isInt(R4)),isInt(R2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6714ef5e55e9737dfbf509ba1788ba9edb035d0949420a264abb80bf8736ae70) contentStartColumn(10) contentStartLine(1826) org.kframework.attributes.Location(Location(1826,10,1826,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
										eval2600, err2600 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R3,R4)
											varR3,
											varR4,
											config, -1)
										if err2600 != nil {
											return m.NoResult, err2600
										}
										eval2599, err2599 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4))
											varR2,
											eval2600,
											config, -1)
										if err2599 != nil {
											return m.NoResult, err2599
										}
										eval2598, err2598 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(R1,`maxInt(_,_)_INT`(R2,`maxInt(_,_)_INT`(R3,R4)))
											varR1,
											eval2599,
											config, -1)
										if err2598 != nil {
											return m.NoResult, err2598
										}
										return eval2598, nil
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashregisters", args: []m.K{c}}
}

func evalIsKResult(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #2298
	// source: ? @?
	// {| rule isKResult(`sstore_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(a36e9ba8cdacca985a4c1b1a70cab7c224cdbb370aef7af82e3c1f658e1a0adf)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2601, err2601 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2601 != nil {
			return m.NoResult, err2601
		}
		eval2602, err2602 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2602 != nil {
			return m.NoResult, err2602
		}
		eval2603, err2603 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2603 != nil {
			return m.NoResult, err2603
		}
		eval2604, err2604 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2604 != nil {
			return m.NoResult, err2604
		}
		if ((m.IsTrue(eval2601)) &&
		   (m.IsTrue(eval2602))) &&
		   ((m.IsTrue(eval2603)) &&
		   (m.IsTrue(eval2604))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2298, "{| rule isKResult(`sstore_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a36e9ba8cdacca985a4c1b1a70cab7c224cdbb370aef7af82e3c1f658e1a0adf)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2299
	// source: ? @?
	// {| rule isKResult(funType(K0,K1))=>#token("true","Bool") requires `_andBool_`(isTypes(K0),isReturnType(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFunType && len(kapp0.List) == 2 { // funType(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2605, err2605 := evalIsTypes( // isTypes(K0)
			varK0,
			config, -1)
		if err2605 != nil {
			return m.NoResult, err2605
		}
		eval2606, err2606 := evalIsReturnType( // isReturnType(K1)
			varK1,
			config, -1)
		if err2606 != nil {
			return m.NoResult, err2606
		}
		if (m.IsTrue(eval2605)) &&
		   (m.IsTrue(eval2606)) {
			// RHS
			traceRuleApply("FUNC", 2299, "{| rule isKResult(funType(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isTypes(K0),isReturnType(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2300
	// source: ? @?
	// {| rule isKResult(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(9bec744723f672d1e132ce1867708c3d5f3063d18b215360b13ac87fcaf5c222)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2607, err2607 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2607 != nil {
			return m.NoResult, err2607
		}
		eval2608, err2608 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2608 != nil {
			return m.NoResult, err2608
		}
		eval2609, err2609 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2609 != nil {
			return m.NoResult, err2609
		}
		eval2610, err2610 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2610 != nil {
			return m.NoResult, err2610
		}
		eval2611, err2611 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2611 != nil {
			return m.NoResult, err2611
		}
		eval2612, err2612 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2612 != nil {
			return m.NoResult, err2612
		}
		eval2613, err2613 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2613 != nil {
			return m.NoResult, err2613
		}
		if ((((m.IsTrue(eval2607)) &&
		   (m.IsTrue(eval2608))) &&
		   (m.IsTrue(eval2609))) &&
		   (m.IsTrue(eval2610))) &&
		   (((m.IsTrue(eval2611)) &&
		   (m.IsTrue(eval2612))) &&
		   (m.IsTrue(eval2613))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2300, "{| rule isKResult(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9bec744723f672d1e132ce1867708c3d5f3063d18b215360b13ac87fcaf5c222)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2301
	// source: ? @?
	// {| rule isKResult(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(7893e07cf5e398208f24df03af2be35501770b08482d48352683f3b5a847cb23)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2614, err2614 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2614 != nil {
			return m.NoResult, err2614
		}
		eval2615, err2615 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2615 != nil {
			return m.NoResult, err2615
		}
		eval2616, err2616 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2616 != nil {
			return m.NoResult, err2616
		}
		eval2617, err2617 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2617 != nil {
			return m.NoResult, err2617
		}
		eval2618, err2618 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2618 != nil {
			return m.NoResult, err2618
		}
		eval2619, err2619 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2619 != nil {
			return m.NoResult, err2619
		}
		eval2620, err2620 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2620 != nil {
			return m.NoResult, err2620
		}
		if ((((m.IsTrue(eval2614)) &&
		   (m.IsTrue(eval2615))) &&
		   (m.IsTrue(eval2616))) &&
		   (m.IsTrue(eval2617))) &&
		   (((m.IsTrue(eval2618)) &&
		   (m.IsTrue(eval2619))) &&
		   (m.IsTrue(eval2620))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2301, "{| rule isKResult(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7893e07cf5e398208f24df03af2be35501770b08482d48352683f3b5a847cb23)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2302
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Ints","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2302, "{| rule isKResult(#KToken(#token(\"Ints\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2303
	// source: ? @?
	// {| rule isKResult(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(1ad99078acaf3af2f70722e944deeee99bf988d5c779e851928ea97563f13122)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2621, err2621 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2621 != nil {
			return m.NoResult, err2621
		}
		eval2622, err2622 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2622 != nil {
			return m.NoResult, err2622
		}
		eval2623, err2623 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2623 != nil {
			return m.NoResult, err2623
		}
		eval2624, err2624 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2624 != nil {
			return m.NoResult, err2624
		}
		eval2625, err2625 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2625 != nil {
			return m.NoResult, err2625
		}
		eval2626, err2626 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2626 != nil {
			return m.NoResult, err2626
		}
		eval2627, err2627 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2627 != nil {
			return m.NoResult, err2627
		}
		if ((((m.IsTrue(eval2621)) &&
		   (m.IsTrue(eval2622))) &&
		   (m.IsTrue(eval2623))) &&
		   (m.IsTrue(eval2624))) &&
		   (((m.IsTrue(eval2625)) &&
		   (m.IsTrue(eval2626))) &&
		   (m.IsTrue(eval2627))) {
			// RHS
			traceRuleApply("FUNC", 2303, "{| rule isKResult(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1ad99078acaf3af2f70722e944deeee99bf988d5c779e851928ea97563f13122)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2304
	// source: ? @?
	// {| rule isKResult(`log__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(8c8635de706a0e8dd6a22aca42182e302772543ba9218dd4a811306e28b3716f)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2628, err2628 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2628 != nil {
			return m.NoResult, err2628
		}
		eval2629, err2629 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2629 != nil {
			return m.NoResult, err2629
		}
		if (m.IsTrue(eval2628)) &&
		   (m.IsTrue(eval2629)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2304, "{| rule isKResult(`log__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c8635de706a0e8dd6a22aca42182e302772543ba9218dd4a811306e28b3716f)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2305
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2305, "{| rule isKResult(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2306
	// source: ? @?
	// {| rule isKResult(`log_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isNonEmptyOperands(K1),isOperand(K0)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token("true","Bool") [UNIQUE_ID(bafdcc8eb08fb98f55e842b5ea97b914d29735db28c0f74247968f8af1084b3e)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2630, err2630 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err2630 != nil {
			return m.NoResult, err2630
		}
		eval2631, err2631 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2631 != nil {
			return m.NoResult, err2631
		}
		eval2632, err2632 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2632 != nil {
			return m.NoResult, err2632
		}
		eval2633, err2633 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2633 != nil {
			return m.NoResult, err2633
		}
		if ((m.IsTrue(eval2630)) &&
		   (m.IsTrue(eval2631))) &&
		   ((m.IsTrue(eval2632)) &&
		   (m.IsTrue(eval2633))) {
			// RHS
			traceRuleApply("FUNC", 2306, "{| rule isKResult(`log_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isNonEmptyOperands(K1),isOperand(K0)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bafdcc8eb08fb98f55e842b5ea97b914d29735db28c0f74247968f8af1084b3e)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2307
	// source: ? @?
	// {| rule isKResult(`_=not__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(4f50ed26023389a226aa566ffa668be24d353924aa6a44ac56b095b3593b6f3a)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqnotXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=not__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2634, err2634 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2634 != nil {
			return m.NoResult, err2634
		}
		eval2635, err2635 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2635 != nil {
			return m.NoResult, err2635
		}
		eval2636, err2636 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2636 != nil {
			return m.NoResult, err2636
		}
		if ((m.IsTrue(eval2634)) &&
		   (m.IsTrue(eval2635))) &&
		   (m.IsTrue(eval2636)) {
			// RHS
			traceRuleApply("FUNC", 2307, "{| rule isKResult(`_=not__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f50ed26023389a226aa566ffa668be24d353924aa6a44ac56b095b3593b6f3a)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2308
	// source: ? @?
	// {| rule isKResult(`_=load__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(cd01fda46a470c61df9ff7cbad4ef1060ce4675c9849b3f270bcc79310b8f61c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2637, err2637 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2637 != nil {
			return m.NoResult, err2637
		}
		eval2638, err2638 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2638 != nil {
			return m.NoResult, err2638
		}
		eval2639, err2639 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2639 != nil {
			return m.NoResult, err2639
		}
		if ((m.IsTrue(eval2637)) &&
		   (m.IsTrue(eval2638))) &&
		   (m.IsTrue(eval2639)) {
			// RHS
			traceRuleApply("FUNC", 2308, "{| rule isKResult(`_=load__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd01fda46a470c61df9ff7cbad4ef1060ce4675c9849b3f270bcc79310b8f61c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2309
	// source: ? @?
	// {| rule isKResult(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(680b15fa9961da33d2f034118fa21b1b9def91b2a2d5ea4fe6c77905166720a9)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=exp_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2640, err2640 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2640 != nil {
			return m.NoResult, err2640
		}
		eval2641, err2641 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2641 != nil {
			return m.NoResult, err2641
		}
		eval2642, err2642 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2642 != nil {
			return m.NoResult, err2642
		}
		eval2643, err2643 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2643 != nil {
			return m.NoResult, err2643
		}
		eval2644, err2644 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2644 != nil {
			return m.NoResult, err2644
		}
		if (((m.IsTrue(eval2640)) &&
		   (m.IsTrue(eval2641))) &&
		   (m.IsTrue(eval2642))) &&
		   ((m.IsTrue(eval2643)) &&
		   (m.IsTrue(eval2644))) {
			// RHS
			traceRuleApply("FUNC", 2309, "{| rule isKResult(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(680b15fa9961da33d2f034118fa21b1b9def91b2a2d5ea4fe6c77905166720a9)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2310
	// source: iele.k @365
	// {| rule isKResult(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f38fbf62106fab6c07f07e7b3996ea844a4a3e881429bf7257d1fbf579b9d63e) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2310, "{| rule isKResult(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f38fbf62106fab6c07f07e7b3996ea844a4a3e881429bf7257d1fbf579b9d63e) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2311
	// source: ? @?
	// {| rule isKResult(`store_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token("true","Bool") [UNIQUE_ID(fc015d39c3fa34fe267eb5539bb48f335e6e2c86f604f7e6010d7c7ee267220c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2645, err2645 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2645 != nil {
			return m.NoResult, err2645
		}
		eval2646, err2646 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2646 != nil {
			return m.NoResult, err2646
		}
		eval2647, err2647 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2647 != nil {
			return m.NoResult, err2647
		}
		eval2648, err2648 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2648 != nil {
			return m.NoResult, err2648
		}
		if ((m.IsTrue(eval2645)) &&
		   (m.IsTrue(eval2646))) &&
		   ((m.IsTrue(eval2647)) &&
		   (m.IsTrue(eval2648))) {
			// RHS
			traceRuleApply("FUNC", 2311, "{| rule isKResult(`store_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fc015d39c3fa34fe267eb5539bb48f335e6e2c86f604f7e6010d7c7ee267220c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2312
	// source: ? @?
	// {| rule isKResult(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperand(K5)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),isKResult(K5))) ensures #token("true","Bool") [UNIQUE_ID(aca8a15094c8f64297137a41fea9212d5b99d28803bfc49403687fe877ceac25)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval2649, err2649 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2649 != nil {
			return m.NoResult, err2649
		}
		eval2650, err2650 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2650 != nil {
			return m.NoResult, err2650
		}
		eval2651, err2651 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2651 != nil {
			return m.NoResult, err2651
		}
		eval2652, err2652 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2652 != nil {
			return m.NoResult, err2652
		}
		eval2653, err2653 := evalIsOperand( // isOperand(K5)
			varK5,
			config, -1)
		if err2653 != nil {
			return m.NoResult, err2653
		}
		eval2654, err2654 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2654 != nil {
			return m.NoResult, err2654
		}
		eval2655, err2655 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2655 != nil {
			return m.NoResult, err2655
		}
		eval2656, err2656 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2656 != nil {
			return m.NoResult, err2656
		}
		eval2657, err2657 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2657 != nil {
			return m.NoResult, err2657
		}
		eval2658, err2658 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2658 != nil {
			return m.NoResult, err2658
		}
		eval2659, err2659 := evalIsKResult( // isKResult(K5)
			varK5,
			config, -1)
		if err2659 != nil {
			return m.NoResult, err2659
		}
		if ((((((m.IsTrue(eval2649)) &&
		   (m.IsTrue(eval2650))) &&
		   (m.IsTrue(eval2651))) &&
		   (m.IsTrue(eval2652))) &&
		   (m.IsTrue(eval2653))) &&
		   (m.IsTrue(eval2654))) &&
		   (((((m.IsTrue(eval2655)) &&
		   (m.IsTrue(eval2656))) &&
		   (m.IsTrue(eval2657))) &&
		   (m.IsTrue(eval2658))) &&
		   (m.IsTrue(eval2659))) {
			// RHS
			traceRuleApply("FUNC", 2312, "{| rule isKResult(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperand(K5)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),isKResult(K5))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aca8a15094c8f64297137a41fea9212d5b99d28803bfc49403687fe877ceac25)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2313
	// source: ? @?
	// {| rule isKResult(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECMULXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2313, "{| rule isKResult(`ECMUL_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2314
	// source: ? @?
	// {| rule isKResult(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(ef885b242130ca468639a971fd0063fe6c61fec12fdf414121a8cdad16702224)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2660, err2660 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2660 != nil {
			return m.NoResult, err2660
		}
		eval2661, err2661 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2661 != nil {
			return m.NoResult, err2661
		}
		eval2662, err2662 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2662 != nil {
			return m.NoResult, err2662
		}
		eval2663, err2663 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2663 != nil {
			return m.NoResult, err2663
		}
		eval2664, err2664 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2664 != nil {
			return m.NoResult, err2664
		}
		eval2665, err2665 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2665 != nil {
			return m.NoResult, err2665
		}
		eval2666, err2666 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2666 != nil {
			return m.NoResult, err2666
		}
		if ((((m.IsTrue(eval2660)) &&
		   (m.IsTrue(eval2661))) &&
		   (m.IsTrue(eval2662))) &&
		   (m.IsTrue(eval2663))) &&
		   (((m.IsTrue(eval2664)) &&
		   (m.IsTrue(eval2665))) &&
		   (m.IsTrue(eval2666))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2314, "{| rule isKResult(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ef885b242130ca468639a971fd0063fe6c61fec12fdf414121a8cdad16702224)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2315
	// source: ? @?
	// {| rule isKResult(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(08f323b074d6d532530b5510dc5b0f42648951dce76ea87117c82aadbe51083d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sext_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2667, err2667 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2667 != nil {
			return m.NoResult, err2667
		}
		eval2668, err2668 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2668 != nil {
			return m.NoResult, err2668
		}
		eval2669, err2669 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2669 != nil {
			return m.NoResult, err2669
		}
		eval2670, err2670 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2670 != nil {
			return m.NoResult, err2670
		}
		eval2671, err2671 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2671 != nil {
			return m.NoResult, err2671
		}
		if (((m.IsTrue(eval2667)) &&
		   (m.IsTrue(eval2668))) &&
		   (m.IsTrue(eval2669))) &&
		   ((m.IsTrue(eval2670)) &&
		   (m.IsTrue(eval2671))) {
			// RHS
			traceRuleApply("FUNC", 2315, "{| rule isKResult(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(08f323b074d6d532530b5510dc5b0f42648951dce76ea87117c82aadbe51083d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2316
	// source: ? @?
	// {| rule isKResult(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2316, "{| rule isKResult(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2317
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Type","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortType { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2317, "{| rule isKResult(#KToken(#token(\"Type\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2318
	// source: ? @?
	// {| rule isKResult(`int_IELE-WELL-FORMEDNESS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblIntXuIELEXhyphenWELLXhyphenFORMEDNESS && len(kapp0.List) == 0 { // `int_IELE-WELL-FORMEDNESS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2318, "{| rule isKResult(`int_IELE-WELL-FORMEDNESS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2319
	// source: ? @?
	// {| rule isKResult(`_=log2__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(8ea296bf37b53b4c22fbc90cfba824164c44a04814e3f26d12202c862b25a758)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqlog2XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=log2__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2672, err2672 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2672 != nil {
			return m.NoResult, err2672
		}
		eval2673, err2673 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2673 != nil {
			return m.NoResult, err2673
		}
		eval2674, err2674 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2674 != nil {
			return m.NoResult, err2674
		}
		if ((m.IsTrue(eval2672)) &&
		   (m.IsTrue(eval2673))) &&
		   (m.IsTrue(eval2674)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2319, "{| rule isKResult(`_=log2__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ea296bf37b53b4c22fbc90cfba824164c44a04814e3f26d12202c862b25a758)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2320
	// source: ? @?
	// {| rule isKResult(`_=iszero__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(f6c1c033672857929833cc9a5316dea7e72c2f0b5a8c9cac3a207a3d7dc63587)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=iszero__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2675, err2675 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2675 != nil {
			return m.NoResult, err2675
		}
		eval2676, err2676 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2676 != nil {
			return m.NoResult, err2676
		}
		eval2677, err2677 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2677 != nil {
			return m.NoResult, err2677
		}
		if ((m.IsTrue(eval2675)) &&
		   (m.IsTrue(eval2676))) &&
		   (m.IsTrue(eval2677)) {
			// RHS
			traceRuleApply("FUNC", 2320, "{| rule isKResult(`_=iszero__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f6c1c033672857929833cc9a5316dea7e72c2f0b5a8c9cac3a207a3d7dc63587)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2321
	// source: ? @?
	// {| rule isKResult(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperand(K5)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),isKResult(K5))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(aca8a15094c8f64297137a41fea9212d5b99d28803bfc49403687fe877ceac25)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		varK5 := kapp0.List[5] // lhs KVariable K5
		// REQUIRES
		eval2678, err2678 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2678 != nil {
			return m.NoResult, err2678
		}
		eval2679, err2679 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2679 != nil {
			return m.NoResult, err2679
		}
		eval2680, err2680 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2680 != nil {
			return m.NoResult, err2680
		}
		eval2681, err2681 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2681 != nil {
			return m.NoResult, err2681
		}
		eval2682, err2682 := evalIsOperand( // isOperand(K5)
			varK5,
			config, -1)
		if err2682 != nil {
			return m.NoResult, err2682
		}
		eval2683, err2683 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2683 != nil {
			return m.NoResult, err2683
		}
		eval2684, err2684 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2684 != nil {
			return m.NoResult, err2684
		}
		eval2685, err2685 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2685 != nil {
			return m.NoResult, err2685
		}
		eval2686, err2686 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2686 != nil {
			return m.NoResult, err2686
		}
		eval2687, err2687 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2687 != nil {
			return m.NoResult, err2687
		}
		eval2688, err2688 := evalIsKResult( // isKResult(K5)
			varK5,
			config, -1)
		if err2688 != nil {
			return m.NoResult, err2688
		}
		if ((((((m.IsTrue(eval2678)) &&
		   (m.IsTrue(eval2679))) &&
		   (m.IsTrue(eval2680))) &&
		   (m.IsTrue(eval2681))) &&
		   (m.IsTrue(eval2682))) &&
		   (m.IsTrue(eval2683))) &&
		   (((((m.IsTrue(eval2684)) &&
		   (m.IsTrue(eval2685))) &&
		   (m.IsTrue(eval2686))) &&
		   (m.IsTrue(eval2687))) &&
		   (m.IsTrue(eval2688))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2321, "{| rule isKResult(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperand(K5)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),isKResult(K5))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(aca8a15094c8f64297137a41fea9212d5b99d28803bfc49403687fe877ceac25)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2322
	// source: ? @?
	// {| rule isKResult(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isGlobalName(K1)),isKResult(K2)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(4d70cc86435cbf1b31973edefc4bc2ae03b275308631537b4cf3455f8030ec7b)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2689, err2689 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2689 != nil {
			return m.NoResult, err2689
		}
		eval2690, err2690 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2690 != nil {
			return m.NoResult, err2690
		}
		eval2691, err2691 := evalIsGlobalName( // isGlobalName(K1)
			varK1,
			config, -1)
		if err2691 != nil {
			return m.NoResult, err2691
		}
		eval2692, err2692 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2692 != nil {
			return m.NoResult, err2692
		}
		if (((m.IsTrue(eval2689)) &&
		   (m.IsTrue(eval2690))) &&
		   (m.IsTrue(eval2691))) &&
		   (m.IsTrue(eval2692)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2322, "{| rule isKResult(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isGlobalName(K1)),isKResult(K2)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4d70cc86435cbf1b31973edefc4bc2ae03b275308631537b4cf3455f8030ec7b)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2323
	// source: ? @?
	// {| rule isKResult(`store_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(fc015d39c3fa34fe267eb5539bb48f335e6e2c86f604f7e6010d7c7ee267220c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `store_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2693, err2693 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2693 != nil {
			return m.NoResult, err2693
		}
		eval2694, err2694 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2694 != nil {
			return m.NoResult, err2694
		}
		eval2695, err2695 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2695 != nil {
			return m.NoResult, err2695
		}
		eval2696, err2696 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2696 != nil {
			return m.NoResult, err2696
		}
		if ((m.IsTrue(eval2693)) &&
		   (m.IsTrue(eval2694))) &&
		   ((m.IsTrue(eval2695)) &&
		   (m.IsTrue(eval2696))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2323, "{| rule isKResult(`store_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fc015d39c3fa34fe267eb5539bb48f335e6e2c86f604f7e6010d7c7ee267220c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2324
	// source: ? @?
	// {| rule isKResult(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(f3f638fd8dec6e06deebcfc5fe866622f23619e899246b54476f3a8190e01778)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=bswap_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2697, err2697 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2697 != nil {
			return m.NoResult, err2697
		}
		eval2698, err2698 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2698 != nil {
			return m.NoResult, err2698
		}
		eval2699, err2699 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2699 != nil {
			return m.NoResult, err2699
		}
		eval2700, err2700 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2700 != nil {
			return m.NoResult, err2700
		}
		eval2701, err2701 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2701 != nil {
			return m.NoResult, err2701
		}
		if (((m.IsTrue(eval2697)) &&
		   (m.IsTrue(eval2698))) &&
		   (m.IsTrue(eval2699))) &&
		   ((m.IsTrue(eval2700)) &&
		   (m.IsTrue(eval2701))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2324, "{| rule isKResult(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f3f638fd8dec6e06deebcfc5fe866622f23619e899246b54476f3a8190e01778)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2325
	// source: ? @?
	// {| rule isKResult(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperands(K2)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(bbbb84b6f04c09441cb42ed66c816b3d4e40346a738f4697bfd7fbe983ccc5db)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2702, err2702 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2702 != nil {
			return m.NoResult, err2702
		}
		eval2703, err2703 := evalIsOperands( // isOperands(K2)
			varK2,
			config, -1)
		if err2703 != nil {
			return m.NoResult, err2703
		}
		eval2704, err2704 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2704 != nil {
			return m.NoResult, err2704
		}
		eval2705, err2705 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2705 != nil {
			return m.NoResult, err2705
		}
		eval2706, err2706 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2706 != nil {
			return m.NoResult, err2706
		}
		if (((m.IsTrue(eval2702)) &&
		   (m.IsTrue(eval2703))) &&
		   (m.IsTrue(eval2704))) &&
		   ((m.IsTrue(eval2705)) &&
		   (m.IsTrue(eval2706))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2325, "{| rule isKResult(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperands(K2)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bbbb84b6f04c09441cb42ed66c816b3d4e40346a738f4697bfd7fbe983ccc5db)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2326
	// source: ? @?
	// {| rule isKResult(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2326, "{| rule isKResult(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2327
	// source: ? @?
	// {| rule isKResult(#KToken(#token("AssignInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAssignInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2327, "{| rule isKResult(#KToken(#token(\"AssignInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2328
	// source: ? @?
	// {| rule isKResult(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(49ee4ff99c6a211955d739c16a9d00d227141c5baf0b222863eaf55867e1400b)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mod_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2707, err2707 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2707 != nil {
			return m.NoResult, err2707
		}
		eval2708, err2708 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2708 != nil {
			return m.NoResult, err2708
		}
		eval2709, err2709 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2709 != nil {
			return m.NoResult, err2709
		}
		eval2710, err2710 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2710 != nil {
			return m.NoResult, err2710
		}
		eval2711, err2711 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2711 != nil {
			return m.NoResult, err2711
		}
		if (((m.IsTrue(eval2707)) &&
		   (m.IsTrue(eval2708))) &&
		   (m.IsTrue(eval2709))) &&
		   ((m.IsTrue(eval2710)) &&
		   (m.IsTrue(eval2711))) {
			// RHS
			traceRuleApply("FUNC", 2328, "{| rule isKResult(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(49ee4ff99c6a211955d739c16a9d00d227141c5baf0b222863eaf55867e1400b)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2329
	// source: ? @?
	// {| rule isKResult(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(72e4c2ee6a0c5f12451b218b247da881b8635ae663718c1afe3f3d207a6d6425)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=byte_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2712, err2712 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2712 != nil {
			return m.NoResult, err2712
		}
		eval2713, err2713 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2713 != nil {
			return m.NoResult, err2713
		}
		eval2714, err2714 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2714 != nil {
			return m.NoResult, err2714
		}
		eval2715, err2715 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2715 != nil {
			return m.NoResult, err2715
		}
		eval2716, err2716 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2716 != nil {
			return m.NoResult, err2716
		}
		if (((m.IsTrue(eval2712)) &&
		   (m.IsTrue(eval2713))) &&
		   (m.IsTrue(eval2714))) &&
		   ((m.IsTrue(eval2715)) &&
		   (m.IsTrue(eval2716))) {
			// RHS
			traceRuleApply("FUNC", 2329, "{| rule isKResult(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(72e4c2ee6a0c5f12451b218b247da881b8635ae663718c1afe3f3d207a6d6425)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2330
	// source: ? @?
	// {| rule isKResult(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2330, "{| rule isKResult(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2331
	// source: ? @?
	// {| rule isKResult(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(df2f566f68720f87020a64578dfe8a46f2bf7725635705f317a8beb31c6c9285)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2717, err2717 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2717 != nil {
			return m.NoResult, err2717
		}
		eval2718, err2718 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2718 != nil {
			return m.NoResult, err2718
		}
		eval2719, err2719 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2719 != nil {
			return m.NoResult, err2719
		}
		eval2720, err2720 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2720 != nil {
			return m.NoResult, err2720
		}
		eval2721, err2721 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2721 != nil {
			return m.NoResult, err2721
		}
		eval2722, err2722 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2722 != nil {
			return m.NoResult, err2722
		}
		eval2723, err2723 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2723 != nil {
			return m.NoResult, err2723
		}
		eval2724, err2724 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2724 != nil {
			return m.NoResult, err2724
		}
		eval2725, err2725 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2725 != nil {
			return m.NoResult, err2725
		}
		if (((((m.IsTrue(eval2717)) &&
		   (m.IsTrue(eval2718))) &&
		   (m.IsTrue(eval2719))) &&
		   (m.IsTrue(eval2720))) &&
		   (m.IsTrue(eval2721))) &&
		   ((((m.IsTrue(eval2722)) &&
		   (m.IsTrue(eval2723))) &&
		   (m.IsTrue(eval2724))) &&
		   (m.IsTrue(eval2725))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2331, "{| rule isKResult(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(df2f566f68720f87020a64578dfe8a46f2bf7725635705f317a8beb31c6c9285)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2332
	// source: ? @?
	// {| rule isKResult(`br__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `br__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2726, err2726 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err2726 != nil {
			return m.NoResult, err2726
		}
		if m.IsTrue(eval2726) {
			// RHS
			traceRuleApply("FUNC", 2332, "{| rule isKResult(`br__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2333
	// source: ? @?
	// {| rule isKResult(`RIP160_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRIP160XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `RIP160_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2333, "{| rule isKResult(`RIP160_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2334
	// source: ? @?
	// {| rule isKResult(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(41bc7faa6c30fd8b63622856db0a5716112740d373793e126fa2ac0573ebc615)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=shift_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2727, err2727 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2727 != nil {
			return m.NoResult, err2727
		}
		eval2728, err2728 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2728 != nil {
			return m.NoResult, err2728
		}
		eval2729, err2729 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2729 != nil {
			return m.NoResult, err2729
		}
		eval2730, err2730 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2730 != nil {
			return m.NoResult, err2730
		}
		eval2731, err2731 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2731 != nil {
			return m.NoResult, err2731
		}
		if (((m.IsTrue(eval2727)) &&
		   (m.IsTrue(eval2728))) &&
		   (m.IsTrue(eval2729))) &&
		   ((m.IsTrue(eval2730)) &&
		   (m.IsTrue(eval2731))) {
			// RHS
			traceRuleApply("FUNC", 2334, "{| rule isKResult(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(41bc7faa6c30fd8b63622856db0a5716112740d373793e126fa2ac0573ebc615)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2335
	// source: ? @?
	// {| rule isKResult(#KToken(#token("PrecompiledOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPrecompiledOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2335, "{| rule isKResult(#KToken(#token(\"PrecompiledOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2336
	// source: ? @?
	// {| rule isKResult(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(c666d4e11793f4f97743cccea00be06fe5647217aa1c46663ad27b4dcea68023)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=div_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2732, err2732 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2732 != nil {
			return m.NoResult, err2732
		}
		eval2733, err2733 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2733 != nil {
			return m.NoResult, err2733
		}
		eval2734, err2734 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2734 != nil {
			return m.NoResult, err2734
		}
		eval2735, err2735 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2735 != nil {
			return m.NoResult, err2735
		}
		eval2736, err2736 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2736 != nil {
			return m.NoResult, err2736
		}
		if (((m.IsTrue(eval2732)) &&
		   (m.IsTrue(eval2733))) &&
		   (m.IsTrue(eval2734))) &&
		   ((m.IsTrue(eval2735)) &&
		   (m.IsTrue(eval2736))) {
			// RHS
			traceRuleApply("FUNC", 2336, "{| rule isKResult(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c666d4e11793f4f97743cccea00be06fe5647217aa1c46663ad27b4dcea68023)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2337
	// source: ? @?
	// {| rule isKResult(`ECADD_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECADDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECADD_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2337, "{| rule isKResult(`ECADD_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2338
	// source: ? @?
	// {| rule isKResult(#KToken(#token("NonEmptyInts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2338, "{| rule isKResult(#KToken(#token(\"NonEmptyInts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2339
	// source: ? @?
	// {| rule isKResult(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isOperand(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(37c85c764a04117003e2c6b6486e8446419a91299f32bc52433f6a7193ed8144)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2737, err2737 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2737 != nil {
			return m.NoResult, err2737
		}
		eval2738, err2738 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2738 != nil {
			return m.NoResult, err2738
		}
		eval2739, err2739 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2739 != nil {
			return m.NoResult, err2739
		}
		eval2740, err2740 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2740 != nil {
			return m.NoResult, err2740
		}
		eval2741, err2741 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2741 != nil {
			return m.NoResult, err2741
		}
		eval2742, err2742 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2742 != nil {
			return m.NoResult, err2742
		}
		eval2743, err2743 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2743 != nil {
			return m.NoResult, err2743
		}
		eval2744, err2744 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2744 != nil {
			return m.NoResult, err2744
		}
		if ((((m.IsTrue(eval2737)) &&
		   (m.IsTrue(eval2738))) &&
		   (m.IsTrue(eval2739))) &&
		   (m.IsTrue(eval2740))) &&
		   ((((m.IsTrue(eval2741)) &&
		   (m.IsTrue(eval2742))) &&
		   (m.IsTrue(eval2743))) &&
		   (m.IsTrue(eval2744))) {
			// RHS
			traceRuleApply("FUNC", 2339, "{| rule isKResult(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isOperand(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37c85c764a04117003e2c6b6486e8446419a91299f32bc52433f6a7193ed8144)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2340
	// source: ? @?
	// {| rule isKResult(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(8fc2ac11c20cc0499dc45e935d741cc2d23841620ae3cc318c4b0107bb48a035)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mul_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2745, err2745 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2745 != nil {
			return m.NoResult, err2745
		}
		eval2746, err2746 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2746 != nil {
			return m.NoResult, err2746
		}
		eval2747, err2747 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2747 != nil {
			return m.NoResult, err2747
		}
		eval2748, err2748 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2748 != nil {
			return m.NoResult, err2748
		}
		eval2749, err2749 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2749 != nil {
			return m.NoResult, err2749
		}
		if (((m.IsTrue(eval2745)) &&
		   (m.IsTrue(eval2746))) &&
		   (m.IsTrue(eval2747))) &&
		   ((m.IsTrue(eval2748)) &&
		   (m.IsTrue(eval2749))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2340, "{| rule isKResult(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8fc2ac11c20cc0499dc45e935d741cc2d23841620ae3cc318c4b0107bb48a035)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2341
	// source: ? @?
	// {| rule isKResult(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isGlobalName(K1)),isKResult(K2)) ensures #token("true","Bool") [UNIQUE_ID(4d70cc86435cbf1b31973edefc4bc2ae03b275308631537b4cf3455f8030ec7b)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=calladdress_at__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2750, err2750 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2750 != nil {
			return m.NoResult, err2750
		}
		eval2751, err2751 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2751 != nil {
			return m.NoResult, err2751
		}
		eval2752, err2752 := evalIsGlobalName( // isGlobalName(K1)
			varK1,
			config, -1)
		if err2752 != nil {
			return m.NoResult, err2752
		}
		eval2753, err2753 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2753 != nil {
			return m.NoResult, err2753
		}
		if (((m.IsTrue(eval2750)) &&
		   (m.IsTrue(eval2751))) &&
		   (m.IsTrue(eval2752))) &&
		   (m.IsTrue(eval2753)) {
			// RHS
			traceRuleApply("FUNC", 2341, "{| rule isKResult(`_=calladdress_at__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isGlobalName(K1)),isKResult(K2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4d70cc86435cbf1b31973edefc4bc2ae03b275308631537b4cf3455f8030ec7b)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2342
	// source: ? @?
	// {| rule isKResult(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperands(K2)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(bbbb84b6f04c09441cb42ed66c816b3d4e40346a738f4697bfd7fbe983ccc5db)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=call_(_)_IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2754, err2754 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2754 != nil {
			return m.NoResult, err2754
		}
		eval2755, err2755 := evalIsOperands( // isOperands(K2)
			varK2,
			config, -1)
		if err2755 != nil {
			return m.NoResult, err2755
		}
		eval2756, err2756 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2756 != nil {
			return m.NoResult, err2756
		}
		eval2757, err2757 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2757 != nil {
			return m.NoResult, err2757
		}
		eval2758, err2758 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2758 != nil {
			return m.NoResult, err2758
		}
		if (((m.IsTrue(eval2754)) &&
		   (m.IsTrue(eval2755))) &&
		   (m.IsTrue(eval2756))) &&
		   ((m.IsTrue(eval2757)) &&
		   (m.IsTrue(eval2758))) {
			// RHS
			traceRuleApply("FUNC", 2342, "{| rule isKResult(`_=call_(_)_IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValues(K0),isOperands(K2)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bbbb84b6f04c09441cb42ed66c816b3d4e40346a738f4697bfd7fbe983ccc5db)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2343
	// source: ? @?
	// {| rule isKResult(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(ec43f1339b29220dd0f527760f02b565eec2b400d468392f72f2231e6d137a07)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=xor_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2759, err2759 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2759 != nil {
			return m.NoResult, err2759
		}
		eval2760, err2760 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2760 != nil {
			return m.NoResult, err2760
		}
		eval2761, err2761 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2761 != nil {
			return m.NoResult, err2761
		}
		eval2762, err2762 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2762 != nil {
			return m.NoResult, err2762
		}
		eval2763, err2763 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2763 != nil {
			return m.NoResult, err2763
		}
		if (((m.IsTrue(eval2759)) &&
		   (m.IsTrue(eval2760))) &&
		   (m.IsTrue(eval2761))) &&
		   ((m.IsTrue(eval2762)) &&
		   (m.IsTrue(eval2763))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2343, "{| rule isKResult(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ec43f1339b29220dd0f527760f02b565eec2b400d468392f72f2231e6d137a07)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2344
	// source: ? @?
	// {| rule isKResult(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(c666d4e11793f4f97743cccea00be06fe5647217aa1c46663ad27b4dcea68023)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=div_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2764, err2764 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2764 != nil {
			return m.NoResult, err2764
		}
		eval2765, err2765 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2765 != nil {
			return m.NoResult, err2765
		}
		eval2766, err2766 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2766 != nil {
			return m.NoResult, err2766
		}
		eval2767, err2767 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2767 != nil {
			return m.NoResult, err2767
		}
		eval2768, err2768 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2768 != nil {
			return m.NoResult, err2768
		}
		if (((m.IsTrue(eval2764)) &&
		   (m.IsTrue(eval2765))) &&
		   (m.IsTrue(eval2766))) &&
		   ((m.IsTrue(eval2767)) &&
		   (m.IsTrue(eval2768))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2344, "{| rule isKResult(`_=div_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c666d4e11793f4f97743cccea00be06fe5647217aa1c46663ad27b4dcea68023)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2345
	// source: ? @?
	// {| rule isKResult(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(2eab8f4a49985e3acf1dfb6719b44c0783d48b4c5ff15d429ac262f27d751552)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=add_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2769, err2769 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2769 != nil {
			return m.NoResult, err2769
		}
		eval2770, err2770 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2770 != nil {
			return m.NoResult, err2770
		}
		eval2771, err2771 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2771 != nil {
			return m.NoResult, err2771
		}
		eval2772, err2772 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2772 != nil {
			return m.NoResult, err2772
		}
		eval2773, err2773 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2773 != nil {
			return m.NoResult, err2773
		}
		if (((m.IsTrue(eval2769)) &&
		   (m.IsTrue(eval2770))) &&
		   (m.IsTrue(eval2771))) &&
		   ((m.IsTrue(eval2772)) &&
		   (m.IsTrue(eval2773))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2345, "{| rule isKResult(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2eab8f4a49985e3acf1dfb6719b44c0783d48b4c5ff15d429ac262f27d751552)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2346
	// source: ? @?
	// {| rule isKResult(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(680b15fa9961da33d2f034118fa21b1b9def91b2a2d5ea4fe6c77905166720a9)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=exp_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2774, err2774 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2774 != nil {
			return m.NoResult, err2774
		}
		eval2775, err2775 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2775 != nil {
			return m.NoResult, err2775
		}
		eval2776, err2776 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2776 != nil {
			return m.NoResult, err2776
		}
		eval2777, err2777 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2777 != nil {
			return m.NoResult, err2777
		}
		eval2778, err2778 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2778 != nil {
			return m.NoResult, err2778
		}
		if (((m.IsTrue(eval2774)) &&
		   (m.IsTrue(eval2775))) &&
		   (m.IsTrue(eval2776))) &&
		   ((m.IsTrue(eval2777)) &&
		   (m.IsTrue(eval2778))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2346, "{| rule isKResult(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(680b15fa9961da33d2f034118fa21b1b9def91b2a2d5ea4fe6c77905166720a9)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2347
	// source: ? @?
	// {| rule isKResult(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(e2a0c61e9d03adc9262e5687d15e9a25a5613c0e11c9da9433566e400b33f8f9)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sub_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2779, err2779 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2779 != nil {
			return m.NoResult, err2779
		}
		eval2780, err2780 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2780 != nil {
			return m.NoResult, err2780
		}
		eval2781, err2781 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2781 != nil {
			return m.NoResult, err2781
		}
		eval2782, err2782 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2782 != nil {
			return m.NoResult, err2782
		}
		eval2783, err2783 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2783 != nil {
			return m.NoResult, err2783
		}
		if (((m.IsTrue(eval2779)) &&
		   (m.IsTrue(eval2780))) &&
		   (m.IsTrue(eval2781))) &&
		   ((m.IsTrue(eval2782)) &&
		   (m.IsTrue(eval2783))) {
			// RHS
			traceRuleApply("FUNC", 2347, "{| rule isKResult(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2a0c61e9d03adc9262e5687d15e9a25a5613c0e11c9da9433566e400b33f8f9)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2348
	// source: ? @?
	// {| rule isKResult(#KToken(#token("HexConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortHexConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2348, "{| rule isKResult(#KToken(#token(\"HexConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2349
	// source: ? @?
	// {| rule isKResult(`log__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token("true","Bool") [UNIQUE_ID(8c8635de706a0e8dd6a22aca42182e302772543ba9218dd4a811306e28b3716f)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `log__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2784, err2784 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2784 != nil {
			return m.NoResult, err2784
		}
		eval2785, err2785 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2785 != nil {
			return m.NoResult, err2785
		}
		if (m.IsTrue(eval2784)) &&
		   (m.IsTrue(eval2785)) {
			// RHS
			traceRuleApply("FUNC", 2349, "{| rule isKResult(`log__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c8635de706a0e8dd6a22aca42182e302772543ba9218dd4a811306e28b3716f)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2350
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2350, "{| rule isKResult(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2351
	// source: ? @?
	// {| rule isKResult(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K4),isIeleName(K2)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(isKResult(K3),isKResult(K4))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(eb35e0f41f194923636984b98c18bf1ada6e644e73a13e6c9f40b521824781c5)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2786, err2786 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2786 != nil {
			return m.NoResult, err2786
		}
		eval2787, err2787 := evalIsIeleName( // isIeleName(K2)
			varK2,
			config, -1)
		if err2787 != nil {
			return m.NoResult, err2787
		}
		eval2788, err2788 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2788 != nil {
			return m.NoResult, err2788
		}
		eval2789, err2789 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2789 != nil {
			return m.NoResult, err2789
		}
		eval2790, err2790 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2790 != nil {
			return m.NoResult, err2790
		}
		eval2791, err2791 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2791 != nil {
			return m.NoResult, err2791
		}
		eval2792, err2792 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2792 != nil {
			return m.NoResult, err2792
		}
		if (((((m.IsTrue(eval2786)) &&
		   (m.IsTrue(eval2787))) &&
		   (m.IsTrue(eval2788))) &&
		   (m.IsTrue(eval2789))) &&
		   (m.IsTrue(eval2790))) &&
		   ((m.IsTrue(eval2791)) &&
		   (m.IsTrue(eval2792))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2351, "{| rule isKResult(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K4),isIeleName(K2)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(isKResult(K3),isKResult(K4))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eb35e0f41f194923636984b98c18bf1ada6e644e73a13e6c9f40b521824781c5)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2352
	// source: ? @?
	// {| rule isKResult(`.List{"typeList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetypeListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"typeList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2352, "{| rule isKResult(`.List{\"typeList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2353
	// source: ? @?
	// {| rule isKResult(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),isKResult(K4))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(545ce4fa1e074fad45694d4bfff0e9fefcad39d0e256c51a9d4cc1d60508215c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2793, err2793 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2793 != nil {
			return m.NoResult, err2793
		}
		eval2794, err2794 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2794 != nil {
			return m.NoResult, err2794
		}
		eval2795, err2795 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2795 != nil {
			return m.NoResult, err2795
		}
		eval2796, err2796 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2796 != nil {
			return m.NoResult, err2796
		}
		eval2797, err2797 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2797 != nil {
			return m.NoResult, err2797
		}
		eval2798, err2798 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2798 != nil {
			return m.NoResult, err2798
		}
		eval2799, err2799 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2799 != nil {
			return m.NoResult, err2799
		}
		eval2800, err2800 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2800 != nil {
			return m.NoResult, err2800
		}
		if (((((m.IsTrue(eval2793)) &&
		   (m.IsTrue(eval2794))) &&
		   (m.IsTrue(eval2795))) &&
		   (m.IsTrue(eval2796))) &&
		   (m.IsTrue(eval2797))) &&
		   (((m.IsTrue(eval2798)) &&
		   (m.IsTrue(eval2799))) &&
		   (m.IsTrue(eval2800))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2353, "{| rule isKResult(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),isKResult(K4))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(545ce4fa1e074fad45694d4bfff0e9fefcad39d0e256c51a9d4cc1d60508215c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2354
	// source: ? @?
	// {| rule isKResult(`selfdestruct__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(eaf5efd80d56f6d8b8e96f5440b15f5977962bff5e7549cca1f0fda08f1028fa)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2801, err2801 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2801 != nil {
			return m.NoResult, err2801
		}
		eval2802, err2802 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2802 != nil {
			return m.NoResult, err2802
		}
		if (m.IsTrue(eval2801)) &&
		   (m.IsTrue(eval2802)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2354, "{| rule isKResult(`selfdestruct__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eaf5efd80d56f6d8b8e96f5440b15f5977962bff5e7549cca1f0fda08f1028fa)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2355
	// source: ? @?
	// {| rule isKResult(`SHA256_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHA256XuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `SHA256_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2355, "{| rule isKResult(`SHA256_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2356
	// source: ? @?
	// {| rule isKResult(`sstore_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token("true","Bool") [UNIQUE_ID(a36e9ba8cdacca985a4c1b1a70cab7c224cdbb370aef7af82e3c1f658e1a0adf)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSstoreXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `sstore_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2803, err2803 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2803 != nil {
			return m.NoResult, err2803
		}
		eval2804, err2804 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2804 != nil {
			return m.NoResult, err2804
		}
		eval2805, err2805 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2805 != nil {
			return m.NoResult, err2805
		}
		eval2806, err2806 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2806 != nil {
			return m.NoResult, err2806
		}
		if ((m.IsTrue(eval2803)) &&
		   (m.IsTrue(eval2804))) &&
		   ((m.IsTrue(eval2805)) &&
		   (m.IsTrue(eval2806))) {
			// RHS
			traceRuleApply("FUNC", 2356, "{| rule isKResult(`sstore_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K1)),`_andBool_`(isKResult(K0),isKResult(K1))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a36e9ba8cdacca985a4c1b1a70cab7c224cdbb370aef7af82e3c1f658e1a0adf)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2357
	// source: ? @?
	// {| rule isKResult(`ret__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(isNonEmptyOperands(K0),isKResult(K0)) ensures #token("true","Bool") [UNIQUE_ID(d01332eb4dd328064b76b3b80024e1d36d850c3a0b44052605a3121b0ee5915d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `ret__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2807, err2807 := evalIsNonEmptyOperands( // isNonEmptyOperands(K0)
			varK0,
			config, -1)
		if err2807 != nil {
			return m.NoResult, err2807
		}
		eval2808, err2808 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2808 != nil {
			return m.NoResult, err2808
		}
		if (m.IsTrue(eval2807)) &&
		   (m.IsTrue(eval2808)) {
			// RHS
			traceRuleApply("FUNC", 2357, "{| rule isKResult(`ret__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(isNonEmptyOperands(K0),isKResult(K0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d01332eb4dd328064b76b3b80024e1d36d850c3a0b44052605a3121b0ee5915d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2358
	// source: ? @?
	// {| rule isKResult(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(49ee4ff99c6a211955d739c16a9d00d227141c5baf0b222863eaf55867e1400b)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mod_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2809, err2809 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2809 != nil {
			return m.NoResult, err2809
		}
		eval2810, err2810 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2810 != nil {
			return m.NoResult, err2810
		}
		eval2811, err2811 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2811 != nil {
			return m.NoResult, err2811
		}
		eval2812, err2812 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2812 != nil {
			return m.NoResult, err2812
		}
		eval2813, err2813 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2813 != nil {
			return m.NoResult, err2813
		}
		if (((m.IsTrue(eval2809)) &&
		   (m.IsTrue(eval2810))) &&
		   (m.IsTrue(eval2811))) &&
		   ((m.IsTrue(eval2812)) &&
		   (m.IsTrue(eval2813))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2358, "{| rule isKResult(`_=mod_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(49ee4ff99c6a211955d739c16a9d00d227141c5baf0b222863eaf55867e1400b)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2359
	// source: ? @?
	// {| rule isKResult(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2359, "{| rule isKResult(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2360
	// source: ? @?
	// {| rule isKResult(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(72e4c2ee6a0c5f12451b218b247da881b8635ae663718c1afe3f3d207a6d6425)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=byte_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2814, err2814 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2814 != nil {
			return m.NoResult, err2814
		}
		eval2815, err2815 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2815 != nil {
			return m.NoResult, err2815
		}
		eval2816, err2816 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2816 != nil {
			return m.NoResult, err2816
		}
		eval2817, err2817 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2817 != nil {
			return m.NoResult, err2817
		}
		eval2818, err2818 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2818 != nil {
			return m.NoResult, err2818
		}
		if (((m.IsTrue(eval2814)) &&
		   (m.IsTrue(eval2815))) &&
		   (m.IsTrue(eval2816))) &&
		   ((m.IsTrue(eval2817)) &&
		   (m.IsTrue(eval2818))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2360, "{| rule isKResult(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(72e4c2ee6a0c5f12451b218b247da881b8635ae663718c1afe3f3d207a6d6425)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2361
	// source: ? @?
	// {| rule isKResult(`log_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(K1),isOperand(K0)),`_andBool_`(isKResult(K0),isKResult(K1))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(bafdcc8eb08fb98f55e842b5ea97b914d29735db28c0f74247968f8af1084b3e)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLogXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `log_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2819, err2819 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err2819 != nil {
			return m.NoResult, err2819
		}
		eval2820, err2820 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2820 != nil {
			return m.NoResult, err2820
		}
		eval2821, err2821 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2821 != nil {
			return m.NoResult, err2821
		}
		eval2822, err2822 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2822 != nil {
			return m.NoResult, err2822
		}
		if ((m.IsTrue(eval2819)) &&
		   (m.IsTrue(eval2820))) &&
		   ((m.IsTrue(eval2821)) &&
		   (m.IsTrue(eval2822))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2361, "{| rule isKResult(`log_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(K1),isOperand(K0)),`_andBool_`(isKResult(K0),isKResult(K1))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(bafdcc8eb08fb98f55e842b5ea97b914d29735db28c0f74247968f8af1084b3e)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2362
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Types","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypes { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2362, "{| rule isKResult(#KToken(#token(\"Types\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2363
	// source: ? @?
	// {| rule isKResult(`ECREC_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECRECXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECREC_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2363, "{| rule isKResult(`ECREC_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2364
	// source: ? @?
	// {| rule isKResult(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval2823, err2823 := evalIsInts( // isInts(K1)
				varK1,
				config, -1)
			if err2823 != nil {
				return m.NoResult, err2823
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval2823) {
				// RHS
				traceRuleApply("FUNC", 2364, "{| rule isKResult(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2365
	// source: ? @?
	// {| rule isKResult(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(ef885b242130ca468639a971fd0063fe6c61fec12fdf414121a8cdad16702224)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2824, err2824 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2824 != nil {
			return m.NoResult, err2824
		}
		eval2825, err2825 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2825 != nil {
			return m.NoResult, err2825
		}
		eval2826, err2826 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2826 != nil {
			return m.NoResult, err2826
		}
		eval2827, err2827 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2827 != nil {
			return m.NoResult, err2827
		}
		eval2828, err2828 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2828 != nil {
			return m.NoResult, err2828
		}
		eval2829, err2829 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2829 != nil {
			return m.NoResult, err2829
		}
		eval2830, err2830 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2830 != nil {
			return m.NoResult, err2830
		}
		if ((((m.IsTrue(eval2824)) &&
		   (m.IsTrue(eval2825))) &&
		   (m.IsTrue(eval2826))) &&
		   (m.IsTrue(eval2827))) &&
		   (((m.IsTrue(eval2828)) &&
		   (m.IsTrue(eval2829))) &&
		   (m.IsTrue(eval2830))) {
			// RHS
			traceRuleApply("FUNC", 2365, "{| rule isKResult(`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ef885b242130ca468639a971fd0063fe6c61fec12fdf414121a8cdad16702224)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2366
	// source: ? @?
	// {| rule isKResult(`_=__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2831, err2831 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2831 != nil {
			return m.NoResult, err2831
		}
		eval2832, err2832 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2832 != nil {
			return m.NoResult, err2832
		}
		if (m.IsTrue(eval2831)) &&
		   (m.IsTrue(eval2832)) {
			// RHS
			traceRuleApply("FUNC", 2366, "{| rule isKResult(`_=__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2367
	// source: ? @?
	// {| rule isKResult(`revert__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(63b17b72f25ec6b5ef24e5ea1ec31bd26b91d893e053e2083a53b454d0305aaf)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRevertXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `revert__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2833, err2833 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2833 != nil {
			return m.NoResult, err2833
		}
		eval2834, err2834 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2834 != nil {
			return m.NoResult, err2834
		}
		if (m.IsTrue(eval2833)) &&
		   (m.IsTrue(eval2834)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2367, "{| rule isKResult(`revert__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isOperand(K0),isKResult(K0)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63b17b72f25ec6b5ef24e5ea1ec31bd26b91d893e053e2083a53b454d0305aaf)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2368
	// source: ? @?
	// {| rule isKResult(#KToken(#token("KResult","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortKResult { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2368, "{| rule isKResult(#KToken(#token(\"KResult\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2369
	// source: ? @?
	// {| rule isKResult(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K4),isIeleName(K2)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(isKResult(K3),isKResult(K4))) ensures #token("true","Bool") [UNIQUE_ID(eb35e0f41f194923636984b98c18bf1ada6e644e73a13e6c9f40b521824781c5)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2835, err2835 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2835 != nil {
			return m.NoResult, err2835
		}
		eval2836, err2836 := evalIsIeleName( // isIeleName(K2)
			varK2,
			config, -1)
		if err2836 != nil {
			return m.NoResult, err2836
		}
		eval2837, err2837 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2837 != nil {
			return m.NoResult, err2837
		}
		eval2838, err2838 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2838 != nil {
			return m.NoResult, err2838
		}
		eval2839, err2839 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2839 != nil {
			return m.NoResult, err2839
		}
		eval2840, err2840 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2840 != nil {
			return m.NoResult, err2840
		}
		eval2841, err2841 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2841 != nil {
			return m.NoResult, err2841
		}
		if (((((m.IsTrue(eval2835)) &&
		   (m.IsTrue(eval2836))) &&
		   (m.IsTrue(eval2837))) &&
		   (m.IsTrue(eval2838))) &&
		   (m.IsTrue(eval2839))) &&
		   ((m.IsTrue(eval2840)) &&
		   (m.IsTrue(eval2841))) {
			// RHS
			traceRuleApply("FUNC", 2369, "{| rule isKResult(`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K4),isIeleName(K2)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(isKResult(K3),isKResult(K4))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eb35e0f41f194923636984b98c18bf1ada6e644e73a13e6c9f40b521824781c5)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2370
	// source: ? @?
	// {| rule isKResult(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2370, "{| rule isKResult(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2371
	// source: ? @?
	// {| rule isKResult(`_=sload__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(2c86bf93ced7692a7409844d843813adc2c9e4f6cc8ca0953043f29303065b01)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sload__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2842, err2842 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2842 != nil {
			return m.NoResult, err2842
		}
		eval2843, err2843 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2843 != nil {
			return m.NoResult, err2843
		}
		eval2844, err2844 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2844 != nil {
			return m.NoResult, err2844
		}
		if ((m.IsTrue(eval2842)) &&
		   (m.IsTrue(eval2843))) &&
		   (m.IsTrue(eval2844)) {
			// RHS
			traceRuleApply("FUNC", 2371, "{| rule isKResult(`_=sload__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c86bf93ced7692a7409844d843813adc2c9e4f6cc8ca0953043f29303065b01)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2372
	// source: ? @?
	// {| rule isKResult(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2372, "{| rule isKResult(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2373
	// source: ? @?
	// {| rule isKResult(`_=sha3__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(0c84927e1c1762ceb59e1b25a419eb553fb0f880ea4e34d426ee70ba8f7a1c75)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2845, err2845 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2845 != nil {
			return m.NoResult, err2845
		}
		eval2846, err2846 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2846 != nil {
			return m.NoResult, err2846
		}
		eval2847, err2847 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2847 != nil {
			return m.NoResult, err2847
		}
		if ((m.IsTrue(eval2845)) &&
		   (m.IsTrue(eval2846))) &&
		   (m.IsTrue(eval2847)) {
			// RHS
			traceRuleApply("FUNC", 2373, "{| rule isKResult(`_=sha3__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c84927e1c1762ceb59e1b25a419eb553fb0f880ea4e34d426ee70ba8f7a1c75)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2374
	// source: ? @?
	// {| rule isKResult(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(ec43f1339b29220dd0f527760f02b565eec2b400d468392f72f2231e6d137a07)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=xor_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2848, err2848 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2848 != nil {
			return m.NoResult, err2848
		}
		eval2849, err2849 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2849 != nil {
			return m.NoResult, err2849
		}
		eval2850, err2850 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2850 != nil {
			return m.NoResult, err2850
		}
		eval2851, err2851 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2851 != nil {
			return m.NoResult, err2851
		}
		eval2852, err2852 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2852 != nil {
			return m.NoResult, err2852
		}
		if (((m.IsTrue(eval2848)) &&
		   (m.IsTrue(eval2849))) &&
		   (m.IsTrue(eval2850))) &&
		   ((m.IsTrue(eval2851)) &&
		   (m.IsTrue(eval2852))) {
			// RHS
			traceRuleApply("FUNC", 2374, "{| rule isKResult(`_=xor_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ec43f1339b29220dd0f527760f02b565eec2b400d468392f72f2231e6d137a07)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2375
	// source: ? @?
	// {| rule isKResult(#KToken(#token("GlobalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2375, "{| rule isKResult(#KToken(#token(\"GlobalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2376
	// source: ? @?
	// {| rule isKResult(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2376, "{| rule isKResult(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2377
	// source: ? @?
	// {| rule isKResult(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblECPAIRINGXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2377, "{| rule isKResult(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2378
	// source: ? @?
	// {| rule isKResult(#KToken(#token("IntConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIntConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2378, "{| rule isKResult(#KToken(#token(\"IntConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2379
	// source: ? @?
	// {| rule isKResult(`ID_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblIDXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `ID_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2379, "{| rule isKResult(`ID_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2380
	// source: ? @?
	// {| rule isKResult(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2380, "{| rule isKResult(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2381
	// source: ? @?
	// {| rule isKResult(typeList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTypeList && len(kapp0.List) == 2 { // typeList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2853, err2853 := evalIsType( // isType(K0)
			varK0,
			config, -1)
		if err2853 != nil {
			return m.NoResult, err2853
		}
		eval2854, err2854 := evalIsTypes( // isTypes(K1)
			varK1,
			config, -1)
		if err2854 != nil {
			return m.NoResult, err2854
		}
		if (m.IsTrue(eval2853)) &&
		   (m.IsTrue(eval2854)) {
			// RHS
			traceRuleApply("FUNC", 2381, "{| rule isKResult(typeList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2382
	// source: ? @?
	// {| rule isKResult(`_=iszero__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(f6c1c033672857929833cc9a5316dea7e72c2f0b5a8c9cac3a207a3d7dc63587)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqiszeroXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=iszero__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2855, err2855 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2855 != nil {
			return m.NoResult, err2855
		}
		eval2856, err2856 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2856 != nil {
			return m.NoResult, err2856
		}
		eval2857, err2857 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2857 != nil {
			return m.NoResult, err2857
		}
		if ((m.IsTrue(eval2855)) &&
		   (m.IsTrue(eval2856))) &&
		   (m.IsTrue(eval2857)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2382, "{| rule isKResult(`_=iszero__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f6c1c033672857929833cc9a5316dea7e72c2f0b5a8c9cac3a207a3d7dc63587)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2383
	// source: ? @?
	// {| rule isKResult(`@__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `@__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2858, err2858 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err2858 != nil {
			return m.NoResult, err2858
		}
		if m.IsTrue(eval2858) {
			// RHS
			traceRuleApply("FUNC", 2383, "{| rule isKResult(`@__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2384
	// source: ? @?
	// {| rule isKResult(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4))) ensures #token("true","Bool") [UNIQUE_ID(df2f566f68720f87020a64578dfe8a46f2bf7725635705f317a8beb31c6c9285)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2859, err2859 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2859 != nil {
			return m.NoResult, err2859
		}
		eval2860, err2860 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2860 != nil {
			return m.NoResult, err2860
		}
		eval2861, err2861 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err2861 != nil {
			return m.NoResult, err2861
		}
		eval2862, err2862 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2862 != nil {
			return m.NoResult, err2862
		}
		eval2863, err2863 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2863 != nil {
			return m.NoResult, err2863
		}
		eval2864, err2864 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2864 != nil {
			return m.NoResult, err2864
		}
		eval2865, err2865 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2865 != nil {
			return m.NoResult, err2865
		}
		eval2866, err2866 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2866 != nil {
			return m.NoResult, err2866
		}
		eval2867, err2867 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2867 != nil {
			return m.NoResult, err2867
		}
		if (((((m.IsTrue(eval2859)) &&
		   (m.IsTrue(eval2860))) &&
		   (m.IsTrue(eval2861))) &&
		   (m.IsTrue(eval2862))) &&
		   (m.IsTrue(eval2863))) &&
		   ((((m.IsTrue(eval2864)) &&
		   (m.IsTrue(eval2865))) &&
		   (m.IsTrue(eval2866))) &&
		   (m.IsTrue(eval2867))) {
			// RHS
			traceRuleApply("FUNC", 2384, "{| rule isKResult(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValues(K0)),isOperand(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(df2f566f68720f87020a64578dfe8a46f2bf7725635705f317a8beb31c6c9285)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2385
	// source: ? @?
	// {| rule isKResult(`revert__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token("true","Bool") [UNIQUE_ID(63b17b72f25ec6b5ef24e5ea1ec31bd26b91d893e053e2083a53b454d0305aaf)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRevertXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `revert__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2868, err2868 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2868 != nil {
			return m.NoResult, err2868
		}
		eval2869, err2869 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2869 != nil {
			return m.NoResult, err2869
		}
		if (m.IsTrue(eval2868)) &&
		   (m.IsTrue(eval2869)) {
			// RHS
			traceRuleApply("FUNC", 2385, "{| rule isKResult(`revert__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(63b17b72f25ec6b5ef24e5ea1ec31bd26b91d893e053e2083a53b454d0305aaf)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2386
	// source: ? @?
	// {| rule isKResult(`br_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(K1),isOperand(K0)),isKResult(K0)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(57d387d2aec7ad4e60799a6f9bb3b93210952d33389b85af1496a0528e701230)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `br_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2870, err2870 := evalIsIeleName( // isIeleName(K1)
			varK1,
			config, -1)
		if err2870 != nil {
			return m.NoResult, err2870
		}
		eval2871, err2871 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2871 != nil {
			return m.NoResult, err2871
		}
		eval2872, err2872 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2872 != nil {
			return m.NoResult, err2872
		}
		if ((m.IsTrue(eval2870)) &&
		   (m.IsTrue(eval2871))) &&
		   (m.IsTrue(eval2872)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2386, "{| rule isKResult(`br_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(K1),isOperand(K0)),isKResult(K0)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57d387d2aec7ad4e60799a6f9bb3b93210952d33389b85af1496a0528e701230)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2387
	// source: ? @?
	// {| rule isKResult(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(8fc2ac11c20cc0499dc45e935d741cc2d23841620ae3cc318c4b0107bb48a035)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=mul_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2873, err2873 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2873 != nil {
			return m.NoResult, err2873
		}
		eval2874, err2874 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2874 != nil {
			return m.NoResult, err2874
		}
		eval2875, err2875 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2875 != nil {
			return m.NoResult, err2875
		}
		eval2876, err2876 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2876 != nil {
			return m.NoResult, err2876
		}
		eval2877, err2877 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2877 != nil {
			return m.NoResult, err2877
		}
		if (((m.IsTrue(eval2873)) &&
		   (m.IsTrue(eval2874))) &&
		   (m.IsTrue(eval2875))) &&
		   ((m.IsTrue(eval2876)) &&
		   (m.IsTrue(eval2877))) {
			// RHS
			traceRuleApply("FUNC", 2387, "{| rule isKResult(`_=mul_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8fc2ac11c20cc0499dc45e935d741cc2d23841620ae3cc318c4b0107bb48a035)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2388
	// source: ? @?
	// {| rule isKResult(`selfdestruct__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token("true","Bool") [UNIQUE_ID(eaf5efd80d56f6d8b8e96f5440b15f5977962bff5e7549cca1f0fda08f1028fa)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSelfdestructXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `selfdestruct__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2878, err2878 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2878 != nil {
			return m.NoResult, err2878
		}
		eval2879, err2879 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2879 != nil {
			return m.NoResult, err2879
		}
		if (m.IsTrue(eval2878)) &&
		   (m.IsTrue(eval2879)) {
			// RHS
			traceRuleApply("FUNC", 2388, "{| rule isKResult(`selfdestruct__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isKResult(K0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eaf5efd80d56f6d8b8e96f5440b15f5977962bff5e7549cca1f0fda08f1028fa)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2389
	// source: ? @?
	// {| rule isKResult(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(c76eb987b7cf127172fda3d6bb1480376e8e2c9cf5c491b3f1e9d45256f45753)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=and_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2880, err2880 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2880 != nil {
			return m.NoResult, err2880
		}
		eval2881, err2881 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2881 != nil {
			return m.NoResult, err2881
		}
		eval2882, err2882 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2882 != nil {
			return m.NoResult, err2882
		}
		eval2883, err2883 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2883 != nil {
			return m.NoResult, err2883
		}
		eval2884, err2884 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2884 != nil {
			return m.NoResult, err2884
		}
		if (((m.IsTrue(eval2880)) &&
		   (m.IsTrue(eval2881))) &&
		   (m.IsTrue(eval2882))) &&
		   ((m.IsTrue(eval2883)) &&
		   (m.IsTrue(eval2884))) {
			// RHS
			traceRuleApply("FUNC", 2389, "{| rule isKResult(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c76eb987b7cf127172fda3d6bb1480376e8e2c9cf5c491b3f1e9d45256f45753)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2390
	// source: ? @?
	// {| rule isKResult(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(7893e07cf5e398208f24df03af2be35501770b08482d48352683f3b5a847cb23)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2885, err2885 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2885 != nil {
			return m.NoResult, err2885
		}
		eval2886, err2886 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2886 != nil {
			return m.NoResult, err2886
		}
		eval2887, err2887 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2887 != nil {
			return m.NoResult, err2887
		}
		eval2888, err2888 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2888 != nil {
			return m.NoResult, err2888
		}
		eval2889, err2889 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2889 != nil {
			return m.NoResult, err2889
		}
		eval2890, err2890 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2890 != nil {
			return m.NoResult, err2890
		}
		eval2891, err2891 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2891 != nil {
			return m.NoResult, err2891
		}
		if ((((m.IsTrue(eval2885)) &&
		   (m.IsTrue(eval2886))) &&
		   (m.IsTrue(eval2887))) &&
		   (m.IsTrue(eval2888))) &&
		   (((m.IsTrue(eval2889)) &&
		   (m.IsTrue(eval2890))) &&
		   (m.IsTrue(eval2891))) {
			// RHS
			traceRuleApply("FUNC", 2390, "{| rule isKResult(`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7893e07cf5e398208f24df03af2be35501770b08482d48352683f3b5a847cb23)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2391
	// source: ? @?
	// {| rule isKResult(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isPredicate(K1)),`_andBool_`(isKResult(K2),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(0222c87180b99257aba40476e103204746901b377df8873fee01936459e9d18d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=cmp__,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2892, err2892 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2892 != nil {
			return m.NoResult, err2892
		}
		eval2893, err2893 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2893 != nil {
			return m.NoResult, err2893
		}
		eval2894, err2894 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2894 != nil {
			return m.NoResult, err2894
		}
		eval2895, err2895 := evalIsPredicate( // isPredicate(K1)
			varK1,
			config, -1)
		if err2895 != nil {
			return m.NoResult, err2895
		}
		eval2896, err2896 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2896 != nil {
			return m.NoResult, err2896
		}
		eval2897, err2897 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2897 != nil {
			return m.NoResult, err2897
		}
		if ((((m.IsTrue(eval2892)) &&
		   (m.IsTrue(eval2893))) &&
		   (m.IsTrue(eval2894))) &&
		   (m.IsTrue(eval2895))) &&
		   ((m.IsTrue(eval2896)) &&
		   (m.IsTrue(eval2897))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2391, "{| rule isKResult(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isPredicate(K1)),`_andBool_`(isKResult(K2),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0222c87180b99257aba40476e103204746901b377df8873fee01936459e9d18d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2392
	// source: ? @?
	// {| rule isKResult(`ret__IELE-COMMON`(K0))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isNonEmptyOperands(K0),isKResult(K0)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(d01332eb4dd328064b76b3b80024e1d36d850c3a0b44052605a3121b0ee5915d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRetXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `ret__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval2898, err2898 := evalIsNonEmptyOperands( // isNonEmptyOperands(K0)
			varK0,
			config, -1)
		if err2898 != nil {
			return m.NoResult, err2898
		}
		eval2899, err2899 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2899 != nil {
			return m.NoResult, err2899
		}
		if (m.IsTrue(eval2898)) &&
		   (m.IsTrue(eval2899)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2392, "{| rule isKResult(`ret__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isNonEmptyOperands(K0),isKResult(K0)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d01332eb4dd328064b76b3b80024e1d36d850c3a0b44052605a3121b0ee5915d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2393
	// source: ? @?
	// {| rule isKResult(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2393, "{| rule isKResult(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2394
	// source: ? @?
	// {| rule isKResult(`_=sload__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(2c86bf93ced7692a7409844d843813adc2c9e4f6cc8ca0953043f29303065b01)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sload__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2900, err2900 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2900 != nil {
			return m.NoResult, err2900
		}
		eval2901, err2901 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2901 != nil {
			return m.NoResult, err2901
		}
		eval2902, err2902 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2902 != nil {
			return m.NoResult, err2902
		}
		if ((m.IsTrue(eval2900)) &&
		   (m.IsTrue(eval2901))) &&
		   (m.IsTrue(eval2902)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2394, "{| rule isKResult(`_=sload__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2c86bf93ced7692a7409844d843813adc2c9e4f6cc8ca0953043f29303065b01)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2395
	// source: ? @?
	// {| rule isKResult(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(2eab8f4a49985e3acf1dfb6719b44c0783d48b4c5ff15d429ac262f27d751552)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=add_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2903, err2903 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2903 != nil {
			return m.NoResult, err2903
		}
		eval2904, err2904 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2904 != nil {
			return m.NoResult, err2904
		}
		eval2905, err2905 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2905 != nil {
			return m.NoResult, err2905
		}
		eval2906, err2906 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2906 != nil {
			return m.NoResult, err2906
		}
		eval2907, err2907 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2907 != nil {
			return m.NoResult, err2907
		}
		if (((m.IsTrue(eval2903)) &&
		   (m.IsTrue(eval2904))) &&
		   (m.IsTrue(eval2905))) &&
		   ((m.IsTrue(eval2906)) &&
		   (m.IsTrue(eval2907))) {
			// RHS
			traceRuleApply("FUNC", 2395, "{| rule isKResult(`_=add_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2eab8f4a49985e3acf1dfb6719b44c0783d48b4c5ff15d429ac262f27d751552)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2396
	// source: ? @?
	// {| rule isKResult(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(e2a0c61e9d03adc9262e5687d15e9a25a5613c0e11c9da9433566e400b33f8f9)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sub_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2908, err2908 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2908 != nil {
			return m.NoResult, err2908
		}
		eval2909, err2909 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2909 != nil {
			return m.NoResult, err2909
		}
		eval2910, err2910 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2910 != nil {
			return m.NoResult, err2910
		}
		eval2911, err2911 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2911 != nil {
			return m.NoResult, err2911
		}
		eval2912, err2912 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2912 != nil {
			return m.NoResult, err2912
		}
		if (((m.IsTrue(eval2908)) &&
		   (m.IsTrue(eval2909))) &&
		   (m.IsTrue(eval2910))) &&
		   ((m.IsTrue(eval2911)) &&
		   (m.IsTrue(eval2912))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2396, "{| rule isKResult(`_=sub_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e2a0c61e9d03adc9262e5687d15e9a25a5613c0e11c9da9433566e400b33f8f9)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2397
	// source: ? @?
	// {| rule isKResult(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(c76eb987b7cf127172fda3d6bb1480376e8e2c9cf5c491b3f1e9d45256f45753)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=and_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2913, err2913 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2913 != nil {
			return m.NoResult, err2913
		}
		eval2914, err2914 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2914 != nil {
			return m.NoResult, err2914
		}
		eval2915, err2915 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2915 != nil {
			return m.NoResult, err2915
		}
		eval2916, err2916 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2916 != nil {
			return m.NoResult, err2916
		}
		eval2917, err2917 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2917 != nil {
			return m.NoResult, err2917
		}
		if (((m.IsTrue(eval2913)) &&
		   (m.IsTrue(eval2914))) &&
		   (m.IsTrue(eval2915))) &&
		   ((m.IsTrue(eval2916)) &&
		   (m.IsTrue(eval2917))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2397, "{| rule isKResult(`_=and_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c76eb987b7cf127172fda3d6bb1480376e8e2c9cf5c491b3f1e9d45256f45753)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2398
	// source: ? @?
	// {| rule isKResult(`_=not__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(4f50ed26023389a226aa566ffa668be24d353924aa6a44ac56b095b3593b6f3a)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqnotXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=not__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2918, err2918 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2918 != nil {
			return m.NoResult, err2918
		}
		eval2919, err2919 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2919 != nil {
			return m.NoResult, err2919
		}
		eval2920, err2920 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2920 != nil {
			return m.NoResult, err2920
		}
		if ((m.IsTrue(eval2918)) &&
		   (m.IsTrue(eval2919))) &&
		   (m.IsTrue(eval2920)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2398, "{| rule isKResult(`_=not__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f50ed26023389a226aa566ffa668be24d353924aa6a44ac56b095b3593b6f3a)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2399
	// source: ? @?
	// {| rule isKResult(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(832a7e51f048113d9b0b74523b80a81e76bbefceae647458250a2eb28b06b5ee)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=twos_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2921, err2921 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2921 != nil {
			return m.NoResult, err2921
		}
		eval2922, err2922 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2922 != nil {
			return m.NoResult, err2922
		}
		eval2923, err2923 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2923 != nil {
			return m.NoResult, err2923
		}
		eval2924, err2924 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2924 != nil {
			return m.NoResult, err2924
		}
		eval2925, err2925 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2925 != nil {
			return m.NoResult, err2925
		}
		if (((m.IsTrue(eval2921)) &&
		   (m.IsTrue(eval2922))) &&
		   (m.IsTrue(eval2923))) &&
		   ((m.IsTrue(eval2924)) &&
		   (m.IsTrue(eval2925))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2399, "{| rule isKResult(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(832a7e51f048113d9b0b74523b80a81e76bbefceae647458250a2eb28b06b5ee)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2400
	// source: ? @?
	// {| rule isKResult(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(4defb41ec34aee80c57a71dcddea01c1d97b25c01ba0e26aa5bf713e6ed32011)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=or_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2926, err2926 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2926 != nil {
			return m.NoResult, err2926
		}
		eval2927, err2927 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2927 != nil {
			return m.NoResult, err2927
		}
		eval2928, err2928 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2928 != nil {
			return m.NoResult, err2928
		}
		eval2929, err2929 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2929 != nil {
			return m.NoResult, err2929
		}
		eval2930, err2930 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2930 != nil {
			return m.NoResult, err2930
		}
		if (((m.IsTrue(eval2926)) &&
		   (m.IsTrue(eval2927))) &&
		   (m.IsTrue(eval2928))) &&
		   ((m.IsTrue(eval2929)) &&
		   (m.IsTrue(eval2930))) {
			// RHS
			traceRuleApply("FUNC", 2400, "{| rule isKResult(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4defb41ec34aee80c57a71dcddea01c1d97b25c01ba0e26aa5bf713e6ed32011)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2401
	// source: ? @?
	// {| rule isKResult(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(08f323b074d6d532530b5510dc5b0f42648951dce76ea87117c82aadbe51083d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=sext_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2931, err2931 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2931 != nil {
			return m.NoResult, err2931
		}
		eval2932, err2932 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2932 != nil {
			return m.NoResult, err2932
		}
		eval2933, err2933 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2933 != nil {
			return m.NoResult, err2933
		}
		eval2934, err2934 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2934 != nil {
			return m.NoResult, err2934
		}
		eval2935, err2935 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2935 != nil {
			return m.NoResult, err2935
		}
		if (((m.IsTrue(eval2931)) &&
		   (m.IsTrue(eval2932))) &&
		   (m.IsTrue(eval2933))) &&
		   ((m.IsTrue(eval2934)) &&
		   (m.IsTrue(eval2935))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2401, "{| rule isKResult(`_=sext_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(08f323b074d6d532530b5510dc5b0f42648951dce76ea87117c82aadbe51083d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2402
	// source: ? @?
	// {| rule isKResult(#KToken(#token("Constant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2402, "{| rule isKResult(#KToken(#token(\"Constant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2403
	// source: ? @?
	// {| rule isKResult(`_=log2__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token("true","Bool") [UNIQUE_ID(8ea296bf37b53b4c22fbc90cfba824164c44a04814e3f26d12202c862b25a758)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqlog2XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=log2__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2936, err2936 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2936 != nil {
			return m.NoResult, err2936
		}
		eval2937, err2937 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2937 != nil {
			return m.NoResult, err2937
		}
		eval2938, err2938 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2938 != nil {
			return m.NoResult, err2938
		}
		if ((m.IsTrue(eval2936)) &&
		   (m.IsTrue(eval2937))) &&
		   (m.IsTrue(eval2938)) {
			// RHS
			traceRuleApply("FUNC", 2403, "{| rule isKResult(`_=log2__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8ea296bf37b53b4c22fbc90cfba824164c44a04814e3f26d12202c862b25a758)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2404
	// source: ? @?
	// {| rule isKResult(`br_,__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(K0)),isKResult(K0)) ensures #token("true","Bool") [UNIQUE_ID(57d387d2aec7ad4e60799a6f9bb3b93210952d33389b85af1496a0528e701230)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBrXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `br_,__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2939, err2939 := evalIsIeleName( // isIeleName(K1)
			varK1,
			config, -1)
		if err2939 != nil {
			return m.NoResult, err2939
		}
		eval2940, err2940 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2940 != nil {
			return m.NoResult, err2940
		}
		eval2941, err2941 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2941 != nil {
			return m.NoResult, err2941
		}
		if ((m.IsTrue(eval2939)) &&
		   (m.IsTrue(eval2940))) &&
		   (m.IsTrue(eval2941)) {
			// RHS
			traceRuleApply("FUNC", 2404, "{| rule isKResult(`br_,__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(K0)),isKResult(K0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(57d387d2aec7ad4e60799a6f9bb3b93210952d33389b85af1496a0528e701230)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2405
	// source: ? @?
	// {| rule isKResult(#KToken(#token("JumpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortJumpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2405, "{| rule isKResult(#KToken(#token(\"JumpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2406
	// source: ? @?
	// {| rule isKResult(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),isKResult(K4))) ensures #token("true","Bool") [UNIQUE_ID(545ce4fa1e074fad45694d4bfff0e9fefcad39d0e256c51a9d4cc1d60508215c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON && len(kapp0.List) == 5 { // `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval2942, err2942 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2942 != nil {
			return m.NoResult, err2942
		}
		eval2943, err2943 := evalIsOperand( // isOperand(K4)
			varK4,
			config, -1)
		if err2943 != nil {
			return m.NoResult, err2943
		}
		eval2944, err2944 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2944 != nil {
			return m.NoResult, err2944
		}
		eval2945, err2945 := evalIsLValue( // isLValue(K1)
			varK1,
			config, -1)
		if err2945 != nil {
			return m.NoResult, err2945
		}
		eval2946, err2946 := evalIsOperands( // isOperands(K3)
			varK3,
			config, -1)
		if err2946 != nil {
			return m.NoResult, err2946
		}
		eval2947, err2947 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2947 != nil {
			return m.NoResult, err2947
		}
		eval2948, err2948 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2948 != nil {
			return m.NoResult, err2948
		}
		eval2949, err2949 := evalIsKResult( // isKResult(K4)
			varK4,
			config, -1)
		if err2949 != nil {
			return m.NoResult, err2949
		}
		if (((((m.IsTrue(eval2942)) &&
		   (m.IsTrue(eval2943))) &&
		   (m.IsTrue(eval2944))) &&
		   (m.IsTrue(eval2945))) &&
		   (m.IsTrue(eval2946))) &&
		   (((m.IsTrue(eval2947)) &&
		   (m.IsTrue(eval2948))) &&
		   (m.IsTrue(eval2949))) {
			// RHS
			traceRuleApply("FUNC", 2406, "{| rule isKResult(`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K4)),isLValue(K0)),isLValue(K1)),isOperands(K3)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),isKResult(K4))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(545ce4fa1e074fad45694d4bfff0e9fefcad39d0e256c51a9d4cc1d60508215c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2407
	// source: ? @?
	// {| rule isKResult(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(41bc7faa6c30fd8b63622856db0a5716112740d373793e126fa2ac0573ebc615)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=shift_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2950, err2950 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2950 != nil {
			return m.NoResult, err2950
		}
		eval2951, err2951 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2951 != nil {
			return m.NoResult, err2951
		}
		eval2952, err2952 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2952 != nil {
			return m.NoResult, err2952
		}
		eval2953, err2953 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2953 != nil {
			return m.NoResult, err2953
		}
		eval2954, err2954 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2954 != nil {
			return m.NoResult, err2954
		}
		if (((m.IsTrue(eval2950)) &&
		   (m.IsTrue(eval2951))) &&
		   (m.IsTrue(eval2952))) &&
		   ((m.IsTrue(eval2953)) &&
		   (m.IsTrue(eval2954))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2407, "{| rule isKResult(`_=shift_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(41bc7faa6c30fd8b63622856db0a5716112740d373793e126fa2ac0573ebc615)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2408
	// source: ? @?
	// {| rule isKResult(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isOperand(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(37c85c764a04117003e2c6b6486e8446419a91299f32bc52433f6a7193ed8144)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `store_,_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2955, err2955 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2955 != nil {
			return m.NoResult, err2955
		}
		eval2956, err2956 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2956 != nil {
			return m.NoResult, err2956
		}
		eval2957, err2957 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err2957 != nil {
			return m.NoResult, err2957
		}
		eval2958, err2958 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2958 != nil {
			return m.NoResult, err2958
		}
		eval2959, err2959 := evalIsKResult( // isKResult(K0)
			varK0,
			config, -1)
		if err2959 != nil {
			return m.NoResult, err2959
		}
		eval2960, err2960 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2960 != nil {
			return m.NoResult, err2960
		}
		eval2961, err2961 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2961 != nil {
			return m.NoResult, err2961
		}
		eval2962, err2962 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2962 != nil {
			return m.NoResult, err2962
		}
		if ((((m.IsTrue(eval2955)) &&
		   (m.IsTrue(eval2956))) &&
		   (m.IsTrue(eval2957))) &&
		   (m.IsTrue(eval2958))) &&
		   ((((m.IsTrue(eval2959)) &&
		   (m.IsTrue(eval2960))) &&
		   (m.IsTrue(eval2961))) &&
		   (m.IsTrue(eval2962))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2408, "{| rule isKResult(`store_,_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isOperand(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37c85c764a04117003e2c6b6486e8446419a91299f32bc52433f6a7193ed8144)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2409
	// source: iele.k @365
	// {| rule isKResult(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires `_andBool_`(#token("true","Bool"),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(f38fbf62106fab6c07f07e7b3996ea844a4a3e881429bf7257d1fbf579b9d63e) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// REQUIRES precomputed KToken && KToken
		// RHS
		traceRuleApply("FUNC", 2409, "{| rule isKResult(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires `_andBool_`(#token(\"true\",\"Bool\"),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f38fbf62106fab6c07f07e7b3996ea844a4a3e881429bf7257d1fbf579b9d63e) contentStartColumn(10) contentStartLine(365) org.kframework.attributes.Location(Location(365,10,365,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2410
	// source: ? @?
	// {| rule isKResult(`_=load__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(cd01fda46a470c61df9ff7cbad4ef1060ce4675c9849b3f270bcc79310b8f61c)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=load__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2963, err2963 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2963 != nil {
			return m.NoResult, err2963
		}
		eval2964, err2964 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2964 != nil {
			return m.NoResult, err2964
		}
		eval2965, err2965 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2965 != nil {
			return m.NoResult, err2965
		}
		if ((m.IsTrue(eval2963)) &&
		   (m.IsTrue(eval2964))) &&
		   (m.IsTrue(eval2965)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2410, "{| rule isKResult(`_=load__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cd01fda46a470c61df9ff7cbad4ef1060ce4675c9849b3f270bcc79310b8f61c)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2411
	// source: ? @?
	// {| rule isKResult(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(9bec744723f672d1e132ce1867708c3d5f3063d18b215360b13ac87fcaf5c222)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=load_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2966, err2966 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2966 != nil {
			return m.NoResult, err2966
		}
		eval2967, err2967 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2967 != nil {
			return m.NoResult, err2967
		}
		eval2968, err2968 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2968 != nil {
			return m.NoResult, err2968
		}
		eval2969, err2969 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2969 != nil {
			return m.NoResult, err2969
		}
		eval2970, err2970 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2970 != nil {
			return m.NoResult, err2970
		}
		eval2971, err2971 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2971 != nil {
			return m.NoResult, err2971
		}
		eval2972, err2972 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2972 != nil {
			return m.NoResult, err2972
		}
		if ((((m.IsTrue(eval2966)) &&
		   (m.IsTrue(eval2967))) &&
		   (m.IsTrue(eval2968))) &&
		   (m.IsTrue(eval2969))) &&
		   (((m.IsTrue(eval2970)) &&
		   (m.IsTrue(eval2971))) &&
		   (m.IsTrue(eval2972))) {
			// RHS
			traceRuleApply("FUNC", 2411, "{| rule isKResult(`_=load_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9bec744723f672d1e132ce1867708c3d5f3063d18b215360b13ac87fcaf5c222)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2412
	// source: ? @?
	// {| rule isKResult(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(1ad99078acaf3af2f70722e944deeee99bf988d5c779e851928ea97563f13122)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2973, err2973 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2973 != nil {
			return m.NoResult, err2973
		}
		eval2974, err2974 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err2974 != nil {
			return m.NoResult, err2974
		}
		eval2975, err2975 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2975 != nil {
			return m.NoResult, err2975
		}
		eval2976, err2976 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2976 != nil {
			return m.NoResult, err2976
		}
		eval2977, err2977 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2977 != nil {
			return m.NoResult, err2977
		}
		eval2978, err2978 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2978 != nil {
			return m.NoResult, err2978
		}
		eval2979, err2979 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err2979 != nil {
			return m.NoResult, err2979
		}
		if ((((m.IsTrue(eval2973)) &&
		   (m.IsTrue(eval2974))) &&
		   (m.IsTrue(eval2975))) &&
		   (m.IsTrue(eval2976))) &&
		   (((m.IsTrue(eval2977)) &&
		   (m.IsTrue(eval2978))) &&
		   (m.IsTrue(eval2979))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2412, "{| rule isKResult(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1ad99078acaf3af2f70722e944deeee99bf988d5c779e851928ea97563f13122)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2413
	// source: ? @?
	// {| rule isKResult(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(832a7e51f048113d9b0b74523b80a81e76bbefceae647458250a2eb28b06b5ee)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=twos_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2980, err2980 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2980 != nil {
			return m.NoResult, err2980
		}
		eval2981, err2981 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2981 != nil {
			return m.NoResult, err2981
		}
		eval2982, err2982 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2982 != nil {
			return m.NoResult, err2982
		}
		eval2983, err2983 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2983 != nil {
			return m.NoResult, err2983
		}
		eval2984, err2984 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2984 != nil {
			return m.NoResult, err2984
		}
		if (((m.IsTrue(eval2980)) &&
		   (m.IsTrue(eval2981))) &&
		   (m.IsTrue(eval2982))) &&
		   ((m.IsTrue(eval2983)) &&
		   (m.IsTrue(eval2984))) {
			// RHS
			traceRuleApply("FUNC", 2413, "{| rule isKResult(`_=twos_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(832a7e51f048113d9b0b74523b80a81e76bbefceae647458250a2eb28b06b5ee)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2414
	// source: ? @?
	// {| rule isKResult(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval2985, err2985 := evalIsNonEmptyInts( // isNonEmptyInts(K1)
				varK1,
				config, -1)
			if err2985 != nil {
				return m.NoResult, err2985
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval2985) {
				// RHS
				traceRuleApply("FUNC", 2414, "{| rule isKResult(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2415
	// source: ? @?
	// {| rule isKResult(`_=sha3__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(0c84927e1c1762ceb59e1b25a419eb553fb0f880ea4e34d426ee70ba8f7a1c75)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval2986, err2986 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2986 != nil {
			return m.NoResult, err2986
		}
		eval2987, err2987 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2987 != nil {
			return m.NoResult, err2987
		}
		eval2988, err2988 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2988 != nil {
			return m.NoResult, err2988
		}
		if ((m.IsTrue(eval2986)) &&
		   (m.IsTrue(eval2987))) &&
		   (m.IsTrue(eval2988)) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2415, "{| rule isKResult(`_=sha3__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isKResult(K1)),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0c84927e1c1762ceb59e1b25a419eb553fb0f880ea4e34d426ee70ba8f7a1c75)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2416
	// source: ? @?
	// {| rule isKResult(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token("true","Bool") [UNIQUE_ID(f3f638fd8dec6e06deebcfc5fe866622f23619e899246b54476f3a8190e01778)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=bswap_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2989, err2989 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2989 != nil {
			return m.NoResult, err2989
		}
		eval2990, err2990 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2990 != nil {
			return m.NoResult, err2990
		}
		eval2991, err2991 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2991 != nil {
			return m.NoResult, err2991
		}
		eval2992, err2992 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2992 != nil {
			return m.NoResult, err2992
		}
		eval2993, err2993 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2993 != nil {
			return m.NoResult, err2993
		}
		if (((m.IsTrue(eval2989)) &&
		   (m.IsTrue(eval2990))) &&
		   (m.IsTrue(eval2991))) &&
		   ((m.IsTrue(eval2992)) &&
		   (m.IsTrue(eval2993))) {
			// RHS
			traceRuleApply("FUNC", 2416, "{| rule isKResult(`_=bswap_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f3f638fd8dec6e06deebcfc5fe866622f23619e899246b54476f3a8190e01778)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2417
	// source: ? @?
	// {| rule isKResult(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token("true","Bool")) ensures #token("true","Bool") [UNIQUE_ID(4defb41ec34aee80c57a71dcddea01c1d97b25c01ba0e26aa5bf713e6ed32011)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=or_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval2994, err2994 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2994 != nil {
			return m.NoResult, err2994
		}
		eval2995, err2995 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err2995 != nil {
			return m.NoResult, err2995
		}
		eval2996, err2996 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err2996 != nil {
			return m.NoResult, err2996
		}
		eval2997, err2997 := evalIsKResult( // isKResult(K1)
			varK1,
			config, -1)
		if err2997 != nil {
			return m.NoResult, err2997
		}
		eval2998, err2998 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err2998 != nil {
			return m.NoResult, err2998
		}
		if (((m.IsTrue(eval2994)) &&
		   (m.IsTrue(eval2995))) &&
		   (m.IsTrue(eval2996))) &&
		   ((m.IsTrue(eval2997)) &&
		   (m.IsTrue(eval2998))) /* && */ /* rhs KToken */  {
			// RHS
			traceRuleApply("FUNC", 2417, "{| rule isKResult(`_=or_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isLValue(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),isKResult(K2))),#token(\"true\",\"Bool\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4defb41ec34aee80c57a71dcddea01c1d97b25c01ba0e26aa5bf713e6ed32011)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2418
	// source: ? @?
	// {| rule isKResult(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isPredicate(K1)),`_andBool_`(isKResult(K2),isKResult(K3))) ensures #token("true","Bool") [UNIQUE_ID(0222c87180b99257aba40476e103204746901b377df8873fee01936459e9d18d)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=cmp__,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval2999, err2999 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err2999 != nil {
			return m.NoResult, err2999
		}
		eval3000, err3000 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err3000 != nil {
			return m.NoResult, err3000
		}
		eval3001, err3001 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3001 != nil {
			return m.NoResult, err3001
		}
		eval3002, err3002 := evalIsPredicate( // isPredicate(K1)
			varK1,
			config, -1)
		if err3002 != nil {
			return m.NoResult, err3002
		}
		eval3003, err3003 := evalIsKResult( // isKResult(K2)
			varK2,
			config, -1)
		if err3003 != nil {
			return m.NoResult, err3003
		}
		eval3004, err3004 := evalIsKResult( // isKResult(K3)
			varK3,
			config, -1)
		if err3004 != nil {
			return m.NoResult, err3004
		}
		if ((((m.IsTrue(eval2999)) &&
		   (m.IsTrue(eval3000))) &&
		   (m.IsTrue(eval3001))) &&
		   (m.IsTrue(eval3002))) &&
		   ((m.IsTrue(eval3003)) &&
		   (m.IsTrue(eval3004))) {
			// RHS
			traceRuleApply("FUNC", 2418, "{| rule isKResult(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(K3)),isLValue(K0)),isPredicate(K1)),`_andBool_`(isKResult(K2),isKResult(K3))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0222c87180b99257aba40476e103204746901b377df8873fee01936459e9d18d)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2419
	// source: ? @?
	// {| rule isKResult(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2419, "{| rule isKResult(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2420
	// source: ? @?
	// {| rule isKResult(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2420, "{| rule isKResult(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsOpCode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2421
	// source: ? @?
	// {| rule isOpCode(`AND`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblAND && len(kapp0.List) == 0 { // `AND`(.KList)
		// RHS
		traceRuleApply("FUNC", 2421, "{| rule isOpCode(`AND`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2422
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("CopyCreateOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCopyCreateOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2422, "{| rule isOpCode(#KToken(#token(\"CopyCreateOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2423
	// source: ? @?
	// {| rule isOpCode(`DIV`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDIV && len(kapp0.List) == 0 { // `DIV`(.KList)
		// RHS
		traceRuleApply("FUNC", 2423, "{| rule isOpCode(`DIV`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2424
	// source: ? @?
	// {| rule isOpCode(`MLOADN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMLOADN && len(kapp0.List) == 0 { // `MLOADN`(.KList)
		// RHS
		traceRuleApply("FUNC", 2424, "{| rule isOpCode(`MLOADN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2425
	// source: ? @?
	// {| rule isOpCode(`GASLIMIT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGASLIMIT && len(kapp0.List) == 0 { // `GASLIMIT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2425, "{| rule isOpCode(`GASLIMIT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2426
	// source: ? @?
	// {| rule isOpCode(`SHA3`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHA3 && len(kapp0.List) == 0 { // `SHA3`(.KList)
		// RHS
		traceRuleApply("FUNC", 2426, "{| rule isOpCode(`SHA3`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2427
	// source: ? @?
	// {| rule isOpCode(`DIFFICULTY`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDIFFICULTY && len(kapp0.List) == 0 { // `DIFFICULTY`(.KList)
		// RHS
		traceRuleApply("FUNC", 2427, "{| rule isOpCode(`DIFFICULTY`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2428
	// source: ? @?
	// {| rule isOpCode(`MOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMOD && len(kapp0.List) == 0 { // `MOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2428, "{| rule isOpCode(`MOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2429
	// source: ? @?
	// {| rule isOpCode(`SIGNEXTEND`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSIGNEXTEND && len(kapp0.List) == 0 { // `SIGNEXTEND`(.KList)
		// RHS
		traceRuleApply("FUNC", 2429, "{| rule isOpCode(`SIGNEXTEND`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2430
	// source: ? @?
	// {| rule isOpCode(`BENEFICIARY`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBENEFICIARY && len(kapp0.List) == 0 { // `BENEFICIARY`(.KList)
		// RHS
		traceRuleApply("FUNC", 2430, "{| rule isOpCode(`BENEFICIARY`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2431
	// source: ? @?
	// {| rule isOpCode(`EXP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXP && len(kapp0.List) == 0 { // `EXP`(.KList)
		// RHS
		traceRuleApply("FUNC", 2431, "{| rule isOpCode(`EXP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2432
	// source: ? @?
	// {| rule isOpCode(`NUMBER`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNUMBER && len(kapp0.List) == 0 { // `NUMBER`(.KList)
		// RHS
		traceRuleApply("FUNC", 2432, "{| rule isOpCode(`NUMBER`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2433
	// source: ? @?
	// {| rule isOpCode(`SELFDESTRUCT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSELFDESTRUCT && len(kapp0.List) == 0 { // `SELFDESTRUCT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2433, "{| rule isOpCode(`SELFDESTRUCT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2434
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("ReturnOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortReturnOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2434, "{| rule isOpCode(#KToken(#token(\"ReturnOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2435
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("CreateOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCreateOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2435, "{| rule isOpCode(#KToken(#token(\"CreateOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2436
	// source: ? @?
	// {| rule isOpCode(`STATICCALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALL && len(kapp0.List) == 3 { // `STATICCALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2436, "{| rule isOpCode(`STATICCALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2437
	// source: ? @?
	// {| rule isOpCode(`BR`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBR && len(kapp0.List) == 1 { // `BR`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2437, "{| rule isOpCode(`BR`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2438
	// source: ? @?
	// {| rule isOpCode(`SUB`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSUB && len(kapp0.List) == 0 { // `SUB`(.KList)
		// RHS
		traceRuleApply("FUNC", 2438, "{| rule isOpCode(`SUB`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2439
	// source: ? @?
	// {| rule isOpCode(`GE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGE && len(kapp0.List) == 0 { // `GE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2439, "{| rule isOpCode(`GE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2440
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("LocalCallOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2440, "{| rule isOpCode(#KToken(#token(\"LocalCallOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2441
	// source: ? @?
	// {| rule isOpCode(`MUL`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMUL && len(kapp0.List) == 0 { // `MUL`(.KList)
		// RHS
		traceRuleApply("FUNC", 2441, "{| rule isOpCode(`MUL`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2442
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("TernOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTernOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2442, "{| rule isOpCode(#KToken(#token(\"TernOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2443
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("QuadOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortQuadOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2443, "{| rule isOpCode(#KToken(#token(\"QuadOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2444
	// source: ? @?
	// {| rule isOpCode(`MLOAD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMLOAD && len(kapp0.List) == 0 { // `MLOAD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2444, "{| rule isOpCode(`MLOAD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2445
	// source: ? @?
	// {| rule isOpCode(`TWOS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTWOS && len(kapp0.List) == 0 { // `TWOS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2445, "{| rule isOpCode(`TWOS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2446
	// source: ? @?
	// {| rule isOpCode(`CALLVALUE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLVALUE && len(kapp0.List) == 0 { // `CALLVALUE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2446, "{| rule isOpCode(`CALLVALUE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2447
	// source: ? @?
	// {| rule isOpCode(`LE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLE && len(kapp0.List) == 0 { // `LE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2447, "{| rule isOpCode(`LE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2448
	// source: ? @?
	// {| rule isOpCode(`LT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLT && len(kapp0.List) == 0 { // `LT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2448, "{| rule isOpCode(`LT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2449
	// source: ? @?
	// {| rule isOpCode(`SLOAD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSLOAD && len(kapp0.List) == 0 { // `SLOAD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2449, "{| rule isOpCode(`SLOAD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2450
	// source: ? @?
	// {| rule isOpCode(`COPYCREATE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCOPYCREATE && len(kapp0.List) == 1 { // `COPYCREATE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2450, "{| rule isOpCode(`COPYCREATE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2451
	// source: ? @?
	// {| rule isOpCode(`LOG0`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG0 && len(kapp0.List) == 0 { // `LOG0`(.KList)
		// RHS
		traceRuleApply("FUNC", 2451, "{| rule isOpCode(`LOG0`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2452
	// source: ? @?
	// {| rule isOpCode(`CALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLDYN && len(kapp0.List) == 2 { // `CALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2452, "{| rule isOpCode(`CALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2453
	// source: ? @?
	// {| rule isOpCode(`ADDRESS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADDRESS && len(kapp0.List) == 0 { // `ADDRESS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2453, "{| rule isOpCode(`ADDRESS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2454
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("NullOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNullOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2454, "{| rule isOpCode(#KToken(#token(\"NullOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2455
	// source: ? @?
	// {| rule isOpCode(`ISZERO`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblISZERO && len(kapp0.List) == 0 { // `ISZERO`(.KList)
		// RHS
		traceRuleApply("FUNC", 2455, "{| rule isOpCode(`ISZERO`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2456
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("FiveOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFiveOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2456, "{| rule isOpCode(#KToken(#token(\"FiveOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2457
	// source: ? @?
	// {| rule isOpCode(`MSTOREN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSTOREN && len(kapp0.List) == 0 { // `MSTOREN`(.KList)
		// RHS
		traceRuleApply("FUNC", 2457, "{| rule isOpCode(`MSTOREN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2458
	// source: ? @?
	// {| rule isOpCode(`BLOCKHASH`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBLOCKHASH && len(kapp0.List) == 0 { // `BLOCKHASH`(.KList)
		// RHS
		traceRuleApply("FUNC", 2458, "{| rule isOpCode(`BLOCKHASH`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2459
	// source: ? @?
	// {| rule isOpCode(`XOR`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXOR && len(kapp0.List) == 0 { // `XOR`(.KList)
		// RHS
		traceRuleApply("FUNC", 2459, "{| rule isOpCode(`XOR`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2460
	// source: ? @?
	// {| rule isOpCode(`LOGARITHM2`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOGARITHM2 && len(kapp0.List) == 0 { // `LOGARITHM2`(.KList)
		// RHS
		traceRuleApply("FUNC", 2460, "{| rule isOpCode(`LOGARITHM2`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2461
	// source: ? @?
	// {| rule isOpCode(`STATICCALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALLDYN && len(kapp0.List) == 2 { // `STATICCALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2461, "{| rule isOpCode(`STATICCALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2462
	// source: ? @?
	// {| rule isOpCode(`MULMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMULMOD && len(kapp0.List) == 0 { // `MULMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2462, "{| rule isOpCode(`MULMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2463
	// source: ? @?
	// {| rule isOpCode(`BRC`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRC && len(kapp0.List) == 1 { // `BRC`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2463, "{| rule isOpCode(`BRC`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2464
	// source: ? @?
	// {| rule isOpCode(`BSWAP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBSWAP && len(kapp0.List) == 0 { // `BSWAP`(.KList)
		// RHS
		traceRuleApply("FUNC", 2464, "{| rule isOpCode(`BSWAP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2465
	// source: ? @?
	// {| rule isOpCode(`EXPMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXPMOD && len(kapp0.List) == 0 { // `EXPMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2465, "{| rule isOpCode(`EXPMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2466
	// source: ? @?
	// {| rule isOpCode(`NOT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNOT && len(kapp0.List) == 0 { // `NOT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2466, "{| rule isOpCode(`NOT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2467
	// source: ? @?
	// {| rule isOpCode(`ORIGIN`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblORIGIN && len(kapp0.List) == 0 { // `ORIGIN`(.KList)
		// RHS
		traceRuleApply("FUNC", 2467, "{| rule isOpCode(`ORIGIN`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2468
	// source: ? @?
	// {| rule isOpCode(`BYTE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBYTE && len(kapp0.List) == 0 { // `BYTE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2468, "{| rule isOpCode(`BYTE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2469
	// source: ? @?
	// {| rule isOpCode(`BALANCE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBALANCE && len(kapp0.List) == 0 { // `BALANCE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2469, "{| rule isOpCode(`BALANCE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2470
	// source: ? @?
	// {| rule isOpCode(`CODESIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCODESIZE && len(kapp0.List) == 0 { // `CODESIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2470, "{| rule isOpCode(`CODESIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2471
	// source: ? @?
	// {| rule isOpCode(`MOVE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMOVE && len(kapp0.List) == 0 { // `MOVE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2471, "{| rule isOpCode(`MOVE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2472
	// source: ? @?
	// {| rule isOpCode(`LOG3`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG3 && len(kapp0.List) == 0 { // `LOG3`(.KList)
		// RHS
		traceRuleApply("FUNC", 2472, "{| rule isOpCode(`LOG3`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2473
	// source: ? @?
	// {| rule isOpCode(`MSIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSIZE && len(kapp0.List) == 0 { // `MSIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2473, "{| rule isOpCode(`MSIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2474
	// source: ? @?
	// {| rule isOpCode(`GT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGT && len(kapp0.List) == 0 { // `GT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2474, "{| rule isOpCode(`GT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2475
	// source: ? @?
	// {| rule isOpCode(`LOCALCALLDYN`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALLDYN && len(kapp0.List) == 2 { // `LOCALCALLDYN`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2475, "{| rule isOpCode(`LOCALCALLDYN`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2476
	// source: ? @?
	// {| rule isOpCode(`INVALID`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblINVALID && len(kapp0.List) == 0 { // `INVALID`(.KList)
		// RHS
		traceRuleApply("FUNC", 2476, "{| rule isOpCode(`INVALID`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2477
	// source: ? @?
	// {| rule isOpCode(`RETURN`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2477, "{| rule isOpCode(`RETURN`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2478
	// source: ? @?
	// {| rule isOpCode(`OR`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOR && len(kapp0.List) == 0 { // `OR`(.KList)
		// RHS
		traceRuleApply("FUNC", 2478, "{| rule isOpCode(`OR`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2479
	// source: ? @?
	// {| rule isOpCode(`LOCALCALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALL && len(kapp0.List) == 3 { // `LOCALCALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2479, "{| rule isOpCode(`LOCALCALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2480
	// source: ? @?
	// {| rule isOpCode(`EQ`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEQ && len(kapp0.List) == 0 { // `EQ`(.KList)
		// RHS
		traceRuleApply("FUNC", 2480, "{| rule isOpCode(`EQ`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2481
	// source: ? @?
	// {| rule isOpCode(`GASPRICE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGASPRICE && len(kapp0.List) == 0 { // `GASPRICE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2481, "{| rule isOpCode(`GASPRICE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2482
	// source: ? @?
	// {| rule isOpCode(`BRLABEL`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRLABEL && len(kapp0.List) == 1 { // `BRLABEL`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2482, "{| rule isOpCode(`BRLABEL`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2483
	// source: ? @?
	// {| rule isOpCode(`ADDMOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADDMOD && len(kapp0.List) == 0 { // `ADDMOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2483, "{| rule isOpCode(`ADDMOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2484
	// source: ? @?
	// {| rule isOpCode(`LOG1`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG1 && len(kapp0.List) == 0 { // `LOG1`(.KList)
		// RHS
		traceRuleApply("FUNC", 2484, "{| rule isOpCode(`LOG1`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2485
	// source: ? @?
	// {| rule isOpCode(`REVERT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblREVERT && len(kapp0.List) == 0 { // `REVERT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2485, "{| rule isOpCode(`REVERT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2486
	// source: ? @?
	// {| rule isOpCode(`LOG2`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG2 && len(kapp0.List) == 0 { // `LOG2`(.KList)
		// RHS
		traceRuleApply("FUNC", 2486, "{| rule isOpCode(`LOG2`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2487
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("CallOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2487, "{| rule isOpCode(#KToken(#token(\"CallOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2488
	// source: ? @?
	// {| rule isOpCode(`LOADNEG`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADNEG && len(kapp0.List) == 2 { // `LOADNEG`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2488, "{| rule isOpCode(`LOADNEG`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2489
	// source: ? @?
	// {| rule isOpCode(`NE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNE && len(kapp0.List) == 0 { // `NE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2489, "{| rule isOpCode(`NE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2490
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("BinOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBinOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2490, "{| rule isOpCode(#KToken(#token(\"BinOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2491
	// source: ? @?
	// {| rule isOpCode(`LOADPOS`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADPOS && len(kapp0.List) == 2 { // `LOADPOS`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2491, "{| rule isOpCode(`LOADPOS`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2492
	// source: ? @?
	// {| rule isOpCode(`GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGAS && len(kapp0.List) == 0 { // `GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2492, "{| rule isOpCode(`GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2493
	// source: ? @?
	// {| rule isOpCode(`ADD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADD && len(kapp0.List) == 0 { // `ADD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2493, "{| rule isOpCode(`ADD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2494
	// source: ? @?
	// {| rule isOpCode(`EXTCODESIZE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXTCODESIZE && len(kapp0.List) == 0 { // `EXTCODESIZE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2494, "{| rule isOpCode(`EXTCODESIZE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2495
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("OpCode","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOpCode { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2495, "{| rule isOpCode(#KToken(#token(\"OpCode\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2496
	// source: ? @?
	// {| rule isOpCode(`CALL`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALL && len(kapp0.List) == 3 { // `CALL`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2496, "{| rule isOpCode(`CALL`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2497
	// source: ? @?
	// {| rule isOpCode(`SHIFT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHIFT && len(kapp0.List) == 0 { // `SHIFT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2497, "{| rule isOpCode(`SHIFT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2498
	// source: ? @?
	// {| rule isOpCode(#KToken(#token("UnOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortUnOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2498, "{| rule isOpCode(#KToken(#token(\"UnOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2499
	// source: ? @?
	// {| rule isOpCode(`LOG4`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG4 && len(kapp0.List) == 0 { // `LOG4`(.KList)
		// RHS
		traceRuleApply("FUNC", 2499, "{| rule isOpCode(`LOG4`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2500
	// source: ? @?
	// {| rule isOpCode(`CALLADDRESS`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLADDRESS && len(kapp0.List) == 1 { // `CALLADDRESS`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2500, "{| rule isOpCode(`CALLADDRESS`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2501
	// source: ? @?
	// {| rule isOpCode(`SSTORE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSSTORE && len(kapp0.List) == 0 { // `SSTORE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2501, "{| rule isOpCode(`SSTORE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2502
	// source: ? @?
	// {| rule isOpCode(`TIMESTAMP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTIMESTAMP && len(kapp0.List) == 0 { // `TIMESTAMP`(.KList)
		// RHS
		traceRuleApply("FUNC", 2502, "{| rule isOpCode(`TIMESTAMP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2503
	// source: ? @?
	// {| rule isOpCode(`MSTORE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMSTORE && len(kapp0.List) == 0 { // `MSTORE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2503, "{| rule isOpCode(`MSTORE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2504
	// source: ? @?
	// {| rule isOpCode(`CALLER`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLER && len(kapp0.List) == 0 { // `CALLER`(.KList)
		// RHS
		traceRuleApply("FUNC", 2504, "{| rule isOpCode(`CALLER`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2505
	// source: ? @?
	// {| rule isOpCode(`CREATE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCREATE && len(kapp0.List) == 2 { // `CREATE`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2505, "{| rule isOpCode(`CREATE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2506
	// source: ? @?
	// {| rule isOpCode(encodingError(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEncodingError && len(kapp0.List) == 0 { // encodingError(.KList)
		// RHS
		traceRuleApply("FUNC", 2506, "{| rule isOpCode(encodingError(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2507
	// source: ? @?
	// {| rule isOpCode(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2507, "{| rule isOpCode(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsOperands(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2508
	// source: ? @?
	// {| rule isOperands(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2508, "{| rule isOperands(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2509
	// source: ? @?
	// {| rule isOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3005, err3005 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err3005 != nil {
			return m.NoResult, err3005
		}
		eval3006, err3006 := evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
			varK1,
			config, -1)
		if err3006 != nil {
			return m.NoResult, err3006
		}
		if (m.IsTrue(eval3005)) &&
		   (m.IsTrue(eval3006)) {
			// RHS
			traceRuleApply("FUNC", 2509, "{| rule isOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isNonEmptyOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2510
	// source: ? @?
	// {| rule isOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval3007, err3007 := evalIsNonEmptyInts( // isNonEmptyInts(K1)
				varK1,
				config, -1)
			if err3007 != nil {
				return m.NoResult, err3007
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval3007) {
				// RHS
				traceRuleApply("FUNC", 2510, "{| rule isOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2511
	// source: ? @?
	// {| rule isOperands(#KToken(#token("NonEmptyInts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2511, "{| rule isOperands(#KToken(#token(\"NonEmptyInts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2512
	// source: ? @?
	// {| rule isOperands(#KToken(#token("Operands","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortOperands { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2512, "{| rule isOperands(#KToken(#token(\"Operands\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2513
	// source: ? @?
	// {| rule isOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3008, err3008 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err3008 != nil {
			return m.NoResult, err3008
		}
		eval3009, err3009 := evalIsOperands( // isOperands(K1)
			varK1,
			config, -1)
		if err3009 != nil {
			return m.NoResult, err3009
		}
		if (m.IsTrue(eval3008)) &&
		   (m.IsTrue(eval3009)) {
			// RHS
			traceRuleApply("FUNC", 2513, "{| rule isOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isOperand(K0),isOperands(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2514
	// source: ? @?
	// {| rule isOperands(#KToken(#token("Ints","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2514, "{| rule isOperands(#KToken(#token(\"Ints\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2515
	// source: ? @?
	// {| rule isOperands(#KToken(#token("NonEmptyOperands","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyOperands { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2515, "{| rule isOperands(#KToken(#token(\"NonEmptyOperands\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2516
	// source: ? @?
	// {| rule isOperands(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval3010, err3010 := evalIsInts( // isInts(K1)
				varK1,
				config, -1)
			if err3010 != nil {
				return m.NoResult, err3010
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval3010) {
				// RHS
				traceRuleApply("FUNC", 2516, "{| rule isOperands(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2517
	// source: ? @?
	// {| rule isOperands(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2517, "{| rule isOperands(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalKeccak256(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.keccak256
	lbl := m.LblKeccak256 // Keccak256
	sort := m.SortString
	if hookRes, hookErr := krypto.Keccak256(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.keccak256, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalKeccak256", args: []m.K{c}}
}

func evalIsByteInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2518
	// source: ? @?
	// {| rule isByteInst(#KToken(#token("ByteInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortByteInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2518, "{| rule isByteInst(#KToken(#token(\"ByteInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2519
	// source: ? @?
	// {| rule isByteInst(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=byte_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval3011, err3011 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3011 != nil {
			return m.NoResult, err3011
		}
		eval3012, err3012 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err3012 != nil {
			return m.NoResult, err3012
		}
		eval3013, err3013 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err3013 != nil {
			return m.NoResult, err3013
		}
		if ((m.IsTrue(eval3011)) &&
		   (m.IsTrue(eval3012))) &&
		   (m.IsTrue(eval3013)) {
			// RHS
			traceRuleApply("FUNC", 2519, "{| rule isByteInst(`_=byte_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2520
	// source: ? @?
	// {| rule isByteInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2520, "{| rule isByteInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsInterimStatesCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2521
	// source: ? @?
	// {| rule isInterimStatesCellOpt(#KToken(#token("InterimStatesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInterimStatesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2521, "{| rule isInterimStatesCellOpt(#KToken(#token(\"InterimStatesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2522
	// source: ? @?
	// {| rule isInterimStatesCellOpt(`<interimStates>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltinterimStatesXgt && len(kapp0.List) == 1 { // `<interimStates>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2522, "{| rule isInterimStatesCellOpt(`<interimStates>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2523
	// source: ? @?
	// {| rule isInterimStatesCellOpt(#KToken(#token("InterimStatesCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInterimStatesCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2523, "{| rule isInterimStatesCellOpt(#KToken(#token(\"InterimStatesCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2524
	// source: ? @?
	// {| rule isInterimStatesCellOpt(noInterimStatesCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoInterimStatesCell && len(kapp0.List) == 0 { // noInterimStatesCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2524, "{| rule isInterimStatesCellOpt(noInterimStatesCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2525
	// source: ? @?
	// {| rule isInterimStatesCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2525, "{| rule isInterimStatesCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashlstatXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.lstat
	lbl := m.LblXhashlstatXlparenXuXrparenXuKXhyphenIO // #lstat(_)_K-IO
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.lstat(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.lstat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlstatXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalSetItem(c m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.element
	lbl := m.LblSetItem // SetItem
	sort := m.SortSet
	if hookRes, hookErr := setHooks.element(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalSetItem", args: []m.K{c}}
}

func evalIsIeleBuiltin(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2526
	// source: iele.k @994
	// {| rule isIeleBuiltin(#token("iele.extcodesize","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ee3f824f59e3b1777cff83b9ea17a01e771bd0b6ea9ee3434fe0d47093c27392) contentStartColumn(10) contentStartLine(994) org.kframework.attributes.Location(Location(994,10,994,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.extcodesize"}) { // #token("iele.extcodesize","IeleName")
		// RHS
		traceRuleApply("FUNC", 2526, "{| rule isIeleBuiltin(#token(\"iele.extcodesize\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ee3f824f59e3b1777cff83b9ea17a01e771bd0b6ea9ee3434fe0d47093c27392) contentStartColumn(10) contentStartLine(994) org.kframework.attributes.Location(Location(994,10,994,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2527
	// source: iele.k @988
	// {| rule isIeleBuiltin(#token("iele.caller","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f0a062f9c0b6625013957682cbfccdc56c61b1e98847b5ead4d3e70143be1b84) contentStartColumn(10) contentStartLine(988) org.kframework.attributes.Location(Location(988,10,988,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.caller"}) { // #token("iele.caller","IeleName")
		// RHS
		traceRuleApply("FUNC", 2527, "{| rule isIeleBuiltin(#token(\"iele.caller\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f0a062f9c0b6625013957682cbfccdc56c61b1e98847b5ead4d3e70143be1b84) contentStartColumn(10) contentStartLine(988) org.kframework.attributes.Location(Location(988,10,988,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2528
	// source: iele.k @984
	// {| rule isIeleBuiltin(#token("iele.number","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a12ec0e2d6624d34dc06ee361c92fa73eafe4d2e377664ca5f8e13e6daec86e9) contentStartColumn(10) contentStartLine(984) org.kframework.attributes.Location(Location(984,10,984,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.number"}) { // #token("iele.number","IeleName")
		// RHS
		traceRuleApply("FUNC", 2528, "{| rule isIeleBuiltin(#token(\"iele.number\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a12ec0e2d6624d34dc06ee361c92fa73eafe4d2e377664ca5f8e13e6daec86e9) contentStartColumn(10) contentStartLine(984) org.kframework.attributes.Location(Location(984,10,984,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2529
	// source: iele.k @999
	// {| rule isIeleBuiltin(#token("iele.ecadd","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(37bf8e2c40be753e93b66afa49b464e0c2b93c2dfb8821d081457286bb0347d1) contentStartColumn(10) contentStartLine(999) org.kframework.attributes.Location(Location(999,10,999,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.ecadd"}) { // #token("iele.ecadd","IeleName")
		// RHS
		traceRuleApply("FUNC", 2529, "{| rule isIeleBuiltin(#token(\"iele.ecadd\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37bf8e2c40be753e93b66afa49b464e0c2b93c2dfb8821d081457286bb0347d1) contentStartColumn(10) contentStartLine(999) org.kframework.attributes.Location(Location(999,10,999,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2530
	// source: iele.k @987
	// {| rule isIeleBuiltin(#token("iele.origin","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(33e096f16d4a6d83d644654aa444901769746ee10861523015b9e738889563a6) contentStartColumn(10) contentStartLine(987) org.kframework.attributes.Location(Location(987,10,987,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.origin"}) { // #token("iele.origin","IeleName")
		// RHS
		traceRuleApply("FUNC", 2530, "{| rule isIeleBuiltin(#token(\"iele.origin\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(33e096f16d4a6d83d644654aa444901769746ee10861523015b9e738889563a6) contentStartColumn(10) contentStartLine(987) org.kframework.attributes.Location(Location(987,10,987,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2531
	// source: iele.k @986
	// {| rule isIeleBuiltin(#token("iele.address","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ff3622b32a00de9dcf50fe337e0897a1f26cedda6f0de1a27a383ba1e77199e) contentStartColumn(10) contentStartLine(986) org.kframework.attributes.Location(Location(986,10,986,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.address"}) { // #token("iele.address","IeleName")
		// RHS
		traceRuleApply("FUNC", 2531, "{| rule isIeleBuiltin(#token(\"iele.address\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ff3622b32a00de9dcf50fe337e0897a1f26cedda6f0de1a27a383ba1e77199e) contentStartColumn(10) contentStartLine(986) org.kframework.attributes.Location(Location(986,10,986,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2532
	// source: iele.k @995
	// {| rule isIeleBuiltin(#token("iele.ecrec","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c6ffcbdffe77dbb7d5f72bafd91f00e64b995872401939d25b26c353dfcbbb5b) contentStartColumn(10) contentStartLine(995) org.kframework.attributes.Location(Location(995,10,995,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.ecrec"}) { // #token("iele.ecrec","IeleName")
		// RHS
		traceRuleApply("FUNC", 2532, "{| rule isIeleBuiltin(#token(\"iele.ecrec\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c6ffcbdffe77dbb7d5f72bafd91f00e64b995872401939d25b26c353dfcbbb5b) contentStartColumn(10) contentStartLine(995) org.kframework.attributes.Location(Location(995,10,995,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2533
	// source: iele.k @981
	// {| rule isIeleBuiltin(#token("iele.gaslimit","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(326cad7ceec45d7d7b08ed4af07748992a7a1f06b4905ed3c31b8949d5baeff9) contentStartColumn(10) contentStartLine(981) org.kframework.attributes.Location(Location(981,10,981,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.gaslimit"}) { // #token("iele.gaslimit","IeleName")
		// RHS
		traceRuleApply("FUNC", 2533, "{| rule isIeleBuiltin(#token(\"iele.gaslimit\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(326cad7ceec45d7d7b08ed4af07748992a7a1f06b4905ed3c31b8949d5baeff9) contentStartColumn(10) contentStartLine(981) org.kframework.attributes.Location(Location(981,10,981,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2534
	// source: iele.k @993
	// {| rule isIeleBuiltin(#token("iele.balance","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ba67cc1d6d7d3ed5ab3c5a6810b16cb165f90bde7099d27304f1ceca83753427) contentStartColumn(10) contentStartLine(993) org.kframework.attributes.Location(Location(993,10,993,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.balance"}) { // #token("iele.balance","IeleName")
		// RHS
		traceRuleApply("FUNC", 2534, "{| rule isIeleBuiltin(#token(\"iele.balance\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ba67cc1d6d7d3ed5ab3c5a6810b16cb165f90bde7099d27304f1ceca83753427) contentStartColumn(10) contentStartLine(993) org.kframework.attributes.Location(Location(993,10,993,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2535
	// source: iele.k @990
	// {| rule isIeleBuiltin(#token("iele.msize","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ee5ab21bee5a2fea8b7bf8c8f3fa382f2a9d26087de7c10a97cd2e60024f852) contentStartColumn(10) contentStartLine(990) org.kframework.attributes.Location(Location(990,10,990,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.msize"}) { // #token("iele.msize","IeleName")
		// RHS
		traceRuleApply("FUNC", 2535, "{| rule isIeleBuiltin(#token(\"iele.msize\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ee5ab21bee5a2fea8b7bf8c8f3fa382f2a9d26087de7c10a97cd2e60024f852) contentStartColumn(10) contentStartLine(990) org.kframework.attributes.Location(Location(990,10,990,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2536
	// source: iele.k @1001
	// {| rule isIeleBuiltin(#token("iele.ecpairing","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f76aab91b8e04c1f020188d75febefb62c69e503ed1cf31de4a9662bbdda4c91) contentStartColumn(10) contentStartLine(1001) org.kframework.attributes.Location(Location(1001,10,1001,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.ecpairing"}) { // #token("iele.ecpairing","IeleName")
		// RHS
		traceRuleApply("FUNC", 2536, "{| rule isIeleBuiltin(#token(\"iele.ecpairing\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f76aab91b8e04c1f020188d75febefb62c69e503ed1cf31de4a9662bbdda4c91) contentStartColumn(10) contentStartLine(1001) org.kframework.attributes.Location(Location(1001,10,1001,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2537
	// source: iele.k @998
	// {| rule isIeleBuiltin(#token("iele.id","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d748daf8f41185f5e6e91f1f5c450f995cae425231989add09d70a9e23c76d00) contentStartColumn(10) contentStartLine(998) org.kframework.attributes.Location(Location(998,10,998,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.id"}) { // #token("iele.id","IeleName")
		// RHS
		traceRuleApply("FUNC", 2537, "{| rule isIeleBuiltin(#token(\"iele.id\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d748daf8f41185f5e6e91f1f5c450f995cae425231989add09d70a9e23c76d00) contentStartColumn(10) contentStartLine(998) org.kframework.attributes.Location(Location(998,10,998,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2538
	// source: iele.k @978
	// {| rule isIeleBuiltin(#token("iele.invalid","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(988d8b076c29da2cc06a1dbc1af6edfac83f93e0484eefa687e5d81613a84368) contentStartColumn(10) contentStartLine(978) org.kframework.attributes.Location(Location(978,10,978,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.invalid"}) { // #token("iele.invalid","IeleName")
		// RHS
		traceRuleApply("FUNC", 2538, "{| rule isIeleBuiltin(#token(\"iele.invalid\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(988d8b076c29da2cc06a1dbc1af6edfac83f93e0484eefa687e5d81613a84368) contentStartColumn(10) contentStartLine(978) org.kframework.attributes.Location(Location(978,10,978,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2539
	// source: iele.k @980
	// {| rule isIeleBuiltin(#token("iele.gasprice","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ddc670a9efd25e3c9f6886619064ee2bf60628a8c988aab85f6b1d626645e91a) contentStartColumn(10) contentStartLine(980) org.kframework.attributes.Location(Location(980,10,980,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.gasprice"}) { // #token("iele.gasprice","IeleName")
		// RHS
		traceRuleApply("FUNC", 2539, "{| rule isIeleBuiltin(#token(\"iele.gasprice\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ddc670a9efd25e3c9f6886619064ee2bf60628a8c988aab85f6b1d626645e91a) contentStartColumn(10) contentStartLine(980) org.kframework.attributes.Location(Location(980,10,980,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2540
	// source: iele.k @985
	// {| rule isIeleBuiltin(#token("iele.difficulty","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(329f3a1c8c4baee19c6cd017aefd18c9bc5ef58b63631d14396e2c86750b7058) contentStartColumn(10) contentStartLine(985) org.kframework.attributes.Location(Location(985,10,985,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.difficulty"}) { // #token("iele.difficulty","IeleName")
		// RHS
		traceRuleApply("FUNC", 2540, "{| rule isIeleBuiltin(#token(\"iele.difficulty\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(329f3a1c8c4baee19c6cd017aefd18c9bc5ef58b63631d14396e2c86750b7058) contentStartColumn(10) contentStartLine(985) org.kframework.attributes.Location(Location(985,10,985,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2541
	// source: iele.k @996
	// {| rule isIeleBuiltin(#token("iele.sha256","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c34c7d45f1732dfca1a8f3415ec9a1542063cff0ab7e61330215a807401c28a8) contentStartColumn(10) contentStartLine(996) org.kframework.attributes.Location(Location(996,10,996,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.sha256"}) { // #token("iele.sha256","IeleName")
		// RHS
		traceRuleApply("FUNC", 2541, "{| rule isIeleBuiltin(#token(\"iele.sha256\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c34c7d45f1732dfca1a8f3415ec9a1542063cff0ab7e61330215a807401c28a8) contentStartColumn(10) contentStartLine(996) org.kframework.attributes.Location(Location(996,10,996,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2542
	// source: iele.k @983
	// {| rule isIeleBuiltin(#token("iele.timestamp","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a239392e42697879455745e20c54fe57fe4dda1e9c5a56edb11f883fd3014bad) contentStartColumn(10) contentStartLine(983) org.kframework.attributes.Location(Location(983,10,983,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.timestamp"}) { // #token("iele.timestamp","IeleName")
		// RHS
		traceRuleApply("FUNC", 2542, "{| rule isIeleBuiltin(#token(\"iele.timestamp\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a239392e42697879455745e20c54fe57fe4dda1e9c5a56edb11f883fd3014bad) contentStartColumn(10) contentStartLine(983) org.kframework.attributes.Location(Location(983,10,983,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2543
	// source: iele.k @997
	// {| rule isIeleBuiltin(#token("iele.rip160","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3aeacdb5e9e7f8cba4fb4f5a9e3195e4909f43535e1bf5d7b0f0e63ba26382ab) contentStartColumn(10) contentStartLine(997) org.kframework.attributes.Location(Location(997,10,997,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.rip160"}) { // #token("iele.rip160","IeleName")
		// RHS
		traceRuleApply("FUNC", 2543, "{| rule isIeleBuiltin(#token(\"iele.rip160\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3aeacdb5e9e7f8cba4fb4f5a9e3195e4909f43535e1bf5d7b0f0e63ba26382ab) contentStartColumn(10) contentStartLine(997) org.kframework.attributes.Location(Location(997,10,997,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2544
	// source: iele.k @991
	// {| rule isIeleBuiltin(#token("iele.codesize","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(13041747a597afbba08c11bedabe3a3d240420b07e9a1dda4041b2d31202493b) contentStartColumn(10) contentStartLine(991) org.kframework.attributes.Location(Location(991,10,991,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.codesize"}) { // #token("iele.codesize","IeleName")
		// RHS
		traceRuleApply("FUNC", 2544, "{| rule isIeleBuiltin(#token(\"iele.codesize\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(13041747a597afbba08c11bedabe3a3d240420b07e9a1dda4041b2d31202493b) contentStartColumn(10) contentStartLine(991) org.kframework.attributes.Location(Location(991,10,991,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2545
	// source: iele.k @982
	// {| rule isIeleBuiltin(#token("iele.beneficiary","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(58dcde05c4c6ef82eb640ce52ee002446a9374b8a7062463b17f0598a9dc8cd2) contentStartColumn(10) contentStartLine(982) org.kframework.attributes.Location(Location(982,10,982,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.beneficiary"}) { // #token("iele.beneficiary","IeleName")
		// RHS
		traceRuleApply("FUNC", 2545, "{| rule isIeleBuiltin(#token(\"iele.beneficiary\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(58dcde05c4c6ef82eb640ce52ee002446a9374b8a7062463b17f0598a9dc8cd2) contentStartColumn(10) contentStartLine(982) org.kframework.attributes.Location(Location(982,10,982,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2546
	// source: iele.k @979
	// {| rule isIeleBuiltin(#token("iele.gas","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ed70b10aaca76144666ef734f65383fbe2ad6556ca98a0bef18c174dcdd888f) contentStartColumn(10) contentStartLine(979) org.kframework.attributes.Location(Location(979,10,979,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.gas"}) { // #token("iele.gas","IeleName")
		// RHS
		traceRuleApply("FUNC", 2546, "{| rule isIeleBuiltin(#token(\"iele.gas\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ed70b10aaca76144666ef734f65383fbe2ad6556ca98a0bef18c174dcdd888f) contentStartColumn(10) contentStartLine(979) org.kframework.attributes.Location(Location(979,10,979,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2547
	// source: iele.k @1000
	// {| rule isIeleBuiltin(#token("iele.ecmul","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78579eadd12efbdd1d3dfb686255487084caa32fd9800aa7d06dd679cce6b191) contentStartColumn(10) contentStartLine(1000) org.kframework.attributes.Location(Location(1000,10,1000,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.ecmul"}) { // #token("iele.ecmul","IeleName")
		// RHS
		traceRuleApply("FUNC", 2547, "{| rule isIeleBuiltin(#token(\"iele.ecmul\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(78579eadd12efbdd1d3dfb686255487084caa32fd9800aa7d06dd679cce6b191) contentStartColumn(10) contentStartLine(1000) org.kframework.attributes.Location(Location(1000,10,1000,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2548
	// source: iele.k @992
	// {| rule isIeleBuiltin(#token("iele.blockhash","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8617a81fc56df7c837484d1f358bfc6bfc6465251925fff06898c9b533146e21) contentStartColumn(10) contentStartLine(992) org.kframework.attributes.Location(Location(992,10,992,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.blockhash"}) { // #token("iele.blockhash","IeleName")
		// RHS
		traceRuleApply("FUNC", 2548, "{| rule isIeleBuiltin(#token(\"iele.blockhash\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8617a81fc56df7c837484d1f358bfc6bfc6465251925fff06898c9b533146e21) contentStartColumn(10) contentStartLine(992) org.kframework.attributes.Location(Location(992,10,992,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2549
	// source: iele.k @989
	// {| rule isIeleBuiltin(#token("iele.callvalue","IeleName"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(34b6e5d581bf78e09b49989860fcdedaed8cae2ca7405ccf6b1fcc8be4235fd9) contentStartColumn(10) contentStartLine(989) org.kframework.attributes.Location(Location(989,10,989,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortIeleName, Value: "iele.callvalue"}) { // #token("iele.callvalue","IeleName")
		// RHS
		traceRuleApply("FUNC", 2549, "{| rule isIeleBuiltin(#token(\"iele.callvalue\",\"IeleName\"))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(34b6e5d581bf78e09b49989860fcdedaed8cae2ca7405ccf6b1fcc8be4235fd9) contentStartColumn(10) contentStartLine(989) org.kframework.attributes.Location(Location(989,10,989,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2550
	// source: iele.k @1002
	// {| rule isIeleBuiltin(_405)=>#token("false","Bool") requires isIeleName(_405) ensures #token("true","Bool") [UNIQUE_ID(4a669494cab09a9b076a6bde84275e2156d6831a9cbf5ee59e7b8042a4f9a093) contentStartColumn(10) contentStartLine(1002) org.kframework.attributes.Location(Location(1002,10,1002,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu405 := c // lhs KVariable _405
		// REQUIRES
		eval3014, err3014 := evalIsIeleName( // isIeleName(_405)
			varXu405,
			config, -1)
		if err3014 != nil {
			return m.NoResult, err3014
		}
		if m.IsTrue(eval3014) {
			// RHS
			traceRuleApply("FUNC", 2550, "{| rule isIeleBuiltin(_405)=>#token(\"false\",\"Bool\") requires isIeleName(_405) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4a669494cab09a9b076a6bde84275e2156d6831a9cbf5ee59e7b8042a4f9a093) contentStartColumn(10) contentStartLine(1002) org.kframework.attributes.Location(Location(1002,10,1002,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIsIeleBuiltin", args: []m.K{c}}
}

func evalIsTernOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2551
	// source: ? @?
	// {| rule isTernOp(#KToken(#token("TernOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTernOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2551, "{| rule isTernOp(#KToken(#token(\"TernOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2552
	// source: ? @?
	// {| rule isTernOp(`OR`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOR && len(kapp0.List) == 0 { // `OR`(.KList)
		// RHS
		traceRuleApply("FUNC", 2552, "{| rule isTernOp(`OR`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2553
	// source: ? @?
	// {| rule isTernOp(`AND`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblAND && len(kapp0.List) == 0 { // `AND`(.KList)
		// RHS
		traceRuleApply("FUNC", 2553, "{| rule isTernOp(`AND`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2554
	// source: ? @?
	// {| rule isTernOp(`SHIFT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSHIFT && len(kapp0.List) == 0 { // `SHIFT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2554, "{| rule isTernOp(`SHIFT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2555
	// source: ? @?
	// {| rule isTernOp(`SIGNEXTEND`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSIGNEXTEND && len(kapp0.List) == 0 { // `SIGNEXTEND`(.KList)
		// RHS
		traceRuleApply("FUNC", 2555, "{| rule isTernOp(`SIGNEXTEND`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2556
	// source: ? @?
	// {| rule isTernOp(`LOG2`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOG2 && len(kapp0.List) == 0 { // `LOG2`(.KList)
		// RHS
		traceRuleApply("FUNC", 2556, "{| rule isTernOp(`LOG2`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2557
	// source: ? @?
	// {| rule isTernOp(`MOD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMOD && len(kapp0.List) == 0 { // `MOD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2557, "{| rule isTernOp(`MOD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2558
	// source: ? @?
	// {| rule isTernOp(`BYTE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBYTE && len(kapp0.List) == 0 { // `BYTE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2558, "{| rule isTernOp(`BYTE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2559
	// source: ? @?
	// {| rule isTernOp(`ADD`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblADD && len(kapp0.List) == 0 { // `ADD`(.KList)
		// RHS
		traceRuleApply("FUNC", 2559, "{| rule isTernOp(`ADD`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2560
	// source: ? @?
	// {| rule isTernOp(`LT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLT && len(kapp0.List) == 0 { // `LT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2560, "{| rule isTernOp(`LT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2561
	// source: ? @?
	// {| rule isTernOp(`BSWAP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBSWAP && len(kapp0.List) == 0 { // `BSWAP`(.KList)
		// RHS
		traceRuleApply("FUNC", 2561, "{| rule isTernOp(`BSWAP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2562
	// source: ? @?
	// {| rule isTernOp(`DIV`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDIV && len(kapp0.List) == 0 { // `DIV`(.KList)
		// RHS
		traceRuleApply("FUNC", 2562, "{| rule isTernOp(`DIV`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2563
	// source: ? @?
	// {| rule isTernOp(`LE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLE && len(kapp0.List) == 0 { // `LE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2563, "{| rule isTernOp(`LE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2564
	// source: ? @?
	// {| rule isTernOp(`MUL`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMUL && len(kapp0.List) == 0 { // `MUL`(.KList)
		// RHS
		traceRuleApply("FUNC", 2564, "{| rule isTernOp(`MUL`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2565
	// source: ? @?
	// {| rule isTernOp(`EQ`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEQ && len(kapp0.List) == 0 { // `EQ`(.KList)
		// RHS
		traceRuleApply("FUNC", 2565, "{| rule isTernOp(`EQ`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2566
	// source: ? @?
	// {| rule isTernOp(`TWOS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTWOS && len(kapp0.List) == 0 { // `TWOS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2566, "{| rule isTernOp(`TWOS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2567
	// source: ? @?
	// {| rule isTernOp(`GE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGE && len(kapp0.List) == 0 { // `GE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2567, "{| rule isTernOp(`GE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2568
	// source: ? @?
	// {| rule isTernOp(`XOR`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXOR && len(kapp0.List) == 0 { // `XOR`(.KList)
		// RHS
		traceRuleApply("FUNC", 2568, "{| rule isTernOp(`XOR`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2569
	// source: ? @?
	// {| rule isTernOp(`SUB`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSUB && len(kapp0.List) == 0 { // `SUB`(.KList)
		// RHS
		traceRuleApply("FUNC", 2569, "{| rule isTernOp(`SUB`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2570
	// source: ? @?
	// {| rule isTernOp(`EXP`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblEXP && len(kapp0.List) == 0 { // `EXP`(.KList)
		// RHS
		traceRuleApply("FUNC", 2570, "{| rule isTernOp(`EXP`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2571
	// source: ? @?
	// {| rule isTernOp(`GT`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGT && len(kapp0.List) == 0 { // `GT`(.KList)
		// RHS
		traceRuleApply("FUNC", 2571, "{| rule isTernOp(`GT`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2572
	// source: ? @?
	// {| rule isTernOp(`NE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNE && len(kapp0.List) == 0 { // `NE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2572, "{| rule isTernOp(`NE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2573
	// source: ? @?
	// {| rule isTernOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2573, "{| rule isTernOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdasmFunction(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, c7 m.K, c8 m.K, c9 m.K, config m.K, guard int) (m.K, error) {
	// rule #2574
	// source: iele-binary.k @202
	// {| rule #dasmFunction(#token("false","Bool"),NAME,CNAME,SIG,`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),`.List{"topLevelDefinitionList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)) ensures #token("true","Bool") [UNIQUE_ID(7ed0e54e5a4c6bbceb4050a31c46c85f1b939140cf7166eec44f059c22d51dc3) contentStartColumn(10) contentStartLine(202) org.kframework.attributes.Location(Location(202,10,202,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp0, t := c5.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
				if _, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varINSTRS := c8 // lhs KVariable INSTRS
						// KSequence, size 0:.K
						// REQUIRES
						eval3015, err3015 := evalIsInstructions( // isInstructions(INSTRS)
							varINSTRS,
							config, -1)
						if err3015 != nil {
							return m.NoResult, err3015
						}
						eval3016, err3016 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err3016 != nil {
							return m.NoResult, err3016
						}
						eval3017, err3017 := evalIsIeleName( // isIeleName(CNAME)
							varCNAME,
							config, -1)
						if err3017 != nil {
							return m.NoResult, err3017
						}
						if ((m.IsTrue(eval3015)) &&
						   (m.IsTrue(eval3016)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
						   (m.IsTrue(eval3017)) {
							// RHS
							traceRuleApply("FUNC", 2574, "{| rule #dasmFunction(#token(\"false\",\"Bool\"),NAME,CNAME,SIG,`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),`.List{\"topLevelDefinitionList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7ed0e54e5a4c6bbceb4050a31c46c85f1b939140cf7166eec44f059c22d51dc3) contentStartColumn(10) contentStartLine(202) org.kframework.attributes.Location(Location(202,10,202,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval3018, err3018 := evalXhashtoBlocks( // #toBlocks(INSTRS)
								varINSTRS,
								config, -1)
							if err3018 != nil {
								return m.NoResult, err3018
							}
							return &m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
								&m.KApply{Label: m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is define_{_}_IELE-COMMON
									&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
										&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
											varNAME,
										}},
										varSIG,
									}},
									eval3018,
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #2575
	// source: iele-binary.k @203
	// {| rule #dasmFunction(#token("true","Bool"),NAME,CNAME,SIG,`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),`.List{"topLevelDefinitionList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)) ensures #token("true","Bool") [UNIQUE_ID(8d38ff7618c70f70b32bc532a7ae354b654f2d3b089cb1585eedbee9d09af00c) contentStartColumn(10) contentStartLine(203) org.kframework.attributes.Location(Location(203,10,203,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp0, t := c5.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
				if _, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varINSTRS := c8 // lhs KVariable INSTRS
						// KSequence, size 0:.K
						// REQUIRES
						eval3019, err3019 := evalIsInstructions( // isInstructions(INSTRS)
							varINSTRS,
							config, -1)
						if err3019 != nil {
							return m.NoResult, err3019
						}
						eval3020, err3020 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err3020 != nil {
							return m.NoResult, err3020
						}
						eval3021, err3021 := evalIsIeleName( // isIeleName(CNAME)
							varCNAME,
							config, -1)
						if err3021 != nil {
							return m.NoResult, err3021
						}
						if ((m.IsTrue(eval3019)) &&
						   (m.IsTrue(eval3020)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
						   (m.IsTrue(eval3021)) {
							// RHS
							traceRuleApply("FUNC", 2575, "{| rule #dasmFunction(#token(\"true\",\"Bool\"),NAME,CNAME,SIG,`.WordStack_IELE-DATA`(.KList),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),`.List{\"topLevelDefinitionList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInstructions(INSTRS),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8d38ff7618c70f70b32bc532a7ae354b654f2d3b089cb1585eedbee9d09af00c) contentStartColumn(10) contentStartLine(203) org.kframework.attributes.Location(Location(203,10,203,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval3022, err3022 := evalXhashtoBlocks( // #toBlocks(INSTRS)
								varINSTRS,
								config, -1)
							if err3022 != nil {
								return m.NoResult, err3022
							}
							return &m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
								&m.KApply{Label: m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is definepublic_{_}_IELE-COMMON
									&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
										&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
											varNAME,
										}},
										varSIG,
									}},
									eval3022,
								}},
								&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
								}},
							}}, nil
						}
					}
				}
			}
		}
	}

	// rule #2576
	// source: iele-binary.k @200
	// {| rule #dasmFunction(#token("true","Bool"),NAME,CNAME,SIG,`_:__IELE-DATA`(W,WS),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),#dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isIeleName(CNAME)),`_orBool__BOOL`(`_==Int_`(W,#token("103","Int")),`_==Int_`(W,#token("104","Int")))) ensures #token("true","Bool") [UNIQUE_ID(780bd1874a33461292e80bc3ee95e02753f05ef66b721577fcdbb9d92a3ceb8f) contentStartColumn(10) contentStartLine(200) org.kframework.attributes.Location(Location(200,10,201,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp0, t := c5.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
				if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varWS := kapp0.List[1] // lhs KVariable WS
					if varNBITS, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varINSTRS := c8 // lhs KVariable INSTRS
							// KSequence, size 0:.K
							// REQUIRES
							eval3023, err3023 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err3023 != nil {
								return m.NoResult, err3023
							}
							eval3024, err3024 := evalIsInstructions( // isInstructions(INSTRS)
								varINSTRS,
								config, -1)
							if err3024 != nil {
								return m.NoResult, err3024
							}
							eval3025, err3025 := evalIsIeleName( // isIeleName(NAME)
								varNAME,
								config, -1)
							if err3025 != nil {
								return m.NoResult, err3025
							}
							eval3026, err3026 := evalIsIeleName( // isIeleName(CNAME)
								varCNAME,
								config, -1)
							if err3026 != nil {
								return m.NoResult, err3026
							}
							eval3027, err3027 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("103","Int"))
								varW,
								/* rhs KToken */ m.NewIntFromString("103"),
								config, -1)
							if err3027 != nil {
								return m.NoResult, err3027
							}
							eval3028, err3028 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("104","Int"))
								varW,
								/* rhs KToken */ m.NewIntFromString("104"),
								config, -1)
							if err3028 != nil {
								return m.NoResult, err3028
							}
							if ((((m.IsTrue(eval3023)) &&
							   (m.IsTrue(eval3024))) &&
							   (m.IsTrue(eval3025)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
							   (m.IsTrue(eval3026))) &&
							   ((m.IsTrue(eval3027)) || (m.IsTrue(eval3028))) {
								// RHS
								traceRuleApply("FUNC", 2576, "{| rule #dasmFunction(#token(\"true\",\"Bool\"),NAME,CNAME,SIG,`_:__IELE-DATA`(W,WS),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),#dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isIeleName(CNAME)),`_orBool__BOOL`(`_==Int_`(W,#token(\"103\",\"Int\")),`_==Int_`(W,#token(\"104\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(780bd1874a33461292e80bc3ee95e02753f05ef66b721577fcdbb9d92a3ceb8f) contentStartColumn(10) contentStartLine(200) org.kframework.attributes.Location(Location(200,10,201,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
								eval3029, err3029 := evalXhashtoBlocks( // #toBlocks(INSTRS)
									varINSTRS,
									config, -1)
								if err3029 != nil {
									return m.NoResult, err3029
								}
								eval3030, err3030 := evalXhashdasmFunctions( // #dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)
									&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
										varW,
										varWS,
									}},
									varNBITS,
									varFUNCS,
									varCNAME,
									config, -1)
								if err3030 != nil {
									return m.NoResult, err3030
								}
								return &m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
									&m.KApply{Label: m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is definepublic_{_}_IELE-COMMON
										&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												varNAME,
											}},
											varSIG,
										}},
										eval3029,
									}},
									eval3030,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2577
	// source: iele-binary.k @198
	// {| rule #dasmFunction(#token("false","Bool"),NAME,CNAME,SIG,`_:__IELE-DATA`(W,WS),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),#dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isIeleName(CNAME)),`_orBool__BOOL`(`_==Int_`(W,#token("103","Int")),`_==Int_`(W,#token("104","Int")))) ensures #token("true","Bool") [UNIQUE_ID(a7b74526887927ed51be0c9eea53c74c519ac15dbccebb29235f99436efde011) contentStartColumn(10) contentStartLine(198) org.kframework.attributes.Location(Location(198,10,199,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp0, t := c5.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
				if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varWS := kapp0.List[1] // lhs KVariable WS
					if varNBITS, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
							varINSTRS := c8 // lhs KVariable INSTRS
							// KSequence, size 0:.K
							// REQUIRES
							eval3031, err3031 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err3031 != nil {
								return m.NoResult, err3031
							}
							eval3032, err3032 := evalIsInstructions( // isInstructions(INSTRS)
								varINSTRS,
								config, -1)
							if err3032 != nil {
								return m.NoResult, err3032
							}
							eval3033, err3033 := evalIsIeleName( // isIeleName(NAME)
								varNAME,
								config, -1)
							if err3033 != nil {
								return m.NoResult, err3033
							}
							eval3034, err3034 := evalIsIeleName( // isIeleName(CNAME)
								varCNAME,
								config, -1)
							if err3034 != nil {
								return m.NoResult, err3034
							}
							eval3035, err3035 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("103","Int"))
								varW,
								/* rhs KToken */ m.NewIntFromString("103"),
								config, -1)
							if err3035 != nil {
								return m.NoResult, err3035
							}
							eval3036, err3036 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("104","Int"))
								varW,
								/* rhs KToken */ m.NewIntFromString("104"),
								config, -1)
							if err3036 != nil {
								return m.NoResult, err3036
							}
							if ((((m.IsTrue(eval3031)) &&
							   (m.IsTrue(eval3032))) &&
							   (m.IsTrue(eval3033)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
							   (m.IsTrue(eval3034))) &&
							   ((m.IsTrue(eval3035)) || (m.IsTrue(eval3036))) {
								// RHS
								traceRuleApply("FUNC", 2577, "{| rule #dasmFunction(#token(\"false\",\"Bool\"),NAME,CNAME,SIG,`_:__IELE-DATA`(W,WS),NBITS,FUNCS,INSTRS,.K)=>topLevelDefinitionList(`define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),SIG),#toBlocks(INSTRS)),#dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isIeleName(CNAME)),`_orBool__BOOL`(`_==Int_`(W,#token(\"103\",\"Int\")),`_==Int_`(W,#token(\"104\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a7b74526887927ed51be0c9eea53c74c519ac15dbccebb29235f99436efde011) contentStartColumn(10) contentStartLine(198) org.kframework.attributes.Location(Location(198,10,199,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
								eval3037, err3037 := evalXhashtoBlocks( // #toBlocks(INSTRS)
									varINSTRS,
									config, -1)
								if err3037 != nil {
									return m.NoResult, err3037
								}
								eval3038, err3038 := evalXhashdasmFunctions( // #dasmFunctions(`_:__IELE-DATA`(W,WS),NBITS,FUNCS,CNAME)
									&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
										varW,
										varWS,
									}},
									varNBITS,
									varFUNCS,
									varCNAME,
									config, -1)
								if err3038 != nil {
									return m.NoResult, err3038
								}
								return &m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
									&m.KApply{Label: m.LblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is define_{_}_IELE-COMMON
										&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												varNAME,
											}},
											varSIG,
										}},
										eval3037,
									}},
									eval3038,
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2578
	// source: iele-binary.k @207
	// {| rule #dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,OP)=>#dasmFunction(PUBLIC,NAME,CNAME,SIG,#drop(#opWidth(OP,NBITS),WS),NBITS,FUNCS,instructionList(#dasmInstruction(OP,#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),#drop(#opCodeWidth(OP),WS)),NBITS,FUNCS,CNAME),INSTRS),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)),isBool(PUBLIC)),isOpCode(OP)) ensures #token("true","Bool") [UNIQUE_ID(2f2efb0c3c67ada89916d7aa075f109b896df2653b6ea8ac4b827da34d088346) contentStartColumn(10) contentStartLine(207) org.kframework.attributes.Location(Location(207,10,207,308)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varPUBLIC, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := c5 // lhs KVariable WS
			if varNBITS, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
					varINSTRS := c8 // lhs KVariable INSTRS
					varOP := c9 // lhs KVariable OP
					// REQUIRES
					eval3039, err3039 := evalIsWordStack( // isWordStack(WS)
						varWS,
						config, -1)
					if err3039 != nil {
						return m.NoResult, err3039
					}
					eval3040, err3040 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err3040 != nil {
						return m.NoResult, err3040
					}
					eval3041, err3041 := evalIsIeleName( // isIeleName(NAME)
						varNAME,
						config, -1)
					if err3041 != nil {
						return m.NoResult, err3041
					}
					eval3042, err3042 := evalIsIeleName( // isIeleName(CNAME)
						varCNAME,
						config, -1)
					if err3042 != nil {
						return m.NoResult, err3042
					}
					eval3043, err3043 := evalIsOpCode( // isOpCode(OP)
						varOP,
						config, -1)
					if err3043 != nil {
						return m.NoResult, err3043
					}
					if ((((m.IsTrue(eval3039)) &&
					   (m.IsTrue(eval3040))) &&
					   (m.IsTrue(eval3041)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
					   (m.IsTrue(eval3042)) /* && */ /* rhs precomputed isBool(PUBLIC) */ ) &&
					   (m.IsTrue(eval3043)) {
						// RHS
						traceRuleApply("FUNC", 2578, "{| rule #dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,OP)=>#dasmFunction(PUBLIC,NAME,CNAME,SIG,#drop(#opWidth(OP,NBITS),WS),NBITS,FUNCS,instructionList(#dasmInstruction(OP,#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),#drop(#opCodeWidth(OP),WS)),NBITS,FUNCS,CNAME),INSTRS),.K) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)),isBool(PUBLIC)),isOpCode(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2f2efb0c3c67ada89916d7aa075f109b896df2653b6ea8ac4b827da34d088346) contentStartColumn(10) contentStartLine(207) org.kframework.attributes.Location(Location(207,10,207,308)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval3046, err3046 := evalXhashopWidth( // #opWidth(OP,NBITS)
							varOP,
							varNBITS,
							config, -1)
						if err3046 != nil {
							return m.NoResult, err3046
						}
						eval3045, err3045 := evalXhashdrop( // #drop(#opWidth(OP,NBITS),WS)
							eval3046,
							varWS,
							config, -1)
						if err3045 != nil {
							return m.NoResult, err3045
						}
						eval3050, err3050 := evalXhashopWidth( // #opWidth(OP,NBITS)
							varOP,
							varNBITS,
							config, -1)
						if err3050 != nil {
							return m.NoResult, err3050
						}
						eval3051, err3051 := evalXhashopCodeWidth( // #opCodeWidth(OP)
							varOP,
							config, -1)
						if err3051 != nil {
							return m.NoResult, err3051
						}
						eval3049, err3049 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP))
							eval3050,
							eval3051,
							config, -1)
						if err3049 != nil {
							return m.NoResult, err3049
						}
						eval3053, err3053 := evalXhashopCodeWidth( // #opCodeWidth(OP)
							varOP,
							config, -1)
						if err3053 != nil {
							return m.NoResult, err3053
						}
						eval3052, err3052 := evalXhashdrop( // #drop(#opCodeWidth(OP),WS)
							eval3053,
							varWS,
							config, -1)
						if err3052 != nil {
							return m.NoResult, err3052
						}
						eval3048, err3048 := evalXhashtake( // #take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),#drop(#opCodeWidth(OP),WS))
							eval3049,
							eval3052,
							config, -1)
						if err3048 != nil {
							return m.NoResult, err3048
						}
						eval3047, err3047 := evalXhashdasmInstruction( // #dasmInstruction(OP,#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),#drop(#opCodeWidth(OP),WS)),NBITS,FUNCS,CNAME)
							varOP,
							eval3048,
							varNBITS,
							varFUNCS,
							varCNAME,
							config, -1)
						if err3047 != nil {
							return m.NoResult, err3047
						}
						eval3044, err3044 := evalXhashdasmFunction( // #dasmFunction(PUBLIC,NAME,CNAME,SIG,#drop(#opWidth(OP,NBITS),WS),NBITS,FUNCS,instructionList(#dasmInstruction(OP,#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),#drop(#opCodeWidth(OP),WS)),NBITS,FUNCS,CNAME),INSTRS),.K)
							varPUBLIC,
							varNAME,
							varCNAME,
							varSIG,
							eval3045,
							varNBITS,
							varFUNCS,
							&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
								eval3047,
								varINSTRS,
							}},
							m.EmptyKSequence,
							config, -1)
						if err3044 != nil {
							return m.NoResult, err3044
						}
						return eval3044, nil
					}
				}
			}
		}
	}

	// rule #2579
	// source: iele-binary.k @205
	// {| rule #dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,.K)=>#dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,#dasmOpCode(WS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)),isBool(PUBLIC)) ensures #token("true","Bool") [UNIQUE_ID(e82976336d1464e3582ae325b0b95f8f0eb7baa5f992c0379672e347b35ee084) contentStartColumn(10) contentStartLine(205) org.kframework.attributes.Location(Location(205,10,205,165)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varPUBLIC, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		varNAME := c2 // lhs KVariable NAME
		varCNAME := c3 // lhs KVariable CNAME
		if varSIG, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := c5 // lhs KVariable WS
			if varNBITS, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varFUNCS, t := c7.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
					varINSTRS := c8 // lhs KVariable INSTRS
					// KSequence, size 0:.K
					// REQUIRES
					eval3054, err3054 := evalIsWordStack( // isWordStack(WS)
						varWS,
						config, -1)
					if err3054 != nil {
						return m.NoResult, err3054
					}
					eval3055, err3055 := evalIsInstructions( // isInstructions(INSTRS)
						varINSTRS,
						config, -1)
					if err3055 != nil {
						return m.NoResult, err3055
					}
					eval3056, err3056 := evalIsIeleName( // isIeleName(NAME)
						varNAME,
						config, -1)
					if err3056 != nil {
						return m.NoResult, err3056
					}
					eval3057, err3057 := evalIsIeleName( // isIeleName(CNAME)
						varCNAME,
						config, -1)
					if err3057 != nil {
						return m.NoResult, err3057
					}
					if (((m.IsTrue(eval3054)) &&
					   (m.IsTrue(eval3055))) &&
					   (m.IsTrue(eval3056)) /* && */ /* rhs precomputed isInt(SIG) */  /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
					   (m.IsTrue(eval3057)) /* && */ /* rhs precomputed isBool(PUBLIC) */  {
						// RHS
						traceRuleApply("FUNC", 2579, "{| rule #dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,.K)=>#dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,#dasmOpCode(WS)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInstructions(INSTRS)),isIeleName(NAME)),isInt(SIG)),isMap(FUNCS)),isInt(NBITS)),isIeleName(CNAME)),isBool(PUBLIC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e82976336d1464e3582ae325b0b95f8f0eb7baa5f992c0379672e347b35ee084) contentStartColumn(10) contentStartLine(205) org.kframework.attributes.Location(Location(205,10,205,165)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval3059, err3059 := evalXhashdasmOpCode( // #dasmOpCode(WS)
							varWS,
							config, -1)
						if err3059 != nil {
							return m.NoResult, err3059
						}
						eval3058, err3058 := evalXhashdasmFunction( // #dasmFunction(PUBLIC,NAME,CNAME,SIG,WS,NBITS,FUNCS,INSTRS,#dasmOpCode(WS))
							varPUBLIC,
							varNAME,
							varCNAME,
							varSIG,
							varWS,
							varNBITS,
							varFUNCS,
							varINSTRS,
							eval3059,
							config, -1)
						if err3058 != nil {
							return m.NoResult, err3058
						}
						return eval3058, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmFunction", args: []m.K{c1, c2, c3, c4, c5, c6, c7, c8, c9}}
}

func evalIsAddModInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2580
	// source: ? @?
	// {| rule isAddModInst(#KToken(#token("AddModInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAddModInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2580, "{| rule isAddModInst(#KToken(#token(\"AddModInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2581
	// source: ? @?
	// {| rule isAddModInst(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval3060, err3060 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3060 != nil {
			return m.NoResult, err3060
		}
		eval3061, err3061 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err3061 != nil {
			return m.NoResult, err3061
		}
		eval3062, err3062 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err3062 != nil {
			return m.NoResult, err3062
		}
		eval3063, err3063 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err3063 != nil {
			return m.NoResult, err3063
		}
		if (((m.IsTrue(eval3060)) &&
		   (m.IsTrue(eval3061))) &&
		   (m.IsTrue(eval3062))) &&
		   (m.IsTrue(eval3063)) {
			// RHS
			traceRuleApply("FUNC", 2581, "{| rule isAddModInst(`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2582
	// source: ? @?
	// {| rule isAddModInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2582, "{| rule isAddModInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalRandInt(c m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.rand
	lbl := m.LblRandInt // randInt
	sort := m.SortInt
	if hookRes, hookErr := intHooks.rand(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.rand, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalRandInt", args: []m.K{c}}
}

func evalIntSizesArr(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2583
	// source: data.k @161
	// {| rule intSizesArr(ARR,I,SCHED)=>intSizesAux(ARR,I,#token("0","Int"),SCHED) requires `_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(f69279dc118e72410269a87ac78db2c7b7f5866a33a6a6af1c83c3ddb893a9d0) contentStartColumn(10) contentStartLine(161) org.kframework.attributes.Location(Location(161,10,161,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varARR, t := c1.(*m.Array); t && varARR.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
		if varI, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			varSCHED := c3 // lhs KVariable SCHED
			// REQUIRES
			eval3064, err3064 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err3064 != nil {
				return m.NoResult, err3064
			}
			if /* rhs precomputed isInt(I) && isArray(ARR) */ /* && */
			   m.IsTrue(eval3064) {
				// RHS
				traceRuleApply("FUNC", 2583, "{| rule intSizesArr(ARR,I,SCHED)=>intSizesAux(ARR,I,#token(\"0\",\"Int\"),SCHED) requires `_andBool_`(`_andBool_`(isInt(I),isArray(ARR)),isSchedule(SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f69279dc118e72410269a87ac78db2c7b7f5866a33a6a6af1c83c3ddb893a9d0) contentStartColumn(10) contentStartLine(161) org.kframework.attributes.Location(Location(161,10,161,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3065, err3065 := evalIntSizesAux( // intSizesAux(ARR,I,#token("0","Int"),SCHED)
					varARR,
					varI,
					/* rhs KToken */ m.NewIntFromString("0"),
					varSCHED,
					config, -1)
				if err3065 != nil {
					return m.NoResult, err3065
				}
				return eval3065, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalIntSizesArr", args: []m.K{c1, c2, c3}}
}

func evalXhashcloseXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.close
	lbl := m.LblXhashcloseXlparenXuXrparenXuKXhyphenIO // #close(_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.close(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.close, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcloseXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalIsTimestampCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2584
	// source: ? @?
	// {| rule isTimestampCell(#KToken(#token("TimestampCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTimestampCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2584, "{| rule isTimestampCell(#KToken(#token(\"TimestampCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2585
	// source: ? @?
	// {| rule isTimestampCell(`<timestamp>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttimestampXgt && len(kapp0.List) == 1 { // `<timestamp>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2585, "{| rule isTimestampCell(`<timestamp>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2586
	// source: ? @?
	// {| rule isTimestampCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2586, "{| rule isTimestampCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalKeysXulistXlparenXuXrparenXuMAP(c m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.keys_list
	lbl := m.LblKeysXulistXlparenXuXrparenXuMAP // keys_list(_)_MAP
	sort := m.SortList
	if hookRes, hookErr := mapHooks.keysList(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.keys_list, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalKeysXulistXlparenXuXrparenXuMAP", args: []m.K{c}}
}

func evalFreshID(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2587
	// source: domains.k @745
	// {| rule freshId(I)=>`String2Id`(`_+String__STRING`(#token("\"_\"","String"),`Int2String`(I))) requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(cb89ef33f1b27d7db53de8a3c240cc3b944a9a0a9559c32b1b97c7bfec87bfa2) contentStartColumn(8) contentStartLine(745) org.kframework.attributes.Location(Location(745,8,745,62)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(I)
		// RHS
		traceRuleApply("FUNC", 2587, "{| rule freshId(I)=>`String2Id`(`_+String__STRING`(#token(\"\\\"_\\\"\",\"String\"),`Int2String`(I))) requires isInt(I) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cb89ef33f1b27d7db53de8a3c240cc3b944a9a0a9559c32b1b97c7bfec87bfa2) contentStartColumn(8) contentStartLine(745) org.kframework.attributes.Location(Location(745,8,745,62)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3068, err3068 := evalInt2String( // `Int2String`(I)
			varI,
			config, -1)
		if err3068 != nil {
			return m.NoResult, err3068
		}
		eval3067, err3067 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(#token("\"_\"","String"),`Int2String`(I))
			/* rhs KToken */ m.NewString("_"),
			eval3068,
			config, -1)
		if err3067 != nil {
			return m.NoResult, err3067
		}
		eval3066, err3066 := evalString2ID( // `String2Id`(`_+String__STRING`(#token("\"_\"","String"),`Int2String`(I)))
			eval3067,
			config, -1)
		if err3066 != nil {
			return m.NoResult, err3066
		}
		return eval3066, nil
	}

	return m.NoResult, &stuckError{funcName: "evalFreshID", args: []m.K{c}}
}

func evalXuorElseBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.orElse
	lbl := m.LblXuorElseBoolXuXuBOOL // _orElseBool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.orElse(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.orElse, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2588
	// source: domains.k @325
	// {| rule `_orElseBool__BOOL`(K,#token("false","Bool"))=>K requires isBool(K) ensures #token("true","Bool") [UNIQUE_ID(8c7774b237a73a62ffd53be8d97ac73eb2f040dcf41983ea18840919b416d291) contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varK, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(K)
			// RHS
			traceRuleApply("FUNC", 2588, "{| rule `_orElseBool__BOOL`(K,#token(\"false\",\"Bool\"))=>K requires isBool(K) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c7774b237a73a62ffd53be8d97ac73eb2f040dcf41983ea18840919b416d291) contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varK, nil
		}
	}

	// rule #2589
	// source: domains.k @324
	// {| rule `_orElseBool__BOOL`(#token("false","Bool"),K)=>K requires isBool(K) ensures #token("true","Bool") [UNIQUE_ID(efdd958595a7fecb549f4368ba6097862b61abc903a6d33684803a3a0043bda8) contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if varK, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K)
			// RHS
			traceRuleApply("FUNC", 2589, "{| rule `_orElseBool__BOOL`(#token(\"false\",\"Bool\"),K)=>K requires isBool(K) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(efdd958595a7fecb549f4368ba6097862b61abc903a6d33684803a3a0043bda8) contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,37)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varK, nil
		}
	}

	// rule #2590
	// source: domains.k @322
	// {| rule `_orElseBool__BOOL`(#token("true","Bool"),_3)=>#token("true","Bool") requires isBool(_3) ensures #token("true","Bool") [UNIQUE_ID(6ea998be2fb9b60b7964c4b4939293b6fecb47f52a53031c6227218949cf22f0) contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolTrue) { // #token("true","Bool")
		if _, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(_3)
			// RHS
			traceRuleApply("FUNC", 2590, "{| rule `_orElseBool__BOOL`(#token(\"true\",\"Bool\"),_3)=>#token(\"true\",\"Bool\") requires isBool(_3) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ea998be2fb9b60b7964c4b4939293b6fecb47f52a53031c6227218949cf22f0) contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2591
	// source: domains.k @323
	// {| rule `_orElseBool__BOOL`(_2,#token("true","Bool"))=>#token("true","Bool") requires isBool(_2) ensures #token("true","Bool") [UNIQUE_ID(2882f8b0a388fe37313c6b828cb9039a9838984f56e50b5095476c319b3dfbd8) contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,323,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolTrue) { // #token("true","Bool")
			// REQUIRES precomputed isBool(_2)
			// RHS
			traceRuleApply("FUNC", 2591, "{| rule `_orElseBool__BOOL`(_2,#token(\"true\",\"Bool\"))=>#token(\"true\",\"Bool\") requires isBool(_2) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2882f8b0a388fe37313c6b828cb9039a9838984f56e50b5095476c319b3dfbd8) contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,323,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuorElseBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalIsPeakMemoryCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2592
	// source: ? @?
	// {| rule isPeakMemoryCellOpt(`<peakMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpeakMemoryXgt && len(kapp0.List) == 1 { // `<peakMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2592, "{| rule isPeakMemoryCellOpt(`<peakMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2593
	// source: ? @?
	// {| rule isPeakMemoryCellOpt(#KToken(#token("PeakMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPeakMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2593, "{| rule isPeakMemoryCellOpt(#KToken(#token(\"PeakMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2594
	// source: ? @?
	// {| rule isPeakMemoryCellOpt(noPeakMemoryCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoPeakMemoryCell && len(kapp0.List) == 0 { // noPeakMemoryCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2594, "{| rule isPeakMemoryCellOpt(noPeakMemoryCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2595
	// source: ? @?
	// {| rule isPeakMemoryCellOpt(#KToken(#token("PeakMemoryCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPeakMemoryCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2595, "{| rule isPeakMemoryCellOpt(#KToken(#token(\"PeakMemoryCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2596
	// source: ? @?
	// {| rule isPeakMemoryCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2596, "{| rule isPeakMemoryCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashregRange(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2597
	// source: iele.k @376
	// {| rule #regRange(N)=>#regRangeAux(#token("0","Int"),N) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(79b5136cee79d42de488dba0dc8401d4b605c7ec820fe9b1604e303581ed1998) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 2597, "{| rule #regRange(N)=>#regRangeAux(#token(\"0\",\"Int\"),N) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(79b5136cee79d42de488dba0dc8401d4b605c7ec820fe9b1604e303581ed1998) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3069, err3069 := evalXhashregRangeAux( // #regRangeAux(#token("0","Int"),N)
			/* rhs KToken */ m.NewIntFromString("0"),
			varN,
			config, -1)
		if err3069 != nil {
			return m.NoResult, err3069
		}
		return eval3069, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashregRange", args: []m.K{c}}
}

func evalXhashisValidFunction(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2598
	// source: iele-binary.k @186
	// {| rule #isValidFunction(`_:__IELE-DATA`(W,WS),NBITS,SIZE)=>#isValidFunctions(`_:__IELE-DATA`(W,WS),NBITS,SIZE) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(W)),isInt(NBITS)),`_orBool__BOOL`(`_==Int_`(W,#token("103","Int")),`_==Int_`(W,#token("104","Int")))) ensures #token("true","Bool") [UNIQUE_ID(b4dd1e1aa2a37a1731045f9099a2f5c96659df0408a98b25ce75470cfabd51b1) contentStartColumn(10) contentStartLine(186) org.kframework.attributes.Location(Location(186,10,187,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval3070, err3070 := evalIsWordStack( // isWordStack(WS)
						varWS,
						config, -1)
					if err3070 != nil {
						return m.NoResult, err3070
					}
					eval3071, err3071 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("103","Int"))
						varW,
						/* rhs KToken */ m.NewIntFromString("103"),
						config, -1)
					if err3071 != nil {
						return m.NoResult, err3071
					}
					eval3072, err3072 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("104","Int"))
						varW,
						/* rhs KToken */ m.NewIntFromString("104"),
						config, -1)
					if err3072 != nil {
						return m.NoResult, err3072
					}
					if (m.IsTrue(eval3070) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
					   ((m.IsTrue(eval3071)) || (m.IsTrue(eval3072))) {
						// RHS
						traceRuleApply("FUNC", 2598, "{| rule #isValidFunction(`_:__IELE-DATA`(W,WS),NBITS,SIZE)=>#isValidFunctions(`_:__IELE-DATA`(W,WS),NBITS,SIZE) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(W)),isInt(NBITS)),`_orBool__BOOL`(`_==Int_`(W,#token(\"103\",\"Int\")),`_==Int_`(W,#token(\"104\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b4dd1e1aa2a37a1731045f9099a2f5c96659df0408a98b25ce75470cfabd51b1) contentStartColumn(10) contentStartLine(186) org.kframework.attributes.Location(Location(186,10,187,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval3073, err3073 := evalXhashisValidFunctions( // #isValidFunctions(`_:__IELE-DATA`(W,WS),NBITS,SIZE)
							&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
								varW,
								varWS,
							}},
							varNBITS,
							varSIZE,
							config, -1)
						if err3073 != nil {
							return m.NoResult, err3073
						}
						return eval3073, nil
					}
				}
			}
		}
	}

	// rule #2599
	// source: iele-binary.k @188
	// {| rule #isValidFunction(`.WordStack_IELE-DATA`(.KList),_518,_49)=>#token("true","Bool") requires `_andBool_`(isInt(_518),`_==Int_`(_49,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c05f949b1b501e017e286dc15c019c606dab690e210214150cd414d13cc02a46) contentStartColumn(10) contentStartLine(188) org.kframework.attributes.Location(Location(188,10,188,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varXu49, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3074, err3074 := evalXuXeqXeqIntXu( // `_==Int_`(_49,#token("0","Int"))
					varXu49,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err3074 != nil {
					return m.NoResult, err3074
				}
				if /* rhs precomputed isInt(_518) */ /* && */
				   m.IsTrue(eval3074) {
					// RHS
					traceRuleApply("FUNC", 2599, "{| rule #isValidFunction(`.WordStack_IELE-DATA`(.KList),_518,_49)=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(_518),`_==Int_`(_49,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c05f949b1b501e017e286dc15c019c606dab690e210214150cd414d13cc02a46) contentStartColumn(10) contentStartLine(188) org.kframework.attributes.Location(Location(188,10,188,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2600
	// source: iele-binary.k @189
	// {| rule #isValidFunction(`_:__IELE-DATA`(W,WS),NBITS,SIZE)=>`_andBool_`(#isValidLoad(WS,`_-Int__INT`(SIZE,#token("1","Int"))),#isValidInstruction(#dasmOpCode(`_:__IELE-DATA`(W,WS)),`_:__IELE-DATA`(W,WS),NBITS,SIZE)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(W)),isInt(NBITS)),`_orBool__BOOL`(`_==Int_`(W,#token("97","Int")),`_==Int_`(W,#token("98","Int")))) ensures #token("true","Bool") [UNIQUE_ID(6dfa7d4bd241caadb3de91cb927196274ce56be16a75132c66595a06018e8d3d) contentStartColumn(10) contentStartLine(189) org.kframework.attributes.Location(Location(189,10,190,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval3075, err3075 := evalIsWordStack( // isWordStack(WS)
						varWS,
						config, -1)
					if err3075 != nil {
						return m.NoResult, err3075
					}
					eval3076, err3076 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("97","Int"))
						varW,
						/* rhs KToken */ m.NewIntFromString("97"),
						config, -1)
					if err3076 != nil {
						return m.NoResult, err3076
					}
					eval3077, err3077 := evalXuXeqXeqIntXu( // `_==Int_`(W,#token("98","Int"))
						varW,
						/* rhs KToken */ m.NewIntFromString("98"),
						config, -1)
					if err3077 != nil {
						return m.NoResult, err3077
					}
					if (m.IsTrue(eval3075) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
					   ((m.IsTrue(eval3076)) || (m.IsTrue(eval3077))) {
						// RHS
						traceRuleApply("FUNC", 2600, "{| rule #isValidFunction(`_:__IELE-DATA`(W,WS),NBITS,SIZE)=>`_andBool_`(#isValidLoad(WS,`_-Int__INT`(SIZE,#token(\"1\",\"Int\"))),#isValidInstruction(#dasmOpCode(`_:__IELE-DATA`(W,WS)),`_:__IELE-DATA`(W,WS),NBITS,SIZE)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(W)),isInt(NBITS)),`_orBool__BOOL`(`_==Int_`(W,#token(\"97\",\"Int\")),`_==Int_`(W,#token(\"98\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6dfa7d4bd241caadb3de91cb927196274ce56be16a75132c66595a06018e8d3d) contentStartColumn(10) contentStartLine(189) org.kframework.attributes.Location(Location(189,10,190,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval3080, err3080 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(SIZE,#token("1","Int"))
							varSIZE,
							/* rhs KToken */ m.NewIntFromString("1"),
							config, -1)
						if err3080 != nil {
							return m.NoResult, err3080
						}
						eval3079, err3079 := evalXhashisValidLoad( // #isValidLoad(WS,`_-Int__INT`(SIZE,#token("1","Int")))
							varWS,
							eval3080,
							config, -1)
						if err3079 != nil {
							return m.NoResult, err3079
						}
						eval3082, err3082 := evalXhashdasmOpCode( // #dasmOpCode(`_:__IELE-DATA`(W,WS))
							&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
								varW,
								varWS,
							}},
							config, -1)
						if err3082 != nil {
							return m.NoResult, err3082
						}
						eval3081, err3081 := evalXhashisValidInstruction( // #isValidInstruction(#dasmOpCode(`_:__IELE-DATA`(W,WS)),`_:__IELE-DATA`(W,WS),NBITS,SIZE)
							eval3082,
							&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
								varW,
								varWS,
							}},
							varNBITS,
							varSIZE,
							config, -1)
						if err3081 != nil {
							return m.NoResult, err3081
						}
						eval3078, err3078 := evalXuandBoolXu( // `_andBool_`(#isValidLoad(WS,`_-Int__INT`(SIZE,#token("1","Int"))),#isValidInstruction(#dasmOpCode(`_:__IELE-DATA`(W,WS)),`_:__IELE-DATA`(W,WS),NBITS,SIZE))
							eval3079,
							eval3081,
							config, -1)
						if err3078 != nil {
							return m.NoResult, err3078
						}
						return eval3078, nil
					}
				}
			}
		}
	}

	// rule #2601
	// source: iele-binary.k @191
	// {| rule #isValidFunction(WS,NBITS,SIZE)=>#isValidInstruction(#dasmOpCode(WS),WS,NBITS,SIZE) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)) ensures #token("true","Bool") [UNIQUE_ID(957557a3246f649e3f9f863170c3dcbe9c39a013ee5660a28a8a3334a79f36c8) contentStartColumn(10) contentStartLine(191) org.kframework.attributes.Location(Location(191,10,191,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c1 // lhs KVariable WS
		if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varSIZE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3083, err3083 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err3083 != nil {
					return m.NoResult, err3083
				}
				if m.IsTrue(eval3083) /* && */ /* rhs precomputed isInt(SIZE) */  /* && */ /* rhs precomputed isInt(NBITS) */  {
					// RHS
					traceRuleApply("FUNC", 2601, "{| rule #isValidFunction(WS,NBITS,SIZE)=>#isValidInstruction(#dasmOpCode(WS),WS,NBITS,SIZE) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(SIZE)),isInt(NBITS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(957557a3246f649e3f9f863170c3dcbe9c39a013ee5660a28a8a3334a79f36c8) contentStartColumn(10) contentStartLine(191) org.kframework.attributes.Location(Location(191,10,191,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval3085, err3085 := evalXhashdasmOpCode( // #dasmOpCode(WS)
						varWS,
						config, -1)
					if err3085 != nil {
						return m.NoResult, err3085
					}
					eval3084, err3084 := evalXhashisValidInstruction( // #isValidInstruction(#dasmOpCode(WS),WS,NBITS,SIZE)
						eval3085,
						varWS,
						varNBITS,
						varSIZE,
						config, -1)
					if err3084 != nil {
						return m.NoResult, err3084
					}
					return eval3084, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashisValidFunction", args: []m.K{c1, c2, c3}}
}

func evalXdotAccountCellMap(config m.K, guard int) (m.K, error) {
	//hook: MAP.unit
	lbl := m.LblXdotAccountCellMap // .AccountCellMap
	sort := m.SortAccountCellMap
	if hookRes, hookErr := mapHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotAccountCellMap", args: nil}
}

//var constXdotAccountCellMap K = evalXdotAccountCellMap(m.InternedBottom)

func evalIsSignedness(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2602
	// source: ? @?
	// {| rule isSignedness(signedBytes(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSignedBytes && len(kapp0.List) == 0 { // signedBytes(.KList)
		// RHS
		traceRuleApply("FUNC", 2602, "{| rule isSignedness(signedBytes(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2603
	// source: ? @?
	// {| rule isSignedness(unsignedBytes(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUnsignedBytes && len(kapp0.List) == 0 { // unsignedBytes(.KList)
		// RHS
		traceRuleApply("FUNC", 2603, "{| rule isSignedness(unsignedBytes(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2604
	// source: ? @?
	// {| rule isSignedness(#KToken(#token("Signedness","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSignedness { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2604, "{| rule isSignedness(#KToken(#token(\"Signedness\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2605
	// source: ? @?
	// {| rule isSignedness(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2605, "{| rule isSignedness(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitNregsCell(config m.K, guard int) (m.K, error) {
	// rule #2606
	// source: ? @?
	// {| rule initNregsCell(.KList)=>`<nregs>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(694ee59139ce6b48409d7bc33b38e3f68b3a1d2a7c881946f8e21e5ad12210b2) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2606, "{| rule initNregsCell(.KList)=>`<nregs>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(694ee59139ce6b48409d7bc33b38e3f68b3a1d2a7c881946f8e21e5ad12210b2) initializer()] |}")
	return &m.KApply{Label: m.LblXltnregsXgt, List: []m.K{ // as-is <nregs>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitNregsCell K = evalInitNregsCell(m.InternedBottom)

func evalXhashopCodeWidth(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2607
	// source: iele-binary.k @347
	// {| rule #opCodeWidth(`CALLADDRESS`(_610))=>#token("3","Int") requires isInt(_610) ensures #token("true","Bool") [UNIQUE_ID(10b07ee12c06ae6b250af476b625f6043fe1e285061de9efe546c3bd540d4ade) contentStartColumn(10) contentStartLine(347) org.kframework.attributes.Location(Location(347,10,347,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLADDRESS && len(kapp0.List) == 1 { // `CALLADDRESS`(_610)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_610)
			// RHS
			traceRuleApply("FUNC", 2607, "{| rule #opCodeWidth(`CALLADDRESS`(_610))=>#token(\"3\",\"Int\") requires isInt(_610) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(10b07ee12c06ae6b250af476b625f6043fe1e285061de9efe546c3bd540d4ade) contentStartColumn(10) contentStartLine(347) org.kframework.attributes.Location(Location(347,10,347,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2608
	// source: iele-binary.k @346
	// {| rule #opCodeWidth(`STATICCALLDYN`(_670,_671))=>#token("5","Int") requires `_andBool_`(isInt(_671),isInt(_670)) ensures #token("true","Bool") [UNIQUE_ID(8c47ff95560f3e57aa8d71401e6eadd2e4e024b21142d8a01a9c3e3deabe77b5) contentStartColumn(10) contentStartLine(346) org.kframework.attributes.Location(Location(346,10,346,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALLDYN && len(kapp0.List) == 2 { // `STATICCALLDYN`(_670,_671)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_671) && isInt(_670)
				// RHS
				traceRuleApply("FUNC", 2608, "{| rule #opCodeWidth(`STATICCALLDYN`(_670,_671))=>#token(\"5\",\"Int\") requires `_andBool_`(isInt(_671),isInt(_670)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8c47ff95560f3e57aa8d71401e6eadd2e4e024b21142d8a01a9c3e3deabe77b5) contentStartColumn(10) contentStartLine(346) org.kframework.attributes.Location(Location(346,10,346,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("5"), nil
			}
		}
	}

	// rule #2609
	// source: iele-binary.k @350
	// {| rule #opCodeWidth(`LOADPOS`(N,_575))=>`_+Int_`(#token("1","Int"),N) requires `_andBool_`(isInt(_575),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(7a3bf48159d6c88bab4ec06dd8c5b8daa3e789e282bc460fac5e8731f2d55d49) contentStartColumn(10) contentStartLine(350) org.kframework.attributes.Location(Location(350,10,350,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADPOS && len(kapp0.List) == 2 { // `LOADPOS`(N,_575)
		if varN, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_575) && isInt(N)
				// RHS
				traceRuleApply("FUNC", 2609, "{| rule #opCodeWidth(`LOADPOS`(N,_575))=>`_+Int_`(#token(\"1\",\"Int\"),N) requires `_andBool_`(isInt(_575),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7a3bf48159d6c88bab4ec06dd8c5b8daa3e789e282bc460fac5e8731f2d55d49) contentStartColumn(10) contentStartLine(350) org.kframework.attributes.Location(Location(350,10,350,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3086, err3086 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),N)
					/* rhs KToken */ m.NewIntFromString("1"),
					varN,
					config, -1)
				if err3086 != nil {
					return m.NoResult, err3086
				}
				return eval3086, nil
			}
		}
	}

	// rule #2610
	// source: iele-binary.k @345
	// {| rule #opCodeWidth(`STATICCALL`(_620,_621,_622))=>#token("7","Int") requires `_andBool_`(`_andBool_`(isInt(_622),isInt(_621)),isInt(_620)) ensures #token("true","Bool") [UNIQUE_ID(6cd0ac02722aa497b0ca47423714f4a8dec4bc8c6d4b5bf1fa1cc39b36ce9053) contentStartColumn(10) contentStartLine(345) org.kframework.attributes.Location(Location(345,10,345,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblSTATICCALL && len(kapp0.List) == 3 { // `STATICCALL`(_620,_621,_622)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(_622) && isInt(_621) && isInt(_620)
					// RHS
					traceRuleApply("FUNC", 2610, "{| rule #opCodeWidth(`STATICCALL`(_620,_621,_622))=>#token(\"7\",\"Int\") requires `_andBool_`(`_andBool_`(isInt(_622),isInt(_621)),isInt(_620)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6cd0ac02722aa497b0ca47423714f4a8dec4bc8c6d4b5bf1fa1cc39b36ce9053) contentStartColumn(10) contentStartLine(345) org.kframework.attributes.Location(Location(345,10,345,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.NewIntFromString("7"), nil
				}
			}
		}
	}

	// rule #2611
	// source: iele-binary.k @349
	// {| rule #opCodeWidth(_639)=>#token("3","Int") requires isCopyCreateOp(_639) ensures #token("true","Bool") [UNIQUE_ID(ad44b335c4bb6827e60949621233ccfa1ffc81405fb74c926abc87ea1187d741) contentStartColumn(10) contentStartLine(349) org.kframework.attributes.Location(Location(349,10,349,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu639 := c // lhs KVariable _639
		// REQUIRES
		eval3087, err3087 := evalIsCopyCreateOp( // isCopyCreateOp(_639)
			varXu639,
			config, -1)
		if err3087 != nil {
			return m.NoResult, err3087
		}
		if m.IsTrue(eval3087) {
			// RHS
			traceRuleApply("FUNC", 2611, "{| rule #opCodeWidth(_639)=>#token(\"3\",\"Int\") requires isCopyCreateOp(_639) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ad44b335c4bb6827e60949621233ccfa1ffc81405fb74c926abc87ea1187d741) contentStartColumn(10) contentStartLine(349) org.kframework.attributes.Location(Location(349,10,349,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2612
	// source: iele-binary.k @343
	// {| rule #opCodeWidth(`CALL`(_708,_709,_710))=>#token("7","Int") requires `_andBool_`(`_andBool_`(isInt(_708),isInt(_709)),isInt(_710)) ensures #token("true","Bool") [UNIQUE_ID(dacdea84a165c17422fc04bc58d79b9d093cac9d5f99dc0d216f9cbfef3c0b2e) contentStartColumn(10) contentStartLine(343) org.kframework.attributes.Location(Location(343,10,343,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALL && len(kapp0.List) == 3 { // `CALL`(_708,_709,_710)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(_708) && isInt(_709) && isInt(_710)
					// RHS
					traceRuleApply("FUNC", 2612, "{| rule #opCodeWidth(`CALL`(_708,_709,_710))=>#token(\"7\",\"Int\") requires `_andBool_`(`_andBool_`(isInt(_708),isInt(_709)),isInt(_710)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dacdea84a165c17422fc04bc58d79b9d093cac9d5f99dc0d216f9cbfef3c0b2e) contentStartColumn(10) contentStartLine(343) org.kframework.attributes.Location(Location(343,10,343,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.NewIntFromString("7"), nil
				}
			}
		}
	}

	// rule #2613
	// source: iele-binary.k @338
	// {| rule #opCodeWidth(`BR`(_693))=>#token("3","Int") requires isInt(_693) ensures #token("true","Bool") [UNIQUE_ID(e6f2755501349fe2052610ebd9604a4ba7c89de7ed91817693ef2e3ae45fa8c9) contentStartColumn(10) contentStartLine(338) org.kframework.attributes.Location(Location(338,10,338,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBR && len(kapp0.List) == 1 { // `BR`(_693)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_693)
			// RHS
			traceRuleApply("FUNC", 2613, "{| rule #opCodeWidth(`BR`(_693))=>#token(\"3\",\"Int\") requires isInt(_693) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e6f2755501349fe2052610ebd9604a4ba7c89de7ed91817693ef2e3ae45fa8c9) contentStartColumn(10) contentStartLine(338) org.kframework.attributes.Location(Location(338,10,338,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2614
	// source: iele-binary.k @339
	// {| rule #opCodeWidth(`BRC`(_597))=>#token("3","Int") requires isInt(_597) ensures #token("true","Bool") [UNIQUE_ID(8583078b5cbe2d3913532f21ca60ce5c9e72248cdffda13961e16a8b4fc55e13) contentStartColumn(10) contentStartLine(339) org.kframework.attributes.Location(Location(339,10,339,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRC && len(kapp0.List) == 1 { // `BRC`(_597)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_597)
			// RHS
			traceRuleApply("FUNC", 2614, "{| rule #opCodeWidth(`BRC`(_597))=>#token(\"3\",\"Int\") requires isInt(_597) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8583078b5cbe2d3913532f21ca60ce5c9e72248cdffda13961e16a8b4fc55e13) contentStartColumn(10) contentStartLine(339) org.kframework.attributes.Location(Location(339,10,339,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2615
	// source: iele-binary.k @344
	// {| rule #opCodeWidth(`CALLDYN`(_657,_658))=>#token("5","Int") requires `_andBool_`(isInt(_658),isInt(_657)) ensures #token("true","Bool") [UNIQUE_ID(8579b579b033e5b0e16439893be1065709b55d63edd89135375f65324766d2ad) contentStartColumn(10) contentStartLine(344) org.kframework.attributes.Location(Location(344,10,344,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLDYN && len(kapp0.List) == 2 { // `CALLDYN`(_657,_658)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_658) && isInt(_657)
				// RHS
				traceRuleApply("FUNC", 2615, "{| rule #opCodeWidth(`CALLDYN`(_657,_658))=>#token(\"5\",\"Int\") requires `_andBool_`(isInt(_658),isInt(_657)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8579b579b033e5b0e16439893be1065709b55d63edd89135375f65324766d2ad) contentStartColumn(10) contentStartLine(344) org.kframework.attributes.Location(Location(344,10,344,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("5"), nil
			}
		}
	}

	// rule #2616
	// source: iele-binary.k @341
	// {| rule #opCodeWidth(`LOCALCALLDYN`(_571,_572))=>#token("5","Int") requires `_andBool_`(isInt(_571),isInt(_572)) ensures #token("true","Bool") [UNIQUE_ID(1d8d6cdfb056d2493e12604b1bfdbecae8973d73fee55a4463e723886087da3c) contentStartColumn(10) contentStartLine(341) org.kframework.attributes.Location(Location(341,10,341,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALLDYN && len(kapp0.List) == 2 { // `LOCALCALLDYN`(_571,_572)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_571) && isInt(_572)
				// RHS
				traceRuleApply("FUNC", 2616, "{| rule #opCodeWidth(`LOCALCALLDYN`(_571,_572))=>#token(\"5\",\"Int\") requires `_andBool_`(isInt(_571),isInt(_572)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1d8d6cdfb056d2493e12604b1bfdbecae8973d73fee55a4463e723886087da3c) contentStartColumn(10) contentStartLine(341) org.kframework.attributes.Location(Location(341,10,341,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("5"), nil
			}
		}
	}

	// rule #2617
	// source: iele-binary.k @342
	// {| rule #opCodeWidth(`RETURN`(_669))=>#token("3","Int") requires isInt(_669) ensures #token("true","Bool") [UNIQUE_ID(558ce406b939e93b0c612bf2e805de745924d05fa1f3d817e05b1c521731f16d) contentStartColumn(10) contentStartLine(342) org.kframework.attributes.Location(Location(342,10,342,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblRETURN && len(kapp0.List) == 1 { // `RETURN`(_669)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_669)
			// RHS
			traceRuleApply("FUNC", 2617, "{| rule #opCodeWidth(`RETURN`(_669))=>#token(\"3\",\"Int\") requires isInt(_669) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(558ce406b939e93b0c612bf2e805de745924d05fa1f3d817e05b1c521731f16d) contentStartColumn(10) contentStartLine(342) org.kframework.attributes.Location(Location(342,10,342,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2618
	// source: iele-binary.k @351
	// {| rule #opCodeWidth(`LOADNEG`(N,_647))=>`_+Int_`(#token("1","Int"),N) requires `_andBool_`(isInt(_647),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(4f37822e8915bba0a364cb0af93f276e209b52bed3d7dcb5c7214f2edc1bc358) contentStartColumn(10) contentStartLine(351) org.kframework.attributes.Location(Location(351,10,351,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOADNEG && len(kapp0.List) == 2 { // `LOADNEG`(N,_647)
		if varN, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_647) && isInt(N)
				// RHS
				traceRuleApply("FUNC", 2618, "{| rule #opCodeWidth(`LOADNEG`(N,_647))=>`_+Int_`(#token(\"1\",\"Int\"),N) requires `_andBool_`(isInt(_647),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f37822e8915bba0a364cb0af93f276e209b52bed3d7dcb5c7214f2edc1bc358) contentStartColumn(10) contentStartLine(351) org.kframework.attributes.Location(Location(351,10,351,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3088, err3088 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),N)
					/* rhs KToken */ m.NewIntFromString("1"),
					varN,
					config, -1)
				if err3088 != nil {
					return m.NoResult, err3088
				}
				return eval3088, nil
			}
		}
	}

	// rule #2619
	// source: iele-binary.k @340
	// {| rule #opCodeWidth(`LOCALCALL`(_554,_555,_556))=>#token("7","Int") requires `_andBool_`(`_andBool_`(isInt(_554),isInt(_556)),isInt(_555)) ensures #token("true","Bool") [UNIQUE_ID(adf4504eabd88fe3aaaed4fbf57377e2c2dd224c4b8ddd277b3ff076d8aa235d) contentStartColumn(10) contentStartLine(340) org.kframework.attributes.Location(Location(340,10,340,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLOCALCALL && len(kapp0.List) == 3 { // `LOCALCALL`(_554,_555,_556)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(_554) && isInt(_556) && isInt(_555)
					// RHS
					traceRuleApply("FUNC", 2619, "{| rule #opCodeWidth(`LOCALCALL`(_554,_555,_556))=>#token(\"7\",\"Int\") requires `_andBool_`(`_andBool_`(isInt(_554),isInt(_556)),isInt(_555)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(adf4504eabd88fe3aaaed4fbf57377e2c2dd224c4b8ddd277b3ff076d8aa235d) contentStartColumn(10) contentStartLine(340) org.kframework.attributes.Location(Location(340,10,340,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					return /* rhs KToken */ m.NewIntFromString("7"), nil
				}
			}
		}
	}

	// rule #2620
	// source: iele-binary.k @348
	// {| rule #opCodeWidth(_602)=>#token("5","Int") requires isCreateOp(_602) ensures #token("true","Bool") [UNIQUE_ID(2215dd819ee7f204e7dd21b48c2f1b305822d1302259951cfc6e98b9f4c12c38) contentStartColumn(10) contentStartLine(348) org.kframework.attributes.Location(Location(348,10,348,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varXu602 := c // lhs KVariable _602
		// REQUIRES
		eval3089, err3089 := evalIsCreateOp( // isCreateOp(_602)
			varXu602,
			config, -1)
		if err3089 != nil {
			return m.NoResult, err3089
		}
		if m.IsTrue(eval3089) {
			// RHS
			traceRuleApply("FUNC", 2620, "{| rule #opCodeWidth(_602)=>#token(\"5\",\"Int\") requires isCreateOp(_602) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2215dd819ee7f204e7dd21b48c2f1b305822d1302259951cfc6e98b9f4c12c38) contentStartColumn(10) contentStartLine(348) org.kframework.attributes.Location(Location(348,10,348,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("5"), nil
		}
	}

	// rule #2621
	// source: iele-binary.k @337
	// {| rule #opCodeWidth(`BRLABEL`(_519))=>#token("3","Int") requires isInt(_519) ensures #token("true","Bool") [UNIQUE_ID(07ec7886a35ca5aa3cc53afc31094c9e6aa5e5a43b60d9485689a470479bbb1f) contentStartColumn(10) contentStartLine(337) org.kframework.attributes.Location(Location(337,10,337,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblBRLABEL && len(kapp0.List) == 1 { // `BRLABEL`(_519)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(_519)
			// RHS
			traceRuleApply("FUNC", 2621, "{| rule #opCodeWidth(`BRLABEL`(_519))=>#token(\"3\",\"Int\") requires isInt(_519) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(07ec7886a35ca5aa3cc53afc31094c9e6aa5e5a43b60d9485689a470479bbb1f) contentStartColumn(10) contentStartLine(337) org.kframework.attributes.Location(Location(337,10,337,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("3"), nil
		}
	}

	// rule #2622
	// source: iele-binary.k @352
	// {| rule #opCodeWidth(OP)=>#token("1","Int") requires isOpCode(OP) ensures #token("true","Bool") [UNIQUE_ID(d4a40572b0cf4d2651b830243362c802029ccc389ae5aa8ae2028cdcbac486ff) contentStartColumn(10) contentStartLine(352) org.kframework.attributes.Location(Location(352,10,352,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c // lhs KVariable OP
		// REQUIRES
		eval3090, err3090 := evalIsOpCode( // isOpCode(OP)
			varOP,
			config, -1)
		if err3090 != nil {
			return m.NoResult, err3090
		}
		if m.IsTrue(eval3090) {
			// RHS
			traceRuleApply("FUNC", 2622, "{| rule #opCodeWidth(OP)=>#token(\"1\",\"Int\") requires isOpCode(OP) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d4a40572b0cf4d2651b830243362c802029ccc389ae5aa8ae2028cdcbac486ff) contentStartColumn(10) contentStartLine(352) org.kframework.attributes.Location(Location(352,10,352,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			return /* rhs KToken */ m.NewIntFromString("1"), nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashopCodeWidth", args: []m.K{c}}
}

func evalPow256XuIELEXhyphenDATA(config m.K, guard int) (m.K, error) {
	// rule #2623
	// source: data.k @34
	// {| rule `pow256_IELE-DATA`(.KList)=>`_^Int__INT`(#token("2","Int"),#token("256","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(783d1df3eda033911053a2a773755c802ede54ed3caf7a0159480ecafce22f6b) contentStartColumn(10) contentStartLine(34) org.kframework.attributes.Location(Location(34,10,34,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2623, "{| rule `pow256_IELE-DATA`(.KList)=>`_^Int__INT`(#token(\"2\",\"Int\"),#token(\"256\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(783d1df3eda033911053a2a773755c802ede54ed3caf7a0159480ecafce22f6b) contentStartColumn(10) contentStartLine(34) org.kframework.attributes.Location(Location(34,10,34,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval3091, err3091 := evalXuXxorIntXuXuINT( // `_^Int__INT`(#token("2","Int"),#token("256","Int"))
		/* rhs KToken */ m.NewIntFromString("2"),
		/* rhs KToken */ m.NewIntFromString("256"),
		config, -1)
	if err3091 != nil {
		return m.NoResult, err3091
	}
	return eval3091, nil

}

//var constPow256XuIELEXhyphenDATA K = evalPow256XuIELEXhyphenDATA(m.InternedBottom)

func evalXhashlockXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.lock
	lbl := m.LblXhashlockXlparenXuXcommaXuXrparenXuKXhyphenIO // #lock(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.lock(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.lock, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashlockXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalIsIntConstant(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #2624
	// source: ? @?
	// {| rule isIntConstant(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2624, "{| rule isIntConstant(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2625
	// source: ? @?
	// {| rule isIntConstant(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2625, "{| rule isIntConstant(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2626
	// source: ? @?
	// {| rule isIntConstant(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2626, "{| rule isIntConstant(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2627
	// source: ? @?
	// {| rule isIntConstant(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2627, "{| rule isIntConstant(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2628
	// source: ? @?
	// {| rule isIntConstant(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2628, "{| rule isIntConstant(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2629
	// source: ? @?
	// {| rule isIntConstant(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2629, "{| rule isIntConstant(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2630
	// source: ? @?
	// {| rule isIntConstant(#KToken(#token("HexConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortHexConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2630, "{| rule isIntConstant(#KToken(#token(\"HexConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2631
	// source: ? @?
	// {| rule isIntConstant(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2631, "{| rule isIntConstant(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2632
	// source: ? @?
	// {| rule isIntConstant(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2632, "{| rule isIntConstant(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2633
	// source: ? @?
	// {| rule isIntConstant(#KToken(#token("IntConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIntConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2633, "{| rule isIntConstant(#KToken(#token(\"IntConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2634
	// source: ? @?
	// {| rule isIntConstant(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2634, "{| rule isIntConstant(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2635
	// source: ? @?
	// {| rule isIntConstant(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2635, "{| rule isIntConstant(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2636
	// source: ? @?
	// {| rule isIntConstant(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2636, "{| rule isIntConstant(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2637
	// source: ? @?
	// {| rule isIntConstant(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2637, "{| rule isIntConstant(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCountAllOccurrencesXlparenXuXcommaXuXrparenXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.countAllOccurrences
	lbl := m.LblCountAllOccurrencesXlparenXuXcommaXuXrparenXuSTRING // countAllOccurrences(_,_)_STRING
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.countAllOccurrences(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.countAllOccurrences, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2638
	// source: domains.k @560
	// {| rule `countAllOccurrences(_,_)_STRING`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToCount,#token("0","Int")),lengthString(ToCount)),lengthString(Source)),ToCount)) requires `_andBool_`(`_andBool_`(isString(ToCount),isString(Source)),`_>=Int__INT`(findString(Source,ToCount,#token("0","Int")),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(9834f2e2641cb2ecf28969acaab73619cb181f1a69c9cfef5102f907edaeb71e) contentStartColumn(8) contentStartLine(560) org.kframework.attributes.Location(Location(560,8,561,60)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToCount, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES
			eval3093, err3093 := evalFindString( // findString(Source,ToCount,#token("0","Int"))
				varSource,
				varToCount,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3093 != nil {
				return m.NoResult, err3093
			}
			eval3092, err3092 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(findString(Source,ToCount,#token("0","Int")),#token("0","Int"))
				eval3093,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3092 != nil {
				return m.NoResult, err3092
			}
			if /* rhs precomputed isString(ToCount) && isString(Source) */ /* && */
			   m.IsTrue(eval3092) {
				// RHS
				traceRuleApply("FUNC", 2638, "{| rule `countAllOccurrences(_,_)_STRING`(Source,ToCount)=>`_+Int_`(#token(\"1\",\"Int\"),`countAllOccurrences(_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToCount,#token(\"0\",\"Int\")),lengthString(ToCount)),lengthString(Source)),ToCount)) requires `_andBool_`(`_andBool_`(isString(ToCount),isString(Source)),`_>=Int__INT`(findString(Source,ToCount,#token(\"0\",\"Int\")),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9834f2e2641cb2ecf28969acaab73619cb181f1a69c9cfef5102f907edaeb71e) contentStartColumn(8) contentStartLine(560) org.kframework.attributes.Location(Location(560,8,561,60)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3098, err3098 := evalFindString( // findString(Source,ToCount,#token("0","Int"))
					varSource,
					varToCount,
					/* rhs KToken */ m.NewIntFromString("0"),
					config, -1)
				if err3098 != nil {
					return m.NoResult, err3098
				}
				eval3099, err3099 := evalLengthString( // lengthString(ToCount)
					varToCount,
					config, -1)
				if err3099 != nil {
					return m.NoResult, err3099
				}
				eval3097, err3097 := evalXuXplusIntXu( // `_+Int_`(findString(Source,ToCount,#token("0","Int")),lengthString(ToCount))
					eval3098,
					eval3099,
					config, -1)
				if err3097 != nil {
					return m.NoResult, err3097
				}
				eval3100, err3100 := evalLengthString( // lengthString(Source)
					varSource,
					config, -1)
				if err3100 != nil {
					return m.NoResult, err3100
				}
				eval3096, err3096 := evalSubstrString( // substrString(Source,`_+Int_`(findString(Source,ToCount,#token("0","Int")),lengthString(ToCount)),lengthString(Source))
					varSource,
					eval3097,
					eval3100,
					config, -1)
				if err3096 != nil {
					return m.NoResult, err3096
				}
				eval3095, err3095 := evalCountAllOccurrencesXlparenXuXcommaXuXrparenXuSTRING( // `countAllOccurrences(_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToCount,#token("0","Int")),lengthString(ToCount)),lengthString(Source)),ToCount)
					eval3096,
					varToCount,
					config, -1)
				if err3095 != nil {
					return m.NoResult, err3095
				}
				eval3094, err3094 := evalXuXplusIntXu( // `_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING`(substrString(Source,`_+Int_`(findString(Source,ToCount,#token("0","Int")),lengthString(ToCount)),lengthString(Source)),ToCount))
					/* rhs KToken */ m.NewIntFromString("1"),
					eval3095,
					config, -1)
				if err3094 != nil {
					return m.NoResult, err3094
				}
				return eval3094, nil
			}
		}
	}

	// rule #2639
	// source: domains.k @558
	// {| rule `countAllOccurrences(_,_)_STRING`(Source,ToCount)=>#token("0","Int") requires `_andBool_`(`_andBool_`(isString(ToCount),isString(Source)),`_<Int__INT`(findString(Source,ToCount,#token("0","Int")),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(cb338e251d0b5234f4abbf9c60008d68dc9dd3a8b1a5a410ed51f56d43a7b5af) contentStartColumn(8) contentStartLine(558) org.kframework.attributes.Location(Location(558,8,559,59)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSource, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varToCount, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			// REQUIRES
			eval3102, err3102 := evalFindString( // findString(Source,ToCount,#token("0","Int"))
				varSource,
				varToCount,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3102 != nil {
				return m.NoResult, err3102
			}
			eval3101, err3101 := evalXuXltIntXuXuINT( // `_<Int__INT`(findString(Source,ToCount,#token("0","Int")),#token("0","Int"))
				eval3102,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3101 != nil {
				return m.NoResult, err3101
			}
			if /* rhs precomputed isString(ToCount) && isString(Source) */ /* && */
			   m.IsTrue(eval3101) {
				// RHS
				traceRuleApply("FUNC", 2639, "{| rule `countAllOccurrences(_,_)_STRING`(Source,ToCount)=>#token(\"0\",\"Int\") requires `_andBool_`(`_andBool_`(isString(ToCount),isString(Source)),`_<Int__INT`(findString(Source,ToCount,#token(\"0\",\"Int\")),#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cb338e251d0b5234f4abbf9c60008d68dc9dd3a8b1a5a410ed51f56d43a7b5af) contentStartColumn(8) contentStartLine(558) org.kframework.attributes.Location(Location(558,8,559,59)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				return /* rhs KToken */ m.NewIntFromString("0"), nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCountAllOccurrencesXlparenXuXcommaXuXrparenXuSTRING", args: []m.K{c1, c2}}
}

func evalXuXgtIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.gt
	lbl := m.LblXuXgtIntXuXuINT // _>Int__INT
	sort := m.SortBool
	if hookRes, hookErr := intHooks.gt(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.gt, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXgtIntXuXuINT", args: []m.K{c1, c2}}
}

func evalIsBeneficiaryCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2640
	// source: ? @?
	// {| rule isBeneficiaryCell(`<beneficiary>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltbeneficiaryXgt && len(kapp0.List) == 1 { // `<beneficiary>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2640, "{| rule isBeneficiaryCell(`<beneficiary>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2641
	// source: ? @?
	// {| rule isBeneficiaryCell(#KToken(#token("BeneficiaryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBeneficiaryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2641, "{| rule isBeneficiaryCell(#KToken(#token(\"BeneficiaryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2642
	// source: ? @?
	// {| rule isBeneficiaryCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2642, "{| rule isBeneficiaryCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCkara(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2643
	// source: iele-gas.k @843
	// {| rule `Ckara`(L1,L2)=>`_/Int__INT`(`_*Int__INT`(L1,#overApproxKara(L2)),L2) requires `_andBool_`(`_andBool_`(isInt(L2),isInt(L1)),`_>=Int__INT`(L1,L2)) ensures #token("true","Bool") [UNIQUE_ID(cad824eda48a1e2dc9b229b87c54d3f28497863167aac10978b15e41529b7ef8) contentStartColumn(10) contentStartLine(843) org.kframework.attributes.Location(Location(843,10,844,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varL1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varL2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3103, err3103 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(L1,L2)
				varL1,
				varL2,
				config, -1)
			if err3103 != nil {
				return m.NoResult, err3103
			}
			if /* rhs precomputed isInt(L2) && isInt(L1) */ /* && */
			   m.IsTrue(eval3103) {
				// RHS
				traceRuleApply("FUNC", 2643, "{| rule `Ckara`(L1,L2)=>`_/Int__INT`(`_*Int__INT`(L1,#overApproxKara(L2)),L2) requires `_andBool_`(`_andBool_`(isInt(L2),isInt(L1)),`_>=Int__INT`(L1,L2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(cad824eda48a1e2dc9b229b87c54d3f28497863167aac10978b15e41529b7ef8) contentStartColumn(10) contentStartLine(843) org.kframework.attributes.Location(Location(843,10,844,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3106, err3106 := evalXhashoverApproxKara( // #overApproxKara(L2)
					varL2,
					config, -1)
				if err3106 != nil {
					return m.NoResult, err3106
				}
				eval3105, err3105 := evalXuXstarIntXuXuINT( // `_*Int__INT`(L1,#overApproxKara(L2))
					varL1,
					eval3106,
					config, -1)
				if err3105 != nil {
					return m.NoResult, err3105
				}
				eval3104, err3104 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(L1,#overApproxKara(L2)),L2)
					eval3105,
					varL2,
					config, -1)
				if err3104 != nil {
					return m.NoResult, err3104
				}
				return eval3104, nil
			}
		}
	}

	// rule #2644
	// source: iele-gas.k @846
	// {| rule `Ckara`(L1,L2)=>`_/Int__INT`(`_*Int__INT`(L2,#overApproxKara(L1)),L1) requires `_andBool_`(isInt(L2),isInt(L1)) ensures #token("true","Bool") [UNIQUE_ID(70c6a2461e72fc946e1974f1c7fef618960a61796b15aaedfa68e4c5830bf68f) contentStartColumn(10) contentStartLine(846) org.kframework.attributes.Location(Location(846,10,846,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varL1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varL2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(L2) && isInt(L1)
			// RHS
			traceRuleApply("FUNC", 2644, "{| rule `Ckara`(L1,L2)=>`_/Int__INT`(`_*Int__INT`(L2,#overApproxKara(L1)),L1) requires `_andBool_`(isInt(L2),isInt(L1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(70c6a2461e72fc946e1974f1c7fef618960a61796b15aaedfa68e4c5830bf68f) contentStartColumn(10) contentStartLine(846) org.kframework.attributes.Location(Location(846,10,846,62)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval3109, err3109 := evalXhashoverApproxKara( // #overApproxKara(L1)
				varL1,
				config, -1)
			if err3109 != nil {
				return m.NoResult, err3109
			}
			eval3108, err3108 := evalXuXstarIntXuXuINT( // `_*Int__INT`(L2,#overApproxKara(L1))
				varL2,
				eval3109,
				config, -1)
			if err3108 != nil {
				return m.NoResult, err3108
			}
			eval3107, err3107 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_*Int__INT`(L2,#overApproxKara(L1)),L1)
				eval3108,
				varL1,
				config, -1)
			if err3107 != nil {
				return m.NoResult, err3107
			}
			return eval3107, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCkara", args: []m.K{c1, c2}}
}

func evalInitSubstateCell(config m.K, guard int) (m.K, error) {
	// rule #2645
	// source: ? @?
	// {| rule initSubstateCell(.KList)=>`<substate>`(initSelfDestructCell(.KList),initLogDataCell(.KList),initRefundCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b58c5aead475dee26d263f2610f0415378ac02d19bd58218871097deb0060936) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2645, "{| rule initSubstateCell(.KList)=>`<substate>`(initSelfDestructCell(.KList),initLogDataCell(.KList),initRefundCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b58c5aead475dee26d263f2610f0415378ac02d19bd58218871097deb0060936) initializer()] |}")
	eval3110, err3110 := evalInitSelfDestructCell(config, -1) // initSelfDestructCell(.KList)
	if err3110 != nil {
		return m.NoResult, err3110
	}
	eval3111, err3111 := evalInitLogDataCell(config, -1) // initLogDataCell(.KList)
	if err3111 != nil {
		return m.NoResult, err3111
	}
	eval3112, err3112 := evalInitRefundCell(config, -1) // initRefundCell(.KList)
	if err3112 != nil {
		return m.NoResult, err3112
	}
	return &m.KApply{Label: m.LblXltsubstateXgt, List: []m.K{ // as-is <substate>
		eval3110,
		eval3111,
		eval3112,
	}}, nil

}

//var constInitSubstateCell K = evalInitSubstateCell(m.InternedBottom)

func evalIsBlocks(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2646
	// source: ? @?
	// {| rule isBlocks(#KToken(#token("LabeledBlocks","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabeledBlocks { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2646, "{| rule isBlocks(#KToken(#token(\"LabeledBlocks\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2647
	// source: ? @?
	// {| rule isBlocks(labeledBlockList(K0,K1))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblLabeledBlockList && len(kapp0.List) == 2 { // labeledBlockList(K0,K1)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		doNothing(kapp0.List[1]) // varK1 := kapp0.List[1] // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2647, "{| rule isBlocks(labeledBlockList(K0,K1))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2648
	// source: ? @?
	// {| rule isBlocks(#KToken(#token("Blocks","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBlocks { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2648, "{| rule isBlocks(#KToken(#token(\"Blocks\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2649
	// source: ? @?
	// {| rule isBlocks(`___IELE-COMMON`(K0,K1))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `___IELE-COMMON`(K0,K1)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		doNothing(kapp0.List[1]) // varK1 := kapp0.List[1] // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2649, "{| rule isBlocks(`___IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2650
	// source: ? @?
	// {| rule isBlocks(`.List{"labeledBlockList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"labeledBlockList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2650, "{| rule isBlocks(`.List{\"labeledBlockList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2651
	// source: ? @?
	// {| rule isBlocks(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2651, "{| rule isBlocks(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashgcdInt(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2652
	// source: data.k @193
	// {| rule #gcdInt(A,_10)=>A requires `_andBool_`(isInt(A),`_==Int_`(_10,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b52ce910204924be523e4d7d4301a61895ab02cce1d1ce9fdf71ba1dc7ea45b4) contentStartColumn(10) contentStartLine(193) org.kframework.attributes.Location(Location(193,10,193,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varA, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varXu10, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3113, err3113 := evalXuXeqXeqIntXu( // `_==Int_`(_10,#token("0","Int"))
				varXu10,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3113 != nil {
				return m.NoResult, err3113
			}
			if /* rhs precomputed isInt(A) */ /* && */
			   m.IsTrue(eval3113) {
				// RHS
				traceRuleApply("FUNC", 2652, "{| rule #gcdInt(A,_10)=>A requires `_andBool_`(isInt(A),`_==Int_`(_10,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b52ce910204924be523e4d7d4301a61895ab02cce1d1ce9fdf71ba1dc7ea45b4) contentStartColumn(10) contentStartLine(193) org.kframework.attributes.Location(Location(193,10,193,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return varA, nil
			}
		}
	}

	// rule #2653
	// source: data.k @194
	// {| rule #gcdInt(A,B)=>#gcdInt(B,`_modInt__INT`(A,B)) requires `_andBool_`(isInt(B),isInt(A)) ensures #token("true","Bool") [UNIQUE_ID(9a92685ee3b79268a30eee8943ce33122ee568ed5b8ab0c1a72bbd7261378bd6) contentStartColumn(10) contentStartLine(194) org.kframework.attributes.Location(Location(194,10,194,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varA, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varB, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(B) && isInt(A)
			// RHS
			traceRuleApply("FUNC", 2653, "{| rule #gcdInt(A,B)=>#gcdInt(B,`_modInt__INT`(A,B)) requires `_andBool_`(isInt(B),isInt(A)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a92685ee3b79268a30eee8943ce33122ee568ed5b8ab0c1a72bbd7261378bd6) contentStartColumn(10) contentStartLine(194) org.kframework.attributes.Location(Location(194,10,194,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
			eval3115, err3115 := evalXumodIntXuXuINT( // `_modInt__INT`(A,B)
				varA,
				varB,
				config, -1)
			if err3115 != nil {
				return m.NoResult, err3115
			}
			eval3114, err3114 := evalXhashgcdInt( // #gcdInt(B,`_modInt__INT`(A,B))
				varB,
				eval3115,
				config, -1)
			if err3114 != nil {
				return m.NoResult, err3114
			}
			return eval3114, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgcdInt", args: []m.K{c1, c2}}
}

func evalBitRangeInt(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.bitRange
	lbl := m.LblBitRangeInt // bitRangeInt
	sort := m.SortInt
	if hookRes, hookErr := intHooks.bitRange(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.bitRange, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2654
	// source: domains.k @384
	// {| rule bitRangeInt(I,IDX,LEN)=>`_modInt__INT`(`_>>Int__INT`(I,IDX),`_<<Int__INT`(#token("1","Int"),LEN)) requires `_andBool_`(`_andBool_`(isInt(I),isInt(LEN)),isInt(IDX)) ensures #token("true","Bool") [UNIQUE_ID(08ec18eb216a86553c22eacaaf8b628b19097a5f4dbbbbb68a5daa77c9337449) contentStartColumn(8) contentStartLine(384) org.kframework.attributes.Location(Location(384,8,384,70)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varIDX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varLEN, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(I) && isInt(LEN) && isInt(IDX)
				// RHS
				traceRuleApply("FUNC", 2654, "{| rule bitRangeInt(I,IDX,LEN)=>`_modInt__INT`(`_>>Int__INT`(I,IDX),`_<<Int__INT`(#token(\"1\",\"Int\"),LEN)) requires `_andBool_`(`_andBool_`(isInt(I),isInt(LEN)),isInt(IDX)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(08ec18eb216a86553c22eacaaf8b628b19097a5f4dbbbbb68a5daa77c9337449) contentStartColumn(8) contentStartLine(384) org.kframework.attributes.Location(Location(384,8,384,70)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3117, err3117 := evalXuXgtXgtIntXuXuINT( // `_>>Int__INT`(I,IDX)
					varI,
					varIDX,
					config, -1)
				if err3117 != nil {
					return m.NoResult, err3117
				}
				eval3118, err3118 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),LEN)
					/* rhs KToken */ m.NewIntFromString("1"),
					varLEN,
					config, -1)
				if err3118 != nil {
					return m.NoResult, err3118
				}
				eval3116, err3116 := evalXumodIntXuXuINT( // `_modInt__INT`(`_>>Int__INT`(I,IDX),`_<<Int__INT`(#token("1","Int"),LEN))
					eval3117,
					eval3118,
					config, -1)
				if err3116 != nil {
					return m.NoResult, err3116
				}
				return eval3116, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalBitRangeInt", args: []m.K{c1, c2, c3}}
}

func evalIsProgramSizeCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2655
	// source: ? @?
	// {| rule isProgramSizeCellOpt(noProgramSizeCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoProgramSizeCell && len(kapp0.List) == 0 { // noProgramSizeCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2655, "{| rule isProgramSizeCellOpt(noProgramSizeCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2656
	// source: ? @?
	// {| rule isProgramSizeCellOpt(`<programSize>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltprogramSizeXgt && len(kapp0.List) == 1 { // `<programSize>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2656, "{| rule isProgramSizeCellOpt(`<programSize>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2657
	// source: ? @?
	// {| rule isProgramSizeCellOpt(#KToken(#token("ProgramSizeCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramSizeCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2657, "{| rule isProgramSizeCellOpt(#KToken(#token(\"ProgramSizeCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2658
	// source: ? @?
	// {| rule isProgramSizeCellOpt(#KToken(#token("ProgramSizeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortProgramSizeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2658, "{| rule isProgramSizeCellOpt(#KToken(#token(\"ProgramSizeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2659
	// source: ? @?
	// {| rule isProgramSizeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2659, "{| rule isProgramSizeCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashunparseByteStackAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2660
	// source: data.k @482
	// {| rule #unparseByteStackAux(`.WordStack_IELE-DATA`(.KList),BUFFER)=>`StringBuffer2String`(BUFFER) requires isStringBuffer(BUFFER) ensures #token("true","Bool") [UNIQUE_ID(79919e7b75963fc4a67ed3cec7e8d22c62455277efd0d89fe9092419ba0a75f3) contentStartColumn(10) contentStartLine(482) org.kframework.attributes.Location(Location(482,10,482,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		if varBUFFER, t := c2.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
			// REQUIRES precomputed isStringBuffer(BUFFER)
			// RHS
			traceRuleApply("FUNC", 2660, "{| rule #unparseByteStackAux(`.WordStack_IELE-DATA`(.KList),BUFFER)=>`StringBuffer2String`(BUFFER) requires isStringBuffer(BUFFER) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(79919e7b75963fc4a67ed3cec7e8d22c62455277efd0d89fe9092419ba0a75f3) contentStartColumn(10) contentStartLine(482) org.kframework.attributes.Location(Location(482,10,482,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3119, err3119 := evalStringBuffer2String( // `StringBuffer2String`(BUFFER)
				varBUFFER,
				config, -1)
			if err3119 != nil {
				return m.NoResult, err3119
			}
			return eval3119, nil
		}
	}

	// rule #2661
	// source: data.k @483
	// {| rule #unparseByteStackAux(`_:__IELE-DATA`(W,WS),BUFFER)=>#unparseByteStackAux(WS,`_+String__STRING-BUFFER-HOOKED`(BUFFER,chrChar(W))) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isStringBuffer(BUFFER)) ensures #token("true","Bool") [UNIQUE_ID(000feae3a9b9f6c0d32d75e647ac58ae479536fc34fe02979d10804a025b24ce) contentStartColumn(10) contentStartLine(483) org.kframework.attributes.Location(Location(483,10,483,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(W,WS)
		if varW, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varWS := kapp0.List[1] // lhs KVariable WS
			if varBUFFER, t := c2.(*m.StringBuffer); t { // lhs KVariable with hook:BUFFER.StringBuffer
				// REQUIRES
				eval3120, err3120 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err3120 != nil {
					return m.NoResult, err3120
				}
				if m.IsTrue(eval3120) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isStringBuffer(BUFFER) */  {
					// RHS
					traceRuleApply("FUNC", 2661, "{| rule #unparseByteStackAux(`_:__IELE-DATA`(W,WS),BUFFER)=>#unparseByteStackAux(WS,`_+String__STRING-BUFFER-HOOKED`(BUFFER,chrChar(W))) requires `_andBool_`(`_andBool_`(isWordStack(WS),isInt(W)),isStringBuffer(BUFFER)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(000feae3a9b9f6c0d32d75e647ac58ae479536fc34fe02979d10804a025b24ce) contentStartColumn(10) contentStartLine(483) org.kframework.attributes.Location(Location(483,10,483,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval3123, err3123 := evalChrChar( // chrChar(W)
						varW,
						config, -1)
					if err3123 != nil {
						return m.NoResult, err3123
					}
					eval3122, err3122 := evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED( // `_+String__STRING-BUFFER-HOOKED`(BUFFER,chrChar(W))
						varBUFFER,
						eval3123,
						config, -1)
					if err3122 != nil {
						return m.NoResult, err3122
					}
					eval3121, err3121 := evalXhashunparseByteStackAux( // #unparseByteStackAux(WS,`_+String__STRING-BUFFER-HOOKED`(BUFFER,chrChar(W)))
						varWS,
						eval3122,
						config, -1)
					if err3121 != nil {
						return m.NoResult, err3121
					}
					return eval3121, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashunparseByteStackAux", args: []m.K{c1, c2}}
}

func evalXhashrlpEncodeString(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2662
	// source: data.k @513
	// {| rule #rlpEncodeString(STR)=>STR requires `_andBool_`(isString(STR),`_andBool_`(`_==Int_`(lengthString(STR),#token("1","Int")),`_<Int__INT`(ordChar(STR),#token("128","Int")))) ensures #token("true","Bool") [UNIQUE_ID(a91a55d77613694d7b847967acdeeb8ed4bc9c90fe16c3950361eb9d790cb3e4) contentStartColumn(10) contentStartLine(513) org.kframework.attributes.Location(Location(513,10,513,126)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES
		eval3125, err3125 := evalLengthString( // lengthString(STR)
			varSTR,
			config, -1)
		if err3125 != nil {
			return m.NoResult, err3125
		}
		eval3124, err3124 := evalXuXeqXeqIntXu( // `_==Int_`(lengthString(STR),#token("1","Int"))
			eval3125,
			/* rhs KToken */ m.NewIntFromString("1"),
			config, -1)
		if err3124 != nil {
			return m.NoResult, err3124
		}
		eval3127, err3127 := evalOrdChar( // ordChar(STR)
			varSTR,
			config, -1)
		if err3127 != nil {
			return m.NoResult, err3127
		}
		eval3126, err3126 := evalXuXltIntXuXuINT( // `_<Int__INT`(ordChar(STR),#token("128","Int"))
			eval3127,
			/* rhs KToken */ m.NewIntFromString("128"),
			config, -1)
		if err3126 != nil {
			return m.NoResult, err3126
		}
		if /* rhs precomputed isString(STR) */ /* && */
		   (m.IsTrue(eval3124)) &&
		   (m.IsTrue(eval3126)) {
			// RHS
			traceRuleApply("FUNC", 2662, "{| rule #rlpEncodeString(STR)=>STR requires `_andBool_`(isString(STR),`_andBool_`(`_==Int_`(lengthString(STR),#token(\"1\",\"Int\")),`_<Int__INT`(ordChar(STR),#token(\"128\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a91a55d77613694d7b847967acdeeb8ed4bc9c90fe16c3950361eb9d790cb3e4) contentStartColumn(10) contentStartLine(513) org.kframework.attributes.Location(Location(513,10,513,126)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			return varSTR, nil
		}
	}

	// rule #2663
	// source: data.k @514
	// {| rule #rlpEncodeString(STR)=>#rlpEncodeLength(STR,#token("128","Int")) requires isString(STR) ensures #token("true","Bool") [UNIQUE_ID(9852afff991107c4219c1f3cc43650c5cf63bcc0fc0f1aead83c5d31ab63c2c0) contentStartColumn(10) contentStartLine(514) org.kframework.attributes.Location(Location(514,10,514,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varSTR, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(STR)
		// RHS
		traceRuleApply("FUNC", 2663, "{| rule #rlpEncodeString(STR)=>#rlpEncodeLength(STR,#token(\"128\",\"Int\")) requires isString(STR) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9852afff991107c4219c1f3cc43650c5cf63bcc0fc0f1aead83c5d31ab63c2c0) contentStartColumn(10) contentStartLine(514) org.kframework.attributes.Location(Location(514,10,514,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
		eval3128, err3128 := evalXhashrlpEncodeLength( // #rlpEncodeLength(STR,#token("128","Int"))
			varSTR,
			/* rhs KToken */ m.NewIntFromString("128"),
			config, -1)
		if err3128 != nil {
			return m.NoResult, err3128
		}
		return eval3128, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashrlpEncodeString", args: []m.K{c}}
}

func evalXuxorBoolXuXuBOOL(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BOOL.xor
	lbl := m.LblXuxorBoolXuXuBOOL // _xorBool__BOOL
	sort := m.SortBool
	if hookRes, hookErr := boolHooks.xor(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BOOL.xor, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2664
	// source: domains.k @314
	// {| rule `_xorBool__BOOL`(B,B)=>#token("false","Bool") requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(70684b52edf7d3194cd01f6e5714b364631e8d96267df666bb689e5380e13cc4) contentStartColumn(8) contentStartLine(314) org.kframework.attributes.Location(Location(314,8,314,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(varB) { // lhs KVariable, which reappears:B
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 2664, "{| rule `_xorBool__BOOL`(B,B)=>#token(\"false\",\"Bool\") requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(70684b52edf7d3194cd01f6e5714b364631e8d96267df666bb689e5380e13cc4) contentStartColumn(8) contentStartLine(314) org.kframework.attributes.Location(Location(314,8,314,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.BoolFalse, nil
		}
	}

	// rule #2665
	// source: domains.k @312
	// {| rule `_xorBool__BOOL`(#token("false","Bool"),B)=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(0b888132027262073a3306d90f4a55b0a4ea27984cd77fccd8bf29cd48efb665) contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c1.Equals(m.BoolFalse) { // #token("false","Bool")
		if varB, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 2665, "{| rule `_xorBool__BOOL`(#token(\"false\",\"Bool\"),B)=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0b888132027262073a3306d90f4a55b0a4ea27984cd77fccd8bf29cd48efb665) contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #2666
	// source: domains.k @313
	// {| rule `_xorBool__BOOL`(B,#token("false","Bool"))=>B requires isBool(B) ensures #token("true","Bool") [UNIQUE_ID(2eae84ae7b21312fecde18860149de73365b819e65aada5f952fc5b9101ae014) contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if c2.Equals(m.BoolFalse) { // #token("false","Bool")
			// REQUIRES precomputed isBool(B)
			// RHS
			traceRuleApply("FUNC", 2666, "{| rule `_xorBool__BOOL`(B,#token(\"false\",\"Bool\"))=>B requires isBool(B) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2eae84ae7b21312fecde18860149de73365b819e65aada5f952fc5b9101ae014) contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,38)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varB, nil
		}
	}

	// rule #2667
	// source: domains.k @315
	// {| rule `_xorBool__BOOL`(B1,B2)=>`notBool_`(`_==Bool__BOOL`(B1,B2)) requires `_andBool_`(isBool(B2),isBool(B1)) ensures #token("true","Bool") [UNIQUE_ID(1c34683a46438798498c925345e696fc017c0665504d0877c44e540d820b1ec7) contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varB1, t := c1.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
		if varB2, t := c2.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(B2) && isBool(B1)
			// RHS
			traceRuleApply("FUNC", 2667, "{| rule `_xorBool__BOOL`(B1,B2)=>`notBool_`(`_==Bool__BOOL`(B1,B2)) requires `_andBool_`(isBool(B2),isBool(B1)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(1c34683a46438798498c925345e696fc017c0665504d0877c44e540d820b1ec7) contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,57)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3130, err3130 := evalXuXeqXeqBoolXuXuBOOL( // `_==Bool__BOOL`(B1,B2)
				varB1,
				varB2,
				config, -1)
			if err3130 != nil {
				return m.NoResult, err3130
			}
			eval3129, err3129 := evalNotBoolXu( // `notBool_`(`_==Bool__BOOL`(B1,B2))
				eval3130,
				config, -1)
			if err3129 != nil {
				return m.NoResult, err3129
			}
			return eval3129, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXuxorBoolXuXuBOOL", args: []m.K{c1, c2}}
}

func evalInitGeneratedTopCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2668
	// source: ? @?
	// {| rule initGeneratedTopCell(Init)=>`<generatedTop>`(initKCell(Init),initSCell(Init),initExitCodeCell(.KList),initModeCell(Init),initScheduleCell(Init),initCheckGasCell(.KList),initWellFormednessCell(Init),initIeleCell(.KList),initNetworkCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(40d6c37458db46f93e23acd4f9819bee9fde6a149160bcb4237916d9347dbba4) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// RHS
		traceRuleApply("FUNC", 2668, "{| rule initGeneratedTopCell(Init)=>`<generatedTop>`(initKCell(Init),initSCell(Init),initExitCodeCell(.KList),initModeCell(Init),initScheduleCell(Init),initCheckGasCell(.KList),initWellFormednessCell(Init),initIeleCell(.KList),initNetworkCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(40d6c37458db46f93e23acd4f9819bee9fde6a149160bcb4237916d9347dbba4) initializer()] |}")
		eval3131, err3131 := evalInitKCell( // initKCell(Init)
			varInit,
			config, -1)
		if err3131 != nil {
			return m.NoResult, err3131
		}
		eval3132, err3132 := evalInitSCell( // initSCell(Init)
			varInit,
			config, -1)
		if err3132 != nil {
			return m.NoResult, err3132
		}
		eval3133, err3133 := evalInitExitCodeCell(config, -1) // initExitCodeCell(.KList)
		if err3133 != nil {
			return m.NoResult, err3133
		}
		eval3134, err3134 := evalInitModeCell( // initModeCell(Init)
			varInit,
			config, -1)
		if err3134 != nil {
			return m.NoResult, err3134
		}
		eval3135, err3135 := evalInitScheduleCell( // initScheduleCell(Init)
			varInit,
			config, -1)
		if err3135 != nil {
			return m.NoResult, err3135
		}
		eval3136, err3136 := evalInitCheckGasCell(config, -1) // initCheckGasCell(.KList)
		if err3136 != nil {
			return m.NoResult, err3136
		}
		eval3137, err3137 := evalInitWellFormednessCell( // initWellFormednessCell(Init)
			varInit,
			config, -1)
		if err3137 != nil {
			return m.NoResult, err3137
		}
		eval3138, err3138 := evalInitIeleCell(config, -1) // initIeleCell(.KList)
		if err3138 != nil {
			return m.NoResult, err3138
		}
		eval3139, err3139 := evalInitNetworkCell(config, -1) // initNetworkCell(.KList)
		if err3139 != nil {
			return m.NoResult, err3139
		}
		return &m.KApply{Label: m.LblXltgeneratedTopXgt, List: []m.K{ // as-is <generatedTop>
			eval3131,
			eval3132,
			eval3133,
			eval3134,
			eval3135,
			eval3136,
			eval3137,
			eval3138,
			eval3139,
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInitGeneratedTopCell", args: []m.K{c}}
}

func evalXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED(config m.K, guard int) (m.K, error) {
	//hook: BUFFER.empty
	lbl := m.LblXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED // .StringBuffer_STRING-BUFFER-HOOKED
	sort := m.SortStringBuffer
	if hookRes, hookErr := bufferHooks.empty(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BUFFER.empty, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotStringBufferXuSTRINGXhyphenBUFFERXhyphenHOOKED", args: nil}
}

func evalXhashdasmInstruction(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, config m.K, guard int) (m.K, error) {
	// rule #2669
	// source: iele-binary.k @229
	// {| rule #dasmInstruction(`LOADPOS`(N,W),WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(`LOADPOS`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(32a45fa79848090f4ff70f064b3a7dd903855ae0ee40c5304ca37302cade59d6) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOADPOS && len(kapp0.List) == 2 { // `LOADPOS`(N,W)
		if varN, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS := c2 // lhs KVariable WS
				if varNBITS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varFUNCS, t := c4.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varNAME := c5 // lhs KVariable NAME
						// REQUIRES
						eval3140, err3140 := evalIsWordStack( // isWordStack(WS)
							varWS,
							config, -1)
						if err3140 != nil {
							return m.NoResult, err3140
						}
						eval3141, err3141 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err3141 != nil {
							return m.NoResult, err3141
						}
						if (m.IsTrue(eval3140)) &&
						   (m.IsTrue(eval3141)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(N) */  {
							// RHS
							traceRuleApply("FUNC", 2669, "{| rule #dasmInstruction(`LOADPOS`(N,W),WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(`LOADPOS`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token(\"8\",\"Int\")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token(\"1\",\"Int\"),NBITS),#token(\"1\",\"Int\")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(32a45fa79848090f4ff70f064b3a7dd903855ae0ee40c5304ca37302cade59d6) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval3145, err3145 := evalCeilDiv( // ceilDiv(NBITS,#token("8","Int"))
								varNBITS,
								/* rhs KToken */ m.NewIntFromString("8"),
								config, -1)
							if err3145 != nil {
								return m.NoResult, err3145
							}
							eval3144, err3144 := evalXhashtake( // #take(ceilDiv(NBITS,#token("8","Int")),WS)
								eval3145,
								varWS,
								config, -1)
							if err3144 != nil {
								return m.NoResult, err3144
							}
							eval3143, err3143 := evalXhashasUnsigned( // #asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS))
								eval3144,
								config, -1)
							if err3143 != nil {
								return m.NoResult, err3143
							}
							eval3147, err3147 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),NBITS)
								/* rhs KToken */ m.NewIntFromString("1"),
								varNBITS,
								config, -1)
							if err3147 != nil {
								return m.NoResult, err3147
							}
							eval3146, err3146 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int"))
								eval3147,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err3146 != nil {
								return m.NoResult, err3146
							}
							eval3142, err3142 := evalXhashdasmInstructionAux( // #dasmInstructionAux(`LOADPOS`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME)
								&m.KApply{Label: m.LblLOADPOS, List: []m.K{ // as-is LOADPOS
									varN,
									varW,
								}},
								eval3143,
								varNBITS,
								eval3146,
								varFUNCS,
								varNAME,
								config, -1)
							if err3142 != nil {
								return m.NoResult, err3142
							}
							return eval3142, nil
						}
					}
				}
			}
		}
	}

	// rule #2670
	// source: iele-binary.k @230
	// {| rule #dasmInstruction(`LOADNEG`(N,W),WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(`LOADNEG`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(0927fa60290a409ab36041288d44b412b03bfef0d49fc13d5dc2b0834cb9f045) contentStartColumn(10) contentStartLine(230) org.kframework.attributes.Location(Location(230,10,230,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblLOADNEG && len(kapp0.List) == 2 { // `LOADNEG`(N,W)
		if varN, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varW, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varWS := c2 // lhs KVariable WS
				if varNBITS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varFUNCS, t := c4.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
						varNAME := c5 // lhs KVariable NAME
						// REQUIRES
						eval3148, err3148 := evalIsWordStack( // isWordStack(WS)
							varWS,
							config, -1)
						if err3148 != nil {
							return m.NoResult, err3148
						}
						eval3149, err3149 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err3149 != nil {
							return m.NoResult, err3149
						}
						if (m.IsTrue(eval3148)) &&
						   (m.IsTrue(eval3149)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(N) */  {
							// RHS
							traceRuleApply("FUNC", 2670, "{| rule #dasmInstruction(`LOADNEG`(N,W),WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(`LOADNEG`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token(\"8\",\"Int\")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token(\"1\",\"Int\"),NBITS),#token(\"1\",\"Int\")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(W)),isInt(NBITS)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0927fa60290a409ab36041288d44b412b03bfef0d49fc13d5dc2b0834cb9f045) contentStartColumn(10) contentStartLine(230) org.kframework.attributes.Location(Location(230,10,230,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							eval3153, err3153 := evalCeilDiv( // ceilDiv(NBITS,#token("8","Int"))
								varNBITS,
								/* rhs KToken */ m.NewIntFromString("8"),
								config, -1)
							if err3153 != nil {
								return m.NoResult, err3153
							}
							eval3152, err3152 := evalXhashtake( // #take(ceilDiv(NBITS,#token("8","Int")),WS)
								eval3153,
								varWS,
								config, -1)
							if err3152 != nil {
								return m.NoResult, err3152
							}
							eval3151, err3151 := evalXhashasUnsigned( // #asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS))
								eval3152,
								config, -1)
							if err3151 != nil {
								return m.NoResult, err3151
							}
							eval3155, err3155 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),NBITS)
								/* rhs KToken */ m.NewIntFromString("1"),
								varNBITS,
								config, -1)
							if err3155 != nil {
								return m.NoResult, err3155
							}
							eval3154, err3154 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int"))
								eval3155,
								/* rhs KToken */ m.NewIntFromString("1"),
								config, -1)
							if err3154 != nil {
								return m.NoResult, err3154
							}
							eval3150, err3150 := evalXhashdasmInstructionAux( // #dasmInstructionAux(`LOADNEG`(N,W),#asUnsigned(#take(ceilDiv(NBITS,#token("8","Int")),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME)
								&m.KApply{Label: m.LblLOADNEG, List: []m.K{ // as-is LOADNEG
									varN,
									varW,
								}},
								eval3151,
								varNBITS,
								eval3154,
								varFUNCS,
								varNAME,
								config, -1)
							if err3150 != nil {
								return m.NoResult, err3150
							}
							return eval3150, nil
						}
					}
				}
			}
		}
	}

	// rule #2671
	// source: iele-binary.k @231
	// {| rule #dasmInstruction(OP,WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(OP,#asUnsigned(#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(NBITS)),isOpCode(OP)) ensures #token("true","Bool") [UNIQUE_ID(3146855543b9818c46e3e8a5bbf7c38e4d733d3c689e7a4fd868b9b70a7dc2e1) contentStartColumn(10) contentStartLine(231) org.kframework.attributes.Location(Location(231,10,231,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varOP := c1 // lhs KVariable OP
		varWS := c2 // lhs KVariable WS
		if varNBITS, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varFUNCS, t := c4.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
				varNAME := c5 // lhs KVariable NAME
				// REQUIRES
				eval3156, err3156 := evalIsWordStack( // isWordStack(WS)
					varWS,
					config, -1)
				if err3156 != nil {
					return m.NoResult, err3156
				}
				eval3157, err3157 := evalIsIeleName( // isIeleName(NAME)
					varNAME,
					config, -1)
				if err3157 != nil {
					return m.NoResult, err3157
				}
				eval3158, err3158 := evalIsOpCode( // isOpCode(OP)
					varOP,
					config, -1)
				if err3158 != nil {
					return m.NoResult, err3158
				}
				if ((m.IsTrue(eval3156)) &&
				   (m.IsTrue(eval3157)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isInt(NBITS) */ ) &&
				   (m.IsTrue(eval3158)) {
					// RHS
					traceRuleApply("FUNC", 2671, "{| rule #dasmInstruction(OP,WS,NBITS,FUNCS,NAME)=>#dasmInstructionAux(OP,#asUnsigned(#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token(\"1\",\"Int\"),NBITS),#token(\"1\",\"Int\")),FUNCS,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isMap(FUNCS)),isInt(NBITS)),isOpCode(OP)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3146855543b9818c46e3e8a5bbf7c38e4d733d3c689e7a4fd868b9b70a7dc2e1) contentStartColumn(10) contentStartLine(231) org.kframework.attributes.Location(Location(231,10,231,214)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
					eval3163, err3163 := evalXhashopWidth( // #opWidth(OP,NBITS)
						varOP,
						varNBITS,
						config, -1)
					if err3163 != nil {
						return m.NoResult, err3163
					}
					eval3164, err3164 := evalXhashopCodeWidth( // #opCodeWidth(OP)
						varOP,
						config, -1)
					if err3164 != nil {
						return m.NoResult, err3164
					}
					eval3162, err3162 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP))
						eval3163,
						eval3164,
						config, -1)
					if err3162 != nil {
						return m.NoResult, err3162
					}
					eval3161, err3161 := evalXhashtake( // #take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),WS)
						eval3162,
						varWS,
						config, -1)
					if err3161 != nil {
						return m.NoResult, err3161
					}
					eval3160, err3160 := evalXhashasUnsigned( // #asUnsigned(#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),WS))
						eval3161,
						config, -1)
					if err3160 != nil {
						return m.NoResult, err3160
					}
					eval3166, err3166 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(#token("1","Int"),NBITS)
						/* rhs KToken */ m.NewIntFromString("1"),
						varNBITS,
						config, -1)
					if err3166 != nil {
						return m.NoResult, err3166
					}
					eval3165, err3165 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int"))
						eval3166,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err3165 != nil {
						return m.NoResult, err3165
					}
					eval3159, err3159 := evalXhashdasmInstructionAux( // #dasmInstructionAux(OP,#asUnsigned(#take(`_-Int__INT`(#opWidth(OP,NBITS),#opCodeWidth(OP)),WS)),NBITS,`_-Int__INT`(`_<<Int__INT`(#token("1","Int"),NBITS),#token("1","Int")),FUNCS,NAME)
						varOP,
						eval3160,
						varNBITS,
						eval3165,
						varFUNCS,
						varNAME,
						config, -1)
					if err3159 != nil {
						return m.NoResult, err3159
					}
					return eval3159, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmInstruction", args: []m.K{c1, c2, c3, c4, c5}}
}

func evalLookupRegisters(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2672
	// source: iele.k @370
	// {| rule lookupRegisters(operandList(`%__IELE-COMMON`(REG),OPS),REGS)=>operandList(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),lookupRegisters(OPS,REGS)) requires `_andBool_`(`_andBool_`(isInt(REG),isOperands(OPS)),isArray(REGS)) ensures #token("true","Bool") [UNIQUE_ID(f2a611f11b69c38c22e305137517a02e06aa5c98c76c58dc55fb7cc39af6bf0b) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(`%__IELE-COMMON`(REG),OPS)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblXpercentXuXuIELEXhyphenCOMMON && len(kapp1.List) == 1 { // `%__IELE-COMMON`(REG)
			if varREG, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varOPS := kapp0.List[1] // lhs KVariable OPS
				if varREGS, t := c2.(*m.Array); t && varREGS.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
					// REQUIRES
					eval3167, err3167 := evalIsOperands( // isOperands(OPS)
						varOPS,
						config, -1)
					if err3167 != nil {
						return m.NoResult, err3167
					}
					if /* rhs precomputed isInt(REG) */ /* && */
					   m.IsTrue(eval3167) /* && */ /* rhs precomputed isArray(REGS) */  {
						// RHS
						traceRuleApply("FUNC", 2672, "{| rule lookupRegisters(operandList(`%__IELE-COMMON`(REG),OPS),REGS)=>operandList(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),lookupRegisters(OPS,REGS)) requires `_andBool_`(`_andBool_`(isInt(REG),isOperands(OPS)),isArray(REGS)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f2a611f11b69c38c22e305137517a02e06aa5c98c76c58dc55fb7cc39af6bf0b) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval3169, err3169 := evalXuXlsqbXuXrsqbXuARRAYXhyphenSYNTAX( // `_[_]_ARRAY-SYNTAX`(REGS,REG)
							varREGS,
							varREG,
							config, -1)
						if err3169 != nil {
							return m.NoResult, err3169
						}
						eval3168, err3168 := evalGetInt( // getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG))
							eval3169,
							config, -1)
						if err3168 != nil {
							return m.NoResult, err3168
						}
						eval3170, err3170 := evalLookupRegisters( // lookupRegisters(OPS,REGS)
							varOPS,
							varREGS,
							config, -1)
						if err3170 != nil {
							return m.NoResult, err3170
						}
						return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
							eval3168,
							eval3170,
						}}, nil
					}
				}
			}
		}
	}

	// rule #2673
	// source: iele.k @371
	// {| rule lookupRegisters(`.List{"operandList"}`(.KList),_105)=>`.List{"operandList"}`(.KList) requires isArray(_105) ensures #token("true","Bool") [UNIQUE_ID(20826a230f8d270a9e2d1c7752dcc7773d0fd98bf056e2bd4439e7865f70eaa5) contentStartColumn(10) contentStartLine(371) org.kframework.attributes.Location(Location(371,10,371,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		if varXu105, t := c2.(*m.Array); t && varXu105.Sort == m.SortArray { // lhs KVariable with hook:ARRAY.Array
			// REQUIRES precomputed isArray(_105)
			// RHS
			traceRuleApply("FUNC", 2673, "{| rule lookupRegisters(`.List{\"operandList\"}`(.KList),_105)=>`.List{\"operandList\"}`(.KList) requires isArray(_105) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(20826a230f8d270a9e2d1c7752dcc7773d0fd98bf056e2bd4439e7865f70eaa5) contentStartColumn(10) contentStartLine(371) org.kframework.attributes.Location(Location(371,10,371,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return &m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalLookupRegisters", args: []m.K{c1, c2}}
}

func evalAccountEmpty(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2674
	// source: iele-gas.k @804
	// {| rule accountEmpty(CODE,NONCE,BAL)=>`_andBool_`(`_andBool_`(`_==K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`_==Int_`(NONCE,#token("0","Int"))),`_==Int_`(BAL,#token("0","Int"))) requires `_andBool_`(`_andBool_`(isContract(CODE),isInt(BAL)),isInt(NONCE)) ensures #token("true","Bool") [UNIQUE_ID(a7f362af97d78961fe5170e7a250ca9a5eb516e338cce46d1ab7daac744e7a0e) contentStartColumn(10) contentStartLine(804) org.kframework.attributes.Location(Location(804,10,804,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCODE := c1 // lhs KVariable CODE
		if varNONCE, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varBAL, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3171, err3171 := evalIsContract( // isContract(CODE)
					varCODE,
					config, -1)
				if err3171 != nil {
					return m.NoResult, err3171
				}
				if m.IsTrue(eval3171) /* && */ /* rhs precomputed isInt(BAL) */  /* && */ /* rhs precomputed isInt(NONCE) */  {
					// RHS
					traceRuleApply("FUNC", 2674, "{| rule accountEmpty(CODE,NONCE,BAL)=>`_andBool_`(`_andBool_`(`_==K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token(\"iele.Wallet\",\"IeleName\"),#token(\"0\",\"Int\"),#token(\"\\\"\\\"\",\"String\"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token(\"deposit\",\"IeleName\")),#token(\"0\",\"Int\")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{\"operandList\"}`(.KList)),`.List{\"instructionList\"}`(.KList)),`.List{\"labeledBlockList\"}`(.KList))),`.List{\"topLevelDefinitionList\"}`(.KList))),`.List{\"contractDefinitionList\"}`(.KList))),`_==Int_`(NONCE,#token(\"0\",\"Int\"))),`_==Int_`(BAL,#token(\"0\",\"Int\"))) requires `_andBool_`(`_andBool_`(isContract(CODE),isInt(BAL)),isInt(NONCE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a7f362af97d78961fe5170e7a250ca9a5eb516e338cce46d1ab7daac744e7a0e) contentStartColumn(10) contentStartLine(804) org.kframework.attributes.Location(Location(804,10,804,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval3174, err3174 := evalXuXeqXeqKXu( // `_==K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))
						varCODE,
						&m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
							&m.KApply{Label: m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, List: []m.K{ // as-is contract_!__{_}_IELE-CONFIGURATION
								/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "iele.Wallet"},
								/* rhs KToken */ m.NewIntFromString("0"),
								/* rhs KToken */ m.NewString(""),
								&m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
									&m.KApply{Label: m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, List: []m.K{ // as-is definepublic_{_}_IELE-COMMON
										&m.KApply{Label: m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, List: []m.K{ // as-is _(_)_IELE-COMMON
											&m.KApply{Label: m.LblXatXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is @__IELE-COMMON
												/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
											}},
											/* rhs KToken */ m.NewIntFromString("0"),
										}},
										&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
											&m.KApply{Label: m.LblInstructionList, List: []m.K{ // as-is instructionList
												&m.KApply{Label: m.LblRetXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ret__IELE-COMMON
													&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
													}},
												}},
												&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
												}},
											}},
											&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
											}},
										}},
									}},
									&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
									}},
								}},
							}},
							&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
							}},
						}},
						config, -1)
					if err3174 != nil {
						return m.NoResult, err3174
					}
					eval3175, err3175 := evalXuXeqXeqIntXu( // `_==Int_`(NONCE,#token("0","Int"))
						varNONCE,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err3175 != nil {
						return m.NoResult, err3175
					}
					eval3173, err3173 := evalXuandBoolXu( // `_andBool_`(`_==K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`_==Int_`(NONCE,#token("0","Int")))
						eval3174,
						eval3175,
						config, -1)
					if err3173 != nil {
						return m.NoResult, err3173
					}
					eval3176, err3176 := evalXuXeqXeqIntXu( // `_==Int_`(BAL,#token("0","Int"))
						varBAL,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err3176 != nil {
						return m.NoResult, err3176
					}
					eval3172, err3172 := evalXuandBoolXu( // `_andBool_`(`_andBool_`(`_==K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`_==Int_`(NONCE,#token("0","Int"))),`_==Int_`(BAL,#token("0","Int")))
						eval3173,
						eval3176,
						config, -1)
					if err3172 != nil {
						return m.NoResult, err3172
					}
					return eval3172, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalAccountEmpty", args: []m.K{c1, c2, c3}}
}

func evalXhashtoList(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2675
	// source: iele-node.k @150
	// {| rule #toList(`.List{"operandList"}`(.KList))=>`.List`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e28335fc1fbe31581ca287b38490e52d1db0ac69e7b9c25da9a4b7b14426901) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2675, "{| rule #toList(`.List{\"operandList\"}`(.KList))=>`.List`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8e28335fc1fbe31581ca287b38490e52d1db0ac69e7b9c25da9a4b7b14426901) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3177, err3177 := evalXdotList(config, -1) // `.List`(.KList)
		if err3177 != nil {
			return m.NoResult, err3177
		}
		return eval3177, nil
	}

	// rule #2676
	// source: iele-node.k @151
	// {| rule #toList(operandList(I,L))=>`_List_`(`ListItem`(I),#toList(L)) requires `_andBool_`(isInt(I),isInts(L)) ensures #token("true","Bool") [UNIQUE_ID(a26408024d946fcd2f869e179bcdb6fa27d521f7a4db31049f37cdf908c5cf29) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(I,L)
		if varI, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varL := kapp0.List[1] // lhs KVariable L
			// REQUIRES
			eval3178, err3178 := evalIsInts( // isInts(L)
				varL,
				config, -1)
			if err3178 != nil {
				return m.NoResult, err3178
			}
			if /* rhs precomputed isInt(I) */ /* && */
			   m.IsTrue(eval3178) {
				// RHS
				traceRuleApply("FUNC", 2676, "{| rule #toList(operandList(I,L))=>`_List_`(`ListItem`(I),#toList(L)) requires `_andBool_`(isInt(I),isInts(L)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a26408024d946fcd2f869e179bcdb6fa27d521f7a4db31049f37cdf908c5cf29) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3180, err3180 := evalListItem( // `ListItem`(I)
					varI,
					config, -1)
				if err3180 != nil {
					return m.NoResult, err3180
				}
				eval3181, err3181 := evalXhashtoList( // #toList(L)
					varL,
					config, -1)
				if err3181 != nil {
					return m.NoResult, err3181
				}
				eval3179, err3179 := evalXuListXu( // `_List_`(`ListItem`(I),#toList(L))
					eval3180,
					eval3181,
					config, -1)
				if err3179 != nil {
					return m.NoResult, err3179
				}
				return eval3179, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashtoList", args: []m.K{c}}
}

func evalIsSubstateCellFragment(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2677
	// source: ? @?
	// {| rule isSubstateCellFragment(#KToken(#token("SubstateCellFragment","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSubstateCellFragment { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2677, "{| rule isSubstateCellFragment(#KToken(#token(\"SubstateCellFragment\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2678
	// source: ? @?
	// {| rule isSubstateCellFragment(`<substate>-fragment`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isSelfDestructCellOpt(K0),isLogDataCellOpt(K1)),isRefundCellOpt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltsubstateXgtXhyphenfragment && len(kapp0.List) == 3 { // `<substate>-fragment`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval3182, err3182 := evalIsSelfDestructCellOpt( // isSelfDestructCellOpt(K0)
			varK0,
			config, -1)
		if err3182 != nil {
			return m.NoResult, err3182
		}
		eval3183, err3183 := evalIsLogDataCellOpt( // isLogDataCellOpt(K1)
			varK1,
			config, -1)
		if err3183 != nil {
			return m.NoResult, err3183
		}
		eval3184, err3184 := evalIsRefundCellOpt( // isRefundCellOpt(K2)
			varK2,
			config, -1)
		if err3184 != nil {
			return m.NoResult, err3184
		}
		if ((m.IsTrue(eval3182)) &&
		   (m.IsTrue(eval3183))) &&
		   (m.IsTrue(eval3184)) {
			// RHS
			traceRuleApply("FUNC", 2678, "{| rule isSubstateCellFragment(`<substate>-fragment`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isSelfDestructCellOpt(K0),isLogDataCellOpt(K1)),isRefundCellOpt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2679
	// source: ? @?
	// {| rule isSubstateCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2679, "{| rule isSubstateCellFragment(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashopenXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2680
	// source: domains.k @915
	// {| rule `#open(_)_K-IO`(S)=>`#open(_,_)_K-IO`(S,#token("\"r+\"","String")) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(ed7ee74167faa7f8e3a152e9e495d112a67407097a0bb306ac17e2ce4bebf100) contentStartColumn(8) contentStartLine(915) org.kframework.attributes.Location(Location(915,8,915,48)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 2680, "{| rule `#open(_)_K-IO`(S)=>`#open(_,_)_K-IO`(S,#token(\"\\\"r+\\\"\",\"String\")) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed7ee74167faa7f8e3a152e9e495d112a67407097a0bb306ac17e2ce4bebf100) contentStartColumn(8) contentStartLine(915) org.kframework.attributes.Location(Location(915,8,915,48)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3185, err3185 := evalXhashopenXlparenXuXcommaXuXrparenXuKXhyphenIO( // `#open(_,_)_K-IO`(S,#token("\"r+\"","String"))
			varS,
			/* rhs KToken */ m.NewString("r+"),
			config, -1)
		if err3185 != nil {
			return m.NoResult, err3185
		}
		return eval3185, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashopenXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalIsCodeCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2681
	// source: ? @?
	// {| rule isCodeCellOpt(`<code>`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcodeXgt && len(kapp0.List) == 1 { // `<code>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3186, err3186 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err3186 != nil {
			return m.NoResult, err3186
		}
		if m.IsTrue(eval3186) {
			// RHS
			traceRuleApply("FUNC", 2681, "{| rule isCodeCellOpt(`<code>`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2682
	// source: ? @?
	// {| rule isCodeCellOpt(noCodeCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCodeCell && len(kapp0.List) == 0 { // noCodeCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2682, "{| rule isCodeCellOpt(noCodeCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2683
	// source: ? @?
	// {| rule isCodeCellOpt(#KToken(#token("CodeCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCodeCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2683, "{| rule isCodeCellOpt(#KToken(#token(\"CodeCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2684
	// source: ? @?
	// {| rule isCodeCellOpt(#KToken(#token("CodeCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCodeCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2684, "{| rule isCodeCellOpt(#KToken(#token(\"CodeCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2685
	// source: ? @?
	// {| rule isCodeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2685, "{| rule isCodeCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTypeCheckingCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2686
	// source: ? @?
	// {| rule isTypeCheckingCellOpt(#KToken(#token("TypeCheckingCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypeCheckingCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2686, "{| rule isTypeCheckingCellOpt(#KToken(#token(\"TypeCheckingCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2687
	// source: ? @?
	// {| rule isTypeCheckingCellOpt(#KToken(#token("TypeCheckingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypeCheckingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2687, "{| rule isTypeCheckingCellOpt(#KToken(#token(\"TypeCheckingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2688
	// source: ? @?
	// {| rule isTypeCheckingCellOpt(noTypeCheckingCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoTypeCheckingCell && len(kapp0.List) == 0 { // noTypeCheckingCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2688, "{| rule isTypeCheckingCellOpt(noTypeCheckingCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2689
	// source: ? @?
	// {| rule isTypeCheckingCellOpt(`<typeChecking>`(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttypeCheckingXgt && len(kapp0.List) == 1 { // `<typeChecking>`(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 2689, "{| rule isTypeCheckingCellOpt(`<typeChecking>`(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2690
	// source: ? @?
	// {| rule isTypeCheckingCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2690, "{| rule isTypeCheckingCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCsstore(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #2691
	// source: iele-gas.k @745
	// {| rule `Csstore`(SCHED,INDEX,VALUE,OLDVALUE)=>`_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_=/=Int__INT`(VALUE,#token("0","Int")),`_==Int_`(OLDVALUE,#token("0","Int"))),`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`maxInt(_,_)_INT`(#token("0","Int"),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(OLDVALUE)) ensures #token("true","Bool") [UNIQUE_ID(84ae70fb714e7f7e48a9ce5ff2376c9d403ac95ac99042de9c7d5277d957983f) contentStartColumn(10) contentStartLine(745) org.kframework.attributes.Location(Location(745,10,745,394)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varINDEX, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varVALUE, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varOLDVALUE, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES
					eval3187, err3187 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err3187 != nil {
						return m.NoResult, err3187
					}
					if /* rhs precomputed isInt(INDEX) && isInt(VALUE) */ /* && */
					   m.IsTrue(eval3187) /* && */ /* rhs precomputed isInt(OLDVALUE) */  {
						// RHS
						traceRuleApply("FUNC", 2691, "{| rule `Csstore`(SCHED,INDEX,VALUE,OLDVALUE)=>`_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_=/=Int__INT`(VALUE,#token(\"0\",\"Int\")),`_==Int_`(OLDVALUE,#token(\"0\",\"Int\"))),`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`maxInt(_,_)_INT`(#token(\"0\",\"Int\"),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE)))))) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(OLDVALUE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(84ae70fb714e7f7e48a9ce5ff2376c9d403ac95ac99042de9c7d5277d957983f) contentStartColumn(10) contentStartLine(745) org.kframework.attributes.Location(Location(745,10,745,394)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval3191, err3191 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstoreXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstore_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3191 != nil {
							return m.NoResult, err3191
						}
						eval3193, err3193 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstorekeyXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstorekey_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3193 != nil {
							return m.NoResult, err3193
						}
						eval3194, err3194 := evalIntSize( // intSize(INDEX)
							varINDEX,
							config, -1)
						if err3194 != nil {
							return m.NoResult, err3194
						}
						eval3192, err3192 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX))
							eval3193,
							eval3194,
							config, -1)
						if err3192 != nil {
							return m.NoResult, err3192
						}
						eval3190, err3190 := evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX)))
							eval3191,
							eval3192,
							config, -1)
						if err3190 != nil {
							return m.NoResult, err3190
						}
						eval3196, err3196 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstorewordXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstoreword_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3196 != nil {
							return m.NoResult, err3196
						}
						eval3197, err3197 := evalIntSize( // intSize(VALUE)
							varVALUE,
							config, -1)
						if err3197 != nil {
							return m.NoResult, err3197
						}
						eval3195, err3195 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED),intSize(VALUE))
							eval3196,
							eval3197,
							config, -1)
						if err3195 != nil {
							return m.NoResult, err3195
						}
						eval3189, err3189 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED),intSize(VALUE)))
							eval3190,
							eval3195,
							config, -1)
						if err3189 != nil {
							return m.NoResult, err3189
						}
						eval3200, err3200 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(VALUE,#token("0","Int"))
							varVALUE,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err3200 != nil {
							return m.NoResult, err3200
						}
						eval3201, err3201 := evalXuXeqXeqIntXu( // `_==Int_`(OLDVALUE,#token("0","Int"))
							varOLDVALUE,
							/* rhs KToken */ m.NewIntFromString("0"),
							config, -1)
						if err3201 != nil {
							return m.NoResult, err3201
						}
						eval3199, err3199 := evalXuandBoolXu( // `_andBool_`(`_=/=Int__INT`(VALUE,#token("0","Int")),`_==Int_`(OLDVALUE,#token("0","Int")))
							eval3200,
							eval3201,
							config, -1)
						if err3199 != nil {
							return m.NoResult, err3199
						}
						eval3204, err3204 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstoresetkeyXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstoresetkey_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3204 != nil {
							return m.NoResult, err3204
						}
						eval3205, err3205 := evalIntSize( // intSize(INDEX)
							varINDEX,
							config, -1)
						if err3205 != nil {
							return m.NoResult, err3205
						}
						eval3203, err3203 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX))
							eval3204,
							eval3205,
							config, -1)
						if err3203 != nil {
							return m.NoResult, err3203
						}
						eval3207, err3207 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstoresetXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstoreset_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3207 != nil {
							return m.NoResult, err3207
						}
						eval3208, err3208 := evalIntSize( // intSize(VALUE)
							varVALUE,
							config, -1)
						if err3208 != nil {
							return m.NoResult, err3208
						}
						eval3206, err3206 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE))
							eval3207,
							eval3208,
							config, -1)
						if err3206 != nil {
							return m.NoResult, err3206
						}
						eval3202, err3202 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE)))
							eval3203,
							eval3206,
							config, -1)
						if err3202 != nil {
							return m.NoResult, err3202
						}
						eval3211, err3211 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGsstoresetXuIELEXhyphenGAS, List: []m.K{ // as-is Gsstoreset_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3211 != nil {
							return m.NoResult, err3211
						}
						eval3213, err3213 := evalIntSize( // intSize(VALUE)
							varVALUE,
							config, -1)
						if err3213 != nil {
							return m.NoResult, err3213
						}
						eval3214, err3214 := evalIntSize( // intSize(OLDVALUE)
							varOLDVALUE,
							config, -1)
						if err3214 != nil {
							return m.NoResult, err3214
						}
						eval3212, err3212 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(intSize(VALUE),intSize(OLDVALUE))
							eval3213,
							eval3214,
							config, -1)
						if err3212 != nil {
							return m.NoResult, err3212
						}
						eval3210, err3210 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE)))
							eval3211,
							eval3212,
							config, -1)
						if err3210 != nil {
							return m.NoResult, err3210
						}
						eval3209, err3209 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(#token("0","Int"),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE))))
							/* rhs KToken */ m.NewIntFromString("0"),
							eval3210,
							config, -1)
						if err3209 != nil {
							return m.NoResult, err3209
						}
						eval3198, err3198 := evalXhashifXuXhashthenXuXhashelseXuXhashfiXuKXhyphenEQUAL( // `#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_=/=Int__INT`(VALUE,#token("0","Int")),`_==Int_`(OLDVALUE,#token("0","Int"))),`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`maxInt(_,_)_INT`(#token("0","Int"),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE)))))
							eval3199,
							eval3202,
							eval3209,
							config, -1)
						if err3198 != nil {
							return m.NoResult, err3198
						}
						eval3188, err3188 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstorekey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreword_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_=/=Int__INT`(VALUE,#token("0","Int")),`_==Int_`(OLDVALUE,#token("0","Int"))),`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoresetkey_IELE-GAS`(.KList),SCHED),intSize(INDEX)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),intSize(VALUE))),`maxInt(_,_)_INT`(#token("0","Int"),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsstoreset_IELE-GAS`(.KList),SCHED),`_-Int__INT`(intSize(VALUE),intSize(OLDVALUE))))))
							eval3189,
							eval3198,
							config, -1)
						if err3188 != nil {
							return m.NoResult, err3188
						}
						return eval3188, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCsstore", args: []m.K{c1, c2, c3, c4}}
}

func evalContractAppend(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2692
	// source: iele-binary.k @164
	// {| rule contractAppend(contractDefinitionList(C,Cs),Cs')=>contractDefinitionList(C,contractAppend(Cs,Cs')) requires `_andBool_`(`_andBool_`(isContract(Cs'),isContract(Cs)),isContractDefinition(C)) ensures #token("true","Bool") [UNIQUE_ID(6e216bd96ee788ca26ad3c691c7acb5f8feaf85c72f7010595463f39986fd797) contentStartColumn(10) contentStartLine(164) org.kframework.attributes.Location(Location(164,10,164,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(C,Cs)
		varC := kapp0.List[0] // lhs KVariable C
		varCs := kapp0.List[1] // lhs KVariable Cs
		varCsXapos := c2 // lhs KVariable Cs'
		// REQUIRES
		eval3215, err3215 := evalIsContract( // isContract(Cs')
			varCsXapos,
			config, -1)
		if err3215 != nil {
			return m.NoResult, err3215
		}
		eval3216, err3216 := evalIsContract( // isContract(Cs)
			varCs,
			config, -1)
		if err3216 != nil {
			return m.NoResult, err3216
		}
		eval3217, err3217 := evalIsContractDefinition( // isContractDefinition(C)
			varC,
			config, -1)
		if err3217 != nil {
			return m.NoResult, err3217
		}
		if ((m.IsTrue(eval3215)) &&
		   (m.IsTrue(eval3216))) &&
		   (m.IsTrue(eval3217)) {
			// RHS
			traceRuleApply("FUNC", 2692, "{| rule contractAppend(contractDefinitionList(C,Cs),Cs')=>contractDefinitionList(C,contractAppend(Cs,Cs')) requires `_andBool_`(`_andBool_`(isContract(Cs'),isContract(Cs)),isContractDefinition(C)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6e216bd96ee788ca26ad3c691c7acb5f8feaf85c72f7010595463f39986fd797) contentStartColumn(10) contentStartLine(164) org.kframework.attributes.Location(Location(164,10,164,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3218, err3218 := evalContractAppend( // contractAppend(Cs,Cs')
				varCs,
				varCsXapos,
				config, -1)
			if err3218 != nil {
				return m.NoResult, err3218
			}
			return &m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
				varC,
				eval3218,
			}}, nil
		}
	}

	// rule #2693
	// source: iele-binary.k @163
	// {| rule contractAppend(`.List{"contractDefinitionList"}`(.KList),Cs)=>Cs requires isContract(Cs) ensures #token("true","Bool") [UNIQUE_ID(b2a1d18e46825fbec5053fb9e5e30fec02ce89ddc799951b0a25c7c2f7ae0562) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,163,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"contractDefinitionList"}`(.KList)
		varCs := c2 // lhs KVariable Cs
		// REQUIRES
		eval3219, err3219 := evalIsContract( // isContract(Cs)
			varCs,
			config, -1)
		if err3219 != nil {
			return m.NoResult, err3219
		}
		if m.IsTrue(eval3219) {
			// RHS
			traceRuleApply("FUNC", 2693, "{| rule contractAppend(`.List{\"contractDefinitionList\"}`(.KList),Cs)=>Cs requires isContract(Cs) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b2a1d18e46825fbec5053fb9e5e30fec02ce89ddc799951b0a25c7c2f7ae0562) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,163,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varCs, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalContractAppend", args: []m.K{c1, c2}}
}

func evalG0aux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2694
	// source: iele-gas.k @814
	// {| rule `G0aux`(SCHED,`.WordStack_IELE-DATA`(.KList),#token("true","Bool"))=>`_<_>_IELE-GAS`(`Gtxcreate_IELE-GAS`(.KList),SCHED) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(36c2cd100b84127c0c00dddfb082551c8614c8efd8d342c2d54a796eed7a9842) contentStartColumn(10) contentStartLine(814) org.kframework.attributes.Location(Location(814,10,814,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
			if c3.Equals(m.BoolTrue) { // #token("true","Bool")
				// REQUIRES
				eval3220, err3220 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err3220 != nil {
					return m.NoResult, err3220
				}
				if m.IsTrue(eval3220) {
					// RHS
					traceRuleApply("FUNC", 2694, "{| rule `G0aux`(SCHED,`.WordStack_IELE-DATA`(.KList),#token(\"true\",\"Bool\"))=>`_<_>_IELE-GAS`(`Gtxcreate_IELE-GAS`(.KList),SCHED) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(36c2cd100b84127c0c00dddfb082551c8614c8efd8d342c2d54a796eed7a9842) contentStartColumn(10) contentStartLine(814) org.kframework.attributes.Location(Location(814,10,814,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval3221, err3221 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtxcreate_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGtxcreateXuIELEXhyphenGAS, List: []m.K{ // as-is Gtxcreate_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3221 != nil {
						return m.NoResult, err3221
					}
					return eval3221, nil
				}
			}
		}
	}

	// rule #2695
	// source: iele-gas.k @815
	// {| rule `G0aux`(SCHED,`.WordStack_IELE-DATA`(.KList),#token("false","Bool"))=>`_<_>_IELE-GAS`(`Gtransaction_IELE-GAS`(.KList),SCHED) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(21ed09c3c9148fdbcae0062783b4ffa525838a218b23433c66844dc5a4a80cf4) contentStartColumn(10) contentStartLine(815) org.kframework.attributes.Location(Location(815,10,815,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
			if c3.Equals(m.BoolFalse) { // #token("false","Bool")
				// REQUIRES
				eval3222, err3222 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err3222 != nil {
					return m.NoResult, err3222
				}
				if m.IsTrue(eval3222) {
					// RHS
					traceRuleApply("FUNC", 2695, "{| rule `G0aux`(SCHED,`.WordStack_IELE-DATA`(.KList),#token(\"false\",\"Bool\"))=>`_<_>_IELE-GAS`(`Gtransaction_IELE-GAS`(.KList),SCHED) requires isSchedule(SCHED) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(21ed09c3c9148fdbcae0062783b4ffa525838a218b23433c66844dc5a4a80cf4) contentStartColumn(10) contentStartLine(815) org.kframework.attributes.Location(Location(815,10,815,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval3223, err3223 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtransaction_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGtransactionXuIELEXhyphenGAS, List: []m.K{ // as-is Gtransaction_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3223 != nil {
						return m.NoResult, err3223
					}
					return eval3223, nil
				}
			}
		}
	}

	// rule #2696
	// source: iele-gas.k @820
	// {| rule `G0aux`(SCHED,`_:__IELE-DATA`(_23,REST),ISCREATE)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE)) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isBool(ISCREATE)),isWordStack(REST)),`_==Int_`(_23,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(7c05e9152f1d3e6a3ed4c0e68fa38e65ca1be710d3945429d9830b6636d8b8c3) contentStartColumn(10) contentStartLine(820) org.kframework.attributes.Location(Location(820,10,820,104)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_23,REST)
			if varXu23, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varREST := kapp0.List[1] // lhs KVariable REST
				if varISCREATE, t := c3.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
					// REQUIRES
					eval3224, err3224 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err3224 != nil {
						return m.NoResult, err3224
					}
					eval3225, err3225 := evalIsWordStack( // isWordStack(REST)
						varREST,
						config, -1)
					if err3225 != nil {
						return m.NoResult, err3225
					}
					eval3226, err3226 := evalXuXeqXeqIntXu( // `_==Int_`(_23,#token("0","Int"))
						varXu23,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err3226 != nil {
						return m.NoResult, err3226
					}
					if ((m.IsTrue(eval3224) /* && */ /* rhs precomputed isBool(ISCREATE) */ ) &&
					   (m.IsTrue(eval3225))) &&
					   (m.IsTrue(eval3226)) {
						// RHS
						traceRuleApply("FUNC", 2696, "{| rule `G0aux`(SCHED,`_:__IELE-DATA`(_23,REST),ISCREATE)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE)) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isBool(ISCREATE)),isWordStack(REST)),`_==Int_`(_23,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7c05e9152f1d3e6a3ed4c0e68fa38e65ca1be710d3945429d9830b6636d8b8c3) contentStartColumn(10) contentStartLine(820) org.kframework.attributes.Location(Location(820,10,820,104)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
						eval3228, err3228 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGtxdatazeroXuIELEXhyphenGAS, List: []m.K{ // as-is Gtxdatazero_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3228 != nil {
							return m.NoResult, err3228
						}
						eval3229, err3229 := evalG0aux( // `G0aux`(SCHED,REST,ISCREATE)
							varSCHED,
							varREST,
							varISCREATE,
							config, -1)
						if err3229 != nil {
							return m.NoResult, err3229
						}
						eval3227, err3227 := evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gtxdatazero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE))
							eval3228,
							eval3229,
							config, -1)
						if err3227 != nil {
							return m.NoResult, err3227
						}
						return eval3227, nil
					}
				}
			}
		}
	}

	// rule #2697
	// source: iele-gas.k @821
	// {| rule `G0aux`(SCHED,`_:__IELE-DATA`(N,REST),ISCREATE)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(N)),isBool(ISCREATE)),isWordStack(REST)),`_=/=Int__INT`(N,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4e09d1cadce8eaa563cef4f8acf18fc26038915e65ae397836c43172848156c3) contentStartColumn(10) contentStartLine(821) org.kframework.attributes.Location(Location(821,10,821,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if kapp0, t := c2.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(N,REST)
			if varN, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varREST := kapp0.List[1] // lhs KVariable REST
				if varISCREATE, t := c3.(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
					// REQUIRES
					eval3230, err3230 := evalIsSchedule( // isSchedule(SCHED)
						varSCHED,
						config, -1)
					if err3230 != nil {
						return m.NoResult, err3230
					}
					eval3231, err3231 := evalIsWordStack( // isWordStack(REST)
						varREST,
						config, -1)
					if err3231 != nil {
						return m.NoResult, err3231
					}
					eval3232, err3232 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(N,#token("0","Int"))
						varN,
						/* rhs KToken */ m.NewIntFromString("0"),
						config, -1)
					if err3232 != nil {
						return m.NoResult, err3232
					}
					if ((m.IsTrue(eval3230) /* && */ /* rhs precomputed isInt(N) */  /* && */ /* rhs precomputed isBool(ISCREATE) */ ) &&
					   (m.IsTrue(eval3231))) &&
					   (m.IsTrue(eval3232)) {
						// RHS
						traceRuleApply("FUNC", 2697, "{| rule `G0aux`(SCHED,`_:__IELE-DATA`(N,REST),ISCREATE)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(N)),isBool(ISCREATE)),isWordStack(REST)),`_=/=Int__INT`(N,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4e09d1cadce8eaa563cef4f8acf18fc26038915e65ae397836c43172848156c3) contentStartColumn(10) contentStartLine(821) org.kframework.attributes.Location(Location(821,10,821,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
						eval3234, err3234 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),SCHED)
							&m.KApply{Label: m.LblGtxdatanonzeroXuIELEXhyphenGAS, List: []m.K{ // as-is Gtxdatanonzero_IELE-GAS
							}},
							varSCHED,
							config, -1)
						if err3234 != nil {
							return m.NoResult, err3234
						}
						eval3235, err3235 := evalG0aux( // `G0aux`(SCHED,REST,ISCREATE)
							varSCHED,
							varREST,
							varISCREATE,
							config, -1)
						if err3235 != nil {
							return m.NoResult, err3235
						}
						eval3233, err3233 := evalXuXplusIntXu( // `_+Int_`(`_<_>_IELE-GAS`(`Gtxdatanonzero_IELE-GAS`(.KList),SCHED),`G0aux`(SCHED,REST,ISCREATE))
							eval3234,
							eval3235,
							config, -1)
						if err3233 != nil {
							return m.NoResult, err3233
						}
						return eval3233, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalG0aux", args: []m.K{c1, c2, c3}}
}

func evalIsInts(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2698
	// source: ? @?
	// {| rule isInts(`.List{"operandList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2698, "{| rule isInts(`.List{\"operandList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2699
	// source: ? @?
	// {| rule isInts(#KToken(#token("NonEmptyInts","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNonEmptyInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2699, "{| rule isInts(#KToken(#token(\"NonEmptyInts\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2700
	// source: ? @?
	// {| rule isInts(#KToken(#token("Ints","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInts { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2700, "{| rule isInts(#KToken(#token(\"Ints\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2701
	// source: ? @?
	// {| rule isInts(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval3236, err3236 := evalIsNonEmptyInts( // isNonEmptyInts(K1)
				varK1,
				config, -1)
			if err3236 != nil {
				return m.NoResult, err3236
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval3236) {
				// RHS
				traceRuleApply("FUNC", 2701, "{| rule isInts(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isNonEmptyInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2702
	// source: ? @?
	// {| rule isInts(operandList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			varK1 := kapp0.List[1] // lhs KVariable K1
			// REQUIRES
			eval3237, err3237 := evalIsInts( // isInts(K1)
				varK1,
				config, -1)
			if err3237 != nil {
				return m.NoResult, err3237
			}
			if /* rhs precomputed isInt(K0) */ /* && */
			   m.IsTrue(eval3237) {
				// RHS
				traceRuleApply("FUNC", 2702, "{| rule isInts(operandList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2703
	// source: ? @?
	// {| rule isInts(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2703, "{| rule isInts(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuAccountCellMapXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.concat
	lbl := m.LblXuAccountCellMapXu // _AccountCellMap_
	sort := m.SortAccountCellMap
	if hookRes, hookErr := mapHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuAccountCellMapXu", args: []m.K{c1, c2}}
}

func evalIsTxPendingCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2704
	// source: ? @?
	// {| rule isTxPendingCell(`<txPending>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxPendingXgt && len(kapp0.List) == 1 { // `<txPending>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2704, "{| rule isTxPendingCell(`<txPending>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2705
	// source: ? @?
	// {| rule isTxPendingCell(#KToken(#token("TxPendingCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxPendingCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2705, "{| rule isTxPendingCell(#KToken(#token(\"TxPendingCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2706
	// source: ? @?
	// {| rule isTxPendingCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2706, "{| rule isTxPendingCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuSetXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: SET.concat
	lbl := m.LblXuSetXu // _Set_
	sort := m.SortSet
	if hookRes, hookErr := setHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuSetXu", args: []m.K{c1, c2}}
}

func evalXhashgetcXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.getc
	lbl := m.LblXhashgetcXlparenXuXrparenXuKXhyphenIO // #getc(_)_K-IO
	sort := m.SortInt
	if hookRes, hookErr := ioHooks.getc(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.getc, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetcXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalInt2BytesNoLen(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2707
	// source: domains.k @712
	// {| rule `Int2BytesNoLen`(I,E,unsignedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token("8","Int")),#token("8","Int")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_>Int__INT`(I,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(fc25c56bbc1685be4a21b3c4fa3b06c955a988bda5769b4744d985816d2ff15d) contentStartColumn(8) contentStartLine(712) org.kframework.attributes.Location(Location(712,8,713,22)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varE := c2 // lhs KVariable E
		if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblUnsignedBytes && len(kapp0.List) == 0 { // unsignedBytes(.KList)
			// REQUIRES
			eval3238, err3238 := evalIsEndianness( // isEndianness(E)
				varE,
				config, -1)
			if err3238 != nil {
				return m.NoResult, err3238
			}
			eval3239, err3239 := evalXuXgtIntXuXuINT( // `_>Int__INT`(I,#token("0","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3239 != nil {
				return m.NoResult, err3239
			}
			if (/* rhs precomputed isInt(I) */ /* && */
			   m.IsTrue(eval3238)) &&
			   (m.IsTrue(eval3239)) {
				// RHS
				traceRuleApply("FUNC", 2707, "{| rule `Int2BytesNoLen`(I,E,unsignedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token(\"8\",\"Int\")),#token(\"8\",\"Int\")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_>Int__INT`(I,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fc25c56bbc1685be4a21b3c4fa3b06c955a988bda5769b4744d985816d2ff15d) contentStartColumn(8) contentStartLine(712) org.kframework.attributes.Location(Location(712,8,713,22)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3243, err3243 := evalLog2Int( // log2Int(I)
					varI,
					config, -1)
				if err3243 != nil {
					return m.NoResult, err3243
				}
				eval3242, err3242 := evalXuXplusIntXu( // `_+Int_`(log2Int(I),#token("8","Int"))
					eval3243,
					/* rhs KToken */ m.NewIntFromString("8"),
					config, -1)
				if err3242 != nil {
					return m.NoResult, err3242
				}
				eval3241, err3241 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_+Int_`(log2Int(I),#token("8","Int")),#token("8","Int"))
					eval3242,
					/* rhs KToken */ m.NewIntFromString("8"),
					config, -1)
				if err3241 != nil {
					return m.NoResult, err3241
				}
				eval3240, err3240 := evalInt2Bytes( // `Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token("8","Int")),#token("8","Int")),I,E)
					eval3241,
					varI,
					varE,
					config, -1)
				if err3240 != nil {
					return m.NoResult, err3240
				}
				return eval3240, nil
			}
		}
	}

	// rule #2708
	// source: domains.k @715
	// {| rule `Int2BytesNoLen`(I,E,signedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token("9","Int")),#token("8","Int")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_>Int__INT`(I,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(7c67223ebd46b5706e42ab7150cfd25b912c4bfe956434bc1ce263e4d2a1782a) contentStartColumn(8) contentStartLine(715) org.kframework.attributes.Location(Location(715,8,716,22)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varE := c2 // lhs KVariable E
		if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblSignedBytes && len(kapp0.List) == 0 { // signedBytes(.KList)
			// REQUIRES
			eval3244, err3244 := evalIsEndianness( // isEndianness(E)
				varE,
				config, -1)
			if err3244 != nil {
				return m.NoResult, err3244
			}
			eval3245, err3245 := evalXuXgtIntXuXuINT( // `_>Int__INT`(I,#token("0","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3245 != nil {
				return m.NoResult, err3245
			}
			if (/* rhs precomputed isInt(I) */ /* && */
			   m.IsTrue(eval3244)) &&
			   (m.IsTrue(eval3245)) {
				// RHS
				traceRuleApply("FUNC", 2708, "{| rule `Int2BytesNoLen`(I,E,signedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token(\"9\",\"Int\")),#token(\"8\",\"Int\")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_>Int__INT`(I,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7c67223ebd46b5706e42ab7150cfd25b912c4bfe956434bc1ce263e4d2a1782a) contentStartColumn(8) contentStartLine(715) org.kframework.attributes.Location(Location(715,8,716,22)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3249, err3249 := evalLog2Int( // log2Int(I)
					varI,
					config, -1)
				if err3249 != nil {
					return m.NoResult, err3249
				}
				eval3248, err3248 := evalXuXplusIntXu( // `_+Int_`(log2Int(I),#token("9","Int"))
					eval3249,
					/* rhs KToken */ m.NewIntFromString("9"),
					config, -1)
				if err3248 != nil {
					return m.NoResult, err3248
				}
				eval3247, err3247 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_+Int_`(log2Int(I),#token("9","Int")),#token("8","Int"))
					eval3248,
					/* rhs KToken */ m.NewIntFromString("8"),
					config, -1)
				if err3247 != nil {
					return m.NoResult, err3247
				}
				eval3246, err3246 := evalInt2Bytes( // `Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(I),#token("9","Int")),#token("8","Int")),I,E)
					eval3247,
					varI,
					varE,
					config, -1)
				if err3246 != nil {
					return m.NoResult, err3246
				}
				return eval3246, nil
			}
		}
	}

	// rule #2709
	// source: domains.k @719
	// {| rule `Int2BytesNoLen`(_2,E,signedBytes(.KList))=>`Int2Bytes`(#token("1","Int"),#token("-1","Int"),E) requires `_andBool_`(isEndianness(E),`_==Int_`(_2,#token("-1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c37dbd09bf5f956b92a671626f5552eef949c94c25cdd16dcb95b92f001a0d47) contentStartColumn(8) contentStartLine(719) org.kframework.attributes.Location(Location(719,8,719,55)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu2, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varE := c2 // lhs KVariable E
		if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblSignedBytes && len(kapp0.List) == 0 { // signedBytes(.KList)
			// REQUIRES
			eval3250, err3250 := evalIsEndianness( // isEndianness(E)
				varE,
				config, -1)
			if err3250 != nil {
				return m.NoResult, err3250
			}
			eval3251, err3251 := evalXuXeqXeqIntXu( // `_==Int_`(_2,#token("-1","Int"))
				varXu2,
				/* rhs KToken */ m.NewIntFromString("-1"),
				config, -1)
			if err3251 != nil {
				return m.NoResult, err3251
			}
			if (m.IsTrue(eval3250)) &&
			   (m.IsTrue(eval3251)) {
				// RHS
				traceRuleApply("FUNC", 2709, "{| rule `Int2BytesNoLen`(_2,E,signedBytes(.KList))=>`Int2Bytes`(#token(\"1\",\"Int\"),#token(\"-1\",\"Int\"),E) requires `_andBool_`(isEndianness(E),`_==Int_`(_2,#token(\"-1\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c37dbd09bf5f956b92a671626f5552eef949c94c25cdd16dcb95b92f001a0d47) contentStartColumn(8) contentStartLine(719) org.kframework.attributes.Location(Location(719,8,719,55)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3252, err3252 := evalInt2Bytes( // `Int2Bytes`(#token("1","Int"),#token("-1","Int"),E)
					/* rhs KToken */ m.NewIntFromString("1"),
					/* rhs KToken */ m.NewIntFromString("-1"),
					varE,
					config, -1)
				if err3252 != nil {
					return m.NoResult, err3252
				}
				return eval3252, nil
			}
		}
	}

	// rule #2710
	// source: domains.k @717
	// {| rule `Int2BytesNoLen`(I,E,signedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(`~Int__INT`(I)),#token("9","Int")),#token("8","Int")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_<Int__INT`(I,#token("-1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(2ec5bf7790198c582409d1966f9a4c380719c40cf4a85c7ae153b4156dd05038) contentStartColumn(8) contentStartLine(717) org.kframework.attributes.Location(Location(717,8,718,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varE := c2 // lhs KVariable E
		if kapp0, t := c3.(*m.KApply); t && kapp0.Label == m.LblSignedBytes && len(kapp0.List) == 0 { // signedBytes(.KList)
			// REQUIRES
			eval3253, err3253 := evalIsEndianness( // isEndianness(E)
				varE,
				config, -1)
			if err3253 != nil {
				return m.NoResult, err3253
			}
			eval3254, err3254 := evalXuXltIntXuXuINT( // `_<Int__INT`(I,#token("-1","Int"))
				varI,
				/* rhs KToken */ m.NewIntFromString("-1"),
				config, -1)
			if err3254 != nil {
				return m.NoResult, err3254
			}
			if (/* rhs precomputed isInt(I) */ /* && */
			   m.IsTrue(eval3253)) &&
			   (m.IsTrue(eval3254)) {
				// RHS
				traceRuleApply("FUNC", 2710, "{| rule `Int2BytesNoLen`(I,E,signedBytes(.KList))=>`Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(`~Int__INT`(I)),#token(\"9\",\"Int\")),#token(\"8\",\"Int\")),I,E) requires `_andBool_`(`_andBool_`(isInt(I),isEndianness(E)),`_<Int__INT`(I,#token(\"-1\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2ec5bf7790198c582409d1966f9a4c380719c40cf4a85c7ae153b4156dd05038) contentStartColumn(8) contentStartLine(717) org.kframework.attributes.Location(Location(717,8,718,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3259, err3259 := evalXtildeIntXuXuINT( // `~Int__INT`(I)
					varI,
					config, -1)
				if err3259 != nil {
					return m.NoResult, err3259
				}
				eval3258, err3258 := evalLog2Int( // log2Int(`~Int__INT`(I))
					eval3259,
					config, -1)
				if err3258 != nil {
					return m.NoResult, err3258
				}
				eval3257, err3257 := evalXuXplusIntXu( // `_+Int_`(log2Int(`~Int__INT`(I)),#token("9","Int"))
					eval3258,
					/* rhs KToken */ m.NewIntFromString("9"),
					config, -1)
				if err3257 != nil {
					return m.NoResult, err3257
				}
				eval3256, err3256 := evalXuXslashIntXuXuINT( // `_/Int__INT`(`_+Int_`(log2Int(`~Int__INT`(I)),#token("9","Int")),#token("8","Int"))
					eval3257,
					/* rhs KToken */ m.NewIntFromString("8"),
					config, -1)
				if err3256 != nil {
					return m.NoResult, err3256
				}
				eval3255, err3255 := evalInt2Bytes( // `Int2Bytes`(`_/Int__INT`(`_+Int_`(log2Int(`~Int__INT`(I)),#token("9","Int")),#token("8","Int")),I,E)
					eval3256,
					varI,
					varE,
					config, -1)
				if err3255 != nil {
					return m.NoResult, err3255
				}
				return eval3255, nil
			}
		}
	}

	// rule #2711
	// source: domains.k @714
	// {| rule `Int2BytesNoLen`(_1,_19,_20)=>`.Bytes_BYTES-HOOKED`(.KList) requires `_andBool_`(`_andBool_`(isEndianness(_19),isSignedness(_20)),`_==Int_`(_1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(61857e5c8262dfdb8c48d4e23e1f0c382f6e892547a923f8b4a7057d61e1d6b0) contentStartColumn(8) contentStartLine(714) org.kframework.attributes.Location(Location(714,8,714,48)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		varXu19 := c2 // lhs KVariable _19
		varXu20 := c3 // lhs KVariable _20
		// REQUIRES
		eval3260, err3260 := evalIsEndianness( // isEndianness(_19)
			varXu19,
			config, -1)
		if err3260 != nil {
			return m.NoResult, err3260
		}
		eval3261, err3261 := evalIsSignedness( // isSignedness(_20)
			varXu20,
			config, -1)
		if err3261 != nil {
			return m.NoResult, err3261
		}
		eval3262, err3262 := evalXuXeqXeqIntXu( // `_==Int_`(_1,#token("0","Int"))
			varXu1,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err3262 != nil {
			return m.NoResult, err3262
		}
		if ((m.IsTrue(eval3260)) &&
		   (m.IsTrue(eval3261))) &&
		   (m.IsTrue(eval3262)) {
			// RHS
			traceRuleApply("FUNC", 2711, "{| rule `Int2BytesNoLen`(_1,_19,_20)=>`.Bytes_BYTES-HOOKED`(.KList) requires `_andBool_`(`_andBool_`(isEndianness(_19),isSignedness(_20)),`_==Int_`(_1,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(61857e5c8262dfdb8c48d4e23e1f0c382f6e892547a923f8b4a7057d61e1d6b0) contentStartColumn(8) contentStartLine(714) org.kframework.attributes.Location(Location(714,8,714,48)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3263, err3263 := evalXdotBytesXuBYTESXhyphenHOOKED(config, -1) // `.Bytes_BYTES-HOOKED`(.KList)
			if err3263 != nil {
				return m.NoResult, err3263
			}
			return eval3263, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalInt2BytesNoLen", args: []m.K{c1, c2, c3}}
}

func evalInitBeneficiaryCell(config m.K, guard int) (m.K, error) {
	// rule #2712
	// source: ? @?
	// {| rule initBeneficiaryCell(.KList)=>`<beneficiary>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(deafe77db663cebf79925ebf3033dbff565ea3cb1c4e23612de914b28ae314fb) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2712, "{| rule initBeneficiaryCell(.KList)=>`<beneficiary>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(deafe77db663cebf79925ebf3033dbff565ea3cb1c4e23612de914b28ae314fb) initializer()] |}")
	return &m.KApply{Label: m.LblXltbeneficiaryXgt, List: []m.K{ // as-is <beneficiary>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitBeneficiaryCell K = evalInitBeneficiaryCell(m.InternedBottom)

func evalIsScheduleCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2713
	// source: ? @?
	// {| rule isScheduleCell(`<schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltscheduleXgt && len(kapp0.List) == 1 { // `<schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3264, err3264 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err3264 != nil {
			return m.NoResult, err3264
		}
		if m.IsTrue(eval3264) {
			// RHS
			traceRuleApply("FUNC", 2713, "{| rule isScheduleCell(`<schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2714
	// source: ? @?
	// {| rule isScheduleCell(#KToken(#token("ScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2714, "{| rule isScheduleCell(#KToken(#token(\"ScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2715
	// source: ? @?
	// {| rule isScheduleCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2715, "{| rule isScheduleCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdasmContractAux2(c1 m.K, c2 m.K, c3 m.K, c4 m.K, c5 m.K, c6 m.K, c7 m.K, c8 m.K, config m.K, guard int) (m.K, error) {
	// rule #2716
	// source: iele-binary.k @139
	// {| rule #dasmContractAux2(`_:__IELE-DATA`(_86,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>contractAppend(#dasmContract(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+.+IeleName__IELE-BINARY`(NAME,N)),#dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,FUNCS,NAME,topLevelDefinitionList(`externalcontract__IELE-COMMON`(`_+.+IeleName__IELE-BINARY`(NAME,N)),DEFS),`_+Int_`(N,#token("1","Int")),SIZE,BYTES)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)),`_==Int_`(_86,#token("106","Int"))) ensures #token("true","Bool") [UNIQUE_ID(b123614335a9dc16278f9fea0ad8d5ca93b556b65ebff1e4d1a6c2ba0d202698) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,299)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_86,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu86, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varNAME := c4 // lhs KVariable NAME
									varDEFS := c5 // lhs KVariable DEFS
									if varN, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
										if varSIZE, t := c7.(*m.Int); t { // lhs KVariable with hook:INT.Int
											if varBYTES, t := c8.(*m.String); t { // lhs KVariable with hook:STRING.String
												// REQUIRES
												eval3265, err3265 := evalIsWordStack( // isWordStack(WS)
													varWS,
													config, -1)
												if err3265 != nil {
													return m.NoResult, err3265
												}
												eval3266, err3266 := evalIsIeleName( // isIeleName(NAME)
													varNAME,
													config, -1)
												if err3266 != nil {
													return m.NoResult, err3266
												}
												eval3267, err3267 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
													varDEFS,
													config, -1)
												if err3267 != nil {
													return m.NoResult, err3267
												}
												eval3268, err3268 := evalXuXeqXeqIntXu( // `_==Int_`(_86,#token("106","Int"))
													varXu86,
													/* rhs KToken */ m.NewIntFromString("106"),
													config, -1)
												if err3268 != nil {
													return m.NoResult, err3268
												}
												if (((m.IsTrue(eval3265)) &&
												   (m.IsTrue(eval3266)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */ ) &&
												   (m.IsTrue(eval3267)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isString(BYTES) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(N) */ ) &&
												   (m.IsTrue(eval3268)) {
													// RHS
													traceRuleApply("FUNC", 2716, "{| rule #dasmContractAux2(`_:__IELE-DATA`(_86,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>contractAppend(#dasmContract(#take(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),`_+.+IeleName__IELE-BINARY`(NAME,N)),#dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),NBITS,FUNCS,NAME,topLevelDefinitionList(`externalcontract__IELE-COMMON`(`_+.+IeleName__IELE-BINARY`(NAME,N)),DEFS),`_+Int_`(N,#token(\"1\",\"Int\")),SIZE,BYTES)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)),`_==Int_`(_86,#token(\"106\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(b123614335a9dc16278f9fea0ad8d5ca93b556b65ebff1e4d1a6c2ba0d202698) contentStartColumn(10) contentStartLine(139) org.kframework.attributes.Location(Location(139,10,139,299)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
													eval3273, err3273 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
														varW1,
														/* rhs KToken */ m.NewIntFromString("256"),
														config, -1)
													if err3273 != nil {
														return m.NoResult, err3273
													}
													eval3272, err3272 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
														eval3273,
														varW2,
														config, -1)
													if err3272 != nil {
														return m.NoResult, err3272
													}
													eval3271, err3271 := evalXhashtake( // #take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
														eval3272,
														varWS,
														config, -1)
													if err3271 != nil {
														return m.NoResult, err3271
													}
													eval3274, err3274 := evalXuXplusXdotXplusIeleNameXuXuIELEXhyphenBINARY( // `_+.+IeleName__IELE-BINARY`(NAME,N)
														varNAME,
														varN,
														config, -1)
													if err3274 != nil {
														return m.NoResult, err3274
													}
													eval3270, err3270 := evalXhashdasmContract( // #dasmContract(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+.+IeleName__IELE-BINARY`(NAME,N))
														eval3271,
														eval3274,
														config, -1)
													if err3270 != nil {
														return m.NoResult, err3270
													}
													eval3278, err3278 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
														varW1,
														/* rhs KToken */ m.NewIntFromString("256"),
														config, -1)
													if err3278 != nil {
														return m.NoResult, err3278
													}
													eval3277, err3277 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
														eval3278,
														varW2,
														config, -1)
													if err3277 != nil {
														return m.NoResult, err3277
													}
													eval3276, err3276 := evalXhashdrop( // #drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
														eval3277,
														varWS,
														config, -1)
													if err3276 != nil {
														return m.NoResult, err3276
													}
													eval3279, err3279 := evalXuXplusXdotXplusIeleNameXuXuIELEXhyphenBINARY( // `_+.+IeleName__IELE-BINARY`(NAME,N)
														varNAME,
														varN,
														config, -1)
													if err3279 != nil {
														return m.NoResult, err3279
													}
													eval3280, err3280 := evalXuXplusIntXu( // `_+Int_`(N,#token("1","Int"))
														varN,
														/* rhs KToken */ m.NewIntFromString("1"),
														config, -1)
													if err3280 != nil {
														return m.NoResult, err3280
													}
													eval3275, err3275 := evalXhashdasmContractAux2( // #dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,FUNCS,NAME,topLevelDefinitionList(`externalcontract__IELE-COMMON`(`_+.+IeleName__IELE-BINARY`(NAME,N)),DEFS),`_+Int_`(N,#token("1","Int")),SIZE,BYTES)
														eval3276,
														varNBITS,
														varFUNCS,
														varNAME,
														&m.KApply{Label: m.LblTopLevelDefinitionList, List: []m.K{ // as-is topLevelDefinitionList
															&m.KApply{Label: m.LblExternalcontractXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is externalcontract__IELE-COMMON
																eval3279,
															}},
															varDEFS,
														}},
														eval3280,
														varSIZE,
														varBYTES,
														config, -1)
													if err3275 != nil {
														return m.NoResult, err3275
													}
													eval3269, err3269 := evalContractAppend( // contractAppend(#dasmContract(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),`_+.+IeleName__IELE-BINARY`(NAME,N)),#dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,FUNCS,NAME,topLevelDefinitionList(`externalcontract__IELE-COMMON`(`_+.+IeleName__IELE-BINARY`(NAME,N)),DEFS),`_+Int_`(N,#token("1","Int")),SIZE,BYTES))
														eval3270,
														eval3275,
														config, -1)
													if err3269 != nil {
														return m.NoResult, err3269
													}
													return eval3269, nil
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2717
	// source: iele-binary.k @138
	// {| rule #dasmContractAux2(`_:__IELE-DATA`(_128,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>#dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_Map_`(`_|->_`(N,`String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)))),FUNCS),NAME,DEFS,`_+Int_`(N,#token("1","Int")),SIZE,BYTES) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)),`_==Int_`(_128,#token("105","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0576cc59071ac34f014baeea66162db7ae2d17d437c119dbb5100c8a55c32a20) contentStartColumn(10) contentStartLine(138) org.kframework.attributes.Location(Location(138,10,138,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_128,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS)))
		if varXu128, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))
				if varW1, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if kapp2, t := kapp1.List[1].(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W2,WS)
						if varW2, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							varWS := kapp2.List[1] // lhs KVariable WS
							if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
								if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
									varNAME := c4 // lhs KVariable NAME
									varDEFS := c5 // lhs KVariable DEFS
									if varN, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
										if varSIZE, t := c7.(*m.Int); t { // lhs KVariable with hook:INT.Int
											if varBYTES, t := c8.(*m.String); t { // lhs KVariable with hook:STRING.String
												// REQUIRES
												eval3281, err3281 := evalIsWordStack( // isWordStack(WS)
													varWS,
													config, -1)
												if err3281 != nil {
													return m.NoResult, err3281
												}
												eval3282, err3282 := evalIsIeleName( // isIeleName(NAME)
													varNAME,
													config, -1)
												if err3282 != nil {
													return m.NoResult, err3282
												}
												eval3283, err3283 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
													varDEFS,
													config, -1)
												if err3283 != nil {
													return m.NoResult, err3283
												}
												eval3284, err3284 := evalXuXeqXeqIntXu( // `_==Int_`(_128,#token("105","Int"))
													varXu128,
													/* rhs KToken */ m.NewIntFromString("105"),
													config, -1)
												if err3284 != nil {
													return m.NoResult, err3284
												}
												if (((m.IsTrue(eval3281)) &&
												   (m.IsTrue(eval3282)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(SIZE) */ ) &&
												   (m.IsTrue(eval3283)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isString(BYTES) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(N) */ ) &&
												   (m.IsTrue(eval3284)) {
													// RHS
													traceRuleApply("FUNC", 2717, "{| rule #dasmContractAux2(`_:__IELE-DATA`(_128,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,WS))),NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>#dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS),NBITS,`_Map_`(`_|->_`(N,`String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token(\"256\",\"Int\")),W2),WS)))),FUNCS),NAME,DEFS,`_+Int_`(N,#token(\"1\",\"Int\")),SIZE,BYTES) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)),`_==Int_`(_128,#token(\"105\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0576cc59071ac34f014baeea66162db7ae2d17d437c119dbb5100c8a55c32a20) contentStartColumn(10) contentStartLine(138) org.kframework.attributes.Location(Location(138,10,138,259)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
													eval3288, err3288 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
														varW1,
														/* rhs KToken */ m.NewIntFromString("256"),
														config, -1)
													if err3288 != nil {
														return m.NoResult, err3288
													}
													eval3287, err3287 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
														eval3288,
														varW2,
														config, -1)
													if err3287 != nil {
														return m.NoResult, err3287
													}
													eval3286, err3286 := evalXhashdrop( // #drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
														eval3287,
														varWS,
														config, -1)
													if err3286 != nil {
														return m.NoResult, err3286
													}
													eval3295, err3295 := evalXuXstarIntXuXuINT( // `_*Int__INT`(W1,#token("256","Int"))
														varW1,
														/* rhs KToken */ m.NewIntFromString("256"),
														config, -1)
													if err3295 != nil {
														return m.NoResult, err3295
													}
													eval3294, err3294 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2)
														eval3295,
														varW2,
														config, -1)
													if err3294 != nil {
														return m.NoResult, err3294
													}
													eval3293, err3293 := evalXhashtake( // #take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)
														eval3294,
														varWS,
														config, -1)
													if err3293 != nil {
														return m.NoResult, err3293
													}
													eval3292, err3292 := evalXhashunparseByteStack( // #unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS))
														eval3293,
														config, -1)
													if err3292 != nil {
														return m.NoResult, err3292
													}
													eval3291, err3291 := evalString2IeleName( // `String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)))
														eval3292,
														config, -1)
													if err3291 != nil {
														return m.NoResult, err3291
													}
													eval3290, err3290 := evalXuXpipeXhyphenXgtXu( // `_|->_`(N,`String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS))))
														varN,
														eval3291,
														config, -1)
													if err3290 != nil {
														return m.NoResult, err3290
													}
													eval3289, err3289 := evalXuMapXu( // `_Map_`(`_|->_`(N,`String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)))),FUNCS)
														eval3290,
														varFUNCS,
														config, -1)
													if err3289 != nil {
														return m.NoResult, err3289
													}
													eval3296, err3296 := evalXuXplusIntXu( // `_+Int_`(N,#token("1","Int"))
														varN,
														/* rhs KToken */ m.NewIntFromString("1"),
														config, -1)
													if err3296 != nil {
														return m.NoResult, err3296
													}
													eval3285, err3285 := evalXhashdasmContractAux2( // #dasmContractAux2(#drop(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS),NBITS,`_Map_`(`_|->_`(N,`String2IeleName`(#unparseByteStack(#take(`_+Int_`(`_*Int__INT`(W1,#token("256","Int")),W2),WS)))),FUNCS),NAME,DEFS,`_+Int_`(N,#token("1","Int")),SIZE,BYTES)
														eval3286,
														varNBITS,
														eval3289,
														varNAME,
														varDEFS,
														eval3296,
														varSIZE,
														varBYTES,
														config, -1)
													if err3285 != nil {
														return m.NoResult, err3285
													}
													return eval3285, nil
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// rule #2718
	// source: iele-binary.k @140
	// {| rule #dasmContractAux2(WS,NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,BYTES,topLevelAppend(DEFS,#dasmFunctions(WS,NBITS,FUNCS,NAME))),`.List{"contractDefinitionList"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(4846d04c88fe553d083a9be2b261c3d4d9d43385abf1fa0a1b6e219337849769) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,181)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c1 // lhs KVariable WS
		if varNBITS, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varFUNCS, t := c3.(*m.Map); t && varFUNCS.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
				varNAME := c4 // lhs KVariable NAME
				varDEFS := c5 // lhs KVariable DEFS
				if _, t := c6.(*m.Int); t { // lhs KVariable with hook:INT.Int
					if varSIZE, t := c7.(*m.Int); t { // lhs KVariable with hook:INT.Int
						if varBYTES, t := c8.(*m.String); t { // lhs KVariable with hook:STRING.String
							// REQUIRES
							eval3297, err3297 := evalIsWordStack( // isWordStack(WS)
								varWS,
								config, -1)
							if err3297 != nil {
								return m.NoResult, err3297
							}
							eval3298, err3298 := evalIsIeleName( // isIeleName(NAME)
								varNAME,
								config, -1)
							if err3298 != nil {
								return m.NoResult, err3298
							}
							eval3299, err3299 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
								varDEFS,
								config, -1)
							if err3299 != nil {
								return m.NoResult, err3299
							}
							if ((m.IsTrue(eval3297)) &&
							   (m.IsTrue(eval3298)) /* && */ /* rhs precomputed isInt(SIZE) */ ) &&
							   (m.IsTrue(eval3299)) /* && */ /* rhs precomputed isMap(FUNCS) */  /* && */ /* rhs precomputed isString(BYTES) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(N) */  {
								// RHS
								traceRuleApply("FUNC", 2718, "{| rule #dasmContractAux2(WS,NBITS,FUNCS,NAME,DEFS,N,SIZE,BYTES)=>contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,BYTES,topLevelAppend(DEFS,#dasmFunctions(WS,NBITS,FUNCS,NAME))),`.List{\"contractDefinitionList\"}`(.KList)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isIeleName(NAME)),isInt(SIZE)),isTopLevelDefinitions(DEFS)),isMap(FUNCS)),isString(BYTES)),isInt(NBITS)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4846d04c88fe553d083a9be2b261c3d4d9d43385abf1fa0a1b6e219337849769) contentStartColumn(10) contentStartLine(140) org.kframework.attributes.Location(Location(140,10,140,181)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
								eval3301, err3301 := evalXhashdasmFunctions( // #dasmFunctions(WS,NBITS,FUNCS,NAME)
									varWS,
									varNBITS,
									varFUNCS,
									varNAME,
									config, -1)
								if err3301 != nil {
									return m.NoResult, err3301
								}
								eval3300, err3300 := evalTopLevelAppend( // topLevelAppend(DEFS,#dasmFunctions(WS,NBITS,FUNCS,NAME))
									varDEFS,
									eval3301,
									config, -1)
								if err3300 != nil {
									return m.NoResult, err3300
								}
								return &m.KApply{Label: m.LblContractDefinitionList, List: []m.K{ // as-is contractDefinitionList
									&m.KApply{Label: m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, List: []m.K{ // as-is contract_!__{_}_IELE-CONFIGURATION
										varNAME,
										varSIZE,
										varBYTES,
										eval3300,
									}},
									&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
									}},
								}}, nil
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmContractAux2", args: []m.K{c1, c2, c3, c4, c5, c6, c7, c8}}
}

func evalXhashcontractSize(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2719
	// source: iele.k @1777
	// {| rule #contractSize(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,_70,_71),_72),NAME)=>SIZE requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(_72),isIeleName(NAME)),isTopLevelDefinitions(_71)),isString(_70)),isInt(SIZE)) ensures #token("true","Bool") [UNIQUE_ID(9f5b95037e8f085a370a0d57d6715753adfd74e3974f57b962c88966790f4224) contentStartColumn(10) contentStartLine(1777) org.kframework.attributes.Location(Location(1777,10,1777,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,_70,_71),_72)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,_70,_71)
			varNAME := kapp1.List[0] // lhs KVariable NAME
			if varSIZE, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu71 := kapp1.List[3] // lhs KVariable _71
					varXu72 := kapp0.List[1] // lhs KVariable _72
					if c2.Equals(varNAME) { // lhs KVariable, which reappears:NAME
						// REQUIRES
						eval3302, err3302 := evalIsContract( // isContract(_72)
							varXu72,
							config, -1)
						if err3302 != nil {
							return m.NoResult, err3302
						}
						eval3303, err3303 := evalIsIeleName( // isIeleName(NAME)
							varNAME,
							config, -1)
						if err3303 != nil {
							return m.NoResult, err3303
						}
						eval3304, err3304 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_71)
							varXu71,
							config, -1)
						if err3304 != nil {
							return m.NoResult, err3304
						}
						if ((m.IsTrue(eval3302)) &&
						   (m.IsTrue(eval3303))) &&
						   (m.IsTrue(eval3304)) /* && */ /* rhs precomputed isString(_70) */  /* && */ /* rhs precomputed isInt(SIZE) */  {
							// RHS
							traceRuleApply("FUNC", 2719, "{| rule #contractSize(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(NAME,SIZE,_70,_71),_72),NAME)=>SIZE requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(_72),isIeleName(NAME)),isTopLevelDefinitions(_71)),isString(_70)),isInt(SIZE)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9f5b95037e8f085a370a0d57d6715753adfd74e3974f57b962c88966790f4224) contentStartColumn(10) contentStartLine(1777) org.kframework.attributes.Location(Location(1777,10,1777,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
							return varSIZE, nil
						}
					}
				}
			}
		}
	}

	// rule #2720
	// source: iele.k @1778
	// {| rule #contractSize(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_40,_41,_42,_43),REST),NAME)=>#contractSize(REST,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_41),isIeleName(NAME)),isTopLevelDefinitions(_43)),isContract(REST)),isIeleName(_40)),isString(_42)) ensures #token("true","Bool") [UNIQUE_ID(2f34789777ba9ac0c2b88d948b9c413ad15edbbcf8a2d1d169a441b0ee0dc6fd) contentStartColumn(10) contentStartLine(1778) org.kframework.attributes.Location(Location(1778,10,1778,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblContractDefinitionList && len(kapp0.List) == 2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_40,_41,_42,_43),REST)
		if kapp1, t := kapp0.List[0].(*m.KApply); t && kapp1.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp1.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(_40,_41,_42,_43)
			varXu40 := kapp1.List[0] // lhs KVariable _40
			if _, t := kapp1.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp1.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
					varXu43 := kapp1.List[3] // lhs KVariable _43
					varREST := kapp0.List[1] // lhs KVariable REST
					varNAME := c2 // lhs KVariable NAME
					// REQUIRES
					eval3305, err3305 := evalIsIeleName( // isIeleName(NAME)
						varNAME,
						config, -1)
					if err3305 != nil {
						return m.NoResult, err3305
					}
					eval3306, err3306 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(_43)
						varXu43,
						config, -1)
					if err3306 != nil {
						return m.NoResult, err3306
					}
					eval3307, err3307 := evalIsContract( // isContract(REST)
						varREST,
						config, -1)
					if err3307 != nil {
						return m.NoResult, err3307
					}
					eval3308, err3308 := evalIsIeleName( // isIeleName(_40)
						varXu40,
						config, -1)
					if err3308 != nil {
						return m.NoResult, err3308
					}
					if (((/* rhs precomputed isInt(_41) */ /* && */
					   m.IsTrue(eval3305)) &&
					   (m.IsTrue(eval3306))) &&
					   (m.IsTrue(eval3307))) &&
					   (m.IsTrue(eval3308)) /* && */ /* rhs precomputed isString(_42) */  {
						// RHS
						traceRuleApply("FUNC", 2720, "{| rule #contractSize(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(_40,_41,_42,_43),REST),NAME)=>#contractSize(REST,NAME) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_41),isIeleName(NAME)),isTopLevelDefinitions(_43)),isContract(REST)),isIeleName(_40)),isString(_42)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2f34789777ba9ac0c2b88d948b9c413ad15edbbcf8a2d1d169a441b0ee0dc6fd) contentStartColumn(10) contentStartLine(1778) org.kframework.attributes.Location(Location(1778,10,1778,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
						eval3309, err3309 := evalXhashcontractSize( // #contractSize(REST,NAME)
							varREST,
							varNAME,
							config, -1)
						if err3309 != nil {
							return m.NoResult, err3309
						}
						return eval3309, nil
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashcontractSize", args: []m.K{c1, c2}}
}

func evalXumodIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.emod
	lbl := m.LblXumodIntXuXuINT // _modInt__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.emod(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.emod, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2721
	// source: domains.k @391
	// {| rule `_modInt__INT`(I1,I2)=>`_%Int__INT`(`_+Int_`(`_%Int__INT`(I1,absInt(I2)),absInt(I2)),absInt(I2)) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_=/=Int__INT`(I2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(fb4bf5b2f12862af75611e525d51d7e1966bcc322ee8456d2ed1cdaadf02f6f5) concrete() contentStartColumn(5) contentStartLine(391) org.kframework.attributes.Location(Location(391,5,394,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varI1, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varI2, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3310, err3310 := evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(I2,#token("0","Int"))
				varI2,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3310 != nil {
				return m.NoResult, err3310
			}
			if /* rhs precomputed isInt(I1) && isInt(I2) */ /* && */
			   m.IsTrue(eval3310) {
				// RHS
				traceRuleApply("FUNC", 2721, "{| rule `_modInt__INT`(I1,I2)=>`_%Int__INT`(`_+Int_`(`_%Int__INT`(I1,absInt(I2)),absInt(I2)),absInt(I2)) requires `_andBool_`(`_andBool_`(isInt(I1),isInt(I2)),`_=/=Int__INT`(I2,#token(\"0\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(fb4bf5b2f12862af75611e525d51d7e1966bcc322ee8456d2ed1cdaadf02f6f5) concrete() contentStartColumn(5) contentStartLine(391) org.kframework.attributes.Location(Location(391,5,394,23)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
				eval3314, err3314 := evalAbsInt( // absInt(I2)
					varI2,
					config, -1)
				if err3314 != nil {
					return m.NoResult, err3314
				}
				eval3313, err3313 := evalXuXpercentIntXuXuINT( // `_%Int__INT`(I1,absInt(I2))
					varI1,
					eval3314,
					config, -1)
				if err3313 != nil {
					return m.NoResult, err3313
				}
				eval3315, err3315 := evalAbsInt( // absInt(I2)
					varI2,
					config, -1)
				if err3315 != nil {
					return m.NoResult, err3315
				}
				eval3312, err3312 := evalXuXplusIntXu( // `_+Int_`(`_%Int__INT`(I1,absInt(I2)),absInt(I2))
					eval3313,
					eval3315,
					config, -1)
				if err3312 != nil {
					return m.NoResult, err3312
				}
				eval3316, err3316 := evalAbsInt( // absInt(I2)
					varI2,
					config, -1)
				if err3316 != nil {
					return m.NoResult, err3316
				}
				eval3311, err3311 := evalXuXpercentIntXuXuINT( // `_%Int__INT`(`_+Int_`(`_%Int__INT`(I1,absInt(I2)),absInt(I2)),absInt(I2))
					eval3312,
					eval3316,
					config, -1)
				if err3311 != nil {
					return m.NoResult, err3311
				}
				return eval3311, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXumodIntXuXuINT", args: []m.K{c1, c2}}
}

func evalRfindChar(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.rfindChar
	lbl := m.LblRfindChar // rfindChar
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.rfindChar(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.rfindChar, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	// rule #2722
	// source: domains.k @555
	// {| rule rfindChar(S1,S2,I)=>`maxInt(_,_)_INT`(rfindString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),rfindChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isString(S2)),isString(S1)),`_=/=String__STRING`(S2,#token("\"\"","String"))) ensures #token("true","Bool") [UNIQUE_ID(dea96adb63c0d77626a51f08fb7a6daf76e3a7b8d0205f5285542c1160f2ddeb) contentStartColumn(8) contentStartLine(555) org.kframework.attributes.Location(Location(555,8,555,182)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varS1, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varS2, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			if varI, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3317, err3317 := evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(S2,#token("\"\"","String"))
					varS2,
					/* rhs KToken */ m.NewString(""),
					config, -1)
				if err3317 != nil {
					return m.NoResult, err3317
				}
				if /* rhs precomputed isInt(I) && isString(S2) && isString(S1) */ /* && */
				   m.IsTrue(eval3317) {
					// RHS
					traceRuleApply("FUNC", 2722, "{| rule rfindChar(S1,S2,I)=>`maxInt(_,_)_INT`(rfindString(S1,substrString(S2,#token(\"0\",\"Int\"),#token(\"1\",\"Int\")),I),rfindChar(S1,substrString(S2,#token(\"1\",\"Int\"),lengthString(S2)),I)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isString(S2)),isString(S1)),`_=/=String__STRING`(S2,#token(\"\\\"\\\"\",\"String\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dea96adb63c0d77626a51f08fb7a6daf76e3a7b8d0205f5285542c1160f2ddeb) contentStartColumn(8) contentStartLine(555) org.kframework.attributes.Location(Location(555,8,555,182)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval3320, err3320 := evalSubstrString( // substrString(S2,#token("0","Int"),#token("1","Int"))
						varS2,
						/* rhs KToken */ m.NewIntFromString("0"),
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err3320 != nil {
						return m.NoResult, err3320
					}
					eval3319, err3319 := evalRfindString( // rfindString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I)
						varS1,
						eval3320,
						varI,
						config, -1)
					if err3319 != nil {
						return m.NoResult, err3319
					}
					eval3323, err3323 := evalLengthString( // lengthString(S2)
						varS2,
						config, -1)
					if err3323 != nil {
						return m.NoResult, err3323
					}
					eval3322, err3322 := evalSubstrString( // substrString(S2,#token("1","Int"),lengthString(S2))
						varS2,
						/* rhs KToken */ m.NewIntFromString("1"),
						eval3323,
						config, -1)
					if err3322 != nil {
						return m.NoResult, err3322
					}
					eval3321, err3321 := evalRfindChar( // rfindChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I)
						varS1,
						eval3322,
						varI,
						config, -1)
					if err3321 != nil {
						return m.NoResult, err3321
					}
					eval3318, err3318 := evalMaxIntXlparenXuXcommaXuXrparenXuINT( // `maxInt(_,_)_INT`(rfindString(S1,substrString(S2,#token("0","Int"),#token("1","Int")),I),rfindChar(S1,substrString(S2,#token("1","Int"),lengthString(S2)),I))
						eval3319,
						eval3321,
						config, -1)
					if err3318 != nil {
						return m.NoResult, err3318
					}
					return eval3318, nil
				}
			}
		}
	}

	// rule #2723
	// source: domains.k @556
	// {| rule rfindChar(_12,#token("\"\"","String"),_13)=>#token("-1","Int") requires `_andBool_`(isInt(_13),isString(_12)) ensures #token("true","Bool") [UNIQUE_ID(04cb290eea9d7c93a48f761cab20217a689222a306098df1120917b013944330) contentStartColumn(8) contentStartLine(556) org.kframework.attributes.Location(Location(556,8,556,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if c2.Equals(m.NewString("")) { // #token("\"\"","String")
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(_13) && isString(_12)
				// RHS
				traceRuleApply("FUNC", 2723, "{| rule rfindChar(_12,#token(\"\\\"\\\"\",\"String\"),_13)=>#token(\"-1\",\"Int\") requires `_andBool_`(isInt(_13),isString(_12)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(04cb290eea9d7c93a48f761cab20217a689222a306098df1120917b013944330) contentStartColumn(8) contentStartLine(556) org.kframework.attributes.Location(Location(556,8,556,33)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return /* rhs KToken */ m.NewIntFromString("-1"), nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalRfindChar", args: []m.K{c1, c2, c3}}
}

func evalIsTypes(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2724
	// source: ? @?
	// {| rule isTypes(#KToken(#token("Types","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTypes { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2724, "{| rule isTypes(#KToken(#token(\"Types\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2725
	// source: ? @?
	// {| rule isTypes(`.List{"typeList"}`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotetypeListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"typeList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2725, "{| rule isTypes(`.List{\"typeList\"}`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2726
	// source: ? @?
	// {| rule isTypes(typeList(K0,K1))=>#token("true","Bool") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblTypeList && len(kapp0.List) == 2 { // typeList(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3324, err3324 := evalIsType( // isType(K0)
			varK0,
			config, -1)
		if err3324 != nil {
			return m.NoResult, err3324
		}
		eval3325, err3325 := evalIsTypes( // isTypes(K1)
			varK1,
			config, -1)
		if err3325 != nil {
			return m.NoResult, err3325
		}
		if (m.IsTrue(eval3324)) &&
		   (m.IsTrue(eval3325)) {
			// RHS
			traceRuleApply("FUNC", 2726, "{| rule isTypes(typeList(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isType(K0),isTypes(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2727
	// source: ? @?
	// {| rule isTypes(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2727, "{| rule isTypes(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsPeakMemoryCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2728
	// source: ? @?
	// {| rule isPeakMemoryCell(#KToken(#token("PeakMemoryCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortPeakMemoryCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2728, "{| rule isPeakMemoryCell(#KToken(#token(\"PeakMemoryCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2729
	// source: ? @?
	// {| rule isPeakMemoryCell(`<peakMemory>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltpeakMemoryXgt && len(kapp0.List) == 1 { // `<peakMemory>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2729, "{| rule isPeakMemoryCell(`<peakMemory>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2730
	// source: ? @?
	// {| rule isPeakMemoryCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2730, "{| rule isPeakMemoryCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalCdiv(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2731
	// source: iele-gas.k @848
	// {| rule `Cdiv`(SCHED,L1,L2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED),`Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int")),L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_>=Int__INT`(L1,L2)) ensures #token("true","Bool") [UNIQUE_ID(f332c8682cd8403f0efd89863f31fd1eb474b0ebc761f23c5bb61524902fbfa1) contentStartColumn(10) contentStartLine(848) org.kframework.attributes.Location(Location(848,10,852,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varL2, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3326, err3326 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err3326 != nil {
					return m.NoResult, err3326
				}
				eval3327, err3327 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(L1,L2)
					varL1,
					varL2,
					config, -1)
				if err3327 != nil {
					return m.NoResult, err3327
				}
				if (/* rhs precomputed isInt(L2) */ /* && */
				   m.IsTrue(eval3326) /* && */ /* rhs precomputed isInt(L1) */ ) &&
				   (m.IsTrue(eval3327)) {
					// RHS
					traceRuleApply("FUNC", 2731, "{| rule `Cdiv`(SCHED,L1,L2)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED),`Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token(\"1\",\"Int\")),L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_>=Int__INT`(L1,L2)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f332c8682cd8403f0efd89863f31fd1eb474b0ebc761f23c5bb61524902fbfa1) contentStartColumn(10) contentStartLine(848) org.kframework.attributes.Location(Location(848,10,852,27)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval3331, err3331 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivkaraXuIELEXhyphenGAS, List: []m.K{ // as-is Gdivkara_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3331 != nil {
						return m.NoResult, err3331
					}
					eval3334, err3334 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(L1,L2)
						varL1,
						varL2,
						config, -1)
					if err3334 != nil {
						return m.NoResult, err3334
					}
					eval3333, err3333 := evalXuXplusIntXu( // `_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int"))
						eval3334,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err3333 != nil {
						return m.NoResult, err3333
					}
					eval3332, err3332 := evalCkara( // `Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int")),L2)
						eval3333,
						varL2,
						config, -1)
					if err3332 != nil {
						return m.NoResult, err3332
					}
					eval3330, err3330 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED),`Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int")),L2))
						eval3331,
						eval3332,
						config, -1)
					if err3330 != nil {
						return m.NoResult, err3330
					}
					eval3336, err3336 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivwordXuIELEXhyphenGAS, List: []m.K{ // as-is Gdivword_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3336 != nil {
						return m.NoResult, err3336
					}
					eval3335, err3335 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1)
						eval3336,
						varL1,
						config, -1)
					if err3335 != nil {
						return m.NoResult, err3335
					}
					eval3329, err3329 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED),`Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int")),L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1))
						eval3330,
						eval3335,
						config, -1)
					if err3329 != nil {
						return m.NoResult, err3329
					}
					eval3337, err3337 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivXuIELEXhyphenGAS, List: []m.K{ // as-is Gdiv_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3337 != nil {
						return m.NoResult, err3337
					}
					eval3328, err3328 := evalXuXplusIntXu( // `_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivkara_IELE-GAS`(.KList),SCHED),`Ckara`(`_+Int_`(`_-Int__INT`(L1,L2),#token("1","Int")),L2)),`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1)),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED))
						eval3329,
						eval3337,
						config, -1)
					if err3328 != nil {
						return m.NoResult, err3328
					}
					return eval3328, nil
				}
			}
		}
	}

	// rule #2732
	// source: iele-gas.k @854
	// {| rule `Cdiv`(SCHED,L1,L2)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(9a4b0ed2c2060b6671f8c9dd42dfd1607e6137e4cfbf6ca152ea7c1f969a2c88) contentStartColumn(10) contentStartLine(854) org.kframework.attributes.Location(Location(854,10,857,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varL1, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3338, err3338 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err3338 != nil {
					return m.NoResult, err3338
				}
				eval3339, err3339 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblGnewarithXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewarith_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err3339 != nil {
					return m.NoResult, err3339
				}
				if (/* rhs precomputed isInt(L2) */ /* && */
				   m.IsTrue(eval3338) /* && */ /* rhs precomputed isInt(L1) */ ) &&
				   (!(m.IsTrue(eval3339))) {
					// RHS
					traceRuleApply("FUNC", 2732, "{| rule `Cdiv`(SCHED,L1,L2)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a4b0ed2c2060b6671f8c9dd42dfd1607e6137e4cfbf6ca152ea7c1f969a2c88) contentStartColumn(10) contentStartLine(854) org.kframework.attributes.Location(Location(854,10,857,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K) owise()] |}")
					eval3342, err3342 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivwordXuIELEXhyphenGAS, List: []m.K{ // as-is Gdivword_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3342 != nil {
						return m.NoResult, err3342
					}
					eval3341, err3341 := evalXuXstarIntXuXuINT( // `_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1)
						eval3342,
						varL1,
						config, -1)
					if err3341 != nil {
						return m.NoResult, err3341
					}
					eval3343, err3343 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivXuIELEXhyphenGAS, List: []m.K{ // as-is Gdiv_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3343 != nil {
						return m.NoResult, err3343
					}
					eval3340, err3340 := evalXuXplusIntXu( // `_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gdivword_IELE-GAS`(.KList),SCHED),L1),`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED))
						eval3341,
						eval3343,
						config, -1)
					if err3340 != nil {
						return m.NoResult, err3340
					}
					return eval3340, nil
				}
			}
		}
	}

	// rule #2733
	// source: iele-gas.k @860
	// {| rule `Cdiv`(SCHED,L1,L2)=>`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(327d3634635acdbd224027a4c196f11c75d22a31a8009d06f0ab8def7c5454da) contentStartColumn(10) contentStartLine(860) org.kframework.attributes.Location(Location(860,10,862,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K) owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if _, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3344, err3344 := evalIsSchedule( // isSchedule(SCHED)
					varSCHED,
					config, -1)
				if err3344 != nil {
					return m.NoResult, err3344
				}
				eval3345, err3345 := evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)
					&m.KApply{Label: m.LblGnewarithXuIELEXhyphenGAS, List: []m.K{ // as-is Gnewarith_IELE-GAS
					}},
					varSCHED,
					config, -1)
				if err3345 != nil {
					return m.NoResult, err3345
				}
				if (/* rhs precomputed isInt(L2) */ /* && */
				   m.IsTrue(eval3344) /* && */ /* rhs precomputed isInt(L1) */ ) &&
				   (m.IsTrue(eval3345)) {
					// RHS
					traceRuleApply("FUNC", 2733, "{| rule `Cdiv`(SCHED,L1,L2)=>`_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(L2),isSchedule(SCHED)),isInt(L1)),`_<<_>>_IELE-GAS`(`Gnewarith_IELE-GAS`(.KList),SCHED)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(327d3634635acdbd224027a4c196f11c75d22a31a8009d06f0ab8def7c5454da) contentStartColumn(10) contentStartLine(860) org.kframework.attributes.Location(Location(860,10,862,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K) owise()] |}")
					eval3346, err3346 := evalXuXltXuXgtXuIELEXhyphenGAS( // `_<_>_IELE-GAS`(`Gdiv_IELE-GAS`(.KList),SCHED)
						&m.KApply{Label: m.LblGdivXuIELEXhyphenGAS, List: []m.K{ // as-is Gdiv_IELE-GAS
						}},
						varSCHED,
						config, -1)
					if err3346 != nil {
						return m.NoResult, err3346
					}
					return eval3346, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalCdiv", args: []m.K{c1, c2, c3}}
}

func evalDirectionalityChar(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.directionality
	lbl := m.LblDirectionalityChar // directionalityChar
	sort := m.SortString
	if hookRes, hookErr := stringHooks.directionality(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.directionality, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalDirectionalityChar", args: []m.K{c}}
}

func evalIsIDCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2734
	// source: ? @?
	// {| rule isIdCell(#KToken(#token("IdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2734, "{| rule isIdCell(#KToken(#token(\"IdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2735
	// source: ? @?
	// {| rule isIdCell(`<id>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltidXgt && len(kapp0.List) == 1 { // `<id>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2735, "{| rule isIdCell(`<id>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2736
	// source: ? @?
	// {| rule isIdCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2736, "{| rule isIdCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashopendirXlparenXuXrparenXuKXhyphenIO(c m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.opendir
	lbl := m.LblXhashopendirXlparenXuXrparenXuKXhyphenIO // #opendir(_)_K-IO
	sort := m.SortKItem
	if hookRes, hookErr := ioHooks.opendir(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.opendir, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashopendirXlparenXuXrparenXuKXhyphenIO", args: []m.K{c}}
}

func evalIsGlobalDefinition(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2737
	// source: ? @?
	// {| rule isGlobalDefinition(#KToken(#token("GlobalDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2737, "{| rule isGlobalDefinition(#KToken(#token(\"GlobalDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2738
	// source: ? @?
	// {| rule isGlobalDefinition(globalDefinition(K0,K1))=>#token("true","Bool") requires `_andBool_`(isGlobalName(K0),isIntConstant(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblGlobalDefinition && len(kapp0.List) == 2 { // globalDefinition(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3347, err3347 := evalIsGlobalName( // isGlobalName(K0)
			varK0,
			config, -1)
		if err3347 != nil {
			return m.NoResult, err3347
		}
		eval3348, err3348 := evalIsIntConstant( // isIntConstant(K1)
			varK1,
			config, -1)
		if err3348 != nil {
			return m.NoResult, err3348
		}
		if (m.IsTrue(eval3347)) &&
		   (m.IsTrue(eval3348)) {
			// RHS
			traceRuleApply("FUNC", 2738, "{| rule isGlobalDefinition(globalDefinition(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isGlobalName(K0),isIntConstant(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2739
	// source: ? @?
	// {| rule isGlobalDefinition(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2739, "{| rule isGlobalDefinition(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalTwos(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2740
	// source: data.k @227
	// {| rule twos(N,W)=>bitRangeInt(W,#token("0","Int"),`_<<Int__INT`(N,#token("3","Int"))) requires `_andBool_`(isInt(W),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(eceec9b8bae6aea501b3df2bdb73ddd36f035eef9d5111e5ba9da4005f8d3841) contentStartColumn(10) contentStartLine(227) org.kframework.attributes.Location(Location(227,10,227,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varN, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varW, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(W) && isInt(N)
			// RHS
			traceRuleApply("FUNC", 2740, "{| rule twos(N,W)=>bitRangeInt(W,#token(\"0\",\"Int\"),`_<<Int__INT`(N,#token(\"3\",\"Int\"))) requires `_andBool_`(isInt(W),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(eceec9b8bae6aea501b3df2bdb73ddd36f035eef9d5111e5ba9da4005f8d3841) contentStartColumn(10) contentStartLine(227) org.kframework.attributes.Location(Location(227,10,227,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3350, err3350 := evalXuXltXltIntXuXuINT( // `_<<Int__INT`(N,#token("3","Int"))
				varN,
				/* rhs KToken */ m.NewIntFromString("3"),
				config, -1)
			if err3350 != nil {
				return m.NoResult, err3350
			}
			eval3349, err3349 := evalBitRangeInt( // bitRangeInt(W,#token("0","Int"),`_<<Int__INT`(N,#token("3","Int")))
				varW,
				/* rhs KToken */ m.NewIntFromString("0"),
				eval3350,
				config, -1)
			if err3349 != nil {
				return m.NoResult, err3349
			}
			return eval3349, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalTwos", args: []m.K{c1, c2}}
}

func evalIsContractNameCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2741
	// source: ? @?
	// {| rule isContractNameCell(#KToken(#token("ContractNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2741, "{| rule isContractNameCell(#KToken(#token(\"ContractNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2742
	// source: ? @?
	// {| rule isContractNameCell(`<contractName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractNameXgt && len(kapp0.List) == 1 { // `<contractName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3351, err3351 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err3351 != nil {
			return m.NoResult, err3351
		}
		if m.IsTrue(eval3351) {
			// RHS
			traceRuleApply("FUNC", 2742, "{| rule isContractNameCell(`<contractName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2743
	// source: ? @?
	// {| rule isContractNameCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2743, "{| rule isContractNameCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTxGasLimitCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2744
	// source: ? @?
	// {| rule isTxGasLimitCell(#KToken(#token("TxGasLimitCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxGasLimitCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2744, "{| rule isTxGasLimitCell(#KToken(#token(\"TxGasLimitCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2745
	// source: ? @?
	// {| rule isTxGasLimitCell(`<txGasLimit>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxGasLimitXgt && len(kapp0.List) == 1 { // `<txGasLimit>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2745, "{| rule isTxGasLimitCell(`<txGasLimit>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2746
	// source: ? @?
	// {| rule isTxGasLimitCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2746, "{| rule isTxGasLimitCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBExp(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// rule #2747
	// source: ? @?
	// {| rule isBExp(#KToken(#token("BExp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBExp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2747, "{| rule isBExp(#KToken(#token(\"BExp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2748
	// source: ? @?
	// {| rule isBExp(#accountEmpty(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashaccountEmpty && len(kapp0.List) == 1 { // #accountEmpty(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2748, "{| rule isBExp(#accountEmpty(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2749
	// source: ? @?
	// {| rule isBExp(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2749, "{| rule isBExp(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2750
	// source: ? @?
	// {| rule isBExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2750, "{| rule isBExp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFunctionSignature(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2751
	// source: ? @?
	// {| rule isFunctionSignature(`_(_)_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isGlobalName(K0),isFunctionParameters(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_(_)_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3352, err3352 := evalIsGlobalName( // isGlobalName(K0)
			varK0,
			config, -1)
		if err3352 != nil {
			return m.NoResult, err3352
		}
		eval3353, err3353 := evalIsFunctionParameters( // isFunctionParameters(K1)
			varK1,
			config, -1)
		if err3353 != nil {
			return m.NoResult, err3353
		}
		if (m.IsTrue(eval3352)) &&
		   (m.IsTrue(eval3353)) {
			// RHS
			traceRuleApply("FUNC", 2751, "{| rule isFunctionSignature(`_(_)_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isGlobalName(K0),isFunctionParameters(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2752
	// source: ? @?
	// {| rule isFunctionSignature(#KToken(#token("FunctionSignature","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionSignature { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2752, "{| rule isFunctionSignature(#KToken(#token(\"FunctionSignature\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2753
	// source: ? @?
	// {| rule isFunctionSignature(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2753, "{| rule isFunctionSignature(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsContractDefinition(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2754
	// source: ? @?
	// {| rule isContractDefinition(`contract_!__{_}_IELE-CONFIGURATION`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(K0),isInt(K1)),isString(K2)),isTopLevelDefinitions(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION && len(kapp0.List) == 4 { // `contract_!__{_}_IELE-CONFIGURATION`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[2].(*m.String); t { // lhs KVariable with hook:STRING.String
				varK3 := kapp0.List[3] // lhs KVariable K3
				// REQUIRES
				eval3354, err3354 := evalIsIeleName( // isIeleName(K0)
					varK0,
					config, -1)
				if err3354 != nil {
					return m.NoResult, err3354
				}
				eval3355, err3355 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(K3)
					varK3,
					config, -1)
				if err3355 != nil {
					return m.NoResult, err3355
				}
				if (m.IsTrue(eval3354) /* && */ /* rhs precomputed isInt(K1) */  /* && */ /* rhs precomputed isString(K2) */ ) &&
				   (m.IsTrue(eval3355)) {
					// RHS
					traceRuleApply("FUNC", 2754, "{| rule isContractDefinition(`contract_!__{_}_IELE-CONFIGURATION`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(K0),isInt(K1)),isString(K2)),isTopLevelDefinitions(K3)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2755
	// source: ? @?
	// {| rule isContractDefinition(#KToken(#token("ContractDefinition","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractDefinition { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2755, "{| rule isContractDefinition(#KToken(#token(\"ContractDefinition\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2756
	// source: ? @?
	// {| rule isContractDefinition(`contract_{_}_IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isIeleName(K0),isTopLevelDefinitions(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblContractXuXlbracketXuXrbracketXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `contract_{_}_IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3356, err3356 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err3356 != nil {
			return m.NoResult, err3356
		}
		eval3357, err3357 := evalIsTopLevelDefinitions( // isTopLevelDefinitions(K1)
			varK1,
			config, -1)
		if err3357 != nil {
			return m.NoResult, err3357
		}
		if (m.IsTrue(eval3356)) &&
		   (m.IsTrue(eval3357)) {
			// RHS
			traceRuleApply("FUNC", 2756, "{| rule isContractDefinition(`contract_{_}_IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isIeleName(K0),isTopLevelDefinitions(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2757
	// source: ? @?
	// {| rule isContractDefinition(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2757, "{| rule isContractDefinition(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsLocalCallsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2758
	// source: ? @?
	// {| rule isLocalCallsCell(#KToken(#token("LocalCallsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLocalCallsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2758, "{| rule isLocalCallsCell(#KToken(#token(\"LocalCallsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2759
	// source: ? @?
	// {| rule isLocalCallsCell(`<localCalls>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlocalCallsXgt && len(kapp0.List) == 1 { // `<localCalls>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2759, "{| rule isLocalCallsCell(`<localCalls>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2760
	// source: ? @?
	// {| rule isLocalCallsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2760, "{| rule isLocalCallsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsMode(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2761
	// source: ? @?
	// {| rule isMode(#KToken(#token("Mode","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMode { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2761, "{| rule isMode(#KToken(#token(\"Mode\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2762
	// source: ? @?
	// {| rule isMode(`NORMAL`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNORMAL && len(kapp0.List) == 0 { // `NORMAL`(.KList)
		// RHS
		traceRuleApply("FUNC", 2762, "{| rule isMode(`NORMAL`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2763
	// source: ? @?
	// {| rule isMode(`VMTESTS_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblVMTESTSXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `VMTESTS_IELE-CONSTANTS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2763, "{| rule isMode(`VMTESTS_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2764
	// source: ? @?
	// {| rule isMode(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2764, "{| rule isMode(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXdotSet(config m.K, guard int) (m.K, error) {
	//hook: SET.unit
	lbl := m.LblXdotSet // .Set
	sort := m.SortSet
	if hookRes, hookErr := setHooks.unit(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook SET.unit, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXdotSet", args: nil}
}

//var constXdotSet K = evalXdotSet(m.InternedBottom)

func evalInitTxGasPriceCell(config m.K, guard int) (m.K, error) {
	// rule #2765
	// source: ? @?
	// {| rule initTxGasPriceCell(.KList)=>`<txGasPrice>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d507bf2447c7bdcd679c845babc34f0ea6d60f29a40170b31fc7ef0be8610c7c) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2765, "{| rule initTxGasPriceCell(.KList)=>`<txGasPrice>`(#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(d507bf2447c7bdcd679c845babc34f0ea6d60f29a40170b31fc7ef0be8610c7c) initializer()] |}")
	return &m.KApply{Label: m.LblXlttxGasPriceXgt, List: []m.K{ // as-is <txGasPrice>
		/* rhs KToken */ m.NewIntFromString("0"),
	}}, nil

}

//var constInitTxGasPriceCell K = evalInitTxGasPriceCell(m.InternedBottom)

func evalIsFunctionCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2766
	// source: ? @?
	// {| rule isFunctionCell(#KToken(#token("FunctionCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFunctionCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2766, "{| rule isFunctionCell(#KToken(#token(\"FunctionCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2767
	// source: ? @?
	// {| rule isFunctionCell(`<function>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfunctionXgt && len(kapp0.List) == 5 { // `<function>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval3358, err3358 := evalIsFuncIDCell( // isFuncIdCell(K0)
			varK0,
			config, -1)
		if err3358 != nil {
			return m.NoResult, err3358
		}
		eval3359, err3359 := evalIsNparamsCell( // isNparamsCell(K1)
			varK1,
			config, -1)
		if err3359 != nil {
			return m.NoResult, err3359
		}
		eval3360, err3360 := evalIsInstructionsCell( // isInstructionsCell(K2)
			varK2,
			config, -1)
		if err3360 != nil {
			return m.NoResult, err3360
		}
		eval3361, err3361 := evalIsJumpTableCell( // isJumpTableCell(K3)
			varK3,
			config, -1)
		if err3361 != nil {
			return m.NoResult, err3361
		}
		eval3362, err3362 := evalIsNregsCell( // isNregsCell(K4)
			varK4,
			config, -1)
		if err3362 != nil {
			return m.NoResult, err3362
		}
		if ((((m.IsTrue(eval3358)) &&
		   (m.IsTrue(eval3359))) &&
		   (m.IsTrue(eval3360))) &&
		   (m.IsTrue(eval3361))) &&
		   (m.IsTrue(eval3362)) {
			// RHS
			traceRuleApply("FUNC", 2767, "{| rule isFunctionCell(`<function>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isFuncIdCell(K0),isNparamsCell(K1)),isInstructionsCell(K2)),isJumpTableCell(K3)),isNregsCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2768
	// source: ? @?
	// {| rule isFunctionCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2768, "{| rule isFunctionCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitFuncIDCell(config m.K, guard int) (m.K, error) {
	// rule #2769
	// source: ? @?
	// {| rule initFuncIdCell(.KList)=>`<funcId>`(#token("deposit","IeleName")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e54ba174f36b2813926e61a5a00c4b2d8dbd18e8f3008b08538f7371058857e6) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2769, "{| rule initFuncIdCell(.KList)=>`<funcId>`(#token(\"deposit\",\"IeleName\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(e54ba174f36b2813926e61a5a00c4b2d8dbd18e8f3008b08538f7371058857e6) initializer()] |}")
	return &m.KApply{Label: m.LblXltfuncIDXgt, List: []m.K{ // as-is <funcId>
		/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "deposit"},
	}}, nil

}

//var constInitFuncIDCell K = evalInitFuncIDCell(m.InternedBottom)

func evalInitArgsCell(config m.K, guard int) (m.K, error) {
	// rule #2770
	// source: ? @?
	// {| rule initArgsCell(.KList)=>`<args>`(`.List{"operandList"}`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(895d139b6ef87eff2a3736e201ce00b8e29794976f3c5768005fd05694540575) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2770, "{| rule initArgsCell(.KList)=>`<args>`(`.List{\"operandList\"}`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(895d139b6ef87eff2a3736e201ce00b8e29794976f3c5768005fd05694540575) initializer()] |}")
	return &m.KApply{Label: m.LblXltargsXgt, List: []m.K{ // as-is <args>
		&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
		}},
	}}, nil

}

//var constInitArgsCell K = evalInitArgsCell(m.InternedBottom)

func evalIsCallValueCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2771
	// source: ? @?
	// {| rule isCallValueCellOpt(`<callValue>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcallValueXgt && len(kapp0.List) == 1 { // `<callValue>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2771, "{| rule isCallValueCellOpt(`<callValue>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2772
	// source: ? @?
	// {| rule isCallValueCellOpt(#KToken(#token("CallValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2772, "{| rule isCallValueCellOpt(#KToken(#token(\"CallValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2773
	// source: ? @?
	// {| rule isCallValueCellOpt(noCallValueCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoCallValueCell && len(kapp0.List) == 0 { // noCallValueCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2773, "{| rule isCallValueCellOpt(noCallValueCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2774
	// source: ? @?
	// {| rule isCallValueCellOpt(#KToken(#token("CallValueCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCallValueCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2774, "{| rule isCallValueCellOpt(#KToken(#token(\"CallValueCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2775
	// source: ? @?
	// {| rule isCallValueCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2775, "{| rule isCallValueCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsSchedule(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2776
	// source: ? @?
	// {| rule isSchedule(`DEFAULT_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDEFAULTXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `DEFAULT_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2776, "{| rule isSchedule(`DEFAULT_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2777
	// source: ? @?
	// {| rule isSchedule(`ALBE_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblALBEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `ALBE_IELE-CONSTANTS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2777, "{| rule isSchedule(`ALBE_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2778
	// source: ? @?
	// {| rule isSchedule(#KToken(#token("Schedule","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSchedule { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2778, "{| rule isSchedule(#KToken(#token(\"Schedule\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2779
	// source: ? @?
	// {| rule isSchedule(`DANSE_IELE-CONSTANTS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblDANSEXuIELEXhyphenCONSTANTS && len(kapp0.List) == 0 { // `DANSE_IELE-CONSTANTS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2779, "{| rule isSchedule(`DANSE_IELE-CONSTANTS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2780
	// source: ? @?
	// {| rule isSchedule(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2780, "{| rule isSchedule(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsNetworkCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2781
	// source: ? @?
	// {| rule isNetworkCell(`<network>`(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltnetworkXgt && len(kapp0.List) == 5 { // `<network>`(K0,K1,K2,K3,K4)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		varK4 := kapp0.List[4] // lhs KVariable K4
		// REQUIRES
		eval3363, err3363 := evalIsActiveAccountsCell( // isActiveAccountsCell(K0)
			varK0,
			config, -1)
		if err3363 != nil {
			return m.NoResult, err3363
		}
		eval3364, err3364 := evalIsAccountsCell( // isAccountsCell(K1)
			varK1,
			config, -1)
		if err3364 != nil {
			return m.NoResult, err3364
		}
		eval3365, err3365 := evalIsTxOrderCell( // isTxOrderCell(K2)
			varK2,
			config, -1)
		if err3365 != nil {
			return m.NoResult, err3365
		}
		eval3366, err3366 := evalIsTxPendingCell( // isTxPendingCell(K3)
			varK3,
			config, -1)
		if err3366 != nil {
			return m.NoResult, err3366
		}
		eval3367, err3367 := evalIsMessagesCell( // isMessagesCell(K4)
			varK4,
			config, -1)
		if err3367 != nil {
			return m.NoResult, err3367
		}
		if ((((m.IsTrue(eval3363)) &&
		   (m.IsTrue(eval3364))) &&
		   (m.IsTrue(eval3365))) &&
		   (m.IsTrue(eval3366))) &&
		   (m.IsTrue(eval3367)) {
			// RHS
			traceRuleApply("FUNC", 2781, "{| rule isNetworkCell(`<network>`(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isActiveAccountsCell(K0),isAccountsCell(K1)),isTxOrderCell(K2)),isTxPendingCell(K3)),isMessagesCell(K4)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2782
	// source: ? @?
	// {| rule isNetworkCell(#KToken(#token("NetworkCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortNetworkCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2782, "{| rule isNetworkCell(#KToken(#token(\"NetworkCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2783
	// source: ? @?
	// {| rule isNetworkCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2783, "{| rule isNetworkCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsFuncCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2784
	// source: ? @?
	// {| rule isFuncCellOpt(noFuncCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoFuncCell && len(kapp0.List) == 0 { // noFuncCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2784, "{| rule isFuncCellOpt(noFuncCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2785
	// source: ? @?
	// {| rule isFuncCellOpt(#KToken(#token("FuncCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2785, "{| rule isFuncCellOpt(#KToken(#token(\"FuncCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2786
	// source: ? @?
	// {| rule isFuncCellOpt(`<func>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfuncXgt && len(kapp0.List) == 1 { // `<func>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3368, err3368 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err3368 != nil {
			return m.NoResult, err3368
		}
		if m.IsTrue(eval3368) {
			// RHS
			traceRuleApply("FUNC", 2786, "{| rule isFuncCellOpt(`<func>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2787
	// source: ? @?
	// {| rule isFuncCellOpt(#KToken(#token("FuncCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFuncCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2787, "{| rule isFuncCellOpt(#KToken(#token(\"FuncCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2788
	// source: ? @?
	// {| rule isFuncCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2788, "{| rule isFuncCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalLengthString(c m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.length
	lbl := m.LblLengthString // lengthString
	sort := m.SortInt
	if hookRes, hookErr := stringHooks.length(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.length, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalLengthString", args: []m.K{c}}
}

func evalXuMessageCellMapXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.concat
	lbl := m.LblXuMessageCellMapXu // _MessageCellMap_
	sort := m.SortMessageCellMap
	if hookRes, hookErr := mapHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuMessageCellMapXu", args: []m.K{c1, c2}}
}

func evalXhashremoveZeros(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2789
	// source: data.k @411
	// {| rule #removeZeros(M)=>#removeZerosAux(`Set2List`(keys(M)),M) requires isMap(M) ensures #token("true","Bool") [UNIQUE_ID(819626a278a0d0af8f1322d424d2153ef5ecc79657af17b105c303d0b791e0e2) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varM, t := c.(*m.Map); t && varM.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES precomputed isMap(M)
		// RHS
		traceRuleApply("FUNC", 2789, "{| rule #removeZeros(M)=>#removeZerosAux(`Set2List`(keys(M)),M) requires isMap(M) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(819626a278a0d0af8f1322d424d2153ef5ecc79657af17b105c303d0b791e0e2) contentStartColumn(10) contentStartLine(411) org.kframework.attributes.Location(Location(411,10,411,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3371, err3371 := evalKeys( // keys(M)
			varM,
			config, -1)
		if err3371 != nil {
			return m.NoResult, err3371
		}
		eval3370, err3370 := evalSet2List( // `Set2List`(keys(M))
			eval3371,
			config, -1)
		if err3370 != nil {
			return m.NoResult, err3370
		}
		eval3369, err3369 := evalXhashremoveZerosAux( // #removeZerosAux(`Set2List`(keys(M)),M)
			eval3370,
			varM,
			config, -1)
		if err3369 != nil {
			return m.NoResult, err3369
		}
		return eval3369, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashremoveZeros", args: []m.K{c}}
}

func evalFloatFormat(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.floatFormat
	lbl := m.LblFloatFormat // FloatFormat
	sort := m.SortString
	if hookRes, hookErr := stringHooks.floatFormat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.floatFormat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalFloatFormat", args: []m.K{c1, c2}}
}

func evalIsInternalOp(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2790
	// source: ? @?
	// {| rule isInternalOp(`#create_______IELE`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)),isInt(K3)),isContract(K4)),isInts(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcreateXuXuXuXuXuXuXuIELE && len(kapp0.List) == 6 { // `#create_______IELE`(K0,K1,K2,K3,K4,K5)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[3].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varK4 := kapp0.List[4] // lhs KVariable K4
						varK5 := kapp0.List[5] // lhs KVariable K5
						// REQUIRES
						eval3372, err3372 := evalIsContract( // isContract(K4)
							varK4,
							config, -1)
						if err3372 != nil {
							return m.NoResult, err3372
						}
						eval3373, err3373 := evalIsInts( // isInts(K5)
							varK5,
							config, -1)
						if err3373 != nil {
							return m.NoResult, err3373
						}
						if (/* rhs precomputed isInt(K0) && isInt(K1) && isInt(K2) && isInt(K3) */ /* && */
						   m.IsTrue(eval3372)) &&
						   (m.IsTrue(eval3373)) {
							// RHS
							traceRuleApply("FUNC", 2790, "{| rule isInternalOp(`#create_______IELE`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)),isInt(K3)),isContract(K4)),isInts(K5)) ensures #token(\"true\",\"Bool\") [] |}")
							return /* rhs KToken */ m.BoolTrue, nil
						}
					}
				}
			}
		}
	}

	// rule #2791
	// source: ? @?
	// {| rule isInternalOp(#KToken(#token("InternalOp","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInternalOp { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2791, "{| rule isInternalOp(#KToken(#token(\"InternalOp\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2792
	// source: ? @?
	// {| rule isInternalOp(`#dropSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashdropSubstateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#dropSubstate_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2792, "{| rule isInternalOp(`#dropSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2793
	// source: ? @?
	// {| rule isInternalOp(`#deductGas_IELE-GAS`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashdeductGasXuIELEXhyphenGAS && len(kapp0.List) == 0 { // `#deductGas_IELE-GAS`(.KList)
		// RHS
		traceRuleApply("FUNC", 2793, "{| rule isInternalOp(`#deductGas_IELE-GAS`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2794
	// source: ? @?
	// {| rule isInternalOp(`#exceptional?[_]_IELE`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashexceptionalXquesXlsqbXuXrsqbXuIELE && len(kapp0.List) == 1 { // `#exceptional?[_]_IELE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3374, err3374 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3374 != nil {
			return m.NoResult, err3374
		}
		if m.IsTrue(eval3374) {
			// RHS
			traceRuleApply("FUNC", 2794, "{| rule isInternalOp(`#exceptional?[_]_IELE`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2795
	// source: ? @?
	// {| rule isInternalOp(`#exec__IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashexecXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#exec__IELE-INFRASTRUCTURE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3375, err3375 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3375 != nil {
			return m.NoResult, err3375
		}
		if m.IsTrue(eval3375) {
			// RHS
			traceRuleApply("FUNC", 2795, "{| rule isInternalOp(`#exec__IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2796
	// source: ? @?
	// {| rule isInternalOp(`#finishTypeChecking_IELE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashfinishTypeCheckingXuIELE && len(kapp0.List) == 0 { // `#finishTypeChecking_IELE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2796, "{| rule isInternalOp(`#finishTypeChecking_IELE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2797
	// source: ? @?
	// {| rule isInternalOp(`#mkCreate_______IELE`(K0,K1,K2,K3,K4,K5))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isContract(K2)),isInt(K3)),isInt(K4)),isInts(K5)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashmkCreateXuXuXuXuXuXuXuIELE && len(kapp0.List) == 6 { // `#mkCreate_______IELE`(K0,K1,K2,K3,K4,K5)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varK2 := kapp0.List[2] // lhs KVariable K2
				if _, t := kapp0.List[3].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varK5 := kapp0.List[5] // lhs KVariable K5
						// REQUIRES
						eval3376, err3376 := evalIsContract( // isContract(K2)
							varK2,
							config, -1)
						if err3376 != nil {
							return m.NoResult, err3376
						}
						eval3377, err3377 := evalIsInts( // isInts(K5)
							varK5,
							config, -1)
						if err3377 != nil {
							return m.NoResult, err3377
						}
						if (/* rhs precomputed isInt(K0) && isInt(K1) */ /* && */
						   m.IsTrue(eval3376) /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */ ) &&
						   (m.IsTrue(eval3377)) {
							// RHS
							traceRuleApply("FUNC", 2797, "{| rule isInternalOp(`#mkCreate_______IELE`(K0,K1,K2,K3,K4,K5))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isContract(K2)),isInt(K3)),isInt(K4)),isInts(K5)) ensures #token(\"true\",\"Bool\") [] |}")
							return /* rhs KToken */ m.BoolTrue, nil
						}
					}
				}
			}
		}
	}

	// rule #2798
	// source: ? @?
	// {| rule isInternalOp(#registerDeltas(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValues(K0),isInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashregisterDeltas && len(kapp0.List) == 2 { // #registerDeltas(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3378, err3378 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err3378 != nil {
			return m.NoResult, err3378
		}
		eval3379, err3379 := evalIsInts( // isInts(K1)
			varK1,
			config, -1)
		if err3379 != nil {
			return m.NoResult, err3379
		}
		if (m.IsTrue(eval3378)) &&
		   (m.IsTrue(eval3379)) {
			// RHS
			traceRuleApply("FUNC", 2798, "{| rule isInternalOp(#registerDeltas(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValues(K0),isInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2799
	// source: ? @?
	// {| rule isInternalOp(memoryDirectDelta(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblMemoryDirectDelta && len(kapp0.List) == 1 { // memoryDirectDelta(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2799, "{| rule isInternalOp(memoryDirectDelta(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2800
	// source: ? @?
	// {| rule isInternalOp(`#memory[_]_IELE-GAS`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS && len(kapp0.List) == 1 { // `#memory[_]_IELE-GAS`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3380, err3380 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3380 != nil {
			return m.NoResult, err3380
		}
		if m.IsTrue(eval3380) {
			// RHS
			traceRuleApply("FUNC", 2800, "{| rule isInternalOp(`#memory[_]_IELE-GAS`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2801
	// source: ? @?
	// {| rule isInternalOp(`#log___IELE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isList(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashlogXuXuXuIELE && len(kapp0.List) == 2 { // `#log___IELE`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varK1, t := kapp0.List[1].(*m.List); t && varK1.Sort == m.SortList { // lhs KVariable with hook:LIST.List
				// REQUIRES precomputed isInt(K0) && isList(K1)
				// RHS
				traceRuleApply("FUNC", 2801, "{| rule isInternalOp(`#log___IELE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isList(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2802
	// source: ? @?
	// {| rule isInternalOp(`#gas[_]_IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashgasXlsqbXuXrsqbXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#gas[_]_IELE-INFRASTRUCTURE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3381, err3381 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3381 != nil {
			return m.NoResult, err3381
		}
		if m.IsTrue(eval3381) {
			// RHS
			traceRuleApply("FUNC", 2802, "{| rule isInternalOp(`#gas[_]_IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2803
	// source: ? @?
	// {| rule isInternalOp(`#pushSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#pushSubstate_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2803, "{| rule isInternalOp(`#pushSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2804
	// source: ? @?
	// {| rule isInternalOp(`#popWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#popWorldState_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2804, "{| rule isInternalOp(`#popWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2805
	// source: ? @?
	// {| rule isInternalOp(`#initAccount__IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashinitAccountXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#initAccount__IELE-INFRASTRUCTURE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2805, "{| rule isInternalOp(`#initAccount__IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2806
	// source: ? @?
	// {| rule isInternalOp(`#call________IELE`(K0,K1,K2,K3,K4,K5,K6))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isConstant(K2)),isOperand(K3)),isInt(K4)),isInts(K5)),isBool(K6)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcallXuXuXuXuXuXuXuXuIELE && len(kapp0.List) == 7 { // `#call________IELE`(K0,K1,K2,K3,K4,K5,K6)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varK2 := kapp0.List[2] // lhs KVariable K2
				varK3 := kapp0.List[3] // lhs KVariable K3
				if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varK5 := kapp0.List[5] // lhs KVariable K5
					if _, t := kapp0.List[6].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
						// REQUIRES
						eval3382, err3382 := evalIsConstant( // isConstant(K2)
							varK2,
							config, -1)
						if err3382 != nil {
							return m.NoResult, err3382
						}
						eval3383, err3383 := evalIsOperand( // isOperand(K3)
							varK3,
							config, -1)
						if err3383 != nil {
							return m.NoResult, err3383
						}
						eval3384, err3384 := evalIsInts( // isInts(K5)
							varK5,
							config, -1)
						if err3384 != nil {
							return m.NoResult, err3384
						}
						if ((/* rhs precomputed isInt(K0) && isInt(K1) */ /* && */
						   m.IsTrue(eval3382)) &&
						   (m.IsTrue(eval3383)) /* && */ /* rhs precomputed isInt(K4) */ ) &&
						   (m.IsTrue(eval3384)) /* && */ /* rhs precomputed isBool(K6) */  {
							// RHS
							traceRuleApply("FUNC", 2806, "{| rule isInternalOp(`#call________IELE`(K0,K1,K2,K3,K4,K5,K6))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isConstant(K2)),isOperand(K3)),isInt(K4)),isInts(K5)),isBool(K6)) ensures #token(\"true\",\"Bool\") [] |}")
							return /* rhs KToken */ m.BoolTrue, nil
						}
					}
				}
			}
		}
	}

	// rule #2807
	// source: ? @?
	// {| rule isInternalOp(#memoryDelta(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashmemoryDelta && len(kapp0.List) == 2 { // #memoryDelta(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2807, "{| rule isInternalOp(#memoryDelta(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2808
	// source: ? @?
	// {| rule isInternalOp(`#compute[_,_]_IELE-GAS`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInstruction(K0),isSchedule(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS && len(kapp0.List) == 2 { // `#compute[_,_]_IELE-GAS`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3385, err3385 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3385 != nil {
			return m.NoResult, err3385
		}
		eval3386, err3386 := evalIsSchedule( // isSchedule(K1)
			varK1,
			config, -1)
		if err3386 != nil {
			return m.NoResult, err3386
		}
		if (m.IsTrue(eval3385)) &&
		   (m.IsTrue(eval3386)) {
			// RHS
			traceRuleApply("FUNC", 2808, "{| rule isInternalOp(`#compute[_,_]_IELE-GAS`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInstruction(K0),isSchedule(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2809
	// source: ? @?
	// {| rule isInternalOp(#memoryExpand(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashmemoryExpand && len(kapp0.List) == 2 { // #memoryExpand(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2809, "{| rule isInternalOp(#memoryExpand(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2810
	// source: ? @?
	// {| rule isInternalOp(`#checkContract__IELE`(K0))=>#token("true","Bool") requires isContract(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcheckContractXuXuIELE && len(kapp0.List) == 1 { // `#checkContract__IELE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3387, err3387 := evalIsContract( // isContract(K0)
			varK0,
			config, -1)
		if err3387 != nil {
			return m.NoResult, err3387
		}
		if m.IsTrue(eval3387) {
			// RHS
			traceRuleApply("FUNC", 2810, "{| rule isInternalOp(`#checkContract__IELE`(K0))=>#token(\"true\",\"Bool\") requires isContract(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2811
	// source: ? @?
	// {| rule isInternalOp(`#checkCreate___IELE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcheckCreateXuXuXuIELE && len(kapp0.List) == 2 { // `#checkCreate___IELE`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2811, "{| rule isInternalOp(`#checkCreate___IELE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2812
	// source: ? @?
	// {| rule isInternalOp(#registerDelta(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashregisterDelta && len(kapp0.List) == 2 { // #registerDelta(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3388, err3388 := evalIsLValue( // isLValue(K0)
				varK0,
				config, -1)
			if err3388 != nil {
				return m.NoResult, err3388
			}
			if m.IsTrue(eval3388) /* && */ /* rhs precomputed isInt(K1) */  {
				// RHS
				traceRuleApply("FUNC", 2812, "{| rule isInternalOp(#registerDelta(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2813
	// source: ? @?
	// {| rule isInternalOp(`#popCallStack_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#popCallStack_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2813, "{| rule isInternalOp(`#popCallStack_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2814
	// source: ? @?
	// {| rule isInternalOp(`#pushCallStack_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#pushCallStack_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2814, "{| rule isInternalOp(`#pushCallStack_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2815
	// source: ? @?
	// {| rule isInternalOp(#finalizeTx(K0))=>#token("true","Bool") requires isBool(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashfinalizeTx && len(kapp0.List) == 1 { // #finalizeTx(K0)
		if _, t := kapp0.List[0].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
			// REQUIRES precomputed isBool(K0)
			// RHS
			traceRuleApply("FUNC", 2815, "{| rule isInternalOp(#finalizeTx(K0))=>#token(\"true\",\"Bool\") requires isBool(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2816
	// source: ? @?
	// {| rule isInternalOp(#loadAux(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashloadAux && len(kapp0.List) == 3 { // #loadAux(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2816, "{| rule isInternalOp(#loadAux(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2817
	// source: ? @?
	// {| rule isInternalOp(`#callWithCode_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isProgramCell(K2)),isConstant(K3)),isInt(K4)),isInt(K5)),isInts(K6)),isBool(K7)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcallWithCodeXuXuXuXuXuXuXuXuXuIELE && len(kapp0.List) == 8 { // `#callWithCode_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varK2 := kapp0.List[2] // lhs KVariable K2
				varK3 := kapp0.List[3] // lhs KVariable K3
				if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[5].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varK6 := kapp0.List[6] // lhs KVariable K6
						if _, t := kapp0.List[7].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
							// REQUIRES
							eval3389, err3389 := evalIsProgramCell( // isProgramCell(K2)
								varK2,
								config, -1)
							if err3389 != nil {
								return m.NoResult, err3389
							}
							eval3390, err3390 := evalIsConstant( // isConstant(K3)
								varK3,
								config, -1)
							if err3390 != nil {
								return m.NoResult, err3390
							}
							eval3391, err3391 := evalIsInts( // isInts(K6)
								varK6,
								config, -1)
							if err3391 != nil {
								return m.NoResult, err3391
							}
							if ((/* rhs precomputed isInt(K0) && isInt(K1) */ /* && */
							   m.IsTrue(eval3389)) &&
							   (m.IsTrue(eval3390)) /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K5) */ ) &&
							   (m.IsTrue(eval3391)) /* && */ /* rhs precomputed isBool(K7) */  {
								// RHS
								traceRuleApply("FUNC", 2817, "{| rule isInternalOp(`#callWithCode_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isProgramCell(K2)),isConstant(K3)),isInt(K4)),isInt(K5)),isInts(K6)),isBool(K7)) ensures #token(\"true\",\"Bool\") [] |}")
								return /* rhs KToken */ m.BoolTrue, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2818
	// source: ? @?
	// {| rule isInternalOp(`#static?[_]_IELE`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashstaticXquesXlsqbXuXrsqbXuIELE && len(kapp0.List) == 1 { // `#static?[_]_IELE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3392, err3392 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3392 != nil {
			return m.NoResult, err3392
		}
		if m.IsTrue(eval3392) {
			// RHS
			traceRuleApply("FUNC", 2818, "{| rule isInternalOp(`#static?[_]_IELE`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2819
	// source: ? @?
	// {| rule isInternalOp(`#negativeCall?[_]_IELE`(K0))=>#token("true","Bool") requires isInstruction(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashnegativeCallXquesXlsqbXuXrsqbXuIELE && len(kapp0.List) == 1 { // `#negativeCall?[_]_IELE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3393, err3393 := evalIsInstruction( // isInstruction(K0)
			varK0,
			config, -1)
		if err3393 != nil {
			return m.NoResult, err3393
		}
		if m.IsTrue(eval3393) {
			// RHS
			traceRuleApply("FUNC", 2819, "{| rule isInternalOp(`#negativeCall?[_]_IELE`(K0))=>#token(\"true\",\"Bool\") requires isInstruction(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2820
	// source: ? @?
	// {| rule isInternalOp(#ecadd(K0,K1))=>#token("true","Bool") requires `_andBool_`(isG1Point(K0),isG1Point(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashecadd && len(kapp0.List) == 2 { // #ecadd(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3394, err3394 := evalIsG1Point( // isG1Point(K0)
			varK0,
			config, -1)
		if err3394 != nil {
			return m.NoResult, err3394
		}
		eval3395, err3395 := evalIsG1Point( // isG1Point(K1)
			varK1,
			config, -1)
		if err3395 != nil {
			return m.NoResult, err3395
		}
		if (m.IsTrue(eval3394)) &&
		   (m.IsTrue(eval3395)) {
			// RHS
			traceRuleApply("FUNC", 2820, "{| rule isInternalOp(#ecadd(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isG1Point(K0),isG1Point(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2821
	// source: ? @?
	// {| rule isInternalOp(`#mkCall_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isProgramCell(K2)),isIeleName(K3)),isInt(K4)),isInt(K5)),isInts(K6)),isBool(K7)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashmkCallXuXuXuXuXuXuXuXuXuIELE && len(kapp0.List) == 8 { // `#mkCall_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				varK2 := kapp0.List[2] // lhs KVariable K2
				varK3 := kapp0.List[3] // lhs KVariable K3
				if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
					if _, t := kapp0.List[5].(*m.Int); t { // lhs KVariable with hook:INT.Int
						varK6 := kapp0.List[6] // lhs KVariable K6
						if _, t := kapp0.List[7].(*m.Bool); t { // lhs KVariable with hook:BOOL.Bool
							// REQUIRES
							eval3396, err3396 := evalIsProgramCell( // isProgramCell(K2)
								varK2,
								config, -1)
							if err3396 != nil {
								return m.NoResult, err3396
							}
							eval3397, err3397 := evalIsIeleName( // isIeleName(K3)
								varK3,
								config, -1)
							if err3397 != nil {
								return m.NoResult, err3397
							}
							eval3398, err3398 := evalIsInts( // isInts(K6)
								varK6,
								config, -1)
							if err3398 != nil {
								return m.NoResult, err3398
							}
							if ((/* rhs precomputed isInt(K0) && isInt(K1) */ /* && */
							   m.IsTrue(eval3396)) &&
							   (m.IsTrue(eval3397)) /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K5) */ ) &&
							   (m.IsTrue(eval3398)) /* && */ /* rhs precomputed isBool(K7) */  {
								// RHS
								traceRuleApply("FUNC", 2821, "{| rule isInternalOp(`#mkCall_________IELE`(K0,K1,K2,K3,K4,K5,K6,K7))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isProgramCell(K2)),isIeleName(K3)),isInt(K4)),isInt(K5)),isInts(K6)),isBool(K7)) ensures #token(\"true\",\"Bool\") [] |}")
								return /* rhs KToken */ m.BoolTrue, nil
							}
						}
					}
				}
			}
		}
	}

	// rule #2822
	// source: ? @?
	// {| rule isInternalOp(`#popSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#popSubstate_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2822, "{| rule isInternalOp(`#popSubstate_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2823
	// source: ? @?
	// {| rule isInternalOp(`#transferFunds____IELE-INFRASTRUCTURE`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 3 { // `#transferFunds____IELE-INFRASTRUCTURE`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2823, "{| rule isInternalOp(`#transferFunds____IELE-INFRASTRUCTURE`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2824
	// source: ? @?
	// {| rule isInternalOp(`#loadAccount__IELE-INFRASTRUCTURE`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 1 { // `#loadAccount__IELE-INFRASTRUCTURE`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2824, "{| rule isInternalOp(`#loadAccount__IELE-INFRASTRUCTURE`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2825
	// source: ? @?
	// {| rule isInternalOp(#deductMemory(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashdeductMemory && len(kapp0.List) == 1 { // #deductMemory(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2825, "{| rule isInternalOp(#deductMemory(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2826
	// source: ? @?
	// {| rule isInternalOp(#deleteAccounts(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashdeleteAccounts && len(kapp0.List) == 1 { // #deleteAccounts(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2826, "{| rule isInternalOp(#deleteAccounts(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2827
	// source: ? @?
	// {| rule isInternalOp(`#refund__IELE`(K0))=>#token("true","Bool") requires isOperand(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashrefundXuXuIELE && len(kapp0.List) == 1 { // `#refund__IELE`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3399, err3399 := evalIsOperand( // isOperand(K0)
			varK0,
			config, -1)
		if err3399 != nil {
			return m.NoResult, err3399
		}
		if m.IsTrue(eval3399) {
			// RHS
			traceRuleApply("FUNC", 2827, "{| rule isInternalOp(`#refund__IELE`(K0))=>#token(\"true\",\"Bool\") requires isOperand(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2828
	// source: ? @?
	// {| rule isInternalOp(`#load___IELE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashloadXuXuXuIELE && len(kapp0.List) == 2 { // `#load___IELE`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3400, err3400 := evalIsLValue( // isLValue(K0)
				varK0,
				config, -1)
			if err3400 != nil {
				return m.NoResult, err3400
			}
			if m.IsTrue(eval3400) /* && */ /* rhs precomputed isInt(K1) */  {
				// RHS
				traceRuleApply("FUNC", 2828, "{| rule isInternalOp(`#load___IELE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2829
	// source: ? @?
	// {| rule isInternalOp(`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashdropWorldStateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#dropWorldState_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2829, "{| rule isInternalOp(`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2830
	// source: ? @?
	// {| rule isInternalOp(#lookupStorage(K0,K1))=>#token("true","Bool") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashlookupStorage && len(kapp0.List) == 2 { // #lookupStorage(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(K0) && isInt(K1)
				// RHS
				traceRuleApply("FUNC", 2830, "{| rule isInternalOp(#lookupStorage(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isInt(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2831
	// source: ? @?
	// {| rule isInternalOp(`#pushWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `#pushWorldState_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2831, "{| rule isInternalOp(`#pushWorldState_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2832
	// source: ? @?
	// {| rule isInternalOp(`#loads___IELE`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValues(K0),isInts(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashloadsXuXuXuIELE && len(kapp0.List) == 2 { // `#loads___IELE`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3401, err3401 := evalIsLValues( // isLValues(K0)
			varK0,
			config, -1)
		if err3401 != nil {
			return m.NoResult, err3401
		}
		eval3402, err3402 := evalIsInts( // isInts(K1)
			varK1,
			config, -1)
		if err3402 != nil {
			return m.NoResult, err3402
		}
		if (m.IsTrue(eval3401)) &&
		   (m.IsTrue(eval3402)) {
			// RHS
			traceRuleApply("FUNC", 2832, "{| rule isInternalOp(`#loads___IELE`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValues(K0),isInts(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2833
	// source: ? @?
	// {| rule isInternalOp(#ecmul(K0,K1))=>#token("true","Bool") requires `_andBool_`(isG1Point(K0),isInt(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashecmul && len(kapp0.List) == 2 { // #ecmul(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3403, err3403 := evalIsG1Point( // isG1Point(K0)
				varK0,
				config, -1)
			if err3403 != nil {
				return m.NoResult, err3403
			}
			if m.IsTrue(eval3403) /* && */ /* rhs precomputed isInt(K1) */  {
				// RHS
				traceRuleApply("FUNC", 2833, "{| rule isInternalOp(#ecmul(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isG1Point(K0),isInt(K1)) ensures #token(\"true\",\"Bool\") [] |}")
				return /* rhs KToken */ m.BoolTrue, nil
			}
		}
	}

	// rule #2834
	// source: ? @?
	// {| rule isInternalOp(`#checkPoint_IELE-PRECOMPILED`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcheckPointXuIELEXhyphenPRECOMPILED && len(kapp0.List) == 0 { // `#checkPoint_IELE-PRECOMPILED`(.KList)
		// RHS
		traceRuleApply("FUNC", 2834, "{| rule isInternalOp(`#checkPoint_IELE-PRECOMPILED`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2835
	// source: ? @?
	// {| rule isInternalOp(#ecpairing(K0,K1,K2,K3,K4))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(K0),isList(K1)),isBytes(K2)),isBytes(K3)),isInt(K4)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashecpairing && len(kapp0.List) == 5 { // #ecpairing(K0,K1,K2,K3,K4)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			if varK1, t := kapp0.List[1].(*m.List); t && varK1.Sort == m.SortList { // lhs KVariable with hook:LIST.List
				if _, t := kapp0.List[2].(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
					if _, t := kapp0.List[3].(*m.Bytes); t { // lhs KVariable with hook:BYTES.Bytes
						if _, t := kapp0.List[4].(*m.Int); t { // lhs KVariable with hook:INT.Int
							// REQUIRES precomputed isList(K0) && isList(K1) && isBytes(K2) && isBytes(K3) && isInt(K4)
							// RHS
							traceRuleApply("FUNC", 2835, "{| rule isInternalOp(#ecpairing(K0,K1,K2,K3,K4))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(K0),isList(K1)),isBytes(K2)),isBytes(K3)),isInt(K4)) ensures #token(\"true\",\"Bool\") [] |}")
							return /* rhs KToken */ m.BoolTrue, nil
						}
					}
				}
			}
		}
	}

	// rule #2836
	// source: ? @?
	// {| rule isInternalOp(#lookupCode(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashlookupCode && len(kapp0.List) == 1 { // #lookupCode(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2836, "{| rule isInternalOp(#lookupCode(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2837
	// source: ? @?
	// {| rule isInternalOp(`#checkCall____IELE`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashcheckCallXuXuXuXuIELE && len(kapp0.List) == 3 { // `#checkCall____IELE`(K0,K1,K2)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if _, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				if _, t := kapp0.List[2].(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(K0) && isInt(K1) && isInt(K2)
					// RHS
					traceRuleApply("FUNC", 2837, "{| rule isInternalOp(`#checkCall____IELE`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isInt(K0),isInt(K1)),isInt(K2)) ensures #token(\"true\",\"Bool\") [] |}")
					return /* rhs KToken */ m.BoolTrue, nil
				}
			}
		}
	}

	// rule #2838
	// source: ? @?
	// {| rule isInternalOp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2838, "{| rule isInternalOp(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitContractCodeCell(config m.K, guard int) (m.K, error) {
	// rule #2839
	// source: ? @?
	// {| rule initContractCodeCell(.KList)=>`<contractCode>`(`.List{"contractDefinitionList"}`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(abca08f55641c827287c8ea4025f1082f020c14efb8a4af030f2bad65e1c3c81) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2839, "{| rule initContractCodeCell(.KList)=>`<contractCode>`(`.List{\"contractDefinitionList\"}`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(abca08f55641c827287c8ea4025f1082f020c14efb8a4af030f2bad65e1c3c81) initializer()] |}")
	return &m.KApply{Label: m.LblXltcontractCodeXgt, List: []m.K{ // as-is <contractCode>
		&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
		}},
	}}, nil

}

//var constInitContractCodeCell K = evalInitContractCodeCell(m.InternedBottom)

func evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: BUFFER.concat
	lbl := m.LblXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED // _+String__STRING-BUFFER-HOOKED
	sort := m.SortStringBuffer
	if hookRes, hookErr := bufferHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BUFFER.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusStringXuXuSTRINGXhyphenBUFFERXhyphenHOOKED", args: []m.K{c1, c2}}
}

func evalIsFromCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2840
	// source: ? @?
	// {| rule isFromCell(`<from>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltfromXgt && len(kapp0.List) == 1 { // `<from>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2840, "{| rule isFromCell(`<from>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2841
	// source: ? @?
	// {| rule isFromCell(#KToken(#token("FromCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortFromCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2841, "{| rule isFromCell(#KToken(#token(\"FromCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2842
	// source: ? @?
	// {| rule isFromCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2842, "{| rule isFromCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXplusStringXuXuSTRING(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.concat
	lbl := m.LblXuXplusStringXuXuSTRING // _+String__STRING
	sort := m.SortString
	if hookRes, hookErr := stringHooks.concat(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.concat, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXplusStringXuXuSTRING", args: []m.K{c1, c2}}
}

func evalXuXpipeIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.or
	lbl := m.LblXuXpipeIntXuXuINT // _|Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.or(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.or, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXpipeIntXuXuINT", args: []m.K{c1, c2}}
}

func evalInitSubstateStackCell(config m.K, guard int) (m.K, error) {
	// rule #2843
	// source: ? @?
	// {| rule initSubstateStackCell(.KList)=>`<substateStack>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(962adf862c8be999e45447f475c0574df856a8dcefc9d202e9f12f886a45a76b) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2843, "{| rule initSubstateStackCell(.KList)=>`<substateStack>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(962adf862c8be999e45447f475c0574df856a8dcefc9d202e9f12f886a45a76b) initializer()] |}")
	eval3404, err3404 := evalXdotList(config, -1) // `.List`(.KList)
	if err3404 != nil {
		return m.NoResult, err3404
	}
	return &m.KApply{Label: m.LblXltsubstateStackXgt, List: []m.K{ // as-is <substateStack>
		eval3404,
	}}, nil

}

//var constInitSubstateStackCell K = evalInitSubstateStackCell(m.InternedBottom)

func evalIsStorageCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2844
	// source: ? @?
	// {| rule isStorageCellOpt(#KToken(#token("StorageCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStorageCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2844, "{| rule isStorageCellOpt(#KToken(#token(\"StorageCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2845
	// source: ? @?
	// {| rule isStorageCellOpt(#KToken(#token("StorageCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStorageCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2845, "{| rule isStorageCellOpt(#KToken(#token(\"StorageCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2846
	// source: ? @?
	// {| rule isStorageCellOpt(noStorageCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoStorageCell && len(kapp0.List) == 0 { // noStorageCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2846, "{| rule isStorageCellOpt(noStorageCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2847
	// source: ? @?
	// {| rule isStorageCellOpt(`<storage>`(K0))=>#token("true","Bool") requires isMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltstorageXgt && len(kapp0.List) == 1 { // `<storage>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMap(K0)
			// RHS
			traceRuleApply("FUNC", 2847, "{| rule isStorageCellOpt(`<storage>`(K0))=>#token(\"true\",\"Bool\") requires isMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2848
	// source: ? @?
	// {| rule isStorageCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2848, "{| rule isStorageCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsExpInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2849
	// source: ? @?
	// {| rule isExpInst(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 3 { // `_=exp_,__IELE-COMMON`(K0,K1,K2)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		// REQUIRES
		eval3405, err3405 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3405 != nil {
			return m.NoResult, err3405
		}
		eval3406, err3406 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err3406 != nil {
			return m.NoResult, err3406
		}
		eval3407, err3407 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err3407 != nil {
			return m.NoResult, err3407
		}
		if ((m.IsTrue(eval3405)) &&
		   (m.IsTrue(eval3406))) &&
		   (m.IsTrue(eval3407)) {
			// RHS
			traceRuleApply("FUNC", 2849, "{| rule isExpInst(`_=exp_,__IELE-COMMON`(K0,K1,K2))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K1)),isOperand(K2)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2850
	// source: ? @?
	// {| rule isExpInst(#KToken(#token("ExpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortExpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2850, "{| rule isExpInst(#KToken(#token(\"ExpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2851
	// source: ? @?
	// {| rule isExpInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2851, "{| rule isExpInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdasmContractAux1(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2852
	// source: iele-binary.k @137
	// {| rule #dasmContractAux1(`_:__IELE-DATA`(_119,`_:__IELE-DATA`(NBITS,WS)),NAME,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList))))))=>#dasmContractAux2(WS,NBITS,`_|->_`(#token("0","Int"),#token("init","IeleName")),NAME,`.List{"topLevelDefinitionList"}`(.KList),#token("1","Int"),`_+Int_`(#sizeWordStack(WS),#token("6","Int")),#unparseByteStack(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(#token("99","Int"),`_:__IELE-DATA`(NBITS,WS)))))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W4)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(NBITS)),isInt(W3)),`_==Int_`(_119,#token("99","Int"))) ensures #token("true","Bool") [UNIQUE_ID(752e7559d93e38f22b8a579c7a406f2244f43e297211e363dde69cfaec9e9db2) contentStartColumn(10) contentStartLine(137) org.kframework.attributes.Location(Location(137,10,137,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(_119,`_:__IELE-DATA`(NBITS,WS))
		if varXu119, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if kapp1, t := kapp0.List[1].(*m.KApply); t && kapp1.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp1.List) == 2 { // `_:__IELE-DATA`(NBITS,WS)
				if varNBITS, t := kapp1.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
					varWS := kapp1.List[1] // lhs KVariable WS
					varNAME := c2 // lhs KVariable NAME
					if kapp2, t := c3.(*m.KApply); t && kapp2.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp2.List) == 2 { // `_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList)))))
						if varW1, t := kapp2.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
							if kapp3, t := kapp2.List[1].(*m.KApply); t && kapp3.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp3.List) == 2 { // `_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList))))
								if varW2, t := kapp3.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
									if kapp4, t := kapp3.List[1].(*m.KApply); t && kapp4.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp4.List) == 2 { // `_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList)))
										if varW3, t := kapp4.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
											if kapp5, t := kapp4.List[1].(*m.KApply); t && kapp5.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp5.List) == 2 { // `_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList))
												if varW4, t := kapp5.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
													if kapp6, t := kapp5.List[1].(*m.KApply); t && kapp6.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp6.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
														// REQUIRES
														eval3408, err3408 := evalIsWordStack( // isWordStack(WS)
															varWS,
															config, -1)
														if err3408 != nil {
															return m.NoResult, err3408
														}
														eval3409, err3409 := evalIsIeleName( // isIeleName(NAME)
															varNAME,
															config, -1)
														if err3409 != nil {
															return m.NoResult, err3409
														}
														eval3410, err3410 := evalXuXeqXeqIntXu( // `_==Int_`(_119,#token("99","Int"))
															varXu119,
															/* rhs KToken */ m.NewIntFromString("99"),
															config, -1)
														if err3410 != nil {
															return m.NoResult, err3410
														}
														if ((m.IsTrue(eval3408) /* && */ /* rhs precomputed isInt(W4) */ ) &&
														   (m.IsTrue(eval3409)) /* && */ /* rhs precomputed isInt(W2) */  /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(NBITS) */  /* && */ /* rhs precomputed isInt(W3) */ ) &&
														   (m.IsTrue(eval3410)) {
															// RHS
															traceRuleApply("FUNC", 2852, "{| rule #dasmContractAux1(`_:__IELE-DATA`(_119,`_:__IELE-DATA`(NBITS,WS)),NAME,`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`.WordStack_IELE-DATA`(.KList))))))=>#dasmContractAux2(WS,NBITS,`_|->_`(#token(\"0\",\"Int\"),#token(\"init\",\"IeleName\")),NAME,`.List{\"topLevelDefinitionList\"}`(.KList),#token(\"1\",\"Int\"),`_+Int_`(#sizeWordStack(WS),#token(\"6\",\"Int\")),#unparseByteStack(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(#token(\"99\",\"Int\"),`_:__IELE-DATA`(NBITS,WS)))))))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isWordStack(WS),isInt(W4)),isIeleName(NAME)),isInt(W2)),isInt(W1)),isInt(NBITS)),isInt(W3)),`_==Int_`(_119,#token(\"99\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(752e7559d93e38f22b8a579c7a406f2244f43e297211e363dde69cfaec9e9db2) contentStartColumn(10) contentStartLine(137) org.kframework.attributes.Location(Location(137,10,137,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
															eval3412, err3412 := evalXuXpipeXhyphenXgtXu( // `_|->_`(#token("0","Int"),#token("init","IeleName"))
																/* rhs KToken */ m.NewIntFromString("0"),
																/* rhs KToken */ &m.KToken{Sort: m.SortIeleName, Value: "init"},
																config, -1)
															if err3412 != nil {
																return m.NoResult, err3412
															}
															eval3414, err3414 := evalXhashsizeWordStack( // #sizeWordStack(WS)
																varWS,
																config, -1)
															if err3414 != nil {
																return m.NoResult, err3414
															}
															eval3413, err3413 := evalXuXplusIntXu( // `_+Int_`(#sizeWordStack(WS),#token("6","Int"))
																eval3414,
																/* rhs KToken */ m.NewIntFromString("6"),
																config, -1)
															if err3413 != nil {
																return m.NoResult, err3413
															}
															eval3415, err3415 := evalXhashunparseByteStack( // #unparseByteStack(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(#token("99","Int"),`_:__IELE-DATA`(NBITS,WS)))))))
																&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																	varW1,
																	&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																		varW2,
																		&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																			varW3,
																			&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																				varW4,
																				&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																					/* rhs KToken */ m.NewIntFromString("99"),
																					&m.KApply{Label: m.LblXuXcolonXuXuIELEXhyphenDATA, List: []m.K{ // as-is _:__IELE-DATA
																						varNBITS,
																						varWS,
																					}},
																				}},
																			}},
																		}},
																	}},
																}},
																config, -1)
															if err3415 != nil {
																return m.NoResult, err3415
															}
															eval3411, err3411 := evalXhashdasmContractAux2( // #dasmContractAux2(WS,NBITS,`_|->_`(#token("0","Int"),#token("init","IeleName")),NAME,`.List{"topLevelDefinitionList"}`(.KList),#token("1","Int"),`_+Int_`(#sizeWordStack(WS),#token("6","Int")),#unparseByteStack(`_:__IELE-DATA`(W1,`_:__IELE-DATA`(W2,`_:__IELE-DATA`(W3,`_:__IELE-DATA`(W4,`_:__IELE-DATA`(#token("99","Int"),`_:__IELE-DATA`(NBITS,WS))))))))
																varWS,
																varNBITS,
																eval3412,
																varNAME,
																&m.KApply{Label: m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"topLevelDefinitionList"}
																}},
																/* rhs KToken */ m.NewIntFromString("1"),
																eval3413,
																eval3415,
																config, -1)
															if err3411 != nil {
																return m.NoResult, err3411
															}
															return eval3411, nil
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdasmContractAux1", args: []m.K{c1, c2, c3}}
}

func evalXhashsizeWordStack(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2853
	// source: data.k @309
	// {| rule #sizeWordStack(WS)=>sizeWordStackAux(WS,#token("0","Int")) requires isWordStack(WS) ensures #token("true","Bool") [UNIQUE_ID(8f2a4fd8686ef649b2ca53dec79f6679425020a56a03f7730232949f34d12d36) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varWS := c // lhs KVariable WS
		// REQUIRES
		eval3416, err3416 := evalIsWordStack( // isWordStack(WS)
			varWS,
			config, -1)
		if err3416 != nil {
			return m.NoResult, err3416
		}
		if m.IsTrue(eval3416) {
			// RHS
			traceRuleApply("FUNC", 2853, "{| rule #sizeWordStack(WS)=>sizeWordStackAux(WS,#token(\"0\",\"Int\")) requires isWordStack(WS) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(8f2a4fd8686ef649b2ca53dec79f6679425020a56a03f7730232949f34d12d36) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			eval3417, err3417 := evalSizeWordStackAux( // sizeWordStackAux(WS,#token("0","Int"))
				varWS,
				/* rhs KToken */ m.NewIntFromString("0"),
				config, -1)
			if err3417 != nil {
				return m.NoResult, err3417
			}
			return eval3417, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeWordStack", args: []m.K{c}}
}

func evalIsDeclaredContractsCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2854
	// source: ? @?
	// {| rule isDeclaredContractsCellOpt(#KToken(#token("DeclaredContractsCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDeclaredContractsCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2854, "{| rule isDeclaredContractsCellOpt(#KToken(#token(\"DeclaredContractsCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2855
	// source: ? @?
	// {| rule isDeclaredContractsCellOpt(noDeclaredContractsCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoDeclaredContractsCell && len(kapp0.List) == 0 { // noDeclaredContractsCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2855, "{| rule isDeclaredContractsCellOpt(noDeclaredContractsCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2856
	// source: ? @?
	// {| rule isDeclaredContractsCellOpt(#KToken(#token("DeclaredContractsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortDeclaredContractsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2856, "{| rule isDeclaredContractsCellOpt(#KToken(#token(\"DeclaredContractsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2857
	// source: ? @?
	// {| rule isDeclaredContractsCellOpt(`<declaredContracts>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltdeclaredContractsXgt && len(kapp0.List) == 1 { // `<declaredContracts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 2857, "{| rule isDeclaredContractsCellOpt(`<declaredContracts>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2858
	// source: ? @?
	// {| rule isDeclaredContractsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2858, "{| rule isDeclaredContractsCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalProjectXcolonSchedule(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2859
	// source: ? @?
	// {| rule `project:Schedule`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6058f2ff5f1a57455032c3cb7bac20a9f0167dcc589af42fc150ad73ebcca151) projection()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varK := c // lhs KVariable K
		// RHS
		traceRuleApply("FUNC", 2859, "{| rule `project:Schedule`(K)=>K requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6058f2ff5f1a57455032c3cb7bac20a9f0167dcc589af42fc150ad73ebcca151) projection()] |}")
		return varK, nil
	}

}

func evalXhashsizeRegsAux(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	// rule #2860
	// source: data.k @101
	// {| rule #sizeRegsAux(`.List{"operandList"}`(.KList),N)=>N requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(2304b44e279776b64e72e16c9fc0eecde09adbba5aac78310a4b54b0df1b8ae3) contentStartColumn(10) contentStartLine(101) org.kframework.attributes.Location(Location(101,10,101,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"operandList"}`(.KList)
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(N)
			// RHS
			traceRuleApply("FUNC", 2860, "{| rule #sizeRegsAux(`.List{\"operandList\"}`(.KList),N)=>N requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2304b44e279776b64e72e16c9fc0eecde09adbba5aac78310a4b54b0df1b8ae3) contentStartColumn(10) contentStartLine(101) org.kframework.attributes.Location(Location(101,10,101,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varN, nil
		}
	}

	// rule #2861
	// source: data.k @100
	// {| rule #sizeRegsAux(operandList(REG,REGS),N)=>#sizeRegsAux(REGS,`_+Int_`(N,#token("1","Int"))) requires `_andBool_`(`_andBool_`(isOperand(REG),isOperands(REGS)),isInt(N)) ensures #token("true","Bool") [UNIQUE_ID(4b00c86f8ffe26c58d9a5eda3ff9ef8a3c72e2c20430bc6a7fcb3e77479dfef8) contentStartColumn(10) contentStartLine(100) org.kframework.attributes.Location(Location(100,10,100,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c1.(*m.KApply); t && kapp0.Label == m.LblOperandList && len(kapp0.List) == 2 { // operandList(REG,REGS)
		varREG := kapp0.List[0] // lhs KVariable REG
		varREGS := kapp0.List[1] // lhs KVariable REGS
		if varN, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES
			eval3418, err3418 := evalIsOperand( // isOperand(REG)
				varREG,
				config, -1)
			if err3418 != nil {
				return m.NoResult, err3418
			}
			eval3419, err3419 := evalIsOperands( // isOperands(REGS)
				varREGS,
				config, -1)
			if err3419 != nil {
				return m.NoResult, err3419
			}
			if (m.IsTrue(eval3418)) &&
			   (m.IsTrue(eval3419)) /* && */ /* rhs precomputed isInt(N) */  {
				// RHS
				traceRuleApply("FUNC", 2861, "{| rule #sizeRegsAux(operandList(REG,REGS),N)=>#sizeRegsAux(REGS,`_+Int_`(N,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(isOperand(REG),isOperands(REGS)),isInt(N)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4b00c86f8ffe26c58d9a5eda3ff9ef8a3c72e2c20430bc6a7fcb3e77479dfef8) contentStartColumn(10) contentStartLine(100) org.kframework.attributes.Location(Location(100,10,100,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3421, err3421 := evalXuXplusIntXu( // `_+Int_`(N,#token("1","Int"))
					varN,
					/* rhs KToken */ m.NewIntFromString("1"),
					config, -1)
				if err3421 != nil {
					return m.NoResult, err3421
				}
				eval3420, err3420 := evalXhashsizeRegsAux( // #sizeRegsAux(REGS,`_+Int_`(N,#token("1","Int")))
					varREGS,
					eval3421,
					config, -1)
				if err3420 != nil {
					return m.NoResult, err3420
				}
				return eval3420, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashsizeRegsAux", args: []m.K{c1, c2}}
}

func evalInitIeleCell(config m.K, guard int) (m.K, error) {
	// rule #2862
	// source: ? @?
	// {| rule initIeleCell(.KList)=>`<iele>`(initOutputCell(.KList),initCallStackCell(.KList),initInterimStatesCell(.KList),initSubstateStackCell(.KList),initCallFrameCell(.KList),initSubstateCell(.KList),initGasPriceCell(.KList),initOriginCell(.KList),initBeneficiaryCell(.KList),initDifficultyCell(.KList),initNumberCell(.KList),initGasLimitCell(.KList),initGasUsedCell(.KList),initTimestampCell(.KList),initBlockhashCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4f79e30a582d35524835d52055ed4dc345cf393a9e01895c5d491af4b9b8a102) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2862, "{| rule initIeleCell(.KList)=>`<iele>`(initOutputCell(.KList),initCallStackCell(.KList),initInterimStatesCell(.KList),initSubstateStackCell(.KList),initCallFrameCell(.KList),initSubstateCell(.KList),initGasPriceCell(.KList),initOriginCell(.KList),initBeneficiaryCell(.KList),initDifficultyCell(.KList),initNumberCell(.KList),initGasLimitCell(.KList),initGasUsedCell(.KList),initTimestampCell(.KList),initBlockhashCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4f79e30a582d35524835d52055ed4dc345cf393a9e01895c5d491af4b9b8a102) initializer()] |}")
	eval3422, err3422 := evalInitOutputCell(config, -1) // initOutputCell(.KList)
	if err3422 != nil {
		return m.NoResult, err3422
	}
	eval3423, err3423 := evalInitCallStackCell(config, -1) // initCallStackCell(.KList)
	if err3423 != nil {
		return m.NoResult, err3423
	}
	eval3424, err3424 := evalInitInterimStatesCell(config, -1) // initInterimStatesCell(.KList)
	if err3424 != nil {
		return m.NoResult, err3424
	}
	eval3425, err3425 := evalInitSubstateStackCell(config, -1) // initSubstateStackCell(.KList)
	if err3425 != nil {
		return m.NoResult, err3425
	}
	eval3426, err3426 := evalInitCallFrameCell(config, -1) // initCallFrameCell(.KList)
	if err3426 != nil {
		return m.NoResult, err3426
	}
	eval3427, err3427 := evalInitSubstateCell(config, -1) // initSubstateCell(.KList)
	if err3427 != nil {
		return m.NoResult, err3427
	}
	eval3428, err3428 := evalInitGasPriceCell(config, -1) // initGasPriceCell(.KList)
	if err3428 != nil {
		return m.NoResult, err3428
	}
	eval3429, err3429 := evalInitOriginCell(config, -1) // initOriginCell(.KList)
	if err3429 != nil {
		return m.NoResult, err3429
	}
	eval3430, err3430 := evalInitBeneficiaryCell(config, -1) // initBeneficiaryCell(.KList)
	if err3430 != nil {
		return m.NoResult, err3430
	}
	eval3431, err3431 := evalInitDifficultyCell(config, -1) // initDifficultyCell(.KList)
	if err3431 != nil {
		return m.NoResult, err3431
	}
	eval3432, err3432 := evalInitNumberCell(config, -1) // initNumberCell(.KList)
	if err3432 != nil {
		return m.NoResult, err3432
	}
	eval3433, err3433 := evalInitGasLimitCell(config, -1) // initGasLimitCell(.KList)
	if err3433 != nil {
		return m.NoResult, err3433
	}
	eval3434, err3434 := evalInitGasUsedCell(config, -1) // initGasUsedCell(.KList)
	if err3434 != nil {
		return m.NoResult, err3434
	}
	eval3435, err3435 := evalInitTimestampCell(config, -1) // initTimestampCell(.KList)
	if err3435 != nil {
		return m.NoResult, err3435
	}
	eval3436, err3436 := evalInitBlockhashCell(config, -1) // initBlockhashCell(.KList)
	if err3436 != nil {
		return m.NoResult, err3436
	}
	return &m.KApply{Label: m.LblXltieleXgt, List: []m.K{ // as-is <iele>
		eval3422,
		eval3423,
		eval3424,
		eval3425,
		eval3426,
		eval3427,
		eval3428,
		eval3429,
		eval3430,
		eval3431,
		eval3432,
		eval3433,
		eval3434,
		eval3435,
		eval3436,
	}}, nil

}

func evalInitLogDataCell(config m.K, guard int) (m.K, error) {
	// rule #2863
	// source: ? @?
	// {| rule initLogDataCell(.KList)=>`<logData>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4bbe88fc35b4290e7128178ef589d31dd88b3ccd2b616c079103432c464e9393) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2863, "{| rule initLogDataCell(.KList)=>`<logData>`(`.List`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4bbe88fc35b4290e7128178ef589d31dd88b3ccd2b616c079103432c464e9393) initializer()] |}")
	eval3437, err3437 := evalXdotList(config, -1) // `.List`(.KList)
	if err3437 != nil {
		return m.NoResult, err3437
	}
	return &m.KApply{Label: m.LblXltlogDataXgt, List: []m.K{ // as-is <logData>
		eval3437,
	}}, nil

}

//var constInitLogDataCell K = evalInitLogDataCell(m.InternedBottom)

func evalInitAccountCell(config m.K, guard int) (m.K, error) {
	// rule #2864
	// source: ? @?
	// {| rule initAccountCell(.KList)=>`AccountCellMapItem`(initAcctIDCell(.KList),`<account>`(initAcctIDCell(.KList),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3b8d0cdeb8b3e4fc7a3e752922e8cba6f6fec1ff8773581c17d279ef39b5d401) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2864, "{| rule initAccountCell(.KList)=>`AccountCellMapItem`(initAcctIDCell(.KList),`<account>`(initAcctIDCell(.KList),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList))) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(3b8d0cdeb8b3e4fc7a3e752922e8cba6f6fec1ff8773581c17d279ef39b5d401) initializer()] |}")
	eval3439, err3439 := evalInitAcctIDCell(config, -1) // initAcctIDCell(.KList)
	if err3439 != nil {
		return m.NoResult, err3439
	}
	eval3440, err3440 := evalInitAcctIDCell(config, -1) // initAcctIDCell(.KList)
	if err3440 != nil {
		return m.NoResult, err3440
	}
	eval3441, err3441 := evalInitBalanceCell(config, -1) // initBalanceCell(.KList)
	if err3441 != nil {
		return m.NoResult, err3441
	}
	eval3442, err3442 := evalInitCodeCell(config, -1) // initCodeCell(.KList)
	if err3442 != nil {
		return m.NoResult, err3442
	}
	eval3443, err3443 := evalInitStorageCell(config, -1) // initStorageCell(.KList)
	if err3443 != nil {
		return m.NoResult, err3443
	}
	eval3444, err3444 := evalInitNonceCell(config, -1) // initNonceCell(.KList)
	if err3444 != nil {
		return m.NoResult, err3444
	}
	eval3438, err3438 := evalAccountCellMapItem( // `AccountCellMapItem`(initAcctIDCell(.KList),`<account>`(initAcctIDCell(.KList),initBalanceCell(.KList),initCodeCell(.KList),initStorageCell(.KList),initNonceCell(.KList)))
		eval3439,
		&m.KApply{Label: m.LblXltaccountXgt, List: []m.K{ // as-is <account>
			eval3440,
			eval3441,
			eval3442,
			eval3443,
			eval3444,
		}},
		config, -1)
	if err3438 != nil {
		return m.NoResult, err3438
	}
	return eval3438, nil

}

//var constInitAccountCell K = evalInitAccountCell(m.InternedBottom)

func evalIsMsgIDCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2865
	// source: ? @?
	// {| rule isMsgIDCellOpt(#KToken(#token("MsgIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMsgIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2865, "{| rule isMsgIDCellOpt(#KToken(#token(\"MsgIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2866
	// source: ? @?
	// {| rule isMsgIDCellOpt(`<msgID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmsgIDXgt && len(kapp0.List) == 1 { // `<msgID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2866, "{| rule isMsgIDCellOpt(`<msgID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2867
	// source: ? @?
	// {| rule isMsgIDCellOpt(#KToken(#token("MsgIDCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMsgIDCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2867, "{| rule isMsgIDCellOpt(#KToken(#token(\"MsgIDCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2868
	// source: ? @?
	// {| rule isMsgIDCellOpt(noMsgIDCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoMsgIDCell && len(kapp0.List) == 0 { // noMsgIDCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2868, "{| rule isMsgIDCellOpt(noMsgIDCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2869
	// source: ? @?
	// {| rule isMsgIDCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2869, "{| rule isMsgIDCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsTxNonceCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2870
	// source: ? @?
	// {| rule isTxNonceCell(#KToken(#token("TxNonceCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxNonceCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2870, "{| rule isTxNonceCell(#KToken(#token(\"TxNonceCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2871
	// source: ? @?
	// {| rule isTxNonceCell(`<txNonce>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxNonceXgt && len(kapp0.List) == 1 { // `<txNonce>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2871, "{| rule isTxNonceCell(`<txNonce>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2872
	// source: ? @?
	// {| rule isTxNonceCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2872, "{| rule isTxNonceCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsIDCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2873
	// source: ? @?
	// {| rule isIdCellOpt(`<id>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltidXgt && len(kapp0.List) == 1 { // `<id>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2873, "{| rule isIdCellOpt(`<id>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2874
	// source: ? @?
	// {| rule isIdCellOpt(noIdCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoIDCell && len(kapp0.List) == 0 { // noIdCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2874, "{| rule isIdCellOpt(noIdCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2875
	// source: ? @?
	// {| rule isIdCellOpt(#KToken(#token("IdCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2875, "{| rule isIdCellOpt(#KToken(#token(\"IdCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2876
	// source: ? @?
	// {| rule isIdCellOpt(#KToken(#token("IdCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIDCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2876, "{| rule isIdCellOpt(#KToken(#token(\"IdCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2877
	// source: ? @?
	// {| rule isIdCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2877, "{| rule isIdCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	// rule #2878
	// source: iele-binary.k @319
	// {| rule `%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX)=>`%__IELE-COMMON`(`_&Int__INT`(`_>>Int__INT`(REGS,`_*Int__INT`(IDX,WIDTH)),MASK)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)) ensures #token("true","Bool") [UNIQUE_ID(c92366bf6d4fdfe9bb2a90e2aef339d5fbbc8b48af62b766304e59aab45c2481) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varREGS, t := c1.(*m.Int); t { // lhs KVariable with hook:INT.Int
		if varWIDTH, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varMASK, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				if varIDX, t := c4.(*m.Int); t { // lhs KVariable with hook:INT.Int
					// REQUIRES precomputed isInt(REGS) && isInt(MASK) && isInt(IDX) && isInt(WIDTH)
					// RHS
					traceRuleApply("FUNC", 2878, "{| rule `%(_,_,_,_)_IELE-BINARY`(REGS,WIDTH,MASK,IDX)=>`%__IELE-COMMON`(`_&Int__INT`(`_>>Int__INT`(REGS,`_*Int__INT`(IDX,WIDTH)),MASK)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(REGS),isInt(MASK)),isInt(IDX)),isInt(WIDTH)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(c92366bf6d4fdfe9bb2a90e2aef339d5fbbc8b48af62b766304e59aab45c2481) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-binary.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
					eval3447, err3447 := evalXuXstarIntXuXuINT( // `_*Int__INT`(IDX,WIDTH)
						varIDX,
						varWIDTH,
						config, -1)
					if err3447 != nil {
						return m.NoResult, err3447
					}
					eval3446, err3446 := evalXuXgtXgtIntXuXuINT( // `_>>Int__INT`(REGS,`_*Int__INT`(IDX,WIDTH))
						varREGS,
						eval3447,
						config, -1)
					if err3446 != nil {
						return m.NoResult, err3446
					}
					eval3445, err3445 := evalXuXampsIntXuXuINT( // `_&Int__INT`(`_>>Int__INT`(REGS,`_*Int__INT`(IDX,WIDTH)),MASK)
						eval3446,
						varMASK,
						config, -1)
					if err3445 != nil {
						return m.NoResult, err3445
					}
					return &m.KApply{Label: m.LblXpercentXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is %__IELE-COMMON
						eval3445,
					}}, nil
				}
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXpercentXlparenXuXcommaXuXcommaXuXcommaXuXrparenXuIELEXhyphenBINARY", args: []m.K{c1, c2, c3, c4}}
}

func evalXuxorIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.xor
	lbl := m.LblXuxorIntXuXuINT // _xorInt__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.xor(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.xor, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuxorIntXuXuINT", args: []m.K{c1, c2}}
}

func evalInitInstructionsCell(config m.K, guard int) (m.K, error) {
	// rule #2879
	// source: ? @?
	// {| rule initInstructionsCell(.KList)=>`<instructions>`(`___IELE-COMMON`(`.List{"instructionList"}`(.KList),`.List{"labeledBlockList"}`(.KList))) requires isBlocks(`___IELE-COMMON`(`.List{"instructionList"}`(.KList),`.List{"labeledBlockList"}`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(7d0c0f55a4dbe5d85f13b7f27e19711f153e6886f84213f61c83c00488932bec) initializer()] |}
	// LHS
	// REQUIRES
	eval3448, err3448 := evalIsBlocks( // isBlocks(`___IELE-COMMON`(`.List{"instructionList"}`(.KList),`.List{"labeledBlockList"}`(.KList)))
		&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
			&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
			}},
			&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
			}},
		}},
		config, -1)
	if err3448 != nil {
		return m.NoResult, err3448
	}
	if m.IsTrue(eval3448) {
		// RHS
		traceRuleApply("FUNC", 2879, "{| rule initInstructionsCell(.KList)=>`<instructions>`(`___IELE-COMMON`(`.List{\"instructionList\"}`(.KList),`.List{\"labeledBlockList\"}`(.KList))) requires isBlocks(`___IELE-COMMON`(`.List{\"instructionList\"}`(.KList),`.List{\"labeledBlockList\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(7d0c0f55a4dbe5d85f13b7f27e19711f153e6886f84213f61c83c00488932bec) initializer()] |}")
		return &m.KApply{Label: m.LblXltinstructionsXgt, List: []m.K{ // as-is <instructions>
			&m.KApply{Label: m.LblXuXuXuIELEXhyphenCOMMON, List: []m.K{ // as-is ___IELE-COMMON
				&m.KApply{Label: m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, List: []m.K{ // as-is .List{"instructionList"}
				}},
				&m.KApply{Label: m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, List: []m.K{ // as-is .List{"labeledBlockList"}
				}},
			}},
		}}, nil
	}

	return m.NoResult, &stuckError{funcName: "evalInitInstructionsCell", args: nil}
}

//var constInitInstructionsCell K = evalInitInstructionsCell(m.InternedBottom)

func evalXdotArrayXuIELEXhyphenDATA(config m.K, guard int) (m.K, error) {
	// rule #2880
	// source: data.k @333
	// {| rule `.Array_IELE-DATA`(.KList)=>makeArrayOcaml(`pow30_IELE-DATA`(.KList),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9ec8f40c505a0ed02b2517c1c233f1b5a9c1b980c45018f2213e05e99d2aba2a) contentStartColumn(10) contentStartLine(333) org.kframework.attributes.Location(Location(333,10,333,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2880, "{| rule `.Array_IELE-DATA`(.KList)=>makeArrayOcaml(`pow30_IELE-DATA`(.KList),#token(\"0\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9ec8f40c505a0ed02b2517c1c233f1b5a9c1b980c45018f2213e05e99d2aba2a) contentStartColumn(10) contentStartLine(333) org.kframework.attributes.Location(Location(333,10,333,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval3450, err3450 := evalPow30XuIELEXhyphenDATA(config, -1) // `pow30_IELE-DATA`(.KList)
	if err3450 != nil {
		return m.NoResult, err3450
	}
	eval3449, err3449 := evalMakeArrayOcaml( // makeArrayOcaml(`pow30_IELE-DATA`(.KList),#token("0","Int"))
		eval3450,
		/* rhs KToken */ m.NewIntFromString("0"),
		config, -1)
	if err3449 != nil {
		return m.NoResult, err3449
	}
	return eval3449, nil

}

func evalXhashgetBalance(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.getBalance
	lbl := m.LblXhashgetBalance // #getBalance
	sort := m.SortInt
	if hookRes, hookErr := blockchain.GetBalance(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.getBalance, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetBalance", args: []m.K{c}}
}

func evalIsCmpInst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2881
	// source: ? @?
	// {| rule isCmpInst(#KToken(#token("CmpInst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortCmpInst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2881, "{| rule isCmpInst(#KToken(#token(\"CmpInst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2882
	// source: ? @?
	// {| rule isCmpInst(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isPredicate(K1)),isOperand(K2)),isOperand(K3)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON && len(kapp0.List) == 4 { // `_=cmp__,__IELE-COMMON`(K0,K1,K2,K3)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		varK2 := kapp0.List[2] // lhs KVariable K2
		varK3 := kapp0.List[3] // lhs KVariable K3
		// REQUIRES
		eval3451, err3451 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3451 != nil {
			return m.NoResult, err3451
		}
		eval3452, err3452 := evalIsPredicate( // isPredicate(K1)
			varK1,
			config, -1)
		if err3452 != nil {
			return m.NoResult, err3452
		}
		eval3453, err3453 := evalIsOperand( // isOperand(K2)
			varK2,
			config, -1)
		if err3453 != nil {
			return m.NoResult, err3453
		}
		eval3454, err3454 := evalIsOperand( // isOperand(K3)
			varK3,
			config, -1)
		if err3454 != nil {
			return m.NoResult, err3454
		}
		if (((m.IsTrue(eval3451)) &&
		   (m.IsTrue(eval3452))) &&
		   (m.IsTrue(eval3453))) &&
		   (m.IsTrue(eval3454)) {
			// RHS
			traceRuleApply("FUNC", 2882, "{| rule isCmpInst(`_=cmp__,__IELE-COMMON`(K0,K1,K2,K3))=>#token(\"true\",\"Bool\") requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isPredicate(K1)),isOperand(K2)),isOperand(K3)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2883
	// source: ? @?
	// {| rule isCmpInst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2883, "{| rule isCmpInst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalBytes2String(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BYTES.bytes2string
	lbl := m.LblBytes2String // Bytes2String
	sort := m.SortString
	if hookRes, hookErr := bytesHooks.bytes2string(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BYTES.bytes2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBytes2String", args: []m.K{c}}
}

func evalMessageCellMapItem(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.element
	lbl := m.LblMessageCellMapItem // MessageCellMapItem
	sort := m.SortMessageCellMap
	if hookRes, hookErr := mapHooks.element(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMessageCellMapItem", args: []m.K{c1, c2}}
}

func evalXhashgetCode(c m.K, config m.K, guard int) (m.K, error) {
	//hook: BLOCKCHAIN.getCode
	lbl := m.LblXhashgetCode // #getCode
	sort := m.SortString
	if hookRes, hookErr := blockchain.GetCode(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook BLOCKCHAIN.getCode, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashgetCode", args: []m.K{c}}
}

func evalContractBytes(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2884
	// source: iele.k @1791
	// {| rule contractBytes(CONTRACT)=>#contractBytesAux(CONTRACT,#mainContract(CONTRACT)) requires `_andBool_`(isContract(CONTRACT),`_=/=K_`(CONTRACT,`.List{"contractDefinitionList"}`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(a3a5dea09c3b916e2dbebdf14da6077c175f80782bfbab6b5706091d7645eac1) contentStartColumn(10) contentStartLine(1791) org.kframework.attributes.Location(Location(1791,10,1792,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varCONTRACT := c // lhs KVariable CONTRACT
		// REQUIRES
		eval3455, err3455 := evalIsContract( // isContract(CONTRACT)
			varCONTRACT,
			config, -1)
		if err3455 != nil {
			return m.NoResult, err3455
		}
		eval3456, err3456 := evalXuXeqXslashXeqKXu( // `_=/=K_`(CONTRACT,`.List{"contractDefinitionList"}`(.KList))
			varCONTRACT,
			&m.KApply{Label: m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, List: []m.K{ // as-is .List{"contractDefinitionList"}
			}},
			config, -1)
		if err3456 != nil {
			return m.NoResult, err3456
		}
		if (m.IsTrue(eval3455)) &&
		   (m.IsTrue(eval3456)) {
			// RHS
			traceRuleApply("FUNC", 2884, "{| rule contractBytes(CONTRACT)=>#contractBytesAux(CONTRACT,#mainContract(CONTRACT)) requires `_andBool_`(isContract(CONTRACT),`_=/=K_`(CONTRACT,`.List{\"contractDefinitionList\"}`(.KList))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(a3a5dea09c3b916e2dbebdf14da6077c175f80782bfbab6b5706091d7645eac1) contentStartColumn(10) contentStartLine(1791) org.kframework.attributes.Location(Location(1791,10,1792,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
			eval3458, err3458 := evalXhashmainContract( // #mainContract(CONTRACT)
				varCONTRACT,
				config, -1)
			if err3458 != nil {
				return m.NoResult, err3458
			}
			eval3457, err3457 := evalXhashcontractBytesAux( // #contractBytesAux(CONTRACT,#mainContract(CONTRACT))
				varCONTRACT,
				eval3458,
				config, -1)
			if err3457 != nil {
				return m.NoResult, err3457
			}
			return eval3457, nil
		}
	}

	// rule #2885
	// source: iele.k @1793
	// {| rule contractBytes(`.List{"contractDefinitionList"}`(.KList))=>#token("\"\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(dece394a17398a6046322539e6d786d7f3c9ab450f25b6be2c53dd371d4a837b) contentStartColumn(10) contentStartLine(1793) org.kframework.attributes.Location(Location(1793,10,1793,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket && len(kapp0.List) == 0 { // `.List{"contractDefinitionList"}`(.KList)
		// RHS
		traceRuleApply("FUNC", 2885, "{| rule contractBytes(`.List{\"contractDefinitionList\"}`(.KList))=>#token(\"\\\"\\\"\",\"String\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(dece394a17398a6046322539e6d786d7f3c9ab450f25b6be2c53dd371d4a837b) contentStartColumn(10) contentStartLine(1793) org.kframework.attributes.Location(Location(1793,10,1793,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return /* rhs KToken */ m.NewString(""), nil
	}

	return m.NoResult, &stuckError{funcName: "evalContractBytes", args: []m.K{c}}
}

func evalBase2String(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: STRING.base2string
	lbl := m.LblBase2String // Base2String
	sort := m.SortString
	if hookRes, hookErr := stringHooks.base2string(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.base2string, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalBase2String", args: []m.K{c1, c2}}
}

func evalListItem(c m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.element
	lbl := m.LblListItem // ListItem
	sort := m.SortList
	if hookRes, hookErr := listHooks.element(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.element, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalListItem", args: []m.K{c}}
}

func evalIsStream(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2886
	// source: ? @?
	// {| rule isStream(#KToken(#token("Stream","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortStream { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2886, "{| rule isStream(#KToken(#token(\"Stream\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2887
	// source: ? @?
	// {| rule isStream(#buffer(K0))=>#token("true","Bool") requires isK(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXhashbuffer && len(kapp0.List) == 1 { // #buffer(K0)
		doNothing(kapp0.List[0]) // varK0 := kapp0.List[0] // lhs KVariable not used
		// REQUIRES precomputed isK
		// RHS
		traceRuleApply("FUNC", 2887, "{| rule isStream(#buffer(K0))=>#token(\"true\",\"Bool\") requires isK(K0) ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2888
	// source: ? @?
	// {| rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2888, "{| rule isStream(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitCurrentFunctionCell(config m.K, guard int) (m.K, error) {
	// rule #2889
	// source: ? @?
	// {| rule initCurrentFunctionCell(.KList)=>`<currentFunction>`(initFunctionNameCell(.KList),initLabelsCell(.KList),initCurrentInstructionsCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f65198319741093210d7d8e590de0db3159a2c4848989b42a804342ba6b48215) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2889, "{| rule initCurrentFunctionCell(.KList)=>`<currentFunction>`(initFunctionNameCell(.KList),initLabelsCell(.KList),initCurrentInstructionsCell(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(f65198319741093210d7d8e590de0db3159a2c4848989b42a804342ba6b48215) initializer()] |}")
	eval3459, err3459 := evalInitFunctionNameCell(config, -1) // initFunctionNameCell(.KList)
	if err3459 != nil {
		return m.NoResult, err3459
	}
	eval3460, err3460 := evalInitLabelsCell(config, -1) // initLabelsCell(.KList)
	if err3460 != nil {
		return m.NoResult, err3460
	}
	eval3461, err3461 := evalInitCurrentInstructionsCell(config, -1) // initCurrentInstructionsCell(.KList)
	if err3461 != nil {
		return m.NoResult, err3461
	}
	return &m.KApply{Label: m.LblXltcurrentFunctionXgt, List: []m.K{ // as-is <currentFunction>
		eval3459,
		eval3460,
		eval3461,
	}}, nil

}

//var constInitCurrentFunctionCell K = evalInitCurrentFunctionCell(m.InternedBottom)

func evalIsWordStack(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2890
	// source: ? @?
	// {| rule isWordStack(`_:__IELE-DATA`(K0,K1))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXcolonXuXuIELEXhyphenDATA && len(kapp0.List) == 2 { // `_:__IELE-DATA`(K0,K1)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			doNothing(kapp0.List[1]) // varK1 := kapp0.List[1] // lhs KVariable not used
			// RHS
			traceRuleApply("FUNC", 2890, "{| rule isWordStack(`_:__IELE-DATA`(K0,K1))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2891
	// source: ? @?
	// {| rule isWordStack(`.WordStack_IELE-DATA`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXdotWordStackXuIELEXhyphenDATA && len(kapp0.List) == 0 { // `.WordStack_IELE-DATA`(.KList)
		// RHS
		traceRuleApply("FUNC", 2891, "{| rule isWordStack(`.WordStack_IELE-DATA`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2892
	// source: ? @?
	// {| rule isWordStack(#KToken(#token("WordStack","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWordStack { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2892, "{| rule isWordStack(#KToken(#token(\"WordStack\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2893
	// source: ? @?
	// {| rule isWordStack(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2893, "{| rule isWordStack(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsAccountsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2894
	// source: ? @?
	// {| rule isAccountsCell(`<accounts>`(K0))=>#token("true","Bool") requires isAccountCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltaccountsXgt && len(kapp0.List) == 1 { // `<accounts>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortAccountCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isAccountCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 2894, "{| rule isAccountsCell(`<accounts>`(K0))=>#token(\"true\",\"Bool\") requires isAccountCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2895
	// source: ? @?
	// {| rule isAccountsCell(#KToken(#token("AccountsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortAccountsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2895, "{| rule isAccountsCell(#KToken(#token(\"AccountsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2896
	// source: ? @?
	// {| rule isAccountsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2896, "{| rule isAccountsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXltXeqMapXuXuMAP(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.inclusion
	lbl := m.LblXuXltXeqMapXuXuMAP // _<=Map__MAP
	sort := m.SortBool
	if hookRes, hookErr := mapHooks.inclusion(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.inclusion, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXltXeqMapXuXuMAP", args: []m.K{c1, c2}}
}

func evalNewUUIDXuSTRING(config m.K, guard int) (m.K, error) {
	//hook: STRING.uuid
	lbl := m.LblNewUUIDXuSTRING // newUUID_STRING
	sort := m.SortString
	if hookRes, hookErr := stringHooks.uuid(lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook STRING.uuid, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalNewUUIDXuSTRING", args: nil}
}

func evalInitSelfDestructCell(config m.K, guard int) (m.K, error) {
	// rule #2897
	// source: ? @?
	// {| rule initSelfDestructCell(.KList)=>`<selfDestruct>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2bba4bf93451670118d5e65d676d914aa0079a2eba2273bdb7534c3f97f555e7) initializer()] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2897, "{| rule initSelfDestructCell(.KList)=>`<selfDestruct>`(`.Set`(.KList)) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2bba4bf93451670118d5e65d676d914aa0079a2eba2273bdb7534c3f97f555e7) initializer()] |}")
	eval3462, err3462 := evalXdotSet(config, -1) // `.Set`(.KList)
	if err3462 != nil {
		return m.NoResult, err3462
	}
	return &m.KApply{Label: m.LblXltselfDestructXgt, List: []m.K{ // as-is <selfDestruct>
		eval3462,
	}}, nil

}

//var constInitSelfDestructCell K = evalInitSelfDestructCell(m.InternedBottom)

func evalIsMessagesCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2898
	// source: ? @?
	// {| rule isMessagesCell(#KToken(#token("MessagesCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMessagesCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2898, "{| rule isMessagesCell(#KToken(#token(\"MessagesCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2899
	// source: ? @?
	// {| rule isMessagesCell(`<messages>`(K0))=>#token("true","Bool") requires isMessageCellMap(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmessagesXgt && len(kapp0.List) == 1 { // `<messages>`(K0)
		if varK0, t := kapp0.List[0].(*m.Map); t && varK0.Sort == m.SortMessageCellMap { // lhs KVariable with hook:MAP.Map
			// REQUIRES precomputed isMessageCellMap(K0)
			// RHS
			traceRuleApply("FUNC", 2899, "{| rule isMessagesCell(`<messages>`(K0))=>#token(\"true\",\"Bool\") requires isMessageCellMap(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2900
	// source: ? @?
	// {| rule isMessagesCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2900, "{| rule isMessagesCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalECDSARecover(c1 m.K, c2 m.K, c3 m.K, c4 m.K, config m.K, guard int) (m.K, error) {
	//hook: KRYPTO.ecdsaRecover
	lbl := m.LblECDSARecover // ECDSARecover
	sort := m.SortString
	if hookRes, hookErr := krypto.EcdsaRecover(c1, c2, c3, c4, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KRYPTO.ecdsaRecover, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalECDSARecover", args: []m.K{c1, c2, c3, c4}}
}

func evalXhashpoint(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2901
	// source: iele.k @1697
	// {| rule #point(`(_,_)_KRYPTO`(X,Y))=>operandList(X,operandList(Y,`.List{"operandList"}`(.KList))) requires `_andBool_`(isInt(Y),isInt(X)) ensures #token("true","Bool") [UNIQUE_ID(6fe82755ba814cf6c6d3dd2cae2b9835b07c7940b3a1b1b8698be60ef7be415d) contentStartColumn(10) contentStartLine(1697) org.kframework.attributes.Location(Location(1697,10,1697,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlparenXuXcommaXuXrparenXuKRYPTO && len(kapp0.List) == 2 { // `(_,_)_KRYPTO`(X,Y)
		if varX, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varY, t := kapp0.List[1].(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isInt(Y) && isInt(X)
				// RHS
				traceRuleApply("FUNC", 2901, "{| rule #point(`(_,_)_KRYPTO`(X,Y))=>operandList(X,operandList(Y,`.List{\"operandList\"}`(.KList))) requires `_andBool_`(isInt(Y),isInt(X)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6fe82755ba814cf6c6d3dd2cae2b9835b07c7940b3a1b1b8698be60ef7be415d) contentStartColumn(10) contentStartLine(1697) org.kframework.attributes.Location(Location(1697,10,1697,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				return &m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
					varX,
					&m.KApply{Label: m.LblOperandList, List: []m.K{ // as-is operandList
						varY,
						&m.KApply{Label: m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, List: []m.K{ // as-is .List{"operandList"}
						}},
					}},
				}}, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashpoint", args: []m.K{c}}
}

func evalXhashasAccount(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2902
	// source: data.k @357
	// {| rule #asAccount(#token("\"0x\"","String"))=>`.Account_IELE-DATA`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(df160cbba859fd8b87f3bb98b14c168e6c24324cddbccafe162469981a45ef07) contentStartColumn(10) contentStartLine(357) org.kframework.attributes.Location(Location(357,10,357,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("0x")) { // #token("\"0x\"","String")
		// RHS
		traceRuleApply("FUNC", 2902, "{| rule #asAccount(#token(\"\\\"0x\\\"\",\"String\"))=>`.Account_IELE-DATA`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(df160cbba859fd8b87f3bb98b14c168e6c24324cddbccafe162469981a45ef07) contentStartColumn(10) contentStartLine(357) org.kframework.attributes.Location(Location(357,10,357,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXdotAccountXuIELEXhyphenDATA, List: []m.K{ // as-is .Account_IELE-DATA
		}}, nil
	}

	// rule #2903
	// source: data.k @356
	// {| rule #asAccount(#token("\"\"","String"))=>`.Account_IELE-DATA`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a2e54538cb1fbf590df4df9e7b86e26be6699945cc26c5c7fee15c54063ac90) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(m.NewString("")) { // #token("\"\"","String")
		// RHS
		traceRuleApply("FUNC", 2903, "{| rule #asAccount(#token(\"\\\"\\\"\",\"String\"))=>`.Account_IELE-DATA`(.KList) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9a2e54538cb1fbf590df4df9e7b86e26be6699945cc26c5c7fee15c54063ac90) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXdotAccountXuIELEXhyphenDATA, List: []m.K{ // as-is .Account_IELE-DATA
		}}, nil
	}

	// rule #2904
	// source: data.k @358
	// {| rule #asAccount(S)=>#parseHexWord(S) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(070269aee3247528217b593ca77e907ee60764c244b5f650d8d7e079376c63db) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,358,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 2904, "{| rule #asAccount(S)=>#parseHexWord(S) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(070269aee3247528217b593ca77e907ee60764c244b5f650d8d7e079376c63db) contentStartColumn(10) contentStartLine(358) org.kframework.attributes.Location(Location(358,10,358,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
		eval3463, err3463 := evalXhashparseHexWord( // #parseHexWord(S)
			varS,
			config, -1)
		if err3463 != nil {
			return m.NoResult, err3463
		}
		return eval3463, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashasAccount", args: []m.K{c}}
}

func evalMakeArrayOcaml(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: ARRAY.make
	lbl := m.LblMakeArrayOcaml // makeArrayOcaml
	sort := m.SortArray
	if hookRes, hookErr := arrayHooks.make(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook ARRAY.make, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalMakeArrayOcaml", args: []m.K{c1, c2}}
}

func evalXhashparseAddr(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2905
	// source: data.k @466
	// {| rule #parseAddr(S)=>#addr(#parseHexWord(S)) requires isString(S) ensures #token("true","Bool") [UNIQUE_ID(6ce243ac40e5ea7540982b750ded4da1f322aeddfac36318c6a3394047631a5d) contentStartColumn(10) contentStartLine(466) org.kframework.attributes.Location(Location(466,10,466,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varS, t := c.(*m.String); t { // lhs KVariable with hook:STRING.String
		// REQUIRES precomputed isString(S)
		// RHS
		traceRuleApply("FUNC", 2905, "{| rule #parseAddr(S)=>#addr(#parseHexWord(S)) requires isString(S) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(6ce243ac40e5ea7540982b750ded4da1f322aeddfac36318c6a3394047631a5d) contentStartColumn(10) contentStartLine(466) org.kframework.attributes.Location(Location(466,10,466,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		eval3465, err3465 := evalXhashparseHexWord( // #parseHexWord(S)
			varS,
			config, -1)
		if err3465 != nil {
			return m.NoResult, err3465
		}
		eval3464, err3464 := evalXhashaddr( // #addr(#parseHexWord(S))
			eval3465,
			config, -1)
		if err3464 != nil {
			return m.NoResult, err3464
		}
		return eval3464, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashparseAddr", args: []m.K{c}}
}

func evalIsWellFormednessScheduleCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2906
	// source: ? @?
	// {| rule isWellFormednessScheduleCellOpt(#KToken(#token("WellFormednessScheduleCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessScheduleCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2906, "{| rule isWellFormednessScheduleCellOpt(#KToken(#token(\"WellFormednessScheduleCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2907
	// source: ? @?
	// {| rule isWellFormednessScheduleCellOpt(`<well-formedness-schedule>`(K0))=>#token("true","Bool") requires isSchedule(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltwellXhyphenformednessXhyphenscheduleXgt && len(kapp0.List) == 1 { // `<well-formedness-schedule>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3466, err3466 := evalIsSchedule( // isSchedule(K0)
			varK0,
			config, -1)
		if err3466 != nil {
			return m.NoResult, err3466
		}
		if m.IsTrue(eval3466) {
			// RHS
			traceRuleApply("FUNC", 2907, "{| rule isWellFormednessScheduleCellOpt(`<well-formedness-schedule>`(K0))=>#token(\"true\",\"Bool\") requires isSchedule(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2908
	// source: ? @?
	// {| rule isWellFormednessScheduleCellOpt(#KToken(#token("WellFormednessScheduleCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortWellFormednessScheduleCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2908, "{| rule isWellFormednessScheduleCellOpt(#KToken(#token(\"WellFormednessScheduleCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2909
	// source: ? @?
	// {| rule isWellFormednessScheduleCellOpt(noWellFormednessScheduleCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoWellFormednessScheduleCell && len(kapp0.List) == 0 { // noWellFormednessScheduleCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2909, "{| rule isWellFormednessScheduleCellOpt(noWellFormednessScheduleCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2910
	// source: ? @?
	// {| rule isWellFormednessScheduleCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2910, "{| rule isWellFormednessScheduleCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuinListXu(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: LIST.in
	lbl := m.LblXuinListXu // _inList_
	sort := m.SortBool
	if hookRes, hookErr := listHooks.in(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook LIST.in, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuinListXu", args: []m.K{c1, c2}}
}

func evalIsContractNameCellOpt(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2911
	// source: ? @?
	// {| rule isContractNameCellOpt(#KToken(#token("ContractNameCellOpt","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractNameCellOpt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2911, "{| rule isContractNameCellOpt(#KToken(#token(\"ContractNameCellOpt\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2912
	// source: ? @?
	// {| rule isContractNameCellOpt(#KToken(#token("ContractNameCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortContractNameCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2912, "{| rule isContractNameCellOpt(#KToken(#token(\"ContractNameCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2913
	// source: ? @?
	// {| rule isContractNameCellOpt(noContractNameCell(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblNoContractNameCell && len(kapp0.List) == 0 { // noContractNameCell(.KList)
		// RHS
		traceRuleApply("FUNC", 2913, "{| rule isContractNameCellOpt(noContractNameCell(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2914
	// source: ? @?
	// {| rule isContractNameCellOpt(`<contractName>`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltcontractNameXgt && len(kapp0.List) == 1 { // `<contractName>`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3467, err3467 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err3467 != nil {
			return m.NoResult, err3467
		}
		if m.IsTrue(eval3467) {
			// RHS
			traceRuleApply("FUNC", 2914, "{| rule isContractNameCellOpt(`<contractName>`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2915
	// source: ? @?
	// {| rule isContractNameCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2915, "{| rule isContractNameCellOpt(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalInitModeCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2916
	// source: ? @?
	// {| rule initModeCell(Init)=>`<mode>`(`project:Mode`(`Map:lookup`(Init,#token("$MODE","KConfigVar")))) requires isMode(`project:Mode`(`Map:lookup`(Init,#token("$MODE","KConfigVar")))) ensures #token("true","Bool") [UNIQUE_ID(9897fc7ecce6ff25cdda706c48cfa7efa594ed8b09d0b9a055b1262a019c90bf) initializer()] |}
	// LHS
	if varInit, t := c.(*m.Map); t && varInit.Sort == m.SortMap { // lhs KVariable with hook:MAP.Map
		// REQUIRES
		eval3470, err3470 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$MODE","KConfigVar"))
			varInit,
			/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$MODE"},
			config, -1)
		if err3470 != nil {
			return m.NoResult, err3470
		}
		eval3469, err3469 := evalProjectXcolonMode( // `project:Mode`(`Map:lookup`(Init,#token("$MODE","KConfigVar")))
			eval3470,
			config, -1)
		if err3469 != nil {
			return m.NoResult, err3469
		}
		eval3468, err3468 := evalIsMode( // isMode(`project:Mode`(`Map:lookup`(Init,#token("$MODE","KConfigVar"))))
			eval3469,
			config, -1)
		if err3468 != nil {
			return m.NoResult, err3468
		}
		if m.IsTrue(eval3468) {
			// RHS
			traceRuleApply("FUNC", 2916, "{| rule initModeCell(Init)=>`<mode>`(`project:Mode`(`Map:lookup`(Init,#token(\"$MODE\",\"KConfigVar\")))) requires isMode(`project:Mode`(`Map:lookup`(Init,#token(\"$MODE\",\"KConfigVar\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(9897fc7ecce6ff25cdda706c48cfa7efa594ed8b09d0b9a055b1262a019c90bf) initializer()] |}")
			eval3472, err3472 := evalMapXcolonlookup( // `Map:lookup`(Init,#token("$MODE","KConfigVar"))
				varInit,
				/* rhs KToken */ &m.KToken{Sort: m.SortKConfigVar, Value: "$MODE"},
				config, -1)
			if err3472 != nil {
				return m.NoResult, err3472
			}
			eval3471, err3471 := evalProjectXcolonMode( // `project:Mode`(`Map:lookup`(Init,#token("$MODE","KConfigVar")))
				eval3472,
				config, -1)
			if err3471 != nil {
				return m.NoResult, err3471
			}
			return &m.KApply{Label: m.LblXltmodeXgt, List: []m.K{ // as-is <mode>
				eval3471,
			}}, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalInitModeCell", args: []m.K{c}}
}

func evalIsValueCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2917
	// source: ? @?
	// {| rule isValueCell(#KToken(#token("ValueCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortValueCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2917, "{| rule isValueCell(#KToken(#token(\"ValueCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2918
	// source: ? @?
	// {| rule isValueCell(`<value>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltvalueXgt && len(kapp0.List) == 1 { // `<value>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2918, "{| rule isValueCell(`<value>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2919
	// source: ? @?
	// {| rule isValueCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2919, "{| rule isValueCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsMsgIDCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2920
	// source: ? @?
	// {| rule isMsgIDCell(#KToken(#token("MsgIDCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortMsgIDCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2920, "{| rule isMsgIDCell(#KToken(#token(\"MsgIDCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2921
	// source: ? @?
	// {| rule isMsgIDCell(`<msgID>`(K0))=>#token("true","Bool") requires isInt(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltmsgIDXgt && len(kapp0.List) == 1 { // `<msgID>`(K0)
		if _, t := kapp0.List[0].(*m.Int); t { // lhs KVariable with hook:INT.Int
			// REQUIRES precomputed isInt(K0)
			// RHS
			traceRuleApply("FUNC", 2921, "{| rule isMsgIDCell(`<msgID>`(K0))=>#token(\"true\",\"Bool\") requires isInt(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2922
	// source: ? @?
	// {| rule isMsgIDCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2922, "{| rule isMsgIDCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalPow160XuIELEXhyphenDATA(config m.K, guard int) (m.K, error) {
	// rule #2923
	// source: data.k @33
	// {| rule `pow160_IELE-DATA`(.KList)=>`_^Int__INT`(#token("2","Int"),#token("160","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(499251a7a91daf7db65f128be23fb291a073868c9bdaaec7fedf09110d6c4781) contentStartColumn(10) contentStartLine(33) org.kframework.attributes.Location(Location(33,10,33,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	// RHS
	traceRuleApply("FUNC", 2923, "{| rule `pow160_IELE-DATA`(.KList)=>`_^Int__INT`(#token(\"2\",\"Int\"),#token(\"160\",\"Int\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(499251a7a91daf7db65f128be23fb291a073868c9bdaaec7fedf09110d6c4781) contentStartColumn(10) contentStartLine(33) org.kframework.attributes.Location(Location(33,10,33,30)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
	eval3473, err3473 := evalXuXxorIntXuXuINT( // `_^Int__INT`(#token("2","Int"),#token("160","Int"))
		/* rhs KToken */ m.NewIntFromString("2"),
		/* rhs KToken */ m.NewIntFromString("160"),
		config, -1)
	if err3473 != nil {
		return m.NoResult, err3473
	}
	return eval3473, nil

}

//var constPow160XuIELEXhyphenDATA K = evalPow160XuIELEXhyphenDATA(m.InternedBottom)

func evalIsConstant(c m.K, config m.K, guard int) (m.K, error) {
	// predicate rule: BOOL.Bool
	if _, t := c.(*m.Bool); t  {
		return m.BoolTrue, nil
	}
	// predicate rule: INT.Int
	if _, t := c.(*m.Int); t {
		return m.BoolTrue, nil
	}
	// rule #2924
	// source: ? @?
	// {| rule isConstant(#KToken(#token("HexConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortHexConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2924, "{| rule isConstant(#KToken(#token(\"HexConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2925
	// source: ? @?
	// {| rule isConstant(#KToken(#token("Bool","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBool { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2925, "{| rule isConstant(#KToken(#token(\"Bool\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2926
	// source: ? @?
	// {| rule isConstant(#KToken(#token("GlobalName","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortGlobalName { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2926, "{| rule isConstant(#KToken(#token(\"GlobalName\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2927
	// source: ? @?
	// {| rule isConstant(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblACCTXuCOLLISIONXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2927, "{| rule isConstant(`ACCT_COLLISION_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2928
	// source: ? @?
	// {| rule isConstant(#KToken(#token("IntConstant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortIntConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2928, "{| rule isConstant(#KToken(#token(\"IntConstant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2929
	// source: ? @?
	// {| rule isConstant(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblUSERXuERRORXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `USER_ERROR_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2929, "{| rule isConstant(`USER_ERROR_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2930
	// source: ? @?
	// {| rule isConstant(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuINVALIDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2930, "{| rule isConstant(`CONTRACT_INVALID_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2931
	// source: ? @?
	// {| rule isConstant(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2931, "{| rule isConstant(`FUNC_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2932
	// source: ? @?
	// {| rule isConstant(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuGASXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2932, "{| rule isConstant(`OUT_OF_GAS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2933
	// source: ? @?
	// {| rule isConstant(#KToken(#token("Int","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortInt { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2933, "{| rule isConstant(#KToken(#token(\"Int\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2934
	// source: ? @?
	// {| rule isConstant(`@__IELE-COMMON`(K0))=>#token("true","Bool") requires isIeleName(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXatXuXuIELEXhyphenCOMMON && len(kapp0.List) == 1 { // `@__IELE-COMMON`(K0)
		varK0 := kapp0.List[0] // lhs KVariable K0
		// REQUIRES
		eval3474, err3474 := evalIsIeleName( // isIeleName(K0)
			varK0,
			config, -1)
		if err3474 != nil {
			return m.NoResult, err3474
		}
		if m.IsTrue(eval3474) {
			// RHS
			traceRuleApply("FUNC", 2934, "{| rule isConstant(`@__IELE-COMMON`(K0))=>#token(\"true\",\"Bool\") requires isIeleName(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2935
	// source: ? @?
	// {| rule isConstant(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCONTRACTXuNOTXuFOUNDXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2935, "{| rule isConstant(`CONTRACT_NOT_FOUND_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2936
	// source: ? @?
	// {| rule isConstant(#KToken(#token("Constant","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortConstant { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2936, "{| rule isConstant(#KToken(#token(\"Constant\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2937
	// source: ? @?
	// {| rule isConstant(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblCALLXuSTACKXuOVERFLOWXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2937, "{| rule isConstant(`CALL_STACK_OVERFLOW_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2938
	// source: ? @?
	// {| rule isConstant(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblFUNCXuWRONGXuSIGXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2938, "{| rule isConstant(`FUNC_WRONG_SIG_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2939
	// source: ? @?
	// {| rule isConstant(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblOUTXuOFXuFUNDSXuIELEXhyphenINFRASTRUCTURE && len(kapp0.List) == 0 { // `OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList)
		// RHS
		traceRuleApply("FUNC", 2939, "{| rule isConstant(`OUT_OF_FUNDS_IELE-INFRASTRUCTURE`(.KList))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2940
	// source: ? @?
	// {| rule isConstant(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2940, "{| rule isConstant(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalIsBlockhashCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2941
	// source: ? @?
	// {| rule isBlockhashCell(`<blockhash>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltblockhashXgt && len(kapp0.List) == 1 { // `<blockhash>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2941, "{| rule isBlockhashCell(`<blockhash>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2942
	// source: ? @?
	// {| rule isBlockhashCell(#KToken(#token("BlockhashCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortBlockhashCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2942, "{| rule isBlockhashCell(#KToken(#token(\"BlockhashCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2943
	// source: ? @?
	// {| rule isBlockhashCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2943, "{| rule isBlockhashCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashdecodeLengthPrefixAux(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2944
	// source: data.k @577
	// {| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),`_-Int__INT`(B0,#token("128","Int")),`_+Int_`(START,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("128","Int")),`_<Int__INT`(B0,`_+Int_`(#token("128","Int"),#token("56","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(2b88c8b2ff586b6cd3e80053fc83173958bc173bb76cdeaf0244061c6802a443) contentStartColumn(10) contentStartLine(577) org.kframework.attributes.Location(Location(577,10,577,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varB0, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3475, err3475 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("128","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("128"),
					config, -1)
				if err3475 != nil {
					return m.NoResult, err3475
				}
				eval3477, err3477 := evalXuXplusIntXu( // `_+Int_`(#token("128","Int"),#token("56","Int"))
					/* rhs KToken */ m.NewIntFromString("128"),
					/* rhs KToken */ m.NewIntFromString("56"),
					config, -1)
				if err3477 != nil {
					return m.NoResult, err3477
				}
				eval3476, err3476 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,`_+Int_`(#token("128","Int"),#token("56","Int")))
					varB0,
					eval3477,
					config, -1)
				if err3476 != nil {
					return m.NoResult, err3476
				}
				if /* rhs precomputed isString(STR) && isInt(START) && isInt(B0) */ /* && */
				   (m.IsTrue(eval3475)) &&
				   (m.IsTrue(eval3476)) {
					// RHS
					traceRuleApply("FUNC", 2944, "{| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),`_-Int__INT`(B0,#token(\"128\",\"Int\")),`_+Int_`(START,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"128\",\"Int\")),`_<Int__INT`(B0,`_+Int_`(#token(\"128\",\"Int\"),#token(\"56\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2b88c8b2ff586b6cd3e80053fc83173958bc173bb76cdeaf0244061c6802a443) contentStartColumn(10) contentStartLine(577) org.kframework.attributes.Location(Location(577,10,577,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval3478, err3478 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("128","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("128"),
						config, -1)
					if err3478 != nil {
						return m.NoResult, err3478
					}
					eval3479, err3479 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err3479 != nil {
						return m.NoResult, err3479
					}
					return &m.KApply{Label: m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA, List: []m.K{ // as-is _(_,_)_IELE-DATA
						&m.KApply{Label: m.LblXhashstrXuIELEXhyphenDATA, List: []m.K{ // as-is #str_IELE-DATA
						}},
						eval3478,
						eval3479,
					}}, nil
				}
			}
		}
	}

	// rule #2945
	// source: data.k @578
	// {| rule #decodeLengthPrefixAux(STR,START,B0)=>#decodeLengthPrefixLength(`#str_IELE-DATA`(.KList),STR,START,B0) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,`_+Int_`(#token("128","Int"),#token("56","Int"))),`_<Int__INT`(B0,#token("192","Int")))) ensures #token("true","Bool") [UNIQUE_ID(37bb694f369a24a0d3ab5130729d6a5dc396a314e052a5d36c0602453564e69d) contentStartColumn(10) contentStartLine(578) org.kframework.attributes.Location(Location(578,10,578,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varB0, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3481, err3481 := evalXuXplusIntXu( // `_+Int_`(#token("128","Int"),#token("56","Int"))
					/* rhs KToken */ m.NewIntFromString("128"),
					/* rhs KToken */ m.NewIntFromString("56"),
					config, -1)
				if err3481 != nil {
					return m.NoResult, err3481
				}
				eval3480, err3480 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,`_+Int_`(#token("128","Int"),#token("56","Int")))
					varB0,
					eval3481,
					config, -1)
				if err3480 != nil {
					return m.NoResult, err3480
				}
				eval3482, err3482 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("192","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("192"),
					config, -1)
				if err3482 != nil {
					return m.NoResult, err3482
				}
				if /* rhs precomputed isString(STR) && isInt(START) && isInt(B0) */ /* && */
				   (m.IsTrue(eval3480)) &&
				   (m.IsTrue(eval3482)) {
					// RHS
					traceRuleApply("FUNC", 2945, "{| rule #decodeLengthPrefixAux(STR,START,B0)=>#decodeLengthPrefixLength(`#str_IELE-DATA`(.KList),STR,START,B0) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,`_+Int_`(#token(\"128\",\"Int\"),#token(\"56\",\"Int\"))),`_<Int__INT`(B0,#token(\"192\",\"Int\")))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(37bb694f369a24a0d3ab5130729d6a5dc396a314e052a5d36c0602453564e69d) contentStartColumn(10) contentStartLine(578) org.kframework.attributes.Location(Location(578,10,578,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval3483, err3483 := evalXhashdecodeLengthPrefixLength( // #decodeLengthPrefixLength(`#str_IELE-DATA`(.KList),STR,START,B0)
						&m.KApply{Label: m.LblXhashstrXuIELEXhyphenDATA, List: []m.K{ // as-is #str_IELE-DATA
						}},
						varSTR,
						varSTART,
						varB0,
						config, -1)
					if err3483 != nil {
						return m.NoResult, err3483
					}
					return eval3483, nil
				}
			}
		}
	}

	// rule #2946
	// source: data.k @576
	// {| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),#token("1","Int"),START) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_<Int__INT`(B0,#token("128","Int"))) ensures #token("true","Bool") [UNIQUE_ID(4a4dfdc367505eadb6669a555794a8a6c7671ed6e521c501cb35481a37624c15) contentStartColumn(10) contentStartLine(576) org.kframework.attributes.Location(Location(576,10,576,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varB0, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3484, err3484 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,#token("128","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("128"),
					config, -1)
				if err3484 != nil {
					return m.NoResult, err3484
				}
				if /* rhs precomputed isString(STR) && isInt(START) && isInt(B0) */ /* && */
				   m.IsTrue(eval3484) {
					// RHS
					traceRuleApply("FUNC", 2946, "{| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#str_IELE-DATA`(.KList),#token(\"1\",\"Int\"),START) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_<Int__INT`(B0,#token(\"128\",\"Int\"))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(4a4dfdc367505eadb6669a555794a8a6c7671ed6e521c501cb35481a37624c15) contentStartColumn(10) contentStartLine(576) org.kframework.attributes.Location(Location(576,10,576,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					return &m.KApply{Label: m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA, List: []m.K{ // as-is _(_,_)_IELE-DATA
						&m.KApply{Label: m.LblXhashstrXuIELEXhyphenDATA, List: []m.K{ // as-is #str_IELE-DATA
						}},
						/* rhs KToken */ m.NewIntFromString("1"),
						varSTART,
					}}, nil
				}
			}
		}
	}

	// rule #2947
	// source: data.k @579
	// {| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#list_IELE-DATA`(.KList),`_-Int__INT`(B0,#token("192","Int")),`_+Int_`(START,#token("1","Int"))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token("192","Int")),`_<Int__INT`(B0,`_+Int_`(#token("192","Int"),#token("56","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(ed4d56ccc8bf8c05fe2a5924e59a182d3d9bd7c0fe6f3d0035dbd71c8b31d4c0) contentStartColumn(10) contentStartLine(579) org.kframework.attributes.Location(Location(579,10,579,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
	// LHS
	if _, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varB0, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES
				eval3485, err3485 := evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(B0,#token("192","Int"))
					varB0,
					/* rhs KToken */ m.NewIntFromString("192"),
					config, -1)
				if err3485 != nil {
					return m.NoResult, err3485
				}
				eval3487, err3487 := evalXuXplusIntXu( // `_+Int_`(#token("192","Int"),#token("56","Int"))
					/* rhs KToken */ m.NewIntFromString("192"),
					/* rhs KToken */ m.NewIntFromString("56"),
					config, -1)
				if err3487 != nil {
					return m.NoResult, err3487
				}
				eval3486, err3486 := evalXuXltIntXuXuINT( // `_<Int__INT`(B0,`_+Int_`(#token("192","Int"),#token("56","Int")))
					varB0,
					eval3487,
					config, -1)
				if err3486 != nil {
					return m.NoResult, err3486
				}
				if /* rhs precomputed isString(STR) && isInt(START) && isInt(B0) */ /* && */
				   (m.IsTrue(eval3485)) &&
				   (m.IsTrue(eval3486)) {
					// RHS
					traceRuleApply("FUNC", 2947, "{| rule #decodeLengthPrefixAux(STR,START,B0)=>`_(_,_)_IELE-DATA`(`#list_IELE-DATA`(.KList),`_-Int__INT`(B0,#token(\"192\",\"Int\")),`_+Int_`(START,#token(\"1\",\"Int\"))) requires `_andBool_`(`_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)),`_andBool_`(`_>=Int__INT`(B0,#token(\"192\",\"Int\")),`_<Int__INT`(B0,`_+Int_`(#token(\"192\",\"Int\"),#token(\"56\",\"Int\"))))) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(ed4d56ccc8bf8c05fe2a5924e59a182d3d9bd7c0fe6f3d0035dbd71c8b31d4c0) contentStartColumn(10) contentStartLine(579) org.kframework.attributes.Location(Location(579,10,579,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K \"requires\" K)] |}")
					eval3488, err3488 := evalXuXhyphenIntXuXuINT( // `_-Int__INT`(B0,#token("192","Int"))
						varB0,
						/* rhs KToken */ m.NewIntFromString("192"),
						config, -1)
					if err3488 != nil {
						return m.NoResult, err3488
					}
					eval3489, err3489 := evalXuXplusIntXu( // `_+Int_`(START,#token("1","Int"))
						varSTART,
						/* rhs KToken */ m.NewIntFromString("1"),
						config, -1)
					if err3489 != nil {
						return m.NoResult, err3489
					}
					return &m.KApply{Label: m.LblXuXlparenXuXcommaXuXrparenXuIELEXhyphenDATA, List: []m.K{ // as-is _(_,_)_IELE-DATA
						&m.KApply{Label: m.LblXhashlistXuIELEXhyphenDATA, List: []m.K{ // as-is #list_IELE-DATA
						}},
						eval3488,
						eval3489,
					}}, nil
				}
			}
		}
	}

	// rule #2948
	// source: data.k @580
	// {| rule #decodeLengthPrefixAux(STR,START,B0)=>#decodeLengthPrefixLength(`#list_IELE-DATA`(.KList),STR,START,B0) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token("true","Bool") [UNIQUE_ID(906df7502a2fa035f9e6d36a55fb67246b5b22f5eebef89a6704770d6a1666da) contentStartColumn(10) contentStartLine(580) org.kframework.attributes.Location(Location(580,10,580,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varSTR, t := c1.(*m.String); t { // lhs KVariable with hook:STRING.String
		if varSTART, t := c2.(*m.Int); t { // lhs KVariable with hook:INT.Int
			if varB0, t := c3.(*m.Int); t { // lhs KVariable with hook:INT.Int
				// REQUIRES precomputed isString(STR) && isInt(START) && isInt(B0)
				// RHS
				traceRuleApply("FUNC", 2948, "{| rule #decodeLengthPrefixAux(STR,START,B0)=>#decodeLengthPrefixLength(`#list_IELE-DATA`(.KList),STR,START,B0) requires `_andBool_`(`_andBool_`(isString(STR),isInt(START)),isInt(B0)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(906df7502a2fa035f9e6d36a55fb67246b5b22f5eebef89a6704770d6a1666da) contentStartColumn(10) contentStartLine(580) org.kframework.attributes.Location(Location(580,10,580,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
				eval3490, err3490 := evalXhashdecodeLengthPrefixLength( // #decodeLengthPrefixLength(`#list_IELE-DATA`(.KList),STR,START,B0)
					&m.KApply{Label: m.LblXhashlistXuIELEXhyphenDATA, List: []m.K{ // as-is #list_IELE-DATA
					}},
					varSTR,
					varSTART,
					varB0,
					config, -1)
				if err3490 != nil {
					return m.NoResult, err3490
				}
				return eval3490, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalXhashdecodeLengthPrefixAux", args: []m.K{c1, c2, c3}}
}

func evalIsSHA3Inst(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2949
	// source: ? @?
	// {| rule isSHA3Inst(#KToken(#token("SHA3Inst","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortSHA3Inst { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2949, "{| rule isSHA3Inst(#KToken(#token(\"SHA3Inst\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2950
	// source: ? @?
	// {| rule isSHA3Inst(`_=sha3__IELE-COMMON`(K0,K1))=>#token("true","Bool") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXuXeqsha3XuXuIELEXhyphenCOMMON && len(kapp0.List) == 2 { // `_=sha3__IELE-COMMON`(K0,K1)
		varK0 := kapp0.List[0] // lhs KVariable K0
		varK1 := kapp0.List[1] // lhs KVariable K1
		// REQUIRES
		eval3491, err3491 := evalIsLValue( // isLValue(K0)
			varK0,
			config, -1)
		if err3491 != nil {
			return m.NoResult, err3491
		}
		eval3492, err3492 := evalIsOperand( // isOperand(K1)
			varK1,
			config, -1)
		if err3492 != nil {
			return m.NoResult, err3492
		}
		if (m.IsTrue(eval3491)) &&
		   (m.IsTrue(eval3492)) {
			// RHS
			traceRuleApply("FUNC", 2950, "{| rule isSHA3Inst(`_=sha3__IELE-COMMON`(K0,K1))=>#token(\"true\",\"Bool\") requires `_andBool_`(isLValue(K0),isOperand(K1)) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2951
	// source: ? @?
	// {| rule isSHA3Inst(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2951, "{| rule isSHA3Inst(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXuXslashIntXuXuINT(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: INT.tdiv
	lbl := m.LblXuXslashIntXuXuINT // _/Int__INT
	sort := m.SortInt
	if hookRes, hookErr := intHooks.tdiv(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook INT.tdiv, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXslashIntXuXuINT", args: []m.K{c1, c2}}
}

func evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	//hook: MAP.update
	lbl := m.LblXuXlsqbXuXltXhyphenXuXrsqbXuMAP // _[_<-_]_MAP
	sort := m.SortMap
	if hookRes, hookErr := mapHooks.update(c1, c2, c3, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook MAP.update, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXuXlsqbXuXltXhyphenXuXrsqbXuMAP", args: []m.K{c1, c2, c3}}
}

func evalXhashadjustedBitLengthAux(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2952
	// source: iele-gas.k @933
	// {| rule #adjustedBitLengthAux(_24)=>#token("0","Int") requires `_==Int_`(_24,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(069b14cd28e8c99d498f18b451fd2b4cf63bba493ceb24c719ff69dd96156292) contentStartColumn(10) contentStartLine(933) org.kframework.attributes.Location(Location(933,10,933,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if varXu24, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES
		eval3493, err3493 := evalXuXeqXeqIntXu( // `_==Int_`(_24,#token("0","Int"))
			varXu24,
			/* rhs KToken */ m.NewIntFromString("0"),
			config, -1)
		if err3493 != nil {
			return m.NoResult, err3493
		}
		if m.IsTrue(eval3493) {
			// RHS
			traceRuleApply("FUNC", 2952, "{| rule #adjustedBitLengthAux(_24)=>#token(\"0\",\"Int\") requires `_==Int_`(_24,#token(\"0\",\"Int\")) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(069b14cd28e8c99d498f18b451fd2b4cf63bba493ceb24c719ff69dd96156292) contentStartColumn(10) contentStartLine(933) org.kframework.attributes.Location(Location(933,10,933,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return /* rhs KToken */ m.NewIntFromString("0"), nil
		}
	}

	// rule #2953
	// source: iele-gas.k @934
	// {| rule #adjustedBitLengthAux(N)=>log2Int(N) requires isInt(N) ensures #token("true","Bool") [UNIQUE_ID(0ccd3058d820e8a7ff0e4976631eecefdec996261503ab52e1206d13c57c47d3) contentStartColumn(10) contentStartLine(934) org.kframework.attributes.Location(Location(934,10,934,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}
	// LHS
	if varN, t := c.(*m.Int); t { // lhs KVariable with hook:INT.Int
		// REQUIRES precomputed isInt(N)
		// RHS
		traceRuleApply("FUNC", 2953, "{| rule #adjustedBitLengthAux(N)=>log2Int(N) requires isInt(N) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(0ccd3058d820e8a7ff0e4976631eecefdec996261503ab52e1206d13c57c47d3) contentStartColumn(10) contentStartLine(934) org.kframework.attributes.Location(Location(934,10,934,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K) owise()] |}")
		eval3494, err3494 := evalLog2Int( // log2Int(N)
			varN,
			config, -1)
		if err3494 != nil {
			return m.NoResult, err3494
		}
		return eval3494, nil
	}

	return m.NoResult, &stuckError{funcName: "evalXhashadjustedBitLengthAux", args: []m.K{c}}
}

func evalGetKLabel(c m.K, config m.K, guard int) (m.K, error) {
	//hook: KREFLECTION.getKLabel
	lbl := m.LblGetKLabel // getKLabel
	sort := m.SortKItem
	if hookRes, hookErr := kreflectionHooks.getKLabel(c, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook KREFLECTION.getKLabel, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalGetKLabel", args: []m.K{c}}
}

func evalG0call(c1 m.K, c2 m.K, c3 m.K, config m.K, guard int) (m.K, error) {
	// rule #2954
	// source: iele-gas.k @818
	// {| rule `G0call`(SCHED,FUNC,ARGS)=>`G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS)),#token("192","Int"))),#token("false","Bool")) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInts(ARGS)),isString(FUNC)) ensures #token("true","Bool") [UNIQUE_ID(2fceb62402e72f8a173b68590fb6846fd08bc1dc0490d3703eebbdf57e20ecba) contentStartColumn(10) contentStartLine(818) org.kframework.attributes.Location(Location(818,10,818,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varSCHED := c1 // lhs KVariable SCHED
		if varFUNC, t := c2.(*m.String); t { // lhs KVariable with hook:STRING.String
			varARGS := c3 // lhs KVariable ARGS
			// REQUIRES
			eval3495, err3495 := evalIsSchedule( // isSchedule(SCHED)
				varSCHED,
				config, -1)
			if err3495 != nil {
				return m.NoResult, err3495
			}
			eval3496, err3496 := evalIsInts( // isInts(ARGS)
				varARGS,
				config, -1)
			if err3496 != nil {
				return m.NoResult, err3496
			}
			if (m.IsTrue(eval3495)) &&
			   (m.IsTrue(eval3496)) /* && */ /* rhs precomputed isString(FUNC) */  {
				// RHS
				traceRuleApply("FUNC", 2954, "{| rule `G0call`(SCHED,FUNC,ARGS)=>`G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS)),#token(\"192\",\"Int\"))),#token(\"false\",\"Bool\")) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isInts(ARGS)),isString(FUNC)) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(2fceb62402e72f8a173b68590fb6846fd08bc1dc0490d3703eebbdf57e20ecba) contentStartColumn(10) contentStartLine(818) org.kframework.attributes.Location(Location(818,10,818,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
				eval3501, err3501 := evalXhashrlpEncodeString( // #rlpEncodeString(FUNC)
					varFUNC,
					config, -1)
				if err3501 != nil {
					return m.NoResult, err3501
				}
				eval3502, err3502 := evalRlpEncodeInts( // rlpEncodeInts(ARGS)
					varARGS,
					config, -1)
				if err3502 != nil {
					return m.NoResult, err3502
				}
				eval3500, err3500 := evalXuXplusStringXuXuSTRING( // `_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS))
					eval3501,
					eval3502,
					config, -1)
				if err3500 != nil {
					return m.NoResult, err3500
				}
				eval3499, err3499 := evalXhashrlpEncodeLength( // #rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS)),#token("192","Int"))
					eval3500,
					/* rhs KToken */ m.NewIntFromString("192"),
					config, -1)
				if err3499 != nil {
					return m.NoResult, err3499
				}
				eval3498, err3498 := evalXhashparseByteStackRaw( // #parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS)),#token("192","Int")))
					eval3499,
					config, -1)
				if err3498 != nil {
					return m.NoResult, err3498
				}
				eval3497, err3497 := evalG0aux( // `G0aux`(SCHED,#parseByteStackRaw(#rlpEncodeLength(`_+String__STRING`(#rlpEncodeString(FUNC),rlpEncodeInts(ARGS)),#token("192","Int"))),#token("false","Bool"))
					varSCHED,
					eval3498,
					/* rhs KToken */ m.BoolFalse,
					config, -1)
				if err3497 != nil {
					return m.NoResult, err3497
				}
				return eval3497, nil
			}
		}
	}

	return m.NoResult, &stuckError{funcName: "evalG0call", args: []m.K{c1, c2, c3}}
}

func evalIsLabelsCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2955
	// source: ? @?
	// {| rule isLabelsCell(`<labels>`(K0))=>#token("true","Bool") requires isSet(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXltlabelsXgt && len(kapp0.List) == 1 { // `<labels>`(K0)
		if varK0, t := kapp0.List[0].(*m.Set); t && varK0.Sort == m.SortSet { // lhs KVariable with hook:SET.Set
			// REQUIRES precomputed isSet(K0)
			// RHS
			traceRuleApply("FUNC", 2955, "{| rule isLabelsCell(`<labels>`(K0))=>#token(\"true\",\"Bool\") requires isSet(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2956
	// source: ? @?
	// {| rule isLabelsCell(#KToken(#token("LabelsCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortLabelsCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2956, "{| rule isLabelsCell(#KToken(#token(\"LabelsCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2957
	// source: ? @?
	// {| rule isLabelsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2957, "{| rule isLabelsCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalXhashseekEndXlparenXuXcommaXuXrparenXuKXhyphenIO(c1 m.K, c2 m.K, config m.K, guard int) (m.K, error) {
	//hook: IO.seekEnd
	lbl := m.LblXhashseekEndXlparenXuXcommaXuXrparenXuKXhyphenIO // #seekEnd(_,_)_K-IO
	sort := m.SortK
	if hookRes, hookErr := ioHooks.seekEnd(c1, c2, lbl, sort, config); hookErr == nil {
		return hookRes, nil
	} else if _, isNotImpl := hookErr.(*hookNotImplementedError); isNotImpl  {
		warn(" Call to hook IO.seekEnd, which is not implemented.")
	} else {
		return m.NoResult, hookErr
	}

	return m.NoResult, &stuckError{funcName: "evalXhashseekEndXlparenXuXcommaXuXrparenXuKXhyphenIO", args: []m.K{c1, c2}}
}

func evalIsTxOrderCell(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2958
	// source: ? @?
	// {| rule isTxOrderCell(`<txOrder>`(K0))=>#token("true","Bool") requires isList(K0) ensures #token("true","Bool") [] |}
	// LHS
	if kapp0, t := c.(*m.KApply); t && kapp0.Label == m.LblXlttxOrderXgt && len(kapp0.List) == 1 { // `<txOrder>`(K0)
		if varK0, t := kapp0.List[0].(*m.List); t && varK0.Sort == m.SortList { // lhs KVariable with hook:LIST.List
			// REQUIRES precomputed isList(K0)
			// RHS
			traceRuleApply("FUNC", 2958, "{| rule isTxOrderCell(`<txOrder>`(K0))=>#token(\"true\",\"Bool\") requires isList(K0) ensures #token(\"true\",\"Bool\") [] |}")
			return /* rhs KToken */ m.BoolTrue, nil
		}
	}

	// rule #2959
	// source: ? @?
	// {| rule isTxOrderCell(#KToken(#token("TxOrderCell","KString"),_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [] |}
	// LHS
	if kt0, t := c.(*m.KToken); t && kt0.Sort == m.SortTxOrderCell { // lhs KApply #KToken
		// _ := kt0.Value // lhs KVariable _
		// RHS
		traceRuleApply("FUNC", 2959, "{| rule isTxOrderCell(#KToken(#token(\"TxOrderCell\",\"KString\"),_))=>#token(\"true\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [] |}")
		return /* rhs KToken */ m.BoolTrue, nil
	}

	// rule #2960
	// source: ? @?
	// {| rule isTxOrderCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		doNothing(c) // varK := c // lhs KVariable not used
		// RHS
		traceRuleApply("FUNC", 2960, "{| rule isTxOrderCell(K)=>#token(\"false\",\"Bool\") requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [owise()] |}")
		return /* rhs KToken */ m.BoolFalse, nil
	}

}

func evalGetIeleName(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2961
	// source: data.k @123
	// {| rule getIeleName(X)=>X requires isIeleName(X) ensures #token("true","Bool") [UNIQUE_ID(62faab74617f6bb678b01b17433dd8e0643cd59bc8991de4ac90215d04b3785f) contentStartColumn(10) contentStartLine(123) org.kframework.attributes.Location(Location(123,10,123,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	{ // scoping block, to avoid variable name collisions
		varX := c // lhs KVariable X
		// REQUIRES
		eval3503, err3503 := evalIsIeleName( // isIeleName(X)
			varX,
			config, -1)
		if err3503 != nil {
			return m.NoResult, err3503
		}
		if m.IsTrue(eval3503) {
			// RHS
			traceRuleApply("FUNC", 2961, "{| rule getIeleName(X)=>X requires isIeleName(X) ensures #token(\"true\",\"Bool\") [UNIQUE_ID(62faab74617f6bb678b01b17433dd8e0643cd59bc8991de4ac90215d04b3785f) contentStartColumn(10) contentStartLine(123) org.kframework.attributes.Location(Location(123,10,123,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/data.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
			return varX, nil
		}
	}

	return m.NoResult, &stuckError{funcName: "evalGetIeleName", args: []m.K{c}}
}

// ANYWHERE
func evalXhashappliedRule(c m.K, config m.K, guard int) (m.K, error) {
	// rule #2962
	// source: domains.k @1324
	// {| rule #appliedRule(#token("regular","#RuleTag"))=>#applyRule(#token("regular","#RuleTag")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(db36df80d81933bf54225a2f5d430e25be7301e6572306f36e557d81b5d836ad) anywhere() contentStartColumn(10) contentStartLine(1324) org.kframework.attributes.Location(Location(1324,10,1324,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
	// LHS
	if c.Equals(&m.KToken{Sort: m.SortXhashRuleTag, Value: "regular"}) { // #token("regular","#RuleTag")
		// RHS
		traceRuleApply("ANYW", 2962, "{| rule #appliedRule(#token(\"regular\",\"#RuleTag\"))=>#applyRule(#token(\"regular\",\"#RuleTag\")) requires #token(\"true\",\"Bool\") ensures #token(\"true\",\"Bool\") [UNIQUE_ID(db36df80d81933bf54225a2f5d430e25be7301e6572306f36e557d81b5d836ad) anywhere() contentStartColumn(10) contentStartLine(1324) org.kframework.attributes.Location(Location(1324,10,1324,32)) org.kframework.attributes.Source(Source(/home/andreim/elrond/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}")
		return &m.KApply{Label: m.LblXhashapplyRule, List: []m.K{ // as-is #applyRule
			/* rhs KToken */ &m.KToken{Sort: m.SortXhashRuleTag, Value: "regular"},
		}}, nil
	}

	lbl := m.LblXhashappliedRule // #appliedRule
	return &m.KApply{Label: lbl, List: []m.K{c}}, nil
}

