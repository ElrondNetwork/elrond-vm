// File generated by the K Framework Go backend. Timestamp: 2019-08-13 18:53:01.019

package ieletestinginterpreter 

import (
	m "github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-testing-kompiled/ieletestingmodel"
)

func (i *Interpreter) step(c m.KReference) (m.KReference, error) {
	config := c
	matched := false
	v := i.stepTempVars
	bv := i.stepTempBoolVars
	// all rules: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
	if c&kapplyMatchMask == kapplyMatchLblXltgeneratedTopXgt9 { // `<generatedTop>`(`<k>`(`#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))~>DotVar1),`<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST),_0,_1,_2,_3,_4,_5,_6)
		v[0] = i.Model.KApplyArg(c, 0)
		if v[0]&kapplyMatchMask == kapplyMatchLblXltkXgt1 { // `<k>`(`#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))~>DotVar1)
			v[1] = i.Model.KApplyArg(v[0], 0)
			// rules: 1, 3, 4, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 85, 86, 87, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 170, 174, 176, 177, 178, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 206, 208, 210, 211, 212, 213, 215, 217, 218, 219, 220, 224, 225, 227, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 247, 249, 250, 252, 253, 254, 255, 257, 259, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 319, 321, 322, 323, 324, 325, 327, 329, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 345, 347, 349, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 514, 517, 519, 520, 522, 523, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 553, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566
			if v[1]>>refTypeShift != refEmptyKseqTypeAsUint { // `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))~>DotVar1
				_, v[2], v[3] = i.Model.KSequenceSplitHeadTail(v[1]) // `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W)) ~> ...
				// rules: 1, 9, 12, 16, 19, 24, 25, 33, 34, 56, 59, 61, 66, 70, 76, 78, 81, 85, 91, 107, 108, 110, 118, 119, 131, 136, 137, 141, 142, 152, 166, 177, 186, 206, 234, 236, 252, 255, 262, 264, 267, 272, 283, 287, 288, 297, 298, 300, 301, 303, 304, 308, 315, 324, 325, 329, 337, 340, 341, 349, 365, 369, 370, 373, 378, 385, 395, 397, 399, 409, 414, 415, 423, 426, 427, 451, 454, 455, 457, 462, 466, 472, 474, 480, 486, 497, 526, 539, 542, 548, 561
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexecXuXuIELEXhyphenINFRASTRUCTURE1 { // `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 1, 472
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=bswap_,__IELE-COMMON`(REG,WIDTH,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 1
						// KVariable WIDTH = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #1
											// source: iele.k @847
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(f80a276375ba3738dc3bde634a141aeba43a9605a80bcdb106472b0505daf80d) contentStartColumn(10) contentStartLine(847) org.kframework.attributes.Location(Location(847,10,847,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int")))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH))
												bv[1] = /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsOperand( // isOperand(WIDTH)
														v[6] /*WIDTH*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W,#token("0","Int"))
														v[7] /*W*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS1(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 472
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #472
												// source: iele.k @846
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,bswap(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isInt(WIDTH)),`_>=Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6ef53ebd089962b557ec5a88d14e4361df066db652d1e20692c437fd8f0d93cc) contentStartColumn(10) contentStartLine(846) org.kframework.attributes.Location(Location(846,10,846,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(WIDTH) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W,#token("0","Int"))
															v[7] /*W*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS472(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 9
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mul_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #9
												// source: iele.k @825
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mul_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_*Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(6553027c141100523cf3c2796b57d00993623af219530d8a9105c14b8cc3dd4b) contentStartColumn(10) contentStartLine(825) org.kframework.attributes.Location(Location(825,10,825,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS9(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 12, 324
					if v[4]&kapplyMatchMask == kapplyMatchLblRIP160XuIELEXhyphenPRECOMPILED0 { // `RIP160_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// rule: 12
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable DATA = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																		v[32] = i.Model.KApplyArg(v[20], 6)
																		// KVariable _5 = v[32]
																		v[33] = i.Model.KApplyArg(v[20], 7)
																		// KVariable _6 = v[33]
																		v[34] = i.Model.KApplyArg(v[20], 8)
																		// KVariable _7 = v[34]
																		v[35] = i.Model.KApplyArg(v[20], 9)
																		// KVariable _8 = v[35]
																		v[36] = i.Model.KApplyArg(v[20], 10)
																		// KVariable _9 = v[36]
																		v[37] = i.Model.KApplyArg(v[20], 11)
																		// KVariable _10 = v[37]
																		v[38] = i.Model.KApplyArg(v[20], 12)
																		// KVariable _11 = v[38]
																		v[39] = i.Model.KApplyArg(v[20], 13)
																		// KVariable _12 = v[39]
																		v[40] = i.Model.KApplyArg(v[20], 14)
																		// KVariable _13 = v[40]
																		v[41] = i.Model.KApplyArg(v[15], 5)
																		// KVariable _18 = v[41]
																		v[42] = i.Model.KApplyArg(v[15], 6)
																		// KVariable _19 = v[42]
																		v[43] = i.Model.KApplyArg(v[15], 7)
																		// KVariable _20 = v[43]
																		v[44] = i.Model.KApplyArg(v[15], 8)
																		// KVariable _21 = v[44]
																		v[45] = i.Model.KApplyArg(v[15], 9)
																		// KVariable _22 = v[45]
																		v[46] = i.Model.KApplyArg(v[15], 10)
																		// KVariable _23 = v[46]
																		v[47] = i.Model.KApplyArg(v[15], 11)
																		// KVariable _24 = v[47]
																		v[48] = i.Model.KApplyArg(v[15], 12)
																		// KVariable _25 = v[48]
																		v[49] = i.Model.KApplyArg(v[15], 13)
																		// KVariable _26 = v[49]
																		v[50] = i.Model.KApplyArg(v[15], 14)
																		// KVariable _27 = v[50]
																		v[51] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[51]
																		// rule #12
																		// source: iele.k @1665
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`RIP160_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(5a108c08d985500bee656abcee5cad9dd7bbc64bf4dd64a989df31dc4c21abaa) contentStartColumn(10) contentStartLine(1665) org.kframework.attributes.Location(Location(1665,10,1667,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))))
																			v[52], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(LEN,#token("0","Int"))
																				v[28] /*LEN*/,
																				/* rhs KToken */ m.IntZero,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))
																			bv[0] = m.IsTrue(v[52])
																			if bv[0] {
																				v[53], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(DATA,#token("0","Int"))
																					v[30] /*DATA*/,
																					/* rhs KToken */ m.IntZero,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[53])
																			}
																			if /* rhs precomputed isInt(LEN) && isInt(DATA) */ /* && */ !(bv[0]) {
																				// RHS
																				return i.stepRHS12(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										// rule: 324
										// KVariable _27 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_124),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[16] = i.Model.KApplyArg(v[15], 0)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_124)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _124 = v[17]
												v[18] = i.Model.KApplyArg(v[15], 1)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[15], 2)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[15], 3)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[15], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
															v[29] = i.Model.KApplyArg(v[28], 0)
															if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable LEN = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																if v[30]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																	v[31] = i.Model.KApplyArg(v[30], 0)
																	if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable DATA = v[31]
																		v[32] = i.Model.KApplyArg(v[30], 1)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																			v[33] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _5 = v[33]
																			v[34] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _6 = v[34]
																			v[35] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _7 = v[35]
																			v[36] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _8 = v[36]
																			v[37] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _9 = v[37]
																			v[38] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _10 = v[38]
																			v[39] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _11 = v[39]
																			v[40] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _12 = v[40]
																			v[41] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _13 = v[41]
																			v[42] = i.Model.KApplyArg(v[15], 5)
																			// KVariable _17 = v[42]
																			v[43] = i.Model.KApplyArg(v[15], 6)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[15], 7)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[15], 8)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[15], 9)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[15], 10)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[15], 11)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[15], 12)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[15], 13)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[15], 14)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(c, 8)
																			// KVariable _32 = v[52]
																			// rule #324
																			// source: iele.k @1660
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`RIP160_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_124=>operandList(#parseHexWord(`RipEmd160`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))),`.List{"operandList"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),isInts(_124)),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(93aab1bb7dc28b20a45077bfc902b3b054147043180d70dfb9cabf74a25dd18d) contentStartColumn(10) contentStartLine(1660) org.kframework.attributes.Location(Location(1660,10,1663,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_124)),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))
																				v[53], i.evalErr = i.evalIsInts( // isInts(_124)
																					v[17] /*_124*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_124)),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))
																				bv[0] = /* rhs precomputed isInt(LEN) && isInt(DATA) */ /* && */ m.IsTrue(v[53])
																				if bv[0] {
																					v[54], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(LEN,#token("0","Int"))
																						v[29] /*LEN*/,
																						/* rhs KToken */ m.IntZero,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))
																					bv[1] = m.IsTrue(v[54])
																					if bv[1] {
																						v[55], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(DATA,#token("0","Int"))
																							v[31] /*DATA*/,
																							/* rhs KToken */ m.IntZero,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[55])
																					}
																					bv[0] = bv[1]
																				}
																				if bv[0] {
																					// RHS
																					return i.stepRHS324(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 16, 56, 76, 119, 141, 142, 252, 297, 298, 325, 329, 378, 397, 462, 466, 480, 497, 561
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.origin","IeleName")),`.List{"operandList"}`(.KList))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rules: 16, 56, 76, 142, 252, 297, 298, 325, 329, 397, 462, 466, 480, 497, 561
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,`.List{"lvalueList"}`(.KList))
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable REG = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
								v[8] = i.Model.KApplyArg(v[4], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.origin","IeleName"))
									v[9] = i.Model.KApplyArg(v[8], 0)
									// rule: 16
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotorigin) { // #token("iele.origin","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,`<origin>`(ORG),_7,_8,_9,_10,_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																if v[29]&kapplyMatchMask == kapplyMatchLblXltoriginXgt1 { // `<origin>`(ORG)
																	v[30] = i.Model.KApplyArg(v[29], 0)
																	if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable ORG = v[30]
																		v[31] = i.Model.KApplyArg(v[21], 8)
																		// KVariable _7 = v[31]
																		v[32] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _8 = v[32]
																		v[33] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #16
																		// source: iele.k @916
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.origin","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,ORG)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,`<origin>`(ORG),_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(ORG)) ensures #token("true","Bool") [UNIQUE_ID(c58655d05872e057e91eded7e37db45c3cbc272e3d43f89c216251ed472f1dbf) contentStartColumn(10) contentStartLine(916) org.kframework.attributes.Location(Location(916,10,916,107)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(isLValue(REG),#token("true","Bool"))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if m.IsTrue(v[39]) /* && */ /* rhs precomputed isInt(ORG) */  {
																				// RHS
																				return i.stepRHS16(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 56
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotnumber) { // #token("iele.number","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(NUMB),_10,_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 8)
																// KVariable _8 = v[30]
																v[31] = i.Model.KApplyArg(v[21], 9)
																// KVariable _9 = v[31]
																v[32] = i.Model.KApplyArg(v[21], 10)
																if v[32]&kapplyMatchMask == kapplyMatchLblXltnumberXgt1 { // `<number>`(NUMB)
																	v[33] = i.Model.KApplyArg(v[32], 0)
																	if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable NUMB = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #56
																		// source: iele.k @912
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.number","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,NUMB)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,`<number>`(NUMB),_10,_11,_12,_13),_19) requires `_andBool_`(isInt(NUMB),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(91a8e76212c823088b3ab89718c36de6a47990d6fc250354d00e7405deea2641) contentStartColumn(10) contentStartLine(912) org.kframework.attributes.Location(Location(912,10,912,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(NUMB) */ /* && */ m.IsTrue(v[39]) {
																				// RHS
																				return i.stepRHS56(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 76
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgasprice) { // #token("iele.gasprice","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,`<gasPrice>`(GPRICE),_6,_7,_8,_9,_10,_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																if v[28]&kapplyMatchMask == kapplyMatchLblXltgasPriceXgt1 { // `<gasPrice>`(GPRICE)
																	v[29] = i.Model.KApplyArg(v[28], 0)
																	if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable GPRICE = v[29]
																		v[30] = i.Model.KApplyArg(v[21], 7)
																		// KVariable _6 = v[30]
																		v[31] = i.Model.KApplyArg(v[21], 8)
																		// KVariable _7 = v[31]
																		v[32] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _8 = v[32]
																		v[33] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #76
																		// source: iele.k @907
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gasprice","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,GPRICE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,`<gasPrice>`(GPRICE),_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(GPRICE),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(96784b9259bcdd238c364472a548013e59bc41f4fc2eedf998fb06d1c8d8bedb) contentStartColumn(10) contentStartLine(907) org.kframework.attributes.Location(Location(907,10,907,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(GPRICE) */ /* && */ m.IsTrue(v[39]) {
																				// RHS
																				return i.stepRHS76(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 142
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotaddress) { // #token("iele.address","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _30 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _31 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _32 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _14 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _15 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _16 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _17 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	// KVariable _0 = v[27]
																	v[28] = i.Model.KApplyArg(v[26], 1)
																	// KVariable _1 = v[28]
																	v[29] = i.Model.KApplyArg(v[26], 2)
																	// KVariable _2 = v[29]
																	v[30] = i.Model.KApplyArg(v[26], 3)
																	if v[30]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																		v[31] = i.Model.KApplyArg(v[30], 0)
																		if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable ACCT = v[31]
																			v[32] = i.Model.KApplyArg(v[26], 4)
																			// KVariable _3 = v[32]
																			v[33] = i.Model.KApplyArg(v[26], 5)
																			// KVariable _4 = v[33]
																			v[34] = i.Model.KApplyArg(v[26], 6)
																			// KVariable _5 = v[34]
																			v[35] = i.Model.KApplyArg(v[26], 7)
																			// KVariable _6 = v[35]
																			v[36] = i.Model.KApplyArg(v[26], 8)
																			// KVariable _7 = v[36]
																			v[37] = i.Model.KApplyArg(v[26], 9)
																			// KVariable _8 = v[37]
																			v[38] = i.Model.KApplyArg(v[26], 10)
																			// KVariable _9 = v[38]
																			v[39] = i.Model.KApplyArg(v[26], 11)
																			// KVariable _10 = v[39]
																			v[40] = i.Model.KApplyArg(v[26], 12)
																			// KVariable _11 = v[40]
																			v[41] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _12 = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _13 = v[42]
																			v[43] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(c, 8)
																			// KVariable _33 = v[53]
																			// rule #142
																			// source: iele.k @915
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.address","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,ACCT)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(ACCT),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(f9465e1409974911d2b12b6baedf54db4a94872fed13f2a97ae3f7940ce65158) contentStartColumn(10) contentStartLine(915) org.kframework.attributes.Location(Location(915,10,915,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																				v[54], i.evalErr = i.evalIsLValue( // isLValue(REG)
																					v[6] /*REG*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[54]) {
																					// RHS
																					return i.stepRHS142(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 252
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotbeneficiary) { // #token("iele.beneficiary","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(CB),_8,_9,_10,_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 8)
																if v[30]&kapplyMatchMask == kapplyMatchLblXltbeneficiaryXgt1 { // `<beneficiary>`(CB)
																	v[31] = i.Model.KApplyArg(v[30], 0)
																	if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable CB = v[31]
																		v[32] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _8 = v[32]
																		v[33] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #252
																		// source: iele.k @910
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.beneficiary","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,CB)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(CB),_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(CB)) ensures #token("true","Bool") [UNIQUE_ID(82534eb721c1ea3b0cfb9012dd5d2514eb2bdf8a97b5d4e63302c02f1f509086) contentStartColumn(10) contentStartLine(910) org.kframework.attributes.Location(Location(910,10,910,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(isLValue(REG),#token("true","Bool"))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if m.IsTrue(v[39]) /* && */ /* rhs precomputed isInt(CB) */  {
																				// RHS
																				return i.stepRHS252(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 297
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcodesize) { // #token("iele.codesize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _33 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _34 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _35 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _36 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _37 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,_2,_3,`<programSize>`(SIZE),_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _19 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _20 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _21 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _22 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,_2,_3,`<programSize>`(SIZE),_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,_2,_3,`<programSize>`(SIZE),_4)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		// KVariable _0 = v[28]
																		v[29] = i.Model.KApplyArg(v[27], 1)
																		// KVariable _1 = v[29]
																		v[30] = i.Model.KApplyArg(v[27], 2)
																		// KVariable _2 = v[30]
																		v[31] = i.Model.KApplyArg(v[27], 3)
																		// KVariable _3 = v[31]
																		v[32] = i.Model.KApplyArg(v[27], 4)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXltprogramSizeXgt1 { // `<programSize>`(SIZE)
																			v[33] = i.Model.KApplyArg(v[32], 0)
																			if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable SIZE = v[33]
																				v[34] = i.Model.KApplyArg(v[27], 5)
																				// KVariable _4 = v[34]
																				v[35] = i.Model.KApplyArg(v[26], 1)
																				// KVariable _5 = v[35]
																				v[36] = i.Model.KApplyArg(v[26], 2)
																				// KVariable _6 = v[36]
																				v[37] = i.Model.KApplyArg(v[26], 3)
																				// KVariable _7 = v[37]
																				v[38] = i.Model.KApplyArg(v[26], 4)
																				// KVariable _8 = v[38]
																				v[39] = i.Model.KApplyArg(v[26], 5)
																				// KVariable _9 = v[39]
																				v[40] = i.Model.KApplyArg(v[26], 6)
																				// KVariable _10 = v[40]
																				v[41] = i.Model.KApplyArg(v[26], 7)
																				// KVariable _11 = v[41]
																				v[42] = i.Model.KApplyArg(v[26], 8)
																				// KVariable _12 = v[42]
																				v[43] = i.Model.KApplyArg(v[26], 9)
																				// KVariable _13 = v[43]
																				v[44] = i.Model.KApplyArg(v[26], 10)
																				// KVariable _14 = v[44]
																				v[45] = i.Model.KApplyArg(v[26], 11)
																				// KVariable _15 = v[45]
																				v[46] = i.Model.KApplyArg(v[26], 12)
																				// KVariable _16 = v[46]
																				v[47] = i.Model.KApplyArg(v[26], 13)
																				// KVariable _17 = v[47]
																				v[48] = i.Model.KApplyArg(v[26], 14)
																				// KVariable _18 = v[48]
																				v[49] = i.Model.KApplyArg(v[21], 5)
																				// KVariable _23 = v[49]
																				v[50] = i.Model.KApplyArg(v[21], 6)
																				// KVariable _24 = v[50]
																				v[51] = i.Model.KApplyArg(v[21], 7)
																				// KVariable _25 = v[51]
																				v[52] = i.Model.KApplyArg(v[21], 8)
																				// KVariable _26 = v[52]
																				v[53] = i.Model.KApplyArg(v[21], 9)
																				// KVariable _27 = v[53]
																				v[54] = i.Model.KApplyArg(v[21], 10)
																				// KVariable _28 = v[54]
																				v[55] = i.Model.KApplyArg(v[21], 11)
																				// KVariable _29 = v[55]
																				v[56] = i.Model.KApplyArg(v[21], 12)
																				// KVariable _30 = v[56]
																				v[57] = i.Model.KApplyArg(v[21], 13)
																				// KVariable _31 = v[57]
																				v[58] = i.Model.KApplyArg(v[21], 14)
																				// KVariable _32 = v[58]
																				v[59] = i.Model.KApplyArg(c, 8)
																				// KVariable _38 = v[59]
																				// rule #297
																				// source: iele.k @921
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.codesize","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,SIZE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,_2,_3,`<programSize>`(SIZE),_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(isLValue(REG),isInt(SIZE)) ensures #token("true","Bool") [UNIQUE_ID(2d5808daa62fe43520501b3647ea3c8e69e0c3358d857487ac6aef18d16094fe) contentStartColumn(10) contentStartLine(921) org.kframework.attributes.Location(Location(921,10,921,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES `_andBool_`(isLValue(REG),#token("true","Bool"))
																					v[60], i.evalErr = i.evalIsLValue( // isLValue(REG)
																						v[6] /*REG*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					if m.IsTrue(v[60]) /* && */ /* rhs precomputed isInt(SIZE) */  {
																						// RHS
																						return i.stepRHS297(v, bv, config)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 298
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotdifficulty) { // #token("iele.difficulty","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<difficulty>`(DIFF),_9,_10,_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 8)
																// KVariable _8 = v[30]
																v[31] = i.Model.KApplyArg(v[21], 9)
																if v[31]&kapplyMatchMask == kapplyMatchLblXltdifficultyXgt1 { // `<difficulty>`(DIFF)
																	v[32] = i.Model.KApplyArg(v[31], 0)
																	if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable DIFF = v[32]
																		v[33] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #298
																		// source: iele.k @913
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.difficulty","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,DIFF)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<difficulty>`(DIFF),_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(DIFF),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(23f370691fd45d7be8dde5e40c284c2b4eac68bb000d49823d828c4832586986) contentStartColumn(10) contentStartLine(913) org.kframework.attributes.Location(Location(913,10,913,118)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(DIFF) */ /* && */ m.IsTrue(v[39]) {
																				// RHS
																				return i.stepRHS298(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 325
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcaller) { // #token("iele.caller","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _30 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _31 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _32 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,`<caller>`(CL),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _14 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _15 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _16 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _17 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,`<caller>`(CL),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	// KVariable _0 = v[27]
																	v[28] = i.Model.KApplyArg(v[26], 1)
																	// KVariable _1 = v[28]
																	v[29] = i.Model.KApplyArg(v[26], 2)
																	// KVariable _2 = v[29]
																	v[30] = i.Model.KApplyArg(v[26], 3)
																	// KVariable _3 = v[30]
																	v[31] = i.Model.KApplyArg(v[26], 4)
																	if v[31]&kapplyMatchMask == kapplyMatchLblXltcallerXgt1 { // `<caller>`(CL)
																		v[32] = i.Model.KApplyArg(v[31], 0)
																		if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable CL = v[32]
																			v[33] = i.Model.KApplyArg(v[26], 5)
																			// KVariable _4 = v[33]
																			v[34] = i.Model.KApplyArg(v[26], 6)
																			// KVariable _5 = v[34]
																			v[35] = i.Model.KApplyArg(v[26], 7)
																			// KVariable _6 = v[35]
																			v[36] = i.Model.KApplyArg(v[26], 8)
																			// KVariable _7 = v[36]
																			v[37] = i.Model.KApplyArg(v[26], 9)
																			// KVariable _8 = v[37]
																			v[38] = i.Model.KApplyArg(v[26], 10)
																			// KVariable _9 = v[38]
																			v[39] = i.Model.KApplyArg(v[26], 11)
																			// KVariable _10 = v[39]
																			v[40] = i.Model.KApplyArg(v[26], 12)
																			// KVariable _11 = v[40]
																			v[41] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _12 = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _13 = v[42]
																			v[43] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(c, 8)
																			// KVariable _33 = v[53]
																			// rule #325
																			// source: iele.k @917
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.caller","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,CL)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,`<caller>`(CL),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(CL),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(26f36059d7c34b23661f483a20c80fb24a7cbf69224addea5503cc4a3cb65491) contentStartColumn(10) contentStartLine(917) org.kframework.attributes.Location(Location(917,10,917,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																				v[54], i.evalErr = i.evalIsLValue( // isLValue(REG)
																					v[6] /*REG*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(CL) */ /* && */ m.IsTrue(v[54]) {
																					// RHS
																					return i.stepRHS325(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 329
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgaslimit) { // #token("iele.gaslimit","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gasLimit>`(GLIMIT),_11,_12,_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 8)
																// KVariable _8 = v[30]
																v[31] = i.Model.KApplyArg(v[21], 9)
																// KVariable _9 = v[31]
																v[32] = i.Model.KApplyArg(v[21], 10)
																// KVariable _10 = v[32]
																v[33] = i.Model.KApplyArg(v[21], 11)
																if v[33]&kapplyMatchMask == kapplyMatchLblXltgasLimitXgt1 { // `<gasLimit>`(GLIMIT)
																	v[34] = i.Model.KApplyArg(v[33], 0)
																	if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable GLIMIT = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #329
																		// source: iele.k @908
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gaslimit","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,GLIMIT)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,`<gasLimit>`(GLIMIT),_11,_12,_13),_19) requires `_andBool_`(isLValue(REG),isInt(GLIMIT)) ensures #token("true","Bool") [UNIQUE_ID(c6f0541c9bbcf8e72c9b10bc2babd2ad3aa2dccc37b1a2123a2038fbe628e8cf) contentStartColumn(10) contentStartLine(908) org.kframework.attributes.Location(Location(908,10,908,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(isLValue(REG),#token("true","Bool"))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if m.IsTrue(v[39]) /* && */ /* rhs precomputed isInt(GLIMIT) */  {
																				// RHS
																				return i.stepRHS329(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 397
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcallvalue) { // #token("iele.callvalue","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _30 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _31 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _32 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,`<callValue>`(CV),_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _14 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _15 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _16 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _17 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,`<callValue>`(CV),_6,_7,_8,_9,_10,_11,_12,_13)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	// KVariable _0 = v[27]
																	v[28] = i.Model.KApplyArg(v[26], 1)
																	// KVariable _1 = v[28]
																	v[29] = i.Model.KApplyArg(v[26], 2)
																	// KVariable _2 = v[29]
																	v[30] = i.Model.KApplyArg(v[26], 3)
																	// KVariable _3 = v[30]
																	v[31] = i.Model.KApplyArg(v[26], 4)
																	// KVariable _4 = v[31]
																	v[32] = i.Model.KApplyArg(v[26], 5)
																	// KVariable _5 = v[32]
																	v[33] = i.Model.KApplyArg(v[26], 6)
																	if v[33]&kapplyMatchMask == kapplyMatchLblXltcallValueXgt1 { // `<callValue>`(CV)
																		v[34] = i.Model.KApplyArg(v[33], 0)
																		if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable CV = v[34]
																			v[35] = i.Model.KApplyArg(v[26], 7)
																			// KVariable _6 = v[35]
																			v[36] = i.Model.KApplyArg(v[26], 8)
																			// KVariable _7 = v[36]
																			v[37] = i.Model.KApplyArg(v[26], 9)
																			// KVariable _8 = v[37]
																			v[38] = i.Model.KApplyArg(v[26], 10)
																			// KVariable _9 = v[38]
																			v[39] = i.Model.KApplyArg(v[26], 11)
																			// KVariable _10 = v[39]
																			v[40] = i.Model.KApplyArg(v[26], 12)
																			// KVariable _11 = v[40]
																			v[41] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _12 = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _13 = v[42]
																			v[43] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(c, 8)
																			// KVariable _33 = v[53]
																			// rule #397
																			// source: iele.k @918
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.callvalue","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,CV)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,`<callValue>`(CV),_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(CV),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(c17530e6b765da83d3c660ec66c8106c2eb0ee213019031734fdaaf5c14017fe) contentStartColumn(10) contentStartLine(918) org.kframework.attributes.Location(Location(918,10,918,112)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																				v[54], i.evalErr = i.evalIsLValue( // isLValue(REG)
																					v[6] /*REG*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(CV) */ /* && */ m.IsTrue(v[54]) {
																					// RHS
																					return i.stepRHS397(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 462
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdottimestamp) { // #token("iele.timestamp","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _14 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _15 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _16 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _17 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _18 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,`<timestamp>`(TS),_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[21], 5)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 6)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 7)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 8)
																// KVariable _8 = v[30]
																v[31] = i.Model.KApplyArg(v[21], 9)
																// KVariable _9 = v[31]
																v[32] = i.Model.KApplyArg(v[21], 10)
																// KVariable _10 = v[32]
																v[33] = i.Model.KApplyArg(v[21], 11)
																// KVariable _11 = v[33]
																v[34] = i.Model.KApplyArg(v[21], 12)
																// KVariable _12 = v[34]
																v[35] = i.Model.KApplyArg(v[21], 13)
																if v[35]&kapplyMatchMask == kapplyMatchLblXlttimestampXgt1 { // `<timestamp>`(TS)
																	v[36] = i.Model.KApplyArg(v[35], 0)
																	if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable TS = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[37]
																		v[38] = i.Model.KApplyArg(c, 8)
																		// KVariable _19 = v[38]
																		// rule #462
																		// source: iele.k @911
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.timestamp","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,TS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,`<timestamp>`(TS),_13),_19) requires `_andBool_`(isLValue(REG),isInt(TS)) ensures #token("true","Bool") [UNIQUE_ID(5fb5601f3493276c92270fe002b7d252393032789a1221ae14b4d2c3a9ca9da3) contentStartColumn(10) contentStartLine(911) org.kframework.attributes.Location(Location(911,10,911,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(isLValue(REG),#token("true","Bool"))
																			v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[6] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if m.IsTrue(v[39]) /* && */ /* rhs precomputed isInt(TS) */  {
																				// RHS
																				return i.stepRHS462(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rules: 466, 480
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotblockhash) { // #token("iele.blockhash","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(N,`.List{"operandList"}`(.KList))
											v[11] = i.Model.KApplyArg(v[10], 0)
											// rule: 466
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable N = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
													// KVariable DotVar1 = v[3]
													v[13] = i.Model.KApplyArg(c, 1)
													if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[14] = i.Model.KApplyArg(v[13], 0)
														if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[17] = i.Model.KApplyArg(v[15], 0)
																if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[16]
																	v[18] = i.Model.KApplyArg(c, 2)
																	// KVariable _0 = v[18]
																	v[19] = i.Model.KApplyArg(c, 3)
																	// KVariable _1 = v[19]
																	v[20] = i.Model.KApplyArg(c, 4)
																	// KVariable _2 = v[20]
																	v[21] = i.Model.KApplyArg(c, 5)
																	// KVariable _3 = v[21]
																	v[22] = i.Model.KApplyArg(c, 6)
																	// KVariable _4 = v[22]
																	v[23] = i.Model.KApplyArg(c, 7)
																	// KVariable _5 = v[23]
																	v[24] = i.Model.KApplyArg(c, 8)
																	// KVariable _6 = v[24]
																	// rule #466
																	// source: iele-node.k @51
																	// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.blockhash","IeleName")),operandList(N,`.List{"operandList"}`(.KList))))=>`#load___IELE`(REG,#getBlockhash(N))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(N)),`_andBool_`(`_>=Int__INT`(N,#token("0","Int")),`_<Int__INT`(N,#token("256","Int")))) ensures #token("true","Bool") [UNIQUE_ID(1d5175b515d8beadf75cc3b29935063e4fd49c8f34cc14b8f61b947a28ec805f) contentStartColumn(10) contentStartLine(51) org.kframework.attributes.Location(Location(51,10,52,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_andBool_`(`_>=Int__INT`(N,#token("0","Int")),`_<Int__INT`(N,#token("256","Int"))))
																		v[25], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[6] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_andBool_`(`_>=Int__INT`(N,#token("0","Int")),`_<Int__INT`(N,#token("256","Int"))))
																		bv[0] = m.IsTrue(v[25]) /* && */ /* rhs precomputed isInt(N) */ 
																		if bv[0] {
																			v[26], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(N,#token("0","Int"))
																				v[11] /*N*/,
																				/* rhs KToken */ m.IntZero,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_>=Int__INT`(N,#token("0","Int")),`_<Int__INT`(N,#token("256","Int")))
																			bv[1] = m.IsTrue(v[26])
																			if bv[1] {
																				v[27], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(N,#token("256","Int"))
																					v[11] /*N*/,
																					/* rhs KToken */ constInt256,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[27])
																			}
																			bv[0] = bv[1]
																		}
																		if bv[0] {
																			// RHS
																			return i.stepRHS466(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
											// rule: 480
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable N = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
													// KVariable DotVar1 = v[3]
													v[13] = i.Model.KApplyArg(c, 1)
													if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[14] = i.Model.KApplyArg(v[13], 0)
														if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[17] = i.Model.KApplyArg(v[15], 0)
																if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[16]
																	v[18] = i.Model.KApplyArg(c, 2)
																	// KVariable _0 = v[18]
																	v[19] = i.Model.KApplyArg(c, 3)
																	// KVariable _1 = v[19]
																	v[20] = i.Model.KApplyArg(c, 4)
																	// KVariable _2 = v[20]
																	v[21] = i.Model.KApplyArg(c, 5)
																	// KVariable _3 = v[21]
																	v[22] = i.Model.KApplyArg(c, 6)
																	// KVariable _4 = v[22]
																	v[23] = i.Model.KApplyArg(c, 7)
																	// KVariable _5 = v[23]
																	v[24] = i.Model.KApplyArg(c, 8)
																	// KVariable _6 = v[24]
																	// rule #480
																	// source: iele-node.k @53
																	// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.blockhash","IeleName")),operandList(N,`.List{"operandList"}`(.KList))))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(N)),`_orBool__BOOL`(`_<Int__INT`(N,#token("0","Int")),`_>=Int__INT`(N,#token("256","Int")))) ensures #token("true","Bool") [UNIQUE_ID(b4dfd641cfbecc5ea951fa485937b0d94891b99181455591cc22c6d247cd502f) contentStartColumn(10) contentStartLine(53) org.kframework.attributes.Location(Location(53,10,54,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_orBool__BOOL`(`_<Int__INT`(N,#token("0","Int")),`_>=Int__INT`(N,#token("256","Int"))))
																		v[25], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[6] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_orBool__BOOL`(`_<Int__INT`(N,#token("0","Int")),`_>=Int__INT`(N,#token("256","Int"))))
																		bv[0] = m.IsTrue(v[25]) /* && */ /* rhs precomputed isInt(N) */ 
																		if bv[0] {
																			v[26], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(N,#token("0","Int"))
																				v[11] /*N*/,
																				/* rhs KToken */ m.IntZero,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_orBool__BOOL`(`_<Int__INT`(N,#token("0","Int")),`_>=Int__INT`(N,#token("256","Int")))
																			bv[1] = m.IsTrue(v[26])
																			if !bv[1] {
																				v[27], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(N,#token("256","Int"))
																					v[11] /*N*/,
																					/* rhs KToken */ constInt256,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[27])
																			}
																			bv[0] = bv[1]
																		}
																		if bv[0] {
																			// RHS
																			return i.stepRHS480(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 497
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgas) { // #token("iele.gas","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																v[19] = i.Model.KApplyArg(v[18], 0)
																// KVariable SCHED = v[19]
																v[20] = i.Model.KApplyArg(c, 5)
																// KVariable _30 = v[20]
																v[21] = i.Model.KApplyArg(c, 6)
																// KVariable _31 = v[21]
																v[22] = i.Model.KApplyArg(c, 7)
																if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																	v[23] = i.Model.KApplyArg(v[22], 0)
																	// KVariable _14 = v[23]
																	v[24] = i.Model.KApplyArg(v[22], 1)
																	// KVariable _15 = v[24]
																	v[25] = i.Model.KApplyArg(v[22], 2)
																	// KVariable _16 = v[25]
																	v[26] = i.Model.KApplyArg(v[22], 3)
																	// KVariable _17 = v[26]
																	v[27] = i.Model.KApplyArg(v[22], 4)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		// KVariable _0 = v[28]
																		v[29] = i.Model.KApplyArg(v[27], 1)
																		// KVariable _1 = v[29]
																		v[30] = i.Model.KApplyArg(v[27], 2)
																		// KVariable _2 = v[30]
																		v[31] = i.Model.KApplyArg(v[27], 3)
																		// KVariable _3 = v[31]
																		v[32] = i.Model.KApplyArg(v[27], 4)
																		// KVariable _4 = v[32]
																		v[33] = i.Model.KApplyArg(v[27], 5)
																		// KVariable _5 = v[33]
																		v[34] = i.Model.KApplyArg(v[27], 6)
																		// KVariable _6 = v[34]
																		v[35] = i.Model.KApplyArg(v[27], 7)
																		// KVariable _7 = v[35]
																		v[36] = i.Model.KApplyArg(v[27], 8)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[27], 9)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[27], 10)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[27], 11)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[27], 12)
																		if v[40]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																			v[41] = i.Model.KApplyArg(v[40], 0)
																			if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable GAVAIL = v[41]
																				v[42] = i.Model.KApplyArg(v[27], 13)
																				// KVariable _12 = v[42]
																				v[43] = i.Model.KApplyArg(v[27], 14)
																				// KVariable _13 = v[43]
																				v[44] = i.Model.KApplyArg(v[22], 5)
																				// KVariable _18 = v[44]
																				v[45] = i.Model.KApplyArg(v[22], 6)
																				// KVariable _19 = v[45]
																				v[46] = i.Model.KApplyArg(v[22], 7)
																				// KVariable _20 = v[46]
																				v[47] = i.Model.KApplyArg(v[22], 8)
																				// KVariable _21 = v[47]
																				v[48] = i.Model.KApplyArg(v[22], 9)
																				// KVariable _22 = v[48]
																				v[49] = i.Model.KApplyArg(v[22], 10)
																				// KVariable _23 = v[49]
																				v[50] = i.Model.KApplyArg(v[22], 11)
																				// KVariable _24 = v[50]
																				v[51] = i.Model.KApplyArg(v[22], 12)
																				// KVariable _25 = v[51]
																				v[52] = i.Model.KApplyArg(v[22], 13)
																				// KVariable _26 = v[52]
																				v[53] = i.Model.KApplyArg(v[22], 14)
																				// KVariable _27 = v[53]
																				v[54] = i.Model.KApplyArg(c, 8)
																				// KVariable _32 = v[54]
																				// rule #497
																				// source: iele.k @906
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gas","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,`_/Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,`<schedule>`(SCHED),_30,_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_32) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(30b6db8a6135f96655df4b4428a5143bc77b56e1130e0b81aae5cd2cafb1018e) contentStartColumn(10) contentStartLine(906) org.kframework.attributes.Location(Location(906,10,906,163)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),#token("true","Bool"))
																					v[55], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																						v[19] /*SCHED*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(isSchedule(SCHED),isLValue(REG))
																					bv[0] = m.IsTrue(v[55])
																					if bv[0] {
																						v[56], i.evalErr = i.evalIsLValue( // isLValue(REG)
																							v[6] /*REG*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[56])
																					}
																					if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																						// RHS
																						return i.stepRHS497(v, bv, config)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 561
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotmsize) { // #token("iele.msize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _30 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _31 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _32 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(MU),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _14 = v[22]
																v[23] = i.Model.KApplyArg(v[21], 1)
																// KVariable _15 = v[23]
																v[24] = i.Model.KApplyArg(v[21], 2)
																// KVariable _16 = v[24]
																v[25] = i.Model.KApplyArg(v[21], 3)
																// KVariable _17 = v[25]
																v[26] = i.Model.KApplyArg(v[21], 4)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(MU),_9,_10,_11,_12,_13)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	// KVariable _0 = v[27]
																	v[28] = i.Model.KApplyArg(v[26], 1)
																	// KVariable _1 = v[28]
																	v[29] = i.Model.KApplyArg(v[26], 2)
																	// KVariable _2 = v[29]
																	v[30] = i.Model.KApplyArg(v[26], 3)
																	// KVariable _3 = v[30]
																	v[31] = i.Model.KApplyArg(v[26], 4)
																	// KVariable _4 = v[31]
																	v[32] = i.Model.KApplyArg(v[26], 5)
																	// KVariable _5 = v[32]
																	v[33] = i.Model.KApplyArg(v[26], 6)
																	// KVariable _6 = v[33]
																	v[34] = i.Model.KApplyArg(v[26], 7)
																	// KVariable _7 = v[34]
																	v[35] = i.Model.KApplyArg(v[26], 8)
																	// KVariable _8 = v[35]
																	v[36] = i.Model.KApplyArg(v[26], 9)
																	if v[36]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(MU)
																		v[37] = i.Model.KApplyArg(v[36], 0)
																		if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable MU = v[37]
																			v[38] = i.Model.KApplyArg(v[26], 10)
																			// KVariable _9 = v[38]
																			v[39] = i.Model.KApplyArg(v[26], 11)
																			// KVariable _10 = v[39]
																			v[40] = i.Model.KApplyArg(v[26], 12)
																			// KVariable _11 = v[40]
																			v[41] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _12 = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _13 = v[42]
																			v[43] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(c, 8)
																			// KVariable _33 = v[53]
																			// rule #561
																			// source: iele.k @920
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.msize","IeleName")),`.List{"operandList"}`(.KList)))=>`#load___IELE`(REG,`_<<Int__INT`(MU,#token("3","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(MU),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(MU),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(792739833b8717497be12f56d2dda7ceb61c90ffbe4b9a0b44db78ecce7c494c) contentStartColumn(10) contentStartLine(920) org.kframework.attributes.Location(Location(920,10,920,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
																				v[54], i.evalErr = i.evalIsLValue( // isLValue(REG)
																					v[6] /*REG*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(MU) */ /* && */ m.IsTrue(v[54]) {
																					// RHS
																					return i.stepRHS561(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 119
						// KVariable _431 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _432 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _33 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _34 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _35 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _19 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _20 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _21 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _22 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
													v[24] = i.Model.KApplyArg(v[23], 0)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(LBLS)
															v[28] = i.Model.KApplyArg(v[27], 0)
															if v[28]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																// KVariable LBLS = v[28]
																v[29] = i.Model.KApplyArg(v[24], 3)
																// KVariable _2 = v[29]
																v[30] = i.Model.KApplyArg(v[24], 4)
																// KVariable _3 = v[30]
																v[31] = i.Model.KApplyArg(v[24], 5)
																// KVariable _4 = v[31]
																v[32] = i.Model.KApplyArg(v[23], 1)
																// KVariable _5 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 2)
																// KVariable _6 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 3)
																// KVariable _7 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 4)
																// KVariable _8 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 5)
																// KVariable _9 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 6)
																// KVariable _10 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 7)
																// KVariable _11 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 8)
																// KVariable _12 = v[39]
																v[40] = i.Model.KApplyArg(v[23], 9)
																// KVariable _13 = v[40]
																v[41] = i.Model.KApplyArg(v[23], 10)
																// KVariable _14 = v[41]
																v[42] = i.Model.KApplyArg(v[23], 11)
																// KVariable _15 = v[42]
																v[43] = i.Model.KApplyArg(v[23], 12)
																// KVariable _16 = v[43]
																v[44] = i.Model.KApplyArg(v[23], 13)
																// KVariable _17 = v[44]
																v[45] = i.Model.KApplyArg(v[23], 14)
																// KVariable _18 = v[45]
																v[46] = i.Model.KApplyArg(v[18], 5)
																// KVariable _23 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 6)
																// KVariable _24 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 7)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 8)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[18], 9)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(v[18], 10)
																// KVariable _28 = v[51]
																v[52] = i.Model.KApplyArg(v[18], 11)
																// KVariable _29 = v[52]
																v[53] = i.Model.KApplyArg(v[18], 12)
																// KVariable _30 = v[53]
																v[54] = i.Model.KApplyArg(v[18], 13)
																// KVariable _31 = v[54]
																v[55] = i.Model.KApplyArg(v[18], 14)
																// KVariable _32 = v[55]
																v[56] = i.Model.KApplyArg(c, 8)
																// KVariable _38 = v[56]
																// rule #119
																// source: iele.k @969
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_431,IDX,_432))=>`#exception__IELE-INFRASTRUCTURE`(#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isLValues(_431)),isOperands(_432)),isMap(LBLS)),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS))) ensures #token("true","Bool") [UNIQUE_ID(adbd20c26dd2110a7c488716e0a12d3b129c702fba4e9fc2c0b47ee7df0d8e7e) contentStartColumn(10) contentStartLine(969) org.kframework.attributes.Location(Location(969,10,971,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_431)),isOperands(_432)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS)))
																	v[57], i.evalErr = i.evalIsLValues( // isLValues(_431)
																		v[5] /*_431*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_431)),isOperands(_432))
																	bv[1] = /* rhs precomputed isInt(IDX) */ /* && */ m.IsTrue(v[57])
																	if bv[1] {
																		v[58], i.evalErr = i.evalIsOperands( // isOperands(_432)
																			v[7] /*_432*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[58])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_431)),isOperands(_432)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS)))
																	bv[0] = bv[1] /* && */ /* rhs precomputed isMap(LBLS) */ 
																	if bv[0] {
																		v[59], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LBLS)
																			v[6] /*IDX*/,
																			v[28] /*LBLS*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = !(m.IsTrue(v[59]))
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS119(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 141
						// KVariable _439 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.extcodesize","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotextcodesize) { // #token("iele.extcodesize","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(ACCT,`.List{"operandList"}`(.KList))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable ACCT = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _4 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _5 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _6 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _7 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _8 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _9 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
																v[23] = i.Model.KApplyArg(v[22], 0)
																if v[23]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
																	v[24] = i.Model.KApplyArg(v[23], 0)
																	if v[24]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																		// KVariable ACCTS = v[24]
																		v[25] = i.Model.KApplyArg(v[22], 1)
																		// KVariable _0 = v[25]
																		v[26] = i.Model.KApplyArg(v[22], 2)
																		// KVariable _1 = v[26]
																		v[27] = i.Model.KApplyArg(v[22], 3)
																		// KVariable _2 = v[27]
																		v[28] = i.Model.KApplyArg(v[22], 4)
																		// KVariable _3 = v[28]
																		// rule #141
																		// source: iele.k @1095
																		// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_439,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCT),isLValues(_439)),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(fdde56edab4ed900b2ba299bb7f007f1e1e8f2f1e79d9842eaf8eac906d008ef) contentStartColumn(10) contentStartLine(1095) org.kframework.attributes.Location(Location(1095,10,1097,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_439)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
																			v[29], i.evalErr = i.evalIsLValues( // isLValues(_439)
																				v[5] /*_439*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_439)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
																			bv[0] = /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[29]) /* && */ /* rhs precomputed isSet(ACCTS) */ 
																			if bv[0] {
																				v[30], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																					v[9] /*ACCT*/,
																					v[24] /*ACCTS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = !(m.IsTrue(v[30]))
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS141(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 378
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.balance","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotbalance) { // #token("iele.balance","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(ACCT,`.List{"operandList"}`(.KList))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable ACCT = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _4 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _5 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _6 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _7 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _8 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _9 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
																v[23] = i.Model.KApplyArg(v[22], 0)
																if v[23]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
																	v[24] = i.Model.KApplyArg(v[23], 0)
																	if v[24]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																		// KVariable ACCTS = v[24]
																		v[25] = i.Model.KApplyArg(v[22], 1)
																		// KVariable _0 = v[25]
																		v[26] = i.Model.KApplyArg(v[22], 2)
																		// KVariable _1 = v[26]
																		v[27] = i.Model.KApplyArg(v[22], 3)
																		// KVariable _2 = v[27]
																		v[28] = i.Model.KApplyArg(v[22], 4)
																		// KVariable _3 = v[28]
																		// rule #378
																		// source: iele.k @1076
																		// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(REG,`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCT),isLValues(REG)),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(574d0ae7af1be618a31938861c8b0656a4259f14bf3995db7321a9d7d40aa90d) contentStartColumn(10) contentStartLine(1076) org.kframework.attributes.Location(Location(1076,10,1078,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(REG)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
																			v[29], i.evalErr = i.evalIsLValues( // isLValues(REG)
																				v[5] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(REG)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
																			bv[0] = /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[29]) /* && */ /* rhs precomputed isSet(ACCTS) */ 
																			if bv[0] {
																				v[30], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																					v[9] /*ACCT*/,
																					v[24] /*ACCTS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = !(m.IsTrue(v[30]))
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS378(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 19, 414
					if v[4]&kapplyMatchMask == kapplyMatchLblECRECXuIELEXhyphenPRECOMPILED0 { // `ECREC_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// rule: 19
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList))))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable HASH = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList))))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable V = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(R,operandList(S,`.List{"operandList"}`(.KList)))
																		v[32] = i.Model.KApplyArg(v[31], 0)
																		if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable R = v[32]
																			v[33] = i.Model.KApplyArg(v[31], 1)
																			if v[33]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(S,`.List{"operandList"}`(.KList))
																				v[34] = i.Model.KApplyArg(v[33], 0)
																				if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable S = v[34]
																					v[35] = i.Model.KApplyArg(v[33], 1)
																					if v[35]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																						v[36] = i.Model.KApplyArg(v[20], 6)
																						// KVariable _5 = v[36]
																						v[37] = i.Model.KApplyArg(v[20], 7)
																						// KVariable _6 = v[37]
																						v[38] = i.Model.KApplyArg(v[20], 8)
																						// KVariable _7 = v[38]
																						v[39] = i.Model.KApplyArg(v[20], 9)
																						// KVariable _8 = v[39]
																						v[40] = i.Model.KApplyArg(v[20], 10)
																						// KVariable _9 = v[40]
																						v[41] = i.Model.KApplyArg(v[20], 11)
																						// KVariable _10 = v[41]
																						v[42] = i.Model.KApplyArg(v[20], 12)
																						// KVariable _11 = v[42]
																						v[43] = i.Model.KApplyArg(v[20], 13)
																						// KVariable _12 = v[43]
																						v[44] = i.Model.KApplyArg(v[20], 14)
																						// KVariable _13 = v[44]
																						v[45] = i.Model.KApplyArg(v[15], 5)
																						// KVariable _18 = v[45]
																						v[46] = i.Model.KApplyArg(v[15], 6)
																						// KVariable _19 = v[46]
																						v[47] = i.Model.KApplyArg(v[15], 7)
																						// KVariable _20 = v[47]
																						v[48] = i.Model.KApplyArg(v[15], 8)
																						// KVariable _21 = v[48]
																						v[49] = i.Model.KApplyArg(v[15], 9)
																						// KVariable _22 = v[49]
																						v[50] = i.Model.KApplyArg(v[15], 10)
																						// KVariable _23 = v[50]
																						v[51] = i.Model.KApplyArg(v[15], 11)
																						// KVariable _24 = v[51]
																						v[52] = i.Model.KApplyArg(v[15], 12)
																						// KVariable _25 = v[52]
																						v[53] = i.Model.KApplyArg(v[15], 13)
																						// KVariable _26 = v[53]
																						v[54] = i.Model.KApplyArg(v[15], 14)
																						// KVariable _27 = v[54]
																						v[55] = i.Model.KApplyArg(c, 8)
																						// KVariable _33 = v[55]
																						// rule #19
																						// source: iele.k @1638
																						// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECREC_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(V),isInt(S)),isInt(R)),isInt(HASH)),`notBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(9db2947531bc632546ecfd0be0f012f23668d2f63353750134c2488d60f501c1) contentStartColumn(10) contentStartLine(1638) org.kframework.attributes.Location(Location(1638,10,1640,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																						if !matched {
																							// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int")))))
																							v[56], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(HASH,#token("0","Int"))
																								v[28] /*HASH*/,
																								/* rhs KToken */ m.IntZero,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int")))
																							bv[2] = m.IsTrue(v[56])
																							if bv[2] {
																								v[57], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(V,#token("0","Int"))
																									v[30] /*V*/,
																									/* rhs KToken */ m.IntZero,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[57])
																							}
																							// `_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int")))
																							bv[1] = bv[2]
																							if bv[1] {
																								v[58], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(R,#token("0","Int"))
																									v[32] /*R*/,
																									/* rhs KToken */ m.IntZero,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[58])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int")))
																							bv[0] = bv[1]
																							if bv[0] {
																								v[59], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(S,#token("0","Int"))
																									v[34] /*S*/,
																									/* rhs KToken */ m.IntZero,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = m.IsTrue(v[59])
																							}
																							if /* rhs precomputed isInt(V) && isInt(S) && isInt(R) && isInt(HASH) */ /* && */ !(bv[0]) {
																								// RHS
																								return i.stepRHS19(v, bv, config)
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										// rule: 414
										// KVariable _27 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_130),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[16] = i.Model.KApplyArg(v[15], 0)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_130)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _130 = v[17]
												v[18] = i.Model.KApplyArg(v[15], 1)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[15], 2)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[15], 3)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[15], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList))))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))
															v[29] = i.Model.KApplyArg(v[28], 0)
															if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable HASH = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																if v[30]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList))))
																	v[31] = i.Model.KApplyArg(v[30], 0)
																	if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable V = v[31]
																		v[32] = i.Model.KApplyArg(v[30], 1)
																		if v[32]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(R,operandList(S,`.List{"operandList"}`(.KList)))
																			v[33] = i.Model.KApplyArg(v[32], 0)
																			if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable R = v[33]
																				v[34] = i.Model.KApplyArg(v[32], 1)
																				if v[34]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(S,`.List{"operandList"}`(.KList))
																					v[35] = i.Model.KApplyArg(v[34], 0)
																					if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						// KVariable S = v[35]
																						v[36] = i.Model.KApplyArg(v[34], 1)
																						if v[36]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																							v[37] = i.Model.KApplyArg(v[21], 6)
																							// KVariable _5 = v[37]
																							v[38] = i.Model.KApplyArg(v[21], 7)
																							// KVariable _6 = v[38]
																							v[39] = i.Model.KApplyArg(v[21], 8)
																							// KVariable _7 = v[39]
																							v[40] = i.Model.KApplyArg(v[21], 9)
																							// KVariable _8 = v[40]
																							v[41] = i.Model.KApplyArg(v[21], 10)
																							// KVariable _9 = v[41]
																							v[42] = i.Model.KApplyArg(v[21], 11)
																							// KVariable _10 = v[42]
																							v[43] = i.Model.KApplyArg(v[21], 12)
																							// KVariable _11 = v[43]
																							v[44] = i.Model.KApplyArg(v[21], 13)
																							// KVariable _12 = v[44]
																							v[45] = i.Model.KApplyArg(v[21], 14)
																							// KVariable _13 = v[45]
																							v[46] = i.Model.KApplyArg(v[15], 5)
																							// KVariable _17 = v[46]
																							v[47] = i.Model.KApplyArg(v[15], 6)
																							// KVariable _18 = v[47]
																							v[48] = i.Model.KApplyArg(v[15], 7)
																							// KVariable _19 = v[48]
																							v[49] = i.Model.KApplyArg(v[15], 8)
																							// KVariable _20 = v[49]
																							v[50] = i.Model.KApplyArg(v[15], 9)
																							// KVariable _21 = v[50]
																							v[51] = i.Model.KApplyArg(v[15], 10)
																							// KVariable _22 = v[51]
																							v[52] = i.Model.KApplyArg(v[15], 11)
																							// KVariable _23 = v[52]
																							v[53] = i.Model.KApplyArg(v[15], 12)
																							// KVariable _24 = v[53]
																							v[54] = i.Model.KApplyArg(v[15], 13)
																							// KVariable _25 = v[54]
																							v[55] = i.Model.KApplyArg(v[15], 14)
																							// KVariable _26 = v[55]
																							v[56] = i.Model.KApplyArg(c, 8)
																							// KVariable _32 = v[56]
																							// rule #414
																							// source: iele.k @1633
																							// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECREC_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_130=>#ecrec(#senderAux(`Bytes2String`(`Int2Bytes`(#token("32","Int"),HASH,bigEndianBytes(.KList))),V,`Bytes2String`(`Int2Bytes`(#token("32","Int"),R,bigEndianBytes(.KList))),`Bytes2String`(`Int2Bytes`(#token("32","Int"),S,bigEndianBytes(.KList)))))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(HASH,operandList(V,operandList(R,operandList(S,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(V),isInts(_130)),isInt(S)),isInt(R)),isInt(HASH)),`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(02dccfd01e5853c4f8384f30f1994257333a0bdc9e131ea258369569329141f9) contentStartColumn(10) contentStartLine(1633) org.kframework.attributes.Location(Location(1633,10,1636,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																							if !matched {
																								// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_130)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int"))))
																								v[57], i.evalErr = i.evalIsInts( // isInts(_130)
																									v[17] /*_130*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_130)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int"))))
																								bv[0] = /* rhs precomputed isInt(V) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isInt(S) */  /* && */ /* rhs precomputed isInt(R) */  /* && */ /* rhs precomputed isInt(HASH) */ 
																								if bv[0] {
																									v[58], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(HASH,#token("0","Int"))
																										v[29] /*HASH*/,
																										/* rhs KToken */ m.IntZero,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int")))
																									bv[3] = m.IsTrue(v[58])
																									if bv[3] {
																										v[59], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(V,#token("0","Int"))
																											v[31] /*V*/,
																											/* rhs KToken */ m.IntZero,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[3] = m.IsTrue(v[59])
																									}
																									// `_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int")))
																									bv[2] = bv[3]
																									if bv[2] {
																										v[60], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(R,#token("0","Int"))
																											v[33] /*R*/,
																											/* rhs KToken */ m.IntZero,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[2] = m.IsTrue(v[60])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_>=Int__INT`(HASH,#token("0","Int")),`_>=Int__INT`(V,#token("0","Int"))),`_>=Int__INT`(R,#token("0","Int"))),`_>=Int__INT`(S,#token("0","Int")))
																									bv[1] = bv[2]
																									if bv[1] {
																										v[61], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(S,#token("0","Int"))
																											v[35] /*S*/,
																											/* rhs KToken */ m.IntZero,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[61])
																									}
																									bv[0] = bv[1]
																								}
																								if bv[0] {
																									// RHS
																									return i.stepRHS414(v, bv, config)
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 24
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=byte_,__IELE-COMMON`(REG,INDEX,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #24
												// source: iele.k @842
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=byte_,__IELE-COMMON`(REG,INDEX,W))=>`#load___IELE`(REG,byte(chop(INDEX),W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(INDEX),isInt(W)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(7fbd5611187615e4a106f929b4c8e1cb61af8ff47dfbc007044a6cbb5dd6cd5d) contentStartColumn(10) contentStartLine(842) org.kframework.attributes.Location(Location(842,10,842,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if /* rhs precomputed isInt(INDEX) && isInt(W) */ /* && */ m.IsTrue(v[20]) {
														// RHS
														return i.stepRHS24(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 25, 301
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=addmod_,_,__IELE-COMMON`(REG,W0,W1,_30)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 25
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable W1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _30 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #25
											// source: iele.k @835
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=addmod_,_,__IELE-COMMON`(REG,W0,W1,_30))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_30,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(ed2f7fcf625004bfac52027ce2fff5d56dc39cb776f954fc220a3740c9734f34) contentStartColumn(10) contentStartLine(835) org.kframework.attributes.Location(Location(835,10,835,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_30,#token("0","Int")))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(W0)
													v[6] /*W0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isOperand(W0),isOperand(W1))
												bv[2] = m.IsTrue(v[21])
												if bv[2] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(W1)
														v[7] /*W1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG))
												bv[1] = bv[2]
												if bv[1] {
													v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_30,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_30,#token("0","Int"))
														v[8] /*_30*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[24])
												}
												if bv[0] {
													// RHS
													return i.stepRHS25(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 301
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #301
													// source: iele.k @834
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=addmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,`_%Int__INT`(`_+Int_`(W0,W1),W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(663c1a52e3b06b666554c733297d385b3a41672bb1221973cc1fa4ecc5e211b6) contentStartColumn(10) contentStartLine(834) org.kframework.attributes.Location(Location(834,10,834,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W2,#token("0","Int")))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W2,#token("0","Int")))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W2,#token("0","Int"))
																v[8] /*W2*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS301(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 33
					if v[4]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(VALUES)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable VALUES = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _27 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_365),_14,_15,_16,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_365)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _365 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 1)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _16 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// KVariable _0 = v[23]
													v[24] = i.Model.KApplyArg(v[22], 1)
													// KVariable _1 = v[24]
													v[25] = i.Model.KApplyArg(v[22], 2)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(`.List`(.KList))
														v[26] = i.Model.KApplyArg(v[25], 0)
														if i.Model.IsEmptyList(v[26], m.SortList, m.LblXuListXu) { // empty list `.List`(.KList)
															v[27] = i.Model.KApplyArg(v[22], 3)
															// KVariable _2 = v[27]
															v[28] = i.Model.KApplyArg(v[22], 4)
															// KVariable _3 = v[28]
															v[29] = i.Model.KApplyArg(v[22], 5)
															// KVariable _4 = v[29]
															v[30] = i.Model.KApplyArg(v[22], 6)
															// KVariable _5 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 7)
															// KVariable _6 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 8)
															// KVariable _7 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 9)
															// KVariable _8 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 10)
															// KVariable _9 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 11)
															// KVariable _10 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 12)
															// KVariable _11 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[16], 5)
															// KVariable _17 = v[39]
															v[40] = i.Model.KApplyArg(v[16], 6)
															// KVariable _18 = v[40]
															v[41] = i.Model.KApplyArg(v[16], 7)
															// KVariable _19 = v[41]
															v[42] = i.Model.KApplyArg(v[16], 8)
															// KVariable _20 = v[42]
															v[43] = i.Model.KApplyArg(v[16], 9)
															// KVariable _21 = v[43]
															v[44] = i.Model.KApplyArg(v[16], 10)
															// KVariable _22 = v[44]
															v[45] = i.Model.KApplyArg(v[16], 11)
															// KVariable _23 = v[45]
															v[46] = i.Model.KApplyArg(v[16], 12)
															// KVariable _24 = v[46]
															v[47] = i.Model.KApplyArg(v[16], 13)
															// KVariable _25 = v[47]
															v[48] = i.Model.KApplyArg(v[16], 14)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(c, 8)
															// KVariable _32 = v[49]
															// rule #33
															// source: iele.k @1017
															// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ret__IELE-COMMON`(VALUES))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_365=>VALUES),_14,_15,_16,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(isNonEmptyInts(VALUES),isInts(_365)) ensures #token("true","Bool") [UNIQUE_ID(fbfb34881b4d643527193392dac4f3a7a65e09e8ed1a30183fb2e3bab6c955a7) contentStartColumn(10) contentStartLine(1017) org.kframework.attributes.Location(Location(1017,10,1019,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(isNonEmptyInts(VALUES),isInts(_365))
																v[50], i.evalErr = i.evalIsNonEmptyInts( // isNonEmptyInts(VALUES)
																	v[5] /*VALUES*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isNonEmptyInts(VALUES),isInts(_365))
																bv[0] = m.IsTrue(v[50])
																if bv[0] {
																	v[51], i.evalErr = i.evalIsInts( // isInts(_365)
																		v[18] /*_365*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[51])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS33(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 34, 455
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=shift_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 34
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #34
												// source: iele.k @855
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_<<Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(bd5122a71fcb8b1d65885fdd9b8e314707b78131a1a30b39b03c465a3ca41924) contentStartColumn(10) contentStartLine(855) org.kframework.attributes.Location(Location(855,10,855,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W1,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W1,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W1,#token("0","Int"))
															v[7] /*W1*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS34(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 455
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #455
												// source: iele.k @856
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_>>Int__INT`(W0,`_-Int__INT`(#token("0","Int"),W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0517a2c71287d8105df8f0207743a337b43f4766dc8927641ad42b5805c31a71) contentStartColumn(10) contentStartLine(856) org.kframework.attributes.Location(Location(856,10,856,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W1,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W1,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W1,#token("0","Int"))
															v[7] /*W1*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS455(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 59, 78, 81, 107, 108, 136, 283, 340, 373, 395, 399, 423
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=cmp__,__IELE-COMMON`(REG,`lt_IELE-COMMON`(.KList),W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rules: 59, 107
						if v[6]&kapplyMatchMask == kapplyMatchLblLtXuIELEXhyphenCOMMON0 { // `lt_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 59
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #59
													// source: iele.k @859
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`lt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(5c62c78e94b5efeb7f604871040118b394a79c9e063e68177a22a66e6a5eb39f) contentStartColumn(10) contentStartLine(859) org.kframework.attributes.Location(Location(859,10,859,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS59(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 107
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #107
													// source: iele.k @858
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`lt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(8a937131cb7c48f9f6451b453e01169e65d93e0901983be85161411f2916da23) contentStartColumn(10) contentStartLine(858) org.kframework.attributes.Location(Location(858,10,858,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS107(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rules: 78, 340
						if v[6]&kapplyMatchMask == kapplyMatchLblLeXuIELEXhyphenCOMMON0 { // `le_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 78
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #78
													// source: iele.k @861
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`le_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(3a385614982d24be6d872bdf1f845afa59d7f4ca68cad38023bb95ed85b7e9e3) contentStartColumn(10) contentStartLine(861) org.kframework.attributes.Location(Location(861,10,861,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS78(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 340
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #340
													// source: iele.k @860
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`le_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(06513b3f303e9f2b0e7bb4fc6cc24cd2e83c0805a636f94356e8f07511d46204) contentStartColumn(10) contentStartLine(860) org.kframework.attributes.Location(Location(860,10,860,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS340(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rules: 81, 283
						if v[6]&kapplyMatchMask == kapplyMatchLblGeXuIELEXhyphenCOMMON0 { // `ge_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 81
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #81
													// source: iele.k @865
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ge_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(0bbaa0ef491ab74de06ae8cc727e88ae6d60e4c8db4dc990ce90600e9b5e89ce) contentStartColumn(10) contentStartLine(865) org.kframework.attributes.Location(Location(865,10,865,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS81(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 283
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #283
													// source: iele.k @864
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ge_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(d0250876efda39a28b1acf6a2b52153e15db543d290ad9aa6445656a0a150751) contentStartColumn(10) contentStartLine(864) org.kframework.attributes.Location(Location(864,10,864,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS283(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rules: 108, 136
						if v[6]&kapplyMatchMask == kapplyMatchLblGtXuIELEXhyphenCOMMON0 { // `gt_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 108
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #108
													// source: iele.k @862
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`gt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(a7e778e557e6cd4c3f3ee50e85536168e6e2306ad80ba546297de19375282047) contentStartColumn(10) contentStartLine(862) org.kframework.attributes.Location(Location(862,10,862,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS108(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 136
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #136
													// source: iele.k @863
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`gt_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_<=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(44b84112dced08953a37137fd805ce5d04d02f6a895df40e23e6d29f8ae1c5a4) contentStartColumn(10) contentStartLine(863) org.kframework.attributes.Location(Location(863,10,863,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_<=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS136(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rules: 373, 423
						if v[6]&kapplyMatchMask == kapplyMatchLblEqXuIELEXhyphenCOMMON0 { // `eq_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 373
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #373
													// source: iele.k @866
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`eq_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_==Int_`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(d1118955f68929235ddd92da49022849eb12b852d5017aae5ad6ce4bc999d334) contentStartColumn(10) contentStartLine(866) org.kframework.attributes.Location(Location(866,10,866,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_==Int_`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_==Int_`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS373(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 423
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #423
													// source: iele.k @867
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`eq_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(6e45c17c6d0d662f1f5193e44837eca7ff517cf0ebe730684890450104283f4b) contentStartColumn(10) contentStartLine(867) org.kframework.attributes.Location(Location(867,10,867,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS423(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rules: 395, 399
						if v[6]&kapplyMatchMask == kapplyMatchLblNeXuIELEXhyphenCOMMON0 { // `ne_IELE-COMMON`(.KList)
							v[7] = i.Model.KApplyArg(v[4], 2)
							// rule: 395
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #395
													// source: iele.k @869
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ne_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_==Int_`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(d6c4f17b27d205f23128d62dea759d48eb6cc15afdaf8d715cbda6ef43844c6d) contentStartColumn(10) contentStartLine(869) org.kframework.attributes.Location(Location(869,10,869,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_==Int_`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_==Int_`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS395(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 399
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W0 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W1 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #399
													// source: iele.k @868
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=cmp__,__IELE-COMMON`(REG,`ne_IELE-COMMON`(.KList),W0,W1))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W0,W1)) ensures #token("true","Bool") [UNIQUE_ID(eafd48643973f6625f99186b62bf099bf2e0923ee155334ff1d2d7324e94bee5) contentStartColumn(10) contentStartLine(868) org.kframework.attributes.Location(Location(868,10,868,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W0,W1))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W0,W1))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W0,W1)
																v[7] /*W0*/,
																v[8] /*W1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS399(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 61
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=and_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #61
												// source: iele.k @852
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=and_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_&Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(c56169074ce837f5c2e92bc6ac7ceafd6475c5fc59b0dcd00883e046dcf85e30) contentStartColumn(10) contentStartLine(852) org.kframework.attributes.Location(Location(852,10,852,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS61(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 66, 474
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqXuXuIELEXhyphenCOMMON2 { // `_=__IELE-COMMON`(REG1,`%__IELE-COMMON`(REG2))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 66
						// KVariable REG1 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG2)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable REG2 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _14 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													// KVariable _15 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 2)
													// KVariable _16 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 3)
													// KVariable _17 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 4)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[23], 2)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[23], 3)
														// KVariable _3 = v[27]
														v[28] = i.Model.KApplyArg(v[23], 4)
														// KVariable _4 = v[28]
														v[29] = i.Model.KApplyArg(v[23], 5)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[23], 6)
														// KVariable _6 = v[30]
														v[31] = i.Model.KApplyArg(v[23], 7)
														if v[31]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[32] = i.Model.KApplyArg(v[31], 0)
															if v[32]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[32]
																v[33] = i.Model.KApplyArg(v[23], 8)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 9)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 10)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 11)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 12)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 13)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 14)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[18], 5)
																// KVariable _18 = v[40]
																v[41] = i.Model.KApplyArg(v[18], 6)
																// KVariable _19 = v[41]
																v[42] = i.Model.KApplyArg(v[18], 7)
																// KVariable _20 = v[42]
																v[43] = i.Model.KApplyArg(v[18], 8)
																// KVariable _21 = v[43]
																v[44] = i.Model.KApplyArg(v[18], 9)
																// KVariable _22 = v[44]
																v[45] = i.Model.KApplyArg(v[18], 10)
																// KVariable _23 = v[45]
																v[46] = i.Model.KApplyArg(v[18], 11)
																// KVariable _24 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 12)
																// KVariable _25 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 13)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 14)
																// KVariable _27 = v[49]
																v[50] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[50]
																// rule #66
																// source: iele.k @732
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=__IELE-COMMON`(REG1,`%__IELE-COMMON`(REG2)))=>`#load___IELE`(REG1,getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isArray(REGS),isInt(REG2)),isLValue(REG1)) ensures #token("true","Bool") [UNIQUE_ID(5318c1b2baef12917056f03d83d427dc98f51ae1b7994327d3fc6a6f1d77113d) contentStartColumn(10) contentStartLine(732) org.kframework.attributes.Location(Location(732,10,732,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG1))
																	v[51], i.evalErr = i.evalIsLValue( // isLValue(REG1)
																		v[5] /*REG1*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	if /* rhs precomputed isArray(REGS) && isInt(REG2) */ /* && */ m.IsTrue(v[51]) {
																		// RHS
																		return i.stepRHS66(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 474
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #474
											// source: iele.k @730
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,W)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(W),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(bd21a345e2aa95a4d5139fce0c46c5a996921d2fbbd355c2e18608bbba4f8414) contentStartColumn(10) contentStartLine(730) org.kframework.attributes.Location(Location(730,10,730,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												if /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[19]) {
													// RHS
													return i.stepRHS474(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 70, 304
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sext_,__IELE-COMMON`(REG,WIDTH,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 70
						// KVariable WIDTH = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #70
											// source: iele.k @844
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sext_,__IELE-COMMON`(REG,WIDTH,W))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(W),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(df78406291c1f3447689ba9bf0fc66c5d47e44e1067cd10753d4ed1f9019973b) contentStartColumn(10) contentStartLine(844) org.kframework.attributes.Location(Location(844,10,844,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int")))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH))
												bv[1] = /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsOperand( // isOperand(WIDTH)
														v[6] /*WIDTH*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(WIDTH)),`_<Int__INT`(W,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W,#token("0","Int"))
														v[7] /*W*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS70(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 304
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #304
												// source: iele.k @843
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sext_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,signextend(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),isInt(WIDTH)),`_>=Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(47739eb87a1965fff5e2819bfc7031a28432d7a539f06ee4528031f9b06581e9) contentStartColumn(10) contentStartLine(843) org.kframework.attributes.Location(Location(843,10,843,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W) */  /* && */ /* rhs precomputed isInt(WIDTH) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W,#token("0","Int"))
															v[7] /*W*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS304(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 85, 118
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mod_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 85
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #85
												// source: iele.k @831
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mod_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_%Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c92cc7b1fd2a1947d8b4ae2beeb5270e0677f55dbbecfeda3cfcb342d9ece26a) contentStartColumn(10) contentStartLine(831) org.kframework.attributes.Location(Location(831,10,831,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W1,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W1,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W1,#token("0","Int"))
															v[7] /*W1*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS85(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 118
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _25 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #118
											// source: iele.k @832
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mod_,__IELE-COMMON`(REG,W0,_25))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),`_==Int_`(_25,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0acefb02ba6d9155eb3c5d599a8304aa2804bf808daf72ddbc63c88af82292a5) contentStartColumn(10) contentStartLine(832) org.kframework.attributes.Location(Location(832,10,832,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),`_==Int_`(_25,#token("0","Int")))
												v[20], i.evalErr = i.evalIsOperand( // isOperand(W0)
													v[6] /*W0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isOperand(W0),isLValue(REG))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),`_==Int_`(_25,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[22], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_25,#token("0","Int"))
														v[7] /*_25*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS118(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 91
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(_370,_371,ACCT,_372,_373)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _370 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _371 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							// KVariable _372 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 4)
							// KVariable _373 = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _4 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _5 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _6 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _7 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _8 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											// KVariable _9 = v[20]
											v[21] = i.Model.KApplyArg(c, 8)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
												v[22] = i.Model.KApplyArg(v[21], 0)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
													v[23] = i.Model.KApplyArg(v[22], 0)
													if v[23]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
														// KVariable ACCTS = v[23]
														v[24] = i.Model.KApplyArg(v[21], 1)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[21], 2)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[21], 3)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[21], 4)
														// KVariable _3 = v[27]
														// rule #91
														// source: iele.k @1526
														// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(_370,_371,ACCT,_372,_373))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_370),isInt(ACCT)),isLValue(_371)),isOperand(_373)),isOperands(_372)),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(ce07c9a4f7243ef9af7a29d2fdc8678f5fbbcea78f10565ae37216bece1ee392) contentStartColumn(10) contentStartLine(1526) org.kframework.attributes.Location(Location(1526,10,1526,166)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_370),#token("true","Bool")),isLValue(_371)),isOperand(_373)),isOperands(_372)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
															v[28], i.evalErr = i.evalIsLValue( // isLValue(_370)
																v[5] /*_370*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(isLValue(_370),#token("true","Bool")),isLValue(_371))
															bv[3] = m.IsTrue(v[28]) /* && */ /* rhs precomputed isInt(ACCT) */ 
															if bv[3] {
																v[29], i.evalErr = i.evalIsLValue( // isLValue(_371)
																	v[6] /*_371*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[3] = m.IsTrue(v[29])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_370),#token("true","Bool")),isLValue(_371)),isOperand(_373))
															bv[2] = bv[3]
															if bv[2] {
																v[30], i.evalErr = i.evalIsOperand( // isOperand(_373)
																	v[9] /*_373*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[30])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_370),#token("true","Bool")),isLValue(_371)),isOperand(_373)),isOperands(_372))
															bv[1] = bv[2]
															if bv[1] {
																v[31], i.evalErr = i.evalIsOperands( // isOperands(_372)
																	v[8] /*_372*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[31])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_370),#token("true","Bool")),isLValue(_371)),isOperand(_373)),isOperands(_372)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isSet(ACCTS) */ 
															if bv[0] {
																v[32], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																	v[7] /*ACCT*/,
																	v[23] /*ACCTS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[32]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS91(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 110
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(REG,MEMINDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable MEMINDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[32] = i.Model.KApplyArg(v[31], 0)
													if v[32]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[49]
														// rule #110
														// source: iele.k @881
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,MEMINDEX))=>`#load___IELE`(REG,keccak(`.Bytes_BYTES-HOOKED`(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isMap(LM),isLValue(REG)),isOperand(MEMINDEX)),`notBool_`(`_in_keys(_)_MAP`(MEMINDEX,LM))) ensures #token("true","Bool") [UNIQUE_ID(0a77cc2073c5064ef7c0cc4c7fbb4112aa330e9b35683e22c87729011bfe3a41) contentStartColumn(10) contentStartLine(881) org.kframework.attributes.Location(Location(881,10,883,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(MEMINDEX)),`notBool_`(`_in_keys(_)_MAP`(MEMINDEX,LM)))
															v[50], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[5] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(MEMINDEX))
															bv[1] = /* rhs precomputed isMap(LM) */ /* && */ m.IsTrue(v[50])
															if bv[1] {
																v[51], i.evalErr = i.evalIsOperand( // isOperand(MEMINDEX)
																	v[6] /*MEMINDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[51])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(MEMINDEX)),`notBool_`(`_in_keys(_)_MAP`(MEMINDEX,LM)))
															bv[0] = bv[1]
															if bv[0] {
																v[52], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(MEMINDEX,LM)
																	v[6] /*MEMINDEX*/,
																	v[32] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[52]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS110(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 131
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,GCAP)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,REGS)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable REG = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							// KVariable REGS = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable LABEL = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTTO = v[9]
								v[10] = i.Model.KApplyArg(v[4], 3)
								// KVariable ARGS = v[10]
								v[11] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable GCAP = v[11]
									// KVariable DotVar1 = v[3]
									v[12] = i.Model.KApplyArg(c, 1)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[13] = i.Model.KApplyArg(v[12], 0)
										if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[16] = i.Model.KApplyArg(v[14], 0)
												if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[15]
													v[17] = i.Model.KApplyArg(c, 2)
													// KVariable _27 = v[17]
													v[18] = i.Model.KApplyArg(c, 3)
													// KVariable _28 = v[18]
													v[19] = i.Model.KApplyArg(c, 4)
													if v[19]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
														v[20] = i.Model.KApplyArg(v[19], 0)
														// KVariable SCHED = v[20]
														v[21] = i.Model.KApplyArg(c, 5)
														// KVariable _29 = v[21]
														v[22] = i.Model.KApplyArg(c, 6)
														// KVariable _30 = v[22]
														v[23] = i.Model.KApplyArg(c, 7)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
															v[24] = i.Model.KApplyArg(v[23], 0)
															// KVariable _13 = v[24]
															v[25] = i.Model.KApplyArg(v[23], 1)
															// KVariable _14 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 2)
															// KVariable _15 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 3)
															// KVariable _16 = v[27]
															v[28] = i.Model.KApplyArg(v[23], 4)
															if v[28]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12)
																v[29] = i.Model.KApplyArg(v[28], 0)
																// KVariable _0 = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																// KVariable _1 = v[30]
																v[31] = i.Model.KApplyArg(v[28], 2)
																// KVariable _2 = v[31]
																v[32] = i.Model.KApplyArg(v[28], 3)
																if v[32]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCTFROM)
																	v[33] = i.Model.KApplyArg(v[32], 0)
																	if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable ACCTFROM = v[33]
																		v[34] = i.Model.KApplyArg(v[28], 4)
																		// KVariable _3 = v[34]
																		v[35] = i.Model.KApplyArg(v[28], 5)
																		// KVariable _4 = v[35]
																		v[36] = i.Model.KApplyArg(v[28], 6)
																		// KVariable _5 = v[36]
																		v[37] = i.Model.KApplyArg(v[28], 7)
																		// KVariable _6 = v[37]
																		v[38] = i.Model.KApplyArg(v[28], 8)
																		// KVariable _7 = v[38]
																		v[39] = i.Model.KApplyArg(v[28], 9)
																		// KVariable _8 = v[39]
																		v[40] = i.Model.KApplyArg(v[28], 10)
																		// KVariable _9 = v[40]
																		v[41] = i.Model.KApplyArg(v[28], 11)
																		// KVariable _10 = v[41]
																		v[42] = i.Model.KApplyArg(v[28], 12)
																		// KVariable _11 = v[42]
																		v[43] = i.Model.KApplyArg(v[28], 13)
																		if v[43]&kapplyMatchMask == kapplyMatchLblXltpreviousGasXgt1 { // `<previousGas>`(GAVAIL)
																			v[44] = i.Model.KApplyArg(v[43], 0)
																			if i.tempTypeVar = v[44] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable GAVAIL = v[44]
																				v[45] = i.Model.KApplyArg(v[28], 14)
																				// KVariable _12 = v[45]
																				v[46] = i.Model.KApplyArg(v[23], 5)
																				// KVariable _17 = v[46]
																				v[47] = i.Model.KApplyArg(v[23], 6)
																				// KVariable _18 = v[47]
																				v[48] = i.Model.KApplyArg(v[23], 7)
																				// KVariable _19 = v[48]
																				v[49] = i.Model.KApplyArg(v[23], 8)
																				// KVariable _20 = v[49]
																				v[50] = i.Model.KApplyArg(v[23], 9)
																				// KVariable _21 = v[50]
																				v[51] = i.Model.KApplyArg(v[23], 10)
																				// KVariable _22 = v[51]
																				v[52] = i.Model.KApplyArg(v[23], 11)
																				// KVariable _23 = v[52]
																				v[53] = i.Model.KApplyArg(v[23], 12)
																				// KVariable _24 = v[53]
																				v[54] = i.Model.KApplyArg(v[23], 13)
																				// KVariable _25 = v[54]
																				v[55] = i.Model.KApplyArg(v[23], 14)
																				// KVariable _26 = v[55]
																				v[56] = i.Model.KApplyArg(c, 8)
																				// KVariable _31 = v[56]
																				// rule #131
																				// source: iele.k @1328
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,GCAP))=>`#checkCall____IELE`(ACCTFROM,#token("0","Int"),GCAP)~>`#call________IELE`(ACCTFROM,ACCTTO,LABEL,`Ccallgas`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,#token("0","Int"),#sizeLVals(REGS),`Ccallarg`(SCHED,ARGS)),#token("0","Int"),ARGS,#token("true","Bool"))~>`#return___IELE`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,`<schedule>`(SCHED),_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isConstant(LABEL)),isInt(ACCTTO)),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(cd8fbfa85efaaa08bc779d953668fce03b7d63186e40cc2715e168dccfc9cd74) contentStartColumn(10) contentStartLine(1328) org.kframework.attributes.Location(Location(1328,10,1336,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool"))
																					v[57], i.evalErr = i.evalIsConstant( // isConstant(LABEL)
																						v[8] /*LABEL*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),isLValues(REGS))
																					bv[3] = /* rhs precomputed isInt(GCAP) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isInt(ACCTTO) */ 
																					if bv[3] {
																						v[58], i.evalErr = i.evalIsLValues( // isLValues(REGS)
																							v[7] /*REGS*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[3] = m.IsTrue(v[58])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED))
																					bv[2] = bv[3]
																					if bv[2] {
																						v[59], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																							v[20] /*SCHED*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[2] = m.IsTrue(v[59])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG))
																					bv[1] = bv[2]
																					if bv[1] {
																						v[60], i.evalErr = i.evalIsLValue( // isLValue(REG)
																							v[6] /*REG*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[60])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),#token("true","Bool")),isInts(ARGS))
																					bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																					if bv[0] {
																						v[61], i.evalErr = i.evalIsInts( // isInts(ARGS)
																							v[10] /*ARGS*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[61])
																					}
																					if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																						// RHS
																						return i.stepRHS131(v, bv, config)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 137
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=or_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #137
												// source: iele.k @853
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=or_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_|Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(00fcefe6f99d9a1b9fb9cdf2e50d7ed10245bffeee017a6efea9bdc2bb090f81) contentStartColumn(10) contentStartLine(853) org.kframework.attributes.Location(Location(853,10,853,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS137(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 152, 337
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=div_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 152
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #152
												// source: iele.k @827
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=div_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_/Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c05c37cb60424b998a15b60de7d68322bd564fbec74d8c03b6bda2f425763951) contentStartColumn(10) contentStartLine(827) org.kframework.attributes.Location(Location(827,10,827,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W1,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W1,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W1,#token("0","Int"))
															v[7] /*W1*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS152(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 337
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _26 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #337
											// source: iele.k @828
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=div_,__IELE-COMMON`(REG,W0,_26))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),`_==Int_`(_26,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(600a9b17d37b3307c7ee0419e28e42f85b97154124c8f9b44a27b0d47387b0a1) contentStartColumn(10) contentStartLine(828) org.kframework.attributes.Location(Location(828,10,828,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),`_==Int_`(_26,#token("0","Int")))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(REG),isOperand(W0))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsOperand( // isOperand(W0)
														v[6] /*W0*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),`_==Int_`(_26,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[22], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_26,#token("0","Int"))
														v[7] /*_26*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS337(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 166, 526
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=exp_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 166
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #166
												// source: iele.k @829
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_^Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)),`_>=Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c8d81d7cadaa7ecf8ec0530c2a2d038ca9f5aa1c877f6162756063bc5b0b6b7f) contentStartColumn(10) contentStartLine(829) org.kframework.attributes.Location(Location(829,10,829,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W1,#token("0","Int")))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool")),`_>=Int__INT`(W1,#token("0","Int")))
													bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
													if bv[0] {
														v[21], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W1,#token("0","Int"))
															v[7] /*W1*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[21])
													}
													if bv[0] {
														// RHS
														return i.stepRHS166(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 526
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W1 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #526
											// source: iele.k @830
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),isInt(W1)),`_<Int__INT`(W1,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(61810fe038b82dfcfab0114842fdcb4cf1213f15ce18a76eac94bd440c844794) contentStartColumn(10) contentStartLine(830) org.kframework.attributes.Location(Location(830,10,830,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),#token("true","Bool")),`_<Int__INT`(W1,#token("0","Int")))
												v[20], i.evalErr = i.evalIsOperand( // isOperand(W0)
													v[6] /*W0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isOperand(W0),isLValue(REG))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isLValue(REG)),#token("true","Bool")),`_<Int__INT`(W1,#token("0","Int")))
												bv[0] = bv[1] /* && */ /* rhs precomputed isInt(W1) */ 
												if bv[0] {
													v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W1,#token("0","Int"))
														v[7] /*W1*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS526(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 177
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXuIELEXhyphenCOMMON1 { // `log__IELE-COMMON`(MEMINDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable MEMINDEX = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[16]
											v[17] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[17]
											// rule #177
											// source: iele.k @1043
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log__IELE-COMMON`(MEMINDEX))=>`#log___IELE`(MEMINDEX,`.List`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(MEMINDEX) ensures #token("true","Bool") [UNIQUE_ID(73705a0ae6825e14cd200afea74cc2c23542a2095834844db753fa47f8f874ba) contentStartColumn(10) contentStartLine(1043) org.kframework.attributes.Location(Location(1043,10,1043,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES precomputed isInt(MEMINDEX)
												// RHS
												return i.stepRHS177(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rules: 186, 365
					if v[4]&kapplyMatchMask == kapplyMatchLblSHA256XuIELEXhyphenPRECOMPILED0 { // `SHA256_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// rule: 186
										// KVariable _27 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_131),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[16] = i.Model.KApplyArg(v[15], 0)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_131)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _131 = v[17]
												v[18] = i.Model.KApplyArg(v[15], 1)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[15], 2)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[15], 3)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[15], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
															v[29] = i.Model.KApplyArg(v[28], 0)
															if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable LEN = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																if v[30]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																	v[31] = i.Model.KApplyArg(v[30], 0)
																	if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable DATA = v[31]
																		v[32] = i.Model.KApplyArg(v[30], 1)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																			v[33] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _5 = v[33]
																			v[34] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _6 = v[34]
																			v[35] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _7 = v[35]
																			v[36] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _8 = v[36]
																			v[37] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _9 = v[37]
																			v[38] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _10 = v[38]
																			v[39] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _11 = v[39]
																			v[40] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _12 = v[40]
																			v[41] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _13 = v[41]
																			v[42] = i.Model.KApplyArg(v[15], 5)
																			// KVariable _17 = v[42]
																			v[43] = i.Model.KApplyArg(v[15], 6)
																			// KVariable _18 = v[43]
																			v[44] = i.Model.KApplyArg(v[15], 7)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[15], 8)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[15], 9)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[15], 10)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[15], 11)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[15], 12)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[15], 13)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[15], 14)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(c, 8)
																			// KVariable _32 = v[52]
																			// rule #186
																			// source: iele.k @1649
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`SHA256_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_131=>operandList(#parseHexWord(`Sha256`(`Bytes2String`(`Int2Bytes`(LEN,DATA,bigEndianBytes(.KList))))),`.List{"operandList"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isInts(_131)),isInt(DATA)),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(228bfdbb63f5d9335f4655749f4e3c9a4d30fc18643620b7ac0b72599d199b4b) contentStartColumn(10) contentStartLine(1649) org.kframework.attributes.Location(Location(1649,10,1652,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_131)),#token("true","Bool")),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))
																				v[53], i.evalErr = i.evalIsInts( // isInts(_131)
																					v[17] /*_131*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_131)),#token("true","Bool")),`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))
																				bv[0] = /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[53]) /* && */ /* rhs precomputed isInt(DATA) */ 
																				if bv[0] {
																					v[54], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(LEN,#token("0","Int"))
																						v[29] /*LEN*/,
																						/* rhs KToken */ m.IntZero,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))
																					bv[1] = m.IsTrue(v[54])
																					if bv[1] {
																						v[55], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(DATA,#token("0","Int"))
																							v[31] /*DATA*/,
																							/* rhs KToken */ m.IntZero,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[55])
																					}
																					bv[0] = bv[1]
																				}
																				if bv[0] {
																					// RHS
																					return i.stepRHS186(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										// rule: 365
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable DATA = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																		v[32] = i.Model.KApplyArg(v[20], 6)
																		// KVariable _5 = v[32]
																		v[33] = i.Model.KApplyArg(v[20], 7)
																		// KVariable _6 = v[33]
																		v[34] = i.Model.KApplyArg(v[20], 8)
																		// KVariable _7 = v[34]
																		v[35] = i.Model.KApplyArg(v[20], 9)
																		// KVariable _8 = v[35]
																		v[36] = i.Model.KApplyArg(v[20], 10)
																		// KVariable _9 = v[36]
																		v[37] = i.Model.KApplyArg(v[20], 11)
																		// KVariable _10 = v[37]
																		v[38] = i.Model.KApplyArg(v[20], 12)
																		// KVariable _11 = v[38]
																		v[39] = i.Model.KApplyArg(v[20], 13)
																		// KVariable _12 = v[39]
																		v[40] = i.Model.KApplyArg(v[20], 14)
																		// KVariable _13 = v[40]
																		v[41] = i.Model.KApplyArg(v[15], 5)
																		// KVariable _18 = v[41]
																		v[42] = i.Model.KApplyArg(v[15], 6)
																		// KVariable _19 = v[42]
																		v[43] = i.Model.KApplyArg(v[15], 7)
																		// KVariable _20 = v[43]
																		v[44] = i.Model.KApplyArg(v[15], 8)
																		// KVariable _21 = v[44]
																		v[45] = i.Model.KApplyArg(v[15], 9)
																		// KVariable _22 = v[45]
																		v[46] = i.Model.KApplyArg(v[15], 10)
																		// KVariable _23 = v[46]
																		v[47] = i.Model.KApplyArg(v[15], 11)
																		// KVariable _24 = v[47]
																		v[48] = i.Model.KApplyArg(v[15], 12)
																		// KVariable _25 = v[48]
																		v[49] = i.Model.KApplyArg(v[15], 13)
																		// KVariable _26 = v[49]
																		v[50] = i.Model.KApplyArg(v[15], 14)
																		// KVariable _27 = v[50]
																		v[51] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[51]
																		// rule #365
																		// source: iele.k @1654
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`SHA256_IELE-PRECOMPILED`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(DATA)),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(2fadbcc760b666baee97cc9465a4bde4af72035b70e4029e5ac05d9a3b37a94e) contentStartColumn(10) contentStartLine(1654) org.kframework.attributes.Location(Location(1654,10,1656,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))))
																			v[52], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(LEN,#token("0","Int"))
																				v[28] /*LEN*/,
																				/* rhs KToken */ m.IntZero,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_>=Int__INT`(LEN,#token("0","Int")),`_>=Int__INT`(DATA,#token("0","Int")))
																			bv[0] = m.IsTrue(v[52])
																			if bv[0] {
																				v[53], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(DATA,#token("0","Int"))
																					v[30] /*DATA*/,
																					/* rhs KToken */ m.IntZero,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[53])
																			}
																			if /* rhs precomputed isInt(LEN) && isInt(DATA) */ /* && */ !(bv[0]) {
																				// RHS
																				return i.stepRHS365(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 206
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(_348,CELL,_349,_42)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _348 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _349 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _42 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _14 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _15 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _16 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _17 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
													v[25] = i.Model.KApplyArg(v[24], 0)
													// KVariable _0 = v[25]
													v[26] = i.Model.KApplyArg(v[24], 1)
													// KVariable _1 = v[26]
													v[27] = i.Model.KApplyArg(v[24], 2)
													// KVariable _2 = v[27]
													v[28] = i.Model.KApplyArg(v[24], 3)
													// KVariable _3 = v[28]
													v[29] = i.Model.KApplyArg(v[24], 4)
													// KVariable _4 = v[29]
													v[30] = i.Model.KApplyArg(v[24], 5)
													// KVariable _5 = v[30]
													v[31] = i.Model.KApplyArg(v[24], 6)
													// KVariable _6 = v[31]
													v[32] = i.Model.KApplyArg(v[24], 7)
													// KVariable _7 = v[32]
													v[33] = i.Model.KApplyArg(v[24], 8)
													if v[33]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
														v[34] = i.Model.KApplyArg(v[33], 0)
														if v[34]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															// KVariable LM = v[34]
															v[35] = i.Model.KApplyArg(v[24], 9)
															// KVariable _8 = v[35]
															v[36] = i.Model.KApplyArg(v[24], 10)
															// KVariable _9 = v[36]
															v[37] = i.Model.KApplyArg(v[24], 11)
															// KVariable _10 = v[37]
															v[38] = i.Model.KApplyArg(v[24], 12)
															// KVariable _11 = v[38]
															v[39] = i.Model.KApplyArg(v[24], 13)
															// KVariable _12 = v[39]
															v[40] = i.Model.KApplyArg(v[24], 14)
															// KVariable _13 = v[40]
															v[41] = i.Model.KApplyArg(v[19], 5)
															// KVariable _18 = v[41]
															v[42] = i.Model.KApplyArg(v[19], 6)
															// KVariable _19 = v[42]
															v[43] = i.Model.KApplyArg(v[19], 7)
															// KVariable _20 = v[43]
															v[44] = i.Model.KApplyArg(v[19], 8)
															// KVariable _21 = v[44]
															v[45] = i.Model.KApplyArg(v[19], 9)
															// KVariable _22 = v[45]
															v[46] = i.Model.KApplyArg(v[19], 10)
															// KVariable _23 = v[46]
															v[47] = i.Model.KApplyArg(v[19], 11)
															// KVariable _24 = v[47]
															v[48] = i.Model.KApplyArg(v[19], 12)
															// KVariable _25 = v[48]
															v[49] = i.Model.KApplyArg(v[19], 13)
															// KVariable _26 = v[49]
															v[50] = i.Model.KApplyArg(v[19], 14)
															// KVariable _27 = v[50]
															v[51] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[51]
															// rule #206
															// source: iele.k @779
															// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(_348,CELL,_349,_42))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_348),isOperand(_349)),isMap(LM)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),`_==Int_`(_42,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(0851110467ed04ecfdeaf84c9ffc75ab9de4bc61ac6524abc960273fb2fe2908) contentStartColumn(10) contentStartLine(779) org.kframework.attributes.Location(Location(779,10,781,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_348),isOperand(_349)),#token("true","Bool")),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),`_==Int_`(_42,#token("0","Int")))
																v[52], i.evalErr = i.evalIsOperand( // isOperand(_348)
																	v[5] /*_348*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isOperand(_348),isOperand(_349))
																bv[3] = m.IsTrue(v[52])
																if bv[3] {
																	v[53], i.evalErr = i.evalIsOperand( // isOperand(_349)
																		v[7] /*_349*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[3] = m.IsTrue(v[53])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_348),isOperand(_349)),#token("true","Bool")),isOperand(CELL))
																bv[2] = bv[3] /* && */ /* rhs precomputed isMap(LM) */ 
																if bv[2] {
																	v[54], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																		v[6] /*CELL*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[54])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_348),isOperand(_349)),#token("true","Bool")),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
																bv[1] = bv[2]
																if bv[1] {
																	v[55], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(CELL,LM)
																		v[6] /*CELL*/,
																		v[34] /*LM*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = !(m.IsTrue(v[55]))
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_348),isOperand(_349)),#token("true","Bool")),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),`_==Int_`(_42,#token("0","Int")))
																bv[0] = bv[1]
																if bv[0] {
																	v[56], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_42,#token("0","Int"))
																		v[8] /*_42*/,
																		/* rhs KToken */ m.IntZero,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[56])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS206(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 234, 370, 454, 457
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXcommaXuXuIELEXhyphenCOMMON2 { // `log_,__IELE-COMMON`(MEMINDEX,operandList(W0,`.List{"operandList"}`(.KList)))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 234
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable MEMINDEX = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W0,`.List{"operandList"}`(.KList))
								v[7] = i.Model.KApplyArg(v[6], 0)
								if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W0 = v[7]
									v[8] = i.Model.KApplyArg(v[6], 1)
									if v[8]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
										// KVariable DotVar1 = v[3]
										v[9] = i.Model.KApplyArg(c, 1)
										if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[10] = i.Model.KApplyArg(v[9], 0)
											if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[13] = i.Model.KApplyArg(v[11], 0)
													if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[12]
														v[14] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[14]
														v[15] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[15]
														v[16] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[16]
														v[17] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[17]
														v[18] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[18]
														v[19] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[19]
														v[20] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[20]
														// rule #234
														// source: iele.k @1044
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,`.List{"operandList"}`(.KList))))=>`#log___IELE`(MEMINDEX,`ListItem`(chop(W0)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(MEMINDEX),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(b2cefe962f7d255db474c7355ef8ac226d13c4ba33f346fb56ba450f857a9acf) contentStartColumn(10) contentStartLine(1044) org.kframework.attributes.Location(Location(1044,10,1044,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES precomputed isInt(MEMINDEX) && isInt(W0)
															// RHS
															return i.stepRHS234(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 370
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable MEMINDEX = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W0,operandList(W1,operandList(W2,`.List{"operandList"}`(.KList))))
								v[7] = i.Model.KApplyArg(v[6], 0)
								if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W0 = v[7]
									v[8] = i.Model.KApplyArg(v[6], 1)
									if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W1,operandList(W2,`.List{"operandList"}`(.KList)))
										v[9] = i.Model.KApplyArg(v[8], 0)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable W1 = v[9]
											v[10] = i.Model.KApplyArg(v[8], 1)
											if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W2,`.List{"operandList"}`(.KList))
												v[11] = i.Model.KApplyArg(v[10], 0)
												if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable W2 = v[11]
													v[12] = i.Model.KApplyArg(v[10], 1)
													if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
														// KVariable DotVar1 = v[3]
														v[13] = i.Model.KApplyArg(c, 1)
														if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
															v[14] = i.Model.KApplyArg(v[13], 0)
															if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																	v[17] = i.Model.KApplyArg(v[15], 0)
																	if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																		// KVariable SREST = v[16]
																		v[18] = i.Model.KApplyArg(c, 2)
																		// KVariable _0 = v[18]
																		v[19] = i.Model.KApplyArg(c, 3)
																		// KVariable _1 = v[19]
																		v[20] = i.Model.KApplyArg(c, 4)
																		// KVariable _2 = v[20]
																		v[21] = i.Model.KApplyArg(c, 5)
																		// KVariable _3 = v[21]
																		v[22] = i.Model.KApplyArg(c, 6)
																		// KVariable _4 = v[22]
																		v[23] = i.Model.KApplyArg(c, 7)
																		// KVariable _5 = v[23]
																		v[24] = i.Model.KApplyArg(c, 8)
																		// KVariable _6 = v[24]
																		// rule #370
																		// source: iele.k @1046
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,operandList(W2,`.List{"operandList"}`(.KList))))))=>`#log___IELE`(MEMINDEX,`_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W2)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(93b7660ca1e8dc651b860dcf0ba5785b29ecc12a641780af8e6d08015f97b0d6) contentStartColumn(10) contentStartLine(1046) org.kframework.attributes.Location(Location(1046,10,1046,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES precomputed isInt(MEMINDEX) && isInt(W2) && isInt(W1) && isInt(W0)
																			// RHS
																			return i.stepRHS370(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 454
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable MEMINDEX = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W0,operandList(W1,operandList(W2,operandList(W3,`.List{"operandList"}`(.KList)))))
								v[7] = i.Model.KApplyArg(v[6], 0)
								if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W0 = v[7]
									v[8] = i.Model.KApplyArg(v[6], 1)
									if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W1,operandList(W2,operandList(W3,`.List{"operandList"}`(.KList))))
										v[9] = i.Model.KApplyArg(v[8], 0)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable W1 = v[9]
											v[10] = i.Model.KApplyArg(v[8], 1)
											if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W2,operandList(W3,`.List{"operandList"}`(.KList)))
												v[11] = i.Model.KApplyArg(v[10], 0)
												if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable W2 = v[11]
													v[12] = i.Model.KApplyArg(v[10], 1)
													if v[12]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W3,`.List{"operandList"}`(.KList))
														v[13] = i.Model.KApplyArg(v[12], 0)
														if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable W3 = v[13]
															v[14] = i.Model.KApplyArg(v[12], 1)
															if v[14]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																// KVariable DotVar1 = v[3]
																v[15] = i.Model.KApplyArg(c, 1)
																if v[15]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
																	v[16] = i.Model.KApplyArg(v[15], 0)
																	if v[16]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																		_, v[17], v[18] = i.Model.KSequenceSplitHeadTail(v[16]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																		if v[17]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																			v[19] = i.Model.KApplyArg(v[17], 0)
																			if i.Model.Equals(v[19], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																				// KVariable SREST = v[18]
																				v[20] = i.Model.KApplyArg(c, 2)
																				// KVariable _0 = v[20]
																				v[21] = i.Model.KApplyArg(c, 3)
																				// KVariable _1 = v[21]
																				v[22] = i.Model.KApplyArg(c, 4)
																				// KVariable _2 = v[22]
																				v[23] = i.Model.KApplyArg(c, 5)
																				// KVariable _3 = v[23]
																				v[24] = i.Model.KApplyArg(c, 6)
																				// KVariable _4 = v[24]
																				v[25] = i.Model.KApplyArg(c, 7)
																				// KVariable _5 = v[25]
																				v[26] = i.Model.KApplyArg(c, 8)
																				// KVariable _6 = v[26]
																				// rule #454
																				// source: iele.k @1047
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,operandList(W2,operandList(W3,`.List{"operandList"}`(.KList)))))))=>`#log___IELE`(MEMINDEX,`_List_`(`_List_`(`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))),`ListItem`(chop(W2))),`ListItem`(chop(W3))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W2)),isInt(W3)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(7bc276a775acc34d1fe72094f574bc8ae35ddbef543f11cef214915edbdef7cf) contentStartColumn(10) contentStartLine(1047) org.kframework.attributes.Location(Location(1047,10,1047,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES precomputed isInt(MEMINDEX) && isInt(W2) && isInt(W3) && isInt(W1) && isInt(W0)
																					// RHS
																					return i.stepRHS454(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 457
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable MEMINDEX = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W0,operandList(W1,`.List{"operandList"}`(.KList)))
								v[7] = i.Model.KApplyArg(v[6], 0)
								if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W0 = v[7]
									v[8] = i.Model.KApplyArg(v[6], 1)
									if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(W1,`.List{"operandList"}`(.KList))
										v[9] = i.Model.KApplyArg(v[8], 0)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable W1 = v[9]
											v[10] = i.Model.KApplyArg(v[8], 1)
											if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
												// KVariable DotVar1 = v[3]
												v[11] = i.Model.KApplyArg(c, 1)
												if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
													v[12] = i.Model.KApplyArg(v[11], 0)
													if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
														_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
														if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
															v[15] = i.Model.KApplyArg(v[13], 0)
															if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																// KVariable SREST = v[14]
																v[16] = i.Model.KApplyArg(c, 2)
																// KVariable _0 = v[16]
																v[17] = i.Model.KApplyArg(c, 3)
																// KVariable _1 = v[17]
																v[18] = i.Model.KApplyArg(c, 4)
																// KVariable _2 = v[18]
																v[19] = i.Model.KApplyArg(c, 5)
																// KVariable _3 = v[19]
																v[20] = i.Model.KApplyArg(c, 6)
																// KVariable _4 = v[20]
																v[21] = i.Model.KApplyArg(c, 7)
																// KVariable _5 = v[21]
																v[22] = i.Model.KApplyArg(c, 8)
																// KVariable _6 = v[22]
																// rule #457
																// source: iele.k @1045
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`log_,__IELE-COMMON`(MEMINDEX,operandList(W0,operandList(W1,`.List{"operandList"}`(.KList)))))=>`#log___IELE`(MEMINDEX,`_List_`(`ListItem`(chop(W0)),`ListItem`(chop(W1))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(MEMINDEX),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(c9df21cc71e2866ec9af5419f264aebe403c056a62630ec756dfab8be1013aa9) contentStartColumn(10) contentStartLine(1045) org.kframework.attributes.Location(Location(1045,10,1045,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES precomputed isInt(MEMINDEX) && isInt(W1) && isInt(W0)
																	// RHS
																	return i.stepRHS457(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 236
					if v[4]&kapplyMatchMask == kapplyMatchLblECADDXuIELEXhyphenPRECOMPILED0 { // `ECADD_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList))))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList)))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable X1 = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList))))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable Y1 = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList)))
																		v[32] = i.Model.KApplyArg(v[31], 0)
																		if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable X2 = v[32]
																			v[33] = i.Model.KApplyArg(v[31], 1)
																			if v[33]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(Y2,`.List{"operandList"}`(.KList))
																				v[34] = i.Model.KApplyArg(v[33], 0)
																				if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable Y2 = v[34]
																					v[35] = i.Model.KApplyArg(v[33], 1)
																					if v[35]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																						v[36] = i.Model.KApplyArg(v[20], 6)
																						// KVariable _5 = v[36]
																						v[37] = i.Model.KApplyArg(v[20], 7)
																						// KVariable _6 = v[37]
																						v[38] = i.Model.KApplyArg(v[20], 8)
																						// KVariable _7 = v[38]
																						v[39] = i.Model.KApplyArg(v[20], 9)
																						// KVariable _8 = v[39]
																						v[40] = i.Model.KApplyArg(v[20], 10)
																						// KVariable _9 = v[40]
																						v[41] = i.Model.KApplyArg(v[20], 11)
																						// KVariable _10 = v[41]
																						v[42] = i.Model.KApplyArg(v[20], 12)
																						// KVariable _11 = v[42]
																						v[43] = i.Model.KApplyArg(v[20], 13)
																						// KVariable _12 = v[43]
																						v[44] = i.Model.KApplyArg(v[20], 14)
																						// KVariable _13 = v[44]
																						v[45] = i.Model.KApplyArg(v[15], 5)
																						// KVariable _18 = v[45]
																						v[46] = i.Model.KApplyArg(v[15], 6)
																						// KVariable _19 = v[46]
																						v[47] = i.Model.KApplyArg(v[15], 7)
																						// KVariable _20 = v[47]
																						v[48] = i.Model.KApplyArg(v[15], 8)
																						// KVariable _21 = v[48]
																						v[49] = i.Model.KApplyArg(v[15], 9)
																						// KVariable _22 = v[49]
																						v[50] = i.Model.KApplyArg(v[15], 10)
																						// KVariable _23 = v[50]
																						v[51] = i.Model.KApplyArg(v[15], 11)
																						// KVariable _24 = v[51]
																						v[52] = i.Model.KApplyArg(v[15], 12)
																						// KVariable _25 = v[52]
																						v[53] = i.Model.KApplyArg(v[15], 13)
																						// KVariable _26 = v[53]
																						v[54] = i.Model.KApplyArg(v[15], 14)
																						// KVariable _27 = v[54]
																						v[55] = i.Model.KApplyArg(c, 8)
																						// KVariable _33 = v[55]
																						// rule #236
																						// source: iele.k @1677
																						// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECADD_IELE-PRECOMPILED`(.KList))=>#ecadd(`(_,_)_KRYPTO`(X1,Y1),`(_,_)_KRYPTO`(X2,Y2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X1,operandList(Y1,operandList(X2,operandList(Y2,`.List{"operandList"}`(.KList)))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(Y2),isInt(X2)),isInt(X1)),isInt(Y1)) ensures #token("true","Bool") [UNIQUE_ID(fd0191d4329875325b0c8b588ce7bd18aa37f6f2356b0f4ab2540ff4a52f25e0) contentStartColumn(10) contentStartLine(1677) org.kframework.attributes.Location(Location(1677,10,1678,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																						if !matched {
																							// REQUIRES precomputed isInt(Y2) && isInt(X2) && isInt(X1) && isInt(Y1)
																							// RHS
																							return i.stepRHS236(v, bv, config)
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 255, 300, 315
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=expmod_,_,__IELE-COMMON`(REG,W0,W1,_41)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 255
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable W1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _41 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #255
											// source: iele.k @839
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,_41))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_41,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d3350416190cd16222bd80c374bcc18da4b46d58c7e54f22040b9585b4ff0cbf) contentStartColumn(10) contentStartLine(839) org.kframework.attributes.Location(Location(839,10,839,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_41,#token("0","Int")))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(W0)
													v[6] /*W0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isOperand(W0),isOperand(W1))
												bv[2] = m.IsTrue(v[21])
												if bv[2] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(W1)
														v[7] /*W1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG))
												bv[1] = bv[2]
												if bv[1] {
													v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isOperand(W1)),isLValue(REG)),`_==Int_`(_41,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_41,#token("0","Int"))
														v[8] /*_41*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[24])
												}
												if bv[0] {
													// RHS
													return i.stepRHS255(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 300
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #300
													// source: iele.k @838
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,powmod(W0,W1,W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_andBool_`(`_=/=Int__INT`(W2,#token("0","Int")),`_orBool__BOOL`(`_>=Int__INT`(W1,#token("0","Int")),`_==Int_`(gcdInt(W0,W2),#token("1","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(1885607fe23d4300050c7deee08e0b4781648f54ec838d6d3c6d206bf61b9e00) contentStartColumn(10) contentStartLine(838) org.kframework.attributes.Location(Location(838,10,838,160)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(W2,#token("0","Int")),`_orBool__BOOL`(`_>=Int__INT`(W1,#token("0","Int")),`_==Int_`(gcdInt(W0,W2),#token("1","Int")))))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(W2,#token("0","Int")),`_orBool__BOOL`(`_>=Int__INT`(W1,#token("0","Int")),`_==Int_`(gcdInt(W0,W2),#token("1","Int")))))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W2,#token("0","Int"))
																v[8] /*W2*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_=/=Int__INT`(W2,#token("0","Int")),`_orBool__BOOL`(`_>=Int__INT`(W1,#token("0","Int")),`_==Int_`(gcdInt(W0,W2),#token("1","Int"))))
															bv[1] = m.IsTrue(v[22])
															if bv[1] {
																v[23], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(W1,#token("0","Int"))
																	v[7] /*W1*/,
																	/* rhs KToken */ m.IntZero,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_orBool__BOOL`(`_>=Int__INT`(W1,#token("0","Int")),`_==Int_`(gcdInt(W0,W2),#token("1","Int")))
																bv[2] = m.IsTrue(v[23])
																if !bv[2] {
																	v[25], i.evalErr = i.evalGcdInt( // gcdInt(W0,W2)
																		v[6] /*W0*/,
																		v[8] /*W2*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(gcdInt(W0,W2),#token("1","Int"))
																		v[25],
																		/* rhs KToken */ constInt1,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[24])
																}
																bv[1] = bv[2]
															}
															bv[0] = bv[1]
														}
														if bv[0] {
															// RHS
															return i.stepRHS300(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 315
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #315
													// source: iele.k @840
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=expmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_andBool_`(`_<Int__INT`(W1,#token("0","Int")),`_=/=Int__INT`(gcdInt(W0,W2),#token("1","Int")))) ensures #token("true","Bool") [UNIQUE_ID(679cee29d8464c344e5d483e0c27d3f0865279255eafe96c09118e26fb8a4dcc) contentStartColumn(10) contentStartLine(840) org.kframework.attributes.Location(Location(840,10,840,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_<Int__INT`(W1,#token("0","Int")),`_=/=Int__INT`(gcdInt(W0,W2),#token("1","Int"))))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_<Int__INT`(W1,#token("0","Int")),`_=/=Int__INT`(gcdInt(W0,W2),#token("1","Int"))))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(W1,#token("0","Int"))
																v[7] /*W1*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_<Int__INT`(W1,#token("0","Int")),`_=/=Int__INT`(gcdInt(W0,W2),#token("1","Int")))
															bv[1] = m.IsTrue(v[22])
															if bv[1] {
																v[24], i.evalErr = i.evalGcdInt( // gcdInt(W0,W2)
																	v[6] /*W0*/,
																	v[8] /*W2*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[23], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(gcdInt(W0,W2),#token("1","Int"))
																	v[24],
																	/* rhs KToken */ constInt1,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[23])
															}
															bv[0] = bv[1]
														}
														if bv[0] {
															// RHS
															return i.stepRHS315(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 262
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=add_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #262
												// source: iele.k @824
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=add_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_+Int_`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(c91264bedf90bc097532c4837961dd6c115466c4ae723bfd1a1ff09a7f4cb7cb) contentStartColumn(10) contentStartLine(824) org.kframework.attributes.Location(Location(824,10,824,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS262(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 264
					if v[4]&kapplyMatchMask == kapplyMatchLblIDXuIELEXhyphenPRECOMPILED0 { // `ID_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _27 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_138),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(DATA),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[16] = i.Model.KApplyArg(v[15], 0)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_138)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _138 = v[17]
												v[18] = i.Model.KApplyArg(v[15], 1)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[15], 2)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[15], 3)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[15], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(DATA),_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(DATA)
														v[28] = i.Model.KApplyArg(v[27], 0)
														// KVariable DATA = v[28]
														v[29] = i.Model.KApplyArg(v[21], 6)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[21], 7)
														// KVariable _6 = v[30]
														v[31] = i.Model.KApplyArg(v[21], 8)
														// KVariable _7 = v[31]
														v[32] = i.Model.KApplyArg(v[21], 9)
														// KVariable _8 = v[32]
														v[33] = i.Model.KApplyArg(v[21], 10)
														// KVariable _9 = v[33]
														v[34] = i.Model.KApplyArg(v[21], 11)
														// KVariable _10 = v[34]
														v[35] = i.Model.KApplyArg(v[21], 12)
														// KVariable _11 = v[35]
														v[36] = i.Model.KApplyArg(v[21], 13)
														// KVariable _12 = v[36]
														v[37] = i.Model.KApplyArg(v[21], 14)
														// KVariable _13 = v[37]
														v[38] = i.Model.KApplyArg(v[15], 5)
														// KVariable _17 = v[38]
														v[39] = i.Model.KApplyArg(v[15], 6)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[15], 7)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[15], 8)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[15], 9)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[15], 10)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[15], 11)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[15], 12)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[15], 13)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[15], 14)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(c, 8)
														// KVariable _32 = v[48]
														// rule #264
														// source: iele.k @1671
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ID_IELE-PRECOMPILED`(.KList))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(`<output>`(_138=>DATA),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(DATA),_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(isInts(DATA),isInts(_138)) ensures #token("true","Bool") [UNIQUE_ID(727108eea978ae88b35a7040942a7179d1a93a6b47c25c897c1580dca87e6550) contentStartColumn(10) contentStartLine(1671) org.kframework.attributes.Location(Location(1671,10,1673,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES `_andBool_`(isInts(DATA),isInts(_138))
															v[49], i.evalErr = i.evalIsInts( // isInts(DATA)
																v[28] /*DATA*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isInts(DATA),isInts(_138))
															bv[0] = m.IsTrue(v[49])
															if bv[0] {
																v[50], i.evalErr = i.evalIsInts( // isInts(_138)
																	v[17] /*_138*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[50])
															}
															if bv[0] {
																// RHS
																return i.stepRHS264(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 267
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=xor_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #267
												// source: iele.k @854
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=xor_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_xorInt__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(22bcd4cadcc9d7782ea5dee1dfd2f23fecbd9b1d8ade3989f308d659ec472837) contentStartColumn(10) contentStartLine(854) org.kframework.attributes.Location(Location(854,10,854,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS267(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 272
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sub_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #272
												// source: iele.k @826
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sub_,__IELE-COMMON`(REG,W0,W1))=>`#load___IELE`(REG,`_-Int__INT`(W0,W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(05f5360b14904d9574125ff41b40505a1e4434b6fe5e2599e98bc77472da9c51) contentStartColumn(10) contentStartLine(826) org.kframework.attributes.Location(Location(826,10,826,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS272(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 287
					if v[4]&kapplyMatchMask == kapplyMatchLblRevertXuXuIELEXhyphenCOMMON1 { // `revert__IELE-COMMON`(VALUE)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _14 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _15 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _16 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _17 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _18 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_342),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[17] = i.Model.KApplyArg(v[16], 0)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_342)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _342 = v[18]
													v[19] = i.Model.KApplyArg(v[16], 1)
													// KVariable _0 = v[19]
													v[20] = i.Model.KApplyArg(v[16], 2)
													// KVariable _1 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 3)
													// KVariable _2 = v[21]
													v[22] = i.Model.KApplyArg(v[16], 4)
													// KVariable _3 = v[22]
													v[23] = i.Model.KApplyArg(v[16], 5)
													// KVariable _4 = v[23]
													v[24] = i.Model.KApplyArg(v[16], 6)
													// KVariable _5 = v[24]
													v[25] = i.Model.KApplyArg(v[16], 7)
													// KVariable _6 = v[25]
													v[26] = i.Model.KApplyArg(v[16], 8)
													// KVariable _7 = v[26]
													v[27] = i.Model.KApplyArg(v[16], 9)
													// KVariable _8 = v[27]
													v[28] = i.Model.KApplyArg(v[16], 10)
													// KVariable _9 = v[28]
													v[29] = i.Model.KApplyArg(v[16], 11)
													// KVariable _10 = v[29]
													v[30] = i.Model.KApplyArg(v[16], 12)
													// KVariable _11 = v[30]
													v[31] = i.Model.KApplyArg(v[16], 13)
													// KVariable _12 = v[31]
													v[32] = i.Model.KApplyArg(v[16], 14)
													// KVariable _13 = v[32]
													v[33] = i.Model.KApplyArg(c, 8)
													// KVariable _19 = v[33]
													// rule #287
													// source: iele.k @1026
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`revert__IELE-COMMON`(VALUE))=>`#revert__IELE-INFRASTRUCTURE`(VALUE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_342=>`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInt(VALUE),isInts(_342)) ensures #token("true","Bool") [UNIQUE_ID(92e84c79a5de0c9df5604b95b1d1062f9c396c27e328ac57b5a9ff8d472acdb5) contentStartColumn(10) contentStartLine(1026) org.kframework.attributes.Location(Location(1026,10,1027,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(#token("true","Bool"),isInts(_342))
														v[34], i.evalErr = i.evalIsInts( // isInts(_342)
															v[18] /*_342*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if /* rhs precomputed isInt(VALUE) */ /* && */ m.IsTrue(v[34]) {
															// RHS
															return i.stepRHS287(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 288, 341
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqiszeroXuXuIELEXhyphenCOMMON2 { // `_=iszero__IELE-COMMON`(REG,_29)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 288
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _29 = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #288
											// source: iele.k @820
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=iszero__IELE-COMMON`(REG,_29))=>`#load___IELE`(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),`_==Int_`(_29,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(896234d5d9ad2df05d1ace5b0902624f7b95db0e6f17d7af0413804343539e87) contentStartColumn(10) contentStartLine(820) org.kframework.attributes.Location(Location(820,10,820,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(isLValue(REG),`_==Int_`(_29,#token("0","Int")))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(REG),`_==Int_`(_29,#token("0","Int")))
												bv[0] = m.IsTrue(v[19])
												if bv[0] {
													v[20], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_29,#token("0","Int"))
														v[6] /*_29*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[20])
												}
												if bv[0] {
													// RHS
													return i.stepRHS288(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 341
						// KVariable W = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #341
										// source: iele.k @821
										// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=iszero__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W)),`_=/=K_`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(cc6a5e08f25cf714fdd36fcec4f9db61a975c4190ee21596c42a886006ec6324) contentStartColumn(10) contentStartLine(821) org.kframework.attributes.Location(Location(821,10,821,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W)),`_=/=K_`(W,#token("0","Int")))
											v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
												v[5] /*REG*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(REG),isOperand(W))
											bv[1] = m.IsTrue(v[19])
											if bv[1] {
												v[20], i.evalErr = i.evalIsOperand( // isOperand(W)
													v[6] /*W*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[20])
											}
											// `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W)),`_=/=K_`(W,#token("0","Int")))
											bv[0] = bv[1]
											if bv[0] {
												v[21], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(W,#token("0","Int"))
													v[6] /*W*/,
													/* rhs KToken */ m.IntZero,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[21])
											}
											if bv[0] {
												// RHS
												return i.stepRHS341(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 303
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(_433,_434,ACCT)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _433 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _434 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _4 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _5 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _6 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _7 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _8 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _9 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
												v[20] = i.Model.KApplyArg(v[19], 0)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
													v[21] = i.Model.KApplyArg(v[20], 0)
													if v[21]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
														// KVariable ACCTS = v[21]
														v[22] = i.Model.KApplyArg(v[19], 1)
														// KVariable _0 = v[22]
														v[23] = i.Model.KApplyArg(v[19], 2)
														// KVariable _1 = v[23]
														v[24] = i.Model.KApplyArg(v[19], 3)
														// KVariable _2 = v[24]
														v[25] = i.Model.KApplyArg(v[19], 4)
														// KVariable _3 = v[25]
														// rule #303
														// source: iele.k @1099
														// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(_433,_434,ACCT))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCT),isLValue(_433)),isGlobalName(_434)),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(f68e3ac7406ad8742db8311664ea0546d9cf75c907d2329bb55adbc43df6bb69) contentStartColumn(10) contentStartLine(1099) org.kframework.attributes.Location(Location(1099,10,1101,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_433)),isGlobalName(_434)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
															v[26], i.evalErr = i.evalIsLValue( // isLValue(_433)
																v[5] /*_433*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_433)),isGlobalName(_434))
															bv[1] = /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[26])
															if bv[1] {
																v[27], i.evalErr = i.evalIsGlobalName( // isGlobalName(_434)
																	v[6] /*_434*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[27])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_433)),isGlobalName(_434)),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isSet(ACCTS) */ 
															if bv[0] {
																v[28], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																	v[7] /*ACCT*/,
																	v[21] /*ACCTS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[28]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS303(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 308, 349
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqlog2XuXuIELEXhyphenCOMMON2 { // `_=log2__IELE-COMMON`(REG,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 308
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #308
											// source: iele.k @850
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=log2__IELE-COMMON`(REG,W))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W)),`_<=Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(cf2896ca8fd5a0fb57f85674b06edd0992740ef54aaa7c4c008b285d7c515fd5) contentStartColumn(10) contentStartLine(850) org.kframework.attributes.Location(Location(850,10,850,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_<=Int__INT`(W,#token("0","Int")))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),`_<=Int__INT`(W,#token("0","Int")))
												bv[0] = m.IsTrue(v[19]) /* && */ /* rhs precomputed isInt(W) */ 
												if bv[0] {
													v[20], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(W,#token("0","Int"))
														v[6] /*W*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[20])
												}
												if bv[0] {
													// RHS
													return i.stepRHS308(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 349
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #349
											// source: iele.k @849
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=log2__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,log2Int(W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(W),isLValue(REG)),`_>Int__INT`(W,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(d5f643a9264ae3e5c20ba3288e83df1ade94eeb72037f6096df58da65ea8c5dd) contentStartColumn(10) contentStartLine(849) org.kframework.attributes.Location(Location(849,10,849,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),`_>Int__INT`(W,#token("0","Int")))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),`_>Int__INT`(W,#token("0","Int")))
												bv[0] = /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[19])
												if bv[0] {
													v[20], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(W,#token("0","Int"))
														v[6] /*W*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[20])
												}
												if bv[0] {
													// RHS
													return i.stepRHS349(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 369, 385
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,_27)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 369
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable W1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _27 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #369
											// source: iele.k @837
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,_27))=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),isOperand(W1)),`_==Int_`(_27,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(17c807272b2a5875227f95228e9aa1df1cca4ca459a7abd56b8ebcc2b17730a3) contentStartColumn(10) contentStartLine(837) org.kframework.attributes.Location(Location(837,10,837,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),isOperand(W1)),`_==Int_`(_27,#token("0","Int")))
												v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(REG),isOperand(W0))
												bv[2] = m.IsTrue(v[21])
												if bv[2] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(W0)
														v[6] /*W0*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),isOperand(W1))
												bv[1] = bv[2]
												if bv[1] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(W1)
														v[7] /*W1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(W0)),isOperand(W1)),`_==Int_`(_27,#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_27,#token("0","Int"))
														v[8] /*_27*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[24])
												}
												if bv[0] {
													// RHS
													return i.stepRHS369(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 385
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #385
													// source: iele.k @836
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>`#load___IELE`(REG,`_%Int__INT`(`_*Int__INT`(W0,W1),W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isLValue(REG)),isInt(W1)),isInt(W0)),`_=/=Int__INT`(W2,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(3c25e1535251d12f630fc4336db6d193b1c7974e200d4fec1678d251265a8db9) contentStartColumn(10) contentStartLine(836) org.kframework.attributes.Location(Location(836,10,836,109)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W2,#token("0","Int")))
														v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(W2,#token("0","Int")))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */ 
														if bv[0] {
															v[22], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(W2,#token("0","Int"))
																v[8] /*W2*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS385(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 409
					if v[4]&kapplyMatchMask == kapplyMatchLblECPAIRINGXuIELEXhyphenPRECOMPILED0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(G1,operandList(G2,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(G1,operandList(G2,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(G1,operandList(G2,`.List{"operandList"}`(.KList)))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(G1,operandList(G2,`.List{"operandList"}`(.KList))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(G1,operandList(G2,`.List{"operandList"}`(.KList)))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable G1 = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(G2,`.List{"operandList"}`(.KList))
																		v[32] = i.Model.KApplyArg(v[31], 0)
																		if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable G2 = v[32]
																			v[33] = i.Model.KApplyArg(v[31], 1)
																			if v[33]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																				v[34] = i.Model.KApplyArg(v[20], 6)
																				// KVariable _5 = v[34]
																				v[35] = i.Model.KApplyArg(v[20], 7)
																				// KVariable _6 = v[35]
																				v[36] = i.Model.KApplyArg(v[20], 8)
																				// KVariable _7 = v[36]
																				v[37] = i.Model.KApplyArg(v[20], 9)
																				// KVariable _8 = v[37]
																				v[38] = i.Model.KApplyArg(v[20], 10)
																				// KVariable _9 = v[38]
																				v[39] = i.Model.KApplyArg(v[20], 11)
																				// KVariable _10 = v[39]
																				v[40] = i.Model.KApplyArg(v[20], 12)
																				// KVariable _11 = v[40]
																				v[41] = i.Model.KApplyArg(v[20], 13)
																				// KVariable _12 = v[41]
																				v[42] = i.Model.KApplyArg(v[20], 14)
																				// KVariable _13 = v[42]
																				v[43] = i.Model.KApplyArg(v[15], 5)
																				// KVariable _18 = v[43]
																				v[44] = i.Model.KApplyArg(v[15], 6)
																				// KVariable _19 = v[44]
																				v[45] = i.Model.KApplyArg(v[15], 7)
																				// KVariable _20 = v[45]
																				v[46] = i.Model.KApplyArg(v[15], 8)
																				// KVariable _21 = v[46]
																				v[47] = i.Model.KApplyArg(v[15], 9)
																				// KVariable _22 = v[47]
																				v[48] = i.Model.KApplyArg(v[15], 10)
																				// KVariable _23 = v[48]
																				v[49] = i.Model.KApplyArg(v[15], 11)
																				// KVariable _24 = v[49]
																				v[50] = i.Model.KApplyArg(v[15], 12)
																				// KVariable _25 = v[50]
																				v[51] = i.Model.KApplyArg(v[15], 13)
																				// KVariable _26 = v[51]
																				v[52] = i.Model.KApplyArg(v[15], 14)
																				// KVariable _27 = v[52]
																				v[53] = i.Model.KApplyArg(c, 8)
																				// KVariable _33 = v[53]
																				// rule #409
																				// source: iele.k @1705
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>#ecpairing(`.List`(.KList),`.List`(.KList),`Int2Bytes`(`_*Int__INT`(chop(LEN),#token("64","Int")),G1,littleEndianBytes(.KList)),`Int2Bytes`(`_*Int__INT`(chop(LEN),#token("128","Int")),G2,littleEndianBytes(.KList)),LEN)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(G1,operandList(G2,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isInt(G1)),isInt(G2)) ensures #token("true","Bool") [UNIQUE_ID(d81f60ef49358ba06c598f90a3eea23aedce9e26977610c0ba6d23bdb66c0311) contentStartColumn(10) contentStartLine(1705) org.kframework.attributes.Location(Location(1705,10,1706,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES precomputed isInt(LEN) && isInt(G1) && isInt(G2)
																					// RHS
																					return i.stepRHS409(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 415
					if v[4]&kapplyMatchMask == kapplyMatchLblECMULXuIELEXhyphenPRECOMPILED0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X,operandList(Y,operandList(S,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X,operandList(Y,operandList(S,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(X,operandList(Y,operandList(S,`.List{"operandList"}`(.KList)))))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if v[27]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(X,operandList(Y,operandList(S,`.List{"operandList"}`(.KList))))
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable X = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															if v[29]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(Y,operandList(S,`.List{"operandList"}`(.KList)))
																v[30] = i.Model.KApplyArg(v[29], 0)
																if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable Y = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	if v[31]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(S,`.List{"operandList"}`(.KList))
																		v[32] = i.Model.KApplyArg(v[31], 0)
																		if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable S = v[32]
																			v[33] = i.Model.KApplyArg(v[31], 1)
																			if v[33]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																				v[34] = i.Model.KApplyArg(v[20], 6)
																				// KVariable _5 = v[34]
																				v[35] = i.Model.KApplyArg(v[20], 7)
																				// KVariable _6 = v[35]
																				v[36] = i.Model.KApplyArg(v[20], 8)
																				// KVariable _7 = v[36]
																				v[37] = i.Model.KApplyArg(v[20], 9)
																				// KVariable _8 = v[37]
																				v[38] = i.Model.KApplyArg(v[20], 10)
																				// KVariable _9 = v[38]
																				v[39] = i.Model.KApplyArg(v[20], 11)
																				// KVariable _10 = v[39]
																				v[40] = i.Model.KApplyArg(v[20], 12)
																				// KVariable _11 = v[40]
																				v[41] = i.Model.KApplyArg(v[20], 13)
																				// KVariable _12 = v[41]
																				v[42] = i.Model.KApplyArg(v[20], 14)
																				// KVariable _13 = v[42]
																				v[43] = i.Model.KApplyArg(v[15], 5)
																				// KVariable _18 = v[43]
																				v[44] = i.Model.KApplyArg(v[15], 6)
																				// KVariable _19 = v[44]
																				v[45] = i.Model.KApplyArg(v[15], 7)
																				// KVariable _20 = v[45]
																				v[46] = i.Model.KApplyArg(v[15], 8)
																				// KVariable _21 = v[46]
																				v[47] = i.Model.KApplyArg(v[15], 9)
																				// KVariable _22 = v[47]
																				v[48] = i.Model.KApplyArg(v[15], 10)
																				// KVariable _23 = v[48]
																				v[49] = i.Model.KApplyArg(v[15], 11)
																				// KVariable _24 = v[49]
																				v[50] = i.Model.KApplyArg(v[15], 12)
																				// KVariable _25 = v[50]
																				v[51] = i.Model.KApplyArg(v[15], 13)
																				// KVariable _26 = v[51]
																				v[52] = i.Model.KApplyArg(v[15], 14)
																				// KVariable _27 = v[52]
																				v[53] = i.Model.KApplyArg(c, 8)
																				// KVariable _33 = v[53]
																				// rule #415
																				// source: iele.k @1689
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ECMUL_IELE-PRECOMPILED`(.KList))=>#ecmul(`(_,_)_KRYPTO`(X,Y),S)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(X,operandList(Y,operandList(S,`.List{"operandList"}`(.KList))))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(S),isInt(Y)),isInt(X)) ensures #token("true","Bool") [UNIQUE_ID(99c6cac22e3f14a7c3e05dbb0eb27331be47e25f4d675d1a76fb2781380453ba) contentStartColumn(10) contentStartLine(1689) org.kframework.attributes.Location(Location(1689,10,1690,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES precomputed isInt(S) && isInt(Y) && isInt(X)
																					// RHS
																					return i.stepRHS415(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 426
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=twos_,__IELE-COMMON`(REG,WIDTH,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #426
												// source: iele.k @845
												// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=twos_,__IELE-COMMON`(REG,WIDTH,W))=>`#load___IELE`(REG,twos(chop(WIDTH),W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(W),isInt(WIDTH)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(90fe5c33eab9a294d76dae7348b53c7d9f8a07176aad12ba09f4532d350f6bd4) contentStartColumn(10) contentStartLine(845) org.kframework.attributes.Location(Location(845,10,845,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if /* rhs precomputed isInt(W) && isInt(WIDTH) */ /* && */ m.IsTrue(v[20]) {
														// RHS
														return i.stepRHS426(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 427
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(REG,CELL)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[32] = i.Model.KApplyArg(v[31], 0)
													if v[32]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[49]
														// rule #427
														// source: iele.k @768
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isMap(LM),isLValue(REG)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))) ensures #token("true","Bool") [UNIQUE_ID(08a7f198bd8704a3fb21dc0cc1dc653287b0933f30f037d0a769588ae1b3b51d) contentStartColumn(10) contentStartLine(768) org.kframework.attributes.Location(Location(768,10,770,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
															v[50], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[5] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(CELL))
															bv[1] = /* rhs precomputed isMap(LM) */ /* && */ m.IsTrue(v[50])
															if bv[1] {
																v[51], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																	v[6] /*CELL*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[51])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
															bv[0] = bv[1]
															if bv[0] {
																v[52], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(CELL,LM)
																	v[6] /*CELL*/,
																	v[32] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[52]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS427(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 451
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(_28,LABEL)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _28 = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							// KVariable LABEL = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #451
											// source: iele.k @952
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br_,__IELE-COMMON`(_28,LABEL))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isIeleName(LABEL),`_==Int_`(_28,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(5243a8529f2a9ae1d1266844675077d9d0b577e43adf72b62fecdacd9cc75c34) contentStartColumn(10) contentStartLine(952) org.kframework.attributes.Location(Location(952,10,952,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(isIeleName(LABEL),`_==Int_`(_28,#token("0","Int")))
												v[19], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
													v[6] /*LABEL*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isIeleName(LABEL),`_==Int_`(_28,#token("0","Int")))
												bv[0] = m.IsTrue(v[19])
												if bv[0] {
													v[20], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_28,#token("0","Int"))
														v[5] /*_28*/,
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[20])
												}
												if bv[0] {
													// RHS
													return i.stepRHS451(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 486
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `store_,__IELE-COMMON`(VALUE,CELL)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							// KVariable CELL = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _17 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// KVariable _0 = v[23]
													v[24] = i.Model.KApplyArg(v[22], 1)
													// KVariable _1 = v[24]
													v[25] = i.Model.KApplyArg(v[22], 2)
													// KVariable _2 = v[25]
													v[26] = i.Model.KApplyArg(v[22], 3)
													// KVariable _3 = v[26]
													v[27] = i.Model.KApplyArg(v[22], 4)
													// KVariable _4 = v[27]
													v[28] = i.Model.KApplyArg(v[22], 5)
													// KVariable _5 = v[28]
													v[29] = i.Model.KApplyArg(v[22], 6)
													// KVariable _6 = v[29]
													v[30] = i.Model.KApplyArg(v[22], 7)
													// KVariable _7 = v[30]
													v[31] = i.Model.KApplyArg(v[22], 8)
													if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
														v[32] = i.Model.KApplyArg(v[31], 0)
														if v[32]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															// KVariable LM = v[32]
															v[33] = i.Model.KApplyArg(v[22], 9)
															// KVariable _8 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 10)
															// KVariable _9 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 11)
															// KVariable _10 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 12)
															// KVariable _11 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[17], 5)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[17], 6)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[17], 7)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[17], 8)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[17], 9)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[17], 10)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[17], 11)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[17], 12)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[17], 13)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(v[17], 14)
															// KVariable _27 = v[48]
															v[49] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[49]
															// rule #486
															// source: iele.k @783
															// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,__IELE-COMMON`(VALUE,CELL))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM=>`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==Int_`(VALUE,#token("0","Int")),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))),LM,`_[_<-_]_MAP`(LM,CELL,`Int2BytesNoLen`(VALUE,littleEndianBytes(.KList),signedBytes(.KList))))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(VALUE),isMap(LM)),isOperand(CELL)) ensures #token("true","Bool") [UNIQUE_ID(d697886d832581c166bf2db0df49621b5bcb484ed0148a0e22703c2af7cdb79e) contentStartColumn(10) contentStartLine(783) org.kframework.attributes.Location(Location(783,10,784,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(#token("true","Bool"),isOperand(CELL))
																v[50], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																	v[6] /*CELL*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if /* rhs precomputed isInt(VALUE) && isMap(LM) */ /* && */ m.IsTrue(v[50]) {
																	// RHS
																	return i.stepRHS486(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 539
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqnotXuXuIELEXhyphenCOMMON2 { // `_=not__IELE-COMMON`(REG,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #539
											// source: iele.k @822
											// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=not__IELE-COMMON`(REG,W))=>`#load___IELE`(REG,`~Int__INT`(W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(W),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(09e654ec202a157683ce36b92644aa180754640d4be529022fb905e67786151c) contentStartColumn(10) contentStartLine(822) org.kframework.attributes.Location(Location(822,10,822,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												if /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[19]) {
													// RHS
													return i.stepRHS539(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 542
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,VALUE,GCAP)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,REGS)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable REG = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							// KVariable REGS = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable LABEL = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTTO = v[9]
								v[10] = i.Model.KApplyArg(v[4], 3)
								// KVariable ARGS = v[10]
								v[11] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[11]
									v[12] = i.Model.KApplyArg(v[4], 5)
									if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable GCAP = v[12]
										// KVariable DotVar1 = v[3]
										v[13] = i.Model.KApplyArg(c, 1)
										if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[14] = i.Model.KApplyArg(v[13], 0)
											if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[17] = i.Model.KApplyArg(v[15], 0)
													if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[16]
														v[18] = i.Model.KApplyArg(c, 2)
														// KVariable _27 = v[18]
														v[19] = i.Model.KApplyArg(c, 3)
														// KVariable _28 = v[19]
														v[20] = i.Model.KApplyArg(c, 4)
														if v[20]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
															v[21] = i.Model.KApplyArg(v[20], 0)
															// KVariable SCHED = v[21]
															v[22] = i.Model.KApplyArg(c, 5)
															// KVariable _29 = v[22]
															v[23] = i.Model.KApplyArg(c, 6)
															// KVariable _30 = v[23]
															v[24] = i.Model.KApplyArg(c, 7)
															if v[24]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
																v[25] = i.Model.KApplyArg(v[24], 0)
																// KVariable _13 = v[25]
																v[26] = i.Model.KApplyArg(v[24], 1)
																// KVariable _14 = v[26]
																v[27] = i.Model.KApplyArg(v[24], 2)
																// KVariable _15 = v[27]
																v[28] = i.Model.KApplyArg(v[24], 3)
																// KVariable _16 = v[28]
																v[29] = i.Model.KApplyArg(v[24], 4)
																if v[29]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12)
																	v[30] = i.Model.KApplyArg(v[29], 0)
																	// KVariable _0 = v[30]
																	v[31] = i.Model.KApplyArg(v[29], 1)
																	// KVariable _1 = v[31]
																	v[32] = i.Model.KApplyArg(v[29], 2)
																	// KVariable _2 = v[32]
																	v[33] = i.Model.KApplyArg(v[29], 3)
																	if v[33]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCTFROM)
																		v[34] = i.Model.KApplyArg(v[33], 0)
																		if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable ACCTFROM = v[34]
																			v[35] = i.Model.KApplyArg(v[29], 4)
																			// KVariable _3 = v[35]
																			v[36] = i.Model.KApplyArg(v[29], 5)
																			// KVariable _4 = v[36]
																			v[37] = i.Model.KApplyArg(v[29], 6)
																			// KVariable _5 = v[37]
																			v[38] = i.Model.KApplyArg(v[29], 7)
																			// KVariable _6 = v[38]
																			v[39] = i.Model.KApplyArg(v[29], 8)
																			// KVariable _7 = v[39]
																			v[40] = i.Model.KApplyArg(v[29], 9)
																			// KVariable _8 = v[40]
																			v[41] = i.Model.KApplyArg(v[29], 10)
																			// KVariable _9 = v[41]
																			v[42] = i.Model.KApplyArg(v[29], 11)
																			// KVariable _10 = v[42]
																			v[43] = i.Model.KApplyArg(v[29], 12)
																			// KVariable _11 = v[43]
																			v[44] = i.Model.KApplyArg(v[29], 13)
																			if v[44]&kapplyMatchMask == kapplyMatchLblXltpreviousGasXgt1 { // `<previousGas>`(GAVAIL)
																				v[45] = i.Model.KApplyArg(v[44], 0)
																				if i.tempTypeVar = v[45] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable GAVAIL = v[45]
																					v[46] = i.Model.KApplyArg(v[29], 14)
																					// KVariable _12 = v[46]
																					v[47] = i.Model.KApplyArg(v[24], 5)
																					// KVariable _17 = v[47]
																					v[48] = i.Model.KApplyArg(v[24], 6)
																					// KVariable _18 = v[48]
																					v[49] = i.Model.KApplyArg(v[24], 7)
																					// KVariable _19 = v[49]
																					v[50] = i.Model.KApplyArg(v[24], 8)
																					// KVariable _20 = v[50]
																					v[51] = i.Model.KApplyArg(v[24], 9)
																					// KVariable _21 = v[51]
																					v[52] = i.Model.KApplyArg(v[24], 10)
																					// KVariable _22 = v[52]
																					v[53] = i.Model.KApplyArg(v[24], 11)
																					// KVariable _23 = v[53]
																					v[54] = i.Model.KApplyArg(v[24], 12)
																					// KVariable _24 = v[54]
																					v[55] = i.Model.KApplyArg(v[24], 13)
																					// KVariable _25 = v[55]
																					v[56] = i.Model.KApplyArg(v[24], 14)
																					// KVariable _26 = v[56]
																					v[57] = i.Model.KApplyArg(c, 8)
																					// KVariable _31 = v[57]
																					// rule #542
																					// source: iele.k @1318
																					// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(REG,REGS),LABEL,ACCTTO,ARGS,VALUE,GCAP))=>`#checkCall____IELE`(ACCTFROM,VALUE,GCAP)~>`#call________IELE`(ACCTFROM,ACCTTO,LABEL,`Ccallgas`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,VALUE,#sizeLVals(REGS),`Ccallarg`(SCHED,ARGS)),VALUE,ARGS,#token("false","Bool"))~>`#return___IELE`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,`<schedule>`(SCHED),_29,_30,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,`<previousGas>`(GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isConstant(LABEL)),isInt(ACCTTO)),isInt(VALUE)),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(bb07bce6ec7da23cd1acdf5320331a4689e3e50dadf00ba29c62d958ec1bf290) contentStartColumn(10) contentStartLine(1318) org.kframework.attributes.Location(Location(1318,10,1326,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																					if !matched {
																						// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool"))
																						v[58], i.evalErr = i.evalIsConstant( // isConstant(LABEL)
																							v[8] /*LABEL*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),#token("true","Bool")),isLValues(REGS))
																						bv[3] = /* rhs precomputed isInt(GCAP) */ /* && */ m.IsTrue(v[58]) /* && */ /* rhs precomputed isInt(ACCTTO) */  /* && */ /* rhs precomputed isInt(VALUE) */ 
																						if bv[3] {
																							v[59], i.evalErr = i.evalIsLValues( // isLValues(REGS)
																								v[7] /*REGS*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[3] = m.IsTrue(v[59])
																						}
																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED))
																						bv[2] = bv[3]
																						if bv[2] {
																							v[60], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																								v[21] /*SCHED*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[2] = m.IsTrue(v[60])
																						}
																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG))
																						bv[1] = bv[2]
																						if bv[1] {
																							v[61], i.evalErr = i.evalIsLValue( // isLValue(REG)
																								v[6] /*REG*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[1] = m.IsTrue(v[61])
																						}
																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(LABEL)),#token("true","Bool")),#token("true","Bool")),isLValues(REGS)),isSchedule(SCHED)),isLValue(REG)),#token("true","Bool")),isInts(ARGS))
																						bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																						if bv[0] {
																							v[62], i.evalErr = i.evalIsInts( // isInts(ARGS)
																								v[10] /*ARGS*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[0] = m.IsTrue(v[62])
																						}
																						if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																							// RHS
																							return i.stepRHS542(v, bv, config)
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 548
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable OFFSET = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable WIDTH = v[8]
						// KVariable DotVar1 = v[3]
						v[9] = i.Model.KApplyArg(c, 1)
						if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[13] = i.Model.KApplyArg(v[11], 0)
									if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[12]
										v[14] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[14]
										v[15] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[15]
										v[16] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[16]
										v[17] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[17]
										v[18] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[18]
										v[19] = i.Model.KApplyArg(c, 7)
										if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[20] = i.Model.KApplyArg(v[19], 0)
											// KVariable _14 = v[20]
											v[21] = i.Model.KApplyArg(v[19], 1)
											// KVariable _15 = v[21]
											v[22] = i.Model.KApplyArg(v[19], 2)
											// KVariable _16 = v[22]
											v[23] = i.Model.KApplyArg(v[19], 3)
											// KVariable _17 = v[23]
											v[24] = i.Model.KApplyArg(v[19], 4)
											if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[25] = i.Model.KApplyArg(v[24], 0)
												// KVariable _0 = v[25]
												v[26] = i.Model.KApplyArg(v[24], 1)
												// KVariable _1 = v[26]
												v[27] = i.Model.KApplyArg(v[24], 2)
												// KVariable _2 = v[27]
												v[28] = i.Model.KApplyArg(v[24], 3)
												// KVariable _3 = v[28]
												v[29] = i.Model.KApplyArg(v[24], 4)
												// KVariable _4 = v[29]
												v[30] = i.Model.KApplyArg(v[24], 5)
												// KVariable _5 = v[30]
												v[31] = i.Model.KApplyArg(v[24], 6)
												// KVariable _6 = v[31]
												v[32] = i.Model.KApplyArg(v[24], 7)
												// KVariable _7 = v[32]
												v[33] = i.Model.KApplyArg(v[24], 8)
												if v[33]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[34] = i.Model.KApplyArg(v[33], 0)
													if v[34]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[34]
														v[35] = i.Model.KApplyArg(v[24], 9)
														// KVariable _8 = v[35]
														v[36] = i.Model.KApplyArg(v[24], 10)
														// KVariable _9 = v[36]
														v[37] = i.Model.KApplyArg(v[24], 11)
														// KVariable _10 = v[37]
														v[38] = i.Model.KApplyArg(v[24], 12)
														// KVariable _11 = v[38]
														v[39] = i.Model.KApplyArg(v[24], 13)
														// KVariable _12 = v[39]
														v[40] = i.Model.KApplyArg(v[24], 14)
														// KVariable _13 = v[40]
														v[41] = i.Model.KApplyArg(v[19], 5)
														// KVariable _18 = v[41]
														v[42] = i.Model.KApplyArg(v[19], 6)
														// KVariable _19 = v[42]
														v[43] = i.Model.KApplyArg(v[19], 7)
														// KVariable _20 = v[43]
														v[44] = i.Model.KApplyArg(v[19], 8)
														// KVariable _21 = v[44]
														v[45] = i.Model.KApplyArg(v[19], 9)
														// KVariable _22 = v[45]
														v[46] = i.Model.KApplyArg(v[19], 10)
														// KVariable _23 = v[46]
														v[47] = i.Model.KApplyArg(v[19], 11)
														// KVariable _24 = v[47]
														v[48] = i.Model.KApplyArg(v[19], 12)
														// KVariable _25 = v[48]
														v[49] = i.Model.KApplyArg(v[19], 13)
														// KVariable _26 = v[49]
														v[50] = i.Model.KApplyArg(v[19], 14)
														// KVariable _27 = v[50]
														v[51] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[51]
														// rule #548
														// source: iele.k @761
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`#load___IELE`(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),isMap(LM)),isLValue(REG)),isOperand(WIDTH)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM))) ensures #token("true","Bool") [UNIQUE_ID(78c71d20e7b0bdc265d6ccf99c0bd4f44e64fc3aed9395e0d8b01931b900488c) contentStartColumn(10) contentStartLine(761) org.kframework.attributes.Location(Location(761,10,763,40)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),#token("true","Bool")),isLValue(REG)),isOperand(WIDTH)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
															v[52], i.evalErr = i.evalIsOperand( // isOperand(OFFSET)
																v[7] /*OFFSET*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(isOperand(OFFSET),#token("true","Bool")),isLValue(REG))
															bv[3] = m.IsTrue(v[52]) /* && */ /* rhs precomputed isMap(LM) */ 
															if bv[3] {
																v[53], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[5] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[3] = m.IsTrue(v[53])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),#token("true","Bool")),isLValue(REG)),isOperand(WIDTH))
															bv[2] = bv[3]
															if bv[2] {
																v[54], i.evalErr = i.evalIsOperand( // isOperand(WIDTH)
																	v[8] /*WIDTH*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[54])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),#token("true","Bool")),isLValue(REG)),isOperand(WIDTH)),isOperand(CELL))
															bv[1] = bv[2]
															if bv[1] {
																v[55], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																	v[6] /*CELL*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[55])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OFFSET),#token("true","Bool")),isLValue(REG)),isOperand(WIDTH)),isOperand(CELL)),`notBool_`(`_in_keys(_)_MAP`(CELL,LM)))
															bv[0] = bv[1]
															if bv[0] {
																v[56], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(CELL,LM)
																	v[6] /*CELL*/,
																	v[34] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[56]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS548(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 3, 176, 190, 532
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashloadsXuXuXuIELE2 { // `#loads___IELE`(lvalueList(REG,REGS),operandList(VALUE,VALUES))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 3, 176
					if v[4]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,REGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable REGS = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// rule: 3
						if v[7]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(VALUE,VALUES)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[8]
								v[9] = i.Model.KApplyArg(v[7], 1)
								// KVariable VALUES = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #3
												// source: iele.k @742
												// {| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(lvalueList(REG,REGS),operandList(VALUE,VALUES))=>`#load___IELE`(REG,VALUE)~>`#loads___IELE`(REGS,VALUES)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isLValue(REG)),isInts(VALUES)),isLValues(REGS)) ensures #token("true","Bool") [UNIQUE_ID(fa10d2cf4c396cbcda330bec07de9fdadd300acb455863a7868d4db24cda13c1) contentStartColumn(10) contentStartLine(742) org.kframework.attributes.Location(Location(742,10,742,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isInts(VALUES)),isLValues(REGS))
													v[22], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isInts(VALUES))
													bv[1] = /* rhs precomputed isInt(VALUE) */ /* && */ m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsInts( // isInts(VALUES)
															v[9] /*VALUES*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isInts(VALUES)),isLValues(REGS))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(REGS)
															v[6] /*REGS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS3(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 176
						if v[7]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #176
											// source: iele.k @744
											// {| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(lvalueList(REG,REGS),`.List{"operandList"}`(.KList))=>`#exception__IELE-INFRASTRUCTURE`(#token("2","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isLValues(REGS)) ensures #token("true","Bool") [UNIQUE_ID(99bddfad3114b87f23ed4ce710c739d48458e25c0c7ca1b4a6883e5224b9fa4d) contentStartColumn(10) contentStartLine(744) org.kframework.attributes.Location(Location(744,10,744,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(isLValue(REG),isLValues(REGS))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(REG),isLValues(REGS))
												bv[0] = m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsLValues( // isLValues(REGS)
														v[6] /*REGS*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS176(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 190, 532
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// rule: 190
						if v[5]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[16]
											v[17] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[17]
											// rule #190
											// source: iele.k @743
											// {| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(`.List{"lvalueList"}`(.KList),`.List{"operandList"}`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(629625a9ad8e8ebd3778ecd225c79b080892c073d1b0096a5d0fa1c10e8f4728) contentStartColumn(10) contentStartLine(743) org.kframework.attributes.Location(Location(743,10,743,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// RHS
												return i.stepRHS190(v, bv, config)
											}
										}
									}
								}
							}
						}
						// rule: 532
						if v[5]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(VALUE,VALUES)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								v[7] = i.Model.KApplyArg(v[5], 1)
								// KVariable VALUES = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #532
												// source: iele.k @745
												// {| rule `<generatedTop>`(`<k>`(`` `#loads___IELE`(`.List{"lvalueList"}`(.KList),operandList(VALUE,VALUES))=>`#exception__IELE-INFRASTRUCTURE`(#token("2","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(VALUE),isInts(VALUES)) ensures #token("true","Bool") [UNIQUE_ID(edd7237518e0917746a6aae3339f9b082e5bc2dc4cd9edb08e7b7fb14c2e0f2e) contentStartColumn(10) contentStartLine(745) org.kframework.attributes.Location(Location(745,10,745,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(#token("true","Bool"),isInts(VALUES))
													v[20], i.evalErr = i.evalIsInts( // isInts(VALUES)
														v[7] /*VALUES*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if /* rhs precomputed isInt(VALUE) */ /* && */ m.IsTrue(v[20]) {
														// RHS
														return i.stepRHS532(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 4, 23, 28, 29, 31, 35, 45, 51, 53, 55, 71, 87, 92, 94, 95, 98, 106, 127, 128, 148, 156, 159, 161, 193, 203, 208, 215, 220, 224, 225, 231, 232, 242, 249, 257, 276, 277, 281, 282, 286, 295, 309, 323, 327, 362, 371, 380, 390, 405, 413, 433, 441, 449, 456, 458, 459, 461, 483, 493, 494, 517, 520, 523, 535, 545, 555
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS1 { // `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.caller","IeleName")),`.List{"operandList"}`(.KList)))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 4, 51, 71, 87, 94, 127, 215, 225, 276, 282, 286, 295, 309, 327, 433, 458, 494
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.caller","IeleName")),`.List{"operandList"}`(.KList))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rules: 4, 51, 71, 87, 94, 127, 215, 225, 276, 282, 286, 295, 309, 327, 433, 458
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,`.List{"lvalueList"}`(.KList))
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable REG = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
								v[8] = i.Model.KApplyArg(v[4], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.caller","IeleName"))
									v[9] = i.Model.KApplyArg(v[8], 0)
									// rule: 4
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcaller) { // #token("iele.caller","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #4
															// source: iele-gas.k @178
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.caller","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token("20","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(734a10f3e4e20a23f8937d7625087ac2ea059a46ceddd81ba0553bc9e55fb9a2) contentStartColumn(10) contentStartLine(178) org.kframework.attributes.Location(Location(178,10,178,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS4(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 51
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotbeneficiary) { // #token("iele.beneficiary","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #51
															// source: iele-gas.k @175
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.beneficiary","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token("20","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(2f79a5b7a3c99bbca7eed4ae36b8d5e5dc694ea0b3a173e73c50f4797d75ef21) contentStartColumn(10) contentStartLine(175) org.kframework.attributes.Location(Location(175,10,175,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS51(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 71
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotorigin) { // #token("iele.origin","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #71
															// source: iele-gas.k @177
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.origin","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token("20","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(5645c64a30f1de455876bbc10b180bc2aab84c8b9263b0113b6c931e9793e0a8) contentStartColumn(10) contentStartLine(177) org.kframework.attributes.Location(Location(177,10,177,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS71(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 87
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgas) { // #token("iele.gas","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #87
															// source: iele-gas.k @162
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gas","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(ba487907ca78be8cf2d3f5d3b7b9347c5aaee8d0bbf8d9fb09608884cbb5f2f2) contentStartColumn(10) contentStartLine(162) org.kframework.attributes.Location(Location(162,10,162,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS87(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 94
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgasprice) { // #token("iele.gasprice","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #94
															// source: iele-gas.k @163
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gasprice","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(cb7c734cf744d677ebb15b33d40cc7218ec4219e56a75235cb74d9404cdc068a) contentStartColumn(10) contentStartLine(163) org.kframework.attributes.Location(Location(163,10,163,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS94(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 127
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdottimestamp) { // #token("iele.timestamp","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																v[19] = i.Model.KApplyArg(v[18], 0)
																// KVariable SCHED = v[19]
																v[20] = i.Model.KApplyArg(c, 5)
																// KVariable _2 = v[20]
																v[21] = i.Model.KApplyArg(c, 6)
																// KVariable _3 = v[21]
																v[22] = i.Model.KApplyArg(c, 7)
																// KVariable _4 = v[22]
																v[23] = i.Model.KApplyArg(c, 8)
																// KVariable _5 = v[23]
																// rule #127
																// source: iele-gas.k @184
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.timestamp","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(6a4771f74b22d7494fbd2b522a087a4f9fccee6487a812e95073a2a4674502c4) contentStartColumn(10) contentStartLine(184) org.kframework.attributes.Location(Location(184,10,184,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[19] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	bv[0] = m.IsTrue(v[24])
																	if bv[0] {
																		v[25], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[6] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[25])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS127(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 215
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcodesize) { // #token("iele.codesize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #215
															// source: iele-gas.k @167
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.codesize","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(c6c90b6daf7a0f78324e96697eafff6981de3c16b1228e2cac49f5c38a1d28dd) contentStartColumn(10) contentStartLine(167) org.kframework.attributes.Location(Location(167,10,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS215(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 225
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotbalance) { // #token("iele.balance","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										// KVariable _225 = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
															v[19] = i.Model.KApplyArg(v[18], 0)
															// KVariable SCHED = v[19]
															v[20] = i.Model.KApplyArg(c, 5)
															// KVariable _2 = v[20]
															v[21] = i.Model.KApplyArg(c, 6)
															// KVariable _3 = v[21]
															v[22] = i.Model.KApplyArg(c, 7)
															// KVariable _4 = v[22]
															v[23] = i.Model.KApplyArg(c, 8)
															// KVariable _5 = v[23]
															// rule #225
															// source: iele-gas.k @188
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.balance","IeleName")),_225))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isOperands(_225),isSchedule(SCHED)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(b09472eca15630975e24c5b51cce6265847be17c1346c6889b8fb27757a3266b) contentStartColumn(10) contentStartLine(188) org.kframework.attributes.Location(Location(188,10,188,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(isOperands(_225),isSchedule(SCHED)),isLValue(REG))
																v[24], i.evalErr = i.evalIsOperands( // isOperands(_225)
																	v[10] /*_225*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isOperands(_225),isSchedule(SCHED))
																bv[1] = m.IsTrue(v[24])
																if bv[1] {
																	v[25], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[19] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[25])
																}
																// `_andBool_`(`_andBool_`(isOperands(_225),isSchedule(SCHED)),isLValue(REG))
																bv[0] = bv[1]
																if bv[0] {
																	v[26], i.evalErr = i.evalIsLValue( // isLValue(REG)
																		v[6] /*REG*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[26])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS225(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 276
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotdifficulty) { // #token("iele.difficulty","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																v[19] = i.Model.KApplyArg(v[18], 0)
																// KVariable SCHED = v[19]
																v[20] = i.Model.KApplyArg(c, 5)
																// KVariable _2 = v[20]
																v[21] = i.Model.KApplyArg(c, 6)
																// KVariable _3 = v[21]
																v[22] = i.Model.KApplyArg(c, 7)
																// KVariable _4 = v[22]
																v[23] = i.Model.KApplyArg(c, 8)
																// KVariable _5 = v[23]
																// rule #276
																// source: iele-gas.k @185
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.difficulty","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(c3c2ff9a9a0900158403f27337652603a7cca3d3eea201dd30bafb252548b659) contentStartColumn(10) contentStartLine(185) org.kframework.attributes.Location(Location(185,10,185,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[19] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	bv[0] = m.IsTrue(v[24])
																	if bv[0] {
																		v[25], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[6] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[25])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS276(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 282
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotcallvalue) { // #token("iele.callvalue","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																v[19] = i.Model.KApplyArg(v[18], 0)
																// KVariable SCHED = v[19]
																v[20] = i.Model.KApplyArg(c, 5)
																// KVariable _2 = v[20]
																v[21] = i.Model.KApplyArg(c, 6)
																// KVariable _3 = v[21]
																v[22] = i.Model.KApplyArg(c, 7)
																// KVariable _4 = v[22]
																v[23] = i.Model.KApplyArg(c, 8)
																// KVariable _5 = v[23]
																// rule #282
																// source: iele-gas.k @186
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.callvalue","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(328e6f4786b36dc12b2276d085c619745b62085e91fbfce6380489abbd45208c) contentStartColumn(10) contentStartLine(186) org.kframework.attributes.Location(Location(186,10,186,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[19] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isSchedule(SCHED),isLValue(REG))
																	bv[0] = m.IsTrue(v[24])
																	if bv[0] {
																		v[25], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[6] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[25])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS282(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 286
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotnumber) { // #token("iele.number","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #286
															// source: iele-gas.k @165
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.number","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(c2d346d7a465916cb04c0e8d29f1acd530d3de8904d523e01e6fea61a7ff2e83) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,165,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS286(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 295
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotmsize) { // #token("iele.msize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #295
															// source: iele-gas.k @166
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.msize","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(c737765788e487eafebfcb743642901cea9a1f227477915a47a121ad04b7633c) contentStartColumn(10) contentStartLine(166) org.kframework.attributes.Location(Location(166,10,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS295(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 309
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotblockhash) { // #token("iele.blockhash","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										// KVariable _261 = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
															v[19] = i.Model.KApplyArg(v[18], 0)
															// KVariable SCHED = v[19]
															v[20] = i.Model.KApplyArg(c, 5)
															// KVariable _2 = v[20]
															v[21] = i.Model.KApplyArg(c, 6)
															// KVariable _3 = v[21]
															v[22] = i.Model.KApplyArg(c, 7)
															// KVariable _4 = v[22]
															v[23] = i.Model.KApplyArg(c, 8)
															// KVariable _5 = v[23]
															// rule #309
															// source: iele-gas.k @187
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.blockhash","IeleName")),_261))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isOperands(_261),isSchedule(SCHED)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(d6c4115f47737137e3c714dceb0be65ba4b7de7954280640cb30fbd1f0b84aaa) contentStartColumn(10) contentStartLine(187) org.kframework.attributes.Location(Location(187,10,187,150)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(isOperands(_261),isSchedule(SCHED)),isLValue(REG))
																v[24], i.evalErr = i.evalIsOperands( // isOperands(_261)
																	v[10] /*_261*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isOperands(_261),isSchedule(SCHED))
																bv[1] = m.IsTrue(v[24])
																if bv[1] {
																	v[25], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[19] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[25])
																}
																// `_andBool_`(`_andBool_`(isOperands(_261),isSchedule(SCHED)),isLValue(REG))
																bv[0] = bv[1]
																if bv[0] {
																	v[26], i.evalErr = i.evalIsLValue( // isLValue(REG)
																		v[6] /*REG*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[26])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS309(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 327
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotextcodesize) { // #token("iele.extcodesize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										// KVariable _257 = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[18]
														v[19] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[19]
														v[20] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[20]
														v[21] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[21]
														v[22] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[22]
														// rule #327
														// source: iele-gas.k @168
														// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),_257))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isOperands(_257)) ensures #token("true","Bool") [UNIQUE_ID(ab2a62007d0fd50ff4835a7ec8a53302743df6ed7a73461e6c6bbc38b6b47fb8) contentStartColumn(10) contentStartLine(168) org.kframework.attributes.Location(Location(168,10,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES `_andBool_`(isLValue(REG),isOperands(_257))
															v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[6] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isLValue(REG),isOperands(_257))
															bv[0] = m.IsTrue(v[23])
															if bv[0] {
																v[24], i.evalErr = i.evalIsOperands( // isOperands(_257)
																	v[10] /*_257*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[24])
															}
															if bv[0] {
																// RHS
																return i.stepRHS327(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
									// rule: 433
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotgaslimit) { // #token("iele.gaslimit","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #433
															// source: iele-gas.k @164
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.gaslimit","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(6893bae743f0b692611acea5ed6a37a8696ee1a1a0892fa265f2d5fd1f05acb7) contentStartColumn(10) contentStartLine(164) org.kframework.attributes.Location(Location(164,10,164,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS433(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 458
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotaddress) { // #token("iele.address","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #458
															// source: iele-gas.k @176
															// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.address","IeleName")),`.List{"operandList"}`(.KList)))=>#registerDelta(REG,bytesInWords(#token("20","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValue(REG) ensures #token("true","Bool") [UNIQUE_ID(46051a120d1dca9bb4672ade3223fff3ab1560e448a4224d329223e08fe4230c) contentStartColumn(10) contentStartLine(176) org.kframework.attributes.Location(Location(176,10,176,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES isLValue(REG)
																v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
																	v[6] /*REG*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if m.IsTrue(v[23]) {
																	// RHS
																	return i.stepRHS458(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 494
						// KVariable _294 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _295 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _33 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _34 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _35 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _19 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _20 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _21 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _22 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
													v[24] = i.Model.KApplyArg(v[23], 0)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(LABELS)
															v[28] = i.Model.KApplyArg(v[27], 0)
															if v[28]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																// KVariable LABELS = v[28]
																v[29] = i.Model.KApplyArg(v[24], 3)
																// KVariable _2 = v[29]
																v[30] = i.Model.KApplyArg(v[24], 4)
																// KVariable _3 = v[30]
																v[31] = i.Model.KApplyArg(v[24], 5)
																// KVariable _4 = v[31]
																v[32] = i.Model.KApplyArg(v[23], 1)
																// KVariable _5 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 2)
																// KVariable _6 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 3)
																// KVariable _7 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 4)
																// KVariable _8 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 5)
																// KVariable _9 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 6)
																// KVariable _10 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 7)
																// KVariable _11 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 8)
																// KVariable _12 = v[39]
																v[40] = i.Model.KApplyArg(v[23], 9)
																// KVariable _13 = v[40]
																v[41] = i.Model.KApplyArg(v[23], 10)
																// KVariable _14 = v[41]
																v[42] = i.Model.KApplyArg(v[23], 11)
																// KVariable _15 = v[42]
																v[43] = i.Model.KApplyArg(v[23], 12)
																// KVariable _16 = v[43]
																v[44] = i.Model.KApplyArg(v[23], 13)
																// KVariable _17 = v[44]
																v[45] = i.Model.KApplyArg(v[23], 14)
																// KVariable _18 = v[45]
																v[46] = i.Model.KApplyArg(v[18], 5)
																// KVariable _23 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 6)
																// KVariable _24 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 7)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 8)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[18], 9)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(v[18], 10)
																// KVariable _28 = v[51]
																v[52] = i.Model.KApplyArg(v[18], 11)
																// KVariable _29 = v[52]
																v[53] = i.Model.KApplyArg(v[18], 12)
																// KVariable _30 = v[53]
																v[54] = i.Model.KApplyArg(v[18], 13)
																// KVariable _31 = v[54]
																v[55] = i.Model.KApplyArg(v[18], 14)
																// KVariable _32 = v[55]
																v[56] = i.Model.KApplyArg(c, 8)
																// KVariable _38 = v[56]
																// rule #494
																// source: iele-gas.k @218
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_294,IDX,_295))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isLValues(_294)),isMap(LABELS)),isOperands(_295)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(1388a285e9a76439b0c5d481b9bd7af0231d9fdc91c5c9aaed6d74d968c1202c) contentStartColumn(10) contentStartLine(218) org.kframework.attributes.Location(Location(218,10,220,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_294)),#token("true","Bool")),isOperands(_295)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS)))
																	v[57], i.evalErr = i.evalIsLValues( // isLValues(_294)
																		v[5] /*_294*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_294)),#token("true","Bool")),isOperands(_295))
																	bv[1] = /* rhs precomputed isInt(IDX) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isMap(LABELS) */ 
																	if bv[1] {
																		v[58], i.evalErr = i.evalIsOperands( // isOperands(_295)
																			v[7] /*_295*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[58])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_294)),#token("true","Bool")),isOperands(_295)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS)))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[59], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LABELS)
																			v[6] /*IDX*/,
																			v[28] /*LABELS*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = !(m.IsTrue(v[59]))
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS494(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 23
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mul_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #23
												// source: iele-gas.k @119
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mul_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(12cfe44aa2841eb3615c4c5b0ddda14b5a4015d507d63f9ee6a01cfc460da9d5) contentStartColumn(10) contentStartLine(119) org.kframework.attributes.Location(Location(119,10,119,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS23(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 28, 53
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(_224,INDEX1,INDEX2,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 28
						// KVariable _224 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX1 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable INDEX2 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable WIDTH = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[20]
													// rule #28
													// source: iele-gas.k @254
													// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(_224,INDEX1,INDEX2,WIDTH))=>#memoryExpand(INDEX1,bytesInWords(`_+Int_`(chop(INDEX2),chop(WIDTH))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_224),isInt(INDEX1)),isInt(WIDTH)),isInt(INDEX2)),`_>Int__INT`(chop(WIDTH),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(e1475da942e16eb42fab29a5fb25d9c40c0fae91f4cb2130063eca1b07411444) contentStartColumn(10) contentStartLine(254) org.kframework.attributes.Location(Location(254,10,254,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_224),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(chop(WIDTH),#token("0","Int")))
														v[21], i.evalErr = i.evalIsOperand( // isOperand(_224)
															v[5] /*_224*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_224),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_>Int__INT`(chop(WIDTH),#token("0","Int")))
														bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(INDEX1) */  /* && */ /* rhs precomputed isInt(WIDTH) */  /* && */ /* rhs precomputed isInt(INDEX2) */ 
														if bv[0] {
															v[23], i.evalErr = i.evalChop( // chop(WIDTH)
																v[8] /*WIDTH*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[22], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(chop(WIDTH),#token("0","Int"))
																v[23],
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] {
															// RHS
															return i.stepRHS28(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 53
						// KVariable _162 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable INDEX2 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #53
											// source: iele-gas.k @255
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(_162,INDEX1,INDEX2,WIDTH))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_162),isInt(WIDTH)),isOperand(INDEX1)),isOperand(INDEX2)),`_==Int_`(chop(WIDTH),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(04212effe3da5404e78df279f8084c3dff8f8147c01b4e56a50ff27afdeacd1d) contentStartColumn(10) contentStartLine(255) org.kframework.attributes.Location(Location(255,10,255,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_162),#token("true","Bool")),isOperand(INDEX1)),isOperand(INDEX2)),`_==Int_`(chop(WIDTH),#token("0","Int")))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(_162)
													v[5] /*_162*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(_162),#token("true","Bool")),isOperand(INDEX1))
												bv[2] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[2] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(INDEX1)
														v[6] /*INDEX1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_162),#token("true","Bool")),isOperand(INDEX1)),isOperand(INDEX2))
												bv[1] = bv[2]
												if bv[1] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(INDEX2)
														v[7] /*INDEX2*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(_162),#token("true","Bool")),isOperand(INDEX1)),isOperand(INDEX2)),`_==Int_`(chop(WIDTH),#token("0","Int")))
												bv[0] = bv[1]
												if bv[0] {
													v[25], i.evalErr = i.evalChop( // chop(WIDTH)
														v[8] /*WIDTH*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(chop(WIDTH),#token("0","Int"))
														v[25],
														/* rhs KToken */ m.IntZero,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[24])
												}
												if bv[0] {
													// RHS
													return i.stepRHS53(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 29
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(_234,_235,_236,_237,_238)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _234 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _235 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _236 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _237 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _238 = v[9]
						// KVariable DotVar1 = v[3]
						v[10] = i.Model.KApplyArg(c, 1)
						if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[11] = i.Model.KApplyArg(v[10], 0)
							if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[14] = i.Model.KApplyArg(v[12], 0)
									if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[13]
										v[15] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[17]
										v[18] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[18]
										v[19] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[19]
										v[20] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[20]
										v[21] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[21]
										// rule #29
										// source: iele-gas.k @318
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_,_=create_(_)send__IELE-COMMON`(_234,_235,_236,_237,_238))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_237),isLValue(_235)),isLValue(_234)),isOperand(_238)),isIeleName(_236)) ensures #token("true","Bool") [UNIQUE_ID(0c3d87f3eb13a49a2e8d69724c9920947fb760f6fa9990f7e2ffdc75927d3ddd) contentStartColumn(10) contentStartLine(318) org.kframework.attributes.Location(Location(318,10,318,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_237),isLValue(_235)),isLValue(_234)),isOperand(_238)),isIeleName(_236))
											v[22], i.evalErr = i.evalIsOperands( // isOperands(_237)
												v[8] /*_237*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperands(_237),isLValue(_235))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsLValue( // isLValue(_235)
													v[6] /*_235*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(isOperands(_237),isLValue(_235)),isLValue(_234))
											bv[2] = bv[3]
											if bv[2] {
												v[24], i.evalErr = i.evalIsLValue( // isLValue(_234)
													v[5] /*_234*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(_237),isLValue(_235)),isLValue(_234)),isOperand(_238))
											bv[1] = bv[2]
											if bv[1] {
												v[25], i.evalErr = i.evalIsOperand( // isOperand(_238)
													v[9] /*_238*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_237),isLValue(_235)),isLValue(_234)),isOperand(_238)),isIeleName(_236))
											bv[0] = bv[1]
											if bv[0] {
												v[26], i.evalErr = i.evalIsIeleName( // isIeleName(_236)
													v[7] /*_236*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[26])
											}
											if bv[0] {
												// RHS
												return i.stepRHS29(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 31
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqnotXuXuIELEXhyphenCOMMON2 { // `_=not__IELE-COMMON`(REG,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #31
											// source: iele-gas.k @85
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=not__IELE-COMMON`(REG,W))=>#registerDelta(REG,intSize(W))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(W),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(9322a752d0fa1bcb5b78d8e6c0ac2ace13d1c9f4533d7bc6041fa0a883b19e7c) contentStartColumn(10) contentStartLine(85) org.kframework.attributes.Location(Location(85,10,85,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(#token("true","Bool"),isLValue(REG))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												if /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[19]) {
													// RHS
													return i.stepRHS31(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 35
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `store_,__IELE-COMMON`(VALUE,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable INDEX = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[18]
												// rule #35
												// source: iele-gas.k @262
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`store_,__IELE-COMMON`(VALUE,INDEX))=>#memoryDelta(INDEX,intSize(VALUE))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInt(INDEX),isInt(VALUE)) ensures #token("true","Bool") [UNIQUE_ID(3c12b8a6a6f5261409f42f70f621ff9282d850553c1f629410c91bb2e0818a5b) contentStartColumn(10) contentStartLine(262) org.kframework.attributes.Location(Location(262,10,262,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES precomputed isInt(INDEX) && isInt(VALUE)
													// RHS
													return i.stepRHS35(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 45
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXuIELEXhyphenCOMMON1 { // `br__IELE-COMMON`(_147)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _147 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #45
										// source: iele-gas.k @307
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`br__IELE-COMMON`(_147))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isIeleName(_147) ensures #token("true","Bool") [UNIQUE_ID(f6247e530fa5b70cd0bafbcc97f09bedddc4eaa0b1e8752549744cca7e349a11) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,307,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isIeleName(_147)
											v[18], i.evalErr = i.evalIsIeleName( // isIeleName(_147)
												v[5] /*_147*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS45(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 55
					if v[4]&kapplyMatchMask == kapplyMatchLblSHA256XuIELEXhyphenPRECOMPILED0 { // `SHA256_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #55
										// source: iele-gas.k @322
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`SHA256_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7b69282253288c745d63989af1cd1419c97c97e01e2e1ee8e2e656e4fd4326b) contentStartColumn(10) contentStartLine(322) org.kframework.attributes.Location(Location(322,10,322,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS55(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 92
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(_141,_142)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _141 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _142 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #92
										// source: iele-gas.k @308
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`br_,__IELE-COMMON`(_141,_142))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_141),isIeleName(_142)) ensures #token("true","Bool") [UNIQUE_ID(c73b3fca08f29cb9833dfce402052ee8b40fd145f5ade0e94095325ea3e9325f) contentStartColumn(10) contentStartLine(308) org.kframework.attributes.Location(Location(308,10,308,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isOperand(_141),isIeleName(_142))
											v[19], i.evalErr = i.evalIsOperand( // isOperand(_141)
												v[5] /*_141*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_141),isIeleName(_142))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsIeleName( // isIeleName(_142)
													v[6] /*_142*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS92(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 95
					if v[4]&kapplyMatchMask == kapplyMatchLblECPAIRINGXuIELEXhyphenPRECOMPILED0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #95
										// source: iele-gas.k @327
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECPAIRING_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6f96857395d4c4e8ceae360c187d9de27f4adb50de2c08daa2a7ec38ade87665) contentStartColumn(10) contentStartLine(327) org.kframework.attributes.Location(Location(327,10,327,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS95(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 98
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=expmod_,_,__IELE-COMMON`(REG,_283,_284,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _283 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _284 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W2 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #98
											// source: iele-gas.k @133
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=expmod_,_,__IELE-COMMON`(REG,_283,_284,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_284),isInt(W2)),isLValue(REG)),isOperand(_283)) ensures #token("true","Bool") [UNIQUE_ID(5d540865c8dbf103ee08da720dacc486f4200276303502caa9acd1504452bf8c) contentStartColumn(10) contentStartLine(133) org.kframework.attributes.Location(Location(133,10,133,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_284),#token("true","Bool")),isLValue(REG)),isOperand(_283))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(_284)
													v[7] /*_284*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(_284),#token("true","Bool")),isLValue(REG))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W2) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_284),#token("true","Bool")),isLValue(REG)),isOperand(_283))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(_283)
														v[6] /*_283*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS98(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 106
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable W1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W2 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #106
											// source: iele-gas.k @132
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mulmod_,_,__IELE-COMMON`(REG,W0,W1,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isInt(W2)),isOperand(W1)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(67f1b0face88b9d3c4bdea853c3adad2267ed4b95695ae3d935b2b73c1384580) contentStartColumn(10) contentStartLine(132) org.kframework.attributes.Location(Location(132,10,132,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),#token("true","Bool")),isOperand(W1)),isLValue(REG))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(W0)
													v[6] /*W0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(W0),#token("true","Bool")),isOperand(W1))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W2) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(W1)
														v[7] /*W1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),#token("true","Bool")),isOperand(W1)),isLValue(REG))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS106(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 128
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(REG,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[32] = i.Model.KApplyArg(v[31], 0)
													if v[32]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[49]
														// rule #128
														// source: iele-gas.k @259
														// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,#token("0","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isMap(LM),isLValue(REG)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token("true","Bool") [UNIQUE_ID(b1e24b53f1b7b465cc8d75b4b5fd662c1ffa957399b0e6f0a9636af645556358) contentStartColumn(10) contentStartLine(259) org.kframework.attributes.Location(Location(259,10,261,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
															v[50], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[5] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX))
															bv[1] = /* rhs precomputed isMap(LM) */ /* && */ m.IsTrue(v[50])
															if bv[1] {
																v[51], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																	v[6] /*INDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[51])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
															bv[0] = bv[1]
															if bv[0] {
																v[52], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,LM)
																	v[6] /*INDEX*/,
																	v[32] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[52]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS128(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 148
					if v[4]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(_151)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _151 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(`.List`(.KList))
													v[25] = i.Model.KApplyArg(v[24], 0)
													if i.Model.IsEmptyList(v[25], m.SortList, m.LblXuListXu) { // empty list `.List`(.KList)
														v[26] = i.Model.KApplyArg(v[21], 3)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[21], 4)
														// KVariable _3 = v[27]
														v[28] = i.Model.KApplyArg(v[21], 5)
														// KVariable _4 = v[28]
														v[29] = i.Model.KApplyArg(v[21], 6)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[21], 7)
														// KVariable _6 = v[30]
														v[31] = i.Model.KApplyArg(v[21], 8)
														// KVariable _7 = v[31]
														v[32] = i.Model.KApplyArg(v[21], 9)
														// KVariable _8 = v[32]
														v[33] = i.Model.KApplyArg(v[21], 10)
														// KVariable _9 = v[33]
														v[34] = i.Model.KApplyArg(v[21], 11)
														// KVariable _10 = v[34]
														v[35] = i.Model.KApplyArg(v[21], 12)
														// KVariable _11 = v[35]
														v[36] = i.Model.KApplyArg(v[21], 13)
														// KVariable _12 = v[36]
														v[37] = i.Model.KApplyArg(v[21], 14)
														// KVariable _13 = v[37]
														v[38] = i.Model.KApplyArg(v[16], 5)
														// KVariable _18 = v[38]
														v[39] = i.Model.KApplyArg(v[16], 6)
														// KVariable _19 = v[39]
														v[40] = i.Model.KApplyArg(v[16], 7)
														// KVariable _20 = v[40]
														v[41] = i.Model.KApplyArg(v[16], 8)
														// KVariable _21 = v[41]
														v[42] = i.Model.KApplyArg(v[16], 9)
														// KVariable _22 = v[42]
														v[43] = i.Model.KApplyArg(v[16], 10)
														// KVariable _23 = v[43]
														v[44] = i.Model.KApplyArg(v[16], 11)
														// KVariable _24 = v[44]
														v[45] = i.Model.KApplyArg(v[16], 12)
														// KVariable _25 = v[45]
														v[46] = i.Model.KApplyArg(v[16], 13)
														// KVariable _26 = v[46]
														v[47] = i.Model.KApplyArg(v[16], 14)
														// KVariable _27 = v[47]
														v[48] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[48]
														// rule #148
														// source: iele-gas.k @314
														// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ret__IELE-COMMON`(_151))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires isNonEmptyOperands(_151) ensures #token("true","Bool") [UNIQUE_ID(63acce7906b9ae9d239574cbcb66c05d12ef8b5529cb8836135946767ca43452) contentStartColumn(10) contentStartLine(314) org.kframework.attributes.Location(Location(314,10,314,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES isNonEmptyOperands(_151)
															v[49], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(_151)
																v[5] /*_151*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															if m.IsTrue(v[49]) {
																// RHS
																return i.stepRHS148(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 156
					if v[4]&kapplyMatchMask == kapplyMatchLblECRECXuIELEXhyphenPRECOMPILED0 { // `ECREC_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #156
										// source: iele-gas.k @321
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECREC_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4fbeae61d9086e45359343fb30c4da03b2c1cbca64dca8026712c13807ad5ad1) contentStartColumn(10) contentStartLine(321) org.kframework.attributes.Location(Location(321,10,321,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS156(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 159
					if v[4]&kapplyMatchMask == kapplyMatchLblIDXuIELEXhyphenPRECOMPILED0 { // `ID_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #159
										// source: iele-gas.k @324
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ID_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9b3c808ad732f529579169a7adf69d42494b7a852e5e3a364815535338abe4c8) contentStartColumn(10) contentStartLine(324) org.kframework.attributes.Location(Location(324,10,324,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS159(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 161
					if v[4]&kapplyMatchMask == kapplyMatchLblSelfdestructXuXuIELEXhyphenCOMMON1 { // `selfdestruct__IELE-COMMON`(_144)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _144 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #161
										// source: iele-gas.k @312
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`selfdestruct__IELE-COMMON`(_144))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_144) ensures #token("true","Bool") [UNIQUE_ID(bef2d90950574e4792bb31560c2181bbd2b9cc38f328cce5479170fe6dda800b) contentStartColumn(10) contentStartLine(312) org.kframework.attributes.Location(Location(312,10,312,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isOperand(_144)
											v[18], i.evalErr = i.evalIsOperand( // isOperand(_144)
												v[5] /*_144*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS161(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 193
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(_202,_203,_204,_205,_206,_207)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _202 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _203 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _204 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _205 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _206 = v[9]
						v[10] = i.Model.KApplyArg(v[4], 5)
						// KVariable _207 = v[10]
						// KVariable DotVar1 = v[3]
						v[11] = i.Model.KApplyArg(c, 1)
						if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[12] = i.Model.KApplyArg(v[11], 0)
							if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[15] = i.Model.KApplyArg(v[13], 0)
									if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[14]
										v[16] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[16]
										v[17] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[17]
										v[18] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[18]
										v[19] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[19]
										v[20] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[20]
										v[21] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[21]
										v[22] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[22]
										// rule #193
										// source: iele-gas.k @316
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_202,_203,_204,_205,_206,_207))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207)),isOperand(_204)),isOperand(_203)),isOperand(_206)) ensures #token("true","Bool") [UNIQUE_ID(ea4474a16e33c3f89cf04b112f1446c24db896535abe3d7249b763360a844517) contentStartColumn(10) contentStartLine(316) org.kframework.attributes.Location(Location(316,10,316,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207)),isOperand(_204)),isOperand(_203)),isOperand(_206))
											v[23], i.evalErr = i.evalIsLValues( // isLValues(_202)
												v[5] /*_202*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValues(_202),isOperands(_205))
											bv[4] = m.IsTrue(v[23])
											if bv[4] {
												v[24], i.evalErr = i.evalIsOperands( // isOperands(_205)
													v[8] /*_205*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207))
											bv[3] = bv[4]
											if bv[3] {
												v[25], i.evalErr = i.evalIsOperand( // isOperand(_207)
													v[10] /*_207*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207)),isOperand(_204))
											bv[2] = bv[3]
											if bv[2] {
												v[26], i.evalErr = i.evalIsOperand( // isOperand(_204)
													v[7] /*_204*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[26])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207)),isOperand(_204)),isOperand(_203))
											bv[1] = bv[2]
											if bv[1] {
												v[27], i.evalErr = i.evalIsOperand( // isOperand(_203)
													v[6] /*_203*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_202),isOperands(_205)),isOperand(_207)),isOperand(_204)),isOperand(_203)),isOperand(_206))
											bv[0] = bv[1]
											if bv[0] {
												v[28], i.evalErr = i.evalIsOperand( // isOperand(_206)
													v[9] /*_206*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[28])
											}
											if bv[0] {
												// RHS
												return i.stepRHS193(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 203
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXcommaXuXuIELEXhyphenCOMMON2 { // `log_,__IELE-COMMON`(_279,_280)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _279 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _280 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #203
										// source: iele-gas.k @311
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`log_,__IELE-COMMON`(_279,_280))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_279),isNonEmptyOperands(_280)) ensures #token("true","Bool") [UNIQUE_ID(0c3f2efedc113c324a68245be3897b8f2b2cb194bd46ed66c4f83b23aa3eeef0) contentStartColumn(10) contentStartLine(311) org.kframework.attributes.Location(Location(311,10,311,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isOperand(_279),isNonEmptyOperands(_280))
											v[19], i.evalErr = i.evalIsOperand( // isOperand(_279)
												v[5] /*_279*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_279),isNonEmptyOperands(_280))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(_280)
													v[6] /*_280*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS203(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 208
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(_252,_253,_254,_255,_256)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _252 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _253 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _254 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _255 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _256 = v[9]
						// KVariable DotVar1 = v[3]
						v[10] = i.Model.KApplyArg(c, 1)
						if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[11] = i.Model.KApplyArg(v[10], 0)
							if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[14] = i.Model.KApplyArg(v[12], 0)
									if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[13]
										v[15] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[17]
										v[18] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[18]
										v[19] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[19]
										v[20] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[20]
										v[21] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[21]
										// rule #208
										// source: iele-gas.k @317
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(_252,_253,_254,_255,_256))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_255),isOperand(_256)),isOperand(_253)),isLValues(_252)),isOperand(_254)) ensures #token("true","Bool") [UNIQUE_ID(5373b838af970959fe148ec2a7c8b606b05ed18a5e5032e9b89617450ac32431) contentStartColumn(10) contentStartLine(317) org.kframework.attributes.Location(Location(317,10,317,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_255),isOperand(_256)),isOperand(_253)),isLValues(_252)),isOperand(_254))
											v[22], i.evalErr = i.evalIsOperands( // isOperands(_255)
												v[8] /*_255*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperands(_255),isOperand(_256))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsOperand( // isOperand(_256)
													v[9] /*_256*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(isOperands(_255),isOperand(_256)),isOperand(_253))
											bv[2] = bv[3]
											if bv[2] {
												v[24], i.evalErr = i.evalIsOperand( // isOperand(_253)
													v[6] /*_253*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(_255),isOperand(_256)),isOperand(_253)),isLValues(_252))
											bv[1] = bv[2]
											if bv[1] {
												v[25], i.evalErr = i.evalIsLValues( // isLValues(_252)
													v[5] /*_252*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(_255),isOperand(_256)),isOperand(_253)),isLValues(_252)),isOperand(_254))
											bv[0] = bv[1]
											if bv[0] {
												v[26], i.evalErr = i.evalIsOperand( // isOperand(_254)
													v[7] /*_254*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[26])
											}
											if bv[0] {
												// RHS
												return i.stepRHS208(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 220
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=bswap_,__IELE-COMMON`(REG,WIDTH,_140)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _140 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #220
											// source: iele-gas.k @154
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=bswap_,__IELE-COMMON`(REG,WIDTH,_140))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(WIDTH),isOperand(_140)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(071eed52767e65d22993a9edf481fd079c235f0c41b1de9e5fbd434f92a6ef45) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_140)),isLValue(REG))
												v[20], i.evalErr = i.evalIsOperand( // isOperand(_140)
													v[7] /*_140*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_140)),isLValue(REG))
												bv[0] = /* rhs precomputed isInt(WIDTH) */ /* && */ m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS220(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 224
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(_185,_186,_187,_188,_189)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _185 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _186 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _187 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _188 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _189 = v[9]
						// KVariable DotVar1 = v[3]
						v[10] = i.Model.KApplyArg(c, 1)
						if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[11] = i.Model.KApplyArg(v[10], 0)
							if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[14] = i.Model.KApplyArg(v[12], 0)
									if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[13]
										v[15] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[17]
										v[18] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[18]
										v[19] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[19]
										v[20] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[20]
										v[21] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[21]
										// rule #224
										// source: iele-gas.k @319
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_,_=copycreate_(_)send__IELE-COMMON`(_185,_186,_187,_188,_189))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_186),isLValue(_185)),isOperands(_188)),isOperand(_189)),isOperand(_187)) ensures #token("true","Bool") [UNIQUE_ID(cdf21ec3e2f343ea15ab1210451c092e0bb60eb85728dffa4df4afc9949db15e) contentStartColumn(10) contentStartLine(319) org.kframework.attributes.Location(Location(319,10,319,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_186),isLValue(_185)),isOperands(_188)),isOperand(_189)),isOperand(_187))
											v[22], i.evalErr = i.evalIsLValue( // isLValue(_186)
												v[6] /*_186*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(_186),isLValue(_185))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsLValue( // isLValue(_185)
													v[5] /*_185*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(isLValue(_186),isLValue(_185)),isOperands(_188))
											bv[2] = bv[3]
											if bv[2] {
												v[24], i.evalErr = i.evalIsOperands( // isOperands(_188)
													v[8] /*_188*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_186),isLValue(_185)),isOperands(_188)),isOperand(_189))
											bv[1] = bv[2]
											if bv[1] {
												v[25], i.evalErr = i.evalIsOperand( // isOperand(_189)
													v[9] /*_189*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_186),isLValue(_185)),isOperands(_188)),isOperand(_189)),isOperand(_187))
											bv[0] = bv[1]
											if bv[0] {
												v[26], i.evalErr = i.evalIsOperand( // isOperand(_187)
													v[7] /*_187*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[26])
											}
											if bv[0] {
												// RHS
												return i.stepRHS224(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 231
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=shift_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												if v[15]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
													v[16] = i.Model.KApplyArg(v[15], 0)
													// KVariable SCHED = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _2 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _3 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(c, 8)
													// KVariable _5 = v[20]
													// rule #231
													// source: iele-gas.k @89
													// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=shift_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(503b57dde330e6df03698ffc44e3f4026b434969e6096d8bd67861ccb0127bbb) contentStartColumn(10) contentStartLine(89) org.kframework.attributes.Location(Location(89,10,89,158)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),#token("true","Bool")),#token("true","Bool"))
														v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[16] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isSchedule(SCHED),isLValue(REG))
														bv[0] = m.IsTrue(v[21])
														if bv[0] {
															v[22], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[5] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[22])
														}
														if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
															// RHS
															return i.stepRHS231(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 232, 323
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqXuXuIELEXhyphenCOMMON2 { // `_=__IELE-COMMON`(DEST,SRC)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable DEST = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 232
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable SRC = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #232
											// source: iele-gas.k @199
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC))=>#registerDelta(DEST,intSize(SRC))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(DEST),isInt(SRC)) ensures #token("true","Bool") [UNIQUE_ID(edbb720ce0feb3d3ef0c12726c645998783b84a4d052626d26060ddbe2dfc878) contentStartColumn(10) contentStartLine(199) org.kframework.attributes.Location(Location(199,10,199,87)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(isLValue(DEST),#token("true","Bool"))
												v[19], i.evalErr = i.evalIsLValue( // isLValue(DEST)
													v[5] /*DEST*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												if m.IsTrue(v[19]) /* && */ /* rhs precomputed isInt(SRC) */  {
													// RHS
													return i.stepRHS232(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rule: 323
						if v[6]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(SRC)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable SRC = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _14 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													// KVariable _15 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 2)
													// KVariable _16 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 3)
													// KVariable _17 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 4)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[23], 2)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[23], 3)
														// KVariable _3 = v[27]
														v[28] = i.Model.KApplyArg(v[23], 4)
														// KVariable _4 = v[28]
														v[29] = i.Model.KApplyArg(v[23], 5)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[23], 6)
														// KVariable _6 = v[30]
														v[31] = i.Model.KApplyArg(v[23], 7)
														if v[31]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[32] = i.Model.KApplyArg(v[31], 0)
															if v[32]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[32]
																v[33] = i.Model.KApplyArg(v[23], 8)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 9)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 10)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 11)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 12)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 13)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 14)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[18], 5)
																// KVariable _18 = v[40]
																v[41] = i.Model.KApplyArg(v[18], 6)
																// KVariable _19 = v[41]
																v[42] = i.Model.KApplyArg(v[18], 7)
																// KVariable _20 = v[42]
																v[43] = i.Model.KApplyArg(v[18], 8)
																// KVariable _21 = v[43]
																v[44] = i.Model.KApplyArg(v[18], 9)
																// KVariable _22 = v[44]
																v[45] = i.Model.KApplyArg(v[18], 10)
																// KVariable _23 = v[45]
																v[46] = i.Model.KApplyArg(v[18], 11)
																// KVariable _24 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 12)
																// KVariable _25 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 13)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 14)
																// KVariable _27 = v[49]
																v[50] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[50]
																// rule #323
																// source: iele-gas.k @197
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)))=>#registerDelta(DEST,intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isInt(SRC)) ensures #token("true","Bool") [UNIQUE_ID(1e65d99c54872f1fcbc4c5768e7052c942903f63695b40050fbd3b8e198edea8) contentStartColumn(10) contentStartLine(197) org.kframework.attributes.Location(Location(197,10,198,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),#token("true","Bool"))
																	v[51], i.evalErr = i.evalIsLValue( // isLValue(DEST)
																		v[5] /*DEST*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	if /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[51]) /* && */ /* rhs precomputed isInt(SRC) */  {
																		// RHS
																		return i.stepRHS323(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 242
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=div_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #242
												// source: iele-gas.k @120
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=div_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(`_-Int__INT`(intSize(W0),intSize(W1)),#token("1","Int"))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(c3227674c1d319c22e30d7ad3d2e0df5be7a07277081e75b2882f2cadf44cf91) contentStartColumn(10) contentStartLine(120) org.kframework.attributes.Location(Location(120,10,120,110)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS242(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 249
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=addmod_,_,__IELE-COMMON`(REG,_227,_228,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _227 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _228 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W2 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #249
											// source: iele-gas.k @131
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=addmod_,_,__IELE-COMMON`(REG,_227,_228,W2))=>#registerDelta(REG,intSize(W2))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_227),isInt(W2)),isOperand(_228)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(24f60cdf514246752117655b2ce2a7fe2f735d616adb9b4f7e41276b06f0126f) contentStartColumn(10) contentStartLine(131) org.kframework.attributes.Location(Location(131,10,131,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_227),#token("true","Bool")),isOperand(_228)),isLValue(REG))
												v[21], i.evalErr = i.evalIsOperand( // isOperand(_227)
													v[6] /*_227*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(_227),#token("true","Bool")),isOperand(_228))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W2) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(_228)
														v[7] /*_228*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_227),#token("true","Bool")),isOperand(_228)),isLValue(REG))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS249(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 257
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=add_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #257
												// source: iele-gas.k @117
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=add_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(44b825c0963e2e7c8251a45facafe0f79bcc88f5a592bb91c3f8d0fd3880cd7c) contentStartColumn(10) contentStartLine(117) org.kframework.attributes.Location(Location(117,10,117,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS257(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 277
					if v[4]&kapplyMatchMask == kapplyMatchLblECMULXuIELEXhyphenPRECOMPILED0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #277
										// source: iele-gas.k @326
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECMUL_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e2e5874f6fff795e7add24fcc93d1eadc635d5e4a7ba6449a93621b597e9ef77) contentStartColumn(10) contentStartLine(326) org.kframework.attributes.Location(Location(326,10,326,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS277(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 281
					if v[4]&kapplyMatchMask == kapplyMatchLblECADDXuIELEXhyphenPRECOMPILED0 { // `ECADD_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #281
										// source: iele-gas.k @325
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ECADD_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a746ce8521657da70d4e9cf3f1df975b88f040d13c4b355fe440bfab4e684cbd) contentStartColumn(10) contentStartLine(325) org.kframework.attributes.Location(Location(325,10,325,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS281(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 362
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqlog2XuXuIELEXhyphenCOMMON2 { // `_=log2__IELE-COMMON`(REG,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable W = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #362
										// source: iele-gas.k @90
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=log2__IELE-COMMON`(REG,W))=>#registerDelta(REG,#token("2","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isOperand(W)) ensures #token("true","Bool") [UNIQUE_ID(f2e32c54448c50a757ef4409071741ca610fa3aae851187fc8eb7ae537bcd010) contentStartColumn(10) contentStartLine(90) org.kframework.attributes.Location(Location(90,10,90,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isLValue(REG),isOperand(W))
											v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
												v[5] /*REG*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(REG),isOperand(W))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsOperand( // isOperand(W)
													v[6] /*W*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS362(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 371
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sext_,__IELE-COMMON`(REG,WIDTH,_143)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _143 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #371
											// source: iele-gas.k @152
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sext_,__IELE-COMMON`(REG,WIDTH,_143))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_143),isInt(WIDTH)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(d1183d786c866e47feece2de6e9f566c893a4b5a6dd8679e44e9d8af29acd487) contentStartColumn(10) contentStartLine(152) org.kframework.attributes.Location(Location(152,10,152,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isOperand(_143),#token("true","Bool")),isLValue(REG))
												v[20], i.evalErr = i.evalIsOperand( // isOperand(_143)
													v[7] /*_143*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(_143),#token("true","Bool")),isLValue(REG))
												bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[0] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS371(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 380
					if v[4]&kapplyMatchMask == kapplyMatchLblSstoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `sstore_,__IELE-COMMON`(_262,_263)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _262 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _263 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #380
										// source: iele-gas.k @292
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`sstore_,__IELE-COMMON`(_262,_263))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(_263),isOperand(_262)) ensures #token("true","Bool") [UNIQUE_ID(eb81bdf447b9e85dac1409a8fe454714499fcede7b008596f0ccaabd741f3746) contentStartColumn(10) contentStartLine(292) org.kframework.attributes.Location(Location(292,10,292,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isOperand(_263),isOperand(_262))
											v[19], i.evalErr = i.evalIsOperand( // isOperand(_263)
												v[6] /*_263*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_263),isOperand(_262))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsOperand( // isOperand(_262)
													v[5] /*_262*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS380(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 390
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(REG,_291,_292)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _291 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _292 = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[18]
										v[19] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[19]
										// rule #390
										// source: iele-gas.k @169
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=calladdress_at__IELE-COMMON`(REG,_291,_292))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_292),isLValue(REG)),isGlobalName(_291)) ensures #token("true","Bool") [UNIQUE_ID(bf1d02150ae11937cfa14b8aa7a371623bffb00a0b54f14a5e8a0b5d930d7805) contentStartColumn(10) contentStartLine(169) org.kframework.attributes.Location(Location(169,10,169,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isOperand(_292),isLValue(REG)),isGlobalName(_291))
											v[20], i.evalErr = i.evalIsOperand( // isOperand(_292)
												v[7] /*_292*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_292),isLValue(REG))
											bv[1] = m.IsTrue(v[20])
											if bv[1] {
												v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[21])
											}
											// `_andBool_`(`_andBool_`(isOperand(_292),isLValue(REG)),isGlobalName(_291))
											bv[0] = bv[1]
											if bv[0] {
												v[22], i.evalErr = i.evalIsGlobalName( // isGlobalName(_291)
													v[6] /*_291*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[22])
											}
											if bv[0] {
												// RHS
												return i.stepRHS390(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 405
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXuIELEXhyphenCOMMON1 { // `log__IELE-COMMON`(_293)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _293 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #405
										// source: iele-gas.k @310
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`log__IELE-COMMON`(_293))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_293) ensures #token("true","Bool") [UNIQUE_ID(b97388e8951180a22c5bbd004c1cba1c8a012af1c69fb0c0ab0972959a7eb368) contentStartColumn(10) contentStartLine(310) org.kframework.attributes.Location(Location(310,10,310,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isOperand(_293)
											v[18], i.evalErr = i.evalIsOperand( // isOperand(_293)
												v[5] /*_293*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS405(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 413
					if v[4]&kapplyMatchMask == kapplyMatchLblRIP160XuIELEXhyphenPRECOMPILED0 { // `RIP160_IELE-PRECOMPILED`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #413
										// source: iele-gas.k @323
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`RIP160_IELE-PRECOMPILED`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(aacbe86714293de644f503261830707498f3105c455c3953ab4557bd7f4efd95) contentStartColumn(10) contentStartLine(323) org.kframework.attributes.Location(Location(323,10,323,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS413(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 441
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=and_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #441
												// source: iele-gas.k @86
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=and_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`minInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(0480e88c371c6185968bbe13625dceb1b7d0a601a2fa28572ec326db3840fc9a) contentStartColumn(10) contentStartLine(86) org.kframework.attributes.Location(Location(86,10,86,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS441(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 449
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=cmp__,__IELE-COMMON`(REG,_266,_267,_268)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _266 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _267 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _268 = v[8]
						// KVariable DotVar1 = v[3]
						v[9] = i.Model.KApplyArg(c, 1)
						if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[13] = i.Model.KApplyArg(v[11], 0)
									if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[12]
										v[14] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[14]
										v[15] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[15]
										v[16] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[16]
										v[17] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[17]
										v[18] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[18]
										v[19] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[19]
										v[20] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[20]
										// rule #449
										// source: iele-gas.k @99
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=cmp__,__IELE-COMMON`(REG,_266,_267,_268))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(_268)),isPredicate(_266)),isOperand(_267)) ensures #token("true","Bool") [UNIQUE_ID(399204a104f4e89f5290af6ec6d90d039aee84f3abdb442fd21dceb47b824498) contentStartColumn(10) contentStartLine(99) org.kframework.attributes.Location(Location(99,10,99,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(_268)),isPredicate(_266)),isOperand(_267))
											v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
												v[5] /*REG*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(REG),isOperand(_268))
											bv[2] = m.IsTrue(v[21])
											if bv[2] {
												v[22], i.evalErr = i.evalIsOperand( // isOperand(_268)
													v[8] /*_268*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[22])
											}
											// `_andBool_`(`_andBool_`(isLValue(REG),isOperand(_268)),isPredicate(_266))
											bv[1] = bv[2]
											if bv[1] {
												v[23], i.evalErr = i.evalIsPredicate( // isPredicate(_266)
													v[6] /*_266*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(REG),isOperand(_268)),isPredicate(_266)),isOperand(_267))
											bv[0] = bv[1]
											if bv[0] {
												v[24], i.evalErr = i.evalIsOperand( // isOperand(_267)
													v[7] /*_267*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[24])
											}
											if bv[0] {
												// RHS
												return i.stepRHS449(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 456
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=byte_,__IELE-COMMON`(REG,INDEX,_146)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _146 = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[18]
										v[19] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[19]
										// rule #456
										// source: iele-gas.k @151
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=byte_,__IELE-COMMON`(REG,INDEX,_146))=>#registerDelta(REG,bytesInWords(#token("1","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(_146),isLValue(REG)),isOperand(INDEX)) ensures #token("true","Bool") [UNIQUE_ID(2304260006d1500e7459a0e135f90cb0be1dd5b84271276eed82f5992f5eef5c) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isOperand(_146),isLValue(REG)),isOperand(INDEX))
											v[20], i.evalErr = i.evalIsOperand( // isOperand(_146)
												v[7] /*_146*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_146),isLValue(REG))
											bv[1] = m.IsTrue(v[20])
											if bv[1] {
												v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[21])
											}
											// `_andBool_`(`_andBool_`(isOperand(_146),isLValue(REG)),isOperand(INDEX))
											bv[0] = bv[1]
											if bv[0] {
												v[22], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
													v[6] /*INDEX*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[22])
											}
											if bv[0] {
												// RHS
												return i.stepRHS456(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 459
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=xor_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #459
												// source: iele-gas.k @88
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=xor_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(2838141fc180fa5becb824c1ce3b359255b211cfd060da303524fb2b579bc385) contentStartColumn(10) contentStartLine(88) org.kframework.attributes.Location(Location(88,10,88,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS459(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 461
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=or_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #461
												// source: iele-gas.k @87
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=or_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`maxInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(bdc8df314acb9921bc0333b7d0f2530f837e985212b3e87e57df430f5ed254b5) contentStartColumn(10) contentStartLine(87) org.kframework.attributes.Location(Location(87,10,87,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS461(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 483
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(REG,_198)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _198 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										if v[14]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
											v[15] = i.Model.KApplyArg(v[14], 0)
											// KVariable SCHED = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _5 = v[19]
											// rule #483
											// source: iele-gas.k @141
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sha3__IELE-COMMON`(REG,_198))=>#registerDelta(REG,bitsInWords(#token("256","Int"),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isOperand(_198)) ensures #token("true","Bool") [UNIQUE_ID(390a570798ab9888f35a59c9478ea33db9580e91ee3977b15f8a20437d652229) contentStartColumn(10) contentStartLine(141) org.kframework.attributes.Location(Location(141,10,141,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isOperand(_198))
												v[20], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[15] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isSchedule(SCHED),isLValue(REG))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(REG)),isOperand(_198))
												bv[0] = bv[1]
												if bv[0] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(_198)
														v[6] /*_198*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS483(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 493
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sub_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #493
												// source: iele-gas.k @118
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sub_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(8da063efe3923f4f39537602c6763d6dba00308781e4fea75d982d8da067d28f) contentStartColumn(10) contentStartLine(118) org.kframework.attributes.Location(Location(118,10,118,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS493(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 517
					if v[4]&kapplyMatchMask == kapplyMatchLblRevertXuXuIELEXhyphenCOMMON1 { // `revert__IELE-COMMON`(_153)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _153 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #517
										// source: iele-gas.k @309
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`revert__IELE-COMMON`(_153))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isOperand(_153) ensures #token("true","Bool") [UNIQUE_ID(3998f83714212408225582e2e59025653371188b722410c98e7aa28c2e2ca34a) contentStartColumn(10) contentStartLine(309) org.kframework.attributes.Location(Location(309,10,309,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isOperand(_153)
											v[18], i.evalErr = i.evalIsOperand( // isOperand(_153)
												v[5] /*_153*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS517(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 520
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mod_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #520
												// source: iele-gas.k @121
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=mod_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`minInt(_,_)_INT`(intSize(W0),intSize(W1)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(89b2d23c9d5ed5e341081d9f3cf649dfd780be66edc3e38ec234430c6ce0b77f) contentStartColumn(10) contentStartLine(121) org.kframework.attributes.Location(Location(121,10,121,96)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS520(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 523
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqiszeroXuXuIELEXhyphenCOMMON2 { // `_=iszero__IELE-COMMON`(REG,_174)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _174 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #523
										// source: iele-gas.k @98
										// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=iszero__IELE-COMMON`(REG,_174))=>#registerDelta(REG,#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isLValue(REG),isOperand(_174)) ensures #token("true","Bool") [UNIQUE_ID(3e0db25bfde86e12fdd5b9456bad40400b38717b50b2c34f32312012055f1040) contentStartColumn(10) contentStartLine(98) org.kframework.attributes.Location(Location(98,10,98,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isLValue(REG),isOperand(_174))
											v[19], i.evalErr = i.evalIsLValue( // isLValue(REG)
												v[5] /*REG*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(REG),isOperand(_174))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsOperand( // isOperand(_174)
													v[6] /*_174*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS523(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 535
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=exp_,__IELE-COMMON`(REG,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[18]
												v[19] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[19]
												// rule #535
												// source: iele-gas.k @122
												// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=exp_,__IELE-COMMON`(REG,W0,W1))=>#registerDelta(REG,`_/Int__INT`(`_*Int__INT`(#adjustedBitLength(intSize(W0),W0),W1),#token("64","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(REG),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(afe52ae79d053ad8480a8078765a1db7f7b93ba8478ffa824b187c1d16cebf7f) contentStartColumn(10) contentStartLine(122) org.kframework.attributes.Location(Location(122,10,122,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValue(REG),#token("true","Bool")),#token("true","Bool"))
													v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
														v[5] /*REG*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													if m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS535(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 545
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(REG,INDEX1,INDEX2,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable INDEX2 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #545
											// source: iele-gas.k @253
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load_,_,__IELE-COMMON`(REG,INDEX1,INDEX2,WIDTH))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isLValue(REG)),isOperand(INDEX1)),isOperand(INDEX2)) ensures #token("true","Bool") [UNIQUE_ID(37cd3be549a4c6982c3530a3d8cc711a16e85eee0146ba76f869999e79ebd3c3) contentStartColumn(10) contentStartLine(253) org.kframework.attributes.Location(Location(253,10,253,106)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX1)),isOperand(INDEX2))
												v[21], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX1))
												bv[1] = /* rhs precomputed isInt(WIDTH) */ /* && */ m.IsTrue(v[21])
												if bv[1] {
													v[22], i.evalErr = i.evalIsOperand( // isOperand(INDEX1)
														v[6] /*INDEX1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(INDEX1)),isOperand(INDEX2))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(INDEX2)
														v[7] /*INDEX2*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS545(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 555
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=twos_,__IELE-COMMON`(REG,WIDTH,_269)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _269 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #555
											// source: iele-gas.k @153
											// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=twos_,__IELE-COMMON`(REG,WIDTH,_269))=>#registerDelta(REG,bytesInWords(chop(WIDTH)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(WIDTH),isLValue(REG)),isOperand(_269)) ensures #token("true","Bool") [UNIQUE_ID(bd38cdf1695a22c5c09a20c1986a17eb3379ede248755831d211aa3a78063888) contentStartColumn(10) contentStartLine(153) org.kframework.attributes.Location(Location(153,10,153,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(_269))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(REG)
													v[5] /*REG*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isOperand(_269))
												bv[0] = /* rhs precomputed isInt(WIDTH) */ /* && */ m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsOperand( // isOperand(_269)
														v[7] /*_269*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS555(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 7
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #7
									// source: iele-syntax.k @174
									// {| rule `<generatedTop>`(`<k>`(`` `_=sha3__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=sha3__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(0ef080ca4ba1f91d1be395b427b8c330881d1ff1a33269aecc8689415769b9fc) heat() hybrid() org.kframework.attributes.Location(Location(174,23,174,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(749282235) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS7(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 10, 100, 375, 425
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashfinalizeTx1 { // #finalizeTx(_394)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 10
					if v[4]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable _394 = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _18 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(`NORMAL`(.KList))
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]&kapplyMatchMask == kapplyMatchLblNORMAL0 { // `NORMAL`(.KList)
												v[13] = i.Model.KApplyArg(c, 4)
												// KVariable _19 = v[13]
												v[14] = i.Model.KApplyArg(c, 5)
												// KVariable _20 = v[14]
												v[15] = i.Model.KApplyArg(c, 6)
												// KVariable _21 = v[15]
												v[16] = i.Model.KApplyArg(c, 7)
												if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(MINER),_8,_9,_10,_11,_12,_13)
													v[17] = i.Model.KApplyArg(v[16], 0)
													// KVariable _0 = v[17]
													v[18] = i.Model.KApplyArg(v[16], 1)
													// KVariable _1 = v[18]
													v[19] = i.Model.KApplyArg(v[16], 2)
													// KVariable _2 = v[19]
													v[20] = i.Model.KApplyArg(v[16], 3)
													// KVariable _3 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 4)
													// KVariable _4 = v[21]
													v[22] = i.Model.KApplyArg(v[16], 5)
													// KVariable _5 = v[22]
													v[23] = i.Model.KApplyArg(v[16], 6)
													// KVariable _6 = v[23]
													v[24] = i.Model.KApplyArg(v[16], 7)
													// KVariable _7 = v[24]
													v[25] = i.Model.KApplyArg(v[16], 8)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltbeneficiaryXgt1 { // `<beneficiary>`(MINER)
														v[26] = i.Model.KApplyArg(v[25], 0)
														if i.tempTypeVar = v[26] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable MINER = v[26]
															v[27] = i.Model.KApplyArg(v[16], 9)
															// KVariable _8 = v[27]
															v[28] = i.Model.KApplyArg(v[16], 10)
															// KVariable _9 = v[28]
															v[29] = i.Model.KApplyArg(v[16], 11)
															// KVariable _10 = v[29]
															v[30] = i.Model.KApplyArg(v[16], 12)
															// KVariable _11 = v[30]
															v[31] = i.Model.KApplyArg(v[16], 13)
															// KVariable _12 = v[31]
															v[32] = i.Model.KApplyArg(v[16], 14)
															// KVariable _13 = v[32]
															v[33] = i.Model.KApplyArg(c, 8)
															if v[33]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_14,_15,_16,_17)
																v[34] = i.Model.KApplyArg(v[33], 0)
																if v[34]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
																	v[35] = i.Model.KApplyArg(v[34], 0)
																	if v[35]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																		// KVariable ACCTS = v[35]
																		v[36] = i.Model.KApplyArg(v[33], 1)
																		// KVariable _14 = v[36]
																		v[37] = i.Model.KApplyArg(v[33], 2)
																		// KVariable _15 = v[37]
																		v[38] = i.Model.KApplyArg(v[33], 3)
																		// KVariable _16 = v[38]
																		v[39] = i.Model.KApplyArg(v[33], 4)
																		// KVariable _17 = v[39]
																		// rule #10
																		// source: iele.k @675
																		// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(MINER)``~>#finalizeTx(_394)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_18,`<mode>`(`NORMAL`(.KList)),_19,_20,_21,`<iele>`(_0,_1,_2,_3,_4,_5,_6,_7,`<beneficiary>`(MINER),_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(ACCTS),_14,_15,_16,_17)) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(MINER),isSet(ACCTS)),isBool(_394)),`notBool_`(`Set:in`(MINER,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(1609ef5bac765db9decf861028c278027abc7fc793322683e393358549bfe8f3) contentStartColumn(10) contentStartLine(675) org.kframework.attributes.Location(Location(675,10,679,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`Set:in`(MINER,ACCTS)))
																			v[40], i.evalErr = i.evalSetXcolonin( // `Set:in`(MINER,ACCTS)
																				v[26] /*MINER*/,
																				v[35] /*ACCTS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(MINER) && isSet(ACCTS) && isBool(_394) */ /* && */ !(m.IsTrue(v[40])) {
																				// RHS
																				return i.stepRHS10(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 100
					if i.Model.Equals(v[4], m.BoolFalse) { // #token("false","Bool")
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _4 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(`NORMAL`(.KList))
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]&kapplyMatchMask == kapplyMatchLblNORMAL0 { // `NORMAL`(.KList)
												v[13] = i.Model.KApplyArg(c, 4)
												// KVariable _5 = v[13]
												v[14] = i.Model.KApplyArg(c, 5)
												// KVariable _6 = v[14]
												v[15] = i.Model.KApplyArg(c, 6)
												// KVariable _7 = v[15]
												v[16] = i.Model.KApplyArg(c, 7)
												// KVariable _8 = v[16]
												v[17] = i.Model.KApplyArg(c, 8)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_0,_1,_2,`<txPending>`(`_List_`(`ListItem`(_450),DotVar3)),_3)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _0 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _1 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _2 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													if v[21]&kapplyMatchMask == kapplyMatchLblXlttxPendingXgt1 { // `<txPending>`(`_List_`(`ListItem`(_450),DotVar3))
														v[22] = i.Model.KApplyArg(v[21], 0)
														if i.tempBoolVar, v[23], v[24] = i.Model.ListSplitHeadTail(v[22], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(_450),DotVar3)
															// KVariable _450 = v[23]
															if v[24]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
																// KVariable DotVar3 = v[24]
																v[25] = i.Model.KApplyArg(v[17], 4)
																// KVariable _3 = v[25]
																// rule #100
																// source: iele.k @681
																// {| rule `<generatedTop>`(`<k>`(#finalizeTx(#token("false","Bool")=>#token("true","Bool"))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,`<mode>`(`NORMAL`(.KList)),_5,_6,_7,_8,`<network>`(_0,_1,_2,`<txPending>`(`_List_`(`ListItem`(_450),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_3)) requires isKItem(_450) ensures #token("true","Bool") [UNIQUE_ID(c306dacd129a14cf52552fb4ca93250cb18afa7ee855ccaba78e03ae2c261126) contentStartColumn(10) contentStartLine(681) org.kframework.attributes.Location(Location(681,10,683,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES precomputed isKItem
																	// RHS
																	return i.stepRHS100(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 375, 425
					if i.Model.Equals(v[4], m.BoolTrue) { // #token("true","Bool")
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _16 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _17 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _18 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _19 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _20 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_2,_3,_4,_5,_6,`<substate>`(`<selfDestruct>`(ACCTS),_0,_1),_7,_8,_9,_10,_11,_12,_13,_14,_15)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											// KVariable _6 = v[20]
											v[21] = i.Model.KApplyArg(v[15], 5)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(`<selfDestruct>`(ACCTS),_0,_1)
												v[22] = i.Model.KApplyArg(v[21], 0)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltselfDestructXgt1 { // `<selfDestruct>`(ACCTS)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// rule: 375
													if v[23]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
														// KVariable ACCTS = v[23]
														v[24] = i.Model.KApplyArg(v[21], 1)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[21], 2)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[15], 6)
														// KVariable _7 = v[26]
														v[27] = i.Model.KApplyArg(v[15], 7)
														// KVariable _8 = v[27]
														v[28] = i.Model.KApplyArg(v[15], 8)
														// KVariable _9 = v[28]
														v[29] = i.Model.KApplyArg(v[15], 9)
														// KVariable _10 = v[29]
														v[30] = i.Model.KApplyArg(v[15], 10)
														// KVariable _11 = v[30]
														v[31] = i.Model.KApplyArg(v[15], 11)
														// KVariable _12 = v[31]
														v[32] = i.Model.KApplyArg(v[15], 12)
														// KVariable _13 = v[32]
														v[33] = i.Model.KApplyArg(v[15], 13)
														// KVariable _14 = v[33]
														v[34] = i.Model.KApplyArg(v[15], 14)
														// KVariable _15 = v[34]
														v[35] = i.Model.KApplyArg(c, 8)
														// KVariable _21 = v[35]
														// rule #375
														// source: iele.k @685
														// {| rule `<generatedTop>`(`<k>`(``.K=>#deleteAccounts(`Set2List`(ACCTS))``~>#finalizeTx(#token("true","Bool"))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_2,_3,_4,_5,_6,`<substate>`(`<selfDestruct>`(ACCTS=>`.Set`(.KList)),_0,_1),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_andBool_`(isSet(ACCTS),`_>Int__INT`(size(ACCTS),#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(3360294077c080741cc715637504b6d4bd17cbe560f6e5eea900ec54f9dbbde4) contentStartColumn(10) contentStartLine(685) org.kframework.attributes.Location(Location(685,10,687,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(#token("true","Bool"),`_>Int__INT`(size(ACCTS),#token("0","Int")))
															v[37], i.evalErr = i.evalSize( // size(ACCTS)
																v[23] /*ACCTS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[36], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(size(ACCTS),#token("0","Int"))
																v[37],
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															if /* rhs precomputed isSet(ACCTS) */ /* && */ m.IsTrue(v[36]) {
																// RHS
																return i.stepRHS375(v, bv, config)
															}
														}
													}
													// rule: 425
													// KVariable _22 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 1)
													// KVariable _0 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 2)
													// KVariable _1 = v[25]
													v[26] = i.Model.KApplyArg(v[15], 6)
													// KVariable _7 = v[26]
													v[27] = i.Model.KApplyArg(v[15], 7)
													// KVariable _8 = v[27]
													v[28] = i.Model.KApplyArg(v[15], 8)
													// KVariable _9 = v[28]
													v[29] = i.Model.KApplyArg(v[15], 9)
													// KVariable _10 = v[29]
													v[30] = i.Model.KApplyArg(v[15], 10)
													// KVariable _11 = v[30]
													v[31] = i.Model.KApplyArg(v[15], 11)
													// KVariable _12 = v[31]
													v[32] = i.Model.KApplyArg(v[15], 12)
													// KVariable _13 = v[32]
													v[33] = i.Model.KApplyArg(v[15], 13)
													// KVariable _14 = v[33]
													v[34] = i.Model.KApplyArg(v[15], 14)
													// KVariable _15 = v[34]
													v[35] = i.Model.KApplyArg(c, 8)
													// KVariable _21 = v[35]
													// rule #425
													// source: iele.k @662
													// {| rule `<generatedTop>`(`<k>`(``#finalizeTx(#token("true","Bool"))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_2,_3,_4,_5,_6,`<substate>`(`<selfDestruct>`(_22),_0,_1),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_==K_`(`.Set`(.KList),_22) ensures #token("true","Bool") [UNIQUE_ID(47df3b9d60eca2fc121621fcec11fd1c1ec859578538e1d8162db3b405dac76a) contentStartColumn(10) contentStartLine(662) org.kframework.attributes.Location(Location(662,10,663,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_==K_`(`.Set`(.KList),_22)
														v[37], i.evalErr = i.evalXdotSet(config, -1) // `.Set`(.KList)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[36], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(`.Set`(.KList),_22)
															v[37],
															v[23] /*_22*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if m.IsTrue(v[36]) {
															// RHS
															return i.stepRHS425(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 13, 26, 32, 40, 54, 58, 77, 103, 105, 132, 135, 149, 157, 162, 163, 178, 184, 191, 198, 211, 229, 244, 247, 254, 261, 291, 305, 307, 312, 314, 317, 332, 334, 338, 357, 361, 368, 389, 398, 406, 407, 412, 416, 420, 424, 431, 438, 446, 464, 468, 473, 487, 491, 492, 496, 500, 504, 514, 522, 527, 529, 530, 536, 540, 566
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS2 { // `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(_272),SCHED)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 13, 464, 487
					if v[4]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(_272)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 13
						// KVariable _272 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #13
										// source: iele-gas.k @608
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(_272),SCHED)=>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_272)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(773bb74e4f197caa91c6d447ccb12612df544631b403206ffce7bb142f023115) contentStartColumn(10) contentStartLine(608) org.kframework.attributes.Location(Location(608,10,609,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_272)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
											v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[6] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isSchedule(SCHED),isNonEmptyInts(_272))
											bv[1] = m.IsTrue(v[19])
											if bv[1] {
												v[20], i.evalErr = i.evalIsNonEmptyInts( // isNonEmptyInts(_272)
													v[5] /*_272*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[20])
											}
											// `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_272)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
											bv[0] = bv[1]
											if bv[0] {
												v[21], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
													i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
													),
													v[6] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[21])
											}
											if bv[0] {
												// RHS
												return i.stepRHS13(v, bv, config)
											}
										}
									}
								}
							}
						}
						// rule: 464
						// KVariable _184 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												if v[25]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(`.List`(.KList))
													v[26] = i.Model.KApplyArg(v[25], 0)
													if i.Model.IsEmptyList(v[26], m.SortList, m.LblXuListXu) { // empty list `.List`(.KList)
														v[27] = i.Model.KApplyArg(v[22], 3)
														// KVariable _2 = v[27]
														v[28] = i.Model.KApplyArg(v[22], 4)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 5)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 6)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[22], 7)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[22], 8)
														// KVariable _7 = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[49]
														// rule #464
														// source: iele-gas.k @604
														// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(_184),SCHED)=>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`.List`(.KList)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_184)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(ae77506f1c7d254b758bd713119d8ece290c4314bc1bf44cc215a2c682a607b3) contentStartColumn(10) contentStartLine(604) org.kframework.attributes.Location(Location(604,10,606,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_184)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
															v[50], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																v[6] /*SCHED*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isSchedule(SCHED),isNonEmptyInts(_184))
															bv[1] = m.IsTrue(v[50])
															if bv[1] {
																v[51], i.evalErr = i.evalIsNonEmptyInts( // isNonEmptyInts(_184)
																	v[5] /*_184*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[51])
															}
															// `_andBool_`(`_andBool_`(isSchedule(SCHED),isNonEmptyInts(_184)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
															bv[0] = bv[1]
															if bv[0] {
																v[52], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																	i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																	),
																	v[6] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[52]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS464(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 487
						// KVariable ARGS = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(_139),DotVar4)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(_139),DotVar4)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												if v[25]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(`_List_`(`ListItem`(_139),DotVar4))
													v[26] = i.Model.KApplyArg(v[25], 0)
													if i.tempBoolVar, v[27], v[28] = i.Model.ListSplitHeadTail(v[26], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(_139),DotVar4)
														// KVariable _139 = v[27]
														if v[28]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
															// KVariable DotVar4 = v[28]
															v[29] = i.Model.KApplyArg(v[22], 3)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[22], 4)
															// KVariable _3 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 5)
															// KVariable _4 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 6)
															// KVariable _5 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 7)
															// KVariable _6 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 8)
															// KVariable _7 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 9)
															// KVariable _8 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 10)
															// KVariable _9 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 11)
															// KVariable _10 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 12)
															// KVariable _11 = v[38]
															v[39] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[39]
															v[40] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[40]
															v[41] = i.Model.KApplyArg(v[17], 5)
															// KVariable _18 = v[41]
															v[42] = i.Model.KApplyArg(v[17], 6)
															// KVariable _19 = v[42]
															v[43] = i.Model.KApplyArg(v[17], 7)
															// KVariable _20 = v[43]
															v[44] = i.Model.KApplyArg(v[17], 8)
															// KVariable _21 = v[44]
															v[45] = i.Model.KApplyArg(v[17], 9)
															// KVariable _22 = v[45]
															v[46] = i.Model.KApplyArg(v[17], 10)
															// KVariable _23 = v[46]
															v[47] = i.Model.KApplyArg(v[17], 11)
															// KVariable _24 = v[47]
															v[48] = i.Model.KApplyArg(v[17], 12)
															// KVariable _25 = v[48]
															v[49] = i.Model.KApplyArg(v[17], 13)
															// KVariable _26 = v[49]
															v[50] = i.Model.KApplyArg(v[17], 14)
															// KVariable _27 = v[50]
															v[51] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[51]
															// rule #487
															// source: iele-gas.k @601
															// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ret__IELE-COMMON`(ARGS),SCHED)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),#sizeRegs(ARGS)),#token("8","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(_139),DotVar4)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyInts(ARGS),isSchedule(SCHED)),isKItem(_139)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(732a9f2370d0a17f8ed1485606df869853ee4d65ec0ea4ccfbf2d029ee9feda6) contentStartColumn(10) contentStartLine(601) org.kframework.attributes.Location(Location(601,10,603,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyInts(ARGS),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																v[52], i.evalErr = i.evalIsNonEmptyInts( // isNonEmptyInts(ARGS)
																	v[5] /*ARGS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isNonEmptyInts(ARGS),isSchedule(SCHED))
																bv[1] = m.IsTrue(v[52])
																if bv[1] {
																	v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[6] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[53])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyInts(ARGS),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																bv[0] = bv[1] /* && */ /* rhs precomputed isKItem */ 
																if bv[0] {
																	v[54], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																		i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																		),
																		v[6] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = !(m.IsTrue(v[54]))
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS487(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 26, 420, 473, 500
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqXuXuIELEXhyphenCOMMON2 { // `_=__IELE-COMMON`(DEST,SRC)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable DEST = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rule: 26
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable SRC = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #26
											// source: iele-gas.k @558
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC),SCHED)=>`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(SRC))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),isInt(SRC)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(da4129394b90d6f599e3edf220e9ba6c1efbaea5889ca5949b9842e18d243529) contentStartColumn(10) contentStartLine(558) org.kframework.attributes.Location(Location(558,10,559,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(DEST)
													v[5] /*DEST*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(DEST),isSchedule(SCHED))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[7] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
												bv[0] = bv[1] /* && */ /* rhs precomputed isInt(SRC) */ 
												if bv[0] {
													v[22], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
														i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
														),
														v[7] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = !(m.IsTrue(v[22]))
												}
												if bv[0] {
													// RHS
													return i.stepRHS26(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
						// rules: 420, 473
						if v[6]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(SRC)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// rule: 420
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable SRC = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[19], 1)
													// KVariable _15 = v[21]
													v[22] = i.Model.KApplyArg(v[19], 2)
													// KVariable _16 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 3)
													// KVariable _17 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 4)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														// KVariable _2 = v[27]
														v[28] = i.Model.KApplyArg(v[24], 3)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[24], 4)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[24], 5)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[24], 6)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[24], 7)
														if v[32]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[33] = i.Model.KApplyArg(v[32], 0)
															if v[33]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[33]
																v[34] = i.Model.KApplyArg(v[24], 8)
																// KVariable _7 = v[34]
																v[35] = i.Model.KApplyArg(v[24], 9)
																// KVariable _8 = v[35]
																v[36] = i.Model.KApplyArg(v[24], 10)
																// KVariable _9 = v[36]
																v[37] = i.Model.KApplyArg(v[24], 11)
																// KVariable _10 = v[37]
																v[38] = i.Model.KApplyArg(v[24], 12)
																// KVariable _11 = v[38]
																v[39] = i.Model.KApplyArg(v[24], 13)
																// KVariable _12 = v[39]
																v[40] = i.Model.KApplyArg(v[24], 14)
																// KVariable _13 = v[40]
																v[41] = i.Model.KApplyArg(v[19], 5)
																// KVariable _18 = v[41]
																v[42] = i.Model.KApplyArg(v[19], 6)
																// KVariable _19 = v[42]
																v[43] = i.Model.KApplyArg(v[19], 7)
																// KVariable _20 = v[43]
																v[44] = i.Model.KApplyArg(v[19], 8)
																// KVariable _21 = v[44]
																v[45] = i.Model.KApplyArg(v[19], 9)
																// KVariable _22 = v[45]
																v[46] = i.Model.KApplyArg(v[19], 10)
																// KVariable _23 = v[46]
																v[47] = i.Model.KApplyArg(v[19], 11)
																// KVariable _24 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 12)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 13)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 14)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[51]
																// rule #420
																// source: iele-gas.k @554
																// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)),SCHED)=>`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isSchedule(SCHED)),isInt(SRC)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(c575dde974024689d5c9dd9e1e8a9e1d35c1e034ddfd160f80402f589536fa52) contentStartColumn(10) contentStartLine(554) org.kframework.attributes.Location(Location(554,10,556,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED)),#token("true","Bool")),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
																	v[52], i.evalErr = i.evalIsLValue( // isLValue(DEST)
																		v[5] /*DEST*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED))
																	bv[1] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[52])
																	if bv[1] {
																		v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																			v[8] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[53])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED)),#token("true","Bool")),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
																	bv[0] = bv[1] /* && */ /* rhs precomputed isInt(SRC) */ 
																	if bv[0] {
																		v[54], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																			i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																			),
																			v[8] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[54])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS420(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 473
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable SRC = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[19], 1)
													// KVariable _15 = v[21]
													v[22] = i.Model.KApplyArg(v[19], 2)
													// KVariable _16 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 3)
													// KVariable _17 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 4)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														// KVariable _2 = v[27]
														v[28] = i.Model.KApplyArg(v[24], 3)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[24], 4)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[24], 5)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[24], 6)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[24], 7)
														if v[32]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[33] = i.Model.KApplyArg(v[32], 0)
															if v[33]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[33]
																v[34] = i.Model.KApplyArg(v[24], 8)
																// KVariable _7 = v[34]
																v[35] = i.Model.KApplyArg(v[24], 9)
																// KVariable _8 = v[35]
																v[36] = i.Model.KApplyArg(v[24], 10)
																// KVariable _9 = v[36]
																v[37] = i.Model.KApplyArg(v[24], 11)
																// KVariable _10 = v[37]
																v[38] = i.Model.KApplyArg(v[24], 12)
																// KVariable _11 = v[38]
																v[39] = i.Model.KApplyArg(v[24], 13)
																// KVariable _12 = v[39]
																v[40] = i.Model.KApplyArg(v[24], 14)
																// KVariable _13 = v[40]
																v[41] = i.Model.KApplyArg(v[19], 5)
																// KVariable _18 = v[41]
																v[42] = i.Model.KApplyArg(v[19], 6)
																// KVariable _19 = v[42]
																v[43] = i.Model.KApplyArg(v[19], 7)
																// KVariable _20 = v[43]
																v[44] = i.Model.KApplyArg(v[19], 8)
																// KVariable _21 = v[44]
																v[45] = i.Model.KApplyArg(v[19], 9)
																// KVariable _22 = v[45]
																v[46] = i.Model.KApplyArg(v[19], 10)
																// KVariable _23 = v[46]
																v[47] = i.Model.KApplyArg(v[19], 11)
																// KVariable _24 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 12)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 13)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 14)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[51]
																// rule #473
																// source: iele-gas.k @550
																// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,`%__IELE-COMMON`(SRC)),SCHED)=>`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,SRC))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isLValue(DEST)),isSchedule(SCHED)),isInt(SRC)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(c6d39606ad932aa72395c084f8c862a10d80cc9b81685e7567bd4f3605fac93e) contentStartColumn(10) contentStartLine(550) org.kframework.attributes.Location(Location(550,10,552,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																	v[52], i.evalErr = i.evalIsLValue( // isLValue(DEST)
																		v[5] /*DEST*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED))
																	bv[1] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[52])
																	if bv[1] {
																		v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																			v[8] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[53])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(DEST)),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																	bv[0] = bv[1] /* && */ /* rhs precomputed isInt(SRC) */ 
																	if bv[0] {
																		v[54], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																			i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																			),
																			v[8] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = !(m.IsTrue(v[54]))
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS473(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 500
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable SRC = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #500
											// source: iele-gas.k @561
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=__IELE-COMMON`(DEST,SRC),SCHED)=>`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),isInt(SRC)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)) ensures #token("true","Bool") [UNIQUE_ID(8aca400983756184dc66d0528f7090648ff2e644665b57d8194280da12bf0f4c) contentStartColumn(10) contentStartLine(561) org.kframework.attributes.Location(Location(561,10,562,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),#token("true","Bool")),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(DEST)
													v[5] /*DEST*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLValue(DEST),isSchedule(SCHED))
												bv[1] = m.IsTrue(v[20])
												if bv[1] {
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[7] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[21])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(DEST),isSchedule(SCHED)),#token("true","Bool")),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
												bv[0] = bv[1] /* && */ /* rhs precomputed isInt(SRC) */ 
												if bv[0] {
													v[22], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
														i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
														),
														v[7] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[22])
												}
												if bv[0] {
													// RHS
													return i.stepRHS500(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 32
					if v[4]&kapplyMatchMask == kapplyMatchLblECPAIRINGXuIELEXhyphenPRECOMPILED0 { // `ECPAIRING_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,_161)),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,_161)),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,_161))
													v[28] = i.Model.KApplyArg(v[27], 0)
													if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,_161)
														v[29] = i.Model.KApplyArg(v[28], 0)
														if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[29]
															v[30] = i.Model.KApplyArg(v[28], 1)
															// KVariable _161 = v[30]
															v[31] = i.Model.KApplyArg(v[21], 6)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[21], 7)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[21], 8)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[21], 9)
															// KVariable _8 = v[34]
															v[35] = i.Model.KApplyArg(v[21], 10)
															// KVariable _9 = v[35]
															v[36] = i.Model.KApplyArg(v[21], 11)
															// KVariable _10 = v[36]
															v[37] = i.Model.KApplyArg(v[21], 12)
															// KVariable _11 = v[37]
															v[38] = i.Model.KApplyArg(v[21], 13)
															// KVariable _12 = v[38]
															v[39] = i.Model.KApplyArg(v[21], 14)
															// KVariable _13 = v[39]
															v[40] = i.Model.KApplyArg(v[16], 5)
															// KVariable _18 = v[40]
															v[41] = i.Model.KApplyArg(v[16], 6)
															// KVariable _19 = v[41]
															v[42] = i.Model.KApplyArg(v[16], 7)
															// KVariable _20 = v[42]
															v[43] = i.Model.KApplyArg(v[16], 8)
															// KVariable _21 = v[43]
															v[44] = i.Model.KApplyArg(v[16], 9)
															// KVariable _22 = v[44]
															v[45] = i.Model.KApplyArg(v[16], 10)
															// KVariable _23 = v[45]
															v[46] = i.Model.KApplyArg(v[16], 11)
															// KVariable _24 = v[46]
															v[47] = i.Model.KApplyArg(v[16], 12)
															// KVariable _25 = v[47]
															v[48] = i.Model.KApplyArg(v[16], 13)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[16], 14)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[50]
															// rule #32
															// source: iele-gas.k @735
															// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECPAIRING_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gecpairing_IELE-GAS`(.KList),SCHED),`_*Int__INT`(LEN,`_<_>_IELE-GAS`(`Gecpairingpair_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,_161)),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isSchedule(SCHED)),isInts(_161)) ensures #token("true","Bool") [UNIQUE_ID(d0dccd1da438cd28b5f9a29c49a0d3a1af489ba0bed0edcbc26c20d1156d5fca) contentStartColumn(10) contentStartLine(735) org.kframework.attributes.Location(Location(735,10,735,146)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isInts(_161))
																v[51], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[5] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isInts(_161))
																bv[0] = /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[51])
																if bv[0] {
																	v[52], i.evalErr = i.evalIsInts( // isInts(_161)
																		v[30] /*_161*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[52])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS32(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 40
					if v[4]&kapplyMatchMask == kapplyMatchLblECADDXuIELEXhyphenPRECOMPILED0 { // `ECADD_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #40
										// source: iele-gas.k @733
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECADD_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecadd_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(c66d6d7ea9edb5b7fcaaf6cf3fcd811ff03c3a1bae24af2ee1f8642533f872d9) contentStartColumn(10) contentStartLine(733) org.kframework.attributes.Location(Location(733,10,733,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isSchedule(SCHED)
											v[18], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[5] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS40(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rules: 54, 77, 162, 211, 229, 244, 247, 291, 368, 398, 406, 407, 424, 446, 491, 496, 522
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(_219,`@__IELE-COMMON`(#token("iele.gas","IeleName")),_220)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 54
						// KVariable _219 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.gas","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotgas) { // #token("iele.gas","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _220 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #54
												// source: iele-gas.k @514
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_219,`@__IELE-COMMON`(#token("iele.gas","IeleName")),_220),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_220),isLValues(_219)),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(ab2cb4e336450bff21266cf766401337df7d20eb70946405a14fedf9541d9e91) contentStartColumn(10) contentStartLine(514) org.kframework.attributes.Location(Location(514,10,514,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_220),isLValues(_219)),isSchedule(SCHED))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_220)
														v[8] /*_220*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_220),isLValues(_219))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsLValues( // isLValues(_219)
															v[5] /*_219*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_220),isLValues(_219)),isSchedule(SCHED))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS54(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 77
						// KVariable _305 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.beneficiary","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotbeneficiary) { // #token("iele.beneficiary","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _306 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #77
												// source: iele-gas.k @520
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_305,`@__IELE-COMMON`(#token("iele.beneficiary","IeleName")),_306),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_305),isSchedule(SCHED)),isOperands(_306)) ensures #token("true","Bool") [UNIQUE_ID(7b3f9cc50743c1ebd15516fa621bfe5ffe860f453313ebb212b279ff23c91618) contentStartColumn(10) contentStartLine(520) org.kframework.attributes.Location(Location(520,10,520,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValues(_305),isSchedule(SCHED)),isOperands(_306))
													v[22], i.evalErr = i.evalIsLValues( // isLValues(_305)
														v[5] /*_305*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValues(_305),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isLValues(_305),isSchedule(SCHED)),isOperands(_306))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsOperands( // isOperands(_306)
															v[8] /*_306*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS77(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 162
						// KVariable _163 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.gaslimit","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotgaslimit) { // #token("iele.gaslimit","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _164 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #162
												// source: iele-gas.k @516
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_163,`@__IELE-COMMON`(#token("iele.gaslimit","IeleName")),_164),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_164),isSchedule(SCHED)),isLValues(_163)) ensures #token("true","Bool") [UNIQUE_ID(e5cf82ef2468631f4e281a666798ca594c5e80cd84aa7278ec784acb553eb76d) contentStartColumn(10) contentStartLine(516) org.kframework.attributes.Location(Location(516,10,516,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_164),isSchedule(SCHED)),isLValues(_163))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_164)
														v[8] /*_164*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_164),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_164),isSchedule(SCHED)),isLValues(_163))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_163)
															v[5] /*_163*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS162(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 211
						// KVariable _229 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _230 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable _231 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _33 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _34 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _35 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _19 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _20 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _21 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _22 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
													v[25] = i.Model.KApplyArg(v[24], 0)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4)
														v[26] = i.Model.KApplyArg(v[25], 0)
														// KVariable _0 = v[26]
														v[27] = i.Model.KApplyArg(v[25], 1)
														// KVariable _1 = v[27]
														v[28] = i.Model.KApplyArg(v[25], 2)
														if v[28]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(LABELS)
															v[29] = i.Model.KApplyArg(v[28], 0)
															if v[29]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																// KVariable LABELS = v[29]
																v[30] = i.Model.KApplyArg(v[25], 3)
																// KVariable _2 = v[30]
																v[31] = i.Model.KApplyArg(v[25], 4)
																// KVariable _3 = v[31]
																v[32] = i.Model.KApplyArg(v[25], 5)
																// KVariable _4 = v[32]
																v[33] = i.Model.KApplyArg(v[24], 1)
																// KVariable _5 = v[33]
																v[34] = i.Model.KApplyArg(v[24], 2)
																// KVariable _6 = v[34]
																v[35] = i.Model.KApplyArg(v[24], 3)
																// KVariable _7 = v[35]
																v[36] = i.Model.KApplyArg(v[24], 4)
																// KVariable _8 = v[36]
																v[37] = i.Model.KApplyArg(v[24], 5)
																// KVariable _9 = v[37]
																v[38] = i.Model.KApplyArg(v[24], 6)
																// KVariable _10 = v[38]
																v[39] = i.Model.KApplyArg(v[24], 7)
																// KVariable _11 = v[39]
																v[40] = i.Model.KApplyArg(v[24], 8)
																// KVariable _12 = v[40]
																v[41] = i.Model.KApplyArg(v[24], 9)
																// KVariable _13 = v[41]
																v[42] = i.Model.KApplyArg(v[24], 10)
																// KVariable _14 = v[42]
																v[43] = i.Model.KApplyArg(v[24], 11)
																// KVariable _15 = v[43]
																v[44] = i.Model.KApplyArg(v[24], 12)
																// KVariable _16 = v[44]
																v[45] = i.Model.KApplyArg(v[24], 13)
																// KVariable _17 = v[45]
																v[46] = i.Model.KApplyArg(v[24], 14)
																// KVariable _18 = v[46]
																v[47] = i.Model.KApplyArg(v[19], 5)
																// KVariable _23 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 6)
																// KVariable _24 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 7)
																// KVariable _25 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 8)
																// KVariable _26 = v[50]
																v[51] = i.Model.KApplyArg(v[19], 9)
																// KVariable _27 = v[51]
																v[52] = i.Model.KApplyArg(v[19], 10)
																// KVariable _28 = v[52]
																v[53] = i.Model.KApplyArg(v[19], 11)
																// KVariable _29 = v[53]
																v[54] = i.Model.KApplyArg(v[19], 12)
																// KVariable _30 = v[54]
																v[55] = i.Model.KApplyArg(v[19], 13)
																// KVariable _31 = v[55]
																v[56] = i.Model.KApplyArg(v[19], 14)
																// KVariable _32 = v[56]
																v[57] = i.Model.KApplyArg(c, 8)
																// KVariable _38 = v[57]
																// rule #211
																// source: iele-gas.k @593
																// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_229,IDX,_230),_231)=>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(LABELS),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isOperands(_230)),isSchedule(_231)),isMap(LABELS)),isLValues(_229)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(49d6dcf9e77c7c9a62db19be2709b77a17243223d8fce27ee77fedb1a1bb98d4) contentStartColumn(10) contentStartLine(593) org.kframework.attributes.Location(Location(593,10,595,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_230)),isSchedule(_231)),#token("true","Bool")),isLValues(_229)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS)))
																	v[58], i.evalErr = i.evalIsOperands( // isOperands(_230)
																		v[7] /*_230*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_230)),isSchedule(_231))
																	bv[2] = /* rhs precomputed isInt(IDX) */ /* && */ m.IsTrue(v[58])
																	if bv[2] {
																		v[59], i.evalErr = i.evalIsSchedule( // isSchedule(_231)
																			v[8] /*_231*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[59])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_230)),isSchedule(_231)),#token("true","Bool")),isLValues(_229))
																	bv[1] = bv[2] /* && */ /* rhs precomputed isMap(LABELS) */ 
																	if bv[1] {
																		v[60], i.evalErr = i.evalIsLValues( // isLValues(_229)
																			v[5] /*_229*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[60])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_230)),isSchedule(_231)),#token("true","Bool")),isLValues(_229)),`notBool_`(`_in_keys(_)_MAP`(IDX,LABELS)))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[61], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LABELS)
																			v[6] /*IDX*/,
																			v[29] /*LABELS*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = !(m.IsTrue(v[61]))
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS211(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 229
						// KVariable _246 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.origin","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotorigin) { // #token("iele.origin","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _247 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #229
												// source: iele-gas.k @522
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_246,`@__IELE-COMMON`(#token("iele.origin","IeleName")),_247),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_247),isSchedule(SCHED)),isLValues(_246)) ensures #token("true","Bool") [UNIQUE_ID(b266ed2c21591addbb03d3869bd7bebfb583470fd0e0349e55ef2fd3802b8825) contentStartColumn(10) contentStartLine(522) org.kframework.attributes.Location(Location(522,10,522,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_247),isSchedule(SCHED)),isLValues(_246))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_247)
														v[8] /*_247*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_247),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_247),isSchedule(SCHED)),isLValues(_246))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_246)
															v[5] /*_246*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS229(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 244
						// KVariable _232 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.codesize","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotcodesize) { // #token("iele.codesize","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _233 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #244
												// source: iele-gas.k @519
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_232,`@__IELE-COMMON`(#token("iele.codesize","IeleName")),_233),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_233)),isLValues(_232)) ensures #token("true","Bool") [UNIQUE_ID(7f0ac6151737ee85098b646f501e2a18fa162e74810d940bb86e4ecdc3a430a8) contentStartColumn(10) contentStartLine(519) org.kframework.attributes.Location(Location(519,10,519,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_233)),isLValues(_232))
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isOperands(_233))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsOperands( // isOperands(_233)
															v[8] /*_233*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_233)),isLValues(_232))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_232)
															v[5] /*_232*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS244(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 247
						// KVariable _196 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.gasprice","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotgasprice) { // #token("iele.gasprice","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _197 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #247
												// source: iele-gas.k @515
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_196,`@__IELE-COMMON`(#token("iele.gasprice","IeleName")),_197),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_197),isSchedule(SCHED)),isLValues(_196)) ensures #token("true","Bool") [UNIQUE_ID(5ba7cc010a6ee9440687b587924d4d91aa8a51c52c900f5220e6035b121d2cdf) contentStartColumn(10) contentStartLine(515) org.kframework.attributes.Location(Location(515,10,515,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_197),isSchedule(SCHED)),isLValues(_196))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_197)
														v[8] /*_197*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_197),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_197),isSchedule(SCHED)),isLValues(_196))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_196)
															v[5] /*_196*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS247(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 291
						// KVariable _243 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.blockhash","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotblockhash) { // #token("iele.blockhash","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _244 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #291
												// source: iele-gas.k @532
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_243,`@__IELE-COMMON`(#token("iele.blockhash","IeleName")),_244),SCHED)=>`_<_>_IELE-GAS`(`Gblockhash_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_244),isSchedule(SCHED)),isLValues(_243)) ensures #token("true","Bool") [UNIQUE_ID(5149061a4ed61034010585d826242875f13ec125941a104eeb99dbf2e1378286) contentStartColumn(10) contentStartLine(532) org.kframework.attributes.Location(Location(532,10,532,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_244),isSchedule(SCHED)),isLValues(_243))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_244)
														v[8] /*_244*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_244),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_244),isSchedule(SCHED)),isLValues(_243))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_243)
															v[5] /*_243*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS291(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 368
						// KVariable _190 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.number","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotnumber) { // #token("iele.number","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _191 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #368
												// source: iele-gas.k @517
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_190,`@__IELE-COMMON`(#token("iele.number","IeleName")),_191),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_190),isSchedule(SCHED)),isOperands(_191)) ensures #token("true","Bool") [UNIQUE_ID(edc0873247078b6980306c023b834074a71b3c3563b2718e6041034184955885) contentStartColumn(10) contentStartLine(517) org.kframework.attributes.Location(Location(517,10,517,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValues(_190),isSchedule(SCHED)),isOperands(_191))
													v[22], i.evalErr = i.evalIsLValues( // isLValues(_190)
														v[5] /*_190*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValues(_190),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isLValues(_190),isSchedule(SCHED)),isOperands(_191))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsOperands( // isOperands(_191)
															v[8] /*_191*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS368(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 398
						// KVariable _199 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.extcodesize","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotextcodesize) { // #token("iele.extcodesize","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _200 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #398
												// source: iele-gas.k @541
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_199,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),_200),SCHED)=>`_<_>_IELE-GAS`(`Gextcodesize_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_199)),isOperands(_200)) ensures #token("true","Bool") [UNIQUE_ID(c7700e72dde2a324eff5793788d3a051fc2dfc5b5880b94ab72ffe89192bce9e) contentStartColumn(10) contentStartLine(541) org.kframework.attributes.Location(Location(541,10,541,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_199)),isOperands(_200))
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isLValues(_199))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsLValues( // isLValues(_199)
															v[5] /*_199*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_199)),isOperands(_200))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsOperands( // isOperands(_200)
															v[8] /*_200*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS398(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 406
						// KVariable _273 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.callvalue","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotcallvalue) { // #token("iele.callvalue","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _274 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #406
												// source: iele-gas.k @526
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_273,`@__IELE-COMMON`(#token("iele.callvalue","IeleName")),_274),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_273),isSchedule(SCHED)),isOperands(_274)) ensures #token("true","Bool") [UNIQUE_ID(c0442fe5235eac42ab6535d01d8642e4b1503585a2d0916dd9c82e86be738d82) contentStartColumn(10) contentStartLine(526) org.kframework.attributes.Location(Location(526,10,526,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValues(_273),isSchedule(SCHED)),isOperands(_274))
													v[22], i.evalErr = i.evalIsLValues( // isLValues(_273)
														v[5] /*_273*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValues(_273),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isLValues(_273),isSchedule(SCHED)),isOperands(_274))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsOperands( // isOperands(_274)
															v[8] /*_274*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS406(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 407
						// KVariable _166 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.timestamp","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdottimestamp) { // #token("iele.timestamp","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _167 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #407
												// source: iele-gas.k @524
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_166,`@__IELE-COMMON`(#token("iele.timestamp","IeleName")),_167),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_167)),isLValues(_166)) ensures #token("true","Bool") [UNIQUE_ID(ebbd71bf6ed077435377f4e82481c772df0661401b09151f5777d7f3a8ae2526) contentStartColumn(10) contentStartLine(524) org.kframework.attributes.Location(Location(524,10,524,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_167)),isLValues(_166))
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isOperands(_167))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsOperands( // isOperands(_167)
															v[8] /*_167*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_167)),isLValues(_166))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_166)
															v[5] /*_166*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS407(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 424
						// KVariable _221 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.msize","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotmsize) { // #token("iele.msize","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _222 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #424
												// source: iele-gas.k @518
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_221,`@__IELE-COMMON`(#token("iele.msize","IeleName")),_222),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_221)),isOperands(_222)) ensures #token("true","Bool") [UNIQUE_ID(85ed71093fe12ce5ece5842020acbb239ddf03dc4f9fc94348e25bca545d4bfe) contentStartColumn(10) contentStartLine(518) org.kframework.attributes.Location(Location(518,10,518,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_221)),isOperands(_222))
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isLValues(_221))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsLValues( // isLValues(_221)
															v[5] /*_221*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),isLValues(_221)),isOperands(_222))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsOperands( // isOperands(_222)
															v[8] /*_222*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS424(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 446
						// KVariable _275 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.difficulty","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotdifficulty) { // #token("iele.difficulty","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _276 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #446
												// source: iele-gas.k @525
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_275,`@__IELE-COMMON`(#token("iele.difficulty","IeleName")),_276),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_275),isOperands(_276)),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(b34f881f2f51c6458d3e3e50b6847a48529ff88ca9eae4f5b0212f59e8508bd6) contentStartColumn(10) contentStartLine(525) org.kframework.attributes.Location(Location(525,10,525,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValues(_275),isOperands(_276)),isSchedule(SCHED))
													v[22], i.evalErr = i.evalIsLValues( // isLValues(_275)
														v[5] /*_275*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValues(_275),isOperands(_276))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsOperands( // isOperands(_276)
															v[8] /*_276*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isLValues(_275),isOperands(_276)),isSchedule(SCHED))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS446(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 491
						// KVariable _259 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.address","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotaddress) { // #token("iele.address","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _260 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #491
												// source: iele-gas.k @521
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_259,`@__IELE-COMMON`(#token("iele.address","IeleName")),_260),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperands(_260),isSchedule(SCHED)),isLValues(_259)) ensures #token("true","Bool") [UNIQUE_ID(1c76474de8740d858d49f0dd8b790bd45542ce33a39f7937734a69d57ec110d5) contentStartColumn(10) contentStartLine(521) org.kframework.attributes.Location(Location(521,10,521,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isOperands(_260),isSchedule(SCHED)),isLValues(_259))
													v[22], i.evalErr = i.evalIsOperands( // isOperands(_260)
														v[8] /*_260*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isOperands(_260),isSchedule(SCHED))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isOperands(_260),isSchedule(SCHED)),isLValues(_259))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_259)
															v[5] /*_259*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS491(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 496
						// KVariable _302 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.caller","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotcaller) { // #token("iele.caller","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _303 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #496
												// source: iele-gas.k @523
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_302,`@__IELE-COMMON`(#token("iele.caller","IeleName")),_303),SCHED)=>`_<_>_IELE-GAS`(`Greadstate_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValues(_302),isOperands(_303)),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(f5f0a744b6a1d6098338d2c22ffd52a72051fc4ad59b9ec7c2eac5c3205064fe) contentStartColumn(10) contentStartLine(523) org.kframework.attributes.Location(Location(523,10,523,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isLValues(_302),isOperands(_303)),isSchedule(SCHED))
													v[22], i.evalErr = i.evalIsLValues( // isLValues(_302)
														v[5] /*_302*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValues(_302),isOperands(_303))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsOperands( // isOperands(_303)
															v[8] /*_303*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isLValues(_302),isOperands(_303)),isSchedule(SCHED))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS496(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 522
						// KVariable _217 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.balance","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotbalance) { // #token("iele.balance","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable _218 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #522
												// source: iele-gas.k @540
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_217,`@__IELE-COMMON`(#token("iele.balance","IeleName")),_218),SCHED)=>`_<_>_IELE-GAS`(`Gbalance_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_218)),isLValues(_217)) ensures #token("true","Bool") [UNIQUE_ID(c32b6b7dacb24f3c83536036a2b0976018f32d53cff5a60e130fd8b8c3770775) contentStartColumn(10) contentStartLine(540) org.kframework.attributes.Location(Location(540,10,540,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_218)),isLValues(_217))
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isOperands(_218))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsOperands( // isOperands(_218)
															v[8] /*_218*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperands(_218)),isLValues(_217))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValues( // isLValues(_217)
															v[5] /*_217*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS522(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 58
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=and_,__IELE-COMMON`(_173,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _173 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #58
												// source: iele-gas.k @440
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=and_,__IELE-COMMON`(_173,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_173),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(f5433d4507a34bae5ab33e0ca37e4122815fe6155cead3cc614ddebc83035055) contentStartColumn(10) contentStartLine(440) org.kframework.attributes.Location(Location(440,10,440,135)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_173),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_173)
														v[5] /*_173*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_173),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS58(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 103
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=add_,__IELE-COMMON`(_148,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _148 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #103
												// source: iele-gas.k @463
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=add_,__IELE-COMMON`(_148,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_148),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(985a739ab95d50852c6232cf3a598fca1964ced68ef65526ac27fed60f401679) contentStartColumn(10) contentStartLine(463) org.kframework.attributes.Location(Location(463,10,463,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_148),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_148)
														v[5] /*_148*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_148),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS103(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 105
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqiszeroXuXuIELEXhyphenCOMMON2 { // `_=iszero__IELE-COMMON`(_271,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _271 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable W = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[18]
										v[19] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[19]
										// rule #105
										// source: iele-gas.k @452
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=iszero__IELE-COMMON`(_271,W),SCHED)=>`_<_>_IELE-GAS`(`Giszero_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(_271),isSchedule(SCHED)),isOperand(W)) ensures #token("true","Bool") [UNIQUE_ID(896523b16484e83736001c87a64e52e10aae00c189c8c4faa5df0f68bf46d966) contentStartColumn(10) contentStartLine(452) org.kframework.attributes.Location(Location(452,10,452,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isLValue(_271),isSchedule(SCHED)),isOperand(W))
											v[20], i.evalErr = i.evalIsLValue( // isLValue(_271)
												v[5] /*_271*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(_271),isSchedule(SCHED))
											bv[1] = m.IsTrue(v[20])
											if bv[1] {
												v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[7] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[21])
											}
											// `_andBool_`(`_andBool_`(isLValue(_271),isSchedule(SCHED)),isOperand(W))
											bv[0] = bv[1]
											if bv[0] {
												v[22], i.evalErr = i.evalIsOperand( // isOperand(W)
													v[6] /*W*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[22])
											}
											if bv[0] {
												// RHS
												return i.stepRHS105(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 132
					if v[4]&kapplyMatchMask == kapplyMatchLblECMULXuIELEXhyphenPRECOMPILED0 { // `ECMUL_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #132
										// source: iele-gas.k @734
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECMUL_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecmul_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(b78c1fab651a88ea5f7b54e6dd68bad1a711051c367b1e7924e0c6333e2382fe) contentStartColumn(10) contentStartLine(734) org.kframework.attributes.Location(Location(734,10,734,55)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isSchedule(SCHED)
											v[18], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[5] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS132(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 135
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(_285,W0)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _285 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _14 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _15 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _16 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _17 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												// KVariable _2 = v[26]
												v[27] = i.Model.KApplyArg(v[23], 3)
												// KVariable _3 = v[27]
												v[28] = i.Model.KApplyArg(v[23], 4)
												// KVariable _4 = v[28]
												v[29] = i.Model.KApplyArg(v[23], 5)
												// KVariable _5 = v[29]
												v[30] = i.Model.KApplyArg(v[23], 6)
												// KVariable _6 = v[30]
												v[31] = i.Model.KApplyArg(v[23], 7)
												// KVariable _7 = v[31]
												v[32] = i.Model.KApplyArg(v[23], 8)
												if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[33] = i.Model.KApplyArg(v[32], 0)
													if v[33]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[33]
														v[34] = i.Model.KApplyArg(v[23], 9)
														// KVariable _8 = v[34]
														v[35] = i.Model.KApplyArg(v[23], 10)
														// KVariable _9 = v[35]
														v[36] = i.Model.KApplyArg(v[23], 11)
														// KVariable _10 = v[36]
														v[37] = i.Model.KApplyArg(v[23], 12)
														// KVariable _11 = v[37]
														v[38] = i.Model.KApplyArg(v[23], 13)
														// KVariable _12 = v[38]
														v[39] = i.Model.KApplyArg(v[23], 14)
														// KVariable _13 = v[39]
														v[40] = i.Model.KApplyArg(v[18], 5)
														// KVariable _18 = v[40]
														v[41] = i.Model.KApplyArg(v[18], 6)
														// KVariable _19 = v[41]
														v[42] = i.Model.KApplyArg(v[18], 7)
														// KVariable _20 = v[42]
														v[43] = i.Model.KApplyArg(v[18], 8)
														// KVariable _21 = v[43]
														v[44] = i.Model.KApplyArg(v[18], 9)
														// KVariable _22 = v[44]
														v[45] = i.Model.KApplyArg(v[18], 10)
														// KVariable _23 = v[45]
														v[46] = i.Model.KApplyArg(v[18], 11)
														// KVariable _24 = v[46]
														v[47] = i.Model.KApplyArg(v[18], 12)
														// KVariable _25 = v[47]
														v[48] = i.Model.KApplyArg(v[18], 13)
														// KVariable _26 = v[48]
														v[49] = i.Model.KApplyArg(v[18], 14)
														// KVariable _27 = v[49]
														v[50] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[50]
														// rule #135
														// source: iele-gas.k @492
														// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sha3__IELE-COMMON`(_285,W0),SCHED)=>`_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_285),isOperand(W0)),isSchedule(SCHED)),isMap(LM)),`notBool_`(`_in_keys(_)_MAP`(W0,LM))) ensures #token("true","Bool") [UNIQUE_ID(a66b3446638a649ef9e34e4f1761b66e5678d79b2790e76b91ed5ad9e7f7ae82) contentStartColumn(10) contentStartLine(492) org.kframework.attributes.Location(Location(492,10,494,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_285),isOperand(W0)),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(W0,LM)))
															v[51], i.evalErr = i.evalIsLValue( // isLValue(_285)
																v[5] /*_285*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isLValue(_285),isOperand(W0))
															bv[2] = m.IsTrue(v[51])
															if bv[2] {
																v[52], i.evalErr = i.evalIsOperand( // isOperand(W0)
																	v[6] /*W0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[52])
															}
															// `_andBool_`(`_andBool_`(isLValue(_285),isOperand(W0)),isSchedule(SCHED))
															bv[1] = bv[2]
															if bv[1] {
																v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[7] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[53])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_285),isOperand(W0)),isSchedule(SCHED)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(W0,LM)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isMap(LM) */ 
															if bv[0] {
																v[54], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(W0,LM)
																	v[6] /*W0*/,
																	v[33] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[54]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS135(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 149
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=addmod_,_,__IELE-COMMON`(_251,W0,W1,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _251 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									v[9] = i.Model.KApplyArg(v[2], 1)
									// KVariable SCHED = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[16]
													v[17] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[17]
													v[18] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[18]
													v[19] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[20]
													v[21] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[21]
													// rule #149
													// source: iele-gas.k @479
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=addmod_,_,__IELE-COMMON`(_251,W0,W1,W2),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED))),`Cdiv`(SCHED,`_+Int_`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),#token("1","Int")),intSize(W2)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isLValue(_251)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(f3510f9203654a6db06f60a0682c51de051f2179adc502a34fd3d8c9cafee0f9) contentStartColumn(10) contentStartLine(479) org.kframework.attributes.Location(Location(479,10,479,204)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_251)),#token("true","Bool")),#token("true","Bool"))
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_251))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[22])
														if bv[0] {
															v[23], i.evalErr = i.evalIsLValue( // isLValue(_251)
																v[5] /*_251*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[23])
														}
														if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
															// RHS
															return i.stepRHS149(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 157
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=div_,__IELE-COMMON`(_277,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _277 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #157
												// source: iele-gas.k @466
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=div_,__IELE-COMMON`(_277,W0,W1),SCHED)=>`Cdiv`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_277)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(0bd25b369a1fcdd87c2aa70732481c0d014641bf021182d1f86b231d1a788068) contentStartColumn(10) contentStartLine(466) org.kframework.attributes.Location(Location(466,10,466,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_277)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isLValue(_277))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsLValue( // isLValue(_277)
															v[5] /*_277*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS157(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 163
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(_156,RETS),_157,ACCTTO,ARGS,VALUE,GCAP)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(_156,RETS)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable _156 = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							// KVariable RETS = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable _157 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTTO = v[9]
								v[10] = i.Model.KApplyArg(v[4], 3)
								// KVariable ARGS = v[10]
								v[11] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[11]
									v[12] = i.Model.KApplyArg(v[4], 5)
									if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable GCAP = v[12]
										v[13] = i.Model.KApplyArg(v[2], 1)
										// KVariable SCHED = v[13]
										// KVariable DotVar1 = v[3]
										v[14] = i.Model.KApplyArg(c, 1)
										if v[14]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[15] = i.Model.KApplyArg(v[14], 0)
											if v[15]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[16], v[17] = i.Model.KSequenceSplitHeadTail(v[15]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[16]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[18] = i.Model.KApplyArg(v[16], 0)
													if i.Model.Equals(v[18], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[17]
														v[19] = i.Model.KApplyArg(c, 2)
														// KVariable _28 = v[19]
														v[20] = i.Model.KApplyArg(c, 3)
														// KVariable _29 = v[20]
														v[21] = i.Model.KApplyArg(c, 4)
														// KVariable _30 = v[21]
														v[22] = i.Model.KApplyArg(c, 5)
														// KVariable _31 = v[22]
														v[23] = i.Model.KApplyArg(c, 6)
														// KVariable _32 = v[23]
														v[24] = i.Model.KApplyArg(c, 7)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
															v[25] = i.Model.KApplyArg(v[24], 0)
															// KVariable _14 = v[25]
															v[26] = i.Model.KApplyArg(v[24], 1)
															// KVariable _15 = v[26]
															v[27] = i.Model.KApplyArg(v[24], 2)
															// KVariable _16 = v[27]
															v[28] = i.Model.KApplyArg(v[24], 3)
															// KVariable _17 = v[28]
															v[29] = i.Model.KApplyArg(v[24], 4)
															if v[29]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
																v[30] = i.Model.KApplyArg(v[29], 0)
																// KVariable _0 = v[30]
																v[31] = i.Model.KApplyArg(v[29], 1)
																// KVariable _1 = v[31]
																v[32] = i.Model.KApplyArg(v[29], 2)
																// KVariable _2 = v[32]
																v[33] = i.Model.KApplyArg(v[29], 3)
																// KVariable _3 = v[33]
																v[34] = i.Model.KApplyArg(v[29], 4)
																// KVariable _4 = v[34]
																v[35] = i.Model.KApplyArg(v[29], 5)
																// KVariable _5 = v[35]
																v[36] = i.Model.KApplyArg(v[29], 6)
																// KVariable _6 = v[36]
																v[37] = i.Model.KApplyArg(v[29], 7)
																// KVariable _7 = v[37]
																v[38] = i.Model.KApplyArg(v[29], 8)
																// KVariable _8 = v[38]
																v[39] = i.Model.KApplyArg(v[29], 9)
																// KVariable _9 = v[39]
																v[40] = i.Model.KApplyArg(v[29], 10)
																// KVariable _10 = v[40]
																v[41] = i.Model.KApplyArg(v[29], 11)
																// KVariable _11 = v[41]
																v[42] = i.Model.KApplyArg(v[29], 12)
																if v[42]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																	v[43] = i.Model.KApplyArg(v[42], 0)
																	if i.tempTypeVar = v[43] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable GAVAIL = v[43]
																		v[44] = i.Model.KApplyArg(v[29], 13)
																		// KVariable _12 = v[44]
																		v[45] = i.Model.KApplyArg(v[29], 14)
																		// KVariable _13 = v[45]
																		v[46] = i.Model.KApplyArg(v[24], 5)
																		// KVariable _18 = v[46]
																		v[47] = i.Model.KApplyArg(v[24], 6)
																		// KVariable _19 = v[47]
																		v[48] = i.Model.KApplyArg(v[24], 7)
																		// KVariable _20 = v[48]
																		v[49] = i.Model.KApplyArg(v[24], 8)
																		// KVariable _21 = v[49]
																		v[50] = i.Model.KApplyArg(v[24], 9)
																		// KVariable _22 = v[50]
																		v[51] = i.Model.KApplyArg(v[24], 10)
																		// KVariable _23 = v[51]
																		v[52] = i.Model.KApplyArg(v[24], 11)
																		// KVariable _24 = v[52]
																		v[53] = i.Model.KApplyArg(v[24], 12)
																		// KVariable _25 = v[53]
																		v[54] = i.Model.KApplyArg(v[24], 13)
																		// KVariable _26 = v[54]
																		v[55] = i.Model.KApplyArg(v[24], 14)
																		// KVariable _27 = v[55]
																		v[56] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[56]
																		// rule #163
																		// source: iele-gas.k @622
																		// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(_156,RETS),_157,ACCTTO,ARGS,VALUE,GCAP),SCHED)=>`Ccall`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,VALUE,#sizeLVals(RETS),`Ccallarg`(SCHED,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isLValues(RETS)),isOperand(_157)),isOperands(ARGS)),isInt(ACCTTO)),isInt(VALUE)),isSchedule(SCHED)),isLValue(_156)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(7889944c6de8743f0839141277f74f8a5c1a93063684980e8b1cefbf36c53732) contentStartColumn(10) contentStartLine(622) org.kframework.attributes.Location(Location(622,10,623,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperand(_157)),isOperands(ARGS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isLValue(_156)),#token("true","Bool"))
																			v[57], i.evalErr = i.evalIsLValues( // isLValues(RETS)
																				v[7] /*RETS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperand(_157))
																			bv[3] = /* rhs precomputed isInt(GCAP) */ /* && */ m.IsTrue(v[57])
																			if bv[3] {
																				v[58], i.evalErr = i.evalIsOperand( // isOperand(_157)
																					v[8] /*_157*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[3] = m.IsTrue(v[58])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperand(_157)),isOperands(ARGS))
																			bv[2] = bv[3]
																			if bv[2] {
																				v[59], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																					v[10] /*ARGS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[2] = m.IsTrue(v[59])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperand(_157)),isOperands(ARGS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED))
																			bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCTTO) */  /* && */ /* rhs precomputed isInt(VALUE) */ 
																			if bv[1] {
																				v[60], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																					v[13] /*SCHED*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[60])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperand(_157)),isOperands(ARGS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isLValue(_156))
																			bv[0] = bv[1]
																			if bv[0] {
																				v[61], i.evalErr = i.evalIsLValue( // isLValue(_156)
																					v[6] /*_156*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[61])
																			}
																			if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																				// RHS
																				return i.stepRHS163(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 178
					if v[4]&kapplyMatchMask == kapplyMatchLblSHA256XuIELEXhyphenPRECOMPILED0 { // `SHA256_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
													v[28] = i.Model.KApplyArg(v[27], 0)
													if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
														v[29] = i.Model.KApplyArg(v[28], 0)
														if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[29]
															v[30] = i.Model.KApplyArg(v[28], 1)
															if v[30]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																v[31] = i.Model.KApplyArg(v[30], 0)
																if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable DATA = v[31]
																	v[32] = i.Model.KApplyArg(v[30], 1)
																	if v[32]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																		v[33] = i.Model.KApplyArg(v[21], 6)
																		// KVariable _5 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 7)
																		// KVariable _6 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 8)
																		// KVariable _7 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[40]
																		v[41] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[41]
																		v[42] = i.Model.KApplyArg(v[16], 5)
																		// KVariable _18 = v[42]
																		v[43] = i.Model.KApplyArg(v[16], 6)
																		// KVariable _19 = v[43]
																		v[44] = i.Model.KApplyArg(v[16], 7)
																		// KVariable _20 = v[44]
																		v[45] = i.Model.KApplyArg(v[16], 8)
																		// KVariable _21 = v[45]
																		v[46] = i.Model.KApplyArg(v[16], 9)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[16], 10)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[16], 11)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[16], 12)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(v[16], 13)
																		// KVariable _26 = v[50]
																		v[51] = i.Model.KApplyArg(v[16], 14)
																		// KVariable _27 = v[51]
																		v[52] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[52]
																		// rule #178
																		// source: iele-gas.k @729
																		// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`SHA256_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsha256_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsha256word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isSchedule(SCHED)),isInt(DATA)) ensures #token("true","Bool") [UNIQUE_ID(0f43422b7d4c6b0651a6b9a263ec99dc129738dcc722606d020e4ae2927af7b1) contentStartColumn(10) contentStartLine(729) org.kframework.attributes.Location(Location(729,10,729,185)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool"))
																			v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																				v[5] /*SCHED*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[53]) /* && */ /* rhs precomputed isInt(DATA) */  {
																				// RHS
																				return i.stepRHS178(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 184
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(VALUE,INDEX,OFFSET,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable VALUE = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable OFFSET = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[8]
							v[9] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[20]
											v[21] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[21]
											// rule #184
											// source: iele-gas.k @663
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`store_,_,_,__IELE-COMMON`(VALUE,INDEX,OFFSET,WIDTH),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gstore_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),isInt(WIDTH)),isSchedule(SCHED)),isOperand(OFFSET)),isOperand(INDEX)) ensures #token("true","Bool") [UNIQUE_ID(1e9281dfdf877cab45f5a636ae897e2bd86cab3c80984a23020bda28562664ae) contentStartColumn(10) contentStartLine(663) org.kframework.attributes.Location(Location(663,10,663,137)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),#token("true","Bool")),isSchedule(SCHED)),isOperand(OFFSET)),isOperand(INDEX))
												v[22], i.evalErr = i.evalIsOperand( // isOperand(VALUE)
													v[5] /*VALUE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isOperand(VALUE),#token("true","Bool")),isSchedule(SCHED))
												bv[2] = m.IsTrue(v[22]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[2] {
													v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[9] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),#token("true","Bool")),isSchedule(SCHED)),isOperand(OFFSET))
												bv[1] = bv[2]
												if bv[1] {
													v[24], i.evalErr = i.evalIsOperand( // isOperand(OFFSET)
														v[7] /*OFFSET*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[24])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(VALUE),#token("true","Bool")),isSchedule(SCHED)),isOperand(OFFSET)),isOperand(INDEX))
												bv[0] = bv[1]
												if bv[0] {
													v[25], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
														v[6] /*INDEX*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[25])
												}
												if bv[0] {
													// RHS
													return i.stepRHS184(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 191
					if v[4]&kapplyMatchMask == kapplyMatchLblRevertXuXuIELEXhyphenCOMMON1 { // `revert__IELE-COMMON`(_258)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _258 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #191
										// source: iele-gas.k @610
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`revert__IELE-COMMON`(_258),SCHED)=>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isSchedule(SCHED),isOperand(_258)) ensures #token("true","Bool") [UNIQUE_ID(bb5b80f7d94453ecf0545d406a71a2e63efbf4341aac139557464bf90af1a820) contentStartColumn(10) contentStartLine(610) org.kframework.attributes.Location(Location(610,10,610,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isSchedule(SCHED),isOperand(_258))
											v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[6] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isSchedule(SCHED),isOperand(_258))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsOperand( // isOperand(_258)
													v[5] /*_258*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS191(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 198
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(_299,_300)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _299 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _300 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[18]
										v[19] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[19]
										// rule #198
										// source: iele-gas.k @572
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`br_,__IELE-COMMON`(_299,_300),SCHED)=>`_<_>_IELE-GAS`(`Gbrcond_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperand(_299)),isIeleName(_300)) ensures #token("true","Bool") [UNIQUE_ID(0e5b250ef0820ee2d3f2488d9df26677e8c39b75abfb6786a1e10802e3ec2b97) contentStartColumn(10) contentStartLine(572) org.kframework.attributes.Location(Location(572,10,572,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperand(_299)),isIeleName(_300))
											v[20], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[7] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isSchedule(SCHED),isOperand(_299))
											bv[1] = m.IsTrue(v[20])
											if bv[1] {
												v[21], i.evalErr = i.evalIsOperand( // isOperand(_299)
													v[5] /*_299*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[21])
											}
											// `_andBool_`(`_andBool_`(isSchedule(SCHED),isOperand(_299)),isIeleName(_300))
											bv[0] = bv[1]
											if bv[0] {
												v[22], i.evalErr = i.evalIsIeleName( // isIeleName(_300)
													v[6] /*_300*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[22])
											}
											if bv[0] {
												// RHS
												return i.stepRHS198(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 254
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=exp_,__IELE-COMMON`(_169,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _169 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #254
												// source: iele-gas.k @468
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=exp_,__IELE-COMMON`(_169,W0,W1),SCHED)=>`Cexp`(SCHED,intSize(W0),W0,W1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_169),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(9a9e8d29c2d1e8ddfaf2a2de7fb2e37bcd56a2f2a05c391961c9ef0c38fab114) contentStartColumn(10) contentStartLine(468) org.kframework.attributes.Location(Location(468,10,468,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_169),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_169)
														v[5] /*_169*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_169),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS254(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 261
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=xor_,__IELE-COMMON`(_145,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _145 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #261
												// source: iele-gas.k @442
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=xor_,__IELE-COMMON`(_145,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_145),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(3158a0acbe6cde330499dd994c8ef2758556ba6e08d655d61588eec17ce43be4) contentStartColumn(10) contentStartLine(442) org.kframework.attributes.Location(Location(442,10,442,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_145),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_145)
														v[5] /*_145*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_145),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS261(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 305
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mul_,__IELE-COMMON`(_265,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _265 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #305
												// source: iele-gas.k @465
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mul_,__IELE-COMMON`(_265,W0,W1),SCHED)=>`Cmul`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_265),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(c610b5deccf8d1900032a68228707bf1ba6dcf94cb2d985330ec147d0a38f2a0) contentStartColumn(10) contentStartLine(465) org.kframework.attributes.Location(Location(465,10,465,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_265),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_265)
														v[5] /*_265*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_265),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS305(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 307
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(_214,_215,_216)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _214 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _215 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _216 = v[7]
						v[8] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[8]
						// KVariable DotVar1 = v[3]
						v[9] = i.Model.KApplyArg(c, 1)
						if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[13] = i.Model.KApplyArg(v[11], 0)
									if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[12]
										v[14] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[14]
										v[15] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[15]
										v[16] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[16]
										v[17] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[17]
										v[18] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[18]
										v[19] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[19]
										v[20] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[20]
										// rule #307
										// source: iele-gas.k @542
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=calladdress_at__IELE-COMMON`(_214,_215,_216),SCHED)=>`_<_>_IELE-GAS`(`Gcalladdress_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_214),isGlobalName(_215)),isSchedule(SCHED)),isOperand(_216)) ensures #token("true","Bool") [UNIQUE_ID(20798a4e976f09370747b7b04b07e8d058b99434840ef1cf8abdf054a9e56dce) contentStartColumn(10) contentStartLine(542) org.kframework.attributes.Location(Location(542,10,542,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_214),isGlobalName(_215)),isSchedule(SCHED)),isOperand(_216))
											v[21], i.evalErr = i.evalIsLValue( // isLValue(_214)
												v[5] /*_214*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(_214),isGlobalName(_215))
											bv[2] = m.IsTrue(v[21])
											if bv[2] {
												v[22], i.evalErr = i.evalIsGlobalName( // isGlobalName(_215)
													v[6] /*_215*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[22])
											}
											// `_andBool_`(`_andBool_`(isLValue(_214),isGlobalName(_215)),isSchedule(SCHED))
											bv[1] = bv[2]
											if bv[1] {
												v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[8] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_214),isGlobalName(_215)),isSchedule(SCHED)),isOperand(_216))
											bv[0] = bv[1]
											if bv[0] {
												v[24], i.evalErr = i.evalIsOperand( // isOperand(_216)
													v[7] /*_216*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[24])
											}
											if bv[0] {
												// RHS
												return i.stepRHS307(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 312
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(_165,INDEX,OFFSET,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _165 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable OFFSET = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[8]
							v[9] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[20]
											v[21] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[21]
											// rule #312
											// source: iele-gas.k @660
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load_,_,__IELE-COMMON`(_165,INDEX,OFFSET,WIDTH),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(WIDTH),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isSchedule(SCHED)),isLValue(_165)),isOperand(OFFSET)),isOperand(INDEX)) ensures #token("true","Bool") [UNIQUE_ID(2623170bdd86f653439e41d431938f82c9ed24fa6310bab5b3c9bd0771bf723f) contentStartColumn(10) contentStartLine(660) org.kframework.attributes.Location(Location(660,10,660,130)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_165)),isOperand(OFFSET)),isOperand(INDEX))
												v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[9] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_165))
												bv[2] = /* rhs precomputed isInt(WIDTH) */ /* && */ m.IsTrue(v[22])
												if bv[2] {
													v[23], i.evalErr = i.evalIsLValue( // isLValue(_165)
														v[5] /*_165*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[23])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_165)),isOperand(OFFSET))
												bv[1] = bv[2]
												if bv[1] {
													v[24], i.evalErr = i.evalIsOperand( // isOperand(OFFSET)
														v[7] /*OFFSET*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[24])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_165)),isOperand(OFFSET)),isOperand(INDEX))
												bv[0] = bv[1]
												if bv[0] {
													v[25], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
														v[6] /*INDEX*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[25])
												}
												if bv[0] {
													// RHS
													return i.stepRHS312(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 314
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=cmp__,__IELE-COMMON`(_240,_241,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _240 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _241 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #314
												// source: iele-gas.k @453
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=cmp__,__IELE-COMMON`(_240,_241,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcmp_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`minInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gcmpword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_241),isLValue(_240)),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(fba6613d83c7c2e09b04a4566b682b97563c75ac657eee1a90a41dea8c8cd35d) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,453,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_241),isLValue(_240)),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[22], i.evalErr = i.evalIsPredicate( // isPredicate(_241)
														v[6] /*_241*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isPredicate(_241),isLValue(_240))
													bv[1] = m.IsTrue(v[22])
													if bv[1] {
														v[23], i.evalErr = i.evalIsLValue( // isLValue(_240)
															v[5] /*_240*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(isPredicate(_241),isLValue(_240)),isSchedule(SCHED))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS314(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 317
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(_296,RETS),_297,ACCTTO,ARGS,GCAP)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(_296,RETS)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable _296 = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							// KVariable RETS = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable _297 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTTO = v[9]
								v[10] = i.Model.KApplyArg(v[4], 3)
								// KVariable ARGS = v[10]
								v[11] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable GCAP = v[11]
									v[12] = i.Model.KApplyArg(v[2], 1)
									// KVariable SCHED = v[12]
									// KVariable DotVar1 = v[3]
									v[13] = i.Model.KApplyArg(c, 1)
									if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[14] = i.Model.KApplyArg(v[13], 0)
										if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[17] = i.Model.KApplyArg(v[15], 0)
												if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[16]
													v[18] = i.Model.KApplyArg(c, 2)
													// KVariable _28 = v[18]
													v[19] = i.Model.KApplyArg(c, 3)
													// KVariable _29 = v[19]
													v[20] = i.Model.KApplyArg(c, 4)
													// KVariable _30 = v[20]
													v[21] = i.Model.KApplyArg(c, 5)
													// KVariable _31 = v[21]
													v[22] = i.Model.KApplyArg(c, 6)
													// KVariable _32 = v[22]
													v[23] = i.Model.KApplyArg(c, 7)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _14 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														// KVariable _15 = v[25]
														v[26] = i.Model.KApplyArg(v[23], 2)
														// KVariable _16 = v[26]
														v[27] = i.Model.KApplyArg(v[23], 3)
														// KVariable _17 = v[27]
														v[28] = i.Model.KApplyArg(v[23], 4)
														if v[28]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
															v[29] = i.Model.KApplyArg(v[28], 0)
															// KVariable _0 = v[29]
															v[30] = i.Model.KApplyArg(v[28], 1)
															// KVariable _1 = v[30]
															v[31] = i.Model.KApplyArg(v[28], 2)
															// KVariable _2 = v[31]
															v[32] = i.Model.KApplyArg(v[28], 3)
															// KVariable _3 = v[32]
															v[33] = i.Model.KApplyArg(v[28], 4)
															// KVariable _4 = v[33]
															v[34] = i.Model.KApplyArg(v[28], 5)
															// KVariable _5 = v[34]
															v[35] = i.Model.KApplyArg(v[28], 6)
															// KVariable _6 = v[35]
															v[36] = i.Model.KApplyArg(v[28], 7)
															// KVariable _7 = v[36]
															v[37] = i.Model.KApplyArg(v[28], 8)
															// KVariable _8 = v[37]
															v[38] = i.Model.KApplyArg(v[28], 9)
															// KVariable _9 = v[38]
															v[39] = i.Model.KApplyArg(v[28], 10)
															// KVariable _10 = v[39]
															v[40] = i.Model.KApplyArg(v[28], 11)
															// KVariable _11 = v[40]
															v[41] = i.Model.KApplyArg(v[28], 12)
															if v[41]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																v[42] = i.Model.KApplyArg(v[41], 0)
																if i.tempTypeVar = v[42] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable GAVAIL = v[42]
																	v[43] = i.Model.KApplyArg(v[28], 13)
																	// KVariable _12 = v[43]
																	v[44] = i.Model.KApplyArg(v[28], 14)
																	// KVariable _13 = v[44]
																	v[45] = i.Model.KApplyArg(v[23], 5)
																	// KVariable _18 = v[45]
																	v[46] = i.Model.KApplyArg(v[23], 6)
																	// KVariable _19 = v[46]
																	v[47] = i.Model.KApplyArg(v[23], 7)
																	// KVariable _20 = v[47]
																	v[48] = i.Model.KApplyArg(v[23], 8)
																	// KVariable _21 = v[48]
																	v[49] = i.Model.KApplyArg(v[23], 9)
																	// KVariable _22 = v[49]
																	v[50] = i.Model.KApplyArg(v[23], 10)
																	// KVariable _23 = v[50]
																	v[51] = i.Model.KApplyArg(v[23], 11)
																	// KVariable _24 = v[51]
																	v[52] = i.Model.KApplyArg(v[23], 12)
																	// KVariable _25 = v[52]
																	v[53] = i.Model.KApplyArg(v[23], 13)
																	// KVariable _26 = v[53]
																	v[54] = i.Model.KApplyArg(v[23], 14)
																	// KVariable _27 = v[54]
																	v[55] = i.Model.KApplyArg(c, 8)
																	// KVariable _33 = v[55]
																	// rule #317
																	// source: iele-gas.k @625
																	// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(_296,RETS),_297,ACCTTO,ARGS,GCAP),SCHED)=>`Ccall`(SCHED,#accountEmpty(ACCTTO),`_*Int__INT`(GCAP,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),GAVAIL,#token("0","Int"),#sizeLVals(RETS),`Ccallarg`(SCHED,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isLValues(RETS)),isOperands(ARGS)),isInt(ACCTTO)),isSchedule(SCHED)),isLValue(_296)),isOperand(_297)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(4bb7fa8d37090ef99476088c41df0d1b19004c369b43a83b6e04eff3e8775bd9) contentStartColumn(10) contentStartLine(625) org.kframework.attributes.Location(Location(625,10,626,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperands(ARGS)),#token("true","Bool")),isSchedule(SCHED)),isLValue(_296)),isOperand(_297)),#token("true","Bool"))
																		v[56], i.evalErr = i.evalIsLValues( // isLValues(RETS)
																			v[7] /*RETS*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperands(ARGS))
																		bv[3] = /* rhs precomputed isInt(GCAP) */ /* && */ m.IsTrue(v[56])
																		if bv[3] {
																			v[57], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																				v[10] /*ARGS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[3] = m.IsTrue(v[57])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperands(ARGS)),#token("true","Bool")),isSchedule(SCHED))
																		bv[2] = bv[3] /* && */ /* rhs precomputed isInt(ACCTTO) */ 
																		if bv[2] {
																			v[58], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																				v[12] /*SCHED*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[2] = m.IsTrue(v[58])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperands(ARGS)),#token("true","Bool")),isSchedule(SCHED)),isLValue(_296))
																		bv[1] = bv[2]
																		if bv[1] {
																			v[59], i.evalErr = i.evalIsLValue( // isLValue(_296)
																				v[6] /*_296*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[59])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(RETS)),isOperands(ARGS)),#token("true","Bool")),isSchedule(SCHED)),isLValue(_296)),isOperand(_297))
																		bv[0] = bv[1]
																		if bv[0] {
																			v[60], i.evalErr = i.evalIsOperand( // isOperand(_297)
																				v[8] /*_297*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[0] = m.IsTrue(v[60])
																		}
																		if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																			// RHS
																			return i.stepRHS317(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 332
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(_180,_181,_182,ARGS,_183)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _180 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _181 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _182 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable ARGS = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _183 = v[9]
						v[10] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[10]
						// KVariable DotVar1 = v[3]
						v[11] = i.Model.KApplyArg(c, 1)
						if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[12] = i.Model.KApplyArg(v[11], 0)
							if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[15] = i.Model.KApplyArg(v[13], 0)
									if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[14]
										v[16] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[16]
										v[17] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[17]
										v[18] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[18]
										v[19] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[19]
										v[20] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[20]
										v[21] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[21]
										v[22] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[22]
										// rule #332
										// source: iele-gas.k @707
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_,_=create_(_)send__IELE-COMMON`(_180,_181,_182,ARGS,_183),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180)),isSchedule(SCHED)),isIeleName(_182)),isOperand(_183)) ensures #token("true","Bool") [UNIQUE_ID(28301454735035aaa9a251abde72c86a4698b12187f2df35ab82772096d71883) contentStartColumn(10) contentStartLine(707) org.kframework.attributes.Location(Location(707,10,707,131)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180)),isSchedule(SCHED)),isIeleName(_182)),isOperand(_183))
											v[23], i.evalErr = i.evalIsLValue( // isLValue(_181)
												v[6] /*_181*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(_181),isOperands(ARGS))
											bv[4] = m.IsTrue(v[23])
											if bv[4] {
												v[24], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
													v[8] /*ARGS*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180))
											bv[3] = bv[4]
											if bv[3] {
												v[25], i.evalErr = i.evalIsLValue( // isLValue(_180)
													v[5] /*_180*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180)),isSchedule(SCHED))
											bv[2] = bv[3]
											if bv[2] {
												v[26], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[10] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[26])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180)),isSchedule(SCHED)),isIeleName(_182))
											bv[1] = bv[2]
											if bv[1] {
												v[27], i.evalErr = i.evalIsIeleName( // isIeleName(_182)
													v[7] /*_182*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_181),isOperands(ARGS)),isLValue(_180)),isSchedule(SCHED)),isIeleName(_182)),isOperand(_183))
											bv[0] = bv[1]
											if bv[0] {
												v[28], i.evalErr = i.evalIsOperand( // isOperand(_183)
													v[9] /*_183*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[28])
											}
											if bv[0] {
												// RHS
												return i.stepRHS332(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 334
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqlog2XuXuIELEXhyphenCOMMON2 { // `_=log2__IELE-COMMON`(_270,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _270 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #334
											// source: iele-gas.k @444
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=log2__IELE-COMMON`(_270,W),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Glogarithm_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Glogarithmword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(_270),isInt(W)),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(40eb7c960e2905e9e9a2d4ea01cc7b76bbe6679d2ed983b4c781299bd35d1c8d) contentStartColumn(10) contentStartLine(444) org.kframework.attributes.Location(Location(444,10,444,117)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(isLValue(_270),#token("true","Bool")),isSchedule(SCHED))
												v[20], i.evalErr = i.evalIsLValue( // isLValue(_270)
													v[5] /*_270*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isLValue(_270),#token("true","Bool")),isSchedule(SCHED))
												bv[0] = m.IsTrue(v[20]) /* && */ /* rhs precomputed isInt(W) */ 
												if bv[0] {
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[7] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS334(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 338
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=shift_,__IELE-COMMON`(_155,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _155 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #338
												// source: iele-gas.k @443
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=shift_,__IELE-COMMON`(_155,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),`_+Int_`(intSize(W0),bitsInWords(W1,SCHED))),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isInt(W1)),isLValue(_155)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(6fabea1db37698e50452196e3bdcaba0be30fe5afde91f7fe6868633cac3bddb) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,443,153)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_155)),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_155))
													bv[0] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(W1) */ 
													if bv[0] {
														v[22], i.evalErr = i.evalIsLValue( // isLValue(_155)
															v[5] /*_155*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS338(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 357
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sub_,__IELE-COMMON`(_264,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _264 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #357
												// source: iele-gas.k @464
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sub_,__IELE-COMMON`(_264,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gadd_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gaddword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_264),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(85703fc2f17ffaa2510b3e396cce59064b2164789c81a3da93edc1463505f1ef) contentStartColumn(10) contentStartLine(464) org.kframework.attributes.Location(Location(464,10,464,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_264),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_264)
														v[5] /*_264*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_264),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS357(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 361
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `store_,__IELE-COMMON`(VALUE,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							// KVariable INDEX = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #361
											// source: iele-gas.k @662
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`store_,__IELE-COMMON`(VALUE,INDEX),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gstorecell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(VALUE),`_<_>_IELE-GAS`(`Gstoreword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(VALUE),isSchedule(SCHED)),isOperand(INDEX)) ensures #token("true","Bool") [UNIQUE_ID(d685f33d92471c33c23bfe42c51eccfe88f67adcbe0b7d9acdc8f7ff80e1bd5a) contentStartColumn(10) contentStartLine(662) org.kframework.attributes.Location(Location(662,10,662,119)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isOperand(INDEX))
												v[20], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[7] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isOperand(INDEX))
												bv[0] = /* rhs precomputed isInt(VALUE) */ /* && */ m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
														v[6] /*INDEX*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS361(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 389
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=bswap_,__IELE-COMMON`(_149,WIDTH,_150)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _149 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _150 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #389
											// source: iele-gas.k @506
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=bswap_,__IELE-COMMON`(_149,WIDTH,_150),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbswap_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gbswapword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_149),isInt(WIDTH)),isSchedule(SCHED)),isOperand(_150)) ensures #token("true","Bool") [UNIQUE_ID(a20ad150443a384568781681599b9d22be4b1751b53df5479a0f3bf4226dda4c) contentStartColumn(10) contentStartLine(506) org.kframework.attributes.Location(Location(506,10,506,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_149),#token("true","Bool")),isSchedule(SCHED)),isOperand(_150))
												v[21], i.evalErr = i.evalIsLValue( // isLValue(_149)
													v[5] /*_149*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isLValue(_149),#token("true","Bool")),isSchedule(SCHED))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_149),#token("true","Bool")),isSchedule(SCHED)),isOperand(_150))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(_150)
														v[7] /*_150*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS389(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 412
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mod_,__IELE-COMMON`(_226,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _226 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #412
												// source: iele-gas.k @467
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mod_,__IELE-COMMON`(_226,W0,W1),SCHED)=>`Cdiv`(SCHED,intSize(W0),intSize(W1))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_226),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(fcf43211ca849c0ea5aa56e7b2568e172f991128573890c86bbda39b86c09bfd) contentStartColumn(10) contentStartLine(467) org.kframework.attributes.Location(Location(467,10,467,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_226),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_226)
														v[5] /*_226*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isLValue(_226),isSchedule(SCHED))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[8] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS412(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 416
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sext_,__IELE-COMMON`(_211,WIDTH,_212)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _211 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _212 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #416
											// source: iele-gas.k @505
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sext_,__IELE-COMMON`(_211,WIDTH,_212),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsext_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gsextword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_211),isInt(WIDTH)),isSchedule(SCHED)),isOperand(_212)) ensures #token("true","Bool") [UNIQUE_ID(5a60916d7fd4084ca5572381b822102f7ec4995be0d49d4b461e6b847f80a4a6) contentStartColumn(10) contentStartLine(505) org.kframework.attributes.Location(Location(505,10,505,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_211),#token("true","Bool")),isSchedule(SCHED)),isOperand(_212))
												v[21], i.evalErr = i.evalIsLValue( // isLValue(_211)
													v[5] /*_211*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isLValue(_211),#token("true","Bool")),isSchedule(SCHED))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_211),#token("true","Bool")),isSchedule(SCHED)),isOperand(_212))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(_212)
														v[7] /*_212*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS416(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 431
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(_170,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _170 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _14 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _15 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _16 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _17 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												// KVariable _2 = v[26]
												v[27] = i.Model.KApplyArg(v[23], 3)
												// KVariable _3 = v[27]
												v[28] = i.Model.KApplyArg(v[23], 4)
												// KVariable _4 = v[28]
												v[29] = i.Model.KApplyArg(v[23], 5)
												// KVariable _5 = v[29]
												v[30] = i.Model.KApplyArg(v[23], 6)
												// KVariable _6 = v[30]
												v[31] = i.Model.KApplyArg(v[23], 7)
												// KVariable _7 = v[31]
												v[32] = i.Model.KApplyArg(v[23], 8)
												if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
													v[33] = i.Model.KApplyArg(v[32], 0)
													if v[33]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														// KVariable LM = v[33]
														v[34] = i.Model.KApplyArg(v[23], 9)
														// KVariable _8 = v[34]
														v[35] = i.Model.KApplyArg(v[23], 10)
														// KVariable _9 = v[35]
														v[36] = i.Model.KApplyArg(v[23], 11)
														// KVariable _10 = v[36]
														v[37] = i.Model.KApplyArg(v[23], 12)
														// KVariable _11 = v[37]
														v[38] = i.Model.KApplyArg(v[23], 13)
														// KVariable _12 = v[38]
														v[39] = i.Model.KApplyArg(v[23], 14)
														// KVariable _13 = v[39]
														v[40] = i.Model.KApplyArg(v[18], 5)
														// KVariable _18 = v[40]
														v[41] = i.Model.KApplyArg(v[18], 6)
														// KVariable _19 = v[41]
														v[42] = i.Model.KApplyArg(v[18], 7)
														// KVariable _20 = v[42]
														v[43] = i.Model.KApplyArg(v[18], 8)
														// KVariable _21 = v[43]
														v[44] = i.Model.KApplyArg(v[18], 9)
														// KVariable _22 = v[44]
														v[45] = i.Model.KApplyArg(v[18], 10)
														// KVariable _23 = v[45]
														v[46] = i.Model.KApplyArg(v[18], 11)
														// KVariable _24 = v[46]
														v[47] = i.Model.KApplyArg(v[18], 12)
														// KVariable _25 = v[47]
														v[48] = i.Model.KApplyArg(v[18], 13)
														// KVariable _26 = v[48]
														v[49] = i.Model.KApplyArg(v[18], 14)
														// KVariable _27 = v[49]
														v[50] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[50]
														// rule #431
														// source: iele-gas.k @656
														// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load__IELE-COMMON`(_170,INDEX),SCHED)=>`_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isLValue(_170)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token("true","Bool") [UNIQUE_ID(531866a3b59e7fc7e612e132f145ec15ee6fdfda45bf9691c611e3f6695340f0) contentStartColumn(10) contentStartLine(656) org.kframework.attributes.Location(Location(656,10,658,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_170)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
															v[51], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																v[7] /*SCHED*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_170))
															bv[2] = m.IsTrue(v[51]) /* && */ /* rhs precomputed isMap(LM) */ 
															if bv[2] {
																v[52], i.evalErr = i.evalIsLValue( // isLValue(_170)
																	v[5] /*_170*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[52])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_170)),isOperand(INDEX))
															bv[1] = bv[2]
															if bv[1] {
																v[53], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																	v[6] /*INDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[53])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),#token("true","Bool")),isLValue(_170)),isOperand(INDEX)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
															bv[0] = bv[1]
															if bv[0] {
																v[54], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,LM)
																	v[6] /*INDEX*/,
																	v[33] /*LM*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = !(m.IsTrue(v[54]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS431(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 438
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=mulmod_,_,__IELE-COMMON`(_201,W0,W1,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _201 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									v[9] = i.Model.KApplyArg(v[2], 1)
									// KVariable SCHED = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[16]
													v[17] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[17]
													v[18] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[18]
													v[19] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[20]
													v[21] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[21]
													// rule #438
													// source: iele-gas.k @480
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=mulmod_,_,__IELE-COMMON`(_201,W0,W1,W2),SCHED)=>`_+Int_`(`Cmul`(SCHED,intSize(W0),intSize(W1)),`Cdiv`(SCHED,`_+Int_`(intSize(W0),intSize(W1)),intSize(W2)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_201),isInt(W2)),isSchedule(SCHED)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(f64b7e08039007710d95d620b41146b5f567b41856581f01fdcd45a26d93226b) contentStartColumn(10) contentStartLine(480) org.kframework.attributes.Location(Location(480,10,480,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_201),#token("true","Bool")),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool"))
														v[22], i.evalErr = i.evalIsLValue( // isLValue(_201)
															v[5] /*_201*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(isLValue(_201),#token("true","Bool")),isSchedule(SCHED))
														bv[0] = m.IsTrue(v[22]) /* && */ /* rhs precomputed isInt(W2) */ 
														if bv[0] {
															v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																v[9] /*SCHED*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[23])
														}
														if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
															// RHS
															return i.stepRHS438(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 468
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=twos_,__IELE-COMMON`(_209,WIDTH,_210)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _209 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _210 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[19]
											v[20] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[20]
											// rule #468
											// source: iele-gas.k @504
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=twos_,__IELE-COMMON`(_209,WIDTH,_210),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gtwos_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(#token("1","Int"),bytesInWords(chop(WIDTH))),`_<_>_IELE-GAS`(`Gtwosword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_209),isInt(WIDTH)),isSchedule(SCHED)),isOperand(_210)) ensures #token("true","Bool") [UNIQUE_ID(2486d95620602700bbb4241c30b51cefd17c6a3308264b7d312cb147f2e6c842) contentStartColumn(10) contentStartLine(504) org.kframework.attributes.Location(Location(504,10,504,136)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_209),#token("true","Bool")),isSchedule(SCHED)),isOperand(_210))
												v[21], i.evalErr = i.evalIsLValue( // isLValue(_209)
													v[5] /*_209*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(isLValue(_209),#token("true","Bool")),isSchedule(SCHED))
												bv[1] = m.IsTrue(v[21]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
												if bv[1] {
													v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[22])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_209),#token("true","Bool")),isSchedule(SCHED)),isOperand(_210))
												bv[0] = bv[1]
												if bv[0] {
													v[23], i.evalErr = i.evalIsOperand( // isOperand(_210)
														v[7] /*_210*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[23])
												}
												if bv[0] {
													// RHS
													return i.stepRHS468(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 492
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqnotXuXuIELEXhyphenCOMMON2 { // `_=not__IELE-COMMON`(_152,W)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _152 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #492
											// source: iele-gas.k @439
											// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=not__IELE-COMMON`(_152,W),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gnot_IELE-GAS`(.KList),SCHED),`_*Int__INT`(intSize(W),`_<_>_IELE-GAS`(`Gnotword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(W),isSchedule(SCHED)),isLValue(_152)) ensures #token("true","Bool") [UNIQUE_ID(8b77a8fa95960821e92d5d29a2018d755be5b6288ad4b0c927e9c02ef1841513) contentStartColumn(10) contentStartLine(439) org.kframework.attributes.Location(Location(439,10,439,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_152))
												v[20], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[7] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_152))
												bv[0] = /* rhs precomputed isInt(W) */ /* && */ m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsLValue( // isLValue(_152)
														v[5] /*_152*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] {
													// RHS
													return i.stepRHS492(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 504
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXuIELEXhyphenCOMMON1 { // `br__IELE-COMMON`(_171)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _171 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #504
										// source: iele-gas.k @571
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`br__IELE-COMMON`(_171),SCHED)=>`_<_>_IELE-GAS`(`Gbr_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isIeleName(_171),isSchedule(SCHED)) ensures #token("true","Bool") [UNIQUE_ID(e82e2744952015fccd102d67bb1645960e22a49f62428c4258477daea3b339dd) contentStartColumn(10) contentStartLine(571) org.kframework.attributes.Location(Location(571,10,571,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isIeleName(_171),isSchedule(SCHED))
											v[19], i.evalErr = i.evalIsIeleName( // isIeleName(_171)
												v[5] /*_171*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isIeleName(_171),isSchedule(SCHED))
											bv[0] = m.IsTrue(v[19])
											if bv[0] {
												v[20], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[6] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS504(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 514
					if v[4]&kapplyMatchMask == kapplyMatchLblIDXuIELEXhyphenPRECOMPILED0 { // `ID_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #514
										// source: iele-gas.k @731
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ID_IELE-PRECOMPILED`(.KList),SCHED)=>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(81946d17d5377f7f954e34a39aaf39b92d2b1ed2936e2d9208b494ce775fa224) contentStartColumn(10) contentStartLine(731) org.kframework.attributes.Location(Location(731,10,731,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isSchedule(SCHED)
											v[18], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[5] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS514(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 527
					if v[4]&kapplyMatchMask == kapplyMatchLblECRECXuIELEXhyphenPRECOMPILED0 { // `ECREC_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #527
										// source: iele-gas.k @728
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`ECREC_IELE-PRECOMPILED`(.KList),SCHED)=>`_<_>_IELE-GAS`(`Gecrec_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isSchedule(SCHED) ensures #token("true","Bool") [UNIQUE_ID(d26c81071a211e621cb548ad4ae300ff1ecaba734f8625e5f3e9c99e60b46bbc) contentStartColumn(10) contentStartLine(728) org.kframework.attributes.Location(Location(728,10,728,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isSchedule(SCHED)
											v[18], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[5] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS527(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 529
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(_176,_177,_178,ARGS,_179)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _176 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _177 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _178 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable ARGS = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						// KVariable _179 = v[9]
						v[10] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[10]
						// KVariable DotVar1 = v[3]
						v[11] = i.Model.KApplyArg(c, 1)
						if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[12] = i.Model.KApplyArg(v[11], 0)
							if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[15] = i.Model.KApplyArg(v[13], 0)
									if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[14]
										v[16] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[16]
										v[17] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[17]
										v[18] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[18]
										v[19] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[19]
										v[20] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[20]
										v[21] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[21]
										v[22] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[22]
										// rule #529
										// source: iele-gas.k @708
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_,_=copycreate_(_)send__IELE-COMMON`(_176,_177,_178,ARGS,_179),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gcopycreate_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED),`Ccallarg`(SCHED,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177)),isSchedule(SCHED)),isOperand(_178)),isOperand(_179)) ensures #token("true","Bool") [UNIQUE_ID(ea16c7e3142dc69b2a030945d9ab91ad9a83c2a1b23ffebb51946b27941177fb) contentStartColumn(10) contentStartLine(708) org.kframework.attributes.Location(Location(708,10,708,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177)),isSchedule(SCHED)),isOperand(_178)),isOperand(_179))
											v[23], i.evalErr = i.evalIsLValue( // isLValue(_176)
												v[5] /*_176*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isLValue(_176),isOperands(ARGS))
											bv[4] = m.IsTrue(v[23])
											if bv[4] {
												v[24], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
													v[8] /*ARGS*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = m.IsTrue(v[24])
											}
											// `_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177))
											bv[3] = bv[4]
											if bv[3] {
												v[25], i.evalErr = i.evalIsLValue( // isLValue(_177)
													v[6] /*_177*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177)),isSchedule(SCHED))
											bv[2] = bv[3]
											if bv[2] {
												v[26], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[10] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[26])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177)),isSchedule(SCHED)),isOperand(_178))
											bv[1] = bv[2]
											if bv[1] {
												v[27], i.evalErr = i.evalIsOperand( // isOperand(_178)
													v[7] /*_178*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_176),isOperands(ARGS)),isLValue(_177)),isSchedule(SCHED)),isOperand(_178)),isOperand(_179))
											bv[0] = bv[1]
											if bv[0] {
												v[28], i.evalErr = i.evalIsOperand( // isOperand(_179)
													v[9] /*_179*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[28])
											}
											if bv[0] {
												// RHS
												return i.stepRHS529(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 530
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=byte_,__IELE-COMMON`(_286,_287,_288)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _286 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _287 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _288 = v[7]
						v[8] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[8]
						// KVariable DotVar1 = v[3]
						v[9] = i.Model.KApplyArg(c, 1)
						if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[13] = i.Model.KApplyArg(v[11], 0)
									if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[12]
										v[14] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[14]
										v[15] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[15]
										v[16] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[16]
										v[17] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[17]
										v[18] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[18]
										v[19] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[19]
										v[20] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[20]
										// rule #530
										// source: iele-gas.k @503
										// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=byte_,__IELE-COMMON`(_286,_287,_288),SCHED)=>`_<_>_IELE-GAS`(`Gbyte_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_287),isSchedule(SCHED)),isLValue(_286)),isOperand(_288)) ensures #token("true","Bool") [UNIQUE_ID(0565798cc2c15106405e1b04522f8472324e82c8d96ce9793d7d1aa8948798da) contentStartColumn(10) contentStartLine(503) org.kframework.attributes.Location(Location(503,10,503,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_287),isSchedule(SCHED)),isLValue(_286)),isOperand(_288))
											v[21], i.evalErr = i.evalIsOperand( // isOperand(_287)
												v[6] /*_287*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isOperand(_287),isSchedule(SCHED))
											bv[2] = m.IsTrue(v[21])
											if bv[2] {
												v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[8] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = m.IsTrue(v[22])
											}
											// `_andBool_`(`_andBool_`(isOperand(_287),isSchedule(SCHED)),isLValue(_286))
											bv[1] = bv[2]
											if bv[1] {
												v[23], i.evalErr = i.evalIsLValue( // isLValue(_286)
													v[5] /*_286*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[23])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(_287),isSchedule(SCHED)),isLValue(_286)),isOperand(_288))
											bv[0] = bv[1]
											if bv[0] {
												v[24], i.evalErr = i.evalIsOperand( // isOperand(_288)
													v[7] /*_288*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[24])
											}
											if bv[0] {
												// RHS
												return i.stepRHS530(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 536
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=expmod_,_,__IELE-COMMON`(_172,W0,W1,W2)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _172 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable W2 = v[8]
									v[9] = i.Model.KApplyArg(v[2], 1)
									// KVariable SCHED = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[16]
													v[17] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[17]
													v[18] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[18]
													v[19] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[20]
													v[21] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[21]
													// rule #536
													// source: iele-gas.k @481
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=expmod_,_,__IELE-COMMON`(_172,W0,W1,W2),SCHED)=>`Cexpmod`(SCHED,intSize(W0),intSize(W1),intSize(W2),W2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(W2),isSchedule(SCHED)),isLValue(_172)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(fb1aa8ca1254582133f79ecced2c18e4b632c1a648c53ee2ce609148563ea964) contentStartColumn(10) contentStartLine(481) org.kframework.attributes.Location(Location(481,10,481,114)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_172)),#token("true","Bool")),#token("true","Bool"))
														v[22], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
															v[9] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isLValue(_172))
														bv[0] = /* rhs precomputed isInt(W2) */ /* && */ m.IsTrue(v[22])
														if bv[0] {
															v[23], i.evalErr = i.evalIsLValue( // isLValue(_172)
																v[5] /*_172*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[23])
														}
														if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
															// RHS
															return i.stepRHS536(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 540
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=or_,__IELE-COMMON`(_301,W0,W1)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _301 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable W0 = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable W1 = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[20]
												// rule #540
												// source: iele-gas.k @441
												// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=or_,__IELE-COMMON`(_301,W0,W1),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gbitwise_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`maxInt(_,_)_INT`(intSize(W0),intSize(W1)),`_<_>_IELE-GAS`(`Gbitwiseword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_301)),isInt(W1)),isInt(W0)) ensures #token("true","Bool") [UNIQUE_ID(1221b03c0b019efb743d0beccc712dbbff1b170c941bee661b55f0376ed543b6) contentStartColumn(10) contentStartLine(441) org.kframework.attributes.Location(Location(441,10,441,135)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isLValue(_301)),#token("true","Bool")),#token("true","Bool"))
													v[21], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
														v[8] /*SCHED*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isSchedule(SCHED),isLValue(_301))
													bv[0] = m.IsTrue(v[21])
													if bv[0] {
														v[22], i.evalErr = i.evalIsLValue( // isLValue(_301)
															v[5] /*_301*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[22])
													}
													if bv[0] /* && */ /* rhs precomputed isInt(W1) */  /* && */ /* rhs precomputed isInt(W0) */  {
														// RHS
														return i.stepRHS540(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 566
					if v[4]&kapplyMatchMask == kapplyMatchLblRIP160XuIELEXhyphenPRECOMPILED0 { // `RIP160_IELE-PRECOMPILED`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												if v[27]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList))))
													v[28] = i.Model.KApplyArg(v[27], 0)
													if v[28]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))
														v[29] = i.Model.KApplyArg(v[28], 0)
														if i.tempTypeVar = v[29] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable LEN = v[29]
															v[30] = i.Model.KApplyArg(v[28], 1)
															if v[30]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(DATA,`.List{"operandList"}`(.KList))
																v[31] = i.Model.KApplyArg(v[30], 0)
																if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable DATA = v[31]
																	v[32] = i.Model.KApplyArg(v[30], 1)
																	if v[32]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																		v[33] = i.Model.KApplyArg(v[21], 6)
																		// KVariable _5 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 7)
																		// KVariable _6 = v[34]
																		v[35] = i.Model.KApplyArg(v[21], 8)
																		// KVariable _7 = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _12 = v[40]
																		v[41] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _13 = v[41]
																		v[42] = i.Model.KApplyArg(v[16], 5)
																		// KVariable _18 = v[42]
																		v[43] = i.Model.KApplyArg(v[16], 6)
																		// KVariable _19 = v[43]
																		v[44] = i.Model.KApplyArg(v[16], 7)
																		// KVariable _20 = v[44]
																		v[45] = i.Model.KApplyArg(v[16], 8)
																		// KVariable _21 = v[45]
																		v[46] = i.Model.KApplyArg(v[16], 9)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[16], 10)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[16], 11)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[16], 12)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(v[16], 13)
																		// KVariable _26 = v[50]
																		v[51] = i.Model.KApplyArg(v[16], 14)
																		// KVariable _27 = v[51]
																		v[52] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[52]
																		// rule #566
																		// source: iele-gas.k @730
																		// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`RIP160_IELE-PRECOMPILED`(.KList),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Grip160_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Grip160word_IELE-GAS`(.KList),SCHED),bytesInWords(`maxInt(_,_)_INT`(LEN,intSize(DATA)))))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,`<callData>`(operandList(LEN,operandList(DATA,`.List{"operandList"}`(.KList)))),_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(LEN),isSchedule(SCHED)),isInt(DATA)) ensures #token("true","Bool") [UNIQUE_ID(2a875e68736e0ae7132a33767fb252b04e96856e4318946ff6ddb82f13119f85) contentStartColumn(10) contentStartLine(730) org.kframework.attributes.Location(Location(730,10,730,185)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool"))
																			v[53], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																				v[5] /*SCHED*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[53]) /* && */ /* rhs precomputed isInt(DATA) */  {
																				// RHS
																				return i.stepRHS566(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 14
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqlog2XuXuIELEXhyphenCOMMON2 { // `_=log2__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #14
									// source: iele-syntax.k @160
									// {| rule `<generatedTop>`(`<k>`(`` `_=log2__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=log2__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(51aa23b844841767dd306aa917b30118d70536da5a43898e4219d8a37e52e03f) heat() hybrid() org.kframework.attributes.Location(Location(160,24,160,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(418179060) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS14(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 15, 543
				if v[2]&kapplyMatchMask == kapplyMatchLblDefineXuXlbracketXuXrbracketXuIELEXhyphenCOMMON2 { // `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXlparenXuXrparenXuIELEXhyphenCOMMON2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// rule: 15
							// KVariable NAME = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							// KVariable ARGS = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable BLOCKS = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							// KVariable _6 = v[9]
							v[10] = i.Model.KApplyArg(c, 2)
							// KVariable _7 = v[10]
							v[11] = i.Model.KApplyArg(c, 3)
							// KVariable _8 = v[11]
							v[12] = i.Model.KApplyArg(c, 4)
							// KVariable _9 = v[12]
							v[13] = i.Model.KApplyArg(c, 5)
							// KVariable _10 = v[13]
							v[14] = i.Model.KApplyArg(c, 6)
							if v[14]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2))
								v[15] = i.Model.KApplyArg(v[14], 0)
								// KVariable _3 = v[15]
								v[16] = i.Model.KApplyArg(v[14], 1)
								// KVariable _4 = v[16]
								v[17] = i.Model.KApplyArg(v[14], 2)
								// KVariable _5 = v[17]
								v[18] = i.Model.KApplyArg(v[14], 3)
								if v[18]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2)
									v[19] = i.Model.KApplyArg(v[18], 0)
									if v[19]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(TYPES)
										v[20] = i.Model.KApplyArg(v[19], 0)
										if v[20]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
											// KVariable TYPES = v[20]
											v[21] = i.Model.KApplyArg(v[18], 1)
											// KVariable _0 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 2)
											// KVariable _1 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 3)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltfunctionBodiesXgt1 { // `<functionBodies>`(DotVar4)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KSequence, size 1:DotVar4
												// KVariable DotVar4 = v[24]
												v[25] = i.Model.KApplyArg(v[18], 4)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(c, 7)
												// KVariable _11 = v[26]
												v[27] = i.Model.KApplyArg(c, 8)
												// KVariable _12 = v[27]
												// rule #15
												// source: well-formedness.k @119
												// {| rule `<generatedTop>`(`<k>`(`` `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)=>checkName(NAME)~>checkArgs(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(NAME)~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),isMap(TYPES)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName")))) ensures #token("true","Bool") [UNIQUE_ID(780ad67fd5aacaf082f52d641e34db9fdbf877ce6cf34ee38fb87d97fe1e7a46) contentStartColumn(10) contentStartLine(119) org.kframework.attributes.Location(Location(119,10,122,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),#token("true","Bool")),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName"))))
													v[28], i.evalErr = i.evalIsBlocks( // isBlocks(BLOCKS)
														v[8] /*BLOCKS*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isBlocks(BLOCKS),isIeleName(NAME))
													bv[2] = m.IsTrue(v[28])
													if bv[2] {
														v[29], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
															v[6] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[2] = m.IsTrue(v[29])
													}
													// `_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS))
													bv[1] = bv[2]
													if bv[1] {
														v[30], i.evalErr = i.evalIsFunctionParameters( // isFunctionParameters(ARGS)
															v[7] /*ARGS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[30])
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),#token("true","Bool")),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName"))))
													bv[0] = bv[1] /* && */ /* rhs precomputed isMap(TYPES) */ 
													if bv[0] {
														v[31], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(NAME,TYPES)
															v[6] /*NAME*/,
															v[20] /*TYPES*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName")))
														bv[3] = !(m.IsTrue(v[31]))
														if bv[3] {
															v[32], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(NAME,#token("init","IeleName"))
																v[6] /*NAME*/,
																/* rhs KToken */ constKTokenSortIeleNameinit,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[3] = m.IsTrue(v[32])
														}
														bv[0] = bv[3]
													}
													if bv[0] {
														// RHS
														return i.stepRHS15(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
							// rule: 543
							if i.Model.Equals(v[6], constKTokenSortIeleNameinit) { // #token("init","IeleName")
								v[7] = i.Model.KApplyArg(v[4], 1)
								// KVariable ARGS = v[7]
								v[8] = i.Model.KApplyArg(v[2], 1)
								// KVariable BLOCKS = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								// KVariable _6 = v[9]
								v[10] = i.Model.KApplyArg(c, 2)
								// KVariable _7 = v[10]
								v[11] = i.Model.KApplyArg(c, 3)
								// KVariable _8 = v[11]
								v[12] = i.Model.KApplyArg(c, 4)
								// KVariable _9 = v[12]
								v[13] = i.Model.KApplyArg(c, 5)
								// KVariable _10 = v[13]
								v[14] = i.Model.KApplyArg(c, 6)
								if v[14]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2))
									v[15] = i.Model.KApplyArg(v[14], 0)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(v[14], 1)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(v[14], 2)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(v[14], 3)
									if v[18]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2)
										v[19] = i.Model.KApplyArg(v[18], 0)
										if v[19]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(TYPES)
											v[20] = i.Model.KApplyArg(v[19], 0)
											if v[20]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
												// KVariable TYPES = v[20]
												v[21] = i.Model.KApplyArg(v[18], 1)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 2)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 3)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltfunctionBodiesXgt1 { // `<functionBodies>`(DotVar4)
													v[24] = i.Model.KApplyArg(v[23], 0)
													// KSequence, size 1:DotVar4
													// KVariable DotVar4 = v[24]
													v[25] = i.Model.KApplyArg(v[18], 4)
													// KVariable _2 = v[25]
													v[26] = i.Model.KApplyArg(c, 7)
													// KVariable _11 = v[26]
													v[27] = i.Model.KApplyArg(c, 8)
													// KVariable _12 = v[27]
													// rule #543
													// source: well-formedness.k @114
													// {| rule `<generatedTop>`(`<k>`(`` `define_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("init","IeleName")),ARGS),BLOCKS)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(#token("init","IeleName"),funType(ints(#sizeNames(ARGS)),`.List{"typeList"}`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(#token("init","IeleName"))~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isFunctionParameters(ARGS)),isMap(TYPES)),`notBool_`(`_in_keys(_)_MAP`(#token("init","IeleName"),TYPES))) ensures #token("true","Bool") [UNIQUE_ID(4808cc363a72115f45f58cd5fe91c986e9dab8c1e721f594b295fb02e0d14339) contentStartColumn(10) contentStartLine(114) org.kframework.attributes.Location(Location(114,10,117,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isFunctionParameters(ARGS)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(#token("init","IeleName"),TYPES)))
														v[28], i.evalErr = i.evalIsBlocks( // isBlocks(BLOCKS)
															v[8] /*BLOCKS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isBlocks(BLOCKS),isFunctionParameters(ARGS))
														bv[1] = m.IsTrue(v[28])
														if bv[1] {
															v[29], i.evalErr = i.evalIsFunctionParameters( // isFunctionParameters(ARGS)
																v[7] /*ARGS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[29])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isFunctionParameters(ARGS)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(#token("init","IeleName"),TYPES)))
														bv[0] = bv[1] /* && */ /* rhs precomputed isMap(TYPES) */ 
														if bv[0] {
															v[30], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(#token("init","IeleName"),TYPES)
																/* rhs KToken */ constKTokenSortIeleNameinit,
																v[20] /*TYPES*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = !(m.IsTrue(v[30]))
														}
														if bv[0] {
															// RHS
															return i.stepRHS543(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 17
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashinitVM1 { // #initVM(ARGS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable ARGS = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _23 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _24 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _25 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _26 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _27 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_427),_10,_11,_12,`<callFrame>`(_0,_1,`<localCalls>`(_430),_2,_3,_4,_5,`<regs>`(_428),`<localMem>`(_429),`<peakMemory>`(_426),`<currentMemory>`(_425),_6,_7,_8,_9),_13,_14,_15,_16,_17,_18,_19,_20,_21,_22)
										v[16] = i.Model.KApplyArg(v[15], 0)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_427)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _427 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 1)
											// KVariable _10 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 2)
											// KVariable _11 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 3)
											// KVariable _12 = v[20]
											v[21] = i.Model.KApplyArg(v[15], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(_430),_2,_3,_4,_5,`<regs>`(_428),`<localMem>`(_429),`<peakMemory>`(_426),`<currentMemory>`(_425),_6,_7,_8,_9)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(_430)
													v[25] = i.Model.KApplyArg(v[24], 0)
													if v[25]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
														// KVariable _430 = v[25]
														v[26] = i.Model.KApplyArg(v[21], 3)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[21], 4)
														// KVariable _3 = v[27]
														v[28] = i.Model.KApplyArg(v[21], 5)
														// KVariable _4 = v[28]
														v[29] = i.Model.KApplyArg(v[21], 6)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[21], 7)
														if v[30]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(_428)
															v[31] = i.Model.KApplyArg(v[30], 0)
															if v[31]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable _428 = v[31]
																v[32] = i.Model.KApplyArg(v[21], 8)
																if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_429)
																	v[33] = i.Model.KApplyArg(v[32], 0)
																	if v[33]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																		// KVariable _429 = v[33]
																		v[34] = i.Model.KApplyArg(v[21], 9)
																		if v[34]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(_426)
																			v[35] = i.Model.KApplyArg(v[34], 0)
																			if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable _426 = v[35]
																				v[36] = i.Model.KApplyArg(v[21], 10)
																				if v[36]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(_425)
																					v[37] = i.Model.KApplyArg(v[36], 0)
																					if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						// KVariable _425 = v[37]
																						v[38] = i.Model.KApplyArg(v[21], 11)
																						// KVariable _6 = v[38]
																						v[39] = i.Model.KApplyArg(v[21], 12)
																						// KVariable _7 = v[39]
																						v[40] = i.Model.KApplyArg(v[21], 13)
																						// KVariable _8 = v[40]
																						v[41] = i.Model.KApplyArg(v[21], 14)
																						// KVariable _9 = v[41]
																						v[42] = i.Model.KApplyArg(v[15], 5)
																						// KVariable _13 = v[42]
																						v[43] = i.Model.KApplyArg(v[15], 6)
																						// KVariable _14 = v[43]
																						v[44] = i.Model.KApplyArg(v[15], 7)
																						// KVariable _15 = v[44]
																						v[45] = i.Model.KApplyArg(v[15], 8)
																						// KVariable _16 = v[45]
																						v[46] = i.Model.KApplyArg(v[15], 9)
																						// KVariable _17 = v[46]
																						v[47] = i.Model.KApplyArg(v[15], 10)
																						// KVariable _18 = v[47]
																						v[48] = i.Model.KApplyArg(v[15], 11)
																						// KVariable _19 = v[48]
																						v[49] = i.Model.KApplyArg(v[15], 12)
																						// KVariable _20 = v[49]
																						v[50] = i.Model.KApplyArg(v[15], 13)
																						// KVariable _21 = v[50]
																						v[51] = i.Model.KApplyArg(v[15], 14)
																						// KVariable _22 = v[51]
																						v[52] = i.Model.KApplyArg(c, 8)
																						// KVariable _28 = v[52]
																						// rule #17
																						// source: iele.k @1241
																						// {| rule `<generatedTop>`(`<k>`(``#initVM(ARGS)=>`#loads___IELE`(#regRange(#sizeRegs(ARGS)),ARGS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_23,_24,_25,_26,_27,`<iele>`(`<output>`(_427=>`.List{"operandList"}`(.KList)),_10,_11,_12,`<callFrame>`(_0,_1,`<localCalls>`(_430=>`.List`(.KList)),_2,_3,_4,_5,`<regs>`(_428=>`.Array_IELE-DATA`(.KList)),`<localMem>`(_429=>`.Map`(.KList)),`<peakMemory>`(_426=>#token("0","Int")),`<currentMemory>`(_425=>#token("0","Int")),_6,_7,_8,_9),_13,_14,_15,_16,_17,_18,_19,_20,_21,_22),_28) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(_429),isInt(_425)),isInts(ARGS)),isArray(_428)),isInts(_427)),isList(_430)),isInt(_426)) ensures #token("true","Bool") [UNIQUE_ID(dde7e438c7b16175d65f338fea0f1d0c367d8557db8b5df732adedfb57a19006) contentStartColumn(10) contentStartLine(1241) org.kframework.attributes.Location(Location(1241,10,1247,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																						if !matched {
																							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(ARGS)),#token("true","Bool")),isInts(_427)),#token("true","Bool")),#token("true","Bool"))
																							v[53], i.evalErr = i.evalIsInts( // isInts(ARGS)
																								v[4] /*ARGS*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(ARGS)),#token("true","Bool")),isInts(_427))
																							bv[0] = /* rhs precomputed isMap(_429) && isInt(_425) */ /* && */ m.IsTrue(v[53]) /* && */ /* rhs precomputed isArray(_428) */ 
																							if bv[0] {
																								v[54], i.evalErr = i.evalIsInts( // isInts(_427)
																									v[17] /*_427*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = m.IsTrue(v[54])
																							}
																							if bv[0] /* && */ /* rhs precomputed isList(_430) */  /* && */ /* rhs precomputed isInt(_426) */  {
																								// RHS
																								return i.stepRHS17(v, bv, config)
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 18, 22, 111, 531
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rules: 18, 22, 531
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 18
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #18
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(904426498c2f8ef9d345c05163b76fcca64982c2f650ae946d8e1038939ca4d5) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[7] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K4))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[5] = m.IsTrue(v[26])
											if bv[5] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[27]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS18(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rules: 22, 531
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// rule: 22
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable HOLE = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #22
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7d3e898ddb77b3f2e907df7dadf7f4cdcb5149b4ad69ef7a24d5fae96ae24541) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[7] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[8] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[7] = m.IsTrue(v[26])
											if bv[7] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[7] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))
											bv[6] = bv[7]
											if bv[6] {
												v[28], i.evalErr = i.evalIsKResult( // isKResult(K3)
													v[7] /*K3*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = m.IsTrue(v[28])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))
											bv[5] = bv[6]
											if bv[5] {
												v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[8] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[29]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS22(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 531
					// KVariable HOLE = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #531
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3401b855888b6c48c80a4fc1a1d626dacfa1270505c4e38b3046c1d2b934894e) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
											v[6] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K2),isOperands(HOLE))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[6] = m.IsTrue(v[26])
											if bv[6] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[5] = bv[6]
											if bv[5] {
												v[28], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[28]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS531(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 111
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #111
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(`` `_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4)=>HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e93f8f8e03508dae9de78fa64bbd8706737310acbc4de36f99848c9f6ebc80ee) heat() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[7] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[26]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS111(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 20
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashaccountEmpty1 { // #accountEmpty(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _4 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _5 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _6 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _7 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _8 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _9 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
												v[18] = i.Model.KApplyArg(v[17], 0)
												if v[18]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
													// KVariable ACCTS = v[18]
													v[19] = i.Model.KApplyArg(v[16], 1)
													// KVariable _0 = v[19]
													v[20] = i.Model.KApplyArg(v[16], 2)
													// KVariable _1 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 3)
													// KVariable _2 = v[21]
													v[22] = i.Model.KApplyArg(v[16], 4)
													// KVariable _3 = v[22]
													// rule #20
													// source: iele-gas.k @797
													// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>#accountEmpty(ACCT)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(isInt(ACCT),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(ffd943da3c89a5132a36988813269cb8f419a9300069569d24d3701c30ddd28f) contentStartColumn(10) contentStartLine(797) org.kframework.attributes.Location(Location(797,10,799,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`Set:in`(ACCT,ACCTS)))
														v[23], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
															v[4] /*ACCT*/,
															v[18] /*ACCTS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if /* rhs precomputed isInt(ACCT) && isSet(ACCTS) */ /* && */ !(m.IsTrue(v[23])) {
															// RHS
															return i.stepRHS20(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 21, 102, 501
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckOperand1 { // checkOperand(`@__IELE-COMMON`(NAME))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 21
					if v[4]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable NAME = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[6]
						v[7] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[7]
						v[8] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[8]
						v[9] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[9]
						v[10] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[10]
						v[11] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[11]
						v[12] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[12]
						v[13] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[13]
						// rule #21
						// source: well-formedness.k @378
						// {| rule `<generatedTop>`(`<k>`(``checkOperand(`@__IELE-COMMON`(NAME))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token("true","Bool") [UNIQUE_ID(5a3c5ffed06c7573b35d348ae0f8a73d4bd68a2cc9b1878b1db25c4fa8c4c6fd) contentStartColumn(10) contentStartLine(378) org.kframework.attributes.Location(Location(378,10,378,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isIeleName(NAME)
							v[14], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
								v[5] /*NAME*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[14]) {
								// RHS
								return i.stepRHS21(v, bv, config)
							}
						}
					}
					// rule: 102
					if v[4]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(NAME)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable NAME = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[6]
						v[7] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[7]
						v[8] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[8]
						v[9] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[9]
						v[10] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[10]
						v[11] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[11]
						v[12] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[12]
						v[13] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[13]
						// rule #102
						// source: well-formedness.k @376
						// {| rule `<generatedTop>`(`<k>`(``checkOperand(`%__IELE-COMMON`(NAME))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token("true","Bool") [UNIQUE_ID(52a0a25099bd020056847201c3373c72d4b552f6981ce760d6b8d90de4f5734a) contentStartColumn(10) contentStartLine(376) org.kframework.attributes.Location(Location(376,10,376,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isIeleName(NAME)
							v[14], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
								v[5] /*NAME*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[14]) {
								// RHS
								return i.stepRHS102(v, bv, config)
							}
						}
					}
					// rule: 501
					// KVariable _30 = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					// KVariable _0 = v[5]
					v[6] = i.Model.KApplyArg(c, 2)
					// KVariable _1 = v[6]
					v[7] = i.Model.KApplyArg(c, 3)
					// KVariable _2 = v[7]
					v[8] = i.Model.KApplyArg(c, 4)
					// KVariable _3 = v[8]
					v[9] = i.Model.KApplyArg(c, 5)
					// KVariable _4 = v[9]
					v[10] = i.Model.KApplyArg(c, 6)
					// KVariable _5 = v[10]
					v[11] = i.Model.KApplyArg(c, 7)
					// KVariable _6 = v[11]
					v[12] = i.Model.KApplyArg(c, 8)
					// KVariable _7 = v[12]
					// rule #501
					// source: well-formedness.k @377
					// {| rule `<generatedTop>`(`<k>`(``checkOperand(_30)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIntConstant(_30) ensures #token("true","Bool") [UNIQUE_ID(99bf0fab57584b0c0650a7d95f6e8f426db7e94f8185cddb62646be33224b2d2) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,377,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
					if !matched {
						// REQUIRES isIntConstant(_30)
						v[13], i.evalErr = i.evalIsIntConstant( // isIntConstant(_30)
							v[4] /*_30*/,
							config, -1)
						if i.evalErr != nil {
							return m.NoResult, i.evalErr
						}
						if m.IsTrue(v[13]) {
							// RHS
							return i.stepRHS501(v, bv, config)
						}
					}
				}
				// rules: 30, 75, 170, 217
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckArgs1 { // checkArgs(localNameList(`%__IELE-COMMON`(N),ARGS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 30, 217
					if v[4]&kapplyMatchMask == kapplyMatchLblLocalNameList2 { // localNameList(`%__IELE-COMMON`(N),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(N)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable N = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							// KVariable ARGS = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[8]
							v[9] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[9]
							v[10] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[10]
							v[11] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[11]
							v[12] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[12]
							v[13] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[13]
							v[14] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[14]
							v[15] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[15]
							// rule: 30
							// rule #30
							// source: well-formedness.k @150
							// {| rule `<generatedTop>`(`<k>`(``checkArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkIntArgs(localNameList(`%__IELE-COMMON`(N),ARGS),#token("0","Int"))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isNumericIeleName(N),isLocalNames(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(e8321c7d216ff7a446be659b024d95bfd611d9b9b77f45ade2d724b79a3e8c95) contentStartColumn(10) contentStartLine(150) org.kframework.attributes.Location(Location(150,10,150,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(isNumericIeleName(N),isLocalNames(ARGS))
								v[16], i.evalErr = i.evalIsNumericIeleName( // isNumericIeleName(N)
									v[6] /*N*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isNumericIeleName(N),isLocalNames(ARGS))
								bv[0] = m.IsTrue(v[16])
								if bv[0] {
									v[17], i.evalErr = i.evalIsLocalNames( // isLocalNames(ARGS)
										v[7] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[17])
								}
								if bv[0] {
									// RHS
									return i.stepRHS30(v, bv, config)
								}
							}
							// rule: 217
							// rule #217
							// source: well-formedness.k @151
							// {| rule `<generatedTop>`(`<k>`(``checkArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkNameArgs(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N))) ensures #token("true","Bool") [UNIQUE_ID(26564b2ac3d979f0c705b6d892649a07bf8b3a7fa968cc8d0585ad28f225eb6b) contentStartColumn(10) contentStartLine(151) org.kframework.attributes.Location(Location(151,10,151,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N)))
								v[16], i.evalErr = i.evalIsIeleName( // isIeleName(N)
									v[6] /*N*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isIeleName(N),isLocalNames(ARGS))
								bv[1] = m.IsTrue(v[16])
								if bv[1] {
									v[17], i.evalErr = i.evalIsLocalNames( // isLocalNames(ARGS)
										v[7] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[17])
								}
								// `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N)))
								bv[0] = bv[1]
								if bv[0] {
									v[18], i.evalErr = i.evalIsNumericIeleName( // isNumericIeleName(N)
										v[6] /*N*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = !(m.IsTrue(v[18]))
								}
								if bv[0] {
									// RHS
									return i.stepRHS217(v, bv, config)
								}
							}
						}
					}
					// rule: 75
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelocalNameListXquoteXrbracket0 { // `.List{"localNameList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[10]
						v[11] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[11]
						v[12] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[12]
						// rule #75
						// source: well-formedness.k @148
						// {| rule `<generatedTop>`(`<k>`(``checkArgs(`.List{"localNameList"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(421c2f2faa9a76593e6391a2d9d2f489ea0fb585d9ff2c2725b7f2c3ee3143da) contentStartColumn(10) contentStartLine(148) org.kframework.attributes.Location(Location(148,10,148,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// RHS
							return i.stepRHS75(v, bv, config)
						}
					}
					// rule: 170
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _36 = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[10]
						v[11] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[11]
						v[12] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[12]
						// rule #170
						// source: well-formedness.k @149
						// {| rule `<generatedTop>`(`<k>`(``checkArgs(_36)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isInt(_36) ensures #token("true","Bool") [UNIQUE_ID(8cc198c93d2bcb35b491e19c9b8d53871b25cb028c79bc0ad3e74c4be2e402fb) contentStartColumn(10) contentStartLine(149) org.kframework.attributes.Location(Location(149,10,149,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES precomputed isInt(_36)
							// RHS
							return i.stepRHS170(v, bv, config)
						}
					}
				}
				// rules: 36, 113, 404
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=addmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rules: 36, 113
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 36
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #36
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_2`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e33157551741e226e6f5999252c5d6583bccefe7f1c3bdc1b54771f5b0498a47) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS36(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 113
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #113
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(ace2a642ce6e9e3db38f132e90b29595a77ad57cad3d0061374875a4b0b7d6bc) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[5] = m.IsTrue(v[24])
											if bv[5] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[26]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS113(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 404
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #404
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(`` `_=addmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(da8439c5b847a3691ab444f09822d12e3ca064c3525eaa4d7235c0d4443250d1) heat() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS404(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 37, 44
				if v[2]&kapplyMatchMask == kapplyMatchLblSstoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `sstore_,__IELE-COMMON`(HOLE,K1)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 37
					// KVariable HOLE = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #37
									// source: iele-syntax.k @138
									// {| rule `<generatedTop>`(`<k>`(`` `sstore_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezersstore_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(47397f39224be7396ef530d624eadca37b4db55741014715fff8282fef80da11) heat() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1277933280) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isOperand(K1))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS37(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 44
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #44
									// source: iele-syntax.k @138
									// {| rule `<generatedTop>`(`<k>`(`` `sstore_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezersstore_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(26281bac3cf5872670a9ec783a0b70c5f029852e4cf8b06945ecc0e9eb626444) heat() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1277933280) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))
											bv[2] = m.IsTrue(v[20])
											if bv[2] {
												v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[5] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = !(m.IsTrue(v[21]))
											}
											bv[0] = bv[2]
										}
										if bv[0] {
											// RHS
											return i.stepRHS44(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 42, 391
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sext_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 42
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #42
									// source: iele-syntax.k @162
									// {| rule `<generatedTop>`(`<k>`(`` `_=sext_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=sext_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8d980f3e4e41c345c259ee138ca20f0e47d60ff13de85b990689cb0dfa2f10a3) heat() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS42(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 391
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #391
									// source: iele-syntax.k @162
									// {| rule `<generatedTop>`(`<k>`(`` `_=sext_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=sext_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(145dd21f933950d0daa6abed195b63f17fac937caf296bff658bc213009d71f0) heat() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS391(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 46, 358, 541
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXuXuIELEXhyphenCOMMON2 { // `___IELE-COMMON`(`.List{"instructionList"}`(.KList),BLOCKS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 46
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteinstructionListXquoteXrbracket0 { // `.List{"instructionList"}`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable BLOCKS = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _3 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _4 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _5 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _6 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2)
											v[16] = i.Model.KApplyArg(v[15], 0)
											if v[16]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
												v[17] = i.Model.KApplyArg(v[16], 0)
												if i.Model.Equals(v[17], m.BoolFalse) { // #token("false","Bool")
													v[18] = i.Model.KApplyArg(v[15], 1)
													// KVariable _0 = v[18]
													v[19] = i.Model.KApplyArg(v[15], 2)
													// KVariable _1 = v[19]
													v[20] = i.Model.KApplyArg(v[15], 3)
													// KVariable _2 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													// KVariable _7 = v[21]
													v[22] = i.Model.KApplyArg(c, 8)
													// KVariable _8 = v[22]
													// rule #46
													// source: iele.k @592
													// {| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(`.List{"instructionList"}`(.KList),BLOCKS)=>BLOCKS``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2),_7,_8) requires isLabeledBlocks(BLOCKS) ensures #token("true","Bool") [UNIQUE_ID(f0ebedea521b7e43704a441b32915ff4b8ea754d2d12a45bc39289b98839fe49) contentStartColumn(10) contentStartLine(592) org.kframework.attributes.Location(Location(592,10,593,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES isLabeledBlocks(BLOCKS)
														v[23], i.evalErr = i.evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
															v[5] /*BLOCKS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if m.IsTrue(v[23]) {
															// RHS
															return i.stepRHS46(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 358
					// KVariable BLOCK = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable BLOCKS = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _8 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _9 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _10 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _11 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _12 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(DotVar5))))
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
							v[13] = i.Model.KApplyArg(v[12], 0)
							if i.Model.Equals(v[13], m.BoolTrue) { // #token("true","Bool")
								v[14] = i.Model.KApplyArg(v[11], 1)
								// KVariable _6 = v[14]
								v[15] = i.Model.KApplyArg(v[11], 2)
								// KVariable _7 = v[15]
								v[16] = i.Model.KApplyArg(v[11], 3)
								if v[16]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(DotVar5)))
									v[17] = i.Model.KApplyArg(v[16], 0)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(v[16], 1)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(v[16], 2)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(v[16], 3)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(v[16], 4)
									if v[21]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(_0,_1,`<currentInstructions>`(DotVar5))
										v[22] = i.Model.KApplyArg(v[21], 0)
										// KVariable _0 = v[22]
										v[23] = i.Model.KApplyArg(v[21], 1)
										// KVariable _1 = v[23]
										v[24] = i.Model.KApplyArg(v[21], 2)
										if v[24]&kapplyMatchMask == kapplyMatchLblXltcurrentInstructionsXgt1 { // `<currentInstructions>`(DotVar5)
											v[25] = i.Model.KApplyArg(v[24], 0)
											// KSequence, size 1:DotVar5
											// KVariable DotVar5 = v[25]
											v[26] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[26]
											v[27] = i.Model.KApplyArg(c, 8)
											// KVariable _14 = v[27]
											// rule #358
											// source: well-formedness.k @165
											// {| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(BLOCK,BLOCKS)=>BLOCKS``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(``.K=>BLOCK``~>DotVar5)))),_13,_14) requires `_andBool_`(isLabeledBlocks(BLOCKS),isUnlabeledBlock(BLOCK)) ensures #token("true","Bool") [UNIQUE_ID(a0affca20a76e396297e4b55c54f33d2097eb521a77726c805fe4a9f6d76f33d) contentStartColumn(10) contentStartLine(165) org.kframework.attributes.Location(Location(165,10,167,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(isLabeledBlocks(BLOCKS),isUnlabeledBlock(BLOCK))
												v[28], i.evalErr = i.evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
													v[5] /*BLOCKS*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isLabeledBlocks(BLOCKS),isUnlabeledBlock(BLOCK))
												bv[0] = m.IsTrue(v[28])
												if bv[0] {
													v[29], i.evalErr = i.evalIsUnlabeledBlock( // isUnlabeledBlock(BLOCK)
														v[4] /*BLOCK*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[29])
												}
												if bv[0] {
													// RHS
													return i.stepRHS358(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 541
					if v[4]&kapplyMatchMask == kapplyMatchLblInstructionList2 { // instructionList(OP,OPS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable OPS = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable BLOCKS = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _6 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2)
											v[18] = i.Model.KApplyArg(v[17], 0)
											if v[18]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
												v[19] = i.Model.KApplyArg(v[18], 0)
												if i.Model.Equals(v[19], m.BoolFalse) { // #token("false","Bool")
													v[20] = i.Model.KApplyArg(v[17], 1)
													// KVariable _0 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 2)
													// KVariable _1 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 3)
													// KVariable _2 = v[22]
													v[23] = i.Model.KApplyArg(c, 7)
													// KVariable _7 = v[23]
													v[24] = i.Model.KApplyArg(c, 8)
													// KVariable _8 = v[24]
													// rule #541
													// source: iele.k @581
													// {| rule `<generatedTop>`(`<k>`(`` `___IELE-COMMON`(instructionList(OP,OPS),BLOCKS)=>`#exceptional?[_]_IELE`(OP)~>OP~>`___IELE-COMMON`(OPS,BLOCKS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isInstruction(OP)),isInstructions(OPS)) ensures #token("true","Bool") [UNIQUE_ID(bd7291afe5c50568b1e673dfc6defca622d7581bd91eb64fc4054854b9770f7c) contentStartColumn(10) contentStartLine(581) org.kframework.attributes.Location(Location(581,10,586,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isInstruction(OP)),isInstructions(OPS))
														v[25], i.evalErr = i.evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
															v[7] /*BLOCKS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isLabeledBlocks(BLOCKS),isInstruction(OP))
														bv[1] = m.IsTrue(v[25])
														if bv[1] {
															v[26], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
																v[5] /*OP*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[26])
														}
														// `_andBool_`(`_andBool_`(isLabeledBlocks(BLOCKS),isInstruction(OP)),isInstructions(OPS))
														bv[0] = bv[1]
														if bv[0] {
															v[27], i.evalErr = i.evalIsInstructions( // isInstructions(OPS)
																v[6] /*OPS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[27])
														}
														if bv[0] {
															// RHS
															return i.stepRHS541(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 48, 240
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=byte_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 48
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #48
									// source: iele-syntax.k @161
									// {| rule `<generatedTop>`(`<k>`(`` `_=byte_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=byte_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d8733c903caf3959831888ded665cef06a3ef315e54f0f030cb26579601e23a3) heat() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS48(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 240
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #240
									// source: iele-syntax.k @161
									// {| rule `<generatedTop>`(`<k>`(`` `_=byte_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=byte_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(41c8f887977f11fbdc00a887d10c792b9b1ab6d96c130ca6dcaa2c22ae9cf753) heat() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS240(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 49, 219
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=and_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 49
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #49
									// source: iele-syntax.k @166
									// {| rule `<generatedTop>`(`<k>`(`` `_=and_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=and_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(bc41756f8a5526395ef35f84321bd4e750c92e0dfd14f70a94391c2e41f3ba53) heat() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS49(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 219
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #219
									// source: iele-syntax.k @166
									// {| rule `<generatedTop>`(`<k>`(`` `_=and_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=and_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3a3296b552deec6c8e2cc2aa1430e14f53c33460a11afb7173841e5ce76391bc) heat() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS219(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 52, 144
				if v[2]&kapplyMatchMask == kapplyMatchLblLogXuXcommaXuXuIELEXhyphenCOMMON2 { // `log_,__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 52
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #52
									// source: iele-syntax.k @209
									// {| rule `<generatedTop>`(`<k>`(`` `log_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezerlog_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(b4fb55e3296dff1c7e7bb37864dcaf62edb723918b7acd720cb41827502a645b) heat() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1200470358) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(HOLE)
											v[5] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))
											bv[2] = m.IsTrue(v[20])
											if bv[2] {
												v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[5] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = !(m.IsTrue(v[21]))
											}
											bv[0] = bv[2]
										}
										if bv[0] {
											// RHS
											return i.stepRHS52(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 144
					// KVariable HOLE = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #144
									// source: iele-syntax.k @209
									// {| rule `<generatedTop>`(`<k>`(`` `log_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerlog_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(6e4b90f76406434bb13ba6db7c0090ba3589eca6b0dd1a57be7ce2a87c6378b5) heat() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1200470358) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS144(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 60, 67, 437
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rules: 60, 437
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// rule: 60
					// KVariable HOLE = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #60
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_2`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(061cc185ec8389a6a1c453825c78c9de8422139548e2b8694cf57227ea207359) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))
											bv[5] = m.IsTrue(v[26])
											if bv[5] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[27]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS60(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 437
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable HOLE = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #437
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(f6b9565a757125d448ad6c006fd539f35ef061710c54ee70e2af9a4633ef9dd0) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[8] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K2),isKResult(K3))
											bv[6] = m.IsTrue(v[26])
											if bv[6] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(K3)
													v[7] /*K3*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = m.IsTrue(v[27])
											}
											// `_andBool_`(`_andBool_`(isKResult(K2),isKResult(K3)),`notBool_`(isKResult(HOLE)))
											bv[5] = bv[6]
											if bv[5] {
												v[28], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[8] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[28]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS437(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 67
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #67
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(`` `_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,HOLE,K3,K4)=>HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_`(K0,K1,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d4b5fb299d084a14055ee7a8a776a2f38a18da2c4f1f7364d10fe247a3b6d418) heat() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[26]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS67(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 62, 196
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mod_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 62
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #62
									// source: iele-syntax.k @154
									// {| rule `<generatedTop>`(`<k>`(`` `_=mod_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=mod_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(38a45a57d1bed5e7ec821f1b712ff241eddbb4cebc47ef7d0c76916c1cae8e37) heat() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1204296383) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS62(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 196
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #196
									// source: iele-syntax.k @154
									// {| rule `<generatedTop>`(`<k>`(`` `_=mod_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=mod_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(c297e28903b3113077bcfa340c466b4dd36a887b601a4f550200e97a0a931fe8) heat() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1204296383) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS196(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 63, 510
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=div_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 63
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #63
									// source: iele-syntax.k @152
									// {| rule `<generatedTop>`(`<k>`(`` `_=div_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=div_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(fdf91b15874f9630125143d7cca2feb47cc9943a158738ad40f8d55afff80db7) heat() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS63(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 510
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #510
									// source: iele-syntax.k @152
									// {| rule `<generatedTop>`(`<k>`(`` `_=div_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=div_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(cb3fc155083e2505118bfff9adce5d8eed862b80da051bf8bddb62500d4be2b3) heat() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS510(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 64, 174
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=add_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 64
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #64
									// source: iele-syntax.k @149
									// {| rule `<generatedTop>`(`<k>`(`` `_=add_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=add_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(142a805f26e6a02290d1f8f004d5fc736a3ed9b5397f3e77b839fac40e65d2c7) heat() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS64(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 174
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #174
									// source: iele-syntax.k @149
									// {| rule `<generatedTop>`(`<k>`(`` `_=add_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=add_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(5e74e15a9c1226ab5bf0b4c484838f88a0c32dc1eaf0606b1ef3c2e20872bb9a) heat() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS174(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 65, 284, 360, 394
				if v[2]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(K0,K1,HOLE,K3)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 65, 284, 394
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rules: 65, 394
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 65
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #65
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_2`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d9cc91fcae5adc5363d4189d7de39de670271af2580ca28208c5bb105ed3e639) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),isKResult(K1))
											bv[5] = m.IsTrue(v[24])
											if bv[5] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K1)
													v[5] /*K1*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[26]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS65(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 394
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #394
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(a7bee0a5eddc74aac9534cdd09aced6c7b8b99f0cdabbe20ddb59c52dccb7f43) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),isKResult(K1))
											bv[6] = m.IsTrue(v[24])
											if bv[6] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K1)
													v[5] /*K1*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2))
											bv[5] = bv[6]
											if bv[5] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[26])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isKResult(K0),isKResult(K1)),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[27]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS394(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 284
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #284
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_3`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(589887d91799e5ca75bc5d36cfba04ff4019b1cd64b26c8eddfb054aa2d586d0) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[5] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS284(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 360
					// KVariable HOLE = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #360
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(`` `store_,_,_,__IELE-COMMON`(HOLE,K1,K2,K3)=>HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_`(K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e37af0be0b8bdb9a332f37ca9cbe137922e1fbc5071c3c92febc68680a3b5acf) heat() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
											v[6] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K2),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS360(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 68, 422, 443
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=expmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 68
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #68
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_2`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(077463b582d8a1e11ef11de813e2767976baa6f5568330c525e7018f6389ab29) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS68(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rules: 422, 443
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 422
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #422
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(86859afb9267059ae507f9101d26b7fd0d91aac9eb27cf470e7669fd038fa855) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS422(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 443
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #443
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(`` `_=expmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=expmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(37681ba6f022d90d05cae03aaac5b3ece5e12dd84b98a6153bf00325d4b425ae) heat() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[5] = m.IsTrue(v[24])
											if bv[5] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[26]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS443(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 72
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqsloadXuXuIELEXhyphenCOMMON2 { // `_=sload__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #72
									// source: iele-syntax.k @137
									// {| rule `<generatedTop>`(`<k>`(`` `_=sload__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=sload__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(1907875a14ff55190230f2477613095437e26fb7a787e9cc1fbdf4bddff1ad82) heat() hybrid() org.kframework.attributes.Location(Location(137,24,137,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1819940427) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS72(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 73, 498
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckLVals1 { // checkLVals(lvalueList(LVAL,LVALS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 73
					if v[4]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(LVAL,LVALS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable LVALS = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[14]
						// rule #73
						// source: well-formedness.k @388
						// {| rule `<generatedTop>`(`<k>`(``checkLVals(lvalueList(LVAL,LVALS))=>checkLVal(LVAL)~>checkLVals(LVALS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValues(LVALS),isLValue(LVAL)) ensures #token("true","Bool") [UNIQUE_ID(14ca7335de44425ec6c6a5d02d2e47cdbffc094b908c0fee3c4f020d4045dbf2) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,388,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValues(LVALS),isLValue(LVAL))
							v[15], i.evalErr = i.evalIsLValues( // isLValues(LVALS)
								v[6] /*LVALS*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValues(LVALS),isLValue(LVAL))
							bv[0] = m.IsTrue(v[15])
							if bv[0] {
								v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
									v[5] /*LVAL*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[16])
							}
							if bv[0] {
								// RHS
								return i.stepRHS73(v, bv, config)
							}
						}
					}
					// rule: 498
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[10]
						v[11] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[11]
						v[12] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[12]
						// rule #498
						// source: well-formedness.k @389
						// {| rule `<generatedTop>`(`<k>`(``checkLVals(`.List{"lvalueList"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bcd5f7590daee13b41df315a0d6cfb48d183f5eb284248ad7293e46bedb5d872) contentStartColumn(10) contentStartLine(389) org.kframework.attributes.Location(Location(389,10,389,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// RHS
							return i.stepRHS498(v, bv, config)
						}
					}
				}
				// rules: 79, 99, 134, 201, 293
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rules: 79, 99, 134, 201
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rules: 79, 99, 134
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// rules: 79, 134
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// rule: 79
					// KVariable K4 = v[8]
					v[9] = i.Model.KApplyArg(v[2], 5)
					// KVariable HOLE = v[9]
					// KVariable DotVar1 = v[3]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #79
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,HOLE)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_`(K0,K1,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d22a8e5a752fc9a33627fad01aef9abe34e5784adb8ada0dd764b35df2a73e7e) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),`notBool_`(isKResult(HOLE))))
										v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[7] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[5] = m.IsTrue(v[22])
										if bv[5] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4))
										bv[4] = bv[5]
										if bv[4] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[9] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[26], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[27], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[28], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[9] = m.IsTrue(v[28])
											if bv[9] {
												v[29], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[9] = m.IsTrue(v[29])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))
											bv[8] = bv[9]
											if bv[8] {
												v[30], i.evalErr = i.evalIsKResult( // isKResult(K3)
													v[7] /*K3*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[8] = m.IsTrue(v[30])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4))
											bv[7] = bv[8]
											if bv[7] {
												v[31], i.evalErr = i.evalIsKResult( // isKResult(K4)
													v[8] /*K4*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[7] = m.IsTrue(v[31])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),isKResult(K4)),`notBool_`(isKResult(HOLE)))
											bv[6] = bv[7]
											if bv[6] {
												v[32], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[9] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = !(m.IsTrue(v[32]))
											}
											bv[0] = bv[6]
										}
										if bv[0] {
											// RHS
											return i.stepRHS79(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 134
					// KVariable HOLE = v[8]
					v[9] = i.Model.KApplyArg(v[2], 5)
					// KVariable K5 = v[9]
					// KVariable DotVar1 = v[3]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #134
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4`(K0,K1,K2,K3,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(af136c5078b7a056fe937232ddcfe33d0a2d9bbb04f61e2765032a56305ca067) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[9] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[22])
										if bv[5] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2))
										bv[4] = bv[5]
										if bv[4] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[8] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[26], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[27], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[28], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[8] = m.IsTrue(v[28])
											if bv[8] {
												v[29], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[8] = m.IsTrue(v[29])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3))
											bv[7] = bv[8]
											if bv[7] {
												v[30], i.evalErr = i.evalIsKResult( // isKResult(K3)
													v[7] /*K3*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[7] = m.IsTrue(v[30])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),isKResult(K3)),`notBool_`(isKResult(HOLE)))
											bv[6] = bv[7]
											if bv[6] {
												v[31], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[8] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = !(m.IsTrue(v[31]))
											}
											bv[0] = bv[6]
										}
										if bv[0] {
											// RHS
											return i.stepRHS134(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 99
					// KVariable HOLE = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					v[9] = i.Model.KApplyArg(v[2], 5)
					// KVariable K5 = v[9]
					// KVariable DotVar1 = v[3]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #99
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_`(K0,K1,K2,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(16215319f17023334f7f638d5eacab6fc3d8413e6c6761729ea1ca3477ec29b5) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[9] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperand(K2))
										bv[5] = m.IsTrue(v[22])
										if bv[5] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE))
										bv[4] = bv[5]
										if bv[4] {
											v[24], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[26], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[27], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[28], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[7] = m.IsTrue(v[28])
											if bv[7] {
												v[29], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[7] = m.IsTrue(v[29])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[6] = bv[7]
											if bv[6] {
												v[30], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = !(m.IsTrue(v[30]))
											}
											bv[0] = bv[6]
										}
										if bv[0] {
											// RHS
											return i.stepRHS99(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 201
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					v[9] = i.Model.KApplyArg(v[2], 5)
					// KVariable K5 = v[9]
					// KVariable DotVar1 = v[3]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #201
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(68b75e87ced34c499d0f2516b8b0bbb4ab8f84ffb038d3806314cb32d8423054) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[9] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[22])
										if bv[5] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4))
										bv[4] = bv[5]
										if bv[4] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[26], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[27], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[28], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[6] = m.IsTrue(v[28])
											if bv[6] {
												v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[6] = !(m.IsTrue(v[29]))
											}
											bv[0] = bv[6]
										}
										if bv[0] {
											// RHS
											return i.stepRHS201(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 293
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					v[9] = i.Model.KApplyArg(v[2], 5)
					// KVariable K5 = v[9]
					// KVariable DotVar1 = v[3]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #293
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4,K5)=>HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(501d994fcbf434b1ff01838d0363a68082867bbe853cf182043676a2257c82d8) heat() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[9] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[22])
										if bv[5] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2))
										bv[4] = bv[5]
										if bv[4] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[27], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[28], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[28]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS293(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 82, 109
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckOperands1 { // checkOperands(operandList(OP,OPS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 82
					if v[4]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(OP,OPS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable OPS = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[14]
						// rule #82
						// source: well-formedness.k @373
						// {| rule `<generatedTop>`(`<k>`(``checkOperands(operandList(OP,OPS))=>checkOperand(OP)~>checkOperands(OPS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperands(OPS),isOperand(OP)) ensures #token("true","Bool") [UNIQUE_ID(2020d0a2cce5dcbab90c5942c8d4c4bbe0cef546900f88c3c0ee353f9bcdce73) contentStartColumn(10) contentStartLine(373) org.kframework.attributes.Location(Location(373,10,373,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isOperands(OPS),isOperand(OP))
							v[15], i.evalErr = i.evalIsOperands( // isOperands(OPS)
								v[6] /*OPS*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isOperands(OPS),isOperand(OP))
							bv[0] = m.IsTrue(v[15])
							if bv[0] {
								v[16], i.evalErr = i.evalIsOperand( // isOperand(OP)
									v[5] /*OP*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[16])
							}
							if bv[0] {
								// RHS
								return i.stepRHS82(v, bv, config)
							}
						}
					}
					// rule: 109
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[10]
						v[11] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[11]
						v[12] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[12]
						// rule #109
						// source: well-formedness.k @374
						// {| rule `<generatedTop>`(`<k>`(``checkOperands(`.List{"operandList"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c7790262821155ac59a1e297fc027d9cb14982d8c985c4b2766ba76d3cdbb4a2) contentStartColumn(10) contentStartLine(374) org.kframework.attributes.Location(Location(374,10,374,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// RHS
							return i.stepRHS109(v, bv, config)
						}
					}
				}
				// rule: 86
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #86
									// source: iele-syntax.k @126
									// {| rule `<generatedTop>`(`<k>`(`` `_=load__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=load__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(caca8fc5cb3654c71704d1e54a2a23fca6595d4874ce61004be61789ea97e6e2) heat() hybrid() org.kframework.attributes.Location(Location(126,23,126,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1408482749) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS86(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 90
				if v[2]&kapplyMatchMask == kapplyMatchLblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON2 { // `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXlparenXuXrparenXuIELEXhyphenCOMMON2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable NAME = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							// KVariable ARGS = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable BLOCKS = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							// KVariable _6 = v[9]
							v[10] = i.Model.KApplyArg(c, 2)
							// KVariable _7 = v[10]
							v[11] = i.Model.KApplyArg(c, 3)
							// KVariable _8 = v[11]
							v[12] = i.Model.KApplyArg(c, 4)
							// KVariable _9 = v[12]
							v[13] = i.Model.KApplyArg(c, 5)
							// KVariable _10 = v[13]
							v[14] = i.Model.KApplyArg(c, 6)
							if v[14]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2))
								v[15] = i.Model.KApplyArg(v[14], 0)
								// KVariable _3 = v[15]
								v[16] = i.Model.KApplyArg(v[14], 1)
								// KVariable _4 = v[16]
								v[17] = i.Model.KApplyArg(v[14], 2)
								// KVariable _5 = v[17]
								v[18] = i.Model.KApplyArg(v[14], 3)
								if v[18]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(TYPES),_0,_1,`<functionBodies>`(DotVar4),_2)
									v[19] = i.Model.KApplyArg(v[18], 0)
									if v[19]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(TYPES)
										v[20] = i.Model.KApplyArg(v[19], 0)
										if v[20]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
											// KVariable TYPES = v[20]
											v[21] = i.Model.KApplyArg(v[18], 1)
											// KVariable _0 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 2)
											// KVariable _1 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 3)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltfunctionBodiesXgt1 { // `<functionBodies>`(DotVar4)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KSequence, size 1:DotVar4
												// KVariable DotVar4 = v[24]
												v[25] = i.Model.KApplyArg(v[18], 4)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(c, 7)
												// KVariable _11 = v[26]
												v[27] = i.Model.KApplyArg(c, 8)
												// KVariable _12 = v[27]
												// rule #90
												// source: well-formedness.k @124
												// {| rule `<generatedTop>`(`<k>`(`` `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(NAME),ARGS),BLOCKS)=>checkName(NAME)~>checkArgs(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,funType(ints(#sizeNames(ARGS)),`unknown_IELE-WELL-FORMEDNESS`(.KList))))),_0,_1,`<functionBodies>`(``.K=>processFunction(NAME)~>BLOCKS``~>DotVar4),_2)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),isMap(TYPES)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName")))) ensures #token("true","Bool") [UNIQUE_ID(f2f02630a21a3624fd9d2d4e98c07cea5411be9c3e81fc1305f184786b811d02) contentStartColumn(10) contentStartLine(124) org.kframework.attributes.Location(Location(124,10,127,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),#token("true","Bool")),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName"))))
													v[28], i.evalErr = i.evalIsBlocks( // isBlocks(BLOCKS)
														v[8] /*BLOCKS*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isBlocks(BLOCKS),isIeleName(NAME))
													bv[2] = m.IsTrue(v[28])
													if bv[2] {
														v[29], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
															v[6] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[2] = m.IsTrue(v[29])
													}
													// `_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS))
													bv[1] = bv[2]
													if bv[1] {
														v[30], i.evalErr = i.evalIsFunctionParameters( // isFunctionParameters(ARGS)
															v[7] /*ARGS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[30])
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(BLOCKS),isIeleName(NAME)),isFunctionParameters(ARGS)),#token("true","Bool")),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName"))))
													bv[0] = bv[1] /* && */ /* rhs precomputed isMap(TYPES) */ 
													if bv[0] {
														v[31], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(NAME,TYPES)
															v[6] /*NAME*/,
															v[20] /*TYPES*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)),`_=/=K_`(NAME,#token("init","IeleName")))
														bv[3] = !(m.IsTrue(v[31]))
														if bv[3] {
															v[32], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(NAME,#token("init","IeleName"))
																v[6] /*NAME*/,
																/* rhs KToken */ constKTokenSortIeleNameinit,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[3] = m.IsTrue(v[32])
														}
														bv[0] = bv[3]
													}
													if bv[0] {
														// RHS
														return i.stepRHS90(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 97, 471
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashrefundXuXuIELE1 { // `#refund__IELE`(HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 97
					// KVariable HOLE = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #97
									// source: iele.k @1310
									// {| rule `<generatedTop>`(`<k>`(`` `#refund__IELE`(HOLE)=>HOLE~>`#freezer#refund__IELE0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3b8e2c60d0b9230ccd678ffd883bab847088c10c4531cfabe8d3a3a62d5dc967) heat() org.kframework.attributes.Location(Location(1310,27,1310,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) productionID(1815007437) strict()] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[17], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[18]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS97(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 471
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable G = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _14 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _15 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _16 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _17 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												// KVariable _5 = v[26]
												v[27] = i.Model.KApplyArg(v[20], 6)
												// KVariable _6 = v[27]
												v[28] = i.Model.KApplyArg(v[20], 7)
												// KVariable _7 = v[28]
												v[29] = i.Model.KApplyArg(v[20], 8)
												// KVariable _8 = v[29]
												v[30] = i.Model.KApplyArg(v[20], 9)
												// KVariable _9 = v[30]
												v[31] = i.Model.KApplyArg(v[20], 10)
												// KVariable _10 = v[31]
												v[32] = i.Model.KApplyArg(v[20], 11)
												// KVariable _11 = v[32]
												v[33] = i.Model.KApplyArg(v[20], 12)
												if v[33]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
													v[34] = i.Model.KApplyArg(v[33], 0)
													if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable GAVAIL = v[34]
														v[35] = i.Model.KApplyArg(v[20], 13)
														// KVariable _12 = v[35]
														v[36] = i.Model.KApplyArg(v[20], 14)
														// KVariable _13 = v[36]
														v[37] = i.Model.KApplyArg(v[15], 5)
														// KVariable _18 = v[37]
														v[38] = i.Model.KApplyArg(v[15], 6)
														// KVariable _19 = v[38]
														v[39] = i.Model.KApplyArg(v[15], 7)
														// KVariable _20 = v[39]
														v[40] = i.Model.KApplyArg(v[15], 8)
														// KVariable _21 = v[40]
														v[41] = i.Model.KApplyArg(v[15], 9)
														// KVariable _22 = v[41]
														v[42] = i.Model.KApplyArg(v[15], 10)
														// KVariable _23 = v[42]
														v[43] = i.Model.KApplyArg(v[15], 11)
														// KVariable _24 = v[43]
														v[44] = i.Model.KApplyArg(v[15], 12)
														// KVariable _25 = v[44]
														v[45] = i.Model.KApplyArg(v[15], 13)
														// KVariable _26 = v[45]
														v[46] = i.Model.KApplyArg(v[15], 14)
														// KVariable _27 = v[46]
														v[47] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[47]
														// rule #471
														// source: iele.k @1312
														// {| rule `<generatedTop>`(`<k>`(`` `#refund__IELE`(G)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL=>`_+Int_`(GAVAIL,G)),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(G),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(6693449a7b1acacc03dff54ab334af84f999560648c61e378c1f97d9123ae618) contentStartColumn(10) contentStartLine(1312) org.kframework.attributes.Location(Location(1312,10,1312,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES precomputed isInt(G) && isInt(GAVAIL)
															// RHS
															return i.stepRHS471(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 101, 116
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashinitFun3 { // #initFun(LABEL,_380,#token("false","Bool"))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable LABEL = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 101
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _380 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.Model.Equals(v[6], m.BoolFalse) { // #token("false","Bool")
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _32 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _33 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _34 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _35 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _36 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,`<exported>`(FUNCS),_2,_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _18 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _19 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _20 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _21 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,`<exported>`(FUNCS),_2,_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17)
													v[23] = i.Model.KApplyArg(v[22], 0)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,`<funcIds>`(LABELS),_1,`<exported>`(FUNCS),_2,_3)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltfuncIDsXgt1 { // `<funcIds>`(LABELS)
															v[26] = i.Model.KApplyArg(v[25], 0)
															if v[26]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																// KVariable LABELS = v[26]
																v[27] = i.Model.KApplyArg(v[23], 2)
																// KVariable _1 = v[27]
																v[28] = i.Model.KApplyArg(v[23], 3)
																if v[28]&kapplyMatchMask == kapplyMatchLblXltexportedXgt1 { // `<exported>`(FUNCS)
																	v[29] = i.Model.KApplyArg(v[28], 0)
																	if v[29]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																		// KVariable FUNCS = v[29]
																		v[30] = i.Model.KApplyArg(v[23], 4)
																		// KVariable _2 = v[30]
																		v[31] = i.Model.KApplyArg(v[23], 5)
																		// KVariable _3 = v[31]
																		v[32] = i.Model.KApplyArg(v[22], 1)
																		// KVariable _4 = v[32]
																		v[33] = i.Model.KApplyArg(v[22], 2)
																		// KVariable _5 = v[33]
																		v[34] = i.Model.KApplyArg(v[22], 3)
																		// KVariable _6 = v[34]
																		v[35] = i.Model.KApplyArg(v[22], 4)
																		// KVariable _7 = v[35]
																		v[36] = i.Model.KApplyArg(v[22], 5)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[22], 6)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[22], 7)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[22], 8)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[22], 9)
																		// KVariable _12 = v[40]
																		v[41] = i.Model.KApplyArg(v[22], 10)
																		// KVariable _13 = v[41]
																		v[42] = i.Model.KApplyArg(v[22], 11)
																		// KVariable _14 = v[42]
																		v[43] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _15 = v[43]
																		v[44] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _16 = v[44]
																		v[45] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _17 = v[45]
																		v[46] = i.Model.KApplyArg(v[17], 5)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[17], 6)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[17], 7)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[17], 8)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(v[17], 9)
																		// KVariable _26 = v[50]
																		v[51] = i.Model.KApplyArg(v[17], 10)
																		// KVariable _27 = v[51]
																		v[52] = i.Model.KApplyArg(v[17], 11)
																		// KVariable _28 = v[52]
																		v[53] = i.Model.KApplyArg(v[17], 12)
																		// KVariable _29 = v[53]
																		v[54] = i.Model.KApplyArg(v[17], 13)
																		// KVariable _30 = v[54]
																		v[55] = i.Model.KApplyArg(v[17], 14)
																		// KVariable _31 = v[55]
																		v[56] = i.Model.KApplyArg(c, 8)
																		// KVariable _37 = v[56]
																		// rule #101
																		// source: iele.k @1249
																		// {| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,_380,#token("false","Bool"))=>`#exception__IELE-INFRASTRUCTURE`(#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_32,_33,_34,_35,_36,`<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,`<exported>`(FUNCS),_2,_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31),_37) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_380),isIeleName(LABEL)),isSet(FUNCS)),isSet(LABELS)),`_andBool_`(`notBool_`(`Set:in`(LABEL,FUNCS)),`Set:in`(LABEL,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(b158f61d75341cf29b968b18cd8e60ee1b4bd01bfe56af83fd3a78af8627c781) contentStartColumn(10) contentStartLine(1249) org.kframework.attributes.Location(Location(1249,10,1253,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`notBool_`(`Set:in`(LABEL,FUNCS)),`Set:in`(LABEL,LABELS)))
																			v[57], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																				v[4] /*LABEL*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`notBool_`(`Set:in`(LABEL,FUNCS)),`Set:in`(LABEL,LABELS)))
																			bv[0] = /* rhs precomputed isInt(_380) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isSet(FUNCS) */  /* && */ /* rhs precomputed isSet(LABELS) */ 
																			if bv[0] {
																				v[58], i.evalErr = i.evalSetXcolonin( // `Set:in`(LABEL,FUNCS)
																					v[4] /*LABEL*/,
																					v[29] /*FUNCS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`notBool_`(`Set:in`(LABEL,FUNCS)),`Set:in`(LABEL,LABELS))
																				bv[1] = !(m.IsTrue(v[58]))
																				if bv[1] {
																					v[59], i.evalErr = i.evalSetXcolonin( // `Set:in`(LABEL,LABELS)
																						v[4] /*LABEL*/,
																						v[26] /*LABELS*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[1] = m.IsTrue(v[59])
																				}
																				bv[0] = bv[1]
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS101(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 116
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _419 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if v[6]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
							// KVariable _420 = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _32 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _33 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _34 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _35 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _36 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,_2,`<programSize>`(SIZE),_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _18 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _19 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _20 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _21 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,_2,`<programSize>`(SIZE),_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17)
													v[23] = i.Model.KApplyArg(v[22], 0)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,`<funcIds>`(LABELS),_1,_2,`<programSize>`(SIZE),_3)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltfuncIDsXgt1 { // `<funcIds>`(LABELS)
															v[26] = i.Model.KApplyArg(v[25], 0)
															if v[26]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																// KVariable LABELS = v[26]
																v[27] = i.Model.KApplyArg(v[23], 2)
																// KVariable _1 = v[27]
																v[28] = i.Model.KApplyArg(v[23], 3)
																// KVariable _2 = v[28]
																v[29] = i.Model.KApplyArg(v[23], 4)
																if v[29]&kapplyMatchMask == kapplyMatchLblXltprogramSizeXgt1 { // `<programSize>`(SIZE)
																	v[30] = i.Model.KApplyArg(v[29], 0)
																	if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable SIZE = v[30]
																		v[31] = i.Model.KApplyArg(v[23], 5)
																		// KVariable _3 = v[31]
																		v[32] = i.Model.KApplyArg(v[22], 1)
																		// KVariable _4 = v[32]
																		v[33] = i.Model.KApplyArg(v[22], 2)
																		// KVariable _5 = v[33]
																		v[34] = i.Model.KApplyArg(v[22], 3)
																		// KVariable _6 = v[34]
																		v[35] = i.Model.KApplyArg(v[22], 4)
																		// KVariable _7 = v[35]
																		v[36] = i.Model.KApplyArg(v[22], 5)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[22], 6)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[22], 7)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[22], 8)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[22], 9)
																		// KVariable _12 = v[40]
																		v[41] = i.Model.KApplyArg(v[22], 10)
																		// KVariable _13 = v[41]
																		v[42] = i.Model.KApplyArg(v[22], 11)
																		// KVariable _14 = v[42]
																		v[43] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _15 = v[43]
																		v[44] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _16 = v[44]
																		v[45] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _17 = v[45]
																		v[46] = i.Model.KApplyArg(v[17], 5)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[17], 6)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[17], 7)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[17], 8)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(v[17], 9)
																		// KVariable _26 = v[50]
																		v[51] = i.Model.KApplyArg(v[17], 10)
																		// KVariable _27 = v[51]
																		v[52] = i.Model.KApplyArg(v[17], 11)
																		// KVariable _28 = v[52]
																		v[53] = i.Model.KApplyArg(v[17], 12)
																		// KVariable _29 = v[53]
																		v[54] = i.Model.KApplyArg(v[17], 13)
																		// KVariable _30 = v[54]
																		v[55] = i.Model.KApplyArg(v[17], 14)
																		// KVariable _31 = v[55]
																		v[56] = i.Model.KApplyArg(c, 8)
																		// KVariable _37 = v[56]
																		// rule #116
																		// source: iele.k @1255
																		// {| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,_419,_420)=>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(SIZE,#token("0","Int")),#token("3","Int"),#token("1","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_32,_33,_34,_35,_36,`<iele>`(_18,_19,_20,_21,`<callFrame>`(`<program>`(_0,`<funcIds>`(LABELS),_1,_2,`<programSize>`(SIZE),_3),_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17),_22,_23,_24,_25,_26,_27,_28,_29,_30,_31),_37) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(LABEL),isBool(_420)),isInt(_419)),isSet(LABELS)),isInt(SIZE)),`notBool_`(`Set:in`(LABEL,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(4ce6f91f59491b6e00bcd677b374c85cf26c27f549fbdcf1a66b5e1b379a5b4f) contentStartColumn(10) contentStartLine(1255) org.kframework.attributes.Location(Location(1255,10,1258,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(LABEL),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`notBool_`(`Set:in`(LABEL,LABELS)))
																			v[57], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																				v[4] /*LABEL*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(LABEL),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`notBool_`(`Set:in`(LABEL,LABELS)))
																			bv[0] = m.IsTrue(v[57]) /* && */ /* rhs precomputed isBool(_420) */  /* && */ /* rhs precomputed isInt(_419) */  /* && */ /* rhs precomputed isSet(LABELS) */  /* && */ /* rhs precomputed isInt(SIZE) */ 
																			if bv[0] {
																				v[58], i.evalErr = i.evalSetXcolonin( // `Set:in`(LABEL,LABELS)
																					v[4] /*LABEL*/,
																					v[26] /*LABELS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = !(m.IsTrue(v[58]))
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS116(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 115, 268
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mul_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 115
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #115
									// source: iele-syntax.k @150
									// {| rule `<generatedTop>`(`<k>`(`` `_=mul_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=mul_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(dfa9517f48b380467bc16e0c6823f027460a4ba80a43c7fb1d9f69fa503efe93) heat() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS115(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 268
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #268
									// source: iele-syntax.k @150
									// {| rule `<generatedTop>`(`<k>`(`` `_=mul_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=mul_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(736c773ddfc2f964dacd3a5e22a132ccedad8149b684d48853dff41b98399823) heat() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS268(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 117, 400
				if v[2]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `store_,__IELE-COMMON`(HOLE,K1)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 117
					// KVariable HOLE = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #117
									// source: iele-syntax.k @128
									// {| rule `<generatedTop>`(`<k>`(`` `store_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerstore_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8a65351869965338e086fb8af43e6b53e43dfc1b1cac67c08eae0f95914f9000) heat() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2103569237) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isOperand(K1))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS117(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 400
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #400
									// source: iele-syntax.k @128
									// {| rule `<generatedTop>`(`<k>`(`` `store_,__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezerstore_,__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(c5816cc2947a1167444b9f8b5ec6c46dfbf8563930992375cb4c9da36b891434) heat() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2103569237) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K0),`notBool_`(isKResult(HOLE)))
											bv[2] = m.IsTrue(v[20])
											if bv[2] {
												v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[5] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = !(m.IsTrue(v[21]))
											}
											bv[0] = bv[2]
										}
										if bv[0] {
											// RHS
											return i.stepRHS400(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 120, 313
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=or_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 120
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #120
									// source: iele-syntax.k @167
									// {| rule `<generatedTop>`(`<k>`(`` `_=or_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=or_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(743e06bc4be892ad9dc9da48160706284364dc653e34b98f542b412117b7854c) heat() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS120(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 313
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #313
									// source: iele-syntax.k @167
									// {| rule `<generatedTop>`(`<k>`(`` `_=or_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=or_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(65681a06c243b36df843b80fd200e09201b6cd406627546d5d1c231f4fe1c0c2) heat() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS313(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 121
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashdropSubstateXuIELEXhyphenINFRASTRUCTURE0 { // `#dropSubstate_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _14 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _15 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _16 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _17 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _18 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,_2,`<substateStack>`(`_List_`(`ListItem`(_113),DotVar3)),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										// KVariable _2 = v[17]
										v[18] = i.Model.KApplyArg(v[14], 3)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltsubstateStackXgt1 { // `<substateStack>`(`_List_`(`ListItem`(_113),DotVar3))
											v[19] = i.Model.KApplyArg(v[18], 0)
											if i.tempBoolVar, v[20], v[21] = i.Model.ListSplitHeadTail(v[19], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(_113),DotVar3)
												// KVariable _113 = v[20]
												if v[21]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
													// KVariable DotVar3 = v[21]
													v[22] = i.Model.KApplyArg(v[14], 4)
													// KVariable _3 = v[22]
													v[23] = i.Model.KApplyArg(v[14], 5)
													// KVariable _4 = v[23]
													v[24] = i.Model.KApplyArg(v[14], 6)
													// KVariable _5 = v[24]
													v[25] = i.Model.KApplyArg(v[14], 7)
													// KVariable _6 = v[25]
													v[26] = i.Model.KApplyArg(v[14], 8)
													// KVariable _7 = v[26]
													v[27] = i.Model.KApplyArg(v[14], 9)
													// KVariable _8 = v[27]
													v[28] = i.Model.KApplyArg(v[14], 10)
													// KVariable _9 = v[28]
													v[29] = i.Model.KApplyArg(v[14], 11)
													// KVariable _10 = v[29]
													v[30] = i.Model.KApplyArg(v[14], 12)
													// KVariable _11 = v[30]
													v[31] = i.Model.KApplyArg(v[14], 13)
													// KVariable _12 = v[31]
													v[32] = i.Model.KApplyArg(v[14], 14)
													// KVariable _13 = v[32]
													v[33] = i.Model.KApplyArg(c, 8)
													// KVariable _19 = v[33]
													// rule #121
													// source: iele.k @313
													// {| rule `<generatedTop>`(`<k>`(`` `#dropSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,_2,`<substateStack>`(`_List_`(`ListItem`(_113),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires isKItem(_113) ensures #token("true","Bool") [UNIQUE_ID(7a16dc757da5522b17cbf8e573528a584dd393207b506e3390d9dec2d3ecbbab) contentStartColumn(10) contentStartLine(313) org.kframework.attributes.Location(Location(313,10,313,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES precomputed isKItem
														// RHS
														return i.stepRHS121(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 122, 243, 322, 331
				if v[2]&kapplyMatchMask == kapplyMatchLblCselfdestruct3 { // `Cselfdestruct`(SCHED,ISEMPTY,BAL)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 122, 243, 331
					// KVariable SCHED = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 122
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable BAL = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #122
											// source: iele-gas.k @784
											// {| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`notBool_`(ISEMPTY)) ensures #token("true","Bool") [UNIQUE_ID(da5131596cd65ae81f225584cd02dbcb6173af3f768e1961389d9266014617a1) contentStartColumn(10) contentStartLine(784) org.kframework.attributes.Location(Location(784,10,785,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`notBool_`(ISEMPTY))
												v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[4] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`notBool_`(ISEMPTY))
												bv[0] = /* rhs precomputed isBool(ISEMPTY) && isInt(BAL) */ /* && */ m.IsTrue(v[19])
												if bv[0] {
													bv[0] = !(m.IsTrue(v[5] /*ISEMPTY*/))
												}
												if bv[0] {
													// RHS
													return i.stepRHS122(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 243
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable BAL = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #243
											// source: iele-gas.k @780
											// {| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_+Int_`(`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED),`_<_>_IELE-GAS`(`Gnewaccount_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`_andBool_`(`_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_=/=Int__INT`(BAL,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(0ab36ddf8802c5c4e48f574b6df2a59974862ab31796799841c78eff8cbd1c10) contentStartColumn(10) contentStartLine(780) org.kframework.attributes.Location(Location(780,10,781,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`_andBool_`(`_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_=/=Int__INT`(BAL,#token("0","Int"))))
												v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[4] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`_andBool_`(`_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_=/=Int__INT`(BAL,#token("0","Int"))))
												bv[0] = /* rhs precomputed isBool(ISEMPTY) && isInt(BAL) */ /* && */ m.IsTrue(v[19])
												if bv[0] {
													// `_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED))
													bv[2] = m.IsTrue(v[5] /*ISEMPTY*/)
													if bv[2] {
														v[20], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)
															i.Model.NewKApply(m.LblGselfdestructnewaccountXuIELEXhyphenGAS, // as-is Gselfdestructnewaccount_IELE-GAS
															),
															v[4] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[2] = m.IsTrue(v[20])
													}
													// `_andBool_`(`_andBool_`(ISEMPTY,`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_=/=Int__INT`(BAL,#token("0","Int")))
													bv[1] = bv[2]
													if bv[1] {
														v[21], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(BAL,#token("0","Int"))
															v[6] /*BAL*/,
															/* rhs KToken */ m.IntZero,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[21])
													}
													bv[0] = bv[1]
												}
												if bv[0] {
													// RHS
													return i.stepRHS243(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 331
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable BAL = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[17]
											v[18] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[18]
											// rule #331
											// source: iele-gas.k @782
											// {| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(SCHED,ISEMPTY,BAL)=>`_<_>_IELE-GAS`(`Gselfdestruct_IELE-GAS`(.KList),SCHED)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBool(ISEMPTY),isInt(BAL)),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(c7ddf0613e023769eca7e0472e3794d80cfdc72f1e4a5dfebc21d77b6be0f61a) contentStartColumn(10) contentStartLine(782) org.kframework.attributes.Location(Location(782,10,783,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token("0","Int")))))
												v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[4] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),`_andBool_`(ISEMPTY,`_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token("0","Int")))))
												bv[0] = /* rhs precomputed isBool(ISEMPTY) && isInt(BAL) */ /* && */ m.IsTrue(v[19])
												if bv[0] {
													// `_andBool_`(ISEMPTY,`_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token("0","Int"))))
													bv[1] = m.IsTrue(v[5] /*ISEMPTY*/)
													if bv[1] {
														v[20], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)
															i.Model.NewKApply(m.LblGselfdestructnewaccountXuIELEXhyphenGAS, // as-is Gselfdestructnewaccount_IELE-GAS
															),
															v[4] /*SCHED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_orBool__BOOL`(`notBool_`(`_<<_>>_IELE-GAS`(`Gselfdestructnewaccount_IELE-GAS`(.KList),SCHED)),`_==Int_`(BAL,#token("0","Int")))
														bv[2] = !(m.IsTrue(v[20]))
														if !bv[2] {
															v[21], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(BAL,#token("0","Int"))
																v[6] /*BAL*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[2] = m.IsTrue(v[21])
														}
														bv[1] = bv[2]
													}
													bv[0] = bv[1]
												}
												if bv[0] {
													// RHS
													return i.stepRHS331(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 322
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[18]
										// rule #322
										// source: iele-gas.k @778
										// {| rule `<generatedTop>`(`<k>`(`` `Cselfdestruct`(K0,HOLE,K2)=>HOLE~>`#freezerCselfdestruct1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),isInt(K2)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(a36ec97a7469572171f1b504395d9c7ca44ac56d568dc2feeffc4b92f3150438) heat() klabel(Cselfdestruct) org.kframework.attributes.Location(Location(778,24,778,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(2143582219) strict(2)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
											v[19], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isBExp(HOLE),isSchedule(K0))
											bv[1] = m.IsTrue(v[19])
											if bv[1] {
												v[20], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
													v[4] /*K0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[20])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
											bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K2) */ 
											if bv[0] {
												v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[5] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[21]))
											}
											if bv[0] {
												// RHS
												return i.stepRHS322(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 124, 147
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashecpairing5 { // #ecpairing(A,B,_125,_126,_20)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 124
					if v[4]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
						// KVariable A = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if v[5]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
							// KVariable B = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if v[6]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
								// KVariable _125 = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if v[7]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
									// KVariable _126 = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _20 = v[8]
										// KVariable DotVar1 = v[3]
										v[9] = i.Model.KApplyArg(c, 1)
										if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[10] = i.Model.KApplyArg(v[9], 0)
											if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[13] = i.Model.KApplyArg(v[11], 0)
													if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[12]
														v[14] = i.Model.KApplyArg(c, 2)
														// KVariable _14 = v[14]
														v[15] = i.Model.KApplyArg(c, 3)
														// KVariable _15 = v[15]
														v[16] = i.Model.KApplyArg(c, 4)
														// KVariable _16 = v[16]
														v[17] = i.Model.KApplyArg(c, 5)
														// KVariable _17 = v[17]
														v[18] = i.Model.KApplyArg(c, 6)
														// KVariable _18 = v[18]
														v[19] = i.Model.KApplyArg(c, 7)
														if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_127),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
															v[20] = i.Model.KApplyArg(v[19], 0)
															if v[20]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_127)
																v[21] = i.Model.KApplyArg(v[20], 0)
																// KVariable _127 = v[21]
																v[22] = i.Model.KApplyArg(v[19], 1)
																// KVariable _0 = v[22]
																v[23] = i.Model.KApplyArg(v[19], 2)
																// KVariable _1 = v[23]
																v[24] = i.Model.KApplyArg(v[19], 3)
																// KVariable _2 = v[24]
																v[25] = i.Model.KApplyArg(v[19], 4)
																// KVariable _3 = v[25]
																v[26] = i.Model.KApplyArg(v[19], 5)
																// KVariable _4 = v[26]
																v[27] = i.Model.KApplyArg(v[19], 6)
																// KVariable _5 = v[27]
																v[28] = i.Model.KApplyArg(v[19], 7)
																// KVariable _6 = v[28]
																v[29] = i.Model.KApplyArg(v[19], 8)
																// KVariable _7 = v[29]
																v[30] = i.Model.KApplyArg(v[19], 9)
																// KVariable _8 = v[30]
																v[31] = i.Model.KApplyArg(v[19], 10)
																// KVariable _9 = v[31]
																v[32] = i.Model.KApplyArg(v[19], 11)
																// KVariable _10 = v[32]
																v[33] = i.Model.KApplyArg(v[19], 12)
																// KVariable _11 = v[33]
																v[34] = i.Model.KApplyArg(v[19], 13)
																// KVariable _12 = v[34]
																v[35] = i.Model.KApplyArg(v[19], 14)
																// KVariable _13 = v[35]
																v[36] = i.Model.KApplyArg(c, 8)
																// KVariable _19 = v[36]
																// rule #124
																// source: iele.k @1712
																// {| rule `<generatedTop>`(`<k>`(``#ecpairing(A,B,_125,_126,_20)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_127=>operandList(bool2Word(`BN128AtePairing`(A,B)),`.List{"operandList"}`(.KList))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(A),isBytes(_125)),isInts(_127)),isList(B)),isBytes(_126)),`_==Int_`(_20,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(6e42b367853a9d473ce363e4645562d9ce52d68994a638babb30631ecfa00455) contentStartColumn(10) contentStartLine(1712) org.kframework.attributes.Location(Location(1712,10,1713,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_127)),#token("true","Bool")),#token("true","Bool")),`_==Int_`(_20,#token("0","Int")))
																	v[37], i.evalErr = i.evalIsInts( // isInts(_127)
																		v[21] /*_127*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_127)),#token("true","Bool")),#token("true","Bool")),`_==Int_`(_20,#token("0","Int")))
																	bv[0] = /* rhs precomputed isList(A) && isBytes(_125) */ /* && */ m.IsTrue(v[37]) /* && */ /* rhs precomputed isList(B) */  /* && */ /* rhs precomputed isBytes(_126) */ 
																	if bv[0] {
																		v[38], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_20,#token("0","Int"))
																			v[8] /*_20*/,
																			/* rhs KToken */ m.IntZero,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[38])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS124(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 147
					if v[4]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
						// KVariable _128 = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if v[5]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
							// KVariable _129 = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if v[6]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
								// KVariable G1 = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if v[7]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
									// KVariable G2 = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable LEN = v[8]
										// KVariable DotVar1 = v[3]
										v[9] = i.Model.KApplyArg(c, 1)
										if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[10] = i.Model.KApplyArg(v[9], 0)
											if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[13] = i.Model.KApplyArg(v[11], 0)
													if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[12]
														v[14] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[14]
														v[15] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[15]
														v[16] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[16]
														v[17] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[17]
														v[18] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[18]
														v[19] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[19]
														v[20] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[20]
														// rule #147
														// source: iele.k @1710
														// {| rule `<generatedTop>`(`<k>`(``.K=>`#checkPoint_IELE-PRECOMPILED`(.KList)``~>#ecpairing(_128=>`_List_`(`ListItem`(`(_,_)_KRYPTO`(`Bytes2Int`(bytesRange(G1,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G1,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_128),_129=>`_List_`(`ListItem`(`(_x_,_x_)_KRYPTO`(`Bytes2Int`(bytesRange(G2,#token("32","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("0","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("96","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)),`Bytes2Int`(bytesRange(G2,#token("64","Int"),#token("32","Int")),bigEndianBytes(.KList),unsignedBytes(.KList)))),_129),G1=>bytesRange(G1,#token("64","Int"),lengthBytes(G1)),G2=>bytesRange(G2,#token("128","Int"),lengthBytes(G2)),LEN=>`_-Int__INT`(LEN,#token("1","Int")))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isList(_128),isInt(LEN)),isList(_129)),isBytes(G1)),isBytes(G2)),`_>Int__INT`(LEN,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(c1d2053b30aeaed2fab00a51b13438f86fcb71fbaafeb8cc29063a937362b0df) contentStartColumn(10) contentStartLine(1710) org.kframework.attributes.Location(Location(1710,10,1711,26)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(#token("true","Bool"),`_>Int__INT`(LEN,#token("0","Int")))
															v[21], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(LEN,#token("0","Int"))
																v[8] /*LEN*/,
																/* rhs KToken */ m.IntZero,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															if /* rhs precomputed isList(_128) && isInt(LEN) && isList(_129) && isBytes(G1) && isBytes(G2) */ /* && */ m.IsTrue(v[21]) {
																// RHS
																return i.stepRHS147(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 125
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashinitAccountXuXuIELEXhyphenINFRASTRUCTURE1 { // `#initAccount__IELE-INFRASTRUCTURE`(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _4 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _5 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _6 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _7 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _8 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _9 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
												v[18] = i.Model.KApplyArg(v[17], 0)
												if v[18]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
													// KVariable ACCTS = v[18]
													v[19] = i.Model.KApplyArg(v[16], 1)
													// KVariable _0 = v[19]
													v[20] = i.Model.KApplyArg(v[16], 2)
													// KVariable _1 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 3)
													// KVariable _2 = v[21]
													v[22] = i.Model.KApplyArg(v[16], 4)
													// KVariable _3 = v[22]
													// rule #125
													// source: iele.k @453
													// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#initAccount__IELE-INFRASTRUCTURE`(ACCT)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(isInt(ACCT),isSet(ACCTS)),`notBool_`(`Set:in`(ACCT,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(9cdabf7b3db30c807b9115a90891c63ba399568b669c7de7cb17148e112ce84c) contentStartColumn(10) contentStartLine(453) org.kframework.attributes.Location(Location(453,10,455,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`Set:in`(ACCT,ACCTS)))
														v[23], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
															v[4] /*ACCT*/,
															v[18] /*ACCTS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if /* rhs precomputed isInt(ACCT) && isSet(ACCTS) */ /* && */ !(m.IsTrue(v[23])) {
															// RHS
															return i.stepRHS125(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 140, 192
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=bswap_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 140
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #140
									// source: iele-syntax.k @164
									// {| rule `<generatedTop>`(`<k>`(`` `_=bswap_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=bswap_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(1d3d91add15c94fe384051005d6bf4c98687db9e938e8b8c55710de644138f26) heat() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS140(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 192
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #192
									// source: iele-syntax.k @164
									// {| rule `<generatedTop>`(`<k>`(`` `_=bswap_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=bswap_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(787bd002050e50462d6039c2d21ff13a4def5d9f9219ef0126e04b9178254ebf) heat() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS192(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 145
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckName1 { // checkName(NAME)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					// KVariable _0 = v[5]
					v[6] = i.Model.KApplyArg(c, 2)
					// KVariable _1 = v[6]
					v[7] = i.Model.KApplyArg(c, 3)
					// KVariable _2 = v[7]
					v[8] = i.Model.KApplyArg(c, 4)
					// KVariable _3 = v[8]
					v[9] = i.Model.KApplyArg(c, 5)
					// KVariable _4 = v[9]
					v[10] = i.Model.KApplyArg(c, 6)
					// KVariable _5 = v[10]
					v[11] = i.Model.KApplyArg(c, 7)
					// KVariable _6 = v[11]
					v[12] = i.Model.KApplyArg(c, 8)
					// KVariable _7 = v[12]
					// rule #145
					// source: well-formedness.k @341
					// {| rule `<generatedTop>`(`<k>`(``checkName(NAME)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isIeleName(NAME),`_orBool__BOOL`(`_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token("5","Int")),`_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int")),#token("\"iele.\"","String")))) ensures #token("true","Bool") [UNIQUE_ID(1ee9659d76451ce1745c736483c0defc40be210ab49b39d57c1888934a6607c3) contentStartColumn(10) contentStartLine(341) org.kframework.attributes.Location(Location(341,10,342,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
					if !matched {
						// REQUIRES `_andBool_`(isIeleName(NAME),`_orBool__BOOL`(`_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token("5","Int")),`_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int")),#token("\"iele.\"","String"))))
						v[13], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
							v[4] /*NAME*/,
							config, -1)
						if i.evalErr != nil {
							return m.NoResult, i.evalErr
						}
						// `_andBool_`(isIeleName(NAME),`_orBool__BOOL`(`_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token("5","Int")),`_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int")),#token("\"iele.\"","String"))))
						bv[0] = m.IsTrue(v[13])
						if bv[0] {
							v[16], i.evalErr = i.evalIeleName2String( // `IeleName2String`(NAME)
								v[4] /*NAME*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							v[15], i.evalErr = i.evalLengthString( // lengthString(`IeleName2String`(NAME))
								v[16],
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							v[14], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token("5","Int"))
								v[15],
								/* rhs KToken */ constInt5,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_orBool__BOOL`(`_<Int__INT`(lengthString(`IeleName2String`(NAME)),#token("5","Int")),`_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int")),#token("\"iele.\"","String")))
							bv[1] = m.IsTrue(v[14])
							if !bv[1] {
								v[19], i.evalErr = i.evalIeleName2String( // `IeleName2String`(NAME)
									v[4] /*NAME*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								v[18], i.evalErr = i.evalSubstrString( // substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int"))
									v[19],
									/* rhs KToken */ m.IntZero,
									/* rhs KToken */ constInt5,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								v[17], i.evalErr = i.evalXuXeqXslashXeqStringXuXuSTRING( // `_=/=String__STRING`(substrString(`IeleName2String`(NAME),#token("0","Int"),#token("5","Int")),#token("\"iele.\"","String"))
									v[18],
									/* rhs KToken */ constStringXquoteieleXdotXquote,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[17])
							}
							bv[0] = bv[1]
						}
						if bv[0] {
							// RHS
							return i.stepRHS145(v, bv, config)
						}
					}
				}
				// rules: 146, 259
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashecmul2 { // #ecmul(P,S)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable P = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 146
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable S = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #146
										// source: iele.k @1694
										// {| rule `<generatedTop>`(`<k>`(``#ecmul(P,S)=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isInt(S),isG1Point(P)),`notBool_`(isValidPoint(P))) ensures #token("true","Bool") [UNIQUE_ID(6bc28688c712db9c4cd5f4c507e58e9dc9d061ba4a2210a03e1937c97be294db) contentStartColumn(10) contentStartLine(1694) org.kframework.attributes.Location(Location(1694,10,1695,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isG1Point(P)),`notBool_`(isValidPoint(P)))
											v[18], i.evalErr = i.evalIsG1Point( // isG1Point(P)
												v[4] /*P*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(`_andBool_`(#token("true","Bool"),isG1Point(P)),`notBool_`(isValidPoint(P)))
											bv[0] = /* rhs precomputed isInt(S) */ /* && */ m.IsTrue(v[18])
											if bv[0] {
												v[19], i.evalErr = i.evalIsValidPoint( // isValidPoint(P)
													v[4] /*P*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = !(m.IsTrue(v[19]))
											}
											if bv[0] {
												// RHS
												return i.stepRHS146(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 259
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable S = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _14 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _15 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _16 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _17 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _18 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_132),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_132)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _132 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 1)
												// KVariable _0 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _1 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _2 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												// KVariable _3 = v[22]
												v[23] = i.Model.KApplyArg(v[16], 5)
												// KVariable _4 = v[23]
												v[24] = i.Model.KApplyArg(v[16], 6)
												// KVariable _5 = v[24]
												v[25] = i.Model.KApplyArg(v[16], 7)
												// KVariable _6 = v[25]
												v[26] = i.Model.KApplyArg(v[16], 8)
												// KVariable _7 = v[26]
												v[27] = i.Model.KApplyArg(v[16], 9)
												// KVariable _8 = v[27]
												v[28] = i.Model.KApplyArg(v[16], 10)
												// KVariable _9 = v[28]
												v[29] = i.Model.KApplyArg(v[16], 11)
												// KVariable _10 = v[29]
												v[30] = i.Model.KApplyArg(v[16], 12)
												// KVariable _11 = v[30]
												v[31] = i.Model.KApplyArg(v[16], 13)
												// KVariable _12 = v[31]
												v[32] = i.Model.KApplyArg(v[16], 14)
												// KVariable _13 = v[32]
												v[33] = i.Model.KApplyArg(c, 8)
												// KVariable _19 = v[33]
												// rule #259
												// source: iele.k @1696
												// {| rule `<generatedTop>`(`<k>`(``#ecmul(P,S)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_132=>#point(`BN128Mul`(P,S))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(S),isInts(_132)),isG1Point(P)),isValidPoint(P)) ensures #token("true","Bool") [UNIQUE_ID(18cc7a6a1d24018007e06f7db2650febe7aba0304655afd930bf7bd8ff963757) contentStartColumn(10) contentStartLine(1696) org.kframework.attributes.Location(Location(1696,10,1697,31)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_132)),isG1Point(P)),isValidPoint(P))
													v[34], i.evalErr = i.evalIsInts( // isInts(_132)
														v[18] /*_132*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_132)),isG1Point(P))
													bv[1] = /* rhs precomputed isInt(S) */ /* && */ m.IsTrue(v[34])
													if bv[1] {
														v[35], i.evalErr = i.evalIsG1Point( // isG1Point(P)
															v[4] /*P*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[35])
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_132)),isG1Point(P)),isValidPoint(P))
													bv[0] = bv[1]
													if bv[0] {
														v[36], i.evalErr = i.evalIsValidPoint( // isValidPoint(P)
															v[4] /*P*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[36])
													}
													if bv[0] {
														// RHS
														return i.stepRHS259(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 150
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashtrimAccountsXuIELEXhyphenNODE0 { // `#trimAccounts_IELE-NODE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _4 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _5 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _6 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _7 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _8 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									// KVariable _9 = v[14]
									v[15] = i.Model.KApplyArg(c, 8)
									if v[15]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
										v[16] = i.Model.KApplyArg(v[15], 0)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
												// KVariable ACCTS = v[17]
												v[18] = i.Model.KApplyArg(v[15], 1)
												// KVariable _0 = v[18]
												v[19] = i.Model.KApplyArg(v[15], 2)
												// KVariable _1 = v[19]
												v[20] = i.Model.KApplyArg(v[15], 3)
												// KVariable _2 = v[20]
												v[21] = i.Model.KApplyArg(v[15], 4)
												// KVariable _3 = v[21]
												// rule #150
												// source: iele-node.k @117
												// {| rule `<generatedTop>`(`<k>`(`` `#trimAccounts_IELE-NODE`(.KList)=>#trimAccounts(`Set2List`(ACCTS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires isSet(ACCTS) ensures #token("true","Bool") [UNIQUE_ID(456012372b44ea255b180f95ab39bb6ca9374d89c1ff2468c366c00a6788980d) contentStartColumn(10) contentStartLine(117) org.kframework.attributes.Location(Location(117,10,118,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES precomputed isSet(ACCTS)
													// RHS
													return i.stepRHS150(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 153
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmkCallXuXuXuXuXuXuXuXuXuIELE8 { // `#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable CODE = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable FUNC = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GLIMIT = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[9]
									v[10] = i.Model.KApplyArg(v[2], 6)
									// KVariable ARGS = v[10]
									v[11] = i.Model.KApplyArg(v[2], 7)
									if v[11]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
										// KVariable STATIC = v[11]
										// KVariable DotVar1 = v[3]
										v[12] = i.Model.KApplyArg(c, 1)
										if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[13] = i.Model.KApplyArg(v[12], 0)
											if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[16] = i.Model.KApplyArg(v[14], 0)
													if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[15]
														v[17] = i.Model.KApplyArg(c, 2)
														// KVariable _27 = v[17]
														v[18] = i.Model.KApplyArg(c, 3)
														// KVariable _28 = v[18]
														v[19] = i.Model.KApplyArg(c, 4)
														// KVariable _29 = v[19]
														v[20] = i.Model.KApplyArg(c, 5)
														// KVariable _30 = v[20]
														v[21] = i.Model.KApplyArg(c, 6)
														// KVariable _31 = v[21]
														v[22] = i.Model.KApplyArg(c, 7)
														if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5),`<callDepth>`(CD),_6,`<id>`(_352),`<caller>`(_354),`<callData>`(_350),`<callValue>`(_351),_7,_8,_9,_10,_11,`<gas>`(_353),_12,`<static>`(OLDSTATIC)),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
															v[23] = i.Model.KApplyArg(v[22], 0)
															// KVariable _13 = v[23]
															v[24] = i.Model.KApplyArg(v[22], 1)
															// KVariable _14 = v[24]
															v[25] = i.Model.KApplyArg(v[22], 2)
															// KVariable _15 = v[25]
															v[26] = i.Model.KApplyArg(v[22], 3)
															// KVariable _16 = v[26]
															v[27] = i.Model.KApplyArg(v[22], 4)
															if v[27]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5),`<callDepth>`(CD),_6,`<id>`(_352),`<caller>`(_354),`<callData>`(_350),`<callValue>`(_351),_7,_8,_9,_10,_11,`<gas>`(_353),_12,`<static>`(OLDSTATIC))
																v[28] = i.Model.KApplyArg(v[27], 0)
																if v[28]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,_2,_3,_4,_5)
																	v[29] = i.Model.KApplyArg(v[28], 0)
																	// KVariable _0 = v[29]
																	v[30] = i.Model.KApplyArg(v[28], 1)
																	// KVariable _1 = v[30]
																	v[31] = i.Model.KApplyArg(v[28], 2)
																	// KVariable _2 = v[31]
																	v[32] = i.Model.KApplyArg(v[28], 3)
																	// KVariable _3 = v[32]
																	v[33] = i.Model.KApplyArg(v[28], 4)
																	// KVariable _4 = v[33]
																	v[34] = i.Model.KApplyArg(v[28], 5)
																	// KVariable _5 = v[34]
																	v[35] = i.Model.KApplyArg(v[27], 1)
																	if v[35]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
																		v[36] = i.Model.KApplyArg(v[35], 0)
																		if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable CD = v[36]
																			v[37] = i.Model.KApplyArg(v[27], 2)
																			// KVariable _6 = v[37]
																			v[38] = i.Model.KApplyArg(v[27], 3)
																			if v[38]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(_352)
																				v[39] = i.Model.KApplyArg(v[38], 0)
																				if i.tempTypeVar = v[39] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable _352 = v[39]
																					v[40] = i.Model.KApplyArg(v[27], 4)
																					if v[40]&kapplyMatchMask == kapplyMatchLblXltcallerXgt1 { // `<caller>`(_354)
																						v[41] = i.Model.KApplyArg(v[40], 0)
																						if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																							// KVariable _354 = v[41]
																							v[42] = i.Model.KApplyArg(v[27], 5)
																							if v[42]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(_350)
																								v[43] = i.Model.KApplyArg(v[42], 0)
																								// KVariable _350 = v[43]
																								v[44] = i.Model.KApplyArg(v[27], 6)
																								if v[44]&kapplyMatchMask == kapplyMatchLblXltcallValueXgt1 { // `<callValue>`(_351)
																									v[45] = i.Model.KApplyArg(v[44], 0)
																									if i.tempTypeVar = v[45] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																										// KVariable _351 = v[45]
																										v[46] = i.Model.KApplyArg(v[27], 7)
																										// KVariable _7 = v[46]
																										v[47] = i.Model.KApplyArg(v[27], 8)
																										// KVariable _8 = v[47]
																										v[48] = i.Model.KApplyArg(v[27], 9)
																										// KVariable _9 = v[48]
																										v[49] = i.Model.KApplyArg(v[27], 10)
																										// KVariable _10 = v[49]
																										v[50] = i.Model.KApplyArg(v[27], 11)
																										// KVariable _11 = v[50]
																										v[51] = i.Model.KApplyArg(v[27], 12)
																										if v[51]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(_353)
																											v[52] = i.Model.KApplyArg(v[51], 0)
																											if i.tempTypeVar = v[52] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												// KVariable _353 = v[52]
																												v[53] = i.Model.KApplyArg(v[27], 13)
																												// KVariable _12 = v[53]
																												v[54] = i.Model.KApplyArg(v[27], 14)
																												if v[54]&kapplyMatchMask == kapplyMatchLblXltstaticXgt1 { // `<static>`(OLDSTATIC)
																													v[55] = i.Model.KApplyArg(v[54], 0)
																													if v[55]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
																														// KVariable OLDSTATIC = v[55]
																														v[56] = i.Model.KApplyArg(v[22], 5)
																														// KVariable _17 = v[56]
																														v[57] = i.Model.KApplyArg(v[22], 6)
																														// KVariable _18 = v[57]
																														v[58] = i.Model.KApplyArg(v[22], 7)
																														// KVariable _19 = v[58]
																														v[59] = i.Model.KApplyArg(v[22], 8)
																														// KVariable _20 = v[59]
																														v[60] = i.Model.KApplyArg(v[22], 9)
																														// KVariable _21 = v[60]
																														v[61] = i.Model.KApplyArg(v[22], 10)
																														// KVariable _22 = v[61]
																														v[62] = i.Model.KApplyArg(v[22], 11)
																														// KVariable _23 = v[62]
																														v[63] = i.Model.KApplyArg(v[22], 12)
																														// KVariable _24 = v[63]
																														v[64] = i.Model.KApplyArg(v[22], 13)
																														// KVariable _25 = v[64]
																														v[65] = i.Model.KApplyArg(v[22], 14)
																														// KVariable _26 = v[65]
																														v[66] = i.Model.KApplyArg(c, 8)
																														// KVariable _32 = v[66]
																														// rule #153
																														// source: iele.k @1219
																														// {| rule `<generatedTop>`(`<k>`(`` `#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>#initVM(ARGS)~>#initFun(FUNC,#sizeRegs(ARGS),#token("false","Bool"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5)=>CODE,`<callDepth>`(CD=>`_+Int_`(CD,#token("1","Int"))),_6,`<id>`(_352=>ACCTTO),`<caller>`(_354=>ACCTFROM),`<callData>`(_350=>ARGS),`<callValue>`(_351=>VALUE),_7,_8,_9,_10,_11,`<gas>`(_353=>GLIMIT),_12,`<static>`(OLDSTATIC=>`_orBool__BOOL`(OLDSTATIC,STATIC))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_354),isInt(ACCTTO)),isInt(VALUE)),isInt(_353)),isInt(CD)),isBool(OLDSTATIC)),isBool(STATIC)),isIeleName(FUNC)),isProgramCell(CODE)),isInt(_352)),isInt(ACCTFROM)),isInts(ARGS)),isInts(_350)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isInt(GLIMIT)),isInt(_351)) ensures #token("true","Bool") [UNIQUE_ID(1817e8f2e038965bf015dc0680dec928b568f245b6cee283c26aa24c4dedeb39) contentStartColumn(10) contentStartLine(1219) org.kframework.attributes.Location(Location(1219,10,1230,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																														if !matched {
																															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_350)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),#token("true","Bool")),#token("true","Bool"))
																															v[67], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																																v[7] /*FUNC*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															// `_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE))
																															bv[3] = /* rhs precomputed isInt(_354) && isInt(ACCTTO) && isInt(VALUE) && isInt(_353) && isInt(CD) && isBool(OLDSTATIC) && isBool(STATIC) */ /* && */ m.IsTrue(v[67])
																															if bv[3] {
																																v[68], i.evalErr = i.evalIsProgramCell( // isProgramCell(CODE)
																																	v[6] /*CODE*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[3] = m.IsTrue(v[68])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS))
																															bv[2] = bv[3] /* && */ /* rhs precomputed isInt(_352) */  /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																															if bv[2] {
																																v[69], i.evalErr = i.evalIsInts( // isInts(ARGS)
																																	v[10] /*ARGS*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[2] = m.IsTrue(v[69])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_350))
																															bv[1] = bv[2]
																															if bv[1] {
																																v[70], i.evalErr = i.evalIsInts( // isInts(_350)
																																	v[43] /*_350*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[1] = m.IsTrue(v[70])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_350)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)))
																															bv[0] = bv[1]
																															if bv[0] {
																																v[71], i.evalErr = i.evalIsFuncIDsCell( // isFuncIdsCell(_1)
																																	v[30] /*_1*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																// `_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4))
																																bv[8] = /* rhs KToken */ /* && */ m.IsTrue(v[71])
																																if bv[8] {
																																	v[72], i.evalErr = i.evalIsProgramSizeCell( // isProgramSizeCell(_4)
																																		v[33] /*_4*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[8] = m.IsTrue(v[72])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3))
																																bv[7] = bv[8]
																																if bv[7] {
																																	v[73], i.evalErr = i.evalIsExportedCell( // isExportedCell(_3)
																																		v[32] /*_3*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[7] = m.IsTrue(v[73])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0))
																																bv[6] = bv[7]
																																if bv[6] {
																																	v[74], i.evalErr = i.evalIsFunctionsCell( // isFunctionsCell(_0)
																																		v[29] /*_0*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[6] = m.IsTrue(v[74])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2))
																																bv[5] = bv[6]
																																if bv[5] {
																																	v[75], i.evalErr = i.evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
																																		v[31] /*_2*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[5] = m.IsTrue(v[75])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))
																																bv[4] = bv[5]
																																if bv[4] {
																																	v[76], i.evalErr = i.evalIsContractCodeCell( // isContractCodeCell(_5)
																																		v[34] /*_5*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[4] = m.IsTrue(v[76])
																																}
																																bv[0] = bv[4]
																															}
																															if bv[0] /* && */ /* rhs precomputed isInt(GLIMIT) */  /* && */ /* rhs precomputed isInt(_351) */  {
																																// RHS
																																return i.stepRHS153(v, bv, config)
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 164
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashdeleteAccounts1 { // #deleteAccounts(`.List`(.KList))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.Model.IsEmptyList(v[4], m.SortList, m.LblXuListXu) { // empty list `.List`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #164
										// source: iele.k @701
										// {| rule `<generatedTop>`(`<k>`(``#deleteAccounts(`.List`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(62e1f1bbaffd1776a90c061d5de0348420a62ffc0adc61b0addc485941134fc6) contentStartColumn(10) contentStartLine(701) org.kframework.attributes.Location(Location(701,10,701,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS164(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 165, 181, 187
				if v[2]&kapplyMatchMask == kapplyMatchLblCcallgas7 { // `Ccallgas`(SCHED,ISEMPTY,GCAP,GAVAIL,VALUE,RETS,ARGS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 165, 181
					// KVariable SCHED = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 165
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable GCAP = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GAVAIL = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable RETS = v[9]
										v[10] = i.Model.KApplyArg(v[2], 6)
										if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable ARGS = v[10]
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #165
															// source: iele-gas.k @758
															// {| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(SCHED,ISEMPTY,GCAP,GAVAIL,VALUE,RETS,ARGS)=>`_+Int_`(`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)),`_<_>_IELE-GAS`(`Gcallstipend_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)),`_=/=K_`(VALUE,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(db424cc5acc2a598cd4af4a7dc4e3bc52915882c13701b2b04f9ff44271ec41b) contentStartColumn(10) contentStartLine(758) org.kframework.attributes.Location(Location(758,10,758,197)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_=/=K_`(VALUE,#token("0","Int")))
																v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[4] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_=/=K_`(VALUE,#token("0","Int")))
																bv[0] = /* rhs precomputed isInt(GCAP) && isBool(ISEMPTY) && isInt(VALUE) */ /* && */ m.IsTrue(v[23]) /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  /* && */ /* rhs precomputed isInt(ARGS) */ 
																if bv[0] {
																	v[24], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(VALUE,#token("0","Int"))
																		v[8] /*VALUE*/,
																		/* rhs KToken */ m.IntZero,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[24])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS165(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 181
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable GCAP = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GAVAIL = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable _24 = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable RETS = v[9]
										v[10] = i.Model.KApplyArg(v[2], 6)
										if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable ARGS = v[10]
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #181
															// source: iele-gas.k @757
															// {| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(SCHED,ISEMPTY,GCAP,GAVAIL,_24,RETS,ARGS)=>`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,#token("0","Int"),RETS,ARGS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)),`_==Int_`(_24,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(16af43421d6861fc241cdf7583b1b691c9fe7107ecc88ca28382713a8d9ed6f8) contentStartColumn(10) contentStartLine(757) org.kframework.attributes.Location(Location(757,10,757,147)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_==Int_`(_24,#token("0","Int")))
																v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[4] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_==Int_`(_24,#token("0","Int")))
																bv[0] = /* rhs precomputed isInt(GCAP) && isBool(ISEMPTY) */ /* && */ m.IsTrue(v[23]) /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  /* && */ /* rhs precomputed isInt(ARGS) */ 
																if bv[0] {
																	v[24], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_24,#token("0","Int"))
																		v[8] /*_24*/,
																		/* rhs KToken */ m.IntZero,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[24])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS181(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 187
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 3)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K3 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable K5 = v[9]
									v[10] = i.Model.KApplyArg(v[2], 6)
									if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable K6 = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[18]
														v[19] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[19]
														v[20] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[20]
														v[21] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[21]
														v[22] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[22]
														// rule #187
														// source: iele-gas.k @748
														// {| rule `<generatedTop>`(`<k>`(`` `Ccallgas`(K0,HOLE,K2,K3,K4,K5,K6)=>HOLE~>`#freezerCcallgas1_`(K0,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8ba8fbb02711b19a19516621e39262f893dab56ae2cf72ea14843a1618f1a982) heat() klabel(Ccallgas) org.kframework.attributes.Location(Location(748,24,748,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(129498568) strict(2)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
															v[23], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
																v[5] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0))
															bv[1] = /* rhs precomputed isInt(K5) && isInt(K6) */ /* && */ m.IsTrue(v[23])
															if bv[1] {
																v[24], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
																	v[4] /*K0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[24])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
															bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K2) */ 
															if bv[0] {
																v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																	v[5] /*HOLE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[25]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS187(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 167, 237
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckIntArgs2 { // checkIntArgs(`.List{"localNameList"}`(.KList),_35)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 167
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelocalNameListXquoteXrbracket0 { // `.List{"localNameList"}`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _35 = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[6]
							v[7] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[7]
							v[8] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[8]
							v[9] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[9]
							v[10] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[10]
							v[11] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[11]
							v[12] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[12]
							v[13] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[13]
							// rule #167
							// source: well-formedness.k @158
							// {| rule `<generatedTop>`(`<k>`(``checkIntArgs(`.List{"localNameList"}`(.KList),_35)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isInt(_35) ensures #token("true","Bool") [UNIQUE_ID(d038d4e1a5aa62ef3489c3235485c4ece44c7370fc50a017727ff4510421106b) contentStartColumn(10) contentStartLine(158) org.kframework.attributes.Location(Location(158,10,158,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES precomputed isInt(_35)
								// RHS
								return i.stepRHS167(v, bv, config)
							}
						}
					}
					// rule: 237
					if v[4]&kapplyMatchMask == kapplyMatchLblLocalNameList2 { // localNameList(`%__IELE-COMMON`(N),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(N)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable N = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							// KVariable ARGS = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable I = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								// KVariable _0 = v[9]
								v[10] = i.Model.KApplyArg(c, 2)
								// KVariable _1 = v[10]
								v[11] = i.Model.KApplyArg(c, 3)
								// KVariable _2 = v[11]
								v[12] = i.Model.KApplyArg(c, 4)
								// KVariable _3 = v[12]
								v[13] = i.Model.KApplyArg(c, 5)
								// KVariable _4 = v[13]
								v[14] = i.Model.KApplyArg(c, 6)
								// KVariable _5 = v[14]
								v[15] = i.Model.KApplyArg(c, 7)
								// KVariable _6 = v[15]
								v[16] = i.Model.KApplyArg(c, 8)
								// KVariable _7 = v[16]
								// rule #237
								// source: well-formedness.k @156
								// {| rule `<generatedTop>`(`<k>`(``checkIntArgs(localNameList(`%__IELE-COMMON`(N),ARGS),I)=>checkIntArgs(ARGS,`_+Int_`(I,#token("1","Int")))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isIeleName(N)),isLocalNames(ARGS)),`_==Int_`(`String2Int`(`IeleName2String`(N)),I)) ensures #token("true","Bool") [UNIQUE_ID(9e773fc9cdd4f6a110af5b26d7cf0b8ef51133d9bbb0eef021641dff20d10cc7) contentStartColumn(10) contentStartLine(156) org.kframework.attributes.Location(Location(156,10,157,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
								if !matched {
									// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(N)),isLocalNames(ARGS)),`_==Int_`(`String2Int`(`IeleName2String`(N)),I))
									v[17], i.evalErr = i.evalIsIeleName( // isIeleName(N)
										v[6] /*N*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(N)),isLocalNames(ARGS))
									bv[1] = /* rhs precomputed isInt(I) */ /* && */ m.IsTrue(v[17])
									if bv[1] {
										v[18], i.evalErr = i.evalIsLocalNames( // isLocalNames(ARGS)
											v[7] /*ARGS*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[1] = m.IsTrue(v[18])
									}
									// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(N)),isLocalNames(ARGS)),`_==Int_`(`String2Int`(`IeleName2String`(N)),I))
									bv[0] = bv[1]
									if bv[0] {
										v[21], i.evalErr = i.evalIeleName2String( // `IeleName2String`(N)
											v[6] /*N*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										v[20], i.evalErr = i.evalString2Int( // `String2Int`(`IeleName2String`(N))
											v[21],
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										v[19], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(`String2Int`(`IeleName2String`(N)),I)
											v[20],
											v[8] /*I*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[19])
									}
									if bv[0] {
										// RHS
										return i.stepRHS237(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rules: 182, 528
				if v[2]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket0 { // `.List{"labeledBlockList"}`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					// rule: 182
					// KVariable _8 = v[4]
					v[5] = i.Model.KApplyArg(c, 2)
					// KVariable _9 = v[5]
					v[6] = i.Model.KApplyArg(c, 3)
					// KVariable _10 = v[6]
					v[7] = i.Model.KApplyArg(c, 4)
					// KVariable _11 = v[7]
					v[8] = i.Model.KApplyArg(c, 5)
					// KVariable _12 = v[8]
					v[9] = i.Model.KApplyArg(c, 6)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(INSTRS))))
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
							v[11] = i.Model.KApplyArg(v[10], 0)
							if i.Model.Equals(v[11], m.BoolTrue) { // #token("true","Bool")
								v[12] = i.Model.KApplyArg(v[9], 1)
								// KVariable _6 = v[12]
								v[13] = i.Model.KApplyArg(v[9], 2)
								// KVariable _7 = v[13]
								v[14] = i.Model.KApplyArg(v[9], 3)
								if v[14]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(INSTRS)))
									v[15] = i.Model.KApplyArg(v[14], 0)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(v[14], 1)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(v[14], 2)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(v[14], 3)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(v[14], 4)
									if v[19]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(_0,_1,`<currentInstructions>`(INSTRS))
										v[20] = i.Model.KApplyArg(v[19], 0)
										// KVariable _0 = v[20]
										v[21] = i.Model.KApplyArg(v[19], 1)
										// KVariable _1 = v[21]
										v[22] = i.Model.KApplyArg(v[19], 2)
										if v[22]&kapplyMatchMask == kapplyMatchLblXltcurrentInstructionsXgt1 { // `<currentInstructions>`(INSTRS)
											v[23] = i.Model.KApplyArg(v[22], 0)
											// KVariable INSTRS = v[23]
											v[24] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[24]
											v[25] = i.Model.KApplyArg(c, 8)
											// KVariable _14 = v[25]
											// rule #182
											// source: well-formedness.k @170
											// {| rule `<generatedTop>`(`<k>`(`` `.List{"labeledBlockList"}`(.KList)=>INSTRS``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_6,_7,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,_1,`<currentInstructions>`(INSTRS)))),_13,_14) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd571a5446da21e3d3e4ebe97df052cad79be2420d9b2c210479d2b6e2ff28c0) contentStartColumn(10) contentStartLine(170) org.kframework.attributes.Location(Location(170,10,172,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// RHS
												return i.stepRHS182(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 528
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _3 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _4 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _5 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _6 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									if v[13]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2)
										v[14] = i.Model.KApplyArg(v[13], 0)
										if v[14]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
											v[15] = i.Model.KApplyArg(v[14], 0)
											if i.Model.Equals(v[15], m.BoolFalse) { // #token("false","Bool")
												v[16] = i.Model.KApplyArg(v[13], 1)
												// KVariable _0 = v[16]
												v[17] = i.Model.KApplyArg(v[13], 2)
												// KVariable _1 = v[17]
												v[18] = i.Model.KApplyArg(v[13], 3)
												// KVariable _2 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _7 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _8 = v[20]
												// rule #528
												// source: iele.k @573
												// {| rule `<generatedTop>`(`<k>`(`` `.List{"labeledBlockList"}`(.KList)=>`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2),_7,_8) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(64cfa54bec23351cd6e882f6e420e3b2e161c46d8c7ebe6305987c69ecf079e2) contentStartColumn(10) contentStartLine(573) org.kframework.attributes.Location(Location(573,10,574,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// RHS
													return i.stepRHS528(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 194
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpopSubstateXuIELEXhyphenINFRASTRUCTURE0 { // `#popSubstate_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _19 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _20 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _21 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _22 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _23 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_6,_7,_8,`<substateStack>`(`_List_`(`ListItem`(`<substate>`(_3,_4,_5)),DotVar3)),_9,`<substate>`(_0,_1,_2),_10,_11,_12,_13,_14,_15,_16,_17,_18)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _6 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _7 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										// KVariable _8 = v[17]
										v[18] = i.Model.KApplyArg(v[14], 3)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltsubstateStackXgt1 { // `<substateStack>`(`_List_`(`ListItem`(`<substate>`(_3,_4,_5)),DotVar3))
											v[19] = i.Model.KApplyArg(v[18], 0)
											if i.tempBoolVar, v[20], v[21] = i.Model.ListSplitHeadTail(v[19], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(`<substate>`(_3,_4,_5)),DotVar3)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_3,_4,_5)
													v[22] = i.Model.KApplyArg(v[20], 0)
													// KVariable _3 = v[22]
													v[23] = i.Model.KApplyArg(v[20], 1)
													// KVariable _4 = v[23]
													v[24] = i.Model.KApplyArg(v[20], 2)
													// KVariable _5 = v[24]
													if v[21]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
														// KVariable DotVar3 = v[21]
														v[25] = i.Model.KApplyArg(v[14], 4)
														// KVariable _9 = v[25]
														v[26] = i.Model.KApplyArg(v[14], 5)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_0,_1,_2)
															v[27] = i.Model.KApplyArg(v[26], 0)
															// KVariable _0 = v[27]
															v[28] = i.Model.KApplyArg(v[26], 1)
															// KVariable _1 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 2)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[14], 6)
															// KVariable _10 = v[30]
															v[31] = i.Model.KApplyArg(v[14], 7)
															// KVariable _11 = v[31]
															v[32] = i.Model.KApplyArg(v[14], 8)
															// KVariable _12 = v[32]
															v[33] = i.Model.KApplyArg(v[14], 9)
															// KVariable _13 = v[33]
															v[34] = i.Model.KApplyArg(v[14], 10)
															// KVariable _14 = v[34]
															v[35] = i.Model.KApplyArg(v[14], 11)
															// KVariable _15 = v[35]
															v[36] = i.Model.KApplyArg(v[14], 12)
															// KVariable _16 = v[36]
															v[37] = i.Model.KApplyArg(v[14], 13)
															// KVariable _17 = v[37]
															v[38] = i.Model.KApplyArg(v[14], 14)
															// KVariable _18 = v[38]
															v[39] = i.Model.KApplyArg(c, 8)
															// KVariable _24 = v[39]
															// rule #194
															// source: iele.k @307
															// {| rule `<generatedTop>`(`<k>`(`` `#popSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_19,_20,_21,_22,_23,`<iele>`(_6,_7,_8,`<substateStack>`(`_List_`(`ListItem`(`<substate>`(_3,_4,_5)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_9,`<substate>`(_0=>_3,_1=>_4,_2=>_5),_10,_11,_12,_13,_14,_15,_16,_17,_18),_24) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_3)),isRefundCell(_5)),isLogDataCell(_4)),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1))) ensures #token("true","Bool") [UNIQUE_ID(9f00544db66dd3bcb8c79ef277b8afa31398aea3d781973d0c5d246e255b4398) contentStartColumn(10) contentStartLine(307) org.kframework.attributes.Location(Location(307,10,309,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_3)),isRefundCell(_5)),isLogDataCell(_4)),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1)))
																v[40], i.evalErr = i.evalIsSelfDestructCell( // isSelfDestructCell(_3)
																	v[22] /*_3*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_3)),isRefundCell(_5))
																bv[2] = /* rhs KToken */ /* && */ m.IsTrue(v[40])
																if bv[2] {
																	v[41], i.evalErr = i.evalIsRefundCell( // isRefundCell(_5)
																		v[24] /*_5*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[41])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_3)),isRefundCell(_5)),isLogDataCell(_4))
																bv[1] = bv[2]
																if bv[1] {
																	v[42], i.evalErr = i.evalIsLogDataCell( // isLogDataCell(_4)
																		v[23] /*_4*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[42])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_3)),isRefundCell(_5)),isLogDataCell(_4)),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1)))
																bv[0] = bv[1]
																if bv[0] {
																	v[43], i.evalErr = i.evalIsSelfDestructCell( // isSelfDestructCell(_0)
																		v[27] /*_0*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2))
																	bv[4] = /* rhs KToken */ /* && */ m.IsTrue(v[43])
																	if bv[4] {
																		v[44], i.evalErr = i.evalIsRefundCell( // isRefundCell(_2)
																			v[29] /*_2*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[4] = m.IsTrue(v[44])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1))
																	bv[3] = bv[4]
																	if bv[3] {
																		v[45], i.evalErr = i.evalIsLogDataCell( // isLogDataCell(_1)
																			v[28] /*_1*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[3] = m.IsTrue(v[45])
																	}
																	bv[0] = bv[3]
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS194(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 197
				if v[2]&kapplyMatchMask == kapplyMatchLblRevertXuXuIELEXhyphenCOMMON1 { // `revert__IELE-COMMON`(HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable HOLE = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #197
									// source: iele-syntax.k @200
									// {| rule `<generatedTop>`(`<k>`(`` `revert__IELE-COMMON`(HOLE)=>HOLE~>`#freezerrevert__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(bff9415f47818d6da1de63dec5ad3a5ace07a89de87efd8c5ccb3bf74c8b362c) heat() hybrid() org.kframework.attributes.Location(Location(200,25,200,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(949684105) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[17], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[18]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS197(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 199
				if v[2]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable HOLE = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #199
									// source: iele-syntax.k @198
									// {| rule `<generatedTop>`(`<k>`(`` `ret__IELE-COMMON`(HOLE)=>HOLE~>`#freezerret__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(5492444fb324452d7a90e2fa57caf3c8374c2b074e0dcf40771bade94c153df0) heat() hybrid() org.kframework.attributes.Location(Location(198,25,198,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2030411960) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[17], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[18]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS199(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 210
				if v[2]&kapplyMatchMask == kapplyMatchLblInstructionList2 { // instructionList(INSTR,INSTRS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable INSTR = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable INSTRS = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _3 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _4 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _5 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _6 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _7 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
							v[13] = i.Model.KApplyArg(v[12], 0)
							if i.Model.Equals(v[13], m.BoolTrue) { // #token("true","Bool")
								v[14] = i.Model.KApplyArg(v[11], 1)
								// KVariable _0 = v[14]
								v[15] = i.Model.KApplyArg(v[11], 2)
								// KVariable _1 = v[15]
								v[16] = i.Model.KApplyArg(v[11], 3)
								// KVariable _2 = v[16]
								v[17] = i.Model.KApplyArg(c, 7)
								// KVariable _8 = v[17]
								v[18] = i.Model.KApplyArg(c, 8)
								// KVariable _9 = v[18]
								// rule #210
								// source: well-formedness.k @180
								// {| rule `<generatedTop>`(`<k>`(``instructionList(INSTR,INSTRS)=>`check_IELE-WELL-FORMEDNESS`(.KList)~>INSTR~>INSTRS``~>DotVar1),_3,_4,_5,_6,_7,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2),_8,_9) requires `_andBool_`(isInstructions(INSTRS),isInstruction(INSTR)) ensures #token("true","Bool") [UNIQUE_ID(94c9b8b1fc9f9c4459e75fb280834f4ffdfaca602a2d540325cf4c6bead0bc2a) contentStartColumn(10) contentStartLine(180) org.kframework.attributes.Location(Location(180,10,181,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isInstructions(INSTRS),isInstruction(INSTR))
									v[19], i.evalErr = i.evalIsInstructions( // isInstructions(INSTRS)
										v[5] /*INSTRS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isInstructions(INSTRS),isInstruction(INSTR))
									bv[0] = m.IsTrue(v[19])
									if bv[0] {
										v[20], i.evalErr = i.evalIsInstruction( // isInstruction(INSTR)
											v[4] /*INSTR*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[20])
									}
									if bv[0] {
										// RHS
										return i.stepRHS210(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 212
				if v[2]&kapplyMatchMask == kapplyMatchLblGlobalDefinition2 { // globalDefinition(`@__IELE-COMMON`(NAME),_27)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable NAME = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable _27 = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _7 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _8 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _9 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _10 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _11 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						if v[12]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_4,_5,_6,`<currentContract>`(`<types>`(TYPES),_0,_1,_2,_3))
							v[13] = i.Model.KApplyArg(v[12], 0)
							// KVariable _4 = v[13]
							v[14] = i.Model.KApplyArg(v[12], 1)
							// KVariable _5 = v[14]
							v[15] = i.Model.KApplyArg(v[12], 2)
							// KVariable _6 = v[15]
							v[16] = i.Model.KApplyArg(v[12], 3)
							if v[16]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(TYPES),_0,_1,_2,_3)
								v[17] = i.Model.KApplyArg(v[16], 0)
								if v[17]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(TYPES)
									v[18] = i.Model.KApplyArg(v[17], 0)
									if v[18]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
										// KVariable TYPES = v[18]
										v[19] = i.Model.KApplyArg(v[16], 1)
										// KVariable _0 = v[19]
										v[20] = i.Model.KApplyArg(v[16], 2)
										// KVariable _1 = v[20]
										v[21] = i.Model.KApplyArg(v[16], 3)
										// KVariable _2 = v[21]
										v[22] = i.Model.KApplyArg(v[16], 4)
										// KVariable _3 = v[22]
										v[23] = i.Model.KApplyArg(c, 7)
										// KVariable _12 = v[23]
										v[24] = i.Model.KApplyArg(c, 8)
										// KVariable _13 = v[24]
										// rule #212
										// source: well-formedness.k @110
										// {| rule `<generatedTop>`(`<k>`(``globalDefinition(`@__IELE-COMMON`(NAME),_27)=>checkName(NAME)``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(`<types>`(TYPES=>`_Map_`(TYPES,`_|->_`(NAME,`int_IELE-WELL-FORMEDNESS`(.KList)))),_0,_1,_2,_3)),_12,_13) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isIntConstant(_27)),isMap(TYPES)),`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES))) ensures #token("true","Bool") [UNIQUE_ID(fdc936410477fe1a2c3603b721f435128c7c8645766c8e1490b00539e9a7d83b) contentStartColumn(10) contentStartLine(110) org.kframework.attributes.Location(Location(110,10,112,43)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isIntConstant(_27)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)))
											v[25], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
												v[5] /*NAME*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isIeleName(NAME),isIntConstant(_27))
											bv[1] = m.IsTrue(v[25])
											if bv[1] {
												v[26], i.evalErr = i.evalIsIntConstant( // isIntConstant(_27)
													v[6] /*_27*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[26])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isIntConstant(_27)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(NAME,TYPES)))
											bv[0] = bv[1] /* && */ /* rhs precomputed isMap(TYPES) */ 
											if bv[0] {
												v[27], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(NAME,TYPES)
													v[5] /*NAME*/,
													v[18] /*TYPES*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = !(m.IsTrue(v[27]))
											}
											if bv[0] {
												// RHS
												return i.stepRHS212(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 213, 336
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// rule: 213
					// KVariable K3 = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable HOLE = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #213
									// source: iele-syntax.k @217
									// {| rule `<generatedTop>`(`<k>`(`` `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)=>HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(isKResult(K3),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e04d53c2d1403984f82301edba128caadfa0a6d280204dec15a765d3b4b970df) heat() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1822525972) seqstrict(4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(isKResult(K3),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[8] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsIeleName( // isIeleName(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(isKResult(K3),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K3),`notBool_`(isKResult(HOLE)))
											bv[5] = m.IsTrue(v[26])
											if bv[5] {
												v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[8] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = !(m.IsTrue(v[27]))
											}
											bv[0] = bv[5]
										}
										if bv[0] {
											// RHS
											return i.stepRHS213(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 336
					// KVariable HOLE = v[7]
					v[8] = i.Model.KApplyArg(v[2], 4)
					// KVariable K4 = v[8]
					// KVariable DotVar1 = v[3]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #336
									// source: iele-syntax.k @217
									// {| rule `<generatedTop>`(`<k>`(`` `_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)=>HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(04e2b25577b0cf0898ac281e37aaa3144068fb275aed8565fa480a599f873ea5) heat() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1822525972) seqstrict(4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(HOLE))
										bv[4] = m.IsTrue(v[21])
										if bv[4] {
											v[22], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[8] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsIeleName( // isIeleName(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[26]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS336(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 218, 273
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashecadd2 { // #ecadd(P1,P2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable P1 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable P2 = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// rule: 218
									// KVariable _14 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _15 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _16 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _17 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _18 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_118),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
										v[17] = i.Model.KApplyArg(v[16], 0)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_118)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _118 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 1)
											// KVariable _0 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 2)
											// KVariable _1 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 3)
											// KVariable _2 = v[21]
											v[22] = i.Model.KApplyArg(v[16], 4)
											// KVariable _3 = v[22]
											v[23] = i.Model.KApplyArg(v[16], 5)
											// KVariable _4 = v[23]
											v[24] = i.Model.KApplyArg(v[16], 6)
											// KVariable _5 = v[24]
											v[25] = i.Model.KApplyArg(v[16], 7)
											// KVariable _6 = v[25]
											v[26] = i.Model.KApplyArg(v[16], 8)
											// KVariable _7 = v[26]
											v[27] = i.Model.KApplyArg(v[16], 9)
											// KVariable _8 = v[27]
											v[28] = i.Model.KApplyArg(v[16], 10)
											// KVariable _9 = v[28]
											v[29] = i.Model.KApplyArg(v[16], 11)
											// KVariable _10 = v[29]
											v[30] = i.Model.KApplyArg(v[16], 12)
											// KVariable _11 = v[30]
											v[31] = i.Model.KApplyArg(v[16], 13)
											// KVariable _12 = v[31]
											v[32] = i.Model.KApplyArg(v[16], 14)
											// KVariable _13 = v[32]
											v[33] = i.Model.KApplyArg(c, 8)
											// KVariable _19 = v[33]
											// rule #218
											// source: iele.k @1684
											// {| rule `<generatedTop>`(`<k>`(``#ecadd(P1,P2)=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_118=>#point(`BN128Add`(P1,P2))),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isInts(_118),isG1Point(P1)),isG1Point(P2)),`_andBool_`(isValidPoint(P1),isValidPoint(P2))) ensures #token("true","Bool") [UNIQUE_ID(9eea85c44b6ced1bb155de3814a8a92b8da4fe819e6aa9783ae0179e6a250f5f) contentStartColumn(10) contentStartLine(1684) org.kframework.attributes.Location(Location(1684,10,1685,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isInts(_118),isG1Point(P1)),isG1Point(P2)),`_andBool_`(isValidPoint(P1),isValidPoint(P2)))
												v[34], i.evalErr = i.evalIsInts( // isInts(_118)
													v[18] /*_118*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isInts(_118),isG1Point(P1))
												bv[2] = m.IsTrue(v[34])
												if bv[2] {
													v[35], i.evalErr = i.evalIsG1Point( // isG1Point(P1)
														v[4] /*P1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[2] = m.IsTrue(v[35])
												}
												// `_andBool_`(`_andBool_`(isInts(_118),isG1Point(P1)),isG1Point(P2))
												bv[1] = bv[2]
												if bv[1] {
													v[36], i.evalErr = i.evalIsG1Point( // isG1Point(P2)
														v[5] /*P2*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[1] = m.IsTrue(v[36])
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isInts(_118),isG1Point(P1)),isG1Point(P2)),`_andBool_`(isValidPoint(P1),isValidPoint(P2)))
												bv[0] = bv[1]
												if bv[0] {
													v[37], i.evalErr = i.evalIsValidPoint( // isValidPoint(P1)
														v[4] /*P1*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(isValidPoint(P1),isValidPoint(P2))
													bv[3] = m.IsTrue(v[37])
													if bv[3] {
														v[38], i.evalErr = i.evalIsValidPoint( // isValidPoint(P2)
															v[5] /*P2*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[3] = m.IsTrue(v[38])
													}
													bv[0] = bv[3]
												}
												if bv[0] {
													// RHS
													return i.stepRHS218(v, bv, config)
												}
											}
										}
									}
									// rule: 273
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #273
									// source: iele.k @1682
									// {| rule `<generatedTop>`(`<k>`(``#ecadd(P1,P2)=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isG1Point(P1),isG1Point(P2)),`_orBool__BOOL`(`notBool_`(isValidPoint(P1)),`notBool_`(isValidPoint(P2)))) ensures #token("true","Bool") [UNIQUE_ID(f0ec00ba8f74a3c949c966f04af733ad0152e5660084ad112f5de9ebd89be936) contentStartColumn(10) contentStartLine(1682) org.kframework.attributes.Location(Location(1682,10,1683,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isG1Point(P1),isG1Point(P2)),`_orBool__BOOL`(`notBool_`(isValidPoint(P1)),`notBool_`(isValidPoint(P2))))
										v[18], i.evalErr = i.evalIsG1Point( // isG1Point(P1)
											v[4] /*P1*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isG1Point(P1),isG1Point(P2))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsG1Point( // isG1Point(P2)
												v[5] /*P2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isG1Point(P1),isG1Point(P2)),`_orBool__BOOL`(`notBool_`(isValidPoint(P1)),`notBool_`(isValidPoint(P2))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsValidPoint( // isValidPoint(P1)
												v[4] /*P1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_orBool__BOOL`(`notBool_`(isValidPoint(P1)),`notBool_`(isValidPoint(P2)))
											bv[2] = !(m.IsTrue(v[20]))
											if !bv[2] {
												v[21], i.evalErr = i.evalIsValidPoint( // isValidPoint(P2)
													v[5] /*P2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[2] = !(m.IsTrue(v[21]))
											}
											bv[0] = bv[2]
										}
										if bv[0] {
											// RHS
											return i.stepRHS273(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 227, 250, 366, 463, 478
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashnegativeCallXquesXlsqbXuXrsqbXuIELE1 { // `#negativeCall?[_]_IELE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_326,_327,_328,_329,`%__IELE-COMMON`(REG1),`%__IELE-COMMON`(REG2)))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 227
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(_326,_327,_328,_329,`%__IELE-COMMON`(REG1),`%__IELE-COMMON`(REG2))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _326 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _327 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _328 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _329 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						if v[9]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG1)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable REG1 = v[10]
								v[11] = i.Model.KApplyArg(v[4], 5)
								if v[11]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG2)
									v[12] = i.Model.KApplyArg(v[11], 0)
									if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable REG2 = v[12]
										// KVariable DotVar1 = v[3]
										v[13] = i.Model.KApplyArg(c, 1)
										if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[14] = i.Model.KApplyArg(v[13], 0)
											if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[17] = i.Model.KApplyArg(v[15], 0)
													if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[16]
														v[18] = i.Model.KApplyArg(c, 2)
														// KVariable _28 = v[18]
														v[19] = i.Model.KApplyArg(c, 3)
														// KVariable _29 = v[19]
														v[20] = i.Model.KApplyArg(c, 4)
														// KVariable _30 = v[20]
														v[21] = i.Model.KApplyArg(c, 5)
														// KVariable _31 = v[21]
														v[22] = i.Model.KApplyArg(c, 6)
														// KVariable _32 = v[22]
														v[23] = i.Model.KApplyArg(c, 7)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
															v[24] = i.Model.KApplyArg(v[23], 0)
															// KVariable _14 = v[24]
															v[25] = i.Model.KApplyArg(v[23], 1)
															// KVariable _15 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 2)
															// KVariable _16 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 3)
															// KVariable _17 = v[27]
															v[28] = i.Model.KApplyArg(v[23], 4)
															if v[28]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
																v[29] = i.Model.KApplyArg(v[28], 0)
																// KVariable _0 = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																// KVariable _1 = v[30]
																v[31] = i.Model.KApplyArg(v[28], 2)
																// KVariable _2 = v[31]
																v[32] = i.Model.KApplyArg(v[28], 3)
																// KVariable _3 = v[32]
																v[33] = i.Model.KApplyArg(v[28], 4)
																// KVariable _4 = v[33]
																v[34] = i.Model.KApplyArg(v[28], 5)
																// KVariable _5 = v[34]
																v[35] = i.Model.KApplyArg(v[28], 6)
																// KVariable _6 = v[35]
																v[36] = i.Model.KApplyArg(v[28], 7)
																if v[36]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
																	v[37] = i.Model.KApplyArg(v[36], 0)
																	if v[37]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																		// KVariable REGS = v[37]
																		v[38] = i.Model.KApplyArg(v[28], 8)
																		// KVariable _7 = v[38]
																		v[39] = i.Model.KApplyArg(v[28], 9)
																		// KVariable _8 = v[39]
																		v[40] = i.Model.KApplyArg(v[28], 10)
																		// KVariable _9 = v[40]
																		v[41] = i.Model.KApplyArg(v[28], 11)
																		// KVariable _10 = v[41]
																		v[42] = i.Model.KApplyArg(v[28], 12)
																		// KVariable _11 = v[42]
																		v[43] = i.Model.KApplyArg(v[28], 13)
																		// KVariable _12 = v[43]
																		v[44] = i.Model.KApplyArg(v[28], 14)
																		// KVariable _13 = v[44]
																		v[45] = i.Model.KApplyArg(v[23], 5)
																		// KVariable _18 = v[45]
																		v[46] = i.Model.KApplyArg(v[23], 6)
																		// KVariable _19 = v[46]
																		v[47] = i.Model.KApplyArg(v[23], 7)
																		// KVariable _20 = v[47]
																		v[48] = i.Model.KApplyArg(v[23], 8)
																		// KVariable _21 = v[48]
																		v[49] = i.Model.KApplyArg(v[23], 9)
																		// KVariable _22 = v[49]
																		v[50] = i.Model.KApplyArg(v[23], 10)
																		// KVariable _23 = v[50]
																		v[51] = i.Model.KApplyArg(v[23], 11)
																		// KVariable _24 = v[51]
																		v[52] = i.Model.KApplyArg(v[23], 12)
																		// KVariable _25 = v[52]
																		v[53] = i.Model.KApplyArg(v[23], 13)
																		// KVariable _26 = v[53]
																		v[54] = i.Model.KApplyArg(v[23], 14)
																		// KVariable _27 = v[54]
																		v[55] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[55]
																		// rule #227
																		// source: iele.k @645
																		// {| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_=call_at_(_)send_,gaslimit__IELE-COMMON`(_326,_327,_328,_329,`%__IELE-COMMON`(REG1),`%__IELE-COMMON`(REG2)))=>`#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG1)),#token("0","Int")),`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG2)),#token("0","Int"))),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isOperand(_327)),isInt(REG2)),isOperand(_328)),isOperands(_329)),isInt(REG1)),isLValues(_326)) ensures #token("true","Bool") [UNIQUE_ID(6bac27a2a4ede568502be5caf2afe2abfa8b2b75ba857b26f5dc7a5fc35ec783) contentStartColumn(10) contentStartLine(645) org.kframework.attributes.Location(Location(645,10,645,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_327)),#token("true","Bool")),isOperand(_328)),isOperands(_329)),#token("true","Bool")),isLValues(_326))
																			v[56], i.evalErr = i.evalIsOperand( // isOperand(_327)
																				v[6] /*_327*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_327)),#token("true","Bool")),isOperand(_328))
																			bv[2] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[56]) /* && */ /* rhs precomputed isInt(REG2) */ 
																			if bv[2] {
																				v[57], i.evalErr = i.evalIsOperand( // isOperand(_328)
																					v[7] /*_328*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[2] = m.IsTrue(v[57])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_327)),#token("true","Bool")),isOperand(_328)),isOperands(_329))
																			bv[1] = bv[2]
																			if bv[1] {
																				v[58], i.evalErr = i.evalIsOperands( // isOperands(_329)
																					v[8] /*_329*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[58])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_327)),#token("true","Bool")),isOperand(_328)),isOperands(_329)),#token("true","Bool")),isLValues(_326))
																			bv[0] = bv[1] /* && */ /* rhs precomputed isInt(REG1) */ 
																			if bv[0] {
																				v[59], i.evalErr = i.evalIsLValues( // isLValues(_326)
																					v[5] /*_326*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[59])
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS227(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 250
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(_435,_436,_437,_438,`%__IELE-COMMON`(REG))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _435 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _436 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _437 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _438 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						if v[9]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable REG = v[10]
								// KVariable DotVar1 = v[3]
								v[11] = i.Model.KApplyArg(c, 1)
								if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[12] = i.Model.KApplyArg(v[11], 0)
									if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[15] = i.Model.KApplyArg(v[13], 0)
											if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[14]
												v[16] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[16]
												v[17] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[17]
												v[18] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[18]
												v[19] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[19]
												v[20] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[20]
												v[21] = i.Model.KApplyArg(c, 7)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _14 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _15 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _16 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _17 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[27] = i.Model.KApplyArg(v[26], 0)
														// KVariable _0 = v[27]
														v[28] = i.Model.KApplyArg(v[26], 1)
														// KVariable _1 = v[28]
														v[29] = i.Model.KApplyArg(v[26], 2)
														// KVariable _2 = v[29]
														v[30] = i.Model.KApplyArg(v[26], 3)
														// KVariable _3 = v[30]
														v[31] = i.Model.KApplyArg(v[26], 4)
														// KVariable _4 = v[31]
														v[32] = i.Model.KApplyArg(v[26], 5)
														// KVariable _5 = v[32]
														v[33] = i.Model.KApplyArg(v[26], 6)
														// KVariable _6 = v[33]
														v[34] = i.Model.KApplyArg(v[26], 7)
														if v[34]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[35] = i.Model.KApplyArg(v[34], 0)
															if v[35]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[35]
																v[36] = i.Model.KApplyArg(v[26], 8)
																// KVariable _7 = v[36]
																v[37] = i.Model.KApplyArg(v[26], 9)
																// KVariable _8 = v[37]
																v[38] = i.Model.KApplyArg(v[26], 10)
																// KVariable _9 = v[38]
																v[39] = i.Model.KApplyArg(v[26], 11)
																// KVariable _10 = v[39]
																v[40] = i.Model.KApplyArg(v[26], 12)
																// KVariable _11 = v[40]
																v[41] = i.Model.KApplyArg(v[26], 13)
																// KVariable _12 = v[41]
																v[42] = i.Model.KApplyArg(v[26], 14)
																// KVariable _13 = v[42]
																v[43] = i.Model.KApplyArg(v[21], 5)
																// KVariable _18 = v[43]
																v[44] = i.Model.KApplyArg(v[21], 6)
																// KVariable _19 = v[44]
																v[45] = i.Model.KApplyArg(v[21], 7)
																// KVariable _20 = v[45]
																v[46] = i.Model.KApplyArg(v[21], 8)
																// KVariable _21 = v[46]
																v[47] = i.Model.KApplyArg(v[21], 9)
																// KVariable _22 = v[47]
																v[48] = i.Model.KApplyArg(v[21], 10)
																// KVariable _23 = v[48]
																v[49] = i.Model.KApplyArg(v[21], 11)
																// KVariable _24 = v[49]
																v[50] = i.Model.KApplyArg(v[21], 12)
																// KVariable _25 = v[50]
																v[51] = i.Model.KApplyArg(v[21], 13)
																// KVariable _26 = v[51]
																v[52] = i.Model.KApplyArg(v[21], 14)
																// KVariable _27 = v[52]
																v[53] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[53]
																// rule #250
																// source: iele.k @648
																// {| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_,_=create_(_)send__IELE-COMMON`(_435,_436,_437,_438,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isLValue(_435)),isOperands(_438)),isIeleName(_437)),isLValue(_436)) ensures #token("true","Bool") [UNIQUE_ID(87c36d8fb01c3ec68d5149e8b45170e8f9d76edc3cbda50ba8dc1d35137b98f0) contentStartColumn(10) contentStartLine(648) org.kframework.attributes.Location(Location(648,10,648,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_435)),isOperands(_438)),isIeleName(_437)),isLValue(_436))
																	v[54], i.evalErr = i.evalIsLValue( // isLValue(_435)
																		v[5] /*_435*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_435)),isOperands(_438))
																	bv[2] = /* rhs precomputed isInt(REG) && isArray(REGS) */ /* && */ m.IsTrue(v[54])
																	if bv[2] {
																		v[55], i.evalErr = i.evalIsOperands( // isOperands(_438)
																			v[8] /*_438*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[55])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_435)),isOperands(_438)),isIeleName(_437))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[56], i.evalErr = i.evalIsIeleName( // isIeleName(_437)
																			v[7] /*_437*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[56])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(_435)),isOperands(_438)),isIeleName(_437)),isLValue(_436))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[57], i.evalErr = i.evalIsLValue( // isLValue(_436)
																			v[6] /*_436*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[57])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS250(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 366
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(_381,_382,_383,_384,`%__IELE-COMMON`(REG))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _381 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _382 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _383 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _384 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						if v[9]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable REG = v[10]
								// KVariable DotVar1 = v[3]
								v[11] = i.Model.KApplyArg(c, 1)
								if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[12] = i.Model.KApplyArg(v[11], 0)
									if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[15] = i.Model.KApplyArg(v[13], 0)
											if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[14]
												v[16] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[16]
												v[17] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[17]
												v[18] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[18]
												v[19] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[19]
												v[20] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[20]
												v[21] = i.Model.KApplyArg(c, 7)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _14 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _15 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _16 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _17 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[27] = i.Model.KApplyArg(v[26], 0)
														// KVariable _0 = v[27]
														v[28] = i.Model.KApplyArg(v[26], 1)
														// KVariable _1 = v[28]
														v[29] = i.Model.KApplyArg(v[26], 2)
														// KVariable _2 = v[29]
														v[30] = i.Model.KApplyArg(v[26], 3)
														// KVariable _3 = v[30]
														v[31] = i.Model.KApplyArg(v[26], 4)
														// KVariable _4 = v[31]
														v[32] = i.Model.KApplyArg(v[26], 5)
														// KVariable _5 = v[32]
														v[33] = i.Model.KApplyArg(v[26], 6)
														// KVariable _6 = v[33]
														v[34] = i.Model.KApplyArg(v[26], 7)
														if v[34]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[35] = i.Model.KApplyArg(v[34], 0)
															if v[35]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[35]
																v[36] = i.Model.KApplyArg(v[26], 8)
																// KVariable _7 = v[36]
																v[37] = i.Model.KApplyArg(v[26], 9)
																// KVariable _8 = v[37]
																v[38] = i.Model.KApplyArg(v[26], 10)
																// KVariable _9 = v[38]
																v[39] = i.Model.KApplyArg(v[26], 11)
																// KVariable _10 = v[39]
																v[40] = i.Model.KApplyArg(v[26], 12)
																// KVariable _11 = v[40]
																v[41] = i.Model.KApplyArg(v[26], 13)
																// KVariable _12 = v[41]
																v[42] = i.Model.KApplyArg(v[26], 14)
																// KVariable _13 = v[42]
																v[43] = i.Model.KApplyArg(v[21], 5)
																// KVariable _18 = v[43]
																v[44] = i.Model.KApplyArg(v[21], 6)
																// KVariable _19 = v[44]
																v[45] = i.Model.KApplyArg(v[21], 7)
																// KVariable _20 = v[45]
																v[46] = i.Model.KApplyArg(v[21], 8)
																// KVariable _21 = v[46]
																v[47] = i.Model.KApplyArg(v[21], 9)
																// KVariable _22 = v[47]
																v[48] = i.Model.KApplyArg(v[21], 10)
																// KVariable _23 = v[48]
																v[49] = i.Model.KApplyArg(v[21], 11)
																// KVariable _24 = v[49]
																v[50] = i.Model.KApplyArg(v[21], 12)
																// KVariable _25 = v[50]
																v[51] = i.Model.KApplyArg(v[21], 13)
																// KVariable _26 = v[51]
																v[52] = i.Model.KApplyArg(v[21], 14)
																// KVariable _27 = v[52]
																v[53] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[53]
																// rule #366
																// source: iele.k @649
																// {| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_,_=copycreate_(_)send__IELE-COMMON`(_381,_382,_383,_384,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isOperand(_383)),isArray(REGS)),isOperands(_384)),isLValue(_382)),isLValue(_381)) ensures #token("true","Bool") [UNIQUE_ID(04097218c590035c77c00215721a532030013024e35c8c1ff655e65b816eb605) contentStartColumn(10) contentStartLine(649) org.kframework.attributes.Location(Location(649,10,649,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_383)),#token("true","Bool")),isOperands(_384)),isLValue(_382)),isLValue(_381))
																	v[54], i.evalErr = i.evalIsOperand( // isOperand(_383)
																		v[7] /*_383*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_383)),#token("true","Bool")),isOperands(_384))
																	bv[2] = /* rhs precomputed isInt(REG) */ /* && */ m.IsTrue(v[54]) /* && */ /* rhs precomputed isArray(REGS) */ 
																	if bv[2] {
																		v[55], i.evalErr = i.evalIsOperands( // isOperands(_384)
																			v[8] /*_384*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[55])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_383)),#token("true","Bool")),isOperands(_384)),isLValue(_382))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[56], i.evalErr = i.evalIsLValue( // isLValue(_382)
																			v[6] /*_382*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[56])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_383)),#token("true","Bool")),isOperands(_384)),isLValue(_382)),isLValue(_381))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[57], i.evalErr = i.evalIsLValue( // isLValue(_381)
																			v[5] /*_381*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[57])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS366(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 463
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(_421,_422,_423,_424,`%__IELE-COMMON`(REG))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _421 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _422 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _423 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable _424 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						if v[9]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
							v[10] = i.Model.KApplyArg(v[9], 0)
							if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable REG = v[10]
								// KVariable DotVar1 = v[3]
								v[11] = i.Model.KApplyArg(c, 1)
								if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[12] = i.Model.KApplyArg(v[11], 0)
									if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[15] = i.Model.KApplyArg(v[13], 0)
											if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[14]
												v[16] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[16]
												v[17] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[17]
												v[18] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[18]
												v[19] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[19]
												v[20] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[20]
												v[21] = i.Model.KApplyArg(c, 7)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _14 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _15 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _16 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _17 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[27] = i.Model.KApplyArg(v[26], 0)
														// KVariable _0 = v[27]
														v[28] = i.Model.KApplyArg(v[26], 1)
														// KVariable _1 = v[28]
														v[29] = i.Model.KApplyArg(v[26], 2)
														// KVariable _2 = v[29]
														v[30] = i.Model.KApplyArg(v[26], 3)
														// KVariable _3 = v[30]
														v[31] = i.Model.KApplyArg(v[26], 4)
														// KVariable _4 = v[31]
														v[32] = i.Model.KApplyArg(v[26], 5)
														// KVariable _5 = v[32]
														v[33] = i.Model.KApplyArg(v[26], 6)
														// KVariable _6 = v[33]
														v[34] = i.Model.KApplyArg(v[26], 7)
														if v[34]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[35] = i.Model.KApplyArg(v[34], 0)
															if v[35]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[35]
																v[36] = i.Model.KApplyArg(v[26], 8)
																// KVariable _7 = v[36]
																v[37] = i.Model.KApplyArg(v[26], 9)
																// KVariable _8 = v[37]
																v[38] = i.Model.KApplyArg(v[26], 10)
																// KVariable _9 = v[38]
																v[39] = i.Model.KApplyArg(v[26], 11)
																// KVariable _10 = v[39]
																v[40] = i.Model.KApplyArg(v[26], 12)
																// KVariable _11 = v[40]
																v[41] = i.Model.KApplyArg(v[26], 13)
																// KVariable _12 = v[41]
																v[42] = i.Model.KApplyArg(v[26], 14)
																// KVariable _13 = v[42]
																v[43] = i.Model.KApplyArg(v[21], 5)
																// KVariable _18 = v[43]
																v[44] = i.Model.KApplyArg(v[21], 6)
																// KVariable _19 = v[44]
																v[45] = i.Model.KApplyArg(v[21], 7)
																// KVariable _20 = v[45]
																v[46] = i.Model.KApplyArg(v[21], 8)
																// KVariable _21 = v[46]
																v[47] = i.Model.KApplyArg(v[21], 9)
																// KVariable _22 = v[47]
																v[48] = i.Model.KApplyArg(v[21], 10)
																// KVariable _23 = v[48]
																v[49] = i.Model.KApplyArg(v[21], 11)
																// KVariable _24 = v[49]
																v[50] = i.Model.KApplyArg(v[21], 12)
																// KVariable _25 = v[50]
																v[51] = i.Model.KApplyArg(v[21], 13)
																// KVariable _26 = v[51]
																v[52] = i.Model.KApplyArg(v[21], 14)
																// KVariable _27 = v[52]
																v[53] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[53]
																// rule #463
																// source: iele.k @647
																// {| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(`_=staticcall_at_(_)gaslimit__IELE-COMMON`(_421,_422,_423,_424,`%__IELE-COMMON`(REG)))=>`#if_#then_#else_#fi_K-EQUAL`(`_<Int__INT`(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)),#token("0","Int")),`#exception__IELE-INFRASTRUCTURE`(#token("4","Int")),.K)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_421),isInt(REG)),isOperands(_424)),isArray(REGS)),isOperand(_423)),isOperand(_422)) ensures #token("true","Bool") [UNIQUE_ID(462d7a13680331bdd50e29856c446a41ce08dce3df61f5da4a810be4f36feaed) contentStartColumn(10) contentStartLine(647) org.kframework.attributes.Location(Location(647,10,647,183)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_421),#token("true","Bool")),isOperands(_424)),#token("true","Bool")),isOperand(_423)),isOperand(_422))
																	v[54], i.evalErr = i.evalIsLValues( // isLValues(_421)
																		v[5] /*_421*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(isLValues(_421),#token("true","Bool")),isOperands(_424))
																	bv[2] = m.IsTrue(v[54]) /* && */ /* rhs precomputed isInt(REG) */ 
																	if bv[2] {
																		v[55], i.evalErr = i.evalIsOperands( // isOperands(_424)
																			v[8] /*_424*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[55])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_421),#token("true","Bool")),isOperands(_424)),#token("true","Bool")),isOperand(_423))
																	bv[1] = bv[2] /* && */ /* rhs precomputed isArray(REGS) */ 
																	if bv[1] {
																		v[56], i.evalErr = i.evalIsOperand( // isOperand(_423)
																			v[7] /*_423*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[56])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_421),#token("true","Bool")),isOperands(_424)),#token("true","Bool")),isOperand(_423)),isOperand(_422))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[57], i.evalErr = i.evalIsOperand( // isOperand(_422)
																			v[6] /*_422*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[57])
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS463(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 478
					// KVariable OP = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #478
									// source: iele.k @643
									// {| rule `<generatedTop>`(`<k>`(`` `#negativeCall?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(OP),`_andBool_`(`notBool_`(isAccountCallInst(OP)),`notBool_`(isCreateInst(OP)))) ensures #token("true","Bool") [UNIQUE_ID(b926e28c6edd3e4bd27665bebbec1d651344ba490cd46287a094ee0c15a1ef6a) contentStartColumn(10) contentStartLine(643) org.kframework.attributes.Location(Location(643,10,643,121)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
									if !matched {
										// REQUIRES `_andBool_`(isInstruction(OP),`_andBool_`(`notBool_`(isAccountCallInst(OP)),`notBool_`(isCreateInst(OP))))
										v[17], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
											v[4] /*OP*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isInstruction(OP),`_andBool_`(`notBool_`(isAccountCallInst(OP)),`notBool_`(isCreateInst(OP))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsAccountCallInst( // isAccountCallInst(OP)
												v[4] /*OP*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(`notBool_`(isAccountCallInst(OP)),`notBool_`(isCreateInst(OP)))
											bv[1] = !(m.IsTrue(v[18]))
											if bv[1] {
												v[19], i.evalErr = i.evalIsCreateInst( // isCreateInst(OP)
													v[4] /*OP*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = !(m.IsTrue(v[19]))
											}
											bv[0] = bv[1]
										}
										if bv[0] {
											// RHS
											return i.stepRHS478(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 233, 347, 392
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashstaticXquesXlsqbXuXrsqbXuIELE1 { // `#static?[_]_IELE`(OP)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable OP = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// rule: 233
									// KVariable _28 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _29 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _30 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _31 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _32 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<static>`(#token("false","Bool"))),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
										v[16] = i.Model.KApplyArg(v[15], 0)
										// KVariable _14 = v[16]
										v[17] = i.Model.KApplyArg(v[15], 1)
										// KVariable _15 = v[17]
										v[18] = i.Model.KApplyArg(v[15], 2)
										// KVariable _16 = v[18]
										v[19] = i.Model.KApplyArg(v[15], 3)
										// KVariable _17 = v[19]
										v[20] = i.Model.KApplyArg(v[15], 4)
										if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<static>`(#token("false","Bool")))
											v[21] = i.Model.KApplyArg(v[20], 0)
											// KVariable _0 = v[21]
											v[22] = i.Model.KApplyArg(v[20], 1)
											// KVariable _1 = v[22]
											v[23] = i.Model.KApplyArg(v[20], 2)
											// KVariable _2 = v[23]
											v[24] = i.Model.KApplyArg(v[20], 3)
											// KVariable _3 = v[24]
											v[25] = i.Model.KApplyArg(v[20], 4)
											// KVariable _4 = v[25]
											v[26] = i.Model.KApplyArg(v[20], 5)
											// KVariable _5 = v[26]
											v[27] = i.Model.KApplyArg(v[20], 6)
											// KVariable _6 = v[27]
											v[28] = i.Model.KApplyArg(v[20], 7)
											// KVariable _7 = v[28]
											v[29] = i.Model.KApplyArg(v[20], 8)
											// KVariable _8 = v[29]
											v[30] = i.Model.KApplyArg(v[20], 9)
											// KVariable _9 = v[30]
											v[31] = i.Model.KApplyArg(v[20], 10)
											// KVariable _10 = v[31]
											v[32] = i.Model.KApplyArg(v[20], 11)
											// KVariable _11 = v[32]
											v[33] = i.Model.KApplyArg(v[20], 12)
											// KVariable _12 = v[33]
											v[34] = i.Model.KApplyArg(v[20], 13)
											// KVariable _13 = v[34]
											v[35] = i.Model.KApplyArg(v[20], 14)
											if v[35]&kapplyMatchMask == kapplyMatchLblXltstaticXgt1 { // `<static>`(#token("false","Bool"))
												v[36] = i.Model.KApplyArg(v[35], 0)
												if i.Model.Equals(v[36], m.BoolFalse) { // #token("false","Bool")
													v[37] = i.Model.KApplyArg(v[15], 5)
													// KVariable _18 = v[37]
													v[38] = i.Model.KApplyArg(v[15], 6)
													// KVariable _19 = v[38]
													v[39] = i.Model.KApplyArg(v[15], 7)
													// KVariable _20 = v[39]
													v[40] = i.Model.KApplyArg(v[15], 8)
													// KVariable _21 = v[40]
													v[41] = i.Model.KApplyArg(v[15], 9)
													// KVariable _22 = v[41]
													v[42] = i.Model.KApplyArg(v[15], 10)
													// KVariable _23 = v[42]
													v[43] = i.Model.KApplyArg(v[15], 11)
													// KVariable _24 = v[43]
													v[44] = i.Model.KApplyArg(v[15], 12)
													// KVariable _25 = v[44]
													v[45] = i.Model.KApplyArg(v[15], 13)
													// KVariable _26 = v[45]
													v[46] = i.Model.KApplyArg(v[15], 14)
													// KVariable _27 = v[46]
													v[47] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[47]
													// rule #233
													// source: iele.k @622
													// {| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,`<static>`(#token("false","Bool"))),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires isInstruction(OP) ensures #token("true","Bool") [UNIQUE_ID(604e7ec63998a1a6aba8fc4edacf35e204d71998cc55c46c5e59501d74f859a9) contentStartColumn(10) contentStartLine(622) org.kframework.attributes.Location(Location(622,10,622,108)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES isInstruction(OP)
														v[48], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
															v[4] /*OP*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if m.IsTrue(v[48]) {
															// RHS
															return i.stepRHS233(v, bv, config)
														}
													}
												}
											}
										}
									}
									// rules: 347, 392
									// KVariable _27 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _28 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _29 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _30 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _31 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token("true","Bool"))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
										v[16] = i.Model.KApplyArg(v[15], 0)
										// KVariable _13 = v[16]
										v[17] = i.Model.KApplyArg(v[15], 1)
										// KVariable _14 = v[17]
										v[18] = i.Model.KApplyArg(v[15], 2)
										// KVariable _15 = v[18]
										v[19] = i.Model.KApplyArg(v[15], 3)
										// KVariable _16 = v[19]
										v[20] = i.Model.KApplyArg(v[15], 4)
										if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token("true","Bool")))
											v[21] = i.Model.KApplyArg(v[20], 0)
											// KVariable _0 = v[21]
											v[22] = i.Model.KApplyArg(v[20], 1)
											// KVariable _1 = v[22]
											v[23] = i.Model.KApplyArg(v[20], 2)
											// KVariable _2 = v[23]
											v[24] = i.Model.KApplyArg(v[20], 3)
											// KVariable _3 = v[24]
											v[25] = i.Model.KApplyArg(v[20], 4)
											// KVariable _4 = v[25]
											v[26] = i.Model.KApplyArg(v[20], 5)
											// KVariable _5 = v[26]
											v[27] = i.Model.KApplyArg(v[20], 6)
											// KVariable _6 = v[27]
											v[28] = i.Model.KApplyArg(v[20], 7)
											if v[28]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
												v[29] = i.Model.KApplyArg(v[28], 0)
												// rule: 347
												if v[29]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
													// KVariable REGS = v[29]
													v[30] = i.Model.KApplyArg(v[20], 8)
													// KVariable _7 = v[30]
													v[31] = i.Model.KApplyArg(v[20], 9)
													// KVariable _8 = v[31]
													v[32] = i.Model.KApplyArg(v[20], 10)
													// KVariable _9 = v[32]
													v[33] = i.Model.KApplyArg(v[20], 11)
													// KVariable _10 = v[33]
													v[34] = i.Model.KApplyArg(v[20], 12)
													// KVariable _11 = v[34]
													v[35] = i.Model.KApplyArg(v[20], 13)
													// KVariable _12 = v[35]
													v[36] = i.Model.KApplyArg(v[20], 14)
													if v[36]&kapplyMatchMask == kapplyMatchLblXltstaticXgt1 { // `<static>`(#token("true","Bool"))
														v[37] = i.Model.KApplyArg(v[36], 0)
														if i.Model.Equals(v[37], m.BoolTrue) { // #token("true","Bool")
															v[38] = i.Model.KApplyArg(v[15], 5)
															// KVariable _17 = v[38]
															v[39] = i.Model.KApplyArg(v[15], 6)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[15], 7)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[15], 8)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[15], 9)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[15], 10)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[15], 11)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[15], 12)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[15], 13)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[15], 14)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(c, 8)
															// KVariable _32 = v[48]
															// rule #347
															// source: iele.k @623
															// {| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token("true","Bool"))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isArray(REGS),isInstruction(OP)),`notBool_`(#changesState(OP,REGS))) ensures #token("true","Bool") [UNIQUE_ID(90b59462ad0e192f871daf55346a1911c448e317620780f174b04f1389097b59) contentStartColumn(10) contentStartLine(623) org.kframework.attributes.Location(Location(623,10,623,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isInstruction(OP)),`notBool_`(#changesState(OP,REGS)))
																v[49], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
																	v[4] /*OP*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isInstruction(OP)),`notBool_`(#changesState(OP,REGS)))
																bv[0] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[49])
																if bv[0] {
																	v[50], i.evalErr = i.evalXhashchangesState( // #changesState(OP,REGS)
																		v[4] /*OP*/,
																		v[29] /*REGS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = !(m.IsTrue(v[50]))
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS347(v, bv, config)
																}
															}
														}
													}
												}
												// rule: 392
												if v[29]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
													// KVariable REGS = v[29]
													v[30] = i.Model.KApplyArg(v[20], 8)
													// KVariable _7 = v[30]
													v[31] = i.Model.KApplyArg(v[20], 9)
													// KVariable _8 = v[31]
													v[32] = i.Model.KApplyArg(v[20], 10)
													// KVariable _9 = v[32]
													v[33] = i.Model.KApplyArg(v[20], 11)
													// KVariable _10 = v[33]
													v[34] = i.Model.KApplyArg(v[20], 12)
													// KVariable _11 = v[34]
													v[35] = i.Model.KApplyArg(v[20], 13)
													// KVariable _12 = v[35]
													v[36] = i.Model.KApplyArg(v[20], 14)
													if v[36]&kapplyMatchMask == kapplyMatchLblXltstaticXgt1 { // `<static>`(#token("true","Bool"))
														v[37] = i.Model.KApplyArg(v[36], 0)
														if i.Model.Equals(v[37], m.BoolTrue) { // #token("true","Bool")
															v[38] = i.Model.KApplyArg(v[15], 5)
															// KVariable _17 = v[38]
															v[39] = i.Model.KApplyArg(v[15], 6)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[15], 7)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[15], 8)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[15], 9)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[15], 10)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[15], 11)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[15], 12)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[15], 13)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[15], 14)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(c, 8)
															// KVariable _32 = v[48]
															// rule #392
															// source: iele.k @624
															// {| rule `<generatedTop>`(`<k>`(`` `#static?[_]_IELE`(OP)=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,`<static>`(#token("true","Bool"))),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isArray(REGS),isInstruction(OP)),#changesState(OP,REGS)) ensures #token("true","Bool") [UNIQUE_ID(8463e85256d3be1c9cb6bcadc1b1e1860bf22af7917ba4fd8459fa67727cddde) contentStartColumn(10) contentStartLine(624) org.kframework.attributes.Location(Location(624,10,624,149)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isInstruction(OP)),#changesState(OP,REGS))
																v[49], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
																	v[4] /*OP*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isInstruction(OP)),#changesState(OP,REGS))
																bv[0] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[49])
																if bv[0] {
																	v[50], i.evalErr = i.evalXhashchangesState( // #changesState(OP,REGS)
																		v[4] /*OP*/,
																		v[29] /*REGS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[50])
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS392(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 238
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashfinishTypeCheckingXuIELE0 { // `#finishTypeChecking_IELE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _3 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _4 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _5 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _6 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									if v[13]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(_463),_0,_1,_2)
										v[14] = i.Model.KApplyArg(v[13], 0)
										if v[14]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(_463)
											v[15] = i.Model.KApplyArg(v[14], 0)
											if v[15]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
												// KVariable _463 = v[15]
												v[16] = i.Model.KApplyArg(v[13], 1)
												// KVariable _0 = v[16]
												v[17] = i.Model.KApplyArg(v[13], 2)
												// KVariable _1 = v[17]
												v[18] = i.Model.KApplyArg(v[13], 3)
												// KVariable _2 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _7 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												// KVariable _8 = v[20]
												// rule #238
												// source: iele.k @1382
												// {| rule `<generatedTop>`(`<k>`(`` `#finishTypeChecking_IELE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(_463=>#token("false","Bool")),_0,_1,_2),_7,_8) requires isBool(_463) ensures #token("true","Bool") [UNIQUE_ID(7f0b4dd9074e58ba4092ced4a2189aa612769386ed43c7ce3e781acb6919e543) contentStartColumn(10) contentStartLine(1382) org.kframework.attributes.Location(Location(1382,10,1383,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES precomputed isBool(_463)
													// RHS
													return i.stepRHS238(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 239
				if v[2]&kapplyMatchMask == kapplyMatchLblProcessFunction1 { // processFunction(NAME)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					// KVariable _7 = v[5]
					v[6] = i.Model.KApplyArg(c, 2)
					// KVariable _8 = v[6]
					v[7] = i.Model.KApplyArg(c, 3)
					// KVariable _9 = v[7]
					v[8] = i.Model.KApplyArg(c, 4)
					// KVariable _10 = v[8]
					v[9] = i.Model.KApplyArg(c, 5)
					// KVariable _11 = v[9]
					v[10] = i.Model.KApplyArg(c, 6)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,_2,_3,_34))
						v[11] = i.Model.KApplyArg(v[10], 0)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(v[10], 1)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(v[10], 2)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(v[10], 3)
						if v[14]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_0,_1,_2,_3,_34)
							v[15] = i.Model.KApplyArg(v[14], 0)
							// KVariable _0 = v[15]
							v[16] = i.Model.KApplyArg(v[14], 1)
							// KVariable _1 = v[16]
							v[17] = i.Model.KApplyArg(v[14], 2)
							// KVariable _2 = v[17]
							v[18] = i.Model.KApplyArg(v[14], 3)
							// KVariable _3 = v[18]
							v[19] = i.Model.KApplyArg(v[14], 4)
							// KVariable _34 = v[19]
							v[20] = i.Model.KApplyArg(c, 7)
							// KVariable _12 = v[20]
							v[21] = i.Model.KApplyArg(c, 8)
							// KVariable _13 = v[21]
							// rule #239
							// source: well-formedness.k @131
							// {| rule `<generatedTop>`(`<k>`(``processFunction(NAME)=>.K``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,_2,_3,_34=>`<currentFunction>`(`<functionName>`(NAME),initLabelsCell(.KList),initCurrentInstructionsCell(.KList)))),_12,_13) requires `_andBool_`(isIeleName(NAME),isCurrentFunctionCell(_34)) ensures #token("true","Bool") [UNIQUE_ID(ed7f5c2e3d6d562c4ce92336cca8aa8023dc549faac602e41794d1b40020f94e) contentStartColumn(10) contentStartLine(131) org.kframework.attributes.Location(Location(131,10,135,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(isIeleName(NAME),isCurrentFunctionCell(_34))
								v[22], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
									v[4] /*NAME*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isIeleName(NAME),isCurrentFunctionCell(_34))
								bv[0] = m.IsTrue(v[22])
								if bv[0] {
									v[23], i.evalErr = i.evalIsCurrentFunctionCell( // isCurrentFunctionCell(_34)
										v[19] /*_34*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[23])
								}
								if bv[0] {
									// RHS
									return i.stepRHS239(v, bv, config)
								}
							}
						}
					}
				}
				// rule: 253
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashtrimAccounts1 { // #trimAccounts(`.List`(.KList))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.Model.IsEmptyList(v[4], m.SortList, m.LblXuListXu) { // empty list `.List`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[16]
										// rule #253
										// source: iele-node.k @120
										// {| rule `<generatedTop>`(`<k>`(``#trimAccounts(`.List`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e2b15309a33b8ecd35b4c7efaa8cc799119bd1bb9a0bf71ea15cef6e5d1f3818) contentStartColumn(10) contentStartLine(120) org.kframework.attributes.Location(Location(120,10,120,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// RHS
											return i.stepRHS253(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 263
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashdropWorldStateXuIELEXhyphenINFRASTRUCTURE0 { // `#dropWorldState_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _14 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _15 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _16 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _17 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _18 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(_110),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltinterimStatesXgt1 { // `<interimStates>`(`_List_`(`ListItem`(_110),DotVar3))
											v[18] = i.Model.KApplyArg(v[17], 0)
											if i.tempBoolVar, v[19], v[20] = i.Model.ListSplitHeadTail(v[18], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(_110),DotVar3)
												// KVariable _110 = v[19]
												if v[20]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
													// KVariable DotVar3 = v[20]
													v[21] = i.Model.KApplyArg(v[14], 3)
													// KVariable _2 = v[21]
													v[22] = i.Model.KApplyArg(v[14], 4)
													// KVariable _3 = v[22]
													v[23] = i.Model.KApplyArg(v[14], 5)
													// KVariable _4 = v[23]
													v[24] = i.Model.KApplyArg(v[14], 6)
													// KVariable _5 = v[24]
													v[25] = i.Model.KApplyArg(v[14], 7)
													// KVariable _6 = v[25]
													v[26] = i.Model.KApplyArg(v[14], 8)
													// KVariable _7 = v[26]
													v[27] = i.Model.KApplyArg(v[14], 9)
													// KVariable _8 = v[27]
													v[28] = i.Model.KApplyArg(v[14], 10)
													// KVariable _9 = v[28]
													v[29] = i.Model.KApplyArg(v[14], 11)
													// KVariable _10 = v[29]
													v[30] = i.Model.KApplyArg(v[14], 12)
													// KVariable _11 = v[30]
													v[31] = i.Model.KApplyArg(v[14], 13)
													// KVariable _12 = v[31]
													v[32] = i.Model.KApplyArg(v[14], 14)
													// KVariable _13 = v[32]
													v[33] = i.Model.KApplyArg(c, 8)
													// KVariable _19 = v[33]
													// rule #263
													// source: iele.k @289
													// {| rule `<generatedTop>`(`<k>`(`` `#dropWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(_110),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires isKItem(_110) ensures #token("true","Bool") [UNIQUE_ID(b8fb6418e9e726376ae5cc4f114a6d4c4b18b27e78b3f11e836b00145a4f99be) contentStartColumn(10) contentStartLine(289) org.kframework.attributes.Location(Location(289,10,289,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES precomputed isKItem
														// RHS
														return i.stepRHS263(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 269
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryExpand2 { // #memoryExpand(INDEX,NEWSIZE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable INDEX = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable NEWSIZE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _26 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _27 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _12 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _13 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[21], 6)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[21], 7)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[21], 8)
													if v[30]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
														v[31] = i.Model.KApplyArg(v[30], 0)
														if v[31]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															// KVariable LM = v[31]
															v[32] = i.Model.KApplyArg(v[21], 9)
															if v[32]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
																v[33] = i.Model.KApplyArg(v[32], 0)
																if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable PEAK = v[33]
																	v[34] = i.Model.KApplyArg(v[21], 10)
																	if v[34]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																		v[35] = i.Model.KApplyArg(v[34], 0)
																		if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable CURR = v[35]
																			v[36] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _8 = v[36]
																			v[37] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _9 = v[37]
																			v[38] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _10 = v[38]
																			v[39] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _11 = v[39]
																			v[40] = i.Model.KApplyArg(v[16], 5)
																			// KVariable _16 = v[40]
																			v[41] = i.Model.KApplyArg(v[16], 6)
																			// KVariable _17 = v[41]
																			v[42] = i.Model.KApplyArg(v[16], 7)
																			// KVariable _18 = v[42]
																			v[43] = i.Model.KApplyArg(v[16], 8)
																			// KVariable _19 = v[43]
																			v[44] = i.Model.KApplyArg(v[16], 9)
																			// KVariable _20 = v[44]
																			v[45] = i.Model.KApplyArg(v[16], 10)
																			// KVariable _21 = v[45]
																			v[46] = i.Model.KApplyArg(v[16], 11)
																			// KVariable _22 = v[46]
																			v[47] = i.Model.KApplyArg(v[16], 12)
																			// KVariable _23 = v[47]
																			v[48] = i.Model.KApplyArg(v[16], 13)
																			// KVariable _24 = v[48]
																			v[49] = i.Model.KApplyArg(v[16], 14)
																			// KVariable _25 = v[49]
																			v[50] = i.Model.KApplyArg(c, 8)
																			// KVariable _31 = v[50]
																			// rule #269
																			// source: iele-gas.k @377
																			// {| rule `<generatedTop>`(`<k>`(``#memoryExpand(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))),`<currentMemory>`(CURR=>`_+Int_`(CURR,NEWSIZE)),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isInt(NEWSIZE)),isMap(LM)),isInt(CURR)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token("true","Bool") [UNIQUE_ID(d0dbdc40a82ecf092d38758794effddfc2b235e4183b00e0eea45255c82fbbea) contentStartColumn(10) contentStartLine(377) org.kframework.attributes.Location(Location(377,10,381,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
																				v[51], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,LM)
																					v[4] /*INDEX*/,
																					v[31] /*LM*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(PEAK) && isInt(INDEX) && isInt(NEWSIZE) && isMap(LM) && isInt(CURR) */ /* && */ !(m.IsTrue(v[51])) {
																					// RHS
																					return i.stepRHS269(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 270, 384, 557
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashregisterDeltas2 { // #registerDeltas(lvalueList(REG,REGS),operandList(INT,INTS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 270
					if v[4]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,REGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable REGS = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(INT,INTS)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable INT = v[8]
								v[9] = i.Model.KApplyArg(v[7], 1)
								// KVariable INTS = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _0 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _1 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _2 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _3 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _4 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(c, 8)
												// KVariable _6 = v[21]
												// rule #270
												// source: iele-gas.k @354
												// {| rule `<generatedTop>`(`<k>`(``#registerDeltas(lvalueList(REG,REGS),operandList(INT,INTS))=>#registerDelta(REG,intSize(INT))~>#registerDeltas(REGS,INTS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isInts(INTS),isInt(INT)),isLValues(REGS)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(5b3f1f5ca11f3440fc6c4eaf7c0a525642e1cd1c459ce30c2b23049fc7b3a459) contentStartColumn(10) contentStartLine(354) org.kframework.attributes.Location(Location(354,10,354,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isInts(INTS),#token("true","Bool")),isLValues(REGS)),isLValue(REG))
													v[22], i.evalErr = i.evalIsInts( // isInts(INTS)
														v[9] /*INTS*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`_andBool_`(isInts(INTS),#token("true","Bool")),isLValues(REGS))
													bv[1] = m.IsTrue(v[22]) /* && */ /* rhs precomputed isInt(INT) */ 
													if bv[1] {
														v[23], i.evalErr = i.evalIsLValues( // isLValues(REGS)
															v[6] /*REGS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = m.IsTrue(v[23])
													}
													// `_andBool_`(`_andBool_`(`_andBool_`(isInts(INTS),#token("true","Bool")),isLValues(REGS)),isLValue(REG))
													bv[0] = bv[1]
													if bv[0] {
														v[24], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[5] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[0] = m.IsTrue(v[24])
													}
													if bv[0] {
														// RHS
														return i.stepRHS270(v, bv, config)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 384
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable _175 = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #384
										// source: iele-gas.k @355
										// {| rule `<generatedTop>`(`<k>`(``#registerDeltas(`.List{"lvalueList"}`(.KList),_175)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInts(_175) ensures #token("true","Bool") [UNIQUE_ID(00aa74df914b1eaa0755a787ef6ef44d51a1e0320c21235f595744d3eb668a9d) contentStartColumn(10) contentStartLine(355) org.kframework.attributes.Location(Location(355,10,355,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isInts(_175)
											v[18], i.evalErr = i.evalIsInts( // isInts(_175)
												v[5] /*_175*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS384(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
					// rule: 557
					// KVariable _242 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #557
										// source: iele-gas.k @356
										// {| rule `<generatedTop>`(`<k>`(``#registerDeltas(_242,`.List{"operandList"}`(.KList))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isLValues(_242) ensures #token("true","Bool") [UNIQUE_ID(39b54e1b86cf138998e3c977bcd0ea891c4540e3d6f246e8e6ab1f52d9e2aa20) contentStartColumn(10) contentStartLine(356) org.kframework.attributes.Location(Location(356,10,356,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES isLValues(_242)
											v[18], i.evalErr = i.evalIsLValues( // isLValues(_242)
												v[4] /*_242*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											if m.IsTrue(v[18]) {
												// RHS
												return i.stepRHS557(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 271, 452
				if v[2]&kapplyMatchMask == kapplyMatchLblRunVM14 { // runVM(_737,_738,ACCTFROM,_739,_740,_741,_742,_743,_744,_745,_746,_747,_748,_749)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 271
					if v[4]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable _737 = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _738 = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTFROM = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if v[7]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
									// KVariable _739 = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									if v[8]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
										// KVariable _740 = v[8]
										v[9] = i.Model.KApplyArg(v[2], 5)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable _741 = v[9]
											v[10] = i.Model.KApplyArg(v[2], 6)
											if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable _742 = v[10]
												v[11] = i.Model.KApplyArg(v[2], 7)
												if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable _743 = v[11]
													v[12] = i.Model.KApplyArg(v[2], 8)
													if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable _744 = v[12]
														v[13] = i.Model.KApplyArg(v[2], 9)
														if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable _745 = v[13]
															v[14] = i.Model.KApplyArg(v[2], 10)
															if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable _746 = v[14]
																v[15] = i.Model.KApplyArg(v[2], 11)
																if i.tempTypeVar = v[15] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable _747 = v[15]
																	v[16] = i.Model.KApplyArg(v[2], 12)
																	if i.tempTypeVar = v[16] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable _748 = v[16]
																		v[17] = i.Model.KApplyArg(v[2], 13)
																		if v[17]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
																			// KVariable _749 = v[17]
																			// KVariable DotVar1 = v[3]
																			v[18] = i.Model.KApplyArg(c, 1)
																			if v[18]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
																				v[19] = i.Model.KApplyArg(v[18], 0)
																				if v[19]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																					_, v[20], v[21] = i.Model.KSequenceSplitHeadTail(v[19]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																					if v[20]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																						v[22] = i.Model.KApplyArg(v[20], 0)
																						if i.Model.Equals(v[22], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																							// KVariable SREST = v[21]
																							v[23] = i.Model.KApplyArg(c, 2)
																							// KVariable _4 = v[23]
																							v[24] = i.Model.KApplyArg(c, 3)
																							// KVariable _5 = v[24]
																							v[25] = i.Model.KApplyArg(c, 4)
																							// KVariable _6 = v[25]
																							v[26] = i.Model.KApplyArg(c, 5)
																							// KVariable _7 = v[26]
																							v[27] = i.Model.KApplyArg(c, 6)
																							// KVariable _8 = v[27]
																							v[28] = i.Model.KApplyArg(c, 7)
																							// KVariable _9 = v[28]
																							v[29] = i.Model.KApplyArg(c, 8)
																							if v[29]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(_10),_0,_1,_2,_3)
																								v[30] = i.Model.KApplyArg(v[29], 0)
																								if v[30]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(_10)
																									v[31] = i.Model.KApplyArg(v[30], 0)
																									// KVariable _10 = v[31]
																									v[32] = i.Model.KApplyArg(v[29], 1)
																									// KVariable _0 = v[32]
																									v[33] = i.Model.KApplyArg(v[29], 2)
																									// KVariable _1 = v[33]
																									v[34] = i.Model.KApplyArg(v[29], 3)
																									// KVariable _2 = v[34]
																									v[35] = i.Model.KApplyArg(v[29], 4)
																									// KVariable _3 = v[35]
																									// rule #271
																									// source: iele-node.k @58
																									// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCTFROM)``~>runVM(_737,_738,ACCTFROM,_739,_740,_741,_742,_743,_744,_745,_746,_747,_748,_749)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(_10),_0,_1,_2,_3)) requires `_andBool_`(`_==K_`(`.Set`(.KList),_10),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_738),isInt(_746)),isInt(_742)),isInt(_745)),isInt(_748)),isString(_749)),isInt(_741)),isInt(_744)),isString(_739)),isList(_740)),isBool(_737)),isInt(_747)),isInt(ACCTFROM)),isInt(_743))) ensures #token("true","Bool") [UNIQUE_ID(9d563dbf9dde20e92bf0d0ca80fe00d2d8ec6ba1bd83d0601ed26c94f4019fa6) contentStartColumn(10) contentStartLine(58) org.kframework.attributes.Location(Location(58,10,59,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																									if !matched {
																										// REQUIRES `_andBool_`(`_==K_`(`.Set`(.KList),_10),#token("true","Bool"))
																										v[37], i.evalErr = i.evalXdotSet(config, -1) // `.Set`(.KList)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[36], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(`.Set`(.KList),_10)
																											v[37],
																											v[31] /*_10*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										if m.IsTrue(v[36]) /* && */ /* rhs precomputed isInt(_738) && isInt(_746) && isInt(_742) && isInt(_745) && isInt(_748) && isString(_749) && isInt(_741) && isInt(_744) && isString(_739) && isList(_740) && isBool(_737) && isInt(_747) && isInt(ACCTFROM) && isInt(_743) */  {
																											// RHS
																											return i.stepRHS271(v, bv, config)
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 452
					if i.Model.Equals(v[4], m.BoolFalse) { // #token("false","Bool")
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTFROM = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if v[7]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
									// KVariable _717 = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									if v[8]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
										// KVariable ARGS = v[8]
										v[9] = i.Model.KApplyArg(v[2], 5)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable VALUE = v[9]
											v[10] = i.Model.KApplyArg(v[2], 6)
											if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable GPRICE = v[10]
												v[11] = i.Model.KApplyArg(v[2], 7)
												if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable GAVAIL = v[11]
													v[12] = i.Model.KApplyArg(v[2], 8)
													if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable CB = v[12]
														v[13] = i.Model.KApplyArg(v[2], 9)
														if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable DIFF = v[13]
															v[14] = i.Model.KApplyArg(v[2], 10)
															if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable NUMB = v[14]
																v[15] = i.Model.KApplyArg(v[2], 11)
																if i.tempTypeVar = v[15] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable GLIMIT = v[15]
																	v[16] = i.Model.KApplyArg(v[2], 12)
																	if i.tempTypeVar = v[16] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable TS = v[16]
																		v[17] = i.Model.KApplyArg(v[2], 13)
																		if v[17]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
																			// KVariable FUNC = v[17]
																			// KVariable DotVar1 = v[3]
																			v[18] = i.Model.KApplyArg(c, 1)
																			if v[18]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
																				v[19] = i.Model.KApplyArg(v[18], 0)
																				if v[19]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																					_, v[20], v[21] = i.Model.KSequenceSplitHeadTail(v[19]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																					if v[20]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																						v[22] = i.Model.KApplyArg(v[20], 0)
																						if i.Model.Equals(v[22], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																							// KVariable SREST = v[21]
																							v[23] = i.Model.KApplyArg(c, 2)
																							// KVariable _25 = v[23]
																							v[24] = i.Model.KApplyArg(c, 3)
																							// KVariable _26 = v[24]
																							v[25] = i.Model.KApplyArg(c, 4)
																							if v[25]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																								v[26] = i.Model.KApplyArg(v[25], 0)
																								// KVariable SCHED = v[26]
																								v[27] = i.Model.KApplyArg(c, 5)
																								// KVariable _27 = v[27]
																								v[28] = i.Model.KApplyArg(c, 6)
																								// KVariable _28 = v[28]
																								v[29] = i.Model.KApplyArg(c, 7)
																								if v[29]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(_720),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,`<gasPrice>`(_718),`<origin>`(_719),`<beneficiary>`(_721),`<difficulty>`(_722),`<number>`(_723),`<gasLimit>`(_724),_19,`<timestamp>`(_725),_20)
																									v[30] = i.Model.KApplyArg(v[29], 0)
																									// KVariable _14 = v[30]
																									v[31] = i.Model.KApplyArg(v[29], 1)
																									// KVariable _15 = v[31]
																									v[32] = i.Model.KApplyArg(v[29], 2)
																									// KVariable _16 = v[32]
																									v[33] = i.Model.KApplyArg(v[29], 3)
																									// KVariable _17 = v[33]
																									v[34] = i.Model.KApplyArg(v[29], 4)
																									if v[34]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(_720),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																										v[35] = i.Model.KApplyArg(v[34], 0)
																										// KVariable _0 = v[35]
																										v[36] = i.Model.KApplyArg(v[34], 1)
																										if v[36]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(_720)
																											v[37] = i.Model.KApplyArg(v[36], 0)
																											if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												// KVariable _720 = v[37]
																												v[38] = i.Model.KApplyArg(v[34], 2)
																												// KVariable _1 = v[38]
																												v[39] = i.Model.KApplyArg(v[34], 3)
																												// KVariable _2 = v[39]
																												v[40] = i.Model.KApplyArg(v[34], 4)
																												// KVariable _3 = v[40]
																												v[41] = i.Model.KApplyArg(v[34], 5)
																												// KVariable _4 = v[41]
																												v[42] = i.Model.KApplyArg(v[34], 6)
																												// KVariable _5 = v[42]
																												v[43] = i.Model.KApplyArg(v[34], 7)
																												// KVariable _6 = v[43]
																												v[44] = i.Model.KApplyArg(v[34], 8)
																												// KVariable _7 = v[44]
																												v[45] = i.Model.KApplyArg(v[34], 9)
																												// KVariable _8 = v[45]
																												v[46] = i.Model.KApplyArg(v[34], 10)
																												// KVariable _9 = v[46]
																												v[47] = i.Model.KApplyArg(v[34], 11)
																												// KVariable _10 = v[47]
																												v[48] = i.Model.KApplyArg(v[34], 12)
																												// KVariable _11 = v[48]
																												v[49] = i.Model.KApplyArg(v[34], 13)
																												// KVariable _12 = v[49]
																												v[50] = i.Model.KApplyArg(v[34], 14)
																												// KVariable _13 = v[50]
																												v[51] = i.Model.KApplyArg(v[29], 5)
																												// KVariable _18 = v[51]
																												v[52] = i.Model.KApplyArg(v[29], 6)
																												if v[52]&kapplyMatchMask == kapplyMatchLblXltgasPriceXgt1 { // `<gasPrice>`(_718)
																													v[53] = i.Model.KApplyArg(v[52], 0)
																													if i.tempTypeVar = v[53] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																														// KVariable _718 = v[53]
																														v[54] = i.Model.KApplyArg(v[29], 7)
																														if v[54]&kapplyMatchMask == kapplyMatchLblXltoriginXgt1 { // `<origin>`(_719)
																															v[55] = i.Model.KApplyArg(v[54], 0)
																															if i.tempTypeVar = v[55] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																// KVariable _719 = v[55]
																																v[56] = i.Model.KApplyArg(v[29], 8)
																																if v[56]&kapplyMatchMask == kapplyMatchLblXltbeneficiaryXgt1 { // `<beneficiary>`(_721)
																																	v[57] = i.Model.KApplyArg(v[56], 0)
																																	if i.tempTypeVar = v[57] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																		// KVariable _721 = v[57]
																																		v[58] = i.Model.KApplyArg(v[29], 9)
																																		if v[58]&kapplyMatchMask == kapplyMatchLblXltdifficultyXgt1 { // `<difficulty>`(_722)
																																			v[59] = i.Model.KApplyArg(v[58], 0)
																																			if i.tempTypeVar = v[59] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																				// KVariable _722 = v[59]
																																				v[60] = i.Model.KApplyArg(v[29], 10)
																																				if v[60]&kapplyMatchMask == kapplyMatchLblXltnumberXgt1 { // `<number>`(_723)
																																					v[61] = i.Model.KApplyArg(v[60], 0)
																																					if i.tempTypeVar = v[61] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																						// KVariable _723 = v[61]
																																						v[62] = i.Model.KApplyArg(v[29], 11)
																																						if v[62]&kapplyMatchMask == kapplyMatchLblXltgasLimitXgt1 { // `<gasLimit>`(_724)
																																							v[63] = i.Model.KApplyArg(v[62], 0)
																																							if i.tempTypeVar = v[63] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																								// KVariable _724 = v[63]
																																								v[64] = i.Model.KApplyArg(v[29], 12)
																																								// KVariable _19 = v[64]
																																								v[65] = i.Model.KApplyArg(v[29], 13)
																																								if v[65]&kapplyMatchMask == kapplyMatchLblXlttimestampXgt1 { // `<timestamp>`(_725)
																																									v[66] = i.Model.KApplyArg(v[65], 0)
																																									if i.tempTypeVar = v[66] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																										// KVariable _725 = v[66]
																																										v[67] = i.Model.KApplyArg(v[29], 14)
																																										// KVariable _20 = v[67]
																																										v[68] = i.Model.KApplyArg(c, 8)
																																										if v[68]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_21,_22,_23,_24)
																																											v[69] = i.Model.KApplyArg(v[68], 0)
																																											if v[69]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
																																												v[70] = i.Model.KApplyArg(v[69], 0)
																																												if v[70]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																																													// KVariable ACCTS = v[70]
																																													v[71] = i.Model.KApplyArg(v[68], 1)
																																													// KVariable _21 = v[71]
																																													v[72] = i.Model.KApplyArg(v[68], 2)
																																													// KVariable _22 = v[72]
																																													v[73] = i.Model.KApplyArg(v[68], 3)
																																													// KVariable _23 = v[73]
																																													v[74] = i.Model.KApplyArg(v[68], 4)
																																													// KVariable _24 = v[74]
																																													// rule #452
																																													// source: iele-node.k @86
																																													// {| rule `<generatedTop>`(`<k>`(``runVM(#token("false","Bool"),ACCTTO,ACCTFROM,_717,ARGS,VALUE,GPRICE,GAVAIL,CB,DIFF,NUMB,GLIMIT,TS,FUNC)=>`#call________IELE`(ACCTFROM,ACCTTO,`@__IELE-COMMON`(`String2IeleName`(FUNC)),`_*Int__INT`(GAVAIL,`_<_>_IELE-GAS`(`Sgasdivisor_IELE-GAS`(.KList),SCHED)),VALUE,`ListToInts`(ARGS),#token("false","Bool"))~>`#endVM_IELE-NODE`(.KList)~>`#trimAccounts_IELE-NODE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_25,_26,`<schedule>`(SCHED),_27,_28,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(_720=>#token("-1","Int")),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,`<gasPrice>`(_718=>GPRICE),`<origin>`(_719=>ACCTFROM),`<beneficiary>`(_721=>CB),`<difficulty>`(_722=>DIFF),`<number>`(_723=>NUMB),`<gasLimit>`(_724=>GLIMIT),_19,`<timestamp>`(_725=>TS),_20),`<network>`(`<activeAccounts>`(ACCTS),_21,_22,_23,_24)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(DIFF),isInt(GPRICE)),isInt(ACCTTO)),isString(_717)),isInt(VALUE)),isInt(_725)),isInt(_718)),isInt(_722)),isInt(_724)),isSet(ACCTS)),isList(ARGS)),isInt(_723)),isInt(_719)),isInt(CB)),isInt(_721)),isSchedule(SCHED)),isInt(NUMB)),isInt(ACCTFROM)),isInt(_720)),isInt(GAVAIL)),isString(FUNC)),isInt(TS)),isInt(GLIMIT)),`Set:in`(ACCTFROM,ACCTS)) ensures #token("true","Bool") [UNIQUE_ID(3e9b9899c2bcc0fa736d95b5f5b87b6814ee4807026322818531b290000ed0f1) contentStartColumn(10) contentStartLine(86) org.kframework.attributes.Location(Location(86,10,102,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																																													if !matched {
																																														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`Set:in`(ACCTFROM,ACCTS))
																																														v[75], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																															v[26] /*SCHED*/,
																																															config, -1)
																																														if i.evalErr != nil {
																																															return m.NoResult, i.evalErr
																																														}
																																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`Set:in`(ACCTFROM,ACCTS))
																																														bv[0] = /* rhs precomputed isInt(DIFF) && isInt(GPRICE) && isInt(ACCTTO) && isString(_717) && isInt(VALUE) && isInt(_725) && isInt(_718) && isInt(_722) && isInt(_724) && isSet(ACCTS) && isList(ARGS) && isInt(_723) && isInt(_719) && isInt(CB) && isInt(_721) */ /* && */ m.IsTrue(v[75]) /* && */ /* rhs precomputed isInt(NUMB) */  /* && */ /* rhs precomputed isInt(ACCTFROM) */  /* && */ /* rhs precomputed isInt(_720) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  /* && */ /* rhs precomputed isString(FUNC) */  /* && */ /* rhs precomputed isInt(TS) */  /* && */ /* rhs precomputed isInt(GLIMIT) */ 
																																														if bv[0] {
																																															v[76], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCTFROM,ACCTS)
																																																v[6] /*ACCTFROM*/,
																																																v[70] /*ACCTS*/,
																																																config, -1)
																																															if i.evalErr != nil {
																																																return m.NoResult, i.evalErr
																																															}
																																															bv[0] = m.IsTrue(v[76])
																																														}
																																														if bv[0] {
																																															// RHS
																																															return i.stepRHS452(v, bv, config)
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 274
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashloadAux3 { // #loadAux(REG,VALUE,OLD)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable REG = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable OLD = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _27 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _28 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _29 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _30 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _31 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,`<currentMemory>`(CURR),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _13 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _14 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _15 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													// KVariable _16 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 4)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,`<currentMemory>`(CURR),_9,_10,_11,_12)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _0 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														// KVariable _1 = v[24]
														v[25] = i.Model.KApplyArg(v[22], 2)
														// KVariable _2 = v[25]
														v[26] = i.Model.KApplyArg(v[22], 3)
														// KVariable _3 = v[26]
														v[27] = i.Model.KApplyArg(v[22], 4)
														// KVariable _4 = v[27]
														v[28] = i.Model.KApplyArg(v[22], 5)
														// KVariable _5 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 6)
														// KVariable _6 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 7)
														if v[30]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[31] = i.Model.KApplyArg(v[30], 0)
															if v[31]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[31]
																v[32] = i.Model.KApplyArg(v[22], 8)
																// KVariable _7 = v[32]
																v[33] = i.Model.KApplyArg(v[22], 9)
																// KVariable _8 = v[33]
																v[34] = i.Model.KApplyArg(v[22], 10)
																if v[34]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																	v[35] = i.Model.KApplyArg(v[34], 0)
																	if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable CURR = v[35]
																		v[36] = i.Model.KApplyArg(v[22], 11)
																		// KVariable _9 = v[36]
																		v[37] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _10 = v[37]
																		v[38] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _11 = v[38]
																		v[39] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _12 = v[39]
																		v[40] = i.Model.KApplyArg(v[17], 5)
																		// KVariable _17 = v[40]
																		v[41] = i.Model.KApplyArg(v[17], 6)
																		// KVariable _18 = v[41]
																		v[42] = i.Model.KApplyArg(v[17], 7)
																		// KVariable _19 = v[42]
																		v[43] = i.Model.KApplyArg(v[17], 8)
																		// KVariable _20 = v[43]
																		v[44] = i.Model.KApplyArg(v[17], 9)
																		// KVariable _21 = v[44]
																		v[45] = i.Model.KApplyArg(v[17], 10)
																		// KVariable _22 = v[45]
																		v[46] = i.Model.KApplyArg(v[17], 11)
																		// KVariable _23 = v[46]
																		v[47] = i.Model.KApplyArg(v[17], 12)
																		// KVariable _24 = v[47]
																		v[48] = i.Model.KApplyArg(v[17], 13)
																		// KVariable _25 = v[48]
																		v[49] = i.Model.KApplyArg(v[17], 14)
																		// KVariable _26 = v[49]
																		v[50] = i.Model.KApplyArg(c, 8)
																		// KVariable _32 = v[50]
																		// rule #274
																		// source: iele.k @738
																		// {| rule `<generatedTop>`(`<k>`(``#loadAux(REG,VALUE,OLD)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS=>`_[_<-_]`(REGS,REG,VALUE)),_7,_8,`<currentMemory>`(CURR=>`_+Int_`(`_-Int__INT`(CURR,intSize(OLD)),intSize(VALUE))),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isInt(VALUE)),isInt(CURR)),isInt(OLD)) ensures #token("true","Bool") [UNIQUE_ID(18722f451d56dad91857eee54e565ddb8bf484f6a5e9e70021c7e3a66231bfc3) contentStartColumn(10) contentStartLine(738) org.kframework.attributes.Location(Location(738,10,738,176)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES precomputed isInt(REG) && isArray(REGS) && isInt(VALUE) && isInt(CURR) && isInt(OLD)
																			// RHS
																			return i.stepRHS274(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 289, 470, 565
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=mulmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rules: 289, 470
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 289
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #289
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(bd9d06e55d05f59cf4084842c2c77308d0b193084de782ec8d31fb1f8d9f2ff2) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS289(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 470
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #470
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d584829d0f49b682da2c3c0718ea3c6eeffba546de338215a3aaefc2255d406e) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[5] = m.IsTrue(v[24])
											if bv[5] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[26]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS470(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 565
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #565
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(`` `_=mulmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_2`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(ad9b97fb980624095e0349db285bf9ee452458b947df577b310386989fb03da2) heat() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS565(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 292, 564
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=twos_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 292
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #292
									// source: iele-syntax.k @163
									// {| rule `<generatedTop>`(`<k>`(`` `_=twos_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=twos_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d128e4ea93ea66c37b93b8a0d81b81b223b1579e622e9f28d9d4d1b92e1cdaae) heat() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS292(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 564
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #564
									// source: iele-syntax.k @163
									// {| rule `<generatedTop>`(`<k>`(`` `_=twos_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=twos_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(06b1abf6da0c54b905bfcbd9770e75c35c85d5b1f4fa66f9efdaf86abdb827e9) heat() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS564(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 294, 342
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcallWithCodeXuXuXuXuXuXuXuXuXuIELE8 { // `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),IDX,GLIMIT,VALUE,ARGS,STATIC)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 294
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4)
								v[7] = i.Model.KApplyArg(v[6], 0)
								// KVariable _0 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								// KVariable _1 = v[8]
								v[9] = i.Model.KApplyArg(v[6], 2)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(LBLS)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
										// KVariable LBLS = v[10]
										v[11] = i.Model.KApplyArg(v[6], 3)
										// KVariable _2 = v[11]
										v[12] = i.Model.KApplyArg(v[6], 4)
										// KVariable _3 = v[12]
										v[13] = i.Model.KApplyArg(v[6], 5)
										// KVariable _4 = v[13]
										v[14] = i.Model.KApplyArg(v[2], 3)
										if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable IDX = v[14]
											v[15] = i.Model.KApplyArg(v[2], 4)
											if i.tempTypeVar = v[15] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable GLIMIT = v[15]
												v[16] = i.Model.KApplyArg(v[2], 5)
												if i.tempTypeVar = v[16] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable VALUE = v[16]
													v[17] = i.Model.KApplyArg(v[2], 6)
													// KVariable ARGS = v[17]
													v[18] = i.Model.KApplyArg(v[2], 7)
													if v[18]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
														// KVariable STATIC = v[18]
														// KVariable DotVar1 = v[3]
														v[19] = i.Model.KApplyArg(c, 1)
														if v[19]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
															v[20] = i.Model.KApplyArg(v[19], 0)
															if v[20]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																_, v[21], v[22] = i.Model.KSequenceSplitHeadTail(v[20]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																if v[21]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																	v[23] = i.Model.KApplyArg(v[21], 0)
																	if i.Model.Equals(v[23], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																		// KVariable SREST = v[22]
																		v[24] = i.Model.KApplyArg(c, 2)
																		// KVariable _5 = v[24]
																		v[25] = i.Model.KApplyArg(c, 3)
																		// KVariable _6 = v[25]
																		v[26] = i.Model.KApplyArg(c, 4)
																		// KVariable _7 = v[26]
																		v[27] = i.Model.KApplyArg(c, 5)
																		// KVariable _8 = v[27]
																		v[28] = i.Model.KApplyArg(c, 6)
																		// KVariable _9 = v[28]
																		v[29] = i.Model.KApplyArg(c, 7)
																		// KVariable _10 = v[29]
																		v[30] = i.Model.KApplyArg(c, 8)
																		// KVariable _11 = v[30]
																		// rule #294
																		// source: iele.k @1210
																		// {| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(LBLS),_2,_3,_4),IDX,GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(#token("1","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_5,_6,_7,_8,_9,_10,_11) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isInt(ACCTTO)),isInt(VALUE)),isInt(ACCTFROM)),isInts(ARGS)),isBool(STATIC)),isMap(LBLS)),isInt(GLIMIT)),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS))) ensures #token("true","Bool") [UNIQUE_ID(ed12ae4b75be6b1c05c34aee647fc0e944006918ee8cf8973d5cc2f8f50c0dc6) contentStartColumn(10) contentStartLine(1210) org.kframework.attributes.Location(Location(1210,10,1212,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS)))
																			v[31], i.evalErr = i.evalIsInts( // isInts(ARGS)
																				v[17] /*ARGS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(IDX,LBLS)))
																			bv[0] = /* rhs precomputed isInt(IDX) && isInt(ACCTTO) && isInt(VALUE) && isInt(ACCTFROM) */ /* && */ m.IsTrue(v[31]) /* && */ /* rhs precomputed isBool(STATIC) */  /* && */ /* rhs precomputed isMap(LBLS) */  /* && */ /* rhs precomputed isInt(GLIMIT) */ 
																			if bv[0] {
																				v[32], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LBLS)
																					v[14] /*IDX*/,
																					v[10] /*LBLS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = !(m.IsTrue(v[32]))
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS294(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 342
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable CODE = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if v[7]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(FUNC)
								v[8] = i.Model.KApplyArg(v[7], 0)
								// KVariable FUNC = v[8]
								v[9] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable GLIMIT = v[9]
									v[10] = i.Model.KApplyArg(v[2], 5)
									if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable VALUE = v[10]
										v[11] = i.Model.KApplyArg(v[2], 6)
										// KVariable ARGS = v[11]
										v[12] = i.Model.KApplyArg(v[2], 7)
										if v[12]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
											// KVariable STATIC = v[12]
											// KVariable DotVar1 = v[3]
											v[13] = i.Model.KApplyArg(c, 1)
											if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[14] = i.Model.KApplyArg(v[13], 0)
												if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[17] = i.Model.KApplyArg(v[15], 0)
														if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[16]
															v[18] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[18]
															v[19] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[19]
															v[20] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[20]
															v[21] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[21]
															v[22] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[22]
															v[23] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[23]
															v[24] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[24]
															// rule #342
															// source: iele.k @1205
															// {| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,CODE,`@__IELE-COMMON`(FUNC),GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isBool(STATIC)),isIeleName(FUNC)),isProgramCell(CODE)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT)) ensures #token("true","Bool") [UNIQUE_ID(c860a70a83aa78e6c0e3ba7a297e95347ea7d017e2587d39978defbfc5836033) contentStartColumn(10) contentStartLine(1205) org.kframework.attributes.Location(Location(1205,10,1208,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool"))
																v[25], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																	v[8] /*FUNC*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE))
																bv[1] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) && isBool(STATIC) */ /* && */ m.IsTrue(v[25])
																if bv[1] {
																	v[26], i.evalErr = i.evalIsProgramCell( // isProgramCell(CODE)
																		v[6] /*CODE*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[26])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),isProgramCell(CODE)),#token("true","Bool")),isInts(ARGS))
																bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																if bv[0] {
																	v[27], i.evalErr = i.evalIsInts( // isInts(ARGS)
																		v[11] /*ARGS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[27])
																}
																if bv[0] /* && */ /* rhs precomputed isInt(GLIMIT) */  {
																	// RHS
																	return i.stepRHS342(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 306
				if v[2]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(`%__IELE-COMMON`(REG),OPS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable REG = v[5]
							v[6] = i.Model.KApplyArg(v[2], 1)
							// KVariable OPS = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _31 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _32 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _33 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _34 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_28,_29,_30)
												v[17] = i.Model.KApplyArg(v[16], 0)
												if v[17]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
													v[18] = i.Model.KApplyArg(v[17], 0)
													if i.Model.Equals(v[18], m.BoolFalse) { // #token("false","Bool")
														v[19] = i.Model.KApplyArg(v[16], 1)
														// KVariable _28 = v[19]
														v[20] = i.Model.KApplyArg(v[16], 2)
														// KVariable _29 = v[20]
														v[21] = i.Model.KApplyArg(v[16], 3)
														// KVariable _30 = v[21]
														v[22] = i.Model.KApplyArg(c, 7)
														if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
															v[23] = i.Model.KApplyArg(v[22], 0)
															// KVariable _14 = v[23]
															v[24] = i.Model.KApplyArg(v[22], 1)
															// KVariable _15 = v[24]
															v[25] = i.Model.KApplyArg(v[22], 2)
															// KVariable _16 = v[25]
															v[26] = i.Model.KApplyArg(v[22], 3)
															// KVariable _17 = v[26]
															v[27] = i.Model.KApplyArg(v[22], 4)
															if v[27]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
																v[28] = i.Model.KApplyArg(v[27], 0)
																// KVariable _0 = v[28]
																v[29] = i.Model.KApplyArg(v[27], 1)
																// KVariable _1 = v[29]
																v[30] = i.Model.KApplyArg(v[27], 2)
																// KVariable _2 = v[30]
																v[31] = i.Model.KApplyArg(v[27], 3)
																// KVariable _3 = v[31]
																v[32] = i.Model.KApplyArg(v[27], 4)
																// KVariable _4 = v[32]
																v[33] = i.Model.KApplyArg(v[27], 5)
																// KVariable _5 = v[33]
																v[34] = i.Model.KApplyArg(v[27], 6)
																// KVariable _6 = v[34]
																v[35] = i.Model.KApplyArg(v[27], 7)
																if v[35]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
																	v[36] = i.Model.KApplyArg(v[35], 0)
																	if v[36]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																		// KVariable REGS = v[36]
																		v[37] = i.Model.KApplyArg(v[27], 8)
																		// KVariable _7 = v[37]
																		v[38] = i.Model.KApplyArg(v[27], 9)
																		// KVariable _8 = v[38]
																		v[39] = i.Model.KApplyArg(v[27], 10)
																		// KVariable _9 = v[39]
																		v[40] = i.Model.KApplyArg(v[27], 11)
																		// KVariable _10 = v[40]
																		v[41] = i.Model.KApplyArg(v[27], 12)
																		// KVariable _11 = v[41]
																		v[42] = i.Model.KApplyArg(v[27], 13)
																		// KVariable _12 = v[42]
																		v[43] = i.Model.KApplyArg(v[27], 14)
																		// KVariable _13 = v[43]
																		v[44] = i.Model.KApplyArg(v[22], 5)
																		// KVariable _18 = v[44]
																		v[45] = i.Model.KApplyArg(v[22], 6)
																		// KVariable _19 = v[45]
																		v[46] = i.Model.KApplyArg(v[22], 7)
																		// KVariable _20 = v[46]
																		v[47] = i.Model.KApplyArg(v[22], 8)
																		// KVariable _21 = v[47]
																		v[48] = i.Model.KApplyArg(v[22], 9)
																		// KVariable _22 = v[48]
																		v[49] = i.Model.KApplyArg(v[22], 10)
																		// KVariable _23 = v[49]
																		v[50] = i.Model.KApplyArg(v[22], 11)
																		// KVariable _24 = v[50]
																		v[51] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _25 = v[51]
																		v[52] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _26 = v[52]
																		v[53] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _27 = v[53]
																		v[54] = i.Model.KApplyArg(c, 8)
																		// KVariable _35 = v[54]
																		// rule #306
																		// source: iele.k @370
																		// {| rule `<generatedTop>`(`<k>`(``operandList(`%__IELE-COMMON`(REG),OPS)=>lookupRegisters(operandList(`%__IELE-COMMON`(REG),OPS),REGS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_31,_32,_33,_34,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_28,_29,_30),`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_35) requires `_andBool_`(`_andBool_`(isInt(REG),isOperands(OPS)),isArray(REGS)) ensures #token("true","Bool") [UNIQUE_ID(bea8e3fb045aa76f117ec8504b59b8a2c35f23ece42143c14fb07045bb0a7917) contentStartColumn(10) contentStartLine(370) org.kframework.attributes.Location(Location(370,10,370,132)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(OPS)),#token("true","Bool"))
																			v[55], i.evalErr = i.evalIsOperands( // isOperands(OPS)
																				v[6] /*OPS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			if /* rhs precomputed isInt(REG) */ /* && */ m.IsTrue(v[55]) /* && */ /* rhs precomputed isArray(REGS) */  {
																				// RHS
																				return i.stepRHS306(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 311
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXcolonXuXuIELEXhyphenCOMMON2 { // `_:__IELE-COMMON`(NAME,BLOCK)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable BLOCK = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _6 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _7 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _8 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _9 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _10 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_4,_5,`<currentContract>`(_0,_1,_2,_3,`<currentFunction>`(DotVar4,`<labels>`(LABELS),`<currentInstructions>`(DotVar5))))
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
							v[13] = i.Model.KApplyArg(v[12], 0)
							if i.Model.Equals(v[13], m.BoolTrue) { // #token("true","Bool")
								v[14] = i.Model.KApplyArg(v[11], 1)
								// KVariable _4 = v[14]
								v[15] = i.Model.KApplyArg(v[11], 2)
								// KVariable _5 = v[15]
								v[16] = i.Model.KApplyArg(v[11], 3)
								if v[16]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_0,_1,_2,_3,`<currentFunction>`(DotVar4,`<labels>`(LABELS),`<currentInstructions>`(DotVar5)))
									v[17] = i.Model.KApplyArg(v[16], 0)
									// KVariable _0 = v[17]
									v[18] = i.Model.KApplyArg(v[16], 1)
									// KVariable _1 = v[18]
									v[19] = i.Model.KApplyArg(v[16], 2)
									// KVariable _2 = v[19]
									v[20] = i.Model.KApplyArg(v[16], 3)
									// KVariable _3 = v[20]
									v[21] = i.Model.KApplyArg(v[16], 4)
									if v[21]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(DotVar4,`<labels>`(LABELS),`<currentInstructions>`(DotVar5))
										v[22] = i.Model.KApplyArg(v[21], 0)
										// KVariable DotVar4 = v[22]
										v[23] = i.Model.KApplyArg(v[21], 1)
										if v[23]&kapplyMatchMask == kapplyMatchLblXltlabelsXgt1 { // `<labels>`(LABELS)
											v[24] = i.Model.KApplyArg(v[23], 0)
											if v[24]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
												// KVariable LABELS = v[24]
												v[25] = i.Model.KApplyArg(v[21], 2)
												if v[25]&kapplyMatchMask == kapplyMatchLblXltcurrentInstructionsXgt1 { // `<currentInstructions>`(DotVar5)
													v[26] = i.Model.KApplyArg(v[25], 0)
													// KSequence, size 1:DotVar5
													// KVariable DotVar5 = v[26]
													v[27] = i.Model.KApplyArg(c, 7)
													// KVariable _11 = v[27]
													v[28] = i.Model.KApplyArg(c, 8)
													// KVariable _12 = v[28]
													// rule #311
													// source: well-formedness.k @174
													// {| rule `<generatedTop>`(`<k>`(`` `_:__IELE-COMMON`(NAME,BLOCK)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_4,_5,`<currentContract>`(_0,_1,_2,_3,`<currentFunction>`(DotVar4,`<labels>`(LABELS=>`_Set_`(LABELS,`SetItem`(NAME))),`<currentInstructions>`(``.K=>BLOCK``~>DotVar5)))),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInstructions(BLOCK)),isSet(LABELS)),`notBool_`(`Set:in`(NAME,LABELS))) ensures #token("true","Bool") [UNIQUE_ID(b6ba756b691784aa07920cf3dfd22a4836b7d9fa94120edd35d6e27ce8a017fe) contentStartColumn(10) contentStartLine(174) org.kframework.attributes.Location(Location(174,10,178,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInstructions(BLOCK)),#token("true","Bool")),`notBool_`(`Set:in`(NAME,LABELS)))
														v[29], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
															v[4] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isIeleName(NAME),isInstructions(BLOCK))
														bv[1] = m.IsTrue(v[29])
														if bv[1] {
															v[30], i.evalErr = i.evalIsInstructions( // isInstructions(BLOCK)
																v[5] /*BLOCK*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[30])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isInstructions(BLOCK)),#token("true","Bool")),`notBool_`(`Set:in`(NAME,LABELS)))
														bv[0] = bv[1] /* && */ /* rhs precomputed isSet(LABELS) */ 
														if bv[0] {
															v[31], i.evalErr = i.evalSetXcolonin( // `Set:in`(NAME,LABELS)
																v[4] /*NAME*/,
																v[24] /*LABELS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = !(m.IsTrue(v[31]))
														}
														if bv[0] {
															// RHS
															return i.stepRHS311(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 319
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashregisterDelta2 { // #registerDelta(`%__IELE-COMMON`(REG),NEWSIZE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable REG = v[5]
							v[6] = i.Model.KApplyArg(v[2], 1)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable NEWSIZE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _26 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _27 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _28 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _29 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _30 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _12 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _13 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													// KVariable _15 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 4)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _0 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														// KVariable _1 = v[24]
														v[25] = i.Model.KApplyArg(v[22], 2)
														// KVariable _2 = v[25]
														v[26] = i.Model.KApplyArg(v[22], 3)
														// KVariable _3 = v[26]
														v[27] = i.Model.KApplyArg(v[22], 4)
														// KVariable _4 = v[27]
														v[28] = i.Model.KApplyArg(v[22], 5)
														// KVariable _5 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 6)
														// KVariable _6 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 7)
														if v[30]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[31] = i.Model.KApplyArg(v[30], 0)
															if v[31]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[31]
																v[32] = i.Model.KApplyArg(v[22], 8)
																// KVariable _7 = v[32]
																v[33] = i.Model.KApplyArg(v[22], 9)
																if v[33]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
																	v[34] = i.Model.KApplyArg(v[33], 0)
																	if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable PEAK = v[34]
																		v[35] = i.Model.KApplyArg(v[22], 10)
																		if v[35]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																			v[36] = i.Model.KApplyArg(v[35], 0)
																			if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable CURR = v[36]
																				v[37] = i.Model.KApplyArg(v[22], 11)
																				// KVariable _8 = v[37]
																				v[38] = i.Model.KApplyArg(v[22], 12)
																				// KVariable _9 = v[38]
																				v[39] = i.Model.KApplyArg(v[22], 13)
																				// KVariable _10 = v[39]
																				v[40] = i.Model.KApplyArg(v[22], 14)
																				// KVariable _11 = v[40]
																				v[41] = i.Model.KApplyArg(v[17], 5)
																				// KVariable _16 = v[41]
																				v[42] = i.Model.KApplyArg(v[17], 6)
																				// KVariable _17 = v[42]
																				v[43] = i.Model.KApplyArg(v[17], 7)
																				// KVariable _18 = v[43]
																				v[44] = i.Model.KApplyArg(v[17], 8)
																				// KVariable _19 = v[44]
																				v[45] = i.Model.KApplyArg(v[17], 9)
																				// KVariable _20 = v[45]
																				v[46] = i.Model.KApplyArg(v[17], 10)
																				// KVariable _21 = v[46]
																				v[47] = i.Model.KApplyArg(v[17], 11)
																				// KVariable _22 = v[47]
																				v[48] = i.Model.KApplyArg(v[17], 12)
																				// KVariable _23 = v[48]
																				v[49] = i.Model.KApplyArg(v[17], 13)
																				// KVariable _24 = v[49]
																				v[50] = i.Model.KApplyArg(v[17], 14)
																				// KVariable _25 = v[50]
																				v[51] = i.Model.KApplyArg(c, 8)
																				// KVariable _31 = v[51]
																				// rule #319
																				// source: iele-gas.k @342
																				// {| rule `<generatedTop>`(`<k>`(``#registerDelta(`%__IELE-COMMON`(REG),NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),intSize(getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))))),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(REG)),isArray(REGS)),isInt(NEWSIZE)),isInt(CURR)) ensures #token("true","Bool") [UNIQUE_ID(b09c6ef4a36919022d65a5b9964ca84dfbc01dfe48eb98dae576a61f7246b55d) contentStartColumn(10) contentStartLine(342) org.kframework.attributes.Location(Location(342,10,345,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES precomputed isInt(PEAK) && isInt(REG) && isArray(REGS) && isInt(NEWSIZE) && isInt(CURR)
																					// RHS
																					return i.stepRHS319(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 321, 485
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=shift_,__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 321
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #321
									// source: iele-syntax.k @169
									// {| rule `<generatedTop>`(`<k>`(`` `_=shift_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=shift_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8445586802f28452ea09e0d7ab1cbcc773bc30ea75a2bea711e13065a95500b1) heat() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(777457133) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS321(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 485
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #485
									// source: iele-syntax.k @169
									// {| rule `<generatedTop>`(`<k>`(`` `_=shift_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=shift_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(ac3eacd19b7a732517892c40e9372a4a2d0da9d67082b148c58f5a4c47987a7d) heat() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(777457133) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS485(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 333
				if v[2]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteinstructionListXquoteXrbracket0 { // `.List{"instructionList"}`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					// KVariable _0 = v[4]
					v[5] = i.Model.KApplyArg(c, 2)
					// KVariable _1 = v[5]
					v[6] = i.Model.KApplyArg(c, 3)
					// KVariable _2 = v[6]
					v[7] = i.Model.KApplyArg(c, 4)
					// KVariable _3 = v[7]
					v[8] = i.Model.KApplyArg(c, 5)
					// KVariable _4 = v[8]
					v[9] = i.Model.KApplyArg(c, 6)
					// KVariable _5 = v[9]
					v[10] = i.Model.KApplyArg(c, 7)
					// KVariable _6 = v[10]
					v[11] = i.Model.KApplyArg(c, 8)
					// KVariable _7 = v[11]
					// rule #333
					// source: well-formedness.k @182
					// {| rule `<generatedTop>`(`<k>`(`` `.List{"instructionList"}`(.KList)=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bab10e606ce7f995d8e2fcd9ea52b4a6834324e99e458360c1c09a378e2a1344) contentStartColumn(10) contentStartLine(182) org.kframework.attributes.Location(Location(182,10,182,28)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
					if !matched {
						// RHS
						return i.stepRHS333(v, bv, config)
					}
				}
				// rules: 345, 396
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=cmp__,__IELE-COMMON`(K0,K1,K2,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 345
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #345
									// source: iele-syntax.k @172
									// {| rule `<generatedTop>`(`<k>`(`` `_=cmp__,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(03fe408446d2e7e8ec10b3979e689b94d440e41eb3f4c90385e8b7661d606946) heat() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1893960929) seqstrict(3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsPredicate( // isPredicate(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K2),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS345(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 396
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #396
									// source: iele-syntax.k @172
									// {| rule `<generatedTop>`(`<k>`(`` `_=cmp__,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=cmp__,__IELE-COMMON1_`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(02ecfc57c2484d39c60b06ed40f62ba7bbf3bc22b3eda8b9f8992aaceee1c2f6) heat() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1893960929) seqstrict(3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsPredicate( // isPredicate(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS396(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 354
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckLVal1 { // checkLVal(`%__IELE-COMMON`(NAME))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(NAME)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable NAME = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[6]
						v[7] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[7]
						v[8] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[8]
						v[9] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[9]
						v[10] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[10]
						v[11] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[11]
						v[12] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[12]
						v[13] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[13]
						// rule #354
						// source: well-formedness.k @391
						// {| rule `<generatedTop>`(`<k>`(``checkLVal(`%__IELE-COMMON`(NAME))=>checkName(NAME)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isIeleName(NAME) ensures #token("true","Bool") [UNIQUE_ID(3cefbc4efbaaddf52f36a1aff74400e863bf5377e9a161b5dd38ec811633bfe0) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isIeleName(NAME)
							v[14], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
								v[5] /*NAME*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[14]) {
								// RHS
								return i.stepRHS354(v, bv, config)
							}
						}
					}
				}
				// rules: 355, 364
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=xor_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 355
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #355
									// source: iele-syntax.k @168
									// {| rule `<generatedTop>`(`<k>`(`` `_=xor_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=xor_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(db0290aca9b06d8f2a2e25a7318e85ce0ddf71e875104c25dd032bf1a37ea622) heat() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(901205084) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS355(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 364
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #364
									// source: iele-syntax.k @168
									// {| rule `<generatedTop>`(`<k>`(`` `_=xor_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=xor_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(9092dfe061ee69f16d8978a44779e2a011309d1c598a9c1f0b31462448ea577f) heat() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(901205084) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS364(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 359
				if v[2]&kapplyMatchMask == kapplyMatchLblMemoryDirectDelta1 { // memoryDirectDelta(DELTA)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable DELTA = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _27 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										if v[15]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[16] = i.Model.KApplyArg(v[15], 0)
											// KVariable _13 = v[16]
											v[17] = i.Model.KApplyArg(v[15], 1)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[15], 2)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[15], 3)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[15], 4)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_9,_10,_11,_12)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _0 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _1 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _2 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _3 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												// KVariable _4 = v[25]
												v[26] = i.Model.KApplyArg(v[20], 5)
												// KVariable _5 = v[26]
												v[27] = i.Model.KApplyArg(v[20], 6)
												// KVariable _6 = v[27]
												v[28] = i.Model.KApplyArg(v[20], 7)
												// KVariable _7 = v[28]
												v[29] = i.Model.KApplyArg(v[20], 8)
												// KVariable _8 = v[29]
												v[30] = i.Model.KApplyArg(v[20], 9)
												if v[30]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
													v[31] = i.Model.KApplyArg(v[30], 0)
													if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable PEAK = v[31]
														v[32] = i.Model.KApplyArg(v[20], 10)
														if v[32]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
															v[33] = i.Model.KApplyArg(v[32], 0)
															if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable CURR = v[33]
																v[34] = i.Model.KApplyArg(v[20], 11)
																// KVariable _9 = v[34]
																v[35] = i.Model.KApplyArg(v[20], 12)
																// KVariable _10 = v[35]
																v[36] = i.Model.KApplyArg(v[20], 13)
																// KVariable _11 = v[36]
																v[37] = i.Model.KApplyArg(v[20], 14)
																// KVariable _12 = v[37]
																v[38] = i.Model.KApplyArg(v[15], 5)
																// KVariable _17 = v[38]
																v[39] = i.Model.KApplyArg(v[15], 6)
																// KVariable _18 = v[39]
																v[40] = i.Model.KApplyArg(v[15], 7)
																// KVariable _19 = v[40]
																v[41] = i.Model.KApplyArg(v[15], 8)
																// KVariable _20 = v[41]
																v[42] = i.Model.KApplyArg(v[15], 9)
																// KVariable _21 = v[42]
																v[43] = i.Model.KApplyArg(v[15], 10)
																// KVariable _22 = v[43]
																v[44] = i.Model.KApplyArg(v[15], 11)
																// KVariable _23 = v[44]
																v[45] = i.Model.KApplyArg(v[15], 12)
																// KVariable _24 = v[45]
																v[46] = i.Model.KApplyArg(v[15], 13)
																// KVariable _25 = v[46]
																v[47] = i.Model.KApplyArg(v[15], 14)
																// KVariable _26 = v[47]
																v[48] = i.Model.KApplyArg(c, 8)
																// KVariable _32 = v[48]
																// rule #359
																// source: iele-gas.k @394
																// {| rule `<generatedTop>`(`<k>`(``memoryDirectDelta(DELTA)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,DELTA))),`<currentMemory>`(CURR=>`_+Int_`(CURR,DELTA)),_9,_10,_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(isInt(PEAK),isInt(DELTA)),isInt(CURR)) ensures #token("true","Bool") [UNIQUE_ID(1ba18d22a9fb731653ff4becfa390cfe973efd5f48bbad1fb2d86a71707cd282) contentStartColumn(10) contentStartLine(394) org.kframework.attributes.Location(Location(394,10,396,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES precomputed isInt(PEAK) && isInt(DELTA) && isInt(CURR)
																	// RHS
																	return i.stepRHS359(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 363, 560
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=exp_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 363
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #363
									// source: iele-syntax.k @153
									// {| rule `<generatedTop>`(`<k>`(`` `_=exp_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=exp_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(0841476cd32b6bbc6df05d5fad34b56860180498c0c10dbe7166512c04fa5248) heat() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1399701152) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS363(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 560
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #560
									// source: iele-syntax.k @153
									// {| rule `<generatedTop>`(`<k>`(`` `_=exp_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=exp_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(2a66108e12649113228c8b3a1dd91abacaf82369086e08e2d672baefb751a335) heat() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1399701152) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS560(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 374
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpushWorldStateXuIELEXhyphenINFRASTRUCTURE0 { // `#pushWorldState_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _17 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _18 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _19 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _20 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _21 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,`<interimStates>`(DotVar3),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltinterimStatesXgt1 { // `<interimStates>`(DotVar3)
											v[18] = i.Model.KApplyArg(v[17], 0)
											if v[18]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
												// KVariable DotVar3 = v[18]
												v[19] = i.Model.KApplyArg(v[14], 3)
												// KVariable _2 = v[19]
												v[20] = i.Model.KApplyArg(v[14], 4)
												// KVariable _3 = v[20]
												v[21] = i.Model.KApplyArg(v[14], 5)
												// KVariable _4 = v[21]
												v[22] = i.Model.KApplyArg(v[14], 6)
												// KVariable _5 = v[22]
												v[23] = i.Model.KApplyArg(v[14], 7)
												// KVariable _6 = v[23]
												v[24] = i.Model.KApplyArg(v[14], 8)
												// KVariable _7 = v[24]
												v[25] = i.Model.KApplyArg(v[14], 9)
												// KVariable _8 = v[25]
												v[26] = i.Model.KApplyArg(v[14], 10)
												// KVariable _9 = v[26]
												v[27] = i.Model.KApplyArg(v[14], 11)
												// KVariable _10 = v[27]
												v[28] = i.Model.KApplyArg(v[14], 12)
												// KVariable _11 = v[28]
												v[29] = i.Model.KApplyArg(v[14], 13)
												// KVariable _12 = v[29]
												v[30] = i.Model.KApplyArg(v[14], 14)
												// KVariable _13 = v[30]
												v[31] = i.Model.KApplyArg(c, 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(ACCTDATA),_14,_15,_16)
													v[32] = i.Model.KApplyArg(v[31], 0)
													if v[32]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
														v[33] = i.Model.KApplyArg(v[32], 0)
														if v[33]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
															// KVariable ACCTS = v[33]
															v[34] = i.Model.KApplyArg(v[31], 1)
															if v[34]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(ACCTDATA)
																v[35] = i.Model.KApplyArg(v[34], 0)
																if v[35]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																	// KVariable ACCTDATA = v[35]
																	v[36] = i.Model.KApplyArg(v[31], 2)
																	// KVariable _14 = v[36]
																	v[37] = i.Model.KApplyArg(v[31], 3)
																	// KVariable _15 = v[37]
																	v[38] = i.Model.KApplyArg(v[31], 4)
																	// KVariable _16 = v[38]
																	// rule #374
																	// source: iele.k @275
																	// {| rule `<generatedTop>`(`<k>`(`` `#pushWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_17,_18,_19,_20,_21,`<iele>`(_0,_1,`<interimStates>`(DotVar3=>`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(ACCTDATA),_14,_15,_16)) requires `_andBool_`(isSet(ACCTS),`_andBool_`(#token("true","Bool"),isAccountCellMap(ACCTDATA))) ensures #token("true","Bool") [UNIQUE_ID(27f96ccd1ae4721d69de9f7c73dd5380302f9a3f322fd515ab2ec040d7c72c3b) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,278,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// REQUIRES precomputed isSet(ACCTS) && KToken && isAccountCellMap(ACCTDATA)
																		// RHS
																		return i.stepRHS374(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 379
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpushCallStackXuIELEXhyphenINFRASTRUCTURE0 { // `#pushCallStack_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _28 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _29 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _30 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _31 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _32 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_15,`<callStack>`(DotVar3),_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _15 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltcallStackXgt1 { // `<callStack>`(DotVar3)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
												// KVariable DotVar3 = v[17]
												v[18] = i.Model.KApplyArg(v[14], 2)
												// KVariable _16 = v[18]
												v[19] = i.Model.KApplyArg(v[14], 3)
												// KVariable _17 = v[19]
												v[20] = i.Model.KApplyArg(v[14], 4)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)
													v[21] = i.Model.KApplyArg(v[20], 0)
													// KVariable _0 = v[21]
													v[22] = i.Model.KApplyArg(v[20], 1)
													// KVariable _1 = v[22]
													v[23] = i.Model.KApplyArg(v[20], 2)
													// KVariable _2 = v[23]
													v[24] = i.Model.KApplyArg(v[20], 3)
													// KVariable _3 = v[24]
													v[25] = i.Model.KApplyArg(v[20], 4)
													// KVariable _4 = v[25]
													v[26] = i.Model.KApplyArg(v[20], 5)
													// KVariable _5 = v[26]
													v[27] = i.Model.KApplyArg(v[20], 6)
													// KVariable _6 = v[27]
													v[28] = i.Model.KApplyArg(v[20], 7)
													// KVariable _7 = v[28]
													v[29] = i.Model.KApplyArg(v[20], 8)
													// KVariable _8 = v[29]
													v[30] = i.Model.KApplyArg(v[20], 9)
													// KVariable _9 = v[30]
													v[31] = i.Model.KApplyArg(v[20], 10)
													// KVariable _10 = v[31]
													v[32] = i.Model.KApplyArg(v[20], 11)
													// KVariable _11 = v[32]
													v[33] = i.Model.KApplyArg(v[20], 12)
													// KVariable _12 = v[33]
													v[34] = i.Model.KApplyArg(v[20], 13)
													// KVariable _13 = v[34]
													v[35] = i.Model.KApplyArg(v[20], 14)
													// KVariable _14 = v[35]
													v[36] = i.Model.KApplyArg(v[14], 5)
													// KVariable _18 = v[36]
													v[37] = i.Model.KApplyArg(v[14], 6)
													// KVariable _19 = v[37]
													v[38] = i.Model.KApplyArg(v[14], 7)
													// KVariable _20 = v[38]
													v[39] = i.Model.KApplyArg(v[14], 8)
													// KVariable _21 = v[39]
													v[40] = i.Model.KApplyArg(v[14], 9)
													// KVariable _22 = v[40]
													v[41] = i.Model.KApplyArg(v[14], 10)
													// KVariable _23 = v[41]
													v[42] = i.Model.KApplyArg(v[14], 11)
													// KVariable _24 = v[42]
													v[43] = i.Model.KApplyArg(v[14], 12)
													// KVariable _25 = v[43]
													v[44] = i.Model.KApplyArg(v[14], 13)
													// KVariable _26 = v[44]
													v[45] = i.Model.KApplyArg(v[14], 14)
													// KVariable _27 = v[45]
													v[46] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[46]
													// rule #379
													// source: iele.k @252
													// {| rule `<generatedTop>`(`<k>`(`` `#pushCallStack_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_15,`<callStack>`(DotVar3=>`_List_`(`ListItem`(`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)),DotVar3)),_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10)) ensures #token("true","Bool") [UNIQUE_ID(c68276cfba34d7285e18d104c5c875086a46f9b6f7998426cd1c9ca28e1d3f6f) contentStartColumn(10) contentStartLine(252) org.kframework.attributes.Location(Location(252,10,254,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10))
														v[47], i.evalErr = i.evalIsStaticCell( // isStaticCell(_14)
															v[35] /*_14*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3))
														bv[13] = /* rhs KToken */ /* && */ m.IsTrue(v[47])
														if bv[13] {
															v[48], i.evalErr = i.evalIsIDCell( // isIdCell(_3)
																v[24] /*_3*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[13] = m.IsTrue(v[48])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9))
														bv[12] = bv[13]
														if bv[12] {
															v[49], i.evalErr = i.evalIsPeakMemoryCell( // isPeakMemoryCell(_9)
																v[30] /*_9*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[12] = m.IsTrue(v[49])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7))
														bv[11] = bv[12]
														if bv[11] {
															v[50], i.evalErr = i.evalIsRegsCell( // isRegsCell(_7)
																v[28] /*_7*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[11] = m.IsTrue(v[50])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5))
														bv[10] = bv[11]
														if bv[10] {
															v[51], i.evalErr = i.evalIsCallDataCell( // isCallDataCell(_5)
																v[26] /*_5*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[10] = m.IsTrue(v[51])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4))
														bv[9] = bv[10]
														if bv[9] {
															v[52], i.evalErr = i.evalIsCallerCell( // isCallerCell(_4)
																v[25] /*_4*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[9] = m.IsTrue(v[52])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13))
														bv[8] = bv[9]
														if bv[8] {
															v[53], i.evalErr = i.evalIsPreviousGasCell( // isPreviousGasCell(_13)
																v[34] /*_13*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[8] = m.IsTrue(v[53])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8))
														bv[7] = bv[8]
														if bv[7] {
															v[54], i.evalErr = i.evalIsLocalMemCell( // isLocalMemCell(_8)
																v[29] /*_8*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[7] = m.IsTrue(v[54])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6))
														bv[6] = bv[7]
														if bv[6] {
															v[55], i.evalErr = i.evalIsCallValueCell( // isCallValueCell(_6)
																v[27] /*_6*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[6] = m.IsTrue(v[55])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11))
														bv[5] = bv[6]
														if bv[5] {
															v[56], i.evalErr = i.evalIsFidCell( // isFidCell(_11)
																v[32] /*_11*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[5] = m.IsTrue(v[56])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0))
														bv[4] = bv[5]
														if bv[4] {
															v[57], i.evalErr = i.evalIsProgramCell( // isProgramCell(_0)
																v[21] /*_0*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[4] = m.IsTrue(v[57])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1))
														bv[3] = bv[4]
														if bv[3] {
															v[58], i.evalErr = i.evalIsCallDepthCell( // isCallDepthCell(_1)
																v[22] /*_1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[3] = m.IsTrue(v[58])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2))
														bv[2] = bv[3]
														if bv[2] {
															v[59], i.evalErr = i.evalIsLocalCallsCell( // isLocalCallsCell(_2)
																v[23] /*_2*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[2] = m.IsTrue(v[59])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12))
														bv[1] = bv[2]
														if bv[1] {
															v[60], i.evalErr = i.evalIsGasCell( // isGasCell(_12)
																v[33] /*_12*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[60])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10))
														bv[0] = bv[1]
														if bv[0] {
															v[61], i.evalErr = i.evalIsCurrentMemoryCell( // isCurrentMemoryCell(_10)
																v[31] /*_10*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[61])
														}
														if bv[0] {
															// RHS
															return i.stepRHS379(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 383
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmkCodeDepositXuXuXuXuXuXuXuIELE6 { // `#mkCodeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable LEN = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable CODE = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable STATUS = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							// KVariable ACCTOUT = v[8]
							v[9] = i.Model.KApplyArg(v[2], 5)
							if v[9]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
								// KVariable NEW = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _14 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												if v[16]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
													v[17] = i.Model.KApplyArg(v[16], 0)
													// KVariable EXECMODE = v[17]
													v[18] = i.Model.KApplyArg(c, 4)
													if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
														v[19] = i.Model.KApplyArg(v[18], 0)
														// KVariable SCHED = v[19]
														v[20] = i.Model.KApplyArg(c, 5)
														// KVariable _15 = v[20]
														v[21] = i.Model.KApplyArg(c, 6)
														// KVariable _16 = v[21]
														v[22] = i.Model.KApplyArg(c, 7)
														if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
															v[23] = i.Model.KApplyArg(v[22], 0)
															if v[23]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(`.List{"operandList"}`(.KList))
																v[24] = i.Model.KApplyArg(v[23], 0)
																if v[24]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																	v[25] = i.Model.KApplyArg(v[22], 1)
																	// KVariable _0 = v[25]
																	v[26] = i.Model.KApplyArg(v[22], 2)
																	// KVariable _1 = v[26]
																	v[27] = i.Model.KApplyArg(v[22], 3)
																	// KVariable _2 = v[27]
																	v[28] = i.Model.KApplyArg(v[22], 4)
																	// KVariable _3 = v[28]
																	v[29] = i.Model.KApplyArg(v[22], 5)
																	// KVariable _4 = v[29]
																	v[30] = i.Model.KApplyArg(v[22], 6)
																	// KVariable _5 = v[30]
																	v[31] = i.Model.KApplyArg(v[22], 7)
																	// KVariable _6 = v[31]
																	v[32] = i.Model.KApplyArg(v[22], 8)
																	// KVariable _7 = v[32]
																	v[33] = i.Model.KApplyArg(v[22], 9)
																	// KVariable _8 = v[33]
																	v[34] = i.Model.KApplyArg(v[22], 10)
																	// KVariable _9 = v[34]
																	v[35] = i.Model.KApplyArg(v[22], 11)
																	// KVariable _10 = v[35]
																	v[36] = i.Model.KApplyArg(v[22], 12)
																	// KVariable _11 = v[36]
																	v[37] = i.Model.KApplyArg(v[22], 13)
																	// KVariable _12 = v[37]
																	v[38] = i.Model.KApplyArg(v[22], 14)
																	// KVariable _13 = v[38]
																	v[39] = i.Model.KApplyArg(c, 8)
																	// KVariable _17 = v[39]
																	// rule #383
																	// source: iele.k @1436
																	// {| rule `<generatedTop>`(`<k>`(`` `#mkCodeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)=>`#if_#then_#else_#fi_K-EQUAL`(`_orBool__BOOL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`notBool_`(NEW)),.K,`_*Int__INT`(`_<_>_IELE-GAS`(`Gcodedeposit_IELE-GAS`(.KList),SCHED),LEN)~>`#deductGas_IELE-GAS`(.KList))~>`#finishCodeDeposit______IELE`(ACCT,CODE,STATUS,ACCTOUT,NEW)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,`<mode>`(EXECMODE),`<schedule>`(SCHED),_15,_16,`<iele>`(`<output>`(`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS)),isInt(ACCT)),isSchedule(SCHED)),isMode(EXECMODE)),isBool(NEW)) ensures #token("true","Bool") [UNIQUE_ID(39533463be993be2436e6ac9a94d933050856ad6e33ad27bf6ae0f0d654df451) contentStartColumn(10) contentStartLine(1436) org.kframework.attributes.Location(Location(1436,10,1443,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS)),#token("true","Bool")),isSchedule(SCHED)),isMode(EXECMODE)),#token("true","Bool"))
																		v[40], i.evalErr = i.evalIsContract( // isContract(CODE)
																			v[6] /*CODE*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),isLValue(ACCTOUT))
																		bv[3] = /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[40])
																		if bv[3] {
																			v[41], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																				v[8] /*ACCTOUT*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[3] = m.IsTrue(v[41])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS))
																		bv[2] = bv[3]
																		if bv[2] {
																			v[42], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																				v[7] /*STATUS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[2] = m.IsTrue(v[42])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS)),#token("true","Bool")),isSchedule(SCHED))
																		bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCT) */ 
																		if bv[1] {
																			v[43], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																				v[19] /*SCHED*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[43])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),isLValue(ACCTOUT)),isLValue(STATUS)),#token("true","Bool")),isSchedule(SCHED)),isMode(EXECMODE))
																		bv[0] = bv[1]
																		if bv[0] {
																			v[44], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																				v[17] /*EXECMODE*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[0] = m.IsTrue(v[44])
																		}
																		if bv[0] /* && */ /* rhs precomputed isBool(NEW) */  {
																			// RHS
																			return i.stepRHS383(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 386
				// KVariable OP = v[2]
				// KVariable DotVar1 = v[3]
				v[4] = i.Model.KApplyArg(c, 1)
				if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
					v[5] = i.Model.KApplyArg(v[4], 0)
					if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
						_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
						if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
							v[8] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
								// KVariable SREST = v[7]
								v[9] = i.Model.KApplyArg(c, 2)
								// KVariable _0 = v[9]
								v[10] = i.Model.KApplyArg(c, 3)
								// KVariable _1 = v[10]
								v[11] = i.Model.KApplyArg(c, 4)
								// KVariable _2 = v[11]
								v[12] = i.Model.KApplyArg(c, 5)
								// KVariable _3 = v[12]
								v[13] = i.Model.KApplyArg(c, 6)
								// KVariable _4 = v[13]
								v[14] = i.Model.KApplyArg(c, 7)
								// KVariable _5 = v[14]
								v[15] = i.Model.KApplyArg(c, 8)
								// KVariable _6 = v[15]
								// rule #386
								// source: iele.k @391
								// {| rule `<generatedTop>`(`<k>`(``OP=>`#gas[_]_IELE-INFRASTRUCTURE`(`#addr?(_)_IELE-INFRASTRUCTURE`(OP))~>`#exec__IELE-INFRASTRUCTURE`(`#addr?(_)_IELE-INFRASTRUCTURE`(OP))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(OP),isKResult(OP)) ensures #token("true","Bool") [UNIQUE_ID(a22fb615e7c978f6d701a4a86e83bd26afe1a2cad2d4fb595d400bd75decdfac) contentStartColumn(10) contentStartLine(391) org.kframework.attributes.Location(Location(391,10,391,103)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isInstruction(OP),isKResult(OP))
									v[16], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
										v[2] /*OP*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isInstruction(OP),isKResult(OP))
									bv[0] = m.IsTrue(v[16])
									if bv[0] {
										v[17], i.evalErr = i.evalIsKResult( // isKResult(OP)
											v[2] /*OP*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[17])
									}
									if bv[0] {
										// RHS
										return i.stepRHS386(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 387
				if v[2]&kapplyMatchMask == kapplyMatchLblLogXuXuIELEXhyphenCOMMON1 { // `log__IELE-COMMON`(HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable HOLE = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #387
									// source: iele-syntax.k @208
									// {| rule `<generatedTop>`(`<k>`(`` `log__IELE-COMMON`(HOLE)=>HOLE~>`#freezerlog__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(10ede96b974da677f6b1d11cfb3a58f170a9d08cc1f173a8632e92e0effcad17) heat() hybrid() org.kframework.attributes.Location(Location(208,22,208,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(333040629) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[17], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[18]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS387(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 418, 553
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 418
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #418
									// source: iele-syntax.k @192
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_(_)_IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=call_(_)_IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7a73914af6642262dc802aa4be0e99ccec2a06ffdb959cd5e31bd5038f4fc574) heat() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(394785440) strict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
											v[6] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(HOLE),isLValues(K0))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS418(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 553
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #553
									// source: iele-syntax.k @192
									// {| rule `<generatedTop>`(`<k>`(`` `_=call_(_)_IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=call_(_)_IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(4c2f2e29d8f364e4917fa732546edb197c5b96e6aeb30d875ec12e86d7abddd1) heat() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(394785440) strict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsOperands( // isOperands(K2)
											v[6] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K2),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[4] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS553(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 419
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckContractXuXuIELE1 { // `#checkContract__IELE`(CONTRACT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable CONTRACT = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
										v[13] = i.Model.KApplyArg(v[12], 0)
										// KVariable SCHED = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _321 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _4 = v[17]
										// rule #419
										// source: iele.k @1374
										// {| rule `<generatedTop>`(`<k>`(`` `#checkContract__IELE`(CONTRACT)=>CONTRACT~>`#finishTypeChecking_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_321=>`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),`<well-formedness-schedule>`(SCHED),initContractsCell(.KList),initCurrentContractCell(.KList)),_3,_4) requires `_andBool_`(`_andBool_`(isWellFormednessCell(_321),isSchedule(SCHED)),isContract(CONTRACT)) ensures #token("true","Bool") [UNIQUE_ID(12ccacffc4eef7795d64798b8ddb41c68cb108a0539a02fd24e797aed6e0d13f) contentStartColumn(10) contentStartLine(1374) org.kframework.attributes.Location(Location(1374,10,1381,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(isWellFormednessCell(_321),isSchedule(SCHED)),isContract(CONTRACT))
											v[18], i.evalErr = i.evalIsWellFormednessCell( // isWellFormednessCell(_321)
												v[15] /*_321*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isWellFormednessCell(_321),isSchedule(SCHED))
											bv[1] = m.IsTrue(v[18])
											if bv[1] {
												v[19], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
													v[13] /*SCHED*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[19])
											}
											// `_andBool_`(`_andBool_`(isWellFormednessCell(_321),isSchedule(SCHED)),isContract(CONTRACT))
											bv[0] = bv[1]
											if bv[0] {
												v[20], i.evalErr = i.evalIsContract( // isContract(CONTRACT)
													v[4] /*CONTRACT*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[20])
											}
											if bv[0] {
												// RHS
												return i.stepRHS419(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 428
				if v[2]&kapplyMatchMask == kapplyMatchLblSelfdestructXuXuIELEXhyphenCOMMON1 { // `selfdestruct__IELE-COMMON`(HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable HOLE = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #428
									// source: iele-syntax.k @220
									// {| rule `<generatedTop>`(`<k>`(`` `selfdestruct__IELE-COMMON`(HOLE)=>HOLE~>`#freezerselfdestruct__IELE-COMMON0_`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(33e88d1f341947c0d5b94d8e263532f13b12aaad01836ac87419d1b5872a2465) heat() hybrid() org.kframework.attributes.Location(Location(220,31,220,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1371376476) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[17], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[4] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = m.IsTrue(v[17])
										if bv[0] {
											v[18], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[18]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS428(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 430
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashloadXuXuXuIELE2 { // `#load___IELE`(`%__IELE-COMMON`(REG),VALUE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if v[4]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable REG = v[5]
							v[6] = i.Model.KApplyArg(v[2], 1)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _14 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _15 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _16 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													// KVariable _17 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 4)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _0 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														// KVariable _1 = v[24]
														v[25] = i.Model.KApplyArg(v[22], 2)
														// KVariable _2 = v[25]
														v[26] = i.Model.KApplyArg(v[22], 3)
														// KVariable _3 = v[26]
														v[27] = i.Model.KApplyArg(v[22], 4)
														// KVariable _4 = v[27]
														v[28] = i.Model.KApplyArg(v[22], 5)
														// KVariable _5 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 6)
														// KVariable _6 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 7)
														if v[30]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
															v[31] = i.Model.KApplyArg(v[30], 0)
															if v[31]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[31]
																v[32] = i.Model.KApplyArg(v[22], 8)
																// KVariable _7 = v[32]
																v[33] = i.Model.KApplyArg(v[22], 9)
																// KVariable _8 = v[33]
																v[34] = i.Model.KApplyArg(v[22], 10)
																// KVariable _9 = v[34]
																v[35] = i.Model.KApplyArg(v[22], 11)
																// KVariable _10 = v[35]
																v[36] = i.Model.KApplyArg(v[22], 12)
																// KVariable _11 = v[36]
																v[37] = i.Model.KApplyArg(v[22], 13)
																// KVariable _12 = v[37]
																v[38] = i.Model.KApplyArg(v[22], 14)
																// KVariable _13 = v[38]
																v[39] = i.Model.KApplyArg(v[17], 5)
																// KVariable _18 = v[39]
																v[40] = i.Model.KApplyArg(v[17], 6)
																// KVariable _19 = v[40]
																v[41] = i.Model.KApplyArg(v[17], 7)
																// KVariable _20 = v[41]
																v[42] = i.Model.KApplyArg(v[17], 8)
																// KVariable _21 = v[42]
																v[43] = i.Model.KApplyArg(v[17], 9)
																// KVariable _22 = v[43]
																v[44] = i.Model.KApplyArg(v[17], 10)
																// KVariable _23 = v[44]
																v[45] = i.Model.KApplyArg(v[17], 11)
																// KVariable _24 = v[45]
																v[46] = i.Model.KApplyArg(v[17], 12)
																// KVariable _25 = v[46]
																v[47] = i.Model.KApplyArg(v[17], 13)
																// KVariable _26 = v[47]
																v[48] = i.Model.KApplyArg(v[17], 14)
																// KVariable _27 = v[48]
																v[49] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[49]
																// rule #430
																// source: iele.k @737
																// {| rule `<generatedTop>`(`<k>`(`` `#load___IELE`(`%__IELE-COMMON`(REG),VALUE)=>#loadAux(REG,VALUE,getInt(`_[_]_ARRAY-SYNTAX`(REGS,REG)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(REG),isArray(REGS)),isInt(VALUE)) ensures #token("true","Bool") [UNIQUE_ID(b4705932d194dc1caf16353eb1e5c59b58847820fd767f045d08b2a005d9f2be) contentStartColumn(10) contentStartLine(737) org.kframework.attributes.Location(Location(737,10,737,100)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES precomputed isInt(REG) && isArray(REGS) && isInt(VALUE)
																	// RHS
																	return i.stepRHS430(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 434, 477
				if v[2]&kapplyMatchMask == kapplyMatchLblContractDefinitionList2 { // contractDefinitionList(CONTRACT,`.List{"contractDefinitionList"}`(.KList))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 434
					// KVariable CONTRACT = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[6]
						v[7] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[7]
						v[8] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[8]
						v[9] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[9]
						v[10] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[10]
						v[11] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[11]
						v[12] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[12]
						v[13] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[13]
						// rule #434
						// source: well-formedness.k @85
						// {| rule `<generatedTop>`(`<k>`(``contractDefinitionList(CONTRACT,`.List{"contractDefinitionList"}`(.KList))=>CONTRACT``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isContractDefinition(CONTRACT) ensures #token("true","Bool") [UNIQUE_ID(13d8b2eb25b70b2ea2f155f63a24ad75f4226678e18f819315d59009a044bca0) contentStartColumn(10) contentStartLine(85) org.kframework.attributes.Location(Location(85,10,85,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isContractDefinition(CONTRACT)
							v[14], i.evalErr = i.evalIsContractDefinition( // isContractDefinition(CONTRACT)
								v[4] /*CONTRACT*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[14]) {
								// RHS
								return i.stepRHS434(v, bv, config)
							}
						}
					}
					// rule: 477
					// KVariable CONTRACT1 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblContractDefinitionList2 { // contractDefinitionList(CONTRACT2,CONTRACTS)
						v[6] = i.Model.KApplyArg(v[5], 0)
						// KVariable CONTRACT2 = v[6]
						v[7] = i.Model.KApplyArg(v[5], 1)
						// KVariable CONTRACTS = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #477
						// source: well-formedness.k @84
						// {| rule `<generatedTop>`(`<k>`(``contractDefinitionList(CONTRACT1,contractDefinitionList(CONTRACT2,CONTRACTS))=>CONTRACT1~>contractDefinitionList(CONTRACT2,CONTRACTS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isContractDefinition(CONTRACT2),isContractDefinition(CONTRACT1)),isContract(CONTRACTS)) ensures #token("true","Bool") [UNIQUE_ID(eb44fa242721bdf54ed823529d80f50ec1d0ca9a9092ebe8152b2d6780bc4aec) contentStartColumn(10) contentStartLine(84) org.kframework.attributes.Location(Location(84,10,84,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isContractDefinition(CONTRACT2),isContractDefinition(CONTRACT1)),isContract(CONTRACTS))
							v[16], i.evalErr = i.evalIsContractDefinition( // isContractDefinition(CONTRACT2)
								v[6] /*CONTRACT2*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isContractDefinition(CONTRACT2),isContractDefinition(CONTRACT1))
							bv[1] = m.IsTrue(v[16])
							if bv[1] {
								v[17], i.evalErr = i.evalIsContractDefinition( // isContractDefinition(CONTRACT1)
									v[4] /*CONTRACT1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[17])
							}
							// `_andBool_`(`_andBool_`(isContractDefinition(CONTRACT2),isContractDefinition(CONTRACT1)),isContract(CONTRACTS))
							bv[0] = bv[1]
							if bv[0] {
								v[18], i.evalErr = i.evalIsContract( // isContract(CONTRACTS)
									v[7] /*CONTRACTS*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[18])
							}
							if bv[0] {
								// RHS
								return i.stepRHS477(v, bv, config)
							}
						}
					}
				}
				// rule: 436
				if v[2]&kapplyMatchMask == kapplyMatchLblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION4 { // `contract_!__{_}_IELE-CONFIGURATION`(NAME,_83,_84,DEFS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _83 = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if v[6]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
							// KVariable _84 = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable DEFS = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _0 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _1 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _2 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _3 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _5 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											// KVariable _6 = v[19]
											// rule #436
											// source: iele.k @1735
											// {| rule `<generatedTop>`(`<k>`(`` `contract_!__{_}_IELE-CONFIGURATION`(NAME,_83,_84,DEFS)=>`contract_{_}_IELE-COMMON`(NAME,DEFS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(NAME)),isString(_84)),isInt(_83)) ensures #token("true","Bool") [UNIQUE_ID(ba4436022b3e9f57f610496498485d77f583fe5288291c1c73fad7b4fe05f87e) contentStartColumn(10) contentStartLine(1735) org.kframework.attributes.Location(Location(1735,10,1735,64)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(NAME)),#token("true","Bool")),#token("true","Bool"))
												v[20], i.evalErr = i.evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
													v[7] /*DEFS*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(isTopLevelDefinitions(DEFS),isIeleName(NAME))
												bv[0] = m.IsTrue(v[20])
												if bv[0] {
													v[21], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
														v[4] /*NAME*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													bv[0] = m.IsTrue(v[21])
												}
												if bv[0] /* && */ /* rhs precomputed isString(_84) */  /* && */ /* rhs precomputed isInt(_83) */  {
													// RHS
													return i.stepRHS436(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 439
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqnotXuXuIELEXhyphenCOMMON2 { // `_=not__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #439
									// source: iele-syntax.k @147
									// {| rule `<generatedTop>`(`<k>`(`` `_=not__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=not__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(dc03bbed7bfadcd407bc2c64ae0710acf638fa152577b07d57ad08d350f0814c) heat() hybrid() org.kframework.attributes.Location(Location(147,25,147,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1324829744) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS439(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 444
				if v[2]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(HOLE,K1)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable HOLE = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #444
									// source: iele-syntax.k @183
									// {| rule `<generatedTop>`(`<k>`(`` `br_,__IELE-COMMON`(HOLE,K1)=>HOLE~>`#freezerbr_,__IELE-COMMON1_`(K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(a69b80583ef99f78e586d8fadff63148e69079399bf9b3099d101c3f9d3e79dd) heat() hybrid() org.kframework.attributes.Location(Location(183,27,183,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(515809288) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsIeleName( // isIeleName(K1)
											v[5] /*K1*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isIeleName(K1),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[4] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS444(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 445
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcreateXuXuXuXuXuXuXuIELE6 { // `#create_______IELE`(ACCTFROM,ACCTTO,GAVAIL,VALUE,CODE,ARGS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GAVAIL = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									// KVariable CODE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									// KVariable ARGS = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[16]
													v[17] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[17]
													v[18] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[18]
													v[19] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[20]
													v[21] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[21]
													// rule #445
													// source: iele.k @1395
													// {| rule `<generatedTop>`(`<k>`(`` `#create_______IELE`(ACCTFROM,ACCTTO,GAVAIL,VALUE,CODE,ARGS)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#initAccount__IELE-INFRASTRUCTURE`(ACCTTO)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCreate_______IELE`(ACCTFROM,ACCTTO,CODE,GAVAIL,VALUE,ARGS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isContract(CODE)),isInt(ACCTFROM)),isInt(GAVAIL)),isInts(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(5c158d56569b5ade473941241f5cf7ee07241244260be61a4db7f06e0eaa79cf) contentStartColumn(10) contentStartLine(1395) org.kframework.attributes.Location(Location(1395,10,1399,58)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS))
														v[22], i.evalErr = i.evalIsContract( // isContract(CODE)
															v[8] /*CODE*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isContract(CODE)),#token("true","Bool")),#token("true","Bool")),isInts(ARGS))
														bv[0] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) */ /* && */ m.IsTrue(v[22]) /* && */ /* rhs precomputed isInt(ACCTFROM) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ 
														if bv[0] {
															v[23], i.evalErr = i.evalIsInts( // isInts(ARGS)
																v[9] /*ARGS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[23])
														}
														if bv[0] {
															// RHS
															return i.stepRHS445(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 447, 482, 502
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcallXuXuXuXuXuXuXuXuIELE7 { // `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 447
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable FUNC = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GLIMIT = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									// KVariable ARGS = v[9]
									v[10] = i.Model.KApplyArg(v[2], 6)
									if v[10]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
										// KVariable STATIC = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[18]
														v[19] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[19]
														v[20] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[20]
														v[21] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[21]
														v[22] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[22]
														// rule #447
														// source: iele.k @1182
														// {| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>`#callWithCode_________IELE`(ACCTFROM,ACCTTO,`#precompiled_IELE-PRECOMPILED`(.KList),FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isConstant(FUNC)),isInt(ACCTFROM)),isInts(ARGS)),isBool(STATIC)),isInt(GLIMIT)),`_==Int_`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(946e93db3dfb650f20bf939d166e39acf24b4b499b3abcc446d9cfc50b72b081) contentStartColumn(10) contentStartLine(1182) org.kframework.attributes.Location(Location(1182,10,1186,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),`_==Int_`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)))
															v[23], i.evalErr = i.evalIsConstant( // isConstant(FUNC)
																v[6] /*FUNC*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS))
															bv[1] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) */ /* && */ m.IsTrue(v[23]) /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
															if bv[1] {
																v[24], i.evalErr = i.evalIsInts( // isInts(ARGS)
																	v[9] /*ARGS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[24])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),`_==Int_`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isBool(STATIC) */  /* && */ /* rhs precomputed isInt(GLIMIT) */ 
															if bv[0] {
																v[26], i.evalErr = i.evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(config, -1) // `#precompiledAccount_IELE-PRECOMPILED`(.KList)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[25], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList))
																	v[5] /*ACCTTO*/,
																	v[26],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[25])
															}
															if bv[0] {
																// RHS
																return i.stepRHS447(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 482
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _456 = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable _457 = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable _458 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _459 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								// KVariable _460 = v[9]
								v[10] = i.Model.KApplyArg(v[2], 6)
								if v[10]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable _461 = v[10]
									// KVariable DotVar1 = v[3]
									v[11] = i.Model.KApplyArg(c, 1)
									if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[12] = i.Model.KApplyArg(v[11], 0)
										if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[15] = i.Model.KApplyArg(v[13], 0)
												if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[14]
													v[16] = i.Model.KApplyArg(c, 2)
													// KVariable _4 = v[16]
													v[17] = i.Model.KApplyArg(c, 3)
													// KVariable _5 = v[17]
													v[18] = i.Model.KApplyArg(c, 4)
													// KVariable _6 = v[18]
													v[19] = i.Model.KApplyArg(c, 5)
													// KVariable _7 = v[19]
													v[20] = i.Model.KApplyArg(c, 6)
													// KVariable _8 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													// KVariable _9 = v[21]
													v[22] = i.Model.KApplyArg(c, 8)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)
														v[23] = i.Model.KApplyArg(v[22], 0)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
															v[24] = i.Model.KApplyArg(v[23], 0)
															if v[24]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																// KVariable ACCTS = v[24]
																v[25] = i.Model.KApplyArg(v[22], 1)
																// KVariable _0 = v[25]
																v[26] = i.Model.KApplyArg(v[22], 2)
																// KVariable _1 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 3)
																// KVariable _2 = v[27]
																v[28] = i.Model.KApplyArg(v[22], 4)
																// KVariable _3 = v[28]
																// rule #482
																// source: iele.k @1201
																// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCT)``~>`#call________IELE`(_456,ACCT,_457,_458,_459,_460,_461)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(`<activeAccounts>`(ACCTS),_0,_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(_461),isOperand(_458)),isInts(_460)),isInt(_456)),isInt(ACCT)),isInt(_459)),isSet(ACCTS)),isConstant(_457)),`_andBool_`(`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`notBool_`(`Set:in`(ACCT,ACCTS)))) ensures #token("true","Bool") [UNIQUE_ID(d2cd19ca7113bb2f1b5148fa5c15c323fc04cb43dcda055196b5da1d0089a378) contentStartColumn(10) contentStartLine(1201) org.kframework.attributes.Location(Location(1201,10,1203,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_458)),isInts(_460)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isConstant(_457)),`_andBool_`(`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`notBool_`(`Set:in`(ACCT,ACCTS))))
																	v[29], i.evalErr = i.evalIsOperand( // isOperand(_458)
																		v[7] /*_458*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_458)),isInts(_460))
																	bv[2] = /* rhs precomputed isBool(_461) */ /* && */ m.IsTrue(v[29])
																	if bv[2] {
																		v[30], i.evalErr = i.evalIsInts( // isInts(_460)
																			v[9] /*_460*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[30])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_458)),isInts(_460)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isConstant(_457))
																	bv[1] = bv[2] /* && */ /* rhs precomputed isInt(_456) */  /* && */ /* rhs precomputed isInt(ACCT) */  /* && */ /* rhs precomputed isInt(_459) */  /* && */ /* rhs precomputed isSet(ACCTS) */ 
																	if bv[1] {
																		v[31], i.evalErr = i.evalIsConstant( // isConstant(_457)
																			v[6] /*_457*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[31])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_458)),isInts(_460)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isConstant(_457)),`_andBool_`(`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`notBool_`(`Set:in`(ACCT,ACCTS))))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[33], i.evalErr = i.evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(config, -1) // `#precompiledAccount_IELE-PRECOMPILED`(.KList)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[32], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList))
																			v[5] /*ACCT*/,
																			v[33],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`notBool_`(`Set:in`(ACCT,ACCTS)))
																		bv[3] = m.IsTrue(v[32])
																		if bv[3] {
																			v[34], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																				v[5] /*ACCT*/,
																				v[24] /*ACCTS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[3] = !(m.IsTrue(v[34]))
																		}
																		bv[0] = bv[3]
																	}
																	if bv[0] {
																		// RHS
																		return i.stepRHS482(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 502
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K0 = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K1 = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable K2 = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable HOLE = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								// KVariable K5 = v[9]
								v[10] = i.Model.KApplyArg(v[2], 6)
								if v[10]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable K6 = v[10]
									// KVariable DotVar1 = v[3]
									v[11] = i.Model.KApplyArg(c, 1)
									if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[12] = i.Model.KApplyArg(v[11], 0)
										if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[15] = i.Model.KApplyArg(v[13], 0)
												if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[14]
													v[16] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[16]
													v[17] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[17]
													v[18] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[18]
													v[19] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[19]
													v[20] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[21]
													v[22] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[22]
													// rule #502
													// source: iele.k @1159
													// {| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(K0,K1,K2,HOLE,K4,K5,K6)=>HOLE~>`#freezer#call________IELE1_`(K0,K1,K2,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K6),isInt(K0)),isConstant(K2)),isInt(K4)),isInt(K1)),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(c426eaca46e6107b54fe03018e4c52c0f627b3cb7ab3e93bc80d0f7c99b62775) heat() org.kframework.attributes.Location(Location(1159,27,1159,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) productionID(1168340825) strict(4)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
														v[23], i.evalErr = i.evalIsConstant( // isConstant(K2)
															v[6] /*K2*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE))
														bv[2] = /* rhs precomputed isBool(K6) && isInt(K0) */ /* && */ m.IsTrue(v[23]) /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K1) */ 
														if bv[2] {
															v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
																v[7] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[2] = m.IsTrue(v[24])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5))
														bv[1] = bv[2]
														if bv[1] {
															v[25], i.evalErr = i.evalIsInts( // isInts(K5)
																v[9] /*K5*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[25])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
														bv[0] = bv[1]
														if bv[0] {
															v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																v[7] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[26]))
														}
														if bv[0] {
															// RHS
															return i.stepRHS502(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 448, 467
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckNameArgs1 { // checkNameArgs(`.List{"localNameList"}`(.KList))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 448
					if v[4]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelocalNameListXquoteXrbracket0 { // `.List{"localNameList"}`(.KList)
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[10]
						v[11] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[11]
						v[12] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[12]
						// rule #448
						// source: well-formedness.k @154
						// {| rule `<generatedTop>`(`<k>`(``checkNameArgs(`.List{"localNameList"}`(.KList))=>.K``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e6b811f7899bce6b05f443103581971ca494cb2648e83ef724d886819a53f361) contentStartColumn(10) contentStartLine(154) org.kframework.attributes.Location(Location(154,10,154,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// RHS
							return i.stepRHS448(v, bv, config)
						}
					}
					// rule: 467
					if v[4]&kapplyMatchMask == kapplyMatchLblLocalNameList2 { // localNameList(`%__IELE-COMMON`(N),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(N)
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable N = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							// KVariable ARGS = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[8]
							v[9] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[9]
							v[10] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[10]
							v[11] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[11]
							v[12] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[12]
							v[13] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[13]
							v[14] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[14]
							v[15] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[15]
							// rule #467
							// source: well-formedness.k @153
							// {| rule `<generatedTop>`(`<k>`(``checkNameArgs(localNameList(`%__IELE-COMMON`(N),ARGS))=>checkName(N)~>checkNameArgs(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N))) ensures #token("true","Bool") [UNIQUE_ID(730ef917364f52e8fbd71094bf9502cd139149a69ab7d6c2f3dad387a8cb48df) contentStartColumn(10) contentStartLine(153) org.kframework.attributes.Location(Location(153,10,153,111)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N)))
								v[16], i.evalErr = i.evalIsIeleName( // isIeleName(N)
									v[6] /*N*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isIeleName(N),isLocalNames(ARGS))
								bv[1] = m.IsTrue(v[16])
								if bv[1] {
									v[17], i.evalErr = i.evalIsLocalNames( // isLocalNames(ARGS)
										v[7] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[17])
								}
								// `_andBool_`(`_andBool_`(isIeleName(N),isLocalNames(ARGS)),`notBool_`(isNumericIeleName(N)))
								bv[0] = bv[1]
								if bv[0] {
									v[18], i.evalErr = i.evalIsNumericIeleName( // isNumericIeleName(N)
										v[6] /*N*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = !(m.IsTrue(v[18]))
								}
								if bv[0] {
									// RHS
									return i.stepRHS467(v, bv, config)
								}
							}
						}
					}
				}
				// rules: 453, 512, 563
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(K0,HOLE,K2,K3)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 453
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #453
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,HOLE,K2,K3)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON1_`(K0,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(99934d145af534d63723625ce546b7314c7dc02fecc2a0869e2b944da57c44eb) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[24]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS453(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rules: 512, 563
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// rule: 512
					// KVariable K2 = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable HOLE = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #512
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,K1,K2,HOLE)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON0_`(K0,K1,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(12c1ff599ca13410553e768b4a18a49c8c1554dd30ec075c6d9fc0902b26f5ce) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[7] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),isKResult(K2))
											bv[5] = m.IsTrue(v[24])
											if bv[5] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(K2)
													v[6] /*K2*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[5] = m.IsTrue(v[25])
											}
											// `_andBool_`(`_andBool_`(isKResult(K1),isKResult(K2)),`notBool_`(isKResult(HOLE)))
											bv[4] = bv[5]
											if bv[4] {
												v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[7] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[26]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS512(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 563
					// KVariable HOLE = v[6]
					v[7] = i.Model.KApplyArg(v[2], 3)
					// KVariable K3 = v[7]
					// KVariable DotVar1 = v[3]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #563
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(`` `_=load_,_,__IELE-COMMON`(K0,K1,HOLE,K3)=>HOLE~>`#freezer_=load_,_,__IELE-COMMON1_2`(K0,K1,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7ba7fb855f3cd15a3b3febdf12eb35a06573aa1d4a0592ecfa1f7fe310f55375) heat() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[20])
										if bv[3] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[7] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[24], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[4] = m.IsTrue(v[24])
											if bv[4] {
												v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[4] = !(m.IsTrue(v[25]))
											}
											bv[0] = bv[4]
										}
										if bv[0] {
											// RHS
											return i.stepRHS563(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 460
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashgasXlsqbXuXrsqbXuIELEXhyphenINFRASTRUCTURE1 { // `#gas[_]_IELE-INFRASTRUCTURE`(OP)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable OP = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
										v[13] = i.Model.KApplyArg(v[12], 0)
										// KVariable SCHED = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _2 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _5 = v[17]
										// rule #460
										// source: iele-gas.k @29
										// {| rule `<generatedTop>`(`<k>`(`` `#gas[_]_IELE-INFRASTRUCTURE`(OP)=>`#memory[_]_IELE-GAS`(OP)~>`#compute[_,_]_IELE-GAS`(OP,SCHED)~>`#deductGas_IELE-GAS`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,`<schedule>`(SCHED),_2,_3,_4,_5) requires `_andBool_`(isSchedule(SCHED),isInstruction(OP)) ensures #token("true","Bool") [UNIQUE_ID(8e06cf0c7a5ac69dd6630210e3a7e9de68f0d1070a15d269f24890ef7b37886b) contentStartColumn(10) contentStartLine(29) org.kframework.attributes.Location(Location(29,10,29,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES `_andBool_`(isSchedule(SCHED),isInstruction(OP))
											v[18], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
												v[13] /*SCHED*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isSchedule(SCHED),isInstruction(OP))
											bv[0] = m.IsTrue(v[18])
											if bv[0] {
												v[19], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
													v[4] /*OP*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = m.IsTrue(v[19])
											}
											if bv[0] {
												// RHS
												return i.stepRHS460(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 465, 479
				if v[2]&kapplyMatchMask == kapplyMatchLblLabeledBlockList2 { // labeledBlockList(`_:__IELE-COMMON`(_462,INSTRS),BLOCKS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 465
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcolonXuXuIELEXhyphenCOMMON2 { // `_:__IELE-COMMON`(_462,INSTRS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _462 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INSTRS = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable BLOCKS = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _3 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _4 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _5 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _6 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2)
											v[18] = i.Model.KApplyArg(v[17], 0)
											if v[18]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
												v[19] = i.Model.KApplyArg(v[18], 0)
												if i.Model.Equals(v[19], m.BoolFalse) { // #token("false","Bool")
													v[20] = i.Model.KApplyArg(v[17], 1)
													// KVariable _0 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 2)
													// KVariable _1 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 3)
													// KVariable _2 = v[22]
													v[23] = i.Model.KApplyArg(c, 7)
													// KVariable _7 = v[23]
													v[24] = i.Model.KApplyArg(c, 8)
													// KVariable _8 = v[24]
													// rule #465
													// source: iele.k @946
													// {| rule `<generatedTop>`(`<k>`(``labeledBlockList(`_:__IELE-COMMON`(_462,INSTRS),BLOCKS)=>`___IELE-COMMON`(INSTRS,BLOCKS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isIeleName(_462)) ensures #token("true","Bool") [UNIQUE_ID(1e7e33d89d48943c4e690cb2e81dc4d6b1186638bc92201f77d9bddd7e577be2) contentStartColumn(10) contentStartLine(946) org.kframework.attributes.Location(Location(946,10,947,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isIeleName(_462))
														v[25], i.evalErr = i.evalIsInstructions( // isInstructions(INSTRS)
															v[6] /*INSTRS*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS))
														bv[1] = m.IsTrue(v[25])
														if bv[1] {
															v[26], i.evalErr = i.evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
																v[7] /*BLOCKS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[26])
														}
														// `_andBool_`(`_andBool_`(isInstructions(INSTRS),isLabeledBlocks(BLOCKS)),isIeleName(_462))
														bv[0] = bv[1]
														if bv[0] {
															v[27], i.evalErr = i.evalIsIeleName( // isIeleName(_462)
																v[5] /*_462*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[27])
														}
														if bv[0] {
															// RHS
															return i.stepRHS465(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 479
					// KVariable BLOCK = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable BLOCKS = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _3 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _4 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _5 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _6 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _7 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
							v[13] = i.Model.KApplyArg(v[12], 0)
							if i.Model.Equals(v[13], m.BoolTrue) { // #token("true","Bool")
								v[14] = i.Model.KApplyArg(v[11], 1)
								// KVariable _0 = v[14]
								v[15] = i.Model.KApplyArg(v[11], 2)
								// KVariable _1 = v[15]
								v[16] = i.Model.KApplyArg(v[11], 3)
								// KVariable _2 = v[16]
								v[17] = i.Model.KApplyArg(c, 7)
								// KVariable _8 = v[17]
								v[18] = i.Model.KApplyArg(c, 8)
								// KVariable _9 = v[18]
								// rule #479
								// source: well-formedness.k @168
								// {| rule `<generatedTop>`(`<k>`(``labeledBlockList(BLOCK,BLOCKS)=>BLOCK~>BLOCKS``~>DotVar1),_3,_4,_5,_6,_7,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2),_8,_9) requires `_andBool_`(isLabeledBlocks(BLOCKS),isLabeledBlock(BLOCK)) ensures #token("true","Bool") [UNIQUE_ID(92b86ab054b1f1b1ed0547ddc4dccbaab3781111d1dc2940a25da0f2781297bf) contentStartColumn(10) contentStartLine(168) org.kframework.attributes.Location(Location(168,10,169,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isLabeledBlocks(BLOCKS),isLabeledBlock(BLOCK))
									v[19], i.evalErr = i.evalIsLabeledBlocks( // isLabeledBlocks(BLOCKS)
										v[5] /*BLOCKS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isLabeledBlocks(BLOCKS),isLabeledBlock(BLOCK))
									bv[0] = m.IsTrue(v[19])
									if bv[0] {
										v[20], i.evalErr = i.evalIsLabeledBlock( // isLabeledBlock(BLOCK)
											v[4] /*BLOCK*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[20])
									}
									if bv[0] {
										// RHS
										return i.stepRHS479(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 475
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpushSubstateXuIELEXhyphenINFRASTRUCTURE0 { // `#pushSubstate_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _16 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _17 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _18 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _19 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _20 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_3,_4,_5,`<substateStack>`(DotVar3),_6,`<substate>`(_0,_1,_2),_7,_8,_9,_10,_11,_12,_13,_14,_15)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _3 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _4 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										// KVariable _5 = v[17]
										v[18] = i.Model.KApplyArg(v[14], 3)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltsubstateStackXgt1 { // `<substateStack>`(DotVar3)
											v[19] = i.Model.KApplyArg(v[18], 0)
											if v[19]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
												// KVariable DotVar3 = v[19]
												v[20] = i.Model.KApplyArg(v[14], 4)
												// KVariable _6 = v[20]
												v[21] = i.Model.KApplyArg(v[14], 5)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_0,_1,_2)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[14], 6)
													// KVariable _7 = v[25]
													v[26] = i.Model.KApplyArg(v[14], 7)
													// KVariable _8 = v[26]
													v[27] = i.Model.KApplyArg(v[14], 8)
													// KVariable _9 = v[27]
													v[28] = i.Model.KApplyArg(v[14], 9)
													// KVariable _10 = v[28]
													v[29] = i.Model.KApplyArg(v[14], 10)
													// KVariable _11 = v[29]
													v[30] = i.Model.KApplyArg(v[14], 11)
													// KVariable _12 = v[30]
													v[31] = i.Model.KApplyArg(v[14], 12)
													// KVariable _13 = v[31]
													v[32] = i.Model.KApplyArg(v[14], 13)
													// KVariable _14 = v[32]
													v[33] = i.Model.KApplyArg(v[14], 14)
													// KVariable _15 = v[33]
													v[34] = i.Model.KApplyArg(c, 8)
													// KVariable _21 = v[34]
													// rule #475
													// source: iele.k @301
													// {| rule `<generatedTop>`(`<k>`(`` `#pushSubstate_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_16,_17,_18,_19,_20,`<iele>`(_3,_4,_5,`<substateStack>`(DotVar3=>`_List_`(`ListItem`(`<substate>`(_0,_1,_2)),DotVar3)),_6,`<substate>`(_0,_1,_2),_7,_8,_9,_10,_11,_12,_13,_14,_15),_21) requires `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1)) ensures #token("true","Bool") [UNIQUE_ID(0784e94b8898c1a0ac94dca4bfcbb89ebac747a122898b501579d53862410f12) contentStartColumn(10) contentStartLine(301) org.kframework.attributes.Location(Location(301,10,303,99)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1))
														v[35], i.evalErr = i.evalIsSelfDestructCell( // isSelfDestructCell(_0)
															v[22] /*_0*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2))
														bv[1] = /* rhs KToken */ /* && */ m.IsTrue(v[35])
														if bv[1] {
															v[36], i.evalErr = i.evalIsRefundCell( // isRefundCell(_2)
																v[24] /*_2*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[36])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSelfDestructCell(_0)),isRefundCell(_2)),isLogDataCell(_1))
														bv[0] = bv[1]
														if bv[0] {
															v[37], i.evalErr = i.evalIsLogDataCell( // isLogDataCell(_1)
																v[23] /*_1*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[37])
														}
														if bv[0] {
															// RHS
															return i.stepRHS475(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 481
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryDelta2 { // #memoryDelta(INDEX,NEWSIZE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable INDEX = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable NEWSIZE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _26 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _27 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _12 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _13 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[21], 6)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[21], 7)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[21], 8)
													if v[30]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(LM)
														v[31] = i.Model.KApplyArg(v[30], 0)
														if v[31]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															// KVariable LM = v[31]
															v[32] = i.Model.KApplyArg(v[21], 9)
															if v[32]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
																v[33] = i.Model.KApplyArg(v[32], 0)
																if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable PEAK = v[33]
																	v[34] = i.Model.KApplyArg(v[21], 10)
																	if v[34]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																		v[35] = i.Model.KApplyArg(v[34], 0)
																		if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable CURR = v[35]
																			v[36] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _8 = v[36]
																			v[37] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _9 = v[37]
																			v[38] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _10 = v[38]
																			v[39] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _11 = v[39]
																			v[40] = i.Model.KApplyArg(v[16], 5)
																			// KVariable _16 = v[40]
																			v[41] = i.Model.KApplyArg(v[16], 6)
																			// KVariable _17 = v[41]
																			v[42] = i.Model.KApplyArg(v[16], 7)
																			// KVariable _18 = v[42]
																			v[43] = i.Model.KApplyArg(v[16], 8)
																			// KVariable _19 = v[43]
																			v[44] = i.Model.KApplyArg(v[16], 9)
																			// KVariable _20 = v[44]
																			v[45] = i.Model.KApplyArg(v[16], 10)
																			// KVariable _21 = v[45]
																			v[46] = i.Model.KApplyArg(v[16], 11)
																			// KVariable _22 = v[46]
																			v[47] = i.Model.KApplyArg(v[16], 12)
																			// KVariable _23 = v[47]
																			v[48] = i.Model.KApplyArg(v[16], 13)
																			// KVariable _24 = v[48]
																			v[49] = i.Model.KApplyArg(v[16], 14)
																			// KVariable _25 = v[49]
																			v[50] = i.Model.KApplyArg(c, 8)
																			// KVariable _31 = v[50]
																			// rule #481
																			// source: iele-gas.k @388
																			// {| rule `<generatedTop>`(`<k>`(``#memoryDelta(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(LM),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,NEWSIZE))),`<currentMemory>`(CURR=>`_+Int_`(CURR,NEWSIZE)),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isInt(NEWSIZE)),isMap(LM)),isInt(CURR)),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM))) ensures #token("true","Bool") [UNIQUE_ID(cdd862a77a9b28269900eb6611e6bdba2d3f22ffed5648e2f9acfaf5913f9aa7) contentStartColumn(10) contentStartLine(388) org.kframework.attributes.Location(Location(388,10,392,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																			if !matched {
																				// REQUIRES `_andBool_`(#token("true","Bool"),`notBool_`(`_in_keys(_)_MAP`(INDEX,LM)))
																				v[51], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,LM)
																					v[4] /*INDEX*/,
																					v[31] /*LM*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed isInt(PEAK) && isInt(INDEX) && isInt(NEWSIZE) && isMap(LM) && isInt(CURR) */ /* && */ !(m.IsTrue(v[51])) {
																					// RHS
																					return i.stepRHS481(v, bv, config)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 499
				if v[2]&kapplyMatchMask == kapplyMatchLblExternalcontractXuXuIELEXhyphenCOMMON1 { // `externalcontract__IELE-COMMON`(NAME)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					// KVariable _6 = v[5]
					v[6] = i.Model.KApplyArg(c, 2)
					// KVariable _7 = v[6]
					v[7] = i.Model.KApplyArg(c, 3)
					// KVariable _8 = v[7]
					v[8] = i.Model.KApplyArg(c, 4)
					// KVariable _9 = v[8]
					v[9] = i.Model.KApplyArg(c, 5)
					// KVariable _10 = v[9]
					v[10] = i.Model.KApplyArg(c, 6)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_4,_5,`<contracts>`(CONTRACTS),`<currentContract>`(_0,_1,`<declaredContracts>`(DECLARED),_2,_3))
						v[11] = i.Model.KApplyArg(v[10], 0)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(v[10], 1)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(v[10], 2)
						if v[13]&kapplyMatchMask == kapplyMatchLblXltcontractsXgt1 { // `<contracts>`(CONTRACTS)
							v[14] = i.Model.KApplyArg(v[13], 0)
							if v[14]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
								// KVariable CONTRACTS = v[14]
								v[15] = i.Model.KApplyArg(v[10], 3)
								if v[15]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_0,_1,`<declaredContracts>`(DECLARED),_2,_3)
									v[16] = i.Model.KApplyArg(v[15], 0)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(v[15], 1)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(v[15], 2)
									if v[18]&kapplyMatchMask == kapplyMatchLblXltdeclaredContractsXgt1 { // `<declaredContracts>`(DECLARED)
										v[19] = i.Model.KApplyArg(v[18], 0)
										if v[19]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
											// KVariable DECLARED = v[19]
											v[20] = i.Model.KApplyArg(v[15], 3)
											// KVariable _2 = v[20]
											v[21] = i.Model.KApplyArg(v[15], 4)
											// KVariable _3 = v[21]
											v[22] = i.Model.KApplyArg(c, 7)
											// KVariable _11 = v[22]
											v[23] = i.Model.KApplyArg(c, 8)
											// KVariable _12 = v[23]
											// rule #499
											// source: well-formedness.k @105
											// {| rule `<generatedTop>`(`<k>`(`` `externalcontract__IELE-COMMON`(NAME)=>.K``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,_5,`<contracts>`(CONTRACTS),`<currentContract>`(_0,_1,`<declaredContracts>`(DECLARED=>`_Set_`(DECLARED,`SetItem`(NAME))),_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSet(CONTRACTS)),isSet(DECLARED)),`_andBool_`(`Set:in`(NAME,CONTRACTS),`notBool_`(`Set:in`(NAME,DECLARED)))) ensures #token("true","Bool") [UNIQUE_ID(1cddbf059f81fc67c906df07ba38c31adb64d2b0fc205acfb965f86bc6ae20cb) contentStartColumn(10) contentStartLine(105) org.kframework.attributes.Location(Location(105,10,108,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`Set:in`(NAME,CONTRACTS),`notBool_`(`Set:in`(NAME,DECLARED))))
												v[24], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
													v[4] /*NAME*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`Set:in`(NAME,CONTRACTS),`notBool_`(`Set:in`(NAME,DECLARED))))
												bv[0] = m.IsTrue(v[24]) /* && */ /* rhs precomputed isSet(CONTRACTS) */  /* && */ /* rhs precomputed isSet(DECLARED) */ 
												if bv[0] {
													v[25], i.evalErr = i.evalSetXcolonin( // `Set:in`(NAME,CONTRACTS)
														v[4] /*NAME*/,
														v[14] /*CONTRACTS*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													// `_andBool_`(`Set:in`(NAME,CONTRACTS),`notBool_`(`Set:in`(NAME,DECLARED)))
													bv[1] = m.IsTrue(v[25])
													if bv[1] {
														v[26], i.evalErr = i.evalSetXcolonin( // `Set:in`(NAME,DECLARED)
															v[4] /*NAME*/,
															v[19] /*DECLARED*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														bv[1] = !(m.IsTrue(v[26]))
													}
													bv[0] = bv[1]
												}
												if bv[0] {
													// RHS
													return i.stepRHS499(v, bv, config)
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 503
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpopWorldStateXuIELEXhyphenINFRASTRUCTURE0 { // `#popWorldState_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _17 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _18 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _19 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _20 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _21 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _0 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _1 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltinterimStatesXgt1 { // `<interimStates>`(`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3))
											v[18] = i.Model.KApplyArg(v[17], 0)
											if i.tempBoolVar, v[19], v[20] = i.Model.ListSplitHeadTail(v[18], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)
												if v[19]&kapplyMatchMask == kapplyMatchLblXlbracketXuXpipeXuXrbracketXuIELEXhyphenINFRASTRUCTURE2 { // `{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)
													v[21] = i.Model.KApplyArg(v[19], 0)
													if v[21]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(ACCTDATA)
														v[22] = i.Model.KApplyArg(v[21], 0)
														if v[22]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
															// KVariable ACCTDATA = v[22]
															v[23] = i.Model.KApplyArg(v[19], 1)
															if v[23]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																// KVariable ACCTS = v[23]
																if v[20]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
																	// KVariable DotVar3 = v[20]
																	v[24] = i.Model.KApplyArg(v[14], 3)
																	// KVariable _2 = v[24]
																	v[25] = i.Model.KApplyArg(v[14], 4)
																	// KVariable _3 = v[25]
																	v[26] = i.Model.KApplyArg(v[14], 5)
																	// KVariable _4 = v[26]
																	v[27] = i.Model.KApplyArg(v[14], 6)
																	// KVariable _5 = v[27]
																	v[28] = i.Model.KApplyArg(v[14], 7)
																	// KVariable _6 = v[28]
																	v[29] = i.Model.KApplyArg(v[14], 8)
																	// KVariable _7 = v[29]
																	v[30] = i.Model.KApplyArg(v[14], 9)
																	// KVariable _8 = v[30]
																	v[31] = i.Model.KApplyArg(v[14], 10)
																	// KVariable _9 = v[31]
																	v[32] = i.Model.KApplyArg(v[14], 11)
																	// KVariable _10 = v[32]
																	v[33] = i.Model.KApplyArg(v[14], 12)
																	// KVariable _11 = v[33]
																	v[34] = i.Model.KApplyArg(v[14], 13)
																	// KVariable _12 = v[34]
																	v[35] = i.Model.KApplyArg(v[14], 14)
																	// KVariable _13 = v[35]
																	v[36] = i.Model.KApplyArg(c, 8)
																	if v[36]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(_108),`<accounts>`(_109),_14,_15,_16)
																		v[37] = i.Model.KApplyArg(v[36], 0)
																		if v[37]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(_108)
																			v[38] = i.Model.KApplyArg(v[37], 0)
																			if v[38]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																				// KVariable _108 = v[38]
																				v[39] = i.Model.KApplyArg(v[36], 1)
																				if v[39]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_109)
																					v[40] = i.Model.KApplyArg(v[39], 0)
																					if v[40]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																						// KVariable _109 = v[40]
																						v[41] = i.Model.KApplyArg(v[36], 2)
																						// KVariable _14 = v[41]
																						v[42] = i.Model.KApplyArg(v[36], 3)
																						// KVariable _15 = v[42]
																						v[43] = i.Model.KApplyArg(v[36], 4)
																						// KVariable _16 = v[43]
																						// rule #503
																						// source: iele.k @282
																						// {| rule `<generatedTop>`(`<k>`(`` `#popWorldState_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_17,_18,_19,_20,_21,`<iele>`(_0,_1,`<interimStates>`(`_List_`(`ListItem`(`{_|_}_IELE-INFRASTRUCTURE`(`<accounts>`(ACCTDATA),ACCTS)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<network>`(`<activeAccounts>`(_108=>ACCTS),`<accounts>`(_109=>ACCTDATA),_14,_15,_16)) requires `_andBool_`(`_andBool_`(`_andBool_`(isSet(_108),`_andBool_`(#token("true","Bool"),isAccountCellMap(ACCTDATA))),isSet(ACCTS)),`_andBool_`(#token("true","Bool"),isAccountCellMap(_109))) ensures #token("true","Bool") [UNIQUE_ID(21ac33f26096e27f8bd22730da88e821719a71efc426bfc884cd3acebef85bda) contentStartColumn(10) contentStartLine(282) org.kframework.attributes.Location(Location(282,10,285,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																						if !matched {
																							// REQUIRES precomputed isSet(_108) && KToken && isAccountCellMap(ACCTDATA) && isSet(ACCTS) && KToken && isAccountCellMap(_109)
																							// RHS
																							return i.stepRHS503(v, bv, config)
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 505, 519
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sub_,__IELE-COMMON`(K0,HOLE,K2)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 505
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable K2 = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #505
									// source: iele-syntax.k @151
									// {| rule `<generatedTop>`(`<k>`(`` `_=sub_,__IELE-COMMON`(K0,HOLE,K2)=>HOLE~>`#freezer_=sub_,__IELE-COMMON1_`(K0,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3a96a7c79abad3550adca913f8c6ab257103393c86fc4a2f978552d04da24bdf) heat() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[6] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS505(v, bv, config)
										}
									}
								}
							}
						}
					}
					// rule: 519
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #519
									// source: iele-syntax.k @151
									// {| rule `<generatedTop>`(`<k>`(`` `_=sub_,__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=sub_,__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3e0263f611fa84c6c03ee70338311c4759f2025de05013695b8275b31ae615e3) heat() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isKResult(K1),`notBool_`(isKResult(HOLE)))
											bv[3] = m.IsTrue(v[22])
											if bv[3] {
												v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[6] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[3] = !(m.IsTrue(v[23]))
											}
											bv[0] = bv[3]
										}
										if bv[0] {
											// RHS
											return i.stepRHS519(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 506
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashdeductMemory1 { // #deductMemory(OLDPEAK)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable OLDPEAK = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										if v[12]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
											v[13] = i.Model.KApplyArg(v[12], 0)
											// KVariable SCHED = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _30 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _31 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(NEWPEAK),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _14 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _15 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _16 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _17 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(NEWPEAK),_9,_10,_11,_12,_13)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[21], 6)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[21], 7)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[21], 8)
													// KVariable _8 = v[30]
													v[31] = i.Model.KApplyArg(v[21], 9)
													if v[31]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(NEWPEAK)
														v[32] = i.Model.KApplyArg(v[31], 0)
														if i.tempTypeVar = v[32] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable NEWPEAK = v[32]
															v[33] = i.Model.KApplyArg(v[21], 10)
															// KVariable _9 = v[33]
															v[34] = i.Model.KApplyArg(v[21], 11)
															// KVariable _10 = v[34]
															v[35] = i.Model.KApplyArg(v[21], 12)
															// KVariable _11 = v[35]
															v[36] = i.Model.KApplyArg(v[21], 13)
															// KVariable _12 = v[36]
															v[37] = i.Model.KApplyArg(v[21], 14)
															// KVariable _13 = v[37]
															v[38] = i.Model.KApplyArg(v[16], 5)
															// KVariable _18 = v[38]
															v[39] = i.Model.KApplyArg(v[16], 6)
															// KVariable _19 = v[39]
															v[40] = i.Model.KApplyArg(v[16], 7)
															// KVariable _20 = v[40]
															v[41] = i.Model.KApplyArg(v[16], 8)
															// KVariable _21 = v[41]
															v[42] = i.Model.KApplyArg(v[16], 9)
															// KVariable _22 = v[42]
															v[43] = i.Model.KApplyArg(v[16], 10)
															// KVariable _23 = v[43]
															v[44] = i.Model.KApplyArg(v[16], 11)
															// KVariable _24 = v[44]
															v[45] = i.Model.KApplyArg(v[16], 12)
															// KVariable _25 = v[45]
															v[46] = i.Model.KApplyArg(v[16], 13)
															// KVariable _26 = v[46]
															v[47] = i.Model.KApplyArg(v[16], 14)
															// KVariable _27 = v[47]
															v[48] = i.Model.KApplyArg(c, 8)
															// KVariable _32 = v[48]
															// rule #506
															// source: iele-gas.k @400
															// {| rule `<generatedTop>`(`<k>`(``#deductMemory(OLDPEAK)=>`_-Int__INT`(`Cmem`(SCHED,NEWPEAK),`Cmem`(SCHED,OLDPEAK))~>`#deductGas_IELE-GAS`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,`<schedule>`(SCHED),_30,_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,`<peakMemory>`(NEWPEAK),_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_32) requires `_andBool_`(`_andBool_`(isInt(OLDPEAK),isSchedule(SCHED)),isInt(NEWPEAK)) ensures #token("true","Bool") [UNIQUE_ID(2c719e4fef3ade4bf30cc2c6a2fd652ca8f2c6900fdc42d8ed400f717466fb1c) contentStartColumn(10) contentStartLine(400) org.kframework.attributes.Location(Location(400,10,402,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool"))
																v[49], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[13] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if /* rhs precomputed isInt(OLDPEAK) */ /* && */ m.IsTrue(v[49]) /* && */ /* rhs precomputed isInt(NEWPEAK) */  {
																	// RHS
																	return i.stepRHS506(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 508
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqiszeroXuXuIELEXhyphenCOMMON2 { // `_=iszero__IELE-COMMON`(K0,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #508
									// source: iele-syntax.k @146
									// {| rule `<generatedTop>`(`<k>`(`` `_=iszero__IELE-COMMON`(K0,HOLE)=>HOLE~>`#freezer_=iszero__IELE-COMMON0_`(K0)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(df01fa0b5176af61faec93a59edbbf718e39ae0eff2793b521cb30f95140bf19) heat() hybrid() org.kframework.attributes.Location(Location(146,25,146,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1046665075) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[18], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[18])
										if bv[1] {
											v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[19])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[20], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[5] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[20]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS508(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 537
				if v[2]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(K0,K1,HOLE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable K1 = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					// KVariable HOLE = v[6]
					// KVariable DotVar1 = v[3]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #537
									// source: iele-syntax.k @196
									// {| rule `<generatedTop>`(`<k>`(`` `_=calladdress_at__IELE-COMMON`(K0,K1,HOLE)=>HOLE~>`#freezer_=calladdress_at__IELE-COMMON0_`(K0,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(bbaea2e5229790a3f39818a7d30388e5d1fc590e1c194cace0961d99fc830414) heat() hybrid() org.kframework.attributes.Location(Location(196,30,196,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1371495133) strict(3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[4] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isGlobalName(K1))
										bv[2] = m.IsTrue(v[19])
										if bv[2] {
											v[20], i.evalErr = i.evalIsGlobalName( // isGlobalName(K1)
												v[5] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
										bv[0] = bv[1]
										if bv[0] {
											v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[6] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[22]))
										}
										if bv[0] {
											// RHS
											return i.stepRHS537(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 538, 562
				if v[2]&kapplyMatchMask == kapplyMatchLblCcall7 { // `Ccall`(K0,HOLE,K2,K3,K4,K5,K6)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 538
					// KVariable K0 = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable HOLE = v[5]
					v[6] = i.Model.KApplyArg(v[2], 2)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 3)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K3 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable K5 = v[9]
									v[10] = i.Model.KApplyArg(v[2], 6)
									if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable K6 = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[18]
														v[19] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[19]
														v[20] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[20]
														v[21] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[21]
														v[22] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[22]
														// rule #538
														// source: iele-gas.k @747
														// {| rule `<generatedTop>`(`<k>`(`` `Ccall`(K0,HOLE,K2,K3,K4,K5,K6)=>HOLE~>`#freezerCcall1_`(K0,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(66080670ff3a7708b56c3102707745f63b9ba88ff2b27ced7bc2ef00d166637a) heat() klabel(Ccall) org.kframework.attributes.Location(Location(747,24,747,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(176342513) strict(2)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
															v[23], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
																v[5] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0))
															bv[1] = /* rhs precomputed isInt(K5) && isInt(K6) */ /* && */ m.IsTrue(v[23])
															if bv[1] {
																v[24], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
																	v[4] /*K0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[24])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))))
															bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K2) */ 
															if bv[0] {
																v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																	v[5] /*HOLE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = /* rhs KToken */ /* && */ !(m.IsTrue(v[25]))
															}
															if bv[0] {
																// RHS
																return i.stepRHS538(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 562
					// KVariable SCHED = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					if v[5]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
						// KVariable ISEMPTY = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable GCAP = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GAVAIL = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable RETS = v[9]
										v[10] = i.Model.KApplyArg(v[2], 6)
										if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable ARGS = v[10]
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _0 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _1 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _2 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															// KVariable _6 = v[22]
															// rule #562
															// source: iele-gas.k @755
															// {| rule `<generatedTop>`(`<k>`(`` `Ccall`(SCHED,ISEMPTY,GCAP,GAVAIL,VALUE,RETS,ARGS)=>`_+Int_`(`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS),`Cgascap`(SCHED,GCAP,GAVAIL,`Cextra`(SCHED,ISEMPTY,VALUE,RETS,ARGS)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(GCAP),isBool(ISEMPTY)),isInt(VALUE)),isSchedule(SCHED)),isInt(RETS)),isInt(GAVAIL)),isInt(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(034757d0f44801e8dd2a5fb820283c0eb3a848bfb99a25b5d97bc23212421da1) contentStartColumn(10) contentStartLine(755) org.kframework.attributes.Location(Location(755,10,755,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool"))
																v[23], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[4] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if /* rhs precomputed isInt(GCAP) && isBool(ISEMPTY) && isInt(VALUE) */ /* && */ m.IsTrue(v[23]) /* && */ /* rhs precomputed isInt(RETS) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  /* && */ /* rhs precomputed isInt(ARGS) */  {
																	// RHS
																	return i.stepRHS562(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 544
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexceptionalXquesXlsqbXuXrsqbXuIELE1 { // `#exceptional?[_]_IELE`(OP)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable OP = v[4]
					// KVariable DotVar1 = v[3]
					v[5] = i.Model.KApplyArg(c, 1)
					if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[6] = i.Model.KApplyArg(v[5], 0)
						if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[9] = i.Model.KApplyArg(v[7], 0)
								if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[8]
									v[10] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[10]
									v[11] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[11]
									v[12] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[12]
									v[13] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[13]
									v[14] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[14]
									v[15] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[15]
									v[16] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[16]
									// rule #544
									// source: iele.k @605
									// {| rule `<generatedTop>`(`<k>`(`` `#exceptional?[_]_IELE`(OP)=>`#invalid?[_]_IELE`(OP)~>`#static?[_]_IELE`(OP)~>`#negativeCall?[_]_IELE`(OP)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInstruction(OP) ensures #token("true","Bool") [UNIQUE_ID(3d0caa169775f15a52ae9b68425a4ad685a61a5a50ed51e079802856bca76496) contentStartColumn(10) contentStartLine(605) org.kframework.attributes.Location(Location(605,10,605,107)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// REQUIRES isInstruction(OP)
										v[17], i.evalErr = i.evalIsInstruction( // isInstruction(OP)
											v[4] /*OP*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										if m.IsTrue(v[17]) {
											// RHS
											return i.stepRHS544(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 549
				if v[2]&kapplyMatchMask == kapplyMatchLblTopLevelDefinitionList2 { // topLevelDefinitionList(DEF,DEFS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable DEF = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable DEFS = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _0 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _1 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _2 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _3 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _4 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					// KVariable _5 = v[11]
					v[12] = i.Model.KApplyArg(c, 7)
					// KVariable _6 = v[12]
					v[13] = i.Model.KApplyArg(c, 8)
					// KVariable _7 = v[13]
					// rule #549
					// source: well-formedness.k @95
					// {| rule `<generatedTop>`(`<k>`(``topLevelDefinitionList(DEF,DEFS)=>DEF~>DEFS``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isTopLevelDefinitions(DEFS),isTopLevelDefinition(DEF)) ensures #token("true","Bool") [UNIQUE_ID(1752c4657025ddcb14d39c49ac01f96b19a2fc228c41d148a7c54deb0053c238) contentStartColumn(10) contentStartLine(95) org.kframework.attributes.Location(Location(95,10,95,53)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
					if !matched {
						// REQUIRES `_andBool_`(isTopLevelDefinitions(DEFS),isTopLevelDefinition(DEF))
						v[14], i.evalErr = i.evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFS)
							v[5] /*DEFS*/,
							config, -1)
						if i.evalErr != nil {
							return m.NoResult, i.evalErr
						}
						// `_andBool_`(isTopLevelDefinitions(DEFS),isTopLevelDefinition(DEF))
						bv[0] = m.IsTrue(v[14])
						if bv[0] {
							v[15], i.evalErr = i.evalIsTopLevelDefinition( // isTopLevelDefinition(DEF)
								v[4] /*DEF*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							bv[0] = m.IsTrue(v[15])
						}
						if bv[0] {
							// RHS
							return i.stepRHS549(v, bv, config)
						}
					}
				}
				// rule: 550
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashpopCallStackXuIELEXhyphenINFRASTRUCTURE0 { // `#popCallStack_IELE-INFRASTRUCTURE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _43 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _44 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _45 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _46 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _47 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_30,`<callStack>`(`_List_`(`ListItem`(`<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)),DotVar3)),_31,_32,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14),_33,_34,_35,_36,_37,_38,_39,_40,_41,_42)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltcallStackXgt1 { // `<callStack>`(`_List_`(`ListItem`(`<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)),DotVar3))
											v[17] = i.Model.KApplyArg(v[16], 0)
											if i.tempBoolVar, v[18], v[19] = i.Model.ListSplitHeadTail(v[17], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(`<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)),DotVar3)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)
													v[20] = i.Model.KApplyArg(v[18], 0)
													// KVariable _15 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 1)
													// KVariable _16 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 2)
													// KVariable _17 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 3)
													// KVariable _18 = v[23]
													v[24] = i.Model.KApplyArg(v[18], 4)
													// KVariable _19 = v[24]
													v[25] = i.Model.KApplyArg(v[18], 5)
													// KVariable _20 = v[25]
													v[26] = i.Model.KApplyArg(v[18], 6)
													// KVariable _21 = v[26]
													v[27] = i.Model.KApplyArg(v[18], 7)
													// KVariable _22 = v[27]
													v[28] = i.Model.KApplyArg(v[18], 8)
													// KVariable _23 = v[28]
													v[29] = i.Model.KApplyArg(v[18], 9)
													// KVariable _24 = v[29]
													v[30] = i.Model.KApplyArg(v[18], 10)
													// KVariable _25 = v[30]
													v[31] = i.Model.KApplyArg(v[18], 11)
													// KVariable _26 = v[31]
													v[32] = i.Model.KApplyArg(v[18], 12)
													// KVariable _27 = v[32]
													v[33] = i.Model.KApplyArg(v[18], 13)
													// KVariable _28 = v[33]
													v[34] = i.Model.KApplyArg(v[18], 14)
													// KVariable _29 = v[34]
													if v[19]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
														// KVariable DotVar3 = v[19]
														v[35] = i.Model.KApplyArg(v[14], 2)
														// KVariable _31 = v[35]
														v[36] = i.Model.KApplyArg(v[14], 3)
														// KVariable _32 = v[36]
														v[37] = i.Model.KApplyArg(v[14], 4)
														if v[37]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14)
															v[38] = i.Model.KApplyArg(v[37], 0)
															// KVariable _0 = v[38]
															v[39] = i.Model.KApplyArg(v[37], 1)
															// KVariable _1 = v[39]
															v[40] = i.Model.KApplyArg(v[37], 2)
															// KVariable _2 = v[40]
															v[41] = i.Model.KApplyArg(v[37], 3)
															// KVariable _3 = v[41]
															v[42] = i.Model.KApplyArg(v[37], 4)
															// KVariable _4 = v[42]
															v[43] = i.Model.KApplyArg(v[37], 5)
															// KVariable _5 = v[43]
															v[44] = i.Model.KApplyArg(v[37], 6)
															// KVariable _6 = v[44]
															v[45] = i.Model.KApplyArg(v[37], 7)
															// KVariable _7 = v[45]
															v[46] = i.Model.KApplyArg(v[37], 8)
															// KVariable _8 = v[46]
															v[47] = i.Model.KApplyArg(v[37], 9)
															// KVariable _9 = v[47]
															v[48] = i.Model.KApplyArg(v[37], 10)
															// KVariable _10 = v[48]
															v[49] = i.Model.KApplyArg(v[37], 11)
															// KVariable _11 = v[49]
															v[50] = i.Model.KApplyArg(v[37], 12)
															// KVariable _12 = v[50]
															v[51] = i.Model.KApplyArg(v[37], 13)
															// KVariable _13 = v[51]
															v[52] = i.Model.KApplyArg(v[37], 14)
															// KVariable _14 = v[52]
															v[53] = i.Model.KApplyArg(v[14], 5)
															// KVariable _33 = v[53]
															v[54] = i.Model.KApplyArg(v[14], 6)
															// KVariable _34 = v[54]
															v[55] = i.Model.KApplyArg(v[14], 7)
															// KVariable _35 = v[55]
															v[56] = i.Model.KApplyArg(v[14], 8)
															// KVariable _36 = v[56]
															v[57] = i.Model.KApplyArg(v[14], 9)
															// KVariable _37 = v[57]
															v[58] = i.Model.KApplyArg(v[14], 10)
															// KVariable _38 = v[58]
															v[59] = i.Model.KApplyArg(v[14], 11)
															// KVariable _39 = v[59]
															v[60] = i.Model.KApplyArg(v[14], 12)
															// KVariable _40 = v[60]
															v[61] = i.Model.KApplyArg(v[14], 13)
															// KVariable _41 = v[61]
															v[62] = i.Model.KApplyArg(v[14], 14)
															// KVariable _42 = v[62]
															v[63] = i.Model.KApplyArg(c, 8)
															// KVariable _48 = v[63]
															// rule #550
															// source: iele.k @258
															// {| rule `<generatedTop>`(`<k>`(`` `#popCallStack_IELE-INFRASTRUCTURE`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_43,_44,_45,_46,_47,`<iele>`(_30,`<callStack>`(`_List_`(`ListItem`(`<callFrame>`(_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29)),DotVar3)=>`_List_`(`.List`(.KList),DotVar3)),_31,_32,`<callFrame>`(_0=>_15,_1=>_16,_2=>_17,_3=>_18,_4=>_19,_5=>_20,_6=>_21,_7=>_22,_8=>_23,_9=>_24,_10=>_25,_11=>_26,_12=>_27,_13=>_28,_14=>_29),_33,_34,_35,_36,_37,_38,_39,_40,_41,_42),_48) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27)),isCurrentMemoryCell(_25)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10))) ensures #token("true","Bool") [UNIQUE_ID(8e76eef966ee143fc476696d77b4167dec8792703b1d5fd86d629d629aaa84cd) contentStartColumn(10) contentStartLine(258) org.kframework.attributes.Location(Location(258,10,260,90)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27)),isCurrentMemoryCell(_25)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10)))
																v[64], i.evalErr = i.evalIsStaticCell( // isStaticCell(_29)
																	v[34] /*_29*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18))
																bv[14] = /* rhs KToken */ /* && */ m.IsTrue(v[64])
																if bv[14] {
																	v[65], i.evalErr = i.evalIsIDCell( // isIdCell(_18)
																		v[23] /*_18*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[14] = m.IsTrue(v[65])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24))
																bv[13] = bv[14]
																if bv[13] {
																	v[66], i.evalErr = i.evalIsPeakMemoryCell( // isPeakMemoryCell(_24)
																		v[29] /*_24*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[13] = m.IsTrue(v[66])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22))
																bv[12] = bv[13]
																if bv[12] {
																	v[67], i.evalErr = i.evalIsRegsCell( // isRegsCell(_22)
																		v[27] /*_22*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[12] = m.IsTrue(v[67])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20))
																bv[11] = bv[12]
																if bv[11] {
																	v[68], i.evalErr = i.evalIsCallDataCell( // isCallDataCell(_20)
																		v[25] /*_20*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[11] = m.IsTrue(v[68])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19))
																bv[10] = bv[11]
																if bv[10] {
																	v[69], i.evalErr = i.evalIsCallerCell( // isCallerCell(_19)
																		v[24] /*_19*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[10] = m.IsTrue(v[69])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28))
																bv[9] = bv[10]
																if bv[9] {
																	v[70], i.evalErr = i.evalIsPreviousGasCell( // isPreviousGasCell(_28)
																		v[33] /*_28*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[9] = m.IsTrue(v[70])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23))
																bv[8] = bv[9]
																if bv[8] {
																	v[71], i.evalErr = i.evalIsLocalMemCell( // isLocalMemCell(_23)
																		v[28] /*_23*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[8] = m.IsTrue(v[71])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21))
																bv[7] = bv[8]
																if bv[7] {
																	v[72], i.evalErr = i.evalIsCallValueCell( // isCallValueCell(_21)
																		v[26] /*_21*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[7] = m.IsTrue(v[72])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26))
																bv[6] = bv[7]
																if bv[6] {
																	v[73], i.evalErr = i.evalIsFidCell( // isFidCell(_26)
																		v[31] /*_26*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[6] = m.IsTrue(v[73])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15))
																bv[5] = bv[6]
																if bv[5] {
																	v[74], i.evalErr = i.evalIsProgramCell( // isProgramCell(_15)
																		v[20] /*_15*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[5] = m.IsTrue(v[74])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16))
																bv[4] = bv[5]
																if bv[4] {
																	v[75], i.evalErr = i.evalIsCallDepthCell( // isCallDepthCell(_16)
																		v[21] /*_16*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[4] = m.IsTrue(v[75])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17))
																bv[3] = bv[4]
																if bv[3] {
																	v[76], i.evalErr = i.evalIsLocalCallsCell( // isLocalCallsCell(_17)
																		v[22] /*_17*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[3] = m.IsTrue(v[76])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27))
																bv[2] = bv[3]
																if bv[2] {
																	v[77], i.evalErr = i.evalIsGasCell( // isGasCell(_27)
																		v[32] /*_27*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[77])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27)),isCurrentMemoryCell(_25))
																bv[1] = bv[2]
																if bv[1] {
																	v[78], i.evalErr = i.evalIsCurrentMemoryCell( // isCurrentMemoryCell(_25)
																		v[30] /*_25*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[78])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_29)),isIdCell(_18)),isPeakMemoryCell(_24)),isRegsCell(_22)),isCallDataCell(_20)),isCallerCell(_19)),isPreviousGasCell(_28)),isLocalMemCell(_23)),isCallValueCell(_21)),isFidCell(_26)),isProgramCell(_15)),isCallDepthCell(_16)),isLocalCallsCell(_17)),isGasCell(_27)),isCurrentMemoryCell(_25)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10)))
																bv[0] = bv[1]
																if bv[0] {
																	v[79], i.evalErr = i.evalIsStaticCell( // isStaticCell(_14)
																		v[52] /*_14*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3))
																	bv[28] = /* rhs KToken */ /* && */ m.IsTrue(v[79])
																	if bv[28] {
																		v[80], i.evalErr = i.evalIsIDCell( // isIdCell(_3)
																			v[41] /*_3*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[28] = m.IsTrue(v[80])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9))
																	bv[27] = bv[28]
																	if bv[27] {
																		v[81], i.evalErr = i.evalIsPeakMemoryCell( // isPeakMemoryCell(_9)
																			v[47] /*_9*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[27] = m.IsTrue(v[81])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7))
																	bv[26] = bv[27]
																	if bv[26] {
																		v[82], i.evalErr = i.evalIsRegsCell( // isRegsCell(_7)
																			v[45] /*_7*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[26] = m.IsTrue(v[82])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5))
																	bv[25] = bv[26]
																	if bv[25] {
																		v[83], i.evalErr = i.evalIsCallDataCell( // isCallDataCell(_5)
																			v[43] /*_5*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[25] = m.IsTrue(v[83])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4))
																	bv[24] = bv[25]
																	if bv[24] {
																		v[84], i.evalErr = i.evalIsCallerCell( // isCallerCell(_4)
																			v[42] /*_4*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[24] = m.IsTrue(v[84])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13))
																	bv[23] = bv[24]
																	if bv[23] {
																		v[85], i.evalErr = i.evalIsPreviousGasCell( // isPreviousGasCell(_13)
																			v[51] /*_13*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[23] = m.IsTrue(v[85])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8))
																	bv[22] = bv[23]
																	if bv[22] {
																		v[86], i.evalErr = i.evalIsLocalMemCell( // isLocalMemCell(_8)
																			v[46] /*_8*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[22] = m.IsTrue(v[86])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6))
																	bv[21] = bv[22]
																	if bv[21] {
																		v[87], i.evalErr = i.evalIsCallValueCell( // isCallValueCell(_6)
																			v[44] /*_6*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[21] = m.IsTrue(v[87])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11))
																	bv[20] = bv[21]
																	if bv[20] {
																		v[88], i.evalErr = i.evalIsFidCell( // isFidCell(_11)
																			v[49] /*_11*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[20] = m.IsTrue(v[88])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0))
																	bv[19] = bv[20]
																	if bv[19] {
																		v[89], i.evalErr = i.evalIsProgramCell( // isProgramCell(_0)
																			v[38] /*_0*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[19] = m.IsTrue(v[89])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1))
																	bv[18] = bv[19]
																	if bv[18] {
																		v[90], i.evalErr = i.evalIsCallDepthCell( // isCallDepthCell(_1)
																			v[39] /*_1*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[18] = m.IsTrue(v[90])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2))
																	bv[17] = bv[18]
																	if bv[17] {
																		v[91], i.evalErr = i.evalIsLocalCallsCell( // isLocalCallsCell(_2)
																			v[40] /*_2*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[17] = m.IsTrue(v[91])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12))
																	bv[16] = bv[17]
																	if bv[16] {
																		v[92], i.evalErr = i.evalIsGasCell( // isGasCell(_12)
																			v[50] /*_12*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[16] = m.IsTrue(v[92])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isStaticCell(_14)),isIdCell(_3)),isPeakMemoryCell(_9)),isRegsCell(_7)),isCallDataCell(_5)),isCallerCell(_4)),isPreviousGasCell(_13)),isLocalMemCell(_8)),isCallValueCell(_6)),isFidCell(_11)),isProgramCell(_0)),isCallDepthCell(_1)),isLocalCallsCell(_2)),isGasCell(_12)),isCurrentMemoryCell(_10))
																	bv[15] = bv[16]
																	if bv[15] {
																		v[93], i.evalErr = i.evalIsCurrentMemoryCell( // isCurrentMemoryCell(_10)
																			v[48] /*_10*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[15] = m.IsTrue(v[93])
																	}
																	bv[0] = bv[15]
																}
																if bv[0] {
																	// RHS
																	return i.stepRHS550(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 551
				if v[2]&kapplyMatchMask == kapplyMatchLblContractXuXlbracketXuXrbracketXuIELEXhyphenCOMMON2 { // `contract_{_}_IELE-COMMON`(NAME,DEFINITIONS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable NAME = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// KVariable DEFINITIONS = v[5]
					// KVariable DotVar1 = v[3]
					v[6] = i.Model.KApplyArg(c, 1)
					// KVariable _2 = v[6]
					v[7] = i.Model.KApplyArg(c, 2)
					// KVariable _3 = v[7]
					v[8] = i.Model.KApplyArg(c, 3)
					// KVariable _4 = v[8]
					v[9] = i.Model.KApplyArg(c, 4)
					// KVariable _5 = v[9]
					v[10] = i.Model.KApplyArg(c, 5)
					// KVariable _6 = v[10]
					v[11] = i.Model.KApplyArg(c, 6)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_0,_1,`<contracts>`(CONTRACTS),_31)
						v[12] = i.Model.KApplyArg(v[11], 0)
						// KVariable _0 = v[12]
						v[13] = i.Model.KApplyArg(v[11], 1)
						// KVariable _1 = v[13]
						v[14] = i.Model.KApplyArg(v[11], 2)
						if v[14]&kapplyMatchMask == kapplyMatchLblXltcontractsXgt1 { // `<contracts>`(CONTRACTS)
							v[15] = i.Model.KApplyArg(v[14], 0)
							if v[15]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
								// KVariable CONTRACTS = v[15]
								v[16] = i.Model.KApplyArg(v[11], 3)
								// KVariable _31 = v[16]
								v[17] = i.Model.KApplyArg(c, 7)
								// KVariable _7 = v[17]
								v[18] = i.Model.KApplyArg(c, 8)
								// KVariable _8 = v[18]
								// rule #551
								// source: well-formedness.k @87
								// {| rule `<generatedTop>`(`<k>`(`` `contract_{_}_IELE-COMMON`(NAME,DEFINITIONS)=>checkName(NAME)~>DEFINITIONS``~>DotVar1),_2,_3,_4,_5,_6,`<well-formedness>`(_0,_1,`<contracts>`(CONTRACTS=>`_Set_`(CONTRACTS,`SetItem`(NAME))),_31=>`<currentContract>`(initTypesCell(.KList),`<contractName>`(NAME),initDeclaredContractsCell(.KList),initFunctionBodiesCell(.KList),initCurrentFunctionCell(.KList))),_7,_8) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSet(CONTRACTS)),isCurrentContractCell(_31)),isTopLevelDefinitions(DEFINITIONS)),`notBool_`(`Set:in`(NAME,CONTRACTS))) ensures #token("true","Bool") [UNIQUE_ID(7d75cf544c6dca1cb35cf9f6385bbf7acdcc3f687192ec2d07cc3e74de4db2e8) contentStartColumn(10) contentStartLine(87) org.kframework.attributes.Location(Location(87,10,93,41)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
								if !matched {
									// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),isCurrentContractCell(_31)),isTopLevelDefinitions(DEFINITIONS)),`notBool_`(`Set:in`(NAME,CONTRACTS)))
									v[19], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
										v[4] /*NAME*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),isCurrentContractCell(_31))
									bv[2] = m.IsTrue(v[19]) /* && */ /* rhs precomputed isSet(CONTRACTS) */ 
									if bv[2] {
										v[20], i.evalErr = i.evalIsCurrentContractCell( // isCurrentContractCell(_31)
											v[16] /*_31*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[2] = m.IsTrue(v[20])
									}
									// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),isCurrentContractCell(_31)),isTopLevelDefinitions(DEFINITIONS))
									bv[1] = bv[2]
									if bv[1] {
										v[21], i.evalErr = i.evalIsTopLevelDefinitions( // isTopLevelDefinitions(DEFINITIONS)
											v[5] /*DEFINITIONS*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[1] = m.IsTrue(v[21])
									}
									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),#token("true","Bool")),isCurrentContractCell(_31)),isTopLevelDefinitions(DEFINITIONS)),`notBool_`(`Set:in`(NAME,CONTRACTS)))
									bv[0] = bv[1]
									if bv[0] {
										v[22], i.evalErr = i.evalSetXcolonin( // `Set:in`(NAME,CONTRACTS)
											v[4] /*NAME*/,
											v[15] /*CONTRACTS*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = !(m.IsTrue(v[22]))
									}
									if bv[0] {
										// RHS
										return i.stepRHS551(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 558
				if v[2]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(REG)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable REG = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _31 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _32 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _33 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _34 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										if v[14]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_28,_29,_30)
											v[15] = i.Model.KApplyArg(v[14], 0)
											if v[15]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("false","Bool"))
												v[16] = i.Model.KApplyArg(v[15], 0)
												if i.Model.Equals(v[16], m.BoolFalse) { // #token("false","Bool")
													v[17] = i.Model.KApplyArg(v[14], 1)
													// KVariable _28 = v[17]
													v[18] = i.Model.KApplyArg(v[14], 2)
													// KVariable _29 = v[18]
													v[19] = i.Model.KApplyArg(v[14], 3)
													// KVariable _30 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[20], 1)
														// KVariable _15 = v[22]
														v[23] = i.Model.KApplyArg(v[20], 2)
														// KVariable _16 = v[23]
														v[24] = i.Model.KApplyArg(v[20], 3)
														// KVariable _17 = v[24]
														v[25] = i.Model.KApplyArg(v[20], 4)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13)
															v[26] = i.Model.KApplyArg(v[25], 0)
															// KVariable _0 = v[26]
															v[27] = i.Model.KApplyArg(v[25], 1)
															// KVariable _1 = v[27]
															v[28] = i.Model.KApplyArg(v[25], 2)
															// KVariable _2 = v[28]
															v[29] = i.Model.KApplyArg(v[25], 3)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[25], 4)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[25], 5)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[25], 6)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[25], 7)
															if v[33]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
																v[34] = i.Model.KApplyArg(v[33], 0)
																if v[34]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																	// KVariable REGS = v[34]
																	v[35] = i.Model.KApplyArg(v[25], 8)
																	// KVariable _7 = v[35]
																	v[36] = i.Model.KApplyArg(v[25], 9)
																	// KVariable _8 = v[36]
																	v[37] = i.Model.KApplyArg(v[25], 10)
																	// KVariable _9 = v[37]
																	v[38] = i.Model.KApplyArg(v[25], 11)
																	// KVariable _10 = v[38]
																	v[39] = i.Model.KApplyArg(v[25], 12)
																	// KVariable _11 = v[39]
																	v[40] = i.Model.KApplyArg(v[25], 13)
																	// KVariable _12 = v[40]
																	v[41] = i.Model.KApplyArg(v[25], 14)
																	// KVariable _13 = v[41]
																	v[42] = i.Model.KApplyArg(v[20], 5)
																	// KVariable _18 = v[42]
																	v[43] = i.Model.KApplyArg(v[20], 6)
																	// KVariable _19 = v[43]
																	v[44] = i.Model.KApplyArg(v[20], 7)
																	// KVariable _20 = v[44]
																	v[45] = i.Model.KApplyArg(v[20], 8)
																	// KVariable _21 = v[45]
																	v[46] = i.Model.KApplyArg(v[20], 9)
																	// KVariable _22 = v[46]
																	v[47] = i.Model.KApplyArg(v[20], 10)
																	// KVariable _23 = v[47]
																	v[48] = i.Model.KApplyArg(v[20], 11)
																	// KVariable _24 = v[48]
																	v[49] = i.Model.KApplyArg(v[20], 12)
																	// KVariable _25 = v[49]
																	v[50] = i.Model.KApplyArg(v[20], 13)
																	// KVariable _26 = v[50]
																	v[51] = i.Model.KApplyArg(v[20], 14)
																	// KVariable _27 = v[51]
																	v[52] = i.Model.KApplyArg(c, 8)
																	// KVariable _35 = v[52]
																	// rule #558
																	// source: iele.k @362
																	// {| rule `<generatedTop>`(`<k>`(`` `%__IELE-COMMON`(REG)=>`_[_]_ARRAY-SYNTAX`(REGS,REG)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_31,_32,_33,_34,`<well-formedness>`(`<typeChecking>`(#token("false","Bool")),_28,_29,_30),`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,`<regs>`(REGS),_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_35) requires `_andBool_`(isInt(REG),isArray(REGS)) ensures #token("true","Bool") [UNIQUE_ID(3c06e5e53c845651652b037f5382c515762bc878c98c95c41b8b9a56e5b84672) contentStartColumn(10) contentStartLine(362) org.kframework.attributes.Location(Location(362,10,362,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// REQUIRES precomputed isInt(REG) && isArray(REGS)
																		// RHS
																		return i.stepRHS558(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			// rules: 2, 5, 6, 8, 11, 27, 38, 39, 41, 43, 47, 50, 57, 69, 74, 80, 83, 84, 88, 89, 93, 96, 104, 112, 114, 123, 126, 129, 130, 133, 138, 139, 143, 151, 154, 155, 158, 160, 168, 169, 171, 172, 173, 175, 179, 180, 183, 185, 188, 189, 195, 200, 202, 204, 205, 207, 209, 214, 216, 222, 223, 226, 228, 230, 235, 241, 245, 246, 248, 251, 256, 258, 260, 265, 266, 275, 278, 279, 280, 285, 290, 296, 299, 302, 310, 316, 318, 320, 326, 328, 330, 335, 339, 343, 344, 346, 348, 350, 351, 352, 353, 356, 367, 372, 376, 377, 381, 382, 388, 393, 401, 402, 408, 410, 411, 417, 421, 429, 432, 435, 440, 442, 450, 469, 476, 484, 488, 489, 490, 495, 507, 509, 511, 513, 515, 516, 518, 521, 524, 525, 533, 534, 546, 547, 552, 554, 556, 559
			if v[1]>>refTypeShift == refNonEmptyKseqTypeAsUint && (v[1]>>refNonEmptyKseqIndexShift&refNonEmptyKseqLengthMask) >= 2 { // HOLE~>`#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)~>DotVar1
				_, v[2], v[3] = i.Model.KSequenceSplitHeadTail(v[1]) // HOLE ~> ...
				_, v[4], v[5] = i.Model.KSequenceSplitHeadTail(v[3]) // `#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2) ~> ...
				// rules: 2, 5, 6, 8, 11, 38, 47, 50, 57, 69, 74, 80, 83, 84, 88, 89, 93, 114, 129, 130, 133, 138, 143, 151, 154, 155, 168, 169, 172, 173, 175, 179, 185, 188, 200, 204, 207, 209, 216, 223, 228, 235, 246, 256, 258, 260, 265, 266, 275, 278, 280, 296, 299, 316, 318, 326, 328, 335, 343, 346, 348, 352, 353, 377, 381, 382, 388, 393, 408, 411, 421, 429, 435, 476, 490, 507, 509, 513, 516, 518, 521, 533, 554, 556, 559
				// KVariable HOLE = v[2]
				// rule: 2
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #2
									// source: iele-syntax.k @172
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=cmp__,__IELE-COMMON0_`(K0,K1,K2)=>`_=cmp__,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(891ba76cbe4eadda57e4cddeca4da10eee11267ca6f3b0b40faa6980e97ae6ba) cool() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1893960929) seqstrict(3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsPredicate( // isPredicate(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS2(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 5
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXhashrefundXuXuIELE0Xu0 { // `#freezer#refund__IELE0_`(.KList)
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #5
									// source: iele.k @1310
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer#refund__IELE0_`(.KList)=>`#refund__IELE`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4ef3f5da828d386585622e13e2645cd931973ee3191f1c898f94fba3214582e3) cool() org.kframework.attributes.Location(Location(1310,27,1310,52)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) productionID(1815007437) strict()] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = m.IsTrue(v[18])
										if bv[0] {
											v[19], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[19])
										}
										if bv[0] {
											// RHS
											return i.stepRHS5(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 6
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezersstoreXuXcommaXuXuIELEXhyphenCOMMON0Xu1 { // `#freezersstore_,__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #6
									// source: iele-syntax.k @138
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezersstore_,__IELE-COMMON0_`(K0)=>`sstore_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6ef9b7dc185b438ae956cb9fc76572ae6f892b8dc64e5fd565588975a5a8005a) cool() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1277933280) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS6(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 8
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=xor_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #8
									// source: iele-syntax.k @168
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=xor_,__IELE-COMMON1_`(K0,K2)=>`_=xor_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4b08369f17fe127d1102cdb60f03d606f0088e623b0b4ace668d95ba204a2499) cool() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(901205084) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS8(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 11
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezer_=mulmod_,_,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #11
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=mulmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b070ad4c7c628b807fd42a55f230ef07f4b24a28742fdadf3d002072cc76367a) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS11(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 38
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezer_=load_,_,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #38
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=load_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8f9b21102939553e5b5cfd35e1888fafd11a80fde2e7ec7fd4f5e2a7d5014186) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS38(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 47
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezer_=addmod_,_,__IELE-COMMON1_`(K0,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #47
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_`(K0,K2,K3)=>`_=addmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(aa7a6b4ba5362ba63271c558ec21c9cb9beebad757e3bdb75ceb2a8c93220d9d) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS47(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 50
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezer_=addmod_,_,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #50
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=addmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(200cbf56d9e7964b49bdf1ac04cf594d567c7d38123df73803f5fbc83540a09a) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS50(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 57
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=call_(_)_IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #57
									// source: iele-syntax.k @192
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_(_)_IELE-COMMON0_`(K0,K1)=>`_=call_(_)_IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(5d687324cdd9154aa91f158f56502e1242d2c254588fca037cc5e3fc4a19cfb8) cool() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(394785440) strict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(HOLE),isLValues(K0))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(HOLE),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS57(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 69
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu34 { // `#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #69
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7fd45ef840fecfbe19e185579c0f6f7d197c8a81305c668e0cfb8c57d852a308) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[8] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS69(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 74
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=mod_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #74
									// source: iele-syntax.k @154
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mod_,__IELE-COMMON1_`(K0,K2)=>`_=mod_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(18d24fbe8587dc3658512f8d079580895ed9d10e5d93f266523f7b24f1799f57) cool() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1204296383) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS74(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 80
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON0Xu4 { // `#freezer_,_=create_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K3 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #80
									// source: iele-syntax.k @217
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)=>`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(2c391f2887227a2a2f581a66a2872b500a019adc002e2bcd247f22878c7aa423) cool() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1822525972) seqstrict(4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[9] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsIeleName( // isIeleName(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(HOLE)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS80(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 83
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON0Xu4 { // `#freezer_,_=copycreate_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K3 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #83
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON0_`(K0,K1,K2,K3)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(532d8f209b90862555be3b76f771122182f3ff1b1e7f9d6e1212cca8161f6cab) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[9] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS83(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 84
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXhashcallXuXuXuXuXuXuXuXuIELE1Xu6 { // `#freezer#call________IELE1_`(K0,K1,K2,K4,K5,K6)
					v[6] = i.Model.KApplyArg(v[4], 0)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K0 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K1 = v[7]
							v[8] = i.Model.KApplyArg(v[4], 2)
							// KVariable K2 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 3)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[9]
								v[10] = i.Model.KApplyArg(v[4], 4)
								// KVariable K5 = v[10]
								v[11] = i.Model.KApplyArg(v[4], 5)
								if v[11]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable K6 = v[11]
									// KVariable DotVar1 = v[5]
									v[12] = i.Model.KApplyArg(c, 1)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[13] = i.Model.KApplyArg(v[12], 0)
										if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[16] = i.Model.KApplyArg(v[14], 0)
												if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[15]
													v[17] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[17]
													v[18] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[18]
													v[19] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[19]
													v[20] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[20]
													v[21] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[21]
													v[22] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[22]
													v[23] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[23]
													// rule #84
													// source: iele.k @1159
													// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer#call________IELE1_`(K0,K1,K2,K4,K5,K6)=>`#call________IELE`(K0,K1,K2,HOLE,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(K6),isInt(K0)),isConstant(K2)),isInt(K4)),isInt(K1)),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(51d32cb4ca229d37fabf194fef430aea82f1f35419539c5318d0386c85808c87) cool() org.kframework.attributes.Location(Location(1159,27,1159,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) productionID(1168340825) strict(4)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
														v[24], i.evalErr = i.evalIsConstant( // isConstant(K2)
															v[8] /*K2*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE))
														bv[2] = /* rhs precomputed isBool(K6) && isInt(K0) */ /* && */ m.IsTrue(v[24]) /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K1) */ 
														if bv[2] {
															v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
																v[2] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[2] = m.IsTrue(v[25])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5))
														bv[1] = bv[2]
														if bv[1] {
															v[26], i.evalErr = i.evalIsInts( // isInts(K5)
																v[10] /*K5*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[26])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isConstant(K2)),#token("true","Bool")),#token("true","Bool")),isOperand(HOLE)),isInts(K5)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
														bv[0] = bv[1]
														if bv[0] {
															v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																v[2] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
														}
														if bv[0] {
															// RHS
															return i.stepRHS84(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 88
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=twos_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #88
									// source: iele-syntax.k @163
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=twos_,__IELE-COMMON0_`(K0,K1)=>`_=twos_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(c50070e0db98470bbbb75bec96f32abb71ee1eef601e29b34df19eaff6005f0e) cool() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS88(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 89
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=mul_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #89
									// source: iele-syntax.k @150
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mul_,__IELE-COMMON0_`(K0,K1)=>`_=mul_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(da88e063234fb057409881d64eda253d2a8d1baf05b4428b172b2693850227ad) cool() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS89(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 93
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=exp_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #93
									// source: iele-syntax.k @153
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=exp_,__IELE-COMMON1_`(K0,K2)=>`_=exp_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(2a9028caea14e0bb022de61873e23ba1cf7cbed32b952714f530de27ae6f47c5) cool() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1399701152) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS93(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 114
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu24 { // `#freezer_,_=copycreate_(_)send__IELE-COMMON1_2`(K0,K1,K2,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #114
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_2`(K0,K1,K2,K4)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7f5d2d2d878a5dfcbd84af7b34018375b88ae1dc2411e80991013f81181ee290) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS114(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 129
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezer_=mulmod_,_,__IELE-COMMON1_`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #129
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_`(K0,K1,K3)=>`_=mulmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4eaa08d4291906668d5ad1ba538e2d3b12bbee11492a0c1a5c8c1b81d38d16a1) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS129(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 130
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=shift_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #130
									// source: iele-syntax.k @169
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=shift_,__IELE-COMMON1_`(K0,K2)=>`_=shift_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4ea77ba8c220af1c7c3b437bcb219740e43ec928e7b93f3050d6ae55e24e2866) cool() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(777457133) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS130(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 133
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezerstore_,_,_,__IELE-COMMON1_`(K1,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K1 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #133
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_`(K1,K2,K3)=>`store_,_,_,__IELE-COMMON`(HOLE,K1,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(209777bb5e0dd7b222ec7309812820b67fd795cb161c59e58f9c814a3b8dc4d8) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
											v[7] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K2),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[6] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS133(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 138
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=byte_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #138
									// source: iele-syntax.k @161
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=byte_,__IELE-COMMON1_`(K0,K2)=>`_=byte_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(920e2adfb8214cd015523fa0f59e0a3673d8852a9c72595c5d184e6f84e35720) cool() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS138(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 143
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerbrXuXcommaXuXuIELEXhyphenCOMMON1Xu1 { // `#freezerbr_,__IELE-COMMON1_`(K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K1 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #143
									// source: iele-syntax.k @183
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerbr_,__IELE-COMMON1_`(K1)=>`br_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4291c4c15f443e0837bce246ece1cac587733eb85e907061931e94cec8d5f2f8) cool() hybrid() org.kframework.attributes.Location(Location(183,27,183,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(515809288) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsIeleName( // isIeleName(K1)
											v[6] /*K1*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isIeleName(K1),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isIeleName(K1),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS143(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 151
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezer_=expmod_,_,__IELE-COMMON1_`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #151
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_`(K0,K1,K3)=>`_=expmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(ac60020b9bacd1bf3868c1e1c13d384d071389c114d3b9797e338ff21e3b342f) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS151(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 154
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=sub_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #154
									// source: iele-syntax.k @151
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sub_,__IELE-COMMON0_`(K0,K1)=>`_=sub_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6758460117862cd6b82744c5298cd5bb9bbe9335cbc11b0b207a9add13901272) cool() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS154(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 155
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=sext_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #155
									// source: iele-syntax.k @162
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sext_,__IELE-COMMON1_`(K0,K2)=>`_=sext_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(01ff786d2b0c61f0c42ca665db93c6293971e50d8661683b15208a4345b5ea79) cool() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS155(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 168
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=calladdress_at__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #168
									// source: iele-syntax.k @196
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=calladdress_at__IELE-COMMON0_`(K0,K1)=>`_=calladdress_at__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(77066cbb2ebaf0d33150b75b3e6d7bff22bd27b863417aecd7c450060a880e01) cool() hybrid() org.kframework.attributes.Location(Location(196,30,196,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1371495133) strict(3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isGlobalName(K1))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsGlobalName( // isGlobalName(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isGlobalName(K1)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS168(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 169
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerlogXuXuIELEXhyphenCOMMON0Xu0 { // `#freezerlog__IELE-COMMON0_`(.KList)
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #169
									// source: iele-syntax.k @208
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog__IELE-COMMON0_`(.KList)=>`log__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7f9a120555962bacf2c356012cf70d95f0c1baa820e954c6840fed75f7941c1d) cool() hybrid() org.kframework.attributes.Location(Location(208,22,208,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(333040629) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = m.IsTrue(v[18])
										if bv[0] {
											v[19], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[19])
										}
										if bv[0] {
											// RHS
											return i.stepRHS169(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 172
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezer_=cmp__,__IELE-COMMON1_`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #172
									// source: iele-syntax.k @172
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=cmp__,__IELE-COMMON1_`(K0,K1,K3)=>`_=cmp__,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(d03202fa0fd1d0b35b303c008f2c0e5f937c6f9db776db97ff1daf9fd855f74b) cool() hybrid() org.kframework.attributes.Location(Location(172,22,172,92)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1893960929) seqstrict(3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsPredicate( // isPredicate(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isPredicate(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS172(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 173
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu4 { // `#freezer_,_=create_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #173
									// source: iele-syntax.k @217
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=create_(_)send__IELE-COMMON1_`(K0,K1,K2,K4)=>`_,_=create_(_)send__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(85f1100595bb3f78b935b6183f00b757dc3a3afebd6c6f1bd7dfcfa56c1cd08c) cool() hybrid() org.kframework.attributes.Location(Location(217,43,217,191)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1822525972) seqstrict(4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(HOLE))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsIeleName( // isIeleName(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(HOLE)),isOperand(K4)),isIeleName(K2)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS173(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 175
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=mod_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #175
									// source: iele-syntax.k @154
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mod_,__IELE-COMMON0_`(K0,K1)=>`_=mod_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(dcf30eca17fd4f18529031ff08ac3fd8159c0dddb579fe3316898fc16c5ba16f) cool() hybrid() org.kframework.attributes.Location(Location(154,22,154,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1204296383) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS175(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 179
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu25 { // `#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4,K5)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					v[10] = i.Model.KApplyArg(v[4], 4)
					// KVariable K5 = v[10]
					// KVariable DotVar1 = v[5]
					v[11] = i.Model.KApplyArg(c, 1)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[15] = i.Model.KApplyArg(v[13], 0)
								if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[14]
									v[16] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[18]
									v[19] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[19]
									v[20] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[22]
									// rule #179
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b948c2b3c189676fbcb3a03e984cc2b3be7f6a6683bfd85d1210f36887db0ae5) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[23], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[10] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[23])
										if bv[5] {
											v[24], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4))
										bv[4] = bv[5]
										if bv[4] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[27], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[28], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[28])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[29])
										}
										if bv[0] {
											// RHS
											return i.stepRHS179(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 185
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerselfdestructXuXuIELEXhyphenCOMMON0Xu0 { // `#freezerselfdestruct__IELE-COMMON0_`(.KList)
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #185
									// source: iele-syntax.k @220
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerselfdestruct__IELE-COMMON0_`(.KList)=>`selfdestruct__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(d3bd08da761f1794084eb33c7190b07b8292e48406c0e830f4f43ed5469e6529) cool() hybrid() org.kframework.attributes.Location(Location(220,31,220,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1371376476) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = m.IsTrue(v[18])
										if bv[0] {
											v[19], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[19])
										}
										if bv[0] {
											// RHS
											return i.stepRHS185(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 188
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu23 { // `#freezer_=mulmod_,_,__IELE-COMMON1_2`(K0,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #188
									// source: iele-syntax.k @157
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mulmod_,_,__IELE-COMMON1_2`(K0,K2,K3)=>`_=mulmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(02a990bd3b29cb9a0ca23ee29e23e0dc58493caa1305770d7f8c42835352c205) cool() hybrid() org.kframework.attributes.Location(Location(157,25,157,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(567294307) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS188(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 200
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu5 { // `#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_`(K0,K1,K2,K4,K5)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					v[10] = i.Model.KApplyArg(v[4], 4)
					// KVariable K5 = v[10]
					// KVariable DotVar1 = v[5]
					v[11] = i.Model.KApplyArg(c, 1)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[15] = i.Model.KApplyArg(v[13], 0)
								if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[14]
									v[16] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[18]
									v[19] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[19]
									v[20] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[22]
									// rule #200
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_`(K0,K1,K2,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(85c20232996a65fa8b4a05e1c9dc4390652c76b7ca7694b066b096bddc2da567) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[23], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[10] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperand(K2))
										bv[5] = m.IsTrue(v[23])
										if bv[5] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE))
										bv[4] = bv[5]
										if bv[4] {
											v[25], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[27], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[28], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[28])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperand(K2)),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[29])
										}
										if bv[0] {
											// RHS
											return i.stepRHS200(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 204
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerCcall1Xu6 { // `#freezerCcall1_`(K0,K2,K3,K4,K5,K6)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K3 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 3)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[9]
								v[10] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable K5 = v[10]
									v[11] = i.Model.KApplyArg(v[4], 5)
									if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable K6 = v[11]
										// KVariable DotVar1 = v[5]
										v[12] = i.Model.KApplyArg(c, 1)
										if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[13] = i.Model.KApplyArg(v[12], 0)
											if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[16] = i.Model.KApplyArg(v[14], 0)
													if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[15]
														v[17] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[17]
														v[18] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[18]
														v[19] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[19]
														v[20] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[20]
														v[21] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[21]
														v[22] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[23]
														// rule #204
														// source: iele-gas.k @747
														// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCcall1_`(K0,K2,K3,K4,K5,K6)=>`Ccall`(K0,HOLE,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(cd3bc9a6f156685acbdc0ab4791fc879039d690760d5d4dbe94d71e6a160f293) cool() klabel(Ccall) org.kframework.attributes.Location(Location(747,24,747,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(176342513) strict(2)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
															v[24], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
																v[2] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0))
															bv[1] = /* rhs precomputed isInt(K5) && isInt(K6) */ /* && */ m.IsTrue(v[24])
															if bv[1] {
																v[25], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
																	v[6] /*K0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[25])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K2) */ 
															if bv[0] {
																v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																	v[2] /*HOLE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[26])
															}
															if bv[0] {
																// RHS
																return i.stepRHS204(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 207
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON1Xu4 { // `#freezer_,_=copycreate_(_)send__IELE-COMMON1_`(K0,K1,K3,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #207
									// source: iele-syntax.k @218
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_,_=copycreate_(_)send__IELE-COMMON1_`(K0,K1,K3,K4)=>`_,_=copycreate_(_)send__IELE-COMMON`(K0,K1,HOLE,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(a479337a794ee3450c0fc1fdad413020cf72525a5d4fbb7e39b5addeb8c6ae4e) cool() hybrid() org.kframework.attributes.Location(Location(218,43,218,193)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(208043846) seqstrict(3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperands(K3))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsLValue( // isLValue(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperands(K3)),isOperand(K4)),isOperand(HOLE)),isLValue(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS207(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 209
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqandXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=and_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #209
									// source: iele-syntax.k @166
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=and_,__IELE-COMMON0_`(K0,K1)=>`_=and_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b9886b5fe3effdaa27d4370e813094d880dc8c9114865d0a63e8e6c490b63a18) cool() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS209(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 216
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXuIELEXhyphenCOMMON1Xu1 { // `#freezerstore_,__IELE-COMMON1_`(K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K1 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #216
									// source: iele-syntax.k @128
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,__IELE-COMMON1_`(K1)=>`store_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(870ea52990199648ce7f1ec66db5978262b3ca414098c06040a894cf7fd80874) cool() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2103569237) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isOperand(K1))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[6] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS216(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 223
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu4 { // `#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_`(K0,K1,K2,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #223
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_`(K0,K1,K2,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,HOLE,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4bd25716343a834e4846011514145ba7a11558507c0695e8a1e2954041258eac) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
											v[8] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K2),isOperands(HOLE))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperands( // isOperands(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K2),isOperands(HOLE)),isOperand(K4)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS223(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 228
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=sext_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #228
									// source: iele-syntax.k @162
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sext_,__IELE-COMMON0_`(K0,K1)=>`_=sext_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6b750262fd1f286fba5d4dc9bb05159d20b929c17df0adc63af4790a064d620d) cool() hybrid() org.kframework.attributes.Location(Location(162,24,162,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(485845532) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS228(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 235
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqloadXuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=load__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #235
									// source: iele-syntax.k @126
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load__IELE-COMMON0_`(K0)=>`_=load__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(9baab7fd30fb4199cc25d488bcbaab6de0a0c07251aae4a82f1b903e8bb79493) cool() hybrid() org.kframework.attributes.Location(Location(126,23,126,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1408482749) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS235(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 246
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerCselfdestruct1Xu2 { // `#freezerCselfdestruct1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[18]
										v[19] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[19]
										// rule #246
										// source: iele-gas.k @778
										// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCselfdestruct1_`(K0,K2)=>`Cselfdestruct`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),isInt(K2)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7da7561d3f789e2d82e0c553f747efcfbf2472efdf48f4d13339408d45680338) cool() klabel(Cselfdestruct) org.kframework.attributes.Location(Location(778,24,778,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(2143582219) strict(2)] |}
										if !matched {
											// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
											v[20], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											// `_andBool_`(isBExp(HOLE),isSchedule(K0))
											bv[1] = m.IsTrue(v[20])
											if bv[1] {
												v[21], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
													v[6] /*K0*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[1] = m.IsTrue(v[21])
											}
											// `_andBool_`(`_andBool_`(`_andBool_`(isBExp(HOLE),isSchedule(K0)),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
											bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K2) */ 
											if bv[0] {
												v[22], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
													v[2] /*HOLE*/,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[22])
											}
											if bv[0] {
												// RHS
												return i.stepRHS246(v, bv, config)
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 256
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=div_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #256
									// source: iele-syntax.k @152
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=div_,__IELE-COMMON0_`(K0,K1)=>`_=div_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(e1cb412b1b927102f3a41d40350fc968065cc7ef4a12d4b9b4b368f984c3b364) cool() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS256(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 258
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=sub_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #258
									// source: iele-syntax.k @151
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sub_,__IELE-COMMON1_`(K0,K2)=>`_=sub_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(209979817283baa5d9ed62fb629d87df2be8d8d4df549fdb583ccb472e330c1e) cool() hybrid() org.kframework.attributes.Location(Location(151,22,151,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1275035040) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS258(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 260
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezersstoreXuXcommaXuXuIELEXhyphenCOMMON1Xu1 { // `#freezersstore_,__IELE-COMMON1_`(K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K1 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #260
									// source: iele-syntax.k @138
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezersstore_,__IELE-COMMON1_`(K1)=>`sstore_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(f59318d465f48a03be0d48b6d1c9eaaf9020d344b32108a122a6c8234e2c162a) cool() hybrid() org.kframework.attributes.Location(Location(138,25,138,101)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1277933280) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isOperand(K1))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[6] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS260(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 265
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=add_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #265
									// source: iele-syntax.k @149
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=add_,__IELE-COMMON1_`(K0,K2)=>`_=add_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(519e70f681ef8467195b1f2a76f32912ec2dac82ead35881c19228f75750079b) cool() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS265(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 266
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu3 { // `#freezer_=load_,_,__IELE-COMMON1_`(K0,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #266
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON1_`(K0,K2,K3)=>`_=load_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(021c8836ad4823776edb635dd2ac2897387fbae4f31f72a19316eeda4d22bcc8) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS266(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 275
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXuIELEXhyphenCOMMON0Xu1 { // `#freezerstore_,__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #275
									// source: iele-syntax.k @128
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,__IELE-COMMON0_`(K0)=>`store_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(ab4ae14e5428394002947585c8958ad4755d95d81fb15308ac05f980afb104af) cool() hybrid() org.kframework.attributes.Location(Location(128,24,128,98)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2103569237) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS275(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 278
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=byte_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #278
									// source: iele-syntax.k @161
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=byte_,__IELE-COMMON0_`(K0,K1)=>`_=byte_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(359d907a295c05e1b71e83d7b5b8dcf0b7c63a11f95abb1bb58c580de12d5e63) cool() hybrid() org.kframework.attributes.Location(Location(161,24,161,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1020155847) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS278(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 280
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu23 { // `#freezer_=addmod_,_,__IELE-COMMON1_2`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #280
									// source: iele-syntax.k @156
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=addmod_,_,__IELE-COMMON1_2`(K0,K1,K3)=>`_=addmod_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(323a0e7c12fd1ac2b627dd3917553e66114f5b261817bb0fddb9a15ae11a3c26) cool() hybrid() org.kframework.attributes.Location(Location(156,25,156,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2003463579) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS280(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 296
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerretXuXuIELEXhyphenCOMMON0Xu0 { // `#freezerret__IELE-COMMON0_`(.KList)
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #296
									// source: iele-syntax.k @198
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerret__IELE-COMMON0_`(.KList)=>`ret__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(47591e2e38c3f86124331d00dc931369107b68b39a7dc3dd99dceae6d2da0b50) cool() hybrid() org.kframework.attributes.Location(Location(198,25,198,66)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2030411960) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[18], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isNonEmptyOperands(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = m.IsTrue(v[18])
										if bv[0] {
											v[19], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[19])
										}
										if bv[0] {
											// RHS
											return i.stepRHS296(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 299
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsha3XuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=sha3__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #299
									// source: iele-syntax.k @174
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sha3__IELE-COMMON0_`(K0)=>`_=sha3__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(a0eb8693d18f21963586558db360681ba690834dbe46a4f802550c1cd740b545) cool() hybrid() org.kframework.attributes.Location(Location(174,23,174,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(749282235) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS299(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 316
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqorXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=or_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #316
									// source: iele-syntax.k @167
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=or_,__IELE-COMMON1_`(K0,K2)=>`_=or_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1880a91d1bc2e543bdbb6c37f0ced364f01398f6d141eb8910884bfe36cc7760) cool() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS316(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 318
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON1Xu24 { // `#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #318
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON1_2`(K0,K1,K3,K4)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,HOLE,K3,K4)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8b63739974943db07183e2ecce4185470bd2feba3b8fe1208b8f4cd71e2ea2ca) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[8] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K4))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS318(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 326
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=xor_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #326
									// source: iele-syntax.k @168
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=xor_,__IELE-COMMON0_`(K0,K1)=>`_=xor_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8777763f469fb86a524c90f11f5b7e5f15f97ab900b8e0af580deaaae58766c7) cool() hybrid() org.kframework.attributes.Location(Location(168,24,168,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(901205084) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS326(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 328
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqorXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=or_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #328
									// source: iele-syntax.k @167
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=or_,__IELE-COMMON0_`(K0,K1)=>`_=or_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(46ce28879a1594b1e7b1d75f54ce208b3057690ed2ddc1ba428c2a6314cfdc78) cool() hybrid() org.kframework.attributes.Location(Location(167,24,167,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(896982466) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS328(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 335
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu23 { // `#freezer_=expmod_,_,__IELE-COMMON1_2`(K0,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #335
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON1_2`(K0,K2,K3)=>`_=expmod_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(dc3f735a19be18154f56b09fd95ddde064f2c97c974bde7c0f6a67ff51e97920) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS335(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 343
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=twos_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #343
									// source: iele-syntax.k @163
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=twos_,__IELE-COMMON1_`(K0,K2)=>`_=twos_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4905b3e07a28804c0ebee3f68343dcc7d18609e3ebeb762b00fbf5dd8f83dde6) cool() hybrid() org.kframework.attributes.Location(Location(163,24,163,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(871790326) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS343(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 346
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=exp_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #346
									// source: iele-syntax.k @153
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=exp_,__IELE-COMMON0_`(K0,K1)=>`_=exp_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(e6f60debbd8ac460b4e30bcc0fb5b9d100df69ebe76cf2d8a8d64d8a590c075a) cool() hybrid() org.kframework.attributes.Location(Location(153,22,153,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1399701152) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS346(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 348
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON0Xu4 { // `#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_`(K0,K1,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K3 = v[9]
					// KVariable DotVar1 = v[5]
					v[10] = i.Model.KApplyArg(c, 1)
					if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[11] = i.Model.KApplyArg(v[10], 0)
						if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[14] = i.Model.KApplyArg(v[12], 0)
								if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[13]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[21]
									// rule #348
									// source: iele-syntax.k @194
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=staticcall_at_(_)gaslimit__IELE-COMMON0_`(K0,K1,K2,K3)=>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1d75c6ff7eae857c689b5550feb5f9040a55a76806a51d6ec71aa56afa600665) cool() hybrid() org.kframework.attributes.Location(Location(194,30,194,139)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(372469954) seqstrict(2,3,4,5)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[22], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[9] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[4] = m.IsTrue(v[22])
										if bv[4] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[25], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[27], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[27])
										}
										if bv[0] {
											// RHS
											return i.stepRHS348(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 352
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=div_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #352
									// source: iele-syntax.k @152
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=div_,__IELE-COMMON1_`(K0,K2)=>`_=div_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(84def9542b2ec910eb14db6e4632dc7773d01ac3e337a380512f50ef8d41b670) cool() hybrid() org.kframework.attributes.Location(Location(152,22,152,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1058876963) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS352(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 353
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=bswap_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #353
									// source: iele-syntax.k @164
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=bswap_,__IELE-COMMON0_`(K0,K1)=>`_=bswap_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(189e6f8b06f5ec1dc425668f0ae4bc01cad46ec15b68707b5b2642503f74dd91) cool() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS353(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 377
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=add_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #377
									// source: iele-syntax.k @149
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=add_,__IELE-COMMON0_`(K0,K1)=>`_=add_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(147e02ebad1869d18360ff4b34cf6e5da026a0539429dbff9550a69303b6f565) cool() hybrid() org.kframework.attributes.Location(Location(149,22,149,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1921242091) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS377(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 381
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu33 { // `#freezerstore_,_,_,__IELE-COMMON1_3`(K0,K2,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #381
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_3`(K0,K2,K3)=>`store_,_,_,__IELE-COMMON`(K0,HOLE,K2,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(62a9e22ea1d73c81e0f28e2a0de830d839c605cc767a3bc30f12ce38045b9536) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K3)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS381(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 382
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqnotXuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=not__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #382
									// source: iele-syntax.k @147
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=not__IELE-COMMON0_`(K0)=>`_=not__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(e321b001b92b77ac2053f15c8402fe343f6b4ad447d2cee57a3ad4e10e2c53f3) cool() hybrid() org.kframework.attributes.Location(Location(147,25,147,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1324829744) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS382(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 388
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerCcallgas1Xu6 { // `#freezerCcallgas1_`(K0,K2,K3,K4,K5,K6)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable K2 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable K3 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 3)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable K4 = v[9]
								v[10] = i.Model.KApplyArg(v[4], 4)
								if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable K5 = v[10]
									v[11] = i.Model.KApplyArg(v[4], 5)
									if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable K6 = v[11]
										// KVariable DotVar1 = v[5]
										v[12] = i.Model.KApplyArg(c, 1)
										if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[13] = i.Model.KApplyArg(v[12], 0)
											if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[16] = i.Model.KApplyArg(v[14], 0)
													if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[15]
														v[17] = i.Model.KApplyArg(c, 2)
														// KVariable _0 = v[17]
														v[18] = i.Model.KApplyArg(c, 3)
														// KVariable _1 = v[18]
														v[19] = i.Model.KApplyArg(c, 4)
														// KVariable _2 = v[19]
														v[20] = i.Model.KApplyArg(c, 5)
														// KVariable _3 = v[20]
														v[21] = i.Model.KApplyArg(c, 6)
														// KVariable _4 = v[21]
														v[22] = i.Model.KApplyArg(c, 7)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(c, 8)
														// KVariable _6 = v[23]
														// rule #388
														// source: iele-gas.k @748
														// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerCcallgas1_`(K0,K2,K3,K4,K5,K6)=>`Ccallgas`(K0,HOLE,K2,K3,K4,K5,K6)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(K5),isInt(K6)),isBExp(HOLE)),isSchedule(K0)),isInt(K3)),isInt(K4)),isInt(K2)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8a27f1694ed782a04d08a480d57000dceb19c36cd7f166c01d763619b015007f) cool() klabel(Ccallgas) org.kframework.attributes.Location(Location(748,24,748,93)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) productionID(129498568) strict(2)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
															v[24], i.evalErr = i.evalIsBExp( // isBExp(HOLE)
																v[2] /*HOLE*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0))
															bv[1] = /* rhs precomputed isInt(K5) && isInt(K6) */ /* && */ m.IsTrue(v[24])
															if bv[1] {
																v[25], i.evalErr = i.evalIsSchedule( // isSchedule(K0)
																	v[6] /*K0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[25])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBExp(HOLE)),isSchedule(K0)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
															bv[0] = bv[1] /* && */ /* rhs precomputed isInt(K3) */  /* && */ /* rhs precomputed isInt(K4) */  /* && */ /* rhs precomputed isInt(K2) */ 
															if bv[0] {
																v[26], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
																	v[2] /*HOLE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[26])
															}
															if bv[0] {
																// RHS
																return i.stepRHS388(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 393
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu23 { // `#freezer_=load_,_,__IELE-COMMON1_2`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #393
									// source: iele-syntax.k @127
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=load_,_,__IELE-COMMON1_2`(K0,K1,K3)=>`_=load_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(49b1b219c327352cef5500916286a8a13e0c73e7301f9ca212dcfb50429622d2) cool() hybrid() org.kframework.attributes.Location(Location(127,23,127,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(873634936) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS393(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 408
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqiszeroXuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=iszero__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #408
									// source: iele-syntax.k @146
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=iszero__IELE-COMMON0_`(K0)=>`_=iszero__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(2fa8ea19e74c0ab4087e8cc175079e0d7c85e3f919d81229174c4c2ac2bbc2ec) cool() hybrid() org.kframework.attributes.Location(Location(146,25,146,71)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1046665075) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS408(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 411
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu35 { // `#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4,K5)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K4 = v[9]
					v[10] = i.Model.KApplyArg(v[4], 4)
					// KVariable K5 = v[10]
					// KVariable DotVar1 = v[5]
					v[11] = i.Model.KApplyArg(c, 1)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[15] = i.Model.KApplyArg(v[13], 0)
								if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[14]
									v[16] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[18]
									v[19] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[19]
									v[20] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[22]
									// rule #411
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_3`(K0,K2,K3,K4,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,HOLE,K2,K3,K4,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(aace82352a85ac955d165b9cb4c0a35388312869b38e83c76780d661aa20e26b) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[23], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[10] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[23])
										if bv[5] {
											v[24], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2))
										bv[4] = bv[5]
										if bv[4] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4))
										bv[3] = bv[4]
										if bv[3] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[9] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[27], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[28], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[28])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[29])
										}
										if bv[0] {
											// RHS
											return i.stepRHS411(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 421
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqlog2XuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=log2__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #421
									// source: iele-syntax.k @160
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=log2__IELE-COMMON0_`(K0)=>`_=log2__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(dcb6d3ce9eb3e1b66ea24838e36050e0e3d8195bf21047c0f22044cddcfc4b9d) cool() hybrid() org.kframework.attributes.Location(Location(160,24,160,115)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(418179060) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS421(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 429
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezer_=expmod_,_,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #429
									// source: iele-syntax.k @158
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=expmod_,_,__IELE-COMMON0_`(K0,K1,K2)=>`_=expmod_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(9a757c549e17c02ee62eebd7c5c4f9d1d1d0f712c96774a2959e33f50e754c2d) cool() hybrid() org.kframework.attributes.Location(Location(158,25,158,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(527829831) seqstrict(2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS429(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 435
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=call_(_)_IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #435
									// source: iele-syntax.k @192
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_(_)_IELE-COMMON1_`(K0,K2)=>`_=call_(_)_IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(def5d9755e084f20969804e39709b014c4e1318e7ac74bb3149089a4c527822b) cool() hybrid() org.kframework.attributes.Location(Location(192,30,192,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(394785440) strict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsOperands( // isOperands(K2)
											v[7] /*K2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K2),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K2),isOperand(HOLE)),isLValues(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS435(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 476
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=bswap_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #476
									// source: iele-syntax.k @164
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=bswap_,__IELE-COMMON1_`(K0,K2)=>`_=bswap_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(ee2c97a277b699a2ebf0e2a8bf464e0e65de5fdc62ae66d75db93e9b426ed2ab) cool() hybrid() org.kframework.attributes.Location(Location(164,24,164,120)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1281025083) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS476(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 490
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON1Xu45 { // `#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4`(K0,K1,K2,K3,K5)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K3 = v[9]
					v[10] = i.Model.KApplyArg(v[4], 4)
					// KVariable K5 = v[10]
					// KVariable DotVar1 = v[5]
					v[11] = i.Model.KApplyArg(c, 1)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[15] = i.Model.KApplyArg(v[13], 0)
								if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[14]
									v[16] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[18]
									v[19] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[19]
									v[20] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[22]
									// rule #490
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON1_4`(K0,K1,K2,K3,K5)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,HOLE,K5)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8feb371d0dbebb4b2d7bfc90c8293c378d9e46167d024bd6c316fc803c40c965) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[23], i.evalErr = i.evalIsOperand( // isOperand(K5)
											v[10] /*K5*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K5),isOperands(K3))
										bv[5] = m.IsTrue(v[23])
										if bv[5] {
											v[24], i.evalErr = i.evalIsOperands( // isOperands(K3)
												v[9] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2))
										bv[4] = bv[5]
										if bv[4] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[27], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[28], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[28])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K5),isOperands(K3)),isOperand(K2)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[29])
										}
										if bv[0] {
											// RHS
											return i.stepRHS490(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 507
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON0Xu2 { // `#freezer_=shift_,__IELE-COMMON0_`(K0,K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #507
									// source: iele-syntax.k @169
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=shift_,__IELE-COMMON0_`(K0,K1)=>`_=shift_,__IELE-COMMON`(K0,K1,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(0c3a04e19e1a9223130ee57352c33b856deb99fd6375e7681afa0e000c19455c) cool() hybrid() org.kframework.attributes.Location(Location(169,24,169,105)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(777457133) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS507(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 509
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerrevertXuXuIELEXhyphenCOMMON0Xu0 { // `#freezerrevert__IELE-COMMON0_`(.KList)
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #509
									// source: iele-syntax.k @200
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerrevert__IELE-COMMON0_`(.KList)=>`revert__IELE-COMMON`(HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7071b55f6d16cb1d11ebf835f9441bd143445f73699a7c62996c599849b4b427) cool() hybrid() org.kframework.attributes.Location(Location(200,25,200,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(949684105) strict(1)] |}
									if !matched {
										// REQUIRES `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[18], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = m.IsTrue(v[18])
										if bv[0] {
											v[19], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[19])
										}
										if bv[0] {
											// RHS
											return i.stepRHS509(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 513
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqandXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=and_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #513
									// source: iele-syntax.k @166
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=and_,__IELE-COMMON1_`(K0,K2)=>`_=and_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(10321c917499b4daac3c6a8f4aa088e38bee19b33dbe81080405152deeeae92a) cool() hybrid() org.kframework.attributes.Location(Location(166,24,166,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(40170008) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS513(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 516
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerlogXuXcommaXuXuIELEXhyphenCOMMON1Xu1 { // `#freezerlog_,__IELE-COMMON1_`(K1)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K1 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #516
									// source: iele-syntax.k @209
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog_,__IELE-COMMON1_`(K1)=>`log_,__IELE-COMMON`(HOLE,K1)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(36a77a722575f684c648db2b569ce81b65ce60f1a4c8e315bd9b9b6ca1898223) cool() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1200470358) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(K1)
												v[6] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isOperand(HOLE),isNonEmptyOperands(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS516(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 518
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON1Xu23 { // `#freezerstore_,_,_,__IELE-COMMON1_2`(K0,K1,K3)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K3 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #518
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON1_2`(K0,K1,K3)=>`store_,_,_,__IELE-COMMON`(K0,K1,HOLE,K3)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7289f408d80f5cf248e90d00f4e9b03e9ee4c1194af3b50b6a69bbe52f765590) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(HOLE))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(K3)
												v[8] /*K3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(HOLE)),isOperand(K3)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS518(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 521
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON0Xu5 { // `#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_`(K0,K1,K2,K3,K4)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					v[9] = i.Model.KApplyArg(v[4], 3)
					// KVariable K3 = v[9]
					v[10] = i.Model.KApplyArg(v[4], 4)
					// KVariable K4 = v[10]
					// KVariable DotVar1 = v[5]
					v[11] = i.Model.KApplyArg(c, 1)
					if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[12] = i.Model.KApplyArg(v[11], 0)
						if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[15] = i.Model.KApplyArg(v[13], 0)
								if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[14]
									v[16] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[16]
									v[17] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[17]
									v[18] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[18]
									v[19] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[19]
									v[20] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[22]
									// rule #521
									// source: iele-syntax.k @193
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=call_at_(_)send_,gaslimit__IELE-COMMON0_`(K0,K1,K2,K3,K4)=>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(K0,K1,K2,K3,K4,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(208aa8603040389406a54f12991f6963a0cef5fec6b38c74e6ea64d011f311ee) cool() hybrid() org.kframework.attributes.Location(Location(193,30,193,154)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(2112233878) seqstrict(2,3,4,5,6)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[23], i.evalErr = i.evalIsOperands( // isOperands(K3)
											v[9] /*K3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperands(K3),isOperand(K2))
										bv[5] = m.IsTrue(v[23])
										if bv[5] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[5] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4))
										bv[4] = bv[5]
										if bv[4] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(K4)
												v[10] /*K4*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[4] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE))
										bv[3] = bv[4]
										if bv[3] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[26])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0))
										bv[2] = bv[3]
										if bv[2] {
											v[27], i.evalErr = i.evalIsLValues( // isLValues(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[27])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[28], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[28])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperands(K3),isOperand(K2)),isOperand(K4)),isOperand(HOLE)),isLValues(K0)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[29], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[29])
										}
										if bv[0] {
											// RHS
											return i.stepRHS521(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 533
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerlogXuXcommaXuXuIELEXhyphenCOMMON0Xu1 { // `#freezerlog_,__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #533
									// source: iele-syntax.k @209
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerlog_,__IELE-COMMON0_`(K0)=>`log_,__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(15dcd970c3fd66da079724b23941fddf5156f8590b5beab078f04bc902db58ac) cool() hybrid() org.kframework.attributes.Location(Location(209,22,209,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1200470358) seqstrict(1,2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(HOLE)
											v[2] /*HOLE*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(K0)
												v[6] /*K0*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isNonEmptyOperands(HOLE),isOperand(K0)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS533(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 554
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerstoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON0Xu3 { // `#freezerstore_,_,_,__IELE-COMMON0_`(K0,K1,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K1 = v[7]
					v[8] = i.Model.KApplyArg(v[4], 2)
					// KVariable K2 = v[8]
					// KVariable DotVar1 = v[5]
					v[9] = i.Model.KApplyArg(c, 1)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[10] = i.Model.KApplyArg(v[9], 0)
						if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[13] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[12]
									v[14] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[20]
									// rule #554
									// source: iele-syntax.k @129
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezerstore_,_,_,__IELE-COMMON0_`(K0,K1,K2)=>`store_,_,_,__IELE-COMMON`(K0,K1,K2,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(db9e405e23abd5ce4a040b6238848d74d2c6f323e9763ef61cf542838d681b5c) cool() hybrid() org.kframework.attributes.Location(Location(129,24,129,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(573200870) seqstrict(1,2,3,4)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[21], i.evalErr = i.evalIsOperand( // isOperand(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(K0),isOperand(K2))
										bv[3] = m.IsTrue(v[21])
										if bv[3] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[8] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE))
										bv[2] = bv[3]
										if bv[2] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1))
										bv[1] = bv[2]
										if bv[1] {
											v[24], i.evalErr = i.evalIsOperand( // isOperand(K1)
												v[7] /*K1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(K0),isOperand(K2)),isOperand(HOLE)),isOperand(K1)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[25], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[25])
										}
										if bv[0] {
											// RHS
											return i.stepRHS554(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 556
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON1Xu2 { // `#freezer_=mul_,__IELE-COMMON1_`(K0,K2)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					v[7] = i.Model.KApplyArg(v[4], 1)
					// KVariable K2 = v[7]
					// KVariable DotVar1 = v[5]
					v[8] = i.Model.KApplyArg(c, 1)
					if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[9] = i.Model.KApplyArg(v[8], 0)
						if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[12] = i.Model.KApplyArg(v[10], 0)
								if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[11]
									v[13] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[16]
									v[17] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[17]
									v[18] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[18]
									v[19] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[19]
									// rule #556
									// source: iele-syntax.k @150
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=mul_,__IELE-COMMON1_`(K0,K2)=>`_=mul_,__IELE-COMMON`(K0,HOLE,K2)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(ca387f097815b490f89fb88fb470d44f13bbcbb0a3ff69c04f70282458286012) cool() hybrid() org.kframework.attributes.Location(Location(150,22,150,82)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1670313965) seqstrict(2,3)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[20], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(K2))
										bv[2] = m.IsTrue(v[20])
										if bv[2] {
											v[21], i.evalErr = i.evalIsOperand( // isOperand(K2)
												v[7] /*K2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[21])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE))
										bv[1] = bv[2]
										if bv[1] {
											v[22], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[22])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(K0),isOperand(K2)),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[23], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[23])
										}
										if bv[0] {
											// RHS
											return i.stepRHS556(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rule: 559
				if v[4]&kapplyMatchMask == kapplyMatchLblXhashfreezerXuXeqsloadXuXuIELEXhyphenCOMMON0Xu1 { // `#freezer_=sload__IELE-COMMON0_`(K0)
					v[6] = i.Model.KApplyArg(v[4], 0)
					// KVariable K0 = v[6]
					// KVariable DotVar1 = v[5]
					v[7] = i.Model.KApplyArg(c, 1)
					if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[8] = i.Model.KApplyArg(v[7], 0)
						if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[11] = i.Model.KApplyArg(v[9], 0)
								if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[10]
									v[12] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[12]
									v[13] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[13]
									v[14] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[14]
									v[15] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[15]
									v[16] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[16]
									v[17] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[17]
									v[18] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[18]
									// rule #559
									// source: iele-syntax.k @137
									// {| rule `<generatedTop>`(`<k>`(``HOLE~>`#freezer_=sload__IELE-COMMON0_`(K0)=>`_=sload__IELE-COMMON`(K0,HOLE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(7f01df7cc3b09448b3609c648e9b154d779bf34ead62549cc435817bf941a5e5) cool() hybrid() org.kframework.attributes.Location(Location(137,24,137,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-syntax.k)) productionID(1819940427) strict(2)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										v[19], i.evalErr = i.evalIsLValue( // isLValue(K0)
											v[6] /*K0*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isLValue(K0),isOperand(HOLE))
										bv[1] = m.IsTrue(v[19])
										if bv[1] {
											v[20], i.evalErr = i.evalIsOperand( // isOperand(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[20])
										}
										// `_andBool_`(`_andBool_`(isLValue(K0),isOperand(HOLE)),`_andBool_`(#token("true","Bool"),isKResult(HOLE)))
										bv[0] = bv[1]
										if bv[0] {
											v[21], i.evalErr = i.evalIsKResult( // isKResult(HOLE)
												v[2] /*HOLE*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = /* rhs KToken */ /* && */ m.IsTrue(v[21])
										}
										if bv[0] {
											// RHS
											return i.stepRHS559(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 27, 410, 495
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashendXuIELEXhyphenINFRASTRUCTURE0 { // `#end_IELE-INFRASTRUCTURE`(.KList)
					// rule: 27
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashreturnXuXuXuIELE2 { // `#return___IELE`(REGS,REG)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable REGS = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable REG = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _27 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										if v[14]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
											v[15] = i.Model.KApplyArg(v[14], 0)
											// KVariable EXECMODE = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
												v[20] = i.Model.KApplyArg(v[19], 0)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(OUT)
													v[21] = i.Model.KApplyArg(v[20], 0)
													// KVariable OUT = v[21]
													v[22] = i.Model.KApplyArg(v[19], 1)
													// KVariable _14 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 2)
													// KVariable _15 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 3)
													// KVariable _16 = v[24]
													v[25] = i.Model.KApplyArg(v[19], 4)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
														v[26] = i.Model.KApplyArg(v[25], 0)
														// KVariable _0 = v[26]
														v[27] = i.Model.KApplyArg(v[25], 1)
														// KVariable _1 = v[27]
														v[28] = i.Model.KApplyArg(v[25], 2)
														// KVariable _2 = v[28]
														v[29] = i.Model.KApplyArg(v[25], 3)
														// KVariable _3 = v[29]
														v[30] = i.Model.KApplyArg(v[25], 4)
														// KVariable _4 = v[30]
														v[31] = i.Model.KApplyArg(v[25], 5)
														// KVariable _5 = v[31]
														v[32] = i.Model.KApplyArg(v[25], 6)
														// KVariable _6 = v[32]
														v[33] = i.Model.KApplyArg(v[25], 7)
														// KVariable _7 = v[33]
														v[34] = i.Model.KApplyArg(v[25], 8)
														// KVariable _8 = v[34]
														v[35] = i.Model.KApplyArg(v[25], 9)
														// KVariable _9 = v[35]
														v[36] = i.Model.KApplyArg(v[25], 10)
														// KVariable _10 = v[36]
														v[37] = i.Model.KApplyArg(v[25], 11)
														// KVariable _11 = v[37]
														v[38] = i.Model.KApplyArg(v[25], 12)
														if v[38]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
															v[39] = i.Model.KApplyArg(v[38], 0)
															if i.tempTypeVar = v[39] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable GAVAIL = v[39]
																v[40] = i.Model.KApplyArg(v[25], 13)
																// KVariable _12 = v[40]
																v[41] = i.Model.KApplyArg(v[25], 14)
																// KVariable _13 = v[41]
																v[42] = i.Model.KApplyArg(v[19], 5)
																// KVariable _17 = v[42]
																v[43] = i.Model.KApplyArg(v[19], 6)
																// KVariable _18 = v[43]
																v[44] = i.Model.KApplyArg(v[19], 7)
																// KVariable _19 = v[44]
																v[45] = i.Model.KApplyArg(v[19], 8)
																// KVariable _20 = v[45]
																v[46] = i.Model.KApplyArg(v[19], 9)
																// KVariable _21 = v[46]
																v[47] = i.Model.KApplyArg(v[19], 10)
																// KVariable _22 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 11)
																// KVariable _23 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 12)
																// KVariable _24 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 13)
																// KVariable _25 = v[50]
																v[51] = i.Model.KApplyArg(v[19], 14)
																// KVariable _26 = v[51]
																v[52] = i.Model.KApplyArg(c, 8)
																// KVariable _31 = v[52]
																// rule #27
																// source: iele.k @1297
																// {| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#return___IELE`(REGS,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,#token("1","Int"))~>#registerDeltas(REGS,OUT)~>`#load___IELE`(REG,#token("0","Int"))~>`#refund__IELE`(GAVAIL)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),.K,`#loads___IELE`(REGS,OUT))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,`<mode>`(EXECMODE),_28,_29,_30,`<iele>`(`<output>`(OUT),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMode(EXECMODE),isLValue(REG)),isInts(OUT)),isLValues(REGS)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(6fcef7423d6ff0515e57af8d54807483b219c37f78ab47c90e1e047396db2fb5) contentStartColumn(10) contentStartLine(1297) org.kframework.attributes.Location(Location(1297,10,1308,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMode(EXECMODE),isLValue(REG)),isInts(OUT)),isLValues(REGS)),#token("true","Bool"))
																	v[53], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																		v[15] /*EXECMODE*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isMode(EXECMODE),isLValue(REG))
																	bv[2] = m.IsTrue(v[53])
																	if bv[2] {
																		v[54], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[7] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[54])
																	}
																	// `_andBool_`(`_andBool_`(isMode(EXECMODE),isLValue(REG)),isInts(OUT))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[55], i.evalErr = i.evalIsInts( // isInts(OUT)
																			v[21] /*OUT*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[55])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(isMode(EXECMODE),isLValue(REG)),isInts(OUT)),isLValues(REGS))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[56], i.evalErr = i.evalIsLValues( // isLValues(REGS)
																			v[6] /*REGS*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[56])
																	}
																	if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																		// RHS
																		return i.stepRHS27(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 410
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashcodeDepositXuXuXuXuXuXuXuIELE6 { // `#codeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)
						v[6] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[6]
							v[7] = i.Model.KApplyArg(v[4], 1)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable LEN = v[7]
								v[8] = i.Model.KApplyArg(v[4], 2)
								// KVariable CODE = v[8]
								v[9] = i.Model.KApplyArg(v[4], 3)
								// KVariable STATUS = v[9]
								v[10] = i.Model.KApplyArg(v[4], 4)
								// KVariable ACCTOUT = v[10]
								v[11] = i.Model.KApplyArg(v[4], 5)
								if v[11]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable NEW = v[11]
									// KVariable DotVar1 = v[5]
									v[12] = i.Model.KApplyArg(c, 1)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[13] = i.Model.KApplyArg(v[12], 0)
										if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[16] = i.Model.KApplyArg(v[14], 0)
												if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[15]
													v[17] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[17]
													v[18] = i.Model.KApplyArg(c, 3)
													if v[18]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
														v[19] = i.Model.KApplyArg(v[18], 0)
														// KVariable EXECMODE = v[19]
														v[20] = i.Model.KApplyArg(c, 4)
														// KVariable _1 = v[20]
														v[21] = i.Model.KApplyArg(c, 5)
														// KVariable _2 = v[21]
														v[22] = i.Model.KApplyArg(c, 6)
														// KVariable _3 = v[22]
														v[23] = i.Model.KApplyArg(c, 7)
														// KVariable _4 = v[23]
														v[24] = i.Model.KApplyArg(c, 8)
														// KVariable _5 = v[24]
														// rule #410
														// source: iele.k @1433
														// {| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#codeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)=>`#mkCodeDeposit_______IELE`(ACCT,LEN,CODE,STATUS,ACCTOUT,NEW)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,`<mode>`(EXECMODE),_1,_2,_3,_4,_5) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(LEN),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE)),isLValue(ACCTOUT)),isInt(ACCT)),isBool(NEW)) ensures #token("true","Bool") [UNIQUE_ID(76fec47502da83429ff17f782c2d8737b8070bbd293fa84d3d309af37c27078b) contentStartColumn(10) contentStartLine(1433) org.kframework.attributes.Location(Location(1433,10,1434,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE)),isLValue(ACCTOUT)),#token("true","Bool")),#token("true","Bool"))
															v[25], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																v[9] /*STATUS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(STATUS)),isMode(EXECMODE))
															bv[2] = /* rhs precomputed isInt(LEN) */ /* && */ m.IsTrue(v[25])
															if bv[2] {
																v[26], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																	v[19] /*EXECMODE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[26])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE))
															bv[1] = bv[2]
															if bv[1] {
																v[27], i.evalErr = i.evalIsContract( // isContract(CODE)
																	v[8] /*CODE*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[27])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(STATUS)),isMode(EXECMODE)),isContract(CODE)),isLValue(ACCTOUT))
															bv[0] = bv[1]
															if bv[0] {
																v[28], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																	v[10] /*ACCTOUT*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[28])
															}
															if bv[0] /* && */ /* rhs precomputed isInt(ACCT) */  /* && */ /* rhs precomputed isBool(NEW) */  {
																// RHS
																return i.stepRHS410(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 495
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashendVMXuIELEXhyphenNODE0 { // `#endVM_IELE-NODE`(.KList)
						// KVariable DotVar1 = v[5]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												// KVariable _5 = v[27]
												v[28] = i.Model.KApplyArg(v[21], 6)
												// KVariable _6 = v[28]
												v[29] = i.Model.KApplyArg(v[21], 7)
												// KVariable _7 = v[29]
												v[30] = i.Model.KApplyArg(v[21], 8)
												// KVariable _8 = v[30]
												v[31] = i.Model.KApplyArg(v[21], 9)
												// KVariable _9 = v[31]
												v[32] = i.Model.KApplyArg(v[21], 10)
												// KVariable _10 = v[32]
												v[33] = i.Model.KApplyArg(v[21], 11)
												// KVariable _11 = v[33]
												v[34] = i.Model.KApplyArg(v[21], 12)
												if v[34]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
													v[35] = i.Model.KApplyArg(v[34], 0)
													if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable GAVAIL = v[35]
														v[36] = i.Model.KApplyArg(v[21], 13)
														// KVariable _12 = v[36]
														v[37] = i.Model.KApplyArg(v[21], 14)
														// KVariable _13 = v[37]
														v[38] = i.Model.KApplyArg(v[16], 5)
														// KVariable _18 = v[38]
														v[39] = i.Model.KApplyArg(v[16], 6)
														// KVariable _19 = v[39]
														v[40] = i.Model.KApplyArg(v[16], 7)
														// KVariable _20 = v[40]
														v[41] = i.Model.KApplyArg(v[16], 8)
														// KVariable _21 = v[41]
														v[42] = i.Model.KApplyArg(v[16], 9)
														// KVariable _22 = v[42]
														v[43] = i.Model.KApplyArg(v[16], 10)
														// KVariable _23 = v[43]
														v[44] = i.Model.KApplyArg(v[16], 11)
														// KVariable _24 = v[44]
														v[45] = i.Model.KApplyArg(v[16], 12)
														// KVariable _25 = v[45]
														v[46] = i.Model.KApplyArg(v[16], 13)
														// KVariable _26 = v[46]
														v[47] = i.Model.KApplyArg(v[16], 14)
														// KVariable _27 = v[47]
														v[48] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[48]
														// rule #495
														// source: iele-node.k @111
														// {| rule `<generatedTop>`(`<k>`(`` `#end_IELE-INFRASTRUCTURE`(.KList)~>`#endVM_IELE-NODE`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#dropWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#refund__IELE`(GAVAIL)~>#token("0","Int")``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires isInt(GAVAIL) ensures #token("true","Bool") [UNIQUE_ID(c680c89542b1baa12be7b06fab7602f746885056853dd8d5a7461995b433683a) contentStartColumn(10) contentStartLine(111) org.kframework.attributes.Location(Location(111,10,112,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// REQUIRES precomputed isInt(GAVAIL)
															// RHS
															return i.stepRHS495(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 39
				if i.tempTypeVar = v[2] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
					// KVariable G = v[2]
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashdeductGasXuIELEXhyphenGAS0 { // `#deductGas_IELE-GAS`(.KList)
						// KVariable DotVar1 = v[5]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _14 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _15 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _16 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _17 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												// KVariable _5 = v[27]
												v[28] = i.Model.KApplyArg(v[21], 6)
												// KVariable _6 = v[28]
												v[29] = i.Model.KApplyArg(v[21], 7)
												// KVariable _7 = v[29]
												v[30] = i.Model.KApplyArg(v[21], 8)
												// KVariable _8 = v[30]
												v[31] = i.Model.KApplyArg(v[21], 9)
												// KVariable _9 = v[31]
												v[32] = i.Model.KApplyArg(v[21], 10)
												// KVariable _10 = v[32]
												v[33] = i.Model.KApplyArg(v[21], 11)
												// KVariable _11 = v[33]
												v[34] = i.Model.KApplyArg(v[21], 12)
												if v[34]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
													v[35] = i.Model.KApplyArg(v[34], 0)
													if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable GAVAIL = v[35]
														v[36] = i.Model.KApplyArg(v[21], 13)
														// KVariable _12 = v[36]
														v[37] = i.Model.KApplyArg(v[21], 14)
														// KVariable _13 = v[37]
														v[38] = i.Model.KApplyArg(v[16], 5)
														// KVariable _18 = v[38]
														v[39] = i.Model.KApplyArg(v[16], 6)
														// KVariable _19 = v[39]
														v[40] = i.Model.KApplyArg(v[16], 7)
														// KVariable _20 = v[40]
														v[41] = i.Model.KApplyArg(v[16], 8)
														// KVariable _21 = v[41]
														v[42] = i.Model.KApplyArg(v[16], 9)
														// KVariable _22 = v[42]
														v[43] = i.Model.KApplyArg(v[16], 10)
														// KVariable _23 = v[43]
														v[44] = i.Model.KApplyArg(v[16], 11)
														// KVariable _24 = v[44]
														v[45] = i.Model.KApplyArg(v[16], 12)
														// KVariable _25 = v[45]
														v[46] = i.Model.KApplyArg(v[16], 13)
														// KVariable _26 = v[46]
														v[47] = i.Model.KApplyArg(v[16], 14)
														// KVariable _27 = v[47]
														v[48] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[48]
														// rule #39
														// source: iele-gas.k @31
														// {| rule `<generatedTop>`(`<k>`(``G~>`#deductGas_IELE-GAS`(.KList)=>`#exception__IELE-INFRASTRUCTURE`(#token("5","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(isInt(G),isInt(GAVAIL)),`_<Int__INT`(GAVAIL,G)) ensures #token("true","Bool") [UNIQUE_ID(9c55c1fe5ceb0393d8aff1f5285ce64e0be375a77c4189fef098a636c37974ef) contentStartColumn(10) contentStartLine(31) org.kframework.attributes.Location(Location(31,10,31,127)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// REQUIRES `_andBool_`(#token("true","Bool"),`_<Int__INT`(GAVAIL,G))
															v[49], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(GAVAIL,G)
																v[35] /*GAVAIL*/,
																v[2] /*G*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															if /* rhs precomputed isInt(G) && isInt(GAVAIL) */ /* && */ m.IsTrue(v[49]) {
																// RHS
																return i.stepRHS39(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 41, 43, 104, 112, 126, 139, 158, 160, 171, 180, 189, 202, 205, 245, 248, 279, 285, 302, 310, 330, 339, 350, 351, 356, 372, 376, 417, 432, 440, 442, 450, 469, 484, 488, 489, 511, 515, 525, 534, 547, 552
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckXuIELEXhyphenWELLXhyphenFORMEDNESS0 { // `check_IELE-WELL-FORMEDNESS`(.KList)
					// rule: 41
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=or_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #41
						// source: well-formedness.k @229
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=or_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(5f7590245d8a38607c5dcea751e11672fc2cd4e9c5e7acc17f17ce936a334866) contentStartColumn(10) contentStartLine(229) org.kframework.attributes.Location(Location(229,10,229,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS41(v, bv, config)
							}
						}
					}
					// rule: 43
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqxorXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=xor_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #43
						// source: well-formedness.k @230
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=xor_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(b94c9e3e87f5823900f37c092e0b27cfdbe54cfa8d2831284b1a9bb0806da9b6) contentStartColumn(10) contentStartLine(230) org.kframework.attributes.Location(Location(230,10,230,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS43(v, bv, config)
							}
						}
					}
					// rule: 104
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqXuXuIELEXhyphenCOMMON2 { // `_=__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #104
						// source: well-formedness.k @198
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(1008d78cbc927d949c049fa81d9b95257e2cc4aa922b3f8f609321e98cc64528) contentStartColumn(10) contentStartLine(198) org.kframework.attributes.Location(Location(198,10,198,69)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS104(v, bv, config)
							}
						}
					}
					// rule: 112
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=mulmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP3 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #112
						// source: well-formedness.k @218
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mulmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{"operandList"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(8d497d7cd0ad4b33bc0838ec7fcaf212fc0bde2a71a60461286c753ced24f437) contentStartColumn(10) contentStartLine(218) org.kframework.attributes.Location(Location(218,10,218,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							v[18], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP3)
									v[9] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS112(v, bv, config)
							}
						}
					}
					// rule: 126
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqshiftXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=shift_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #126
						// source: well-formedness.k @231
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=shift_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(2416e66f07e29c190f44d2d1d26d25bfef2ae3fb96610a00dd56461d6f8bedbd) contentStartColumn(10) contentStartLine(231) org.kframework.attributes.Location(Location(231,10,231,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS126(v, bv, config)
							}
						}
					}
					// rule: 139
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbyteXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=byte_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #139
						// source: well-formedness.k @221
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=byte_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(4c184a6a8e22b3acd7fba79dcf7651886adc642b2e17de1592e2576860eed372) contentStartColumn(10) contentStartLine(221) org.kframework.attributes.Location(Location(221,10,221,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS139(v, bv, config)
							}
						}
					}
					// rule: 158
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=add_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #158
						// source: well-formedness.k @210
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=add_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(0e18dab704589c40bd88414fc35e7b9c26e01a641b059ba3fac7168649c02711) contentStartColumn(10) contentStartLine(210) org.kframework.attributes.Location(Location(210,10,210,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS158(v, bv, config)
							}
						}
					}
					// rule: 160
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP3 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #160
						// source: well-formedness.k @200
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=load_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{"operandList"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(89f9e4eba8e2b198a2a02f1f7c0c387976705221a9ed528b76fb53058e5ebcc6) contentStartColumn(10) contentStartLine(200) org.kframework.attributes.Location(Location(200,10,200,95)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							v[18], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP3)
									v[9] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS160(v, bv, config)
							}
						}
					}
					// rule: 171
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqlog2XuXuIELEXhyphenCOMMON2 { // `_=log2__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #171
						// source: well-formedness.k @226
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=log2__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,`.List{"operandList"}`(.KList)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(24076c49362d8e503e3218e6871bd0887f168f2d42cb2734cd64ea3e89ac5ed8) contentStartColumn(10) contentStartLine(226) org.kframework.attributes.Location(Location(226,10,226,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS171(v, bv, config)
							}
						}
					}
					// rule: 180
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(STATUS,RET,OP1,ARGS,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable STATUS = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable RET = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP1 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable ARGS = v[9]
						v[10] = i.Model.KApplyArg(v[4], 4)
						// KVariable OP2 = v[10]
						// KVariable DotVar1 = v[5]
						v[11] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[11]
						v[12] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[12]
						v[13] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[13]
						v[14] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[14]
						v[15] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[15]
						v[16] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[16]
						v[17] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[17]
						v[18] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[18]
						// rule #180
						// source: well-formedness.k @298
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,RET,OP1,ARGS,OP2)=>checkLVals(lvalueList(STATUS,lvalueList(RET,`.List{"lvalueList"}`(.KList))))~>checkOperands(operandList(OP1,operandList(OP2,ARGS)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(9d649cb6212a6d702fb66554be0235e081c8abf4290f9ea914132ba095454d50) contentStartColumn(10) contentStartLine(298) org.kframework.attributes.Location(Location(298,10,298,128)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2))
							v[19], i.evalErr = i.evalIsLValue( // isLValue(RET)
								v[7] /*RET*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(RET),isLValue(STATUS))
							bv[3] = m.IsTrue(v[19])
							if bv[3] {
								v[20], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
									v[6] /*STATUS*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[3] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS))
							bv[2] = bv[3]
							if bv[2] {
								v[21], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
									v[9] /*ARGS*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[21])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))
							bv[1] = bv[2]
							if bv[1] {
								v[22], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[8] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[22])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[23], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[10] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[23])
							}
							if bv[0] {
								// RHS
								return i.stepRHS180(v, bv, config)
							}
						}
					}
					// rule: 189
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=exp_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #189
						// source: well-formedness.k @214
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=exp_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(97fb62c52ea934071b486283700b0401ac295dc75a1dc6a238d5b60b0815abf1) contentStartColumn(10) contentStartLine(214) org.kframework.attributes.Location(Location(214,10,214,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS189(v, bv, config)
							}
						}
					}
					// rule: 202
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqexpmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=expmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP3 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #202
						// source: well-formedness.k @219
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=expmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{"operandList"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(1b49462180f8911c83ff3f7ba483f91af530fb579b3b4381354dd63fe44446b2) contentStartColumn(10) contentStartLine(219) org.kframework.attributes.Location(Location(219,10,219,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							v[18], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP3)
									v[9] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS202(v, bv, config)
							}
						}
					}
					// rule: 205
					if v[4]&kapplyMatchMask == kapplyMatchLblSelfdestructXuXuIELEXhyphenCOMMON1 { // `selfdestruct__IELE-COMMON`(OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						// KVariable DotVar1 = v[5]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[14]
						// rule #205
						// source: well-formedness.k @243
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`selfdestruct__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token("true","Bool") [UNIQUE_ID(bc1ddea196b77dd3e3d3e70a53b425a7e7473df2eeb66465c39ceb2e919aff04) contentStartColumn(10) contentStartLine(243) org.kframework.attributes.Location(Location(243,10,243,56)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isOperand(OP1)
							v[15], i.evalErr = i.evalIsOperand( // isOperand(OP1)
								v[6] /*OP1*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[15]) {
								// RHS
								return i.stepRHS205(v, bv, config)
							}
						}
					}
					// rule: 245
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqstaticcallXuatXuXlparenXuXrparengaslimitXuXuIELEXhyphenCOMMON5 { // `_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						if v[6]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(STATUS,RETS)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable STATUS = v[7]
							v[8] = i.Model.KApplyArg(v[6], 1)
							// KVariable RETS = v[8]
							v[9] = i.Model.KApplyArg(v[4], 1)
							// KVariable NAME = v[9]
							v[10] = i.Model.KApplyArg(v[4], 2)
							// KVariable OP1 = v[10]
							v[11] = i.Model.KApplyArg(v[4], 3)
							// KVariable ARGS = v[11]
							v[12] = i.Model.KApplyArg(v[4], 4)
							// KVariable OP2 = v[12]
							// KVariable DotVar1 = v[5]
							v[13] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[13]
							v[14] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[14]
							v[15] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[15]
							v[16] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[16]
							v[17] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[17]
							v[18] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[18]
							v[19] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[19]
							v[20] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[20]
							// rule #245
							// source: well-formedness.k @276
							// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=staticcall_at_(_)gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2)=>checkLVals(lvalueList(STATUS,RETS))~>checkOperands(operandList(OP1,operandList(OP2,ARGS)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(d497e2357709e036b7a5c822a60e327045d8ac4d4cc13589c8327c8f18e97230) contentStartColumn(10) contentStartLine(276) org.kframework.attributes.Location(Location(276,10,276,141)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2))
								v[21], i.evalErr = i.evalIsOperand( // isOperand(NAME)
									v[9] /*NAME*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isOperand(NAME),isLValues(RETS))
								bv[4] = m.IsTrue(v[21])
								if bv[4] {
									v[22], i.evalErr = i.evalIsLValues( // isLValues(RETS)
										v[8] /*RETS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[4] = m.IsTrue(v[22])
								}
								// `_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS))
								bv[3] = bv[4]
								if bv[3] {
									v[23], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
										v[7] /*STATUS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[3] = m.IsTrue(v[23])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS))
								bv[2] = bv[3]
								if bv[2] {
									v[24], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
										v[11] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[2] = m.IsTrue(v[24])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))
								bv[1] = bv[2]
								if bv[1] {
									v[25], i.evalErr = i.evalIsOperand( // isOperand(OP1)
										v[10] /*OP1*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[25])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2))
								bv[0] = bv[1]
								if bv[0] {
									v[26], i.evalErr = i.evalIsOperand( // isOperand(OP2)
										v[12] /*OP2*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[26])
								}
								if bv[0] {
									// RHS
									return i.stepRHS245(v, bv, config)
								}
							}
						}
					}
					// rule: 248
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsextXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sext_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #248
						// source: well-formedness.k @222
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sext_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(2ab0391cdf8e43cd5554a920b5b9da80cb432506bd0955b4fa2af7c610f517db) contentStartColumn(10) contentStartLine(222) org.kframework.attributes.Location(Location(222,10,222,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS248(v, bv, config)
							}
						}
					}
					// rule: 279
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(RET,NAME,OP)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable RET = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable NAME = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #279
						// source: well-formedness.k @278
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=calladdress_at__IELE-COMMON`(RET,NAME,OP)=>checkLVal(RET)~>checkOperand(OP)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(RET),isGlobalName(NAME)),isOperand(OP)) ensures #token("true","Bool") [UNIQUE_ID(02e1686b57e4d64c561163e98e97e1ff3a7ac3cbe95caed557a19329b9f154a8) contentStartColumn(10) contentStartLine(278) org.kframework.attributes.Location(Location(278,10,278,85)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(RET),isGlobalName(NAME)),isOperand(OP))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(RET)
								v[6] /*RET*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(RET),isGlobalName(NAME))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsGlobalName( // isGlobalName(NAME)
									v[7] /*NAME*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(RET),isGlobalName(NAME)),isOperand(OP))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP)
									v[8] /*OP*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS279(v, bv, config)
							}
						}
					}
					// rule: 285
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #285
						// source: well-formedness.k @199
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=load__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(a805d89729d1e042c0381d4bf06dec3653a11e8af557819a1d7cdf24fadfa560) contentStartColumn(10) contentStartLine(199) org.kframework.attributes.Location(Location(199,10,199,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS285(v, bv, config)
							}
						}
					}
					// rule: 302
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqbswapXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=bswap_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #302
						// source: well-formedness.k @224
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=bswap_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(634512dac32e78fab22c1e37ac5f320b172a1fc1ee53a821743f4b2178462f20) contentStartColumn(10) contentStartLine(224) org.kframework.attributes.Location(Location(224,10,224,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS302(v, bv, config)
							}
						}
					}
					// rules: 310, 330, 484, 515
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXcommaXuXuIELEXhyphenCOMMON2 { // `log_,__IELE-COMMON`(OP1,operandList(OP2,operandList(OP3,operandList(OP4,OP5))))
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// rules: 310, 330, 484
						if v[7]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(OP2,operandList(OP3,operandList(OP4,OP5)))
							v[8] = i.Model.KApplyArg(v[7], 0)
							// KVariable OP2 = v[8]
							v[9] = i.Model.KApplyArg(v[7], 1)
							// rules: 310, 330
							if v[9]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(OP3,operandList(OP4,OP5))
								v[10] = i.Model.KApplyArg(v[9], 0)
								// KVariable OP3 = v[10]
								v[11] = i.Model.KApplyArg(v[9], 1)
								// rule: 310
								if v[11]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(OP4,OP5)
									v[12] = i.Model.KApplyArg(v[11], 0)
									// KVariable OP4 = v[12]
									v[13] = i.Model.KApplyArg(v[11], 1)
									// KVariable OP5 = v[13]
									// KVariable DotVar1 = v[5]
									v[14] = i.Model.KApplyArg(c, 1)
									// KVariable _0 = v[14]
									v[15] = i.Model.KApplyArg(c, 2)
									// KVariable _1 = v[15]
									v[16] = i.Model.KApplyArg(c, 3)
									// KVariable _2 = v[16]
									v[17] = i.Model.KApplyArg(c, 4)
									// KVariable _3 = v[17]
									v[18] = i.Model.KApplyArg(c, 5)
									// KVariable _4 = v[18]
									v[19] = i.Model.KApplyArg(c, 6)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(c, 7)
									// KVariable _6 = v[20]
									v[21] = i.Model.KApplyArg(c, 8)
									// KVariable _7 = v[21]
									// rule #310
									// source: well-formedness.k @240
									// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,operandList(OP3,operandList(OP4,OP5))))=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,operandList(OP4,OP5)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(b51d4ec4400c98efe58adaebcbd0a2fce82f4c15f14a0787777ffb3750670e01) contentStartColumn(10) contentStartLine(240) org.kframework.attributes.Location(Location(240,10,240,88)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5)),isOperand(OP2)),isOperand(OP3))
										v[22], i.evalErr = i.evalIsOperand( // isOperand(OP4)
											v[12] /*OP4*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										// `_andBool_`(isOperand(OP4),isOperand(OP1))
										bv[3] = m.IsTrue(v[22])
										if bv[3] {
											v[23], i.evalErr = i.evalIsOperand( // isOperand(OP1)
												v[6] /*OP1*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[3] = m.IsTrue(v[23])
										}
										// `_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5))
										bv[2] = bv[3]
										if bv[2] {
											v[24], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OP5)
												v[13] /*OP5*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[2] = m.IsTrue(v[24])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5)),isOperand(OP2))
										bv[1] = bv[2]
										if bv[1] {
											v[25], i.evalErr = i.evalIsOperand( // isOperand(OP2)
												v[8] /*OP2*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[1] = m.IsTrue(v[25])
										}
										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isNonEmptyOperands(OP5)),isOperand(OP2)),isOperand(OP3))
										bv[0] = bv[1]
										if bv[0] {
											v[26], i.evalErr = i.evalIsOperand( // isOperand(OP3)
												v[10] /*OP3*/,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											bv[0] = m.IsTrue(v[26])
										}
										if bv[0] {
											// RHS
											return i.stepRHS310(v, bv, config)
										}
									}
								}
								// rule: 330
								// KVariable OP4 = v[11]
								// KVariable DotVar1 = v[5]
								v[12] = i.Model.KApplyArg(c, 1)
								// KVariable _0 = v[12]
								v[13] = i.Model.KApplyArg(c, 2)
								// KVariable _1 = v[13]
								v[14] = i.Model.KApplyArg(c, 3)
								// KVariable _2 = v[14]
								v[15] = i.Model.KApplyArg(c, 4)
								// KVariable _3 = v[15]
								v[16] = i.Model.KApplyArg(c, 5)
								// KVariable _4 = v[16]
								v[17] = i.Model.KApplyArg(c, 6)
								// KVariable _5 = v[17]
								v[18] = i.Model.KApplyArg(c, 7)
								// KVariable _6 = v[18]
								v[19] = i.Model.KApplyArg(c, 8)
								// KVariable _7 = v[19]
								// rule #330
								// source: well-formedness.k @239
								// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,operandList(OP3,OP4)))=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,OP4))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(99cd48edcb3ae19a1fa6cc098342df203ad280cad088ed18ae957b659260dd00) contentStartColumn(10) contentStartLine(239) org.kframework.attributes.Location(Location(239,10,239,83)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4)),isOperand(OP2)),isOperand(OP3))
									v[20], i.evalErr = i.evalIsOperand( // isOperand(OP1)
										v[6] /*OP1*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4))
									bv[2] = m.IsTrue(v[20])
									if bv[2] {
										v[21], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OP4)
											v[11] /*OP4*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[2] = m.IsTrue(v[21])
									}
									// `_andBool_`(`_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4)),isOperand(OP2))
									bv[1] = bv[2]
									if bv[1] {
										v[22], i.evalErr = i.evalIsOperand( // isOperand(OP2)
											v[8] /*OP2*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[1] = m.IsTrue(v[22])
									}
									// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP1),isNonEmptyOperands(OP4)),isOperand(OP2)),isOperand(OP3))
									bv[0] = bv[1]
									if bv[0] {
										v[23], i.evalErr = i.evalIsOperand( // isOperand(OP3)
											v[10] /*OP3*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[23])
									}
									if bv[0] {
										// RHS
										return i.stepRHS330(v, bv, config)
									}
								}
							}
							// rule: 484
							// KVariable OP3 = v[9]
							// KVariable DotVar1 = v[5]
							v[10] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[10]
							v[11] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[11]
							v[12] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[12]
							v[13] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[13]
							v[14] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[14]
							v[15] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[15]
							v[16] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[16]
							v[17] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[17]
							// rule #484
							// source: well-formedness.k @238
							// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,operandList(OP2,OP3))=>checkOperands(operandList(OP1,operandList(OP2,OP3)))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isNonEmptyOperands(OP3),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(c03ddf29ad0d2a58e55a7f1ac1c918a58fe2f1537ae29490f2224c92a9d92ed1) contentStartColumn(10) contentStartLine(238) org.kframework.attributes.Location(Location(238,10,238,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(isNonEmptyOperands(OP3),isOperand(OP1)),isOperand(OP2))
								v[18], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OP3)
									v[9] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isNonEmptyOperands(OP3),isOperand(OP1))
								bv[1] = m.IsTrue(v[18])
								if bv[1] {
									v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
										v[6] /*OP1*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[19])
								}
								// `_andBool_`(`_andBool_`(isNonEmptyOperands(OP3),isOperand(OP1)),isOperand(OP2))
								bv[0] = bv[1]
								if bv[0] {
									v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
										v[8] /*OP2*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[20])
								}
								if bv[0] {
									// RHS
									return i.stepRHS484(v, bv, config)
								}
							}
						}
						// rule: 515
						// KVariable OP2 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #515
						// source: well-formedness.k @237
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,OP2))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isNonEmptyOperands(OP2),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(87b54334763551b561420b015d05fa3a0f6ce8fa9953caf66339f9003b1e735c) contentStartColumn(10) contentStartLine(237) org.kframework.attributes.Location(Location(237,10,237,73)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isNonEmptyOperands(OP2),isOperand(OP1))
							v[16], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OP2)
								v[7] /*OP2*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isNonEmptyOperands(OP2),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[6] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS515(v, bv, config)
							}
						}
					}
					// rule: 339
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(RETS,`%__IELE-COMMON`(NAME),ARGS)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable RETS = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXpercentXuXuIELEXhyphenCOMMON1 { // `%__IELE-COMMON`(NAME)
							v[8] = i.Model.KApplyArg(v[7], 0)
							// KVariable NAME = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[9]
							// KVariable DotVar1 = v[5]
							v[10] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[10]
							v[11] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[11]
							v[12] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[12]
							v[13] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[13]
							v[14] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[14]
							v[15] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[15]
							v[16] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[16]
							v[17] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[17]
							// rule #339
							// source: well-formedness.k @273
							// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`%__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)) ensures #token("true","Bool") [UNIQUE_ID(f39ce82ab0d6a04cc60dbb9bece8da2fe69d4d8ede0db6ed2605dcbfeb3f225a) contentStartColumn(10) contentStartLine(273) org.kframework.attributes.Location(Location(273,10,273,102)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS))
								v[18], i.evalErr = i.evalIsLValues( // isLValues(RETS)
									v[6] /*RETS*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isLValues(RETS),isIeleName(NAME))
								bv[1] = m.IsTrue(v[18])
								if bv[1] {
									v[19], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
										v[8] /*NAME*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[19])
								}
								// `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS))
								bv[0] = bv[1]
								if bv[0] {
									v[20], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
										v[9] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[20])
								}
								if bv[0] {
									// RHS
									return i.stepRHS339(v, bv, config)
								}
							}
						}
					}
					// rule: 350
					if v[4]&kapplyMatchMask == kapplyMatchLblSstoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `sstore_,__IELE-COMMON`(OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP2 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #350
						// source: well-formedness.k @205
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`sstore_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperand(OP1),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(65700e25cab04f787355210b9b16f84747f2b24e6749de0b3ca7050cd62ca2e2) contentStartColumn(10) contentStartLine(205) org.kframework.attributes.Location(Location(205,10,205,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isOperand(OP1),isOperand(OP2))
							v[16], i.evalErr = i.evalIsOperand( // isOperand(OP1)
								v[6] /*OP1*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isOperand(OP1),isOperand(OP2))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[7] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS350(v, bv, config)
							}
						}
					}
					// rule: 351
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXuIELEXhyphenCOMMON1 { // `log__IELE-COMMON`(OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						// KVariable DotVar1 = v[5]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[14]
						// rule #351
						// source: well-formedness.k @236
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`log__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token("true","Bool") [UNIQUE_ID(ba8721b09d92b594ceac4d51b2a89d2bdf7c852a8900967bc52244fd201978c9) contentStartColumn(10) contentStartLine(236) org.kframework.attributes.Location(Location(236,10,236,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isOperand(OP1)
							v[15], i.evalErr = i.evalIsOperand( // isOperand(OP1)
								v[6] /*OP1*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[15]) {
								// RHS
								return i.stepRHS351(v, bv, config)
							}
						}
					}
					// rule: 356
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqdivXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=div_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #356
						// source: well-formedness.k @213
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=div_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(f689f7dbcd828dabab78fe80d377e3a734648a71f57b47d3ed3ff24972c46f23) contentStartColumn(10) contentStartLine(213) org.kframework.attributes.Location(Location(213,10,213,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS356(v, bv, config)
							}
						}
					}
					// rule: 372
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsubXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=sub_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #372
						// source: well-formedness.k @212
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sub_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(d16a6cfcc14c90b6c5193086a59761bd3a86ca876d3dd0adf4606457165a21eb) contentStartColumn(10) contentStartLine(212) org.kframework.attributes.Location(Location(212,10,212,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS372(v, bv, config)
							}
						}
					}
					// rule: 376
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqtwosXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=twos_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #376
						// source: well-formedness.k @223
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=twos_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(128183dd97e74a184234e756c4f3c365b749ce2c63e1d3ab2c039f59aaeb1867) contentStartColumn(10) contentStartLine(223) org.kframework.attributes.Location(Location(223,10,223,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS376(v, bv, config)
							}
						}
					}
					// rule: 417
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqiszeroXuXuIELEXhyphenCOMMON2 { // `_=iszero__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #417
						// source: well-formedness.k @207
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=iszero__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(4bcbbaf6ce007b039783f8cfb0014a5f6ebbb27c34d5c9f14f43086f681e7abd) contentStartColumn(10) contentStartLine(207) org.kframework.attributes.Location(Location(207,10,207,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS417(v, bv, config)
							}
						}
					}
					// rule: 432
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqandXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=and_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #432
						// source: well-formedness.k @228
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=and_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(e8bc6bb5699a64093eac52aabcf19fadfad6466c7f95c3aca55d33208e841ff1) contentStartColumn(10) contentStartLine(228) org.kframework.attributes.Location(Location(228,10,228,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS432(v, bv, config)
							}
						}
					}
					// rule: 440
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcmpXuXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=cmp__,__IELE-COMMON`(LVAL,_28,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable _28 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP1 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP2 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #440
						// source: well-formedness.k @233
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=cmp__,__IELE-COMMON`(LVAL,_28,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_28),isLValue(LVAL)),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(00aaf3fab9ac44a52683a6d21dcaff90bd2be679e0bb633a0cf68c235445048f) contentStartColumn(10) contentStartLine(233) org.kframework.attributes.Location(Location(233,10,233,86)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_28),isLValue(LVAL)),isOperand(OP1)),isOperand(OP2))
							v[18], i.evalErr = i.evalIsPredicate( // isPredicate(_28)
								v[7] /*_28*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isPredicate(_28),isLValue(LVAL))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
									v[6] /*LVAL*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isPredicate(_28),isLValue(LVAL)),isOperand(OP1))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[8] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isPredicate(_28),isLValue(LVAL)),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[9] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS440(v, bv, config)
							}
						}
					}
					// rule: 442
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqnotXuXuIELEXhyphenCOMMON2 { // `_=not__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #442
						// source: well-formedness.k @208
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=not__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(cd65afe71e686cfc886b277c2be773e783ea0cafcf2153bc163a3b295e6df217) contentStartColumn(10) contentStartLine(208) org.kframework.attributes.Location(Location(208,10,208,76)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS442(v, bv, config)
							}
						}
					}
					// rule: 450
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmodXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mod_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #450
						// source: well-formedness.k @215
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mod_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(5df2c7b8bd0aa0f1a522cb549369369667749d3c07299fb76849d32e7ab128d5) contentStartColumn(10) contentStartLine(215) org.kframework.attributes.Location(Location(215,10,215,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS450(v, bv, config)
							}
						}
					}
					// rule: 469
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqmulXuXcommaXuXuIELEXhyphenCOMMON3 { // `_=mul_,__IELE-COMMON`(LVAL,OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						// KVariable DotVar1 = v[5]
						v[9] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[9]
						v[10] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[10]
						v[11] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[11]
						v[12] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[12]
						v[13] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[13]
						v[14] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[14]
						v[15] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[15]
						v[16] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[16]
						// rule #469
						// source: well-formedness.k @211
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=mul_,__IELE-COMMON`(LVAL,OP1,OP2)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(a4f50990611f9b815c308ed74e35fe45859b22f21b1ad3346f3e666e14f2e390) contentStartColumn(10) contentStartLine(211) org.kframework.attributes.Location(Location(211,10,211,84)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							v[17], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[1] = m.IsTrue(v[17])
							if bv[1] {
								v[18], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[18])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[0] = bv[1]
							if bv[0] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[19])
							}
							if bv[0] {
								// RHS
								return i.stepRHS469(v, bv, config)
							}
						}
					}
					// rule: 488
					if v[4]&kapplyMatchMask == kapplyMatchLblRevertXuXuIELEXhyphenCOMMON1 { // `revert__IELE-COMMON`(OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						// KVariable DotVar1 = v[5]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[13]
						v[14] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[14]
						// rule #488
						// source: well-formedness.k @242
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`revert__IELE-COMMON`(OP1)=>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires isOperand(OP1) ensures #token("true","Bool") [UNIQUE_ID(a1b5408675c7caf04e56e5de3e6339e6c90e9c3b6829c7e33c3c1842bea85ff0) contentStartColumn(10) contentStartLine(242) org.kframework.attributes.Location(Location(242,10,242,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES isOperand(OP1)
							v[15], i.evalErr = i.evalIsOperand( // isOperand(OP1)
								v[6] /*OP1*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							if m.IsTrue(v[15]) {
								// RHS
								return i.stepRHS488(v, bv, config)
							}
						}
					}
					// rule: 489
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsloadXuXuIELEXhyphenCOMMON2 { // `_=sload__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #489
						// source: well-formedness.k @204
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sload__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(b312fad7eb3ff4a1b0f038850a9658692508dc458d1a53b6b1a0efea66e21ca8) contentStartColumn(10) contentStartLine(204) org.kframework.attributes.Location(Location(204,10,204,75)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS489(v, bv, config)
							}
						}
					}
					// rule: 511
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(OP1,OP2,OP3,OP4)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP2 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP3 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP4 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #511
						// source: well-formedness.k @202
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`store_,_,_,__IELE-COMMON`(OP1,OP2,OP3,OP4)=>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,operandList(OP4,`.List{"operandList"}`(.KList))))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(85136bf778d4848bb45434939315e32f5133fac346f6b7dad7b034e923656eb3) contentStartColumn(10) contentStartLine(202) org.kframework.attributes.Location(Location(202,10,202,80)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							v[18], i.evalErr = i.evalIsOperand( // isOperand(OP4)
								v[9] /*OP4*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isOperand(OP4),isOperand(OP1))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[6] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isOperand(OP2))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[7] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(OP4),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP3)
									v[8] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS511(v, bv, config)
							}
						}
					}
					// rule: 525
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(LVAL,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #525
						// source: well-formedness.k @235
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=sha3__IELE-COMMON`(LVAL,OP1)=>checkLVal(LVAL)~>checkOperand(OP1)``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isLValue(LVAL),isOperand(OP1)) ensures #token("true","Bool") [UNIQUE_ID(c7c09ed23730410cee4f328d9d7906c925f42d9249ae616b4bc1fc798eca011d) contentStartColumn(10) contentStartLine(235) org.kframework.attributes.Location(Location(235,10,235,74)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isLValue(LVAL),isOperand(OP1))
							v[16], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS525(v, bv, config)
							}
						}
					}
					// rule: 534
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuatXuXlparenXuXrparensendXuXcommagaslimitXuXuIELEXhyphenCOMMON6 { // `_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2,OP3)
						v[6] = i.Model.KApplyArg(v[4], 0)
						if v[6]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(STATUS,RETS)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable STATUS = v[7]
							v[8] = i.Model.KApplyArg(v[6], 1)
							// KVariable RETS = v[8]
							v[9] = i.Model.KApplyArg(v[4], 1)
							// KVariable NAME = v[9]
							v[10] = i.Model.KApplyArg(v[4], 2)
							// KVariable OP1 = v[10]
							v[11] = i.Model.KApplyArg(v[4], 3)
							// KVariable ARGS = v[11]
							v[12] = i.Model.KApplyArg(v[4], 4)
							// KVariable OP2 = v[12]
							v[13] = i.Model.KApplyArg(v[4], 5)
							// KVariable OP3 = v[13]
							// KVariable DotVar1 = v[5]
							v[14] = i.Model.KApplyArg(c, 1)
							// KVariable _0 = v[14]
							v[15] = i.Model.KApplyArg(c, 2)
							// KVariable _1 = v[15]
							v[16] = i.Model.KApplyArg(c, 3)
							// KVariable _2 = v[16]
							v[17] = i.Model.KApplyArg(c, 4)
							// KVariable _3 = v[17]
							v[18] = i.Model.KApplyArg(c, 5)
							// KVariable _4 = v[18]
							v[19] = i.Model.KApplyArg(c, 6)
							// KVariable _5 = v[19]
							v[20] = i.Model.KApplyArg(c, 7)
							// KVariable _6 = v[20]
							v[21] = i.Model.KApplyArg(c, 8)
							// KVariable _7 = v[21]
							// rule #534
							// source: well-formedness.k @275
							// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_at_(_)send_,gaslimit__IELE-COMMON`(lvalueList(STATUS,RETS),NAME,OP1,ARGS,OP2,OP3)=>checkLVals(lvalueList(STATUS,RETS))~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,ARGS))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(dc57de212183646801b6cd2d9ae458ddcaad2eb86a8dbd2c1ef081385a883c03) contentStartColumn(10) contentStartLine(275) org.kframework.attributes.Location(Location(275,10,275,152)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
							if !matched {
								// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
								v[22], i.evalErr = i.evalIsOperand( // isOperand(NAME)
									v[9] /*NAME*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								// `_andBool_`(isOperand(NAME),isLValues(RETS))
								bv[5] = m.IsTrue(v[22])
								if bv[5] {
									v[23], i.evalErr = i.evalIsLValues( // isLValues(RETS)
										v[8] /*RETS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[5] = m.IsTrue(v[23])
								}
								// `_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS))
								bv[4] = bv[5]
								if bv[4] {
									v[24], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
										v[7] /*STATUS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[4] = m.IsTrue(v[24])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS))
								bv[3] = bv[4]
								if bv[3] {
									v[25], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
										v[11] /*ARGS*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[3] = m.IsTrue(v[25])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))
								bv[2] = bv[3]
								if bv[2] {
									v[26], i.evalErr = i.evalIsOperand( // isOperand(OP1)
										v[10] /*OP1*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[2] = m.IsTrue(v[26])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2))
								bv[1] = bv[2]
								if bv[1] {
									v[27], i.evalErr = i.evalIsOperand( // isOperand(OP2)
										v[12] /*OP2*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[1] = m.IsTrue(v[27])
								}
								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isOperand(NAME),isLValues(RETS)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
								bv[0] = bv[1]
								if bv[0] {
									v[28], i.evalErr = i.evalIsOperand( // isOperand(OP3)
										v[13] /*OP3*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									bv[0] = m.IsTrue(v[28])
								}
								if bv[0] {
									// RHS
									return i.stepRHS534(v, bv, config)
								}
							}
						}
					}
					// rule: 547
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `store_,__IELE-COMMON`(OP1,OP2)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP2 = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[13]
						v[14] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[14]
						v[15] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[15]
						// rule #547
						// source: well-formedness.k @201
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`store_,__IELE-COMMON`(OP1,OP2)=>checkOperands(operandList(OP1,operandList(OP2,`.List{"operandList"}`(.KList))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(isOperand(OP1),isOperand(OP2)) ensures #token("true","Bool") [UNIQUE_ID(defc9e8bac1ee5ec9ccd89b1687e344dfdea55dfc25018b67b08845e0cadbe13) contentStartColumn(10) contentStartLine(201) org.kframework.attributes.Location(Location(201,10,201,60)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(isOperand(OP1),isOperand(OP2))
							v[16], i.evalErr = i.evalIsOperand( // isOperand(OP1)
								v[6] /*OP1*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isOperand(OP1),isOperand(OP2))
							bv[0] = m.IsTrue(v[16])
							if bv[0] {
								v[17], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[7] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[17])
							}
							if bv[0] {
								// RHS
								return i.stepRHS547(v, bv, config)
							}
						}
					}
					// rule: 552
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqaddmodXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=addmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable LVAL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable OP1 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable OP2 = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable OP3 = v[9]
						// KVariable DotVar1 = v[5]
						v[10] = i.Model.KApplyArg(c, 1)
						// KVariable _0 = v[10]
						v[11] = i.Model.KApplyArg(c, 2)
						// KVariable _1 = v[11]
						v[12] = i.Model.KApplyArg(c, 3)
						// KVariable _2 = v[12]
						v[13] = i.Model.KApplyArg(c, 4)
						// KVariable _3 = v[13]
						v[14] = i.Model.KApplyArg(c, 5)
						// KVariable _4 = v[14]
						v[15] = i.Model.KApplyArg(c, 6)
						// KVariable _5 = v[15]
						v[16] = i.Model.KApplyArg(c, 7)
						// KVariable _6 = v[16]
						v[17] = i.Model.KApplyArg(c, 8)
						// KVariable _7 = v[17]
						// rule #552
						// source: well-formedness.k @217
						// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=addmod_,_,__IELE-COMMON`(LVAL,OP1,OP2,OP3)=>checkLVal(LVAL)~>checkOperands(operandList(OP1,operandList(OP2,operandList(OP3,`.List{"operandList"}`(.KList)))))``~>DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3)) ensures #token("true","Bool") [UNIQUE_ID(f974e5860360c11127538171010aed9f0808deb53a898719d15fe5e3ee663fc0) contentStartColumn(10) contentStartLine(217) org.kframework.attributes.Location(Location(217,10,217,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
						if !matched {
							// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							v[18], i.evalErr = i.evalIsLValue( // isLValue(LVAL)
								v[6] /*LVAL*/,
								config, -1)
							if i.evalErr != nil {
								return m.NoResult, i.evalErr
							}
							// `_andBool_`(isLValue(LVAL),isOperand(OP1))
							bv[2] = m.IsTrue(v[18])
							if bv[2] {
								v[19], i.evalErr = i.evalIsOperand( // isOperand(OP1)
									v[7] /*OP1*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[2] = m.IsTrue(v[19])
							}
							// `_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2))
							bv[1] = bv[2]
							if bv[1] {
								v[20], i.evalErr = i.evalIsOperand( // isOperand(OP2)
									v[8] /*OP2*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[1] = m.IsTrue(v[20])
							}
							// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(LVAL),isOperand(OP1)),isOperand(OP2)),isOperand(OP3))
							bv[0] = bv[1]
							if bv[0] {
								v[21], i.evalErr = i.evalIsOperand( // isOperand(OP3)
									v[9] /*OP3*/,
									config, -1)
								if i.evalErr != nil {
									return m.NoResult, i.evalErr
								}
								bv[0] = m.IsTrue(v[21])
							}
							if bv[0] {
								// RHS
								return i.stepRHS552(v, bv, config)
							}
						}
					}
				}
				// rule: 96
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashillFormedXuIELE0 { // `#illFormed_IELE`(.KList)
					// KVariable K = v[4]
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #96
									// source: iele.k @1389
									// {| rule `<generatedTop>`(`<k>`(`#illFormed_IELE`(.KList)~>``K=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isKItem(K),`_=/=K_`(K,`#finishTypeChecking_IELE`(.KList))) ensures #token("true","Bool") [UNIQUE_ID(0b547df42dc7548abaef7a7d82c4c1e5005b638dfbe808e750cd6d0b6b24bfb3) contentStartColumn(10) contentStartLine(1389) org.kframework.attributes.Location(Location(1389,10,1390,42)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
									if !matched {
										// REQUIRES `_andBool_`(#token("true","Bool"),`_=/=K_`(K,`#finishTypeChecking_IELE`(.KList)))
										v[18], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(K,`#finishTypeChecking_IELE`(.KList))
											v[4] /*K*/,
											i.Model.NewKApply(m.LblXhashfinishTypeCheckingXuIELE, // as-is #finishTypeChecking_IELE
											),
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										if /* rhs precomputed isKItem */ /* && */ m.IsTrue(v[18]) {
											// RHS
											return i.stepRHS96(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 123, 222, 226, 251
				// KVariable EX = v[2]
				// rule: 123
				// KVariable _104 = v[4]
				// KVariable DotVar1 = v[5]
				v[6] = i.Model.KApplyArg(c, 1)
				if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
					v[7] = i.Model.KApplyArg(v[6], 0)
					if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
						_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
						if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
							v[10] = i.Model.KApplyArg(v[8], 0)
							if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
								// KVariable SREST = v[9]
								v[11] = i.Model.KApplyArg(c, 2)
								// KVariable _0 = v[11]
								v[12] = i.Model.KApplyArg(c, 3)
								// KVariable _1 = v[12]
								v[13] = i.Model.KApplyArg(c, 4)
								// KVariable _2 = v[13]
								v[14] = i.Model.KApplyArg(c, 5)
								// KVariable _3 = v[14]
								v[15] = i.Model.KApplyArg(c, 6)
								// KVariable _4 = v[15]
								v[16] = i.Model.KApplyArg(c, 7)
								// KVariable _5 = v[16]
								v[17] = i.Model.KApplyArg(c, 8)
								// KVariable _6 = v[17]
								// rule #123
								// source: iele.k @329
								// {| rule `<generatedTop>`(`<k>`(EX~>``_104=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isInternalOp(_104)) ensures #token("true","Bool") [UNIQUE_ID(01c5b5c5895ce51c00d66bde8087db3cf8fb54a39e16f8feb765738cdc511b49) contentStartColumn(10) contentStartLine(329) org.kframework.attributes.Location(Location(329,10,329,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isException(EX),isInternalOp(_104))
									v[18], i.evalErr = i.evalIsException( // isException(EX)
										v[2] /*EX*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isException(EX),isInternalOp(_104))
									bv[0] = m.IsTrue(v[18])
									if bv[0] {
										v[19], i.evalErr = i.evalIsInternalOp( // isInternalOp(_104)
											v[4] /*_104*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[19])
									}
									if bv[0] {
										// RHS
										return i.stepRHS123(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 222
				// KVariable _114 = v[4]
				// KVariable DotVar1 = v[5]
				v[6] = i.Model.KApplyArg(c, 1)
				if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
					v[7] = i.Model.KApplyArg(v[6], 0)
					if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
						_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
						if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
							v[10] = i.Model.KApplyArg(v[8], 0)
							if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
								// KVariable SREST = v[9]
								v[11] = i.Model.KApplyArg(c, 2)
								// KVariable _0 = v[11]
								v[12] = i.Model.KApplyArg(c, 3)
								// KVariable _1 = v[12]
								v[13] = i.Model.KApplyArg(c, 4)
								// KVariable _2 = v[13]
								v[14] = i.Model.KApplyArg(c, 5)
								// KVariable _3 = v[14]
								v[15] = i.Model.KApplyArg(c, 6)
								// KVariable _4 = v[15]
								v[16] = i.Model.KApplyArg(c, 7)
								// KVariable _5 = v[16]
								v[17] = i.Model.KApplyArg(c, 8)
								// KVariable _6 = v[17]
								// rule #222
								// source: iele.k @328
								// {| rule `<generatedTop>`(`<k>`(EX~>``_114=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isBlocks(_114)) ensures #token("true","Bool") [UNIQUE_ID(276856d77bfe0930f8bd905783915de56994aadf311bf5c3f006225bd1ff9600) contentStartColumn(10) contentStartLine(328) org.kframework.attributes.Location(Location(328,10,328,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isException(EX),isBlocks(_114))
									v[18], i.evalErr = i.evalIsException( // isException(EX)
										v[2] /*EX*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isException(EX),isBlocks(_114))
									bv[0] = m.IsTrue(v[18])
									if bv[0] {
										v[19], i.evalErr = i.evalIsBlocks( // isBlocks(_114)
											v[4] /*_114*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[19])
									}
									if bv[0] {
										// RHS
										return i.stepRHS222(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 226
				// KVariable _116 = v[4]
				// KVariable DotVar1 = v[5]
				v[6] = i.Model.KApplyArg(c, 1)
				if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
					v[7] = i.Model.KApplyArg(v[6], 0)
					if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
						_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
						if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
							v[10] = i.Model.KApplyArg(v[8], 0)
							if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
								// KVariable SREST = v[9]
								v[11] = i.Model.KApplyArg(c, 2)
								// KVariable _0 = v[11]
								v[12] = i.Model.KApplyArg(c, 3)
								// KVariable _1 = v[12]
								v[13] = i.Model.KApplyArg(c, 4)
								// KVariable _2 = v[13]
								v[14] = i.Model.KApplyArg(c, 5)
								// KVariable _3 = v[14]
								v[15] = i.Model.KApplyArg(c, 6)
								// KVariable _4 = v[15]
								v[16] = i.Model.KApplyArg(c, 7)
								// KVariable _5 = v[16]
								v[17] = i.Model.KApplyArg(c, 8)
								// KVariable _6 = v[17]
								// rule #226
								// source: iele.k @327
								// {| rule `<generatedTop>`(`<k>`(EX~>``_116=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isInstruction(_116),isException(EX)) ensures #token("true","Bool") [UNIQUE_ID(1a667e3f644abe5b18b9f34b5dcf90e056287d91cc75c52c46a38f829587c279) contentStartColumn(10) contentStartLine(327) org.kframework.attributes.Location(Location(327,10,327,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
								if !matched {
									// REQUIRES `_andBool_`(isInstruction(_116),isException(EX))
									v[18], i.evalErr = i.evalIsInstruction( // isInstruction(_116)
										v[4] /*_116*/,
										config, -1)
									if i.evalErr != nil {
										return m.NoResult, i.evalErr
									}
									// `_andBool_`(isInstruction(_116),isException(EX))
									bv[0] = m.IsTrue(v[18])
									if bv[0] {
										v[19], i.evalErr = i.evalIsException( // isException(EX)
											v[2] /*EX*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										bv[0] = m.IsTrue(v[19])
									}
									if bv[0] {
										// RHS
										return i.stepRHS226(v, bv, config)
									}
								}
							}
						}
					}
				}
				// rule: 251
				if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
					// KVariable _107 = v[4]
					// KVariable DotVar1 = v[5]
					v[6] = i.Model.KApplyArg(c, 1)
					if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[10] = i.Model.KApplyArg(v[8], 0)
								if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[9]
									v[11] = i.Model.KApplyArg(c, 2)
									// KVariable _0 = v[11]
									v[12] = i.Model.KApplyArg(c, 3)
									// KVariable _1 = v[12]
									v[13] = i.Model.KApplyArg(c, 4)
									// KVariable _2 = v[13]
									v[14] = i.Model.KApplyArg(c, 5)
									// KVariable _3 = v[14]
									v[15] = i.Model.KApplyArg(c, 6)
									// KVariable _4 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _5 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _6 = v[17]
									// rule #251
									// source: iele.k @326
									// {| rule `<generatedTop>`(`<k>`(EX~>``_107=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(isException(EX),isInt(_107)) ensures #token("true","Bool") [UNIQUE_ID(27563d92107cef3ac9ffced96d2e6b2ca2e210ed2b55c28773ae23343ab73bfd) contentStartColumn(10) contentStartLine(326) org.kframework.attributes.Location(Location(326,10,326,59)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// REQUIRES `_andBool_`(isException(EX),#token("true","Bool"))
										v[18], i.evalErr = i.evalIsException( // isException(EX)
											v[2] /*EX*/,
											config, -1)
										if i.evalErr != nil {
											return m.NoResult, i.evalErr
										}
										if m.IsTrue(v[18]) /* && */ /* rhs precomputed isInt(_107) */  {
											// RHS
											return i.stepRHS251(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
				// rules: 183, 214, 402
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashrevertXuXuIELEXhyphenINFRASTRUCTURE1 { // `#revert__IELE-INFRASTRUCTURE`(OUT)
					v[6] = i.Model.KApplyArg(v[2], 0)
					// rule: 183
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable OUT = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashreturnXuXuXuIELE2 { // `#return___IELE`(_410,REG)
							v[7] = i.Model.KApplyArg(v[4], 0)
							// KVariable _410 = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable REG = v[8]
							// KVariable DotVar1 = v[5]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _14 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _15 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _16 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _17 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
													v[25] = i.Model.KApplyArg(v[24], 0)
													// KVariable _0 = v[25]
													v[26] = i.Model.KApplyArg(v[24], 1)
													// KVariable _1 = v[26]
													v[27] = i.Model.KApplyArg(v[24], 2)
													// KVariable _2 = v[27]
													v[28] = i.Model.KApplyArg(v[24], 3)
													// KVariable _3 = v[28]
													v[29] = i.Model.KApplyArg(v[24], 4)
													// KVariable _4 = v[29]
													v[30] = i.Model.KApplyArg(v[24], 5)
													// KVariable _5 = v[30]
													v[31] = i.Model.KApplyArg(v[24], 6)
													// KVariable _6 = v[31]
													v[32] = i.Model.KApplyArg(v[24], 7)
													// KVariable _7 = v[32]
													v[33] = i.Model.KApplyArg(v[24], 8)
													// KVariable _8 = v[33]
													v[34] = i.Model.KApplyArg(v[24], 9)
													// KVariable _9 = v[34]
													v[35] = i.Model.KApplyArg(v[24], 10)
													// KVariable _10 = v[35]
													v[36] = i.Model.KApplyArg(v[24], 11)
													// KVariable _11 = v[36]
													v[37] = i.Model.KApplyArg(v[24], 12)
													if v[37]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
														v[38] = i.Model.KApplyArg(v[37], 0)
														if i.tempTypeVar = v[38] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable GAVAIL = v[38]
															v[39] = i.Model.KApplyArg(v[24], 13)
															// KVariable _12 = v[39]
															v[40] = i.Model.KApplyArg(v[24], 14)
															// KVariable _13 = v[40]
															v[41] = i.Model.KApplyArg(v[19], 5)
															// KVariable _18 = v[41]
															v[42] = i.Model.KApplyArg(v[19], 6)
															// KVariable _19 = v[42]
															v[43] = i.Model.KApplyArg(v[19], 7)
															// KVariable _20 = v[43]
															v[44] = i.Model.KApplyArg(v[19], 8)
															// KVariable _21 = v[44]
															v[45] = i.Model.KApplyArg(v[19], 9)
															// KVariable _22 = v[45]
															v[46] = i.Model.KApplyArg(v[19], 10)
															// KVariable _23 = v[46]
															v[47] = i.Model.KApplyArg(v[19], 11)
															// KVariable _24 = v[47]
															v[48] = i.Model.KApplyArg(v[19], 12)
															// KVariable _25 = v[48]
															v[49] = i.Model.KApplyArg(v[19], 13)
															// KVariable _26 = v[49]
															v[50] = i.Model.KApplyArg(v[19], 14)
															// KVariable _27 = v[50]
															v[51] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[51]
															// rule #183
															// source: iele.k @1287
															// {| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(OUT)~>`#return___IELE`(_410,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,intSize(OUT))~>`#load___IELE`(REG,OUT)~>`#refund__IELE`(GAVAIL)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(OUT),isLValues(_410)),isLValue(REG)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(acea2f7387312803c35c9923ea36dec70a80f961b96091483dfd19e35e5052cf) contentStartColumn(10) contentStartLine(1287) org.kframework.attributes.Location(Location(1287,10,1295,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_410)),isLValue(REG)),#token("true","Bool"))
																v[52], i.evalErr = i.evalIsLValues( // isLValues(_410)
																	v[7] /*_410*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_410)),isLValue(REG))
																bv[0] = /* rhs precomputed isInt(OUT) */ /* && */ m.IsTrue(v[52])
																if bv[0] {
																	v[53], i.evalErr = i.evalIsLValue( // isLValue(REG)
																		v[8] /*REG*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[53])
																}
																if bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																	// RHS
																	return i.stepRHS183(v, bv, config)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 214
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable OUT = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashcodeDepositXuXuXuXuXuXuXuIELE6 { // `#codeDeposit_______IELE`(_366,_367,_368,REG,_369,NEW)
							v[7] = i.Model.KApplyArg(v[4], 0)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _366 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 1)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable _367 = v[8]
									v[9] = i.Model.KApplyArg(v[4], 2)
									// KVariable _368 = v[9]
									v[10] = i.Model.KApplyArg(v[4], 3)
									// KVariable REG = v[10]
									v[11] = i.Model.KApplyArg(v[4], 4)
									// KVariable _369 = v[11]
									v[12] = i.Model.KApplyArg(v[4], 5)
									if v[12]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
										// KVariable NEW = v[12]
										// KVariable DotVar1 = v[5]
										v[13] = i.Model.KApplyArg(c, 1)
										if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[14] = i.Model.KApplyArg(v[13], 0)
											if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[17] = i.Model.KApplyArg(v[15], 0)
													if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[16]
														v[18] = i.Model.KApplyArg(c, 2)
														// KVariable _28 = v[18]
														v[19] = i.Model.KApplyArg(c, 3)
														// KVariable _29 = v[19]
														v[20] = i.Model.KApplyArg(c, 4)
														// KVariable _30 = v[20]
														v[21] = i.Model.KApplyArg(c, 5)
														// KVariable _31 = v[21]
														v[22] = i.Model.KApplyArg(c, 6)
														// KVariable _32 = v[22]
														v[23] = i.Model.KApplyArg(c, 7)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
															v[24] = i.Model.KApplyArg(v[23], 0)
															// KVariable _14 = v[24]
															v[25] = i.Model.KApplyArg(v[23], 1)
															// KVariable _15 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 2)
															// KVariable _16 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 3)
															// KVariable _17 = v[27]
															v[28] = i.Model.KApplyArg(v[23], 4)
															if v[28]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
																v[29] = i.Model.KApplyArg(v[28], 0)
																// KVariable _0 = v[29]
																v[30] = i.Model.KApplyArg(v[28], 1)
																// KVariable _1 = v[30]
																v[31] = i.Model.KApplyArg(v[28], 2)
																// KVariable _2 = v[31]
																v[32] = i.Model.KApplyArg(v[28], 3)
																// KVariable _3 = v[32]
																v[33] = i.Model.KApplyArg(v[28], 4)
																// KVariable _4 = v[33]
																v[34] = i.Model.KApplyArg(v[28], 5)
																// KVariable _5 = v[34]
																v[35] = i.Model.KApplyArg(v[28], 6)
																// KVariable _6 = v[35]
																v[36] = i.Model.KApplyArg(v[28], 7)
																// KVariable _7 = v[36]
																v[37] = i.Model.KApplyArg(v[28], 8)
																// KVariable _8 = v[37]
																v[38] = i.Model.KApplyArg(v[28], 9)
																// KVariable _9 = v[38]
																v[39] = i.Model.KApplyArg(v[28], 10)
																// KVariable _10 = v[39]
																v[40] = i.Model.KApplyArg(v[28], 11)
																// KVariable _11 = v[40]
																v[41] = i.Model.KApplyArg(v[28], 12)
																if v[41]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																	v[42] = i.Model.KApplyArg(v[41], 0)
																	if i.tempTypeVar = v[42] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable GAVAIL = v[42]
																		v[43] = i.Model.KApplyArg(v[28], 13)
																		// KVariable _12 = v[43]
																		v[44] = i.Model.KApplyArg(v[28], 14)
																		// KVariable _13 = v[44]
																		v[45] = i.Model.KApplyArg(v[23], 5)
																		// KVariable _18 = v[45]
																		v[46] = i.Model.KApplyArg(v[23], 6)
																		// KVariable _19 = v[46]
																		v[47] = i.Model.KApplyArg(v[23], 7)
																		// KVariable _20 = v[47]
																		v[48] = i.Model.KApplyArg(v[23], 8)
																		// KVariable _21 = v[48]
																		v[49] = i.Model.KApplyArg(v[23], 9)
																		// KVariable _22 = v[49]
																		v[50] = i.Model.KApplyArg(v[23], 10)
																		// KVariable _23 = v[50]
																		v[51] = i.Model.KApplyArg(v[23], 11)
																		// KVariable _24 = v[51]
																		v[52] = i.Model.KApplyArg(v[23], 12)
																		// KVariable _25 = v[52]
																		v[53] = i.Model.KApplyArg(v[23], 13)
																		// KVariable _26 = v[53]
																		v[54] = i.Model.KApplyArg(v[23], 14)
																		// KVariable _27 = v[54]
																		v[55] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[55]
																		// rule #214
																		// source: iele.k @1430
																		// {| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(OUT)~>`#codeDeposit_______IELE`(_366,_367,_368,REG,_369,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>OUT,#registerDelta(REG,intSize(OUT))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(REG,OUT))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(OUT),isInt(_366)),isLValue(REG)),isInt(_367)),isLValue(_369)),isBool(NEW)),isInt(GAVAIL)),isContract(_368)) ensures #token("true","Bool") [UNIQUE_ID(8db40c9c27fe0b65a0c3e56a5207d5aa5415ddb8f4fe4ce5f89deb81f547c62b) contentStartColumn(10) contentStartLine(1430) org.kframework.attributes.Location(Location(1430,10,1431,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),isLValue(_369)),#token("true","Bool")),#token("true","Bool")),isContract(_368))
																			v[56], i.evalErr = i.evalIsLValue( // isLValue(REG)
																				v[10] /*REG*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),isLValue(_369))
																			bv[1] = /* rhs precomputed isInt(OUT) && isInt(_366) */ /* && */ m.IsTrue(v[56]) /* && */ /* rhs precomputed isInt(_367) */ 
																			if bv[1] {
																				v[57], i.evalErr = i.evalIsLValue( // isLValue(_369)
																					v[11] /*_369*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[57])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),#token("true","Bool")),isLValue(_369)),#token("true","Bool")),#token("true","Bool")),isContract(_368))
																			bv[0] = bv[1] /* && */ /* rhs precomputed isBool(NEW) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ 
																			if bv[0] {
																				v[58], i.evalErr = i.evalIsContract( // isContract(_368)
																					v[9] /*_368*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[58])
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS214(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 402
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable OUT = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashendVMXuIELEXhyphenNODE0 { // `#endVM_IELE-NODE`(.KList)
							// KVariable DotVar1 = v[5]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _17 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// KVariable _0 = v[23]
													v[24] = i.Model.KApplyArg(v[22], 1)
													// KVariable _1 = v[24]
													v[25] = i.Model.KApplyArg(v[22], 2)
													// KVariable _2 = v[25]
													v[26] = i.Model.KApplyArg(v[22], 3)
													// KVariable _3 = v[26]
													v[27] = i.Model.KApplyArg(v[22], 4)
													// KVariable _4 = v[27]
													v[28] = i.Model.KApplyArg(v[22], 5)
													// KVariable _5 = v[28]
													v[29] = i.Model.KApplyArg(v[22], 6)
													// KVariable _6 = v[29]
													v[30] = i.Model.KApplyArg(v[22], 7)
													// KVariable _7 = v[30]
													v[31] = i.Model.KApplyArg(v[22], 8)
													// KVariable _8 = v[31]
													v[32] = i.Model.KApplyArg(v[22], 9)
													// KVariable _9 = v[32]
													v[33] = i.Model.KApplyArg(v[22], 10)
													// KVariable _10 = v[33]
													v[34] = i.Model.KApplyArg(v[22], 11)
													// KVariable _11 = v[34]
													v[35] = i.Model.KApplyArg(v[22], 12)
													if v[35]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
														v[36] = i.Model.KApplyArg(v[35], 0)
														if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable GAVAIL = v[36]
															v[37] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[17], 5)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[17], 6)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[17], 7)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[17], 8)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[17], 9)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[17], 10)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[17], 11)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[17], 12)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[17], 13)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(v[17], 14)
															// KVariable _27 = v[48]
															v[49] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[49]
															// rule #402
															// source: iele-node.k @108
															// {| rule `<generatedTop>`(`<k>`(`` `#revert__IELE-INFRASTRUCTURE`(OUT)~>`#endVM_IELE-NODE`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#refund__IELE`(GAVAIL)~>OUT``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(isInt(OUT),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(75691bc1089f2576a9b41e026d47483920eaca1a5216ef3326bf5c53a6c58592) contentStartColumn(10) contentStartLine(108) org.kframework.attributes.Location(Location(108,10,109,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// REQUIRES precomputed isInt(OUT) && isInt(GAVAIL)
																// RHS
																return i.stepRHS402(v, bv, config)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 195, 241, 344, 546
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexceptionXuXuIELEXhyphenINFRASTRUCTURE1 { // `#exception__IELE-INFRASTRUCTURE`(STATUS)
					v[6] = i.Model.KApplyArg(v[2], 0)
					// rule: 195
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable STATUS = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashfinishCodeDepositXuXuXuXuXuXuIELE5 { // `#finishCodeDeposit______IELE`(_343,_344,REG,_345,NEW)
							v[7] = i.Model.KApplyArg(v[4], 0)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _343 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 1)
								// KVariable _344 = v[8]
								v[9] = i.Model.KApplyArg(v[4], 2)
								// KVariable REG = v[9]
								v[10] = i.Model.KApplyArg(v[4], 3)
								// KVariable _345 = v[10]
								v[11] = i.Model.KApplyArg(v[4], 4)
								if v[11]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable NEW = v[11]
									// KVariable DotVar1 = v[5]
									v[12] = i.Model.KApplyArg(c, 1)
									if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[13] = i.Model.KApplyArg(v[12], 0)
										if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[16] = i.Model.KApplyArg(v[14], 0)
												if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[15]
													v[17] = i.Model.KApplyArg(c, 2)
													// KVariable _0 = v[17]
													v[18] = i.Model.KApplyArg(c, 3)
													// KVariable _1 = v[18]
													v[19] = i.Model.KApplyArg(c, 4)
													// KVariable _2 = v[19]
													v[20] = i.Model.KApplyArg(c, 5)
													// KVariable _3 = v[20]
													v[21] = i.Model.KApplyArg(c, 6)
													// KVariable _4 = v[21]
													v[22] = i.Model.KApplyArg(c, 7)
													// KVariable _5 = v[22]
													v[23] = i.Model.KApplyArg(c, 8)
													// KVariable _6 = v[23]
													// rule #195
													// source: iele.k @1459
													// {| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#finishCodeDeposit______IELE`(_343,_344,REG,_345,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token("1","Int"))~>`#load___IELE`(REG,STATUS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(STATUS),isLValue(REG)),isContract(_344)),isBool(NEW)),isInt(_343)),isLValue(_345)) ensures #token("true","Bool") [UNIQUE_ID(0da8a0d6eb648643e2bace6de81fcd605408220cc0b405bab4177238605199e2) contentStartColumn(10) contentStartLine(1459) org.kframework.attributes.Location(Location(1459,10,1459,209)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isContract(_344)),#token("true","Bool")),#token("true","Bool")),isLValue(_345))
														v[24], i.evalErr = i.evalIsLValue( // isLValue(REG)
															v[9] /*REG*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isContract(_344))
														bv[1] = /* rhs precomputed isInt(STATUS) */ /* && */ m.IsTrue(v[24])
														if bv[1] {
															v[25], i.evalErr = i.evalIsContract( // isContract(_344)
																v[8] /*_344*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[25])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValue(REG)),isContract(_344)),#token("true","Bool")),#token("true","Bool")),isLValue(_345))
														bv[0] = bv[1] /* && */ /* rhs precomputed isBool(NEW) */  /* && */ /* rhs precomputed isInt(_343) */ 
														if bv[0] {
															v[26], i.evalErr = i.evalIsLValue( // isLValue(_345)
																v[10] /*_345*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[26])
														}
														if bv[0] {
															// RHS
															return i.stepRHS195(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 241
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable STATUS = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashendVMXuIELEXhyphenNODE0 { // `#endVM_IELE-NODE`(.KList)
							// KVariable DotVar1 = v[5]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _14 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _15 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _16 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _17 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _18 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_736),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[18] = i.Model.KApplyArg(v[17], 0)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_736)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _736 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 1)
													// KVariable _0 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 2)
													// KVariable _1 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 3)
													// KVariable _2 = v[22]
													v[23] = i.Model.KApplyArg(v[17], 4)
													// KVariable _3 = v[23]
													v[24] = i.Model.KApplyArg(v[17], 5)
													// KVariable _4 = v[24]
													v[25] = i.Model.KApplyArg(v[17], 6)
													// KVariable _5 = v[25]
													v[26] = i.Model.KApplyArg(v[17], 7)
													// KVariable _6 = v[26]
													v[27] = i.Model.KApplyArg(v[17], 8)
													// KVariable _7 = v[27]
													v[28] = i.Model.KApplyArg(v[17], 9)
													// KVariable _8 = v[28]
													v[29] = i.Model.KApplyArg(v[17], 10)
													// KVariable _9 = v[29]
													v[30] = i.Model.KApplyArg(v[17], 11)
													// KVariable _10 = v[30]
													v[31] = i.Model.KApplyArg(v[17], 12)
													// KVariable _11 = v[31]
													v[32] = i.Model.KApplyArg(v[17], 13)
													// KVariable _12 = v[32]
													v[33] = i.Model.KApplyArg(v[17], 14)
													// KVariable _13 = v[33]
													v[34] = i.Model.KApplyArg(c, 8)
													// KVariable _19 = v[34]
													// rule #241
													// source: iele-node.k @106
													// {| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#endVM_IELE-NODE`(.KList)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>STATUS``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_736=>`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(isInts(_736),isInt(STATUS)) ensures #token("true","Bool") [UNIQUE_ID(35b871c88ae92d0f6727f91fc8575b3eb11f983563698e5511358801809d75ee) contentStartColumn(10) contentStartLine(106) org.kframework.attributes.Location(Location(106,10,107,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(isInts(_736),#token("true","Bool"))
														v[35], i.evalErr = i.evalIsInts( // isInts(_736)
															v[19] /*_736*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if m.IsTrue(v[35]) /* && */ /* rhs precomputed isInt(STATUS) */  {
															// RHS
															return i.stepRHS241(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 344
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable STATUS = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashcodeDepositXuXuXuXuXuXuXuIELE6 { // `#codeDeposit_______IELE`(_395,_396,_397,REG,_398,NEW)
							v[7] = i.Model.KApplyArg(v[4], 0)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _395 = v[7]
								v[8] = i.Model.KApplyArg(v[4], 1)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable _396 = v[8]
									v[9] = i.Model.KApplyArg(v[4], 2)
									// KVariable _397 = v[9]
									v[10] = i.Model.KApplyArg(v[4], 3)
									// KVariable REG = v[10]
									v[11] = i.Model.KApplyArg(v[4], 4)
									// KVariable _398 = v[11]
									v[12] = i.Model.KApplyArg(v[4], 5)
									if v[12]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
										// KVariable NEW = v[12]
										// KVariable DotVar1 = v[5]
										v[13] = i.Model.KApplyArg(c, 1)
										if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[14] = i.Model.KApplyArg(v[13], 0)
											if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[17] = i.Model.KApplyArg(v[15], 0)
													if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[16]
														v[18] = i.Model.KApplyArg(c, 2)
														// KVariable _14 = v[18]
														v[19] = i.Model.KApplyArg(c, 3)
														// KVariable _15 = v[19]
														v[20] = i.Model.KApplyArg(c, 4)
														// KVariable _16 = v[20]
														v[21] = i.Model.KApplyArg(c, 5)
														// KVariable _17 = v[21]
														v[22] = i.Model.KApplyArg(c, 6)
														// KVariable _18 = v[22]
														v[23] = i.Model.KApplyArg(c, 7)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_399),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
															v[24] = i.Model.KApplyArg(v[23], 0)
															if v[24]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_399)
																v[25] = i.Model.KApplyArg(v[24], 0)
																// KVariable _399 = v[25]
																v[26] = i.Model.KApplyArg(v[23], 1)
																// KVariable _0 = v[26]
																v[27] = i.Model.KApplyArg(v[23], 2)
																// KVariable _1 = v[27]
																v[28] = i.Model.KApplyArg(v[23], 3)
																// KVariable _2 = v[28]
																v[29] = i.Model.KApplyArg(v[23], 4)
																// KVariable _3 = v[29]
																v[30] = i.Model.KApplyArg(v[23], 5)
																// KVariable _4 = v[30]
																v[31] = i.Model.KApplyArg(v[23], 6)
																// KVariable _5 = v[31]
																v[32] = i.Model.KApplyArg(v[23], 7)
																// KVariable _6 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 8)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 9)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 10)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 11)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 12)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 13)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 14)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(c, 8)
																// KVariable _19 = v[40]
																// rule #344
																// source: iele.k @1429
																// {| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#codeDeposit_______IELE`(_395,_396,_397,REG,_398,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,STATUS,#registerDelta(REG,#token("1","Int"))~>`#load___IELE`(REG,STATUS))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_399=>`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_396),isInt(_395)),isInts(_399)),isInt(STATUS)),isContract(_397)),isLValue(REG)),isLValue(_398)),isBool(NEW)) ensures #token("true","Bool") [UNIQUE_ID(257d50d8bc60407439ffee58fba6fa09356e70941cb206f63af7423b854c3747) contentStartColumn(10) contentStartLine(1429) org.kframework.attributes.Location(Location(1429,10,1429,235)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_399)),#token("true","Bool")),isContract(_397)),isLValue(REG)),isLValue(_398)),#token("true","Bool"))
																	v[41], i.evalErr = i.evalIsInts( // isInts(_399)
																		v[25] /*_399*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_399)),#token("true","Bool")),isContract(_397))
																	bv[2] = /* rhs precomputed isInt(_396) && isInt(_395) */ /* && */ m.IsTrue(v[41]) /* && */ /* rhs precomputed isInt(STATUS) */ 
																	if bv[2] {
																		v[42], i.evalErr = i.evalIsContract( // isContract(_397)
																			v[9] /*_397*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[42])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_399)),#token("true","Bool")),isContract(_397)),isLValue(REG))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[43], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[10] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[43])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_399)),#token("true","Bool")),isContract(_397)),isLValue(REG)),isLValue(_398))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[44], i.evalErr = i.evalIsLValue( // isLValue(_398)
																			v[11] /*_398*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[44])
																	}
																	if bv[0] /* && */ /* rhs precomputed isBool(NEW) */  {
																		// RHS
																		return i.stepRHS344(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 546
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable STATUS = v[6]
						if v[4]&kapplyMatchMask == kapplyMatchLblXhashreturnXuXuXuIELE2 { // `#return___IELE`(_413,REG)
							v[7] = i.Model.KApplyArg(v[4], 0)
							// KVariable _413 = v[7]
							v[8] = i.Model.KApplyArg(v[4], 1)
							// KVariable REG = v[8]
							// KVariable DotVar1 = v[5]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _14 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _15 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _16 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _17 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _18 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_414),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[20] = i.Model.KApplyArg(v[19], 0)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_414)
													v[21] = i.Model.KApplyArg(v[20], 0)
													// KVariable _414 = v[21]
													v[22] = i.Model.KApplyArg(v[19], 1)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 2)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 3)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[19], 4)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[19], 5)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[19], 6)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[19], 7)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[19], 8)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[19], 9)
													// KVariable _8 = v[30]
													v[31] = i.Model.KApplyArg(v[19], 10)
													// KVariable _9 = v[31]
													v[32] = i.Model.KApplyArg(v[19], 11)
													// KVariable _10 = v[32]
													v[33] = i.Model.KApplyArg(v[19], 12)
													// KVariable _11 = v[33]
													v[34] = i.Model.KApplyArg(v[19], 13)
													// KVariable _12 = v[34]
													v[35] = i.Model.KApplyArg(v[19], 14)
													// KVariable _13 = v[35]
													v[36] = i.Model.KApplyArg(c, 8)
													// KVariable _19 = v[36]
													// rule #546
													// source: iele.k @1281
													// {| rule `<generatedTop>`(`<k>`(`` `#exception__IELE-INFRASTRUCTURE`(STATUS)~>`#return___IELE`(_413,REG)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#popWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#popSubstate_IELE-INFRASTRUCTURE`(.KList)~>#registerDelta(REG,#token("1","Int"))~>`#load___IELE`(REG,STATUS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_14,_15,_16,_17,_18,`<iele>`(`<output>`(_414=>`.List{"operandList"}`(.KList)),_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_19) requires `_andBool_`(`_andBool_`(`_andBool_`(isInts(_414),isLValues(_413)),isInt(STATUS)),isLValue(REG)) ensures #token("true","Bool") [UNIQUE_ID(c21df3764fe03289a51607aab183ef49cef277cebdd855fb3a2145ae1f2f86c3) contentStartColumn(10) contentStartLine(1281) org.kframework.attributes.Location(Location(1281,10,1285,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(isInts(_414),isLValues(_413)),#token("true","Bool")),isLValue(REG))
														v[37], i.evalErr = i.evalIsInts( // isInts(_414)
															v[21] /*_414*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														// `_andBool_`(isInts(_414),isLValues(_413))
														bv[1] = m.IsTrue(v[37])
														if bv[1] {
															v[38], i.evalErr = i.evalIsLValues( // isLValues(_413)
																v[7] /*_413*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[1] = m.IsTrue(v[38])
														}
														// `_andBool_`(`_andBool_`(`_andBool_`(isInts(_414),isLValues(_413)),#token("true","Bool")),isLValue(REG))
														bv[0] = bv[1] /* && */ /* rhs precomputed isInt(STATUS) */ 
														if bv[0] {
															v[39], i.evalErr = i.evalIsLValue( // isLValue(REG)
																v[8] /*REG*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															bv[0] = m.IsTrue(v[39])
														}
														if bv[0] {
															// RHS
															return i.stepRHS546(v, bv, config)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 230, 367
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexecXuXuIELEXhyphenINFRASTRUCTURE1 { // `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(RETURNS,`@__IELE-COMMON`(LABEL),ARGS))
					v[6] = i.Model.KApplyArg(v[2], 0)
					// rule: 230
					if v[6]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(RETURNS,`@__IELE-COMMON`(LABEL),ARGS)
						v[7] = i.Model.KApplyArg(v[6], 0)
						// KVariable RETURNS = v[7]
						v[8] = i.Model.KApplyArg(v[6], 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(LABEL)
							v[9] = i.Model.KApplyArg(v[8], 0)
							// KVariable LABEL = v[9]
							v[10] = i.Model.KApplyArg(v[6], 2)
							// KVariable ARGS = v[10]
							// KVariable OPS = v[4]
							// KVariable DotVar1 = v[5]
							v[11] = i.Model.KApplyArg(c, 1)
							if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[12] = i.Model.KApplyArg(v[11], 0)
								if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[15] = i.Model.KApplyArg(v[13], 0)
										if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[14]
											v[16] = i.Model.KApplyArg(c, 2)
											// KVariable _26 = v[16]
											v[17] = i.Model.KApplyArg(c, 3)
											// KVariable _27 = v[17]
											v[18] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[18]
											v[19] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[19]
											v[20] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[20]
											v[21] = i.Model.KApplyArg(c, 7)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(DotVar4),_2,_3,_4,_5,`<regs>`(REGS),_6,_7,_8,`<fid>`(FUNC),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _12 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _13 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _14 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _15 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(DotVar4),_2,_3,_4,_5,`<regs>`(REGS),_6,_7,_8,`<fid>`(FUNC),_9,_10,_11)
													v[27] = i.Model.KApplyArg(v[26], 0)
													// KVariable _0 = v[27]
													v[28] = i.Model.KApplyArg(v[26], 1)
													// KVariable _1 = v[28]
													v[29] = i.Model.KApplyArg(v[26], 2)
													if v[29]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(DotVar4)
														v[30] = i.Model.KApplyArg(v[29], 0)
														if v[30]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
															// KVariable DotVar4 = v[30]
															v[31] = i.Model.KApplyArg(v[26], 3)
															// KVariable _2 = v[31]
															v[32] = i.Model.KApplyArg(v[26], 4)
															// KVariable _3 = v[32]
															v[33] = i.Model.KApplyArg(v[26], 5)
															// KVariable _4 = v[33]
															v[34] = i.Model.KApplyArg(v[26], 6)
															// KVariable _5 = v[34]
															v[35] = i.Model.KApplyArg(v[26], 7)
															if v[35]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
																v[36] = i.Model.KApplyArg(v[35], 0)
																if v[36]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																	// KVariable REGS = v[36]
																	v[37] = i.Model.KApplyArg(v[26], 8)
																	// KVariable _6 = v[37]
																	v[38] = i.Model.KApplyArg(v[26], 9)
																	// KVariable _7 = v[38]
																	v[39] = i.Model.KApplyArg(v[26], 10)
																	// KVariable _8 = v[39]
																	v[40] = i.Model.KApplyArg(v[26], 11)
																	if v[40]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(FUNC)
																		v[41] = i.Model.KApplyArg(v[40], 0)
																		// KVariable FUNC = v[41]
																		v[42] = i.Model.KApplyArg(v[26], 12)
																		// KVariable _9 = v[42]
																		v[43] = i.Model.KApplyArg(v[26], 13)
																		// KVariable _10 = v[43]
																		v[44] = i.Model.KApplyArg(v[26], 14)
																		// KVariable _11 = v[44]
																		v[45] = i.Model.KApplyArg(v[21], 5)
																		// KVariable _16 = v[45]
																		v[46] = i.Model.KApplyArg(v[21], 6)
																		// KVariable _17 = v[46]
																		v[47] = i.Model.KApplyArg(v[21], 7)
																		// KVariable _18 = v[47]
																		v[48] = i.Model.KApplyArg(v[21], 8)
																		// KVariable _19 = v[48]
																		v[49] = i.Model.KApplyArg(v[21], 9)
																		// KVariable _20 = v[49]
																		v[50] = i.Model.KApplyArg(v[21], 10)
																		// KVariable _21 = v[50]
																		v[51] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _22 = v[51]
																		v[52] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _23 = v[52]
																		v[53] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _24 = v[53]
																		v[54] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _25 = v[54]
																		v[55] = i.Model.KApplyArg(c, 8)
																		// KVariable _31 = v[55]
																		// rule #230
																		// source: iele.k @957
																		// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(RETURNS,`@__IELE-COMMON`(LABEL),ARGS))~>OPS=>`#loads___IELE`(#regRange(#sizeRegs(ARGS)),ARGS)~>`#execute_IELE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(DotVar4=>`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)),_2,_3,_4,_5,`<regs>`(REGS=>`.Array_IELE-DATA`(.KList)),_6,_7,_8,`<fid>`(FUNC=>LABEL),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isArray(REGS)),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL)),isInts(ARGS)),`notBool_`(isIeleBuiltin(LABEL))) ensures #token("true","Bool") [UNIQUE_ID(9f58b2c5f57d6aa541fd45c7b19e527da584893e6fb57acc798ad24377e56003) contentStartColumn(10) contentStartLine(957) org.kframework.attributes.Location(Location(957,10,961,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL)),isInts(ARGS)),`notBool_`(isIeleBuiltin(LABEL)))
																			v[56], i.evalErr = i.evalIsBlocks( // isBlocks(OPS)
																				v[4] /*OPS*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS))
																			bv[4] = m.IsTrue(v[56]) /* && */ /* rhs precomputed isArray(REGS) */ 
																			if bv[4] {
																				v[57], i.evalErr = i.evalIsLValues( // isLValues(RETURNS)
																					v[7] /*RETURNS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[4] = m.IsTrue(v[57])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS)),isIeleName(FUNC))
																			bv[3] = bv[4]
																			if bv[3] {
																				v[58], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																					v[41] /*FUNC*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[3] = m.IsTrue(v[58])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL))
																			bv[2] = bv[3]
																			if bv[2] {
																				v[59], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																					v[9] /*LABEL*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[2] = m.IsTrue(v[59])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL)),isInts(ARGS))
																			bv[1] = bv[2]
																			if bv[1] {
																				v[60], i.evalErr = i.evalIsInts( // isInts(ARGS)
																					v[10] /*ARGS*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[60])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),#token("true","Bool")),isLValues(RETURNS)),isIeleName(FUNC)),isIeleName(LABEL)),isInts(ARGS)),`notBool_`(isIeleBuiltin(LABEL)))
																			bv[0] = bv[1]
																			if bv[0] {
																				v[61], i.evalErr = i.evalIsIeleBuiltin( // isIeleBuiltin(LABEL)
																					v[9] /*LABEL*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = !(m.IsTrue(v[61]))
																			}
																			if bv[0] {
																				// RHS
																				return i.stepRHS230(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 367
					if v[6]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(VALUES)
						v[7] = i.Model.KApplyArg(v[6], 0)
						// KVariable VALUES = v[7]
						// KVariable _330 = v[4]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _26 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _27 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _28 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _29 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _30 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)),_2,_3,_4,_5,`<regs>`(_332),_6,_7,_8,`<fid>`(_331),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _12 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _13 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _14 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _15 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)),_2,_3,_4,_5,`<regs>`(_332),_6,_7,_8,`<fid>`(_331),_9,_10,_11)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltlocalCallsXgt1 { // `<localCalls>`(`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4))
													v[27] = i.Model.KApplyArg(v[26], 0)
													if i.tempBoolVar, v[28], v[29] = i.Model.ListSplitHeadTail(v[27], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)
														if v[28]&kapplyMatchMask == kapplyMatchLblXlbracketXuXpipeXuXpipeXuXpipeXuXrbracketXuIELE4 { // `{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)
															v[30] = i.Model.KApplyArg(v[28], 0)
															// KVariable OPS = v[30]
															v[31] = i.Model.KApplyArg(v[28], 1)
															// KVariable FUNC = v[31]
															v[32] = i.Model.KApplyArg(v[28], 2)
															// KVariable RETURNS = v[32]
															v[33] = i.Model.KApplyArg(v[28], 3)
															if v[33]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																// KVariable REGS = v[33]
																if v[29]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
																	// KVariable DotVar4 = v[29]
																	v[34] = i.Model.KApplyArg(v[23], 3)
																	// KVariable _2 = v[34]
																	v[35] = i.Model.KApplyArg(v[23], 4)
																	// KVariable _3 = v[35]
																	v[36] = i.Model.KApplyArg(v[23], 5)
																	// KVariable _4 = v[36]
																	v[37] = i.Model.KApplyArg(v[23], 6)
																	// KVariable _5 = v[37]
																	v[38] = i.Model.KApplyArg(v[23], 7)
																	if v[38]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(_332)
																		v[39] = i.Model.KApplyArg(v[38], 0)
																		if v[39]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																			// KVariable _332 = v[39]
																			v[40] = i.Model.KApplyArg(v[23], 8)
																			// KVariable _6 = v[40]
																			v[41] = i.Model.KApplyArg(v[23], 9)
																			// KVariable _7 = v[41]
																			v[42] = i.Model.KApplyArg(v[23], 10)
																			// KVariable _8 = v[42]
																			v[43] = i.Model.KApplyArg(v[23], 11)
																			if v[43]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(_331)
																				v[44] = i.Model.KApplyArg(v[43], 0)
																				// KVariable _331 = v[44]
																				v[45] = i.Model.KApplyArg(v[23], 12)
																				// KVariable _9 = v[45]
																				v[46] = i.Model.KApplyArg(v[23], 13)
																				// KVariable _10 = v[46]
																				v[47] = i.Model.KApplyArg(v[23], 14)
																				// KVariable _11 = v[47]
																				v[48] = i.Model.KApplyArg(v[18], 5)
																				// KVariable _16 = v[48]
																				v[49] = i.Model.KApplyArg(v[18], 6)
																				// KVariable _17 = v[49]
																				v[50] = i.Model.KApplyArg(v[18], 7)
																				// KVariable _18 = v[50]
																				v[51] = i.Model.KApplyArg(v[18], 8)
																				// KVariable _19 = v[51]
																				v[52] = i.Model.KApplyArg(v[18], 9)
																				// KVariable _20 = v[52]
																				v[53] = i.Model.KApplyArg(v[18], 10)
																				// KVariable _21 = v[53]
																				v[54] = i.Model.KApplyArg(v[18], 11)
																				// KVariable _22 = v[54]
																				v[55] = i.Model.KApplyArg(v[18], 12)
																				// KVariable _23 = v[55]
																				v[56] = i.Model.KApplyArg(v[18], 13)
																				// KVariable _24 = v[56]
																				v[57] = i.Model.KApplyArg(v[18], 14)
																				// KVariable _25 = v[57]
																				v[58] = i.Model.KApplyArg(c, 8)
																				// KVariable _31 = v[58]
																				// rule #367
																				// source: iele.k @1021
																				// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`ret__IELE-COMMON`(VALUES))~>_330=>#registerDeltas(RETURNS,VALUES)~>`#loads___IELE`(RETURNS,VALUES)~>OPS``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,`<localCalls>`(`_List_`(`ListItem`(`{_|_|_|_}_IELE`(OPS,FUNC,RETURNS,REGS)),DotVar4)=>`_List_`(`.List`(.KList),DotVar4)),_2,_3,_4,_5,`<regs>`(_332=>REGS),_6,_7,_8,`<fid>`(_331=>FUNC),_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),isArray(REGS)),isLValues(RETURNS)),isBlocks(_330)),isArray(_332)),isIeleName(FUNC)),isIeleName(_331)) ensures #token("true","Bool") [UNIQUE_ID(bc16de12b4b17d3bc80493c9f71ba1cf296258f5a05d14673414bc96c1f7ea61) contentStartColumn(10) contentStartLine(1021) org.kframework.attributes.Location(Location(1021,10,1024,91)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),#token("true","Bool")),isLValues(RETURNS)),isBlocks(_330)),#token("true","Bool")),isIeleName(FUNC)),isIeleName(_331))
																					v[59], i.evalErr = i.evalIsBlocks( // isBlocks(OPS)
																						v[30] /*OPS*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES))
																					bv[4] = m.IsTrue(v[59])
																					if bv[4] {
																						v[60], i.evalErr = i.evalIsNonEmptyInts( // isNonEmptyInts(VALUES)
																							v[7] /*VALUES*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[4] = m.IsTrue(v[60])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),#token("true","Bool")),isLValues(RETURNS))
																					bv[3] = bv[4] /* && */ /* rhs precomputed isArray(REGS) */ 
																					if bv[3] {
																						v[61], i.evalErr = i.evalIsLValues( // isLValues(RETURNS)
																							v[32] /*RETURNS*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[3] = m.IsTrue(v[61])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),#token("true","Bool")),isLValues(RETURNS)),isBlocks(_330))
																					bv[2] = bv[3]
																					if bv[2] {
																						v[62], i.evalErr = i.evalIsBlocks( // isBlocks(_330)
																							v[4] /*_330*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[2] = m.IsTrue(v[62])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),#token("true","Bool")),isLValues(RETURNS)),isBlocks(_330)),#token("true","Bool")),isIeleName(FUNC))
																					bv[1] = bv[2] /* && */ /* rhs precomputed isArray(_332) */ 
																					if bv[1] {
																						v[63], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																							v[31] /*FUNC*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[63])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(OPS),isNonEmptyInts(VALUES)),#token("true","Bool")),isLValues(RETURNS)),isBlocks(_330)),#token("true","Bool")),isIeleName(FUNC)),isIeleName(_331))
																					bv[0] = bv[1]
																					if bv[0] {
																						v[64], i.evalErr = i.evalIsIeleName( // isIeleName(_331)
																							v[44] /*_331*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[64])
																					}
																					if bv[0] {
																						// RHS
																						return i.stepRHS367(v, bv, config)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 290, 524
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckPointXuIELEXhyphenPRECOMPILED0 { // `#checkPoint_IELE-PRECOMPILED`(.KList)
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashecpairing5 { // #ecpairing(`_List_`(`ListItem`(AK),_119),`_List_`(`ListItem`(BK),_120),_121,_122,_123)
						v[6] = i.Model.KApplyArg(v[4], 0)
						if i.tempBoolVar, v[7], v[8] = i.Model.ListSplitHeadTail(v[6], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(AK),_119)
							// KVariable AK = v[7]
							// rule: 290
							if v[8]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
								// KVariable _119 = v[8]
								v[9] = i.Model.KApplyArg(v[4], 1)
								if i.tempBoolVar, v[10], v[11] = i.Model.ListSplitHeadTail(v[9], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(BK),_120)
									// KVariable BK = v[10]
									if v[11]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
										// KVariable _120 = v[11]
										v[12] = i.Model.KApplyArg(v[4], 2)
										if v[12]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
											// KVariable _121 = v[12]
											v[13] = i.Model.KApplyArg(v[4], 3)
											if v[13]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
												// KVariable _122 = v[13]
												v[14] = i.Model.KApplyArg(v[4], 4)
												if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable _123 = v[14]
													// KVariable DotVar1 = v[5]
													v[15] = i.Model.KApplyArg(c, 1)
													if v[15]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[16] = i.Model.KApplyArg(v[15], 0)
														if v[16]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[17], v[18] = i.Model.KSequenceSplitHeadTail(v[16]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[17]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[19] = i.Model.KApplyArg(v[17], 0)
																if i.Model.Equals(v[19], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[18]
																	v[20] = i.Model.KApplyArg(c, 2)
																	// KVariable _0 = v[20]
																	v[21] = i.Model.KApplyArg(c, 3)
																	// KVariable _1 = v[21]
																	v[22] = i.Model.KApplyArg(c, 4)
																	// KVariable _2 = v[22]
																	v[23] = i.Model.KApplyArg(c, 5)
																	// KVariable _3 = v[23]
																	v[24] = i.Model.KApplyArg(c, 6)
																	// KVariable _4 = v[24]
																	v[25] = i.Model.KApplyArg(c, 7)
																	// KVariable _5 = v[25]
																	v[26] = i.Model.KApplyArg(c, 8)
																	// KVariable _6 = v[26]
																	// rule #290
																	// source: iele.k @1719
																	// {| rule `<generatedTop>`(`<k>`(`` `#checkPoint_IELE-PRECOMPILED`(.KList)~>#ecpairing(`_List_`(`ListItem`(AK),_119),`_List_`(`ListItem`(BK),_120),_121,_122,_123)=>`#exception__IELE-INFRASTRUCTURE`(#token("4","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(_121),isInt(_123)),isBytes(_122)),isG2Point(BK)),isList(_119)),isG1Point(AK)),isList(_120)),`_orBool__BOOL`(`notBool_`(isValidPoint(AK)),`notBool_`(isValidG2Point(BK)))) ensures #token("true","Bool") [UNIQUE_ID(4be2e5667c8c12e70819832a638dd7d368f561fa2f37bc97b8c60be06271eecc) contentStartColumn(10) contentStartLine(1719) org.kframework.attributes.Location(Location(1719,10,1720,72)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK)),#token("true","Bool")),`_orBool__BOOL`(`notBool_`(isValidPoint(AK)),`notBool_`(isValidG2Point(BK))))
																		v[27], i.evalErr = i.evalIsG2Point( // isG2Point(BK)
																			v[10] /*BK*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK))
																		bv[1] = /* rhs precomputed isBytes(_121) && isInt(_123) && isBytes(_122) */ /* && */ m.IsTrue(v[27]) /* && */ /* rhs precomputed isList(_119) */ 
																		if bv[1] {
																			v[28], i.evalErr = i.evalIsG1Point( // isG1Point(AK)
																				v[7] /*AK*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[28])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK)),#token("true","Bool")),`_orBool__BOOL`(`notBool_`(isValidPoint(AK)),`notBool_`(isValidG2Point(BK))))
																		bv[0] = bv[1] /* && */ /* rhs precomputed isList(_120) */ 
																		if bv[0] {
																			v[29], i.evalErr = i.evalIsValidPoint( // isValidPoint(AK)
																				v[7] /*AK*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_orBool__BOOL`(`notBool_`(isValidPoint(AK)),`notBool_`(isValidG2Point(BK)))
																			bv[2] = !(m.IsTrue(v[29]))
																			if !bv[2] {
																				v[30], i.evalErr = i.evalIsValidG2Point( // isValidG2Point(BK)
																					v[10] /*BK*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[2] = !(m.IsTrue(v[30]))
																			}
																			bv[0] = bv[2]
																		}
																		if bv[0] {
																			// RHS
																			return i.stepRHS290(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 524
							if v[8]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
								// KVariable _133 = v[8]
								v[9] = i.Model.KApplyArg(v[4], 1)
								if i.tempBoolVar, v[10], v[11] = i.Model.ListSplitHeadTail(v[9], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(BK),_134)
									// KVariable BK = v[10]
									if v[11]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
										// KVariable _134 = v[11]
										v[12] = i.Model.KApplyArg(v[4], 2)
										if v[12]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
											// KVariable _135 = v[12]
											v[13] = i.Model.KApplyArg(v[4], 3)
											if v[13]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
												// KVariable _136 = v[13]
												v[14] = i.Model.KApplyArg(v[4], 4)
												if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable _137 = v[14]
													// KVariable DotVar1 = v[5]
													v[15] = i.Model.KApplyArg(c, 1)
													if v[15]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[16] = i.Model.KApplyArg(v[15], 0)
														if v[16]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[17], v[18] = i.Model.KSequenceSplitHeadTail(v[16]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[17]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[19] = i.Model.KApplyArg(v[17], 0)
																if i.Model.Equals(v[19], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[18]
																	v[20] = i.Model.KApplyArg(c, 2)
																	// KVariable _0 = v[20]
																	v[21] = i.Model.KApplyArg(c, 3)
																	// KVariable _1 = v[21]
																	v[22] = i.Model.KApplyArg(c, 4)
																	// KVariable _2 = v[22]
																	v[23] = i.Model.KApplyArg(c, 5)
																	// KVariable _3 = v[23]
																	v[24] = i.Model.KApplyArg(c, 6)
																	// KVariable _4 = v[24]
																	v[25] = i.Model.KApplyArg(c, 7)
																	// KVariable _5 = v[25]
																	v[26] = i.Model.KApplyArg(c, 8)
																	// KVariable _6 = v[26]
																	// rule #524
																	// source: iele.k @1717
																	// {| rule `<generatedTop>`(`<k>`(`` `#checkPoint_IELE-PRECOMPILED`(.KList)=>.K``~>#ecpairing(`_List_`(`ListItem`(AK),_133),`_List_`(`ListItem`(BK),_134),_135,_136,_137)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_137),isBytes(_135)),isBytes(_136)),isList(_134)),isG2Point(BK)),isList(_133)),isG1Point(AK)),`_andBool_`(isValidPoint(AK),isValidG2Point(BK))) ensures #token("true","Bool") [UNIQUE_ID(dd7ed6c945ddfb2f5d3fb875dae3ff64c37bbcc8436374efc39ff3c5078bfa9b) contentStartColumn(10) contentStartLine(1717) org.kframework.attributes.Location(Location(1717,10,1718,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK)),`_andBool_`(isValidPoint(AK),isValidG2Point(BK)))
																		v[27], i.evalErr = i.evalIsG2Point( // isG2Point(BK)
																			v[10] /*BK*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK))
																		bv[1] = /* rhs precomputed isInt(_137) && isBytes(_135) && isBytes(_136) && isList(_134) */ /* && */ m.IsTrue(v[27]) /* && */ /* rhs precomputed isList(_133) */ 
																		if bv[1] {
																			v[28], i.evalErr = i.evalIsG1Point( // isG1Point(AK)
																				v[7] /*AK*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[28])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isG2Point(BK)),#token("true","Bool")),isG1Point(AK)),`_andBool_`(isValidPoint(AK),isValidG2Point(BK)))
																		bv[0] = bv[1]
																		if bv[0] {
																			v[29], i.evalErr = i.evalIsValidPoint( // isValidPoint(AK)
																				v[7] /*AK*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(isValidPoint(AK),isValidG2Point(BK))
																			bv[2] = m.IsTrue(v[29])
																			if bv[2] {
																				v[30], i.evalErr = i.evalIsValidG2Point( // isValidG2Point(BK)
																					v[10] /*BK*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[2] = m.IsTrue(v[30])
																			}
																			bv[0] = bv[2]
																		}
																		if bv[0] {
																			// RHS
																			return i.stepRHS524(v, bv, config)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 320
				if i.tempTypeVar = v[2] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
					// KVariable G = v[2]
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashdeductGasXuIELEXhyphenGAS0 { // `#deductGas_IELE-GAS`(.KList)
						// KVariable DotVar1 = v[5]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _27 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),`<previousGas>`(_168),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _13 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[16], 2)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[16], 3)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[16], 4)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),`<previousGas>`(_168),_12)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _0 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												// KVariable _1 = v[23]
												v[24] = i.Model.KApplyArg(v[21], 2)
												// KVariable _2 = v[24]
												v[25] = i.Model.KApplyArg(v[21], 3)
												// KVariable _3 = v[25]
												v[26] = i.Model.KApplyArg(v[21], 4)
												// KVariable _4 = v[26]
												v[27] = i.Model.KApplyArg(v[21], 5)
												// KVariable _5 = v[27]
												v[28] = i.Model.KApplyArg(v[21], 6)
												// KVariable _6 = v[28]
												v[29] = i.Model.KApplyArg(v[21], 7)
												// KVariable _7 = v[29]
												v[30] = i.Model.KApplyArg(v[21], 8)
												// KVariable _8 = v[30]
												v[31] = i.Model.KApplyArg(v[21], 9)
												// KVariable _9 = v[31]
												v[32] = i.Model.KApplyArg(v[21], 10)
												// KVariable _10 = v[32]
												v[33] = i.Model.KApplyArg(v[21], 11)
												// KVariable _11 = v[33]
												v[34] = i.Model.KApplyArg(v[21], 12)
												if v[34]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
													v[35] = i.Model.KApplyArg(v[34], 0)
													if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable GAVAIL = v[35]
														v[36] = i.Model.KApplyArg(v[21], 13)
														if v[36]&kapplyMatchMask == kapplyMatchLblXltpreviousGasXgt1 { // `<previousGas>`(_168)
															v[37] = i.Model.KApplyArg(v[36], 0)
															if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable _168 = v[37]
																v[38] = i.Model.KApplyArg(v[21], 14)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[16], 5)
																// KVariable _17 = v[39]
																v[40] = i.Model.KApplyArg(v[16], 6)
																// KVariable _18 = v[40]
																v[41] = i.Model.KApplyArg(v[16], 7)
																// KVariable _19 = v[41]
																v[42] = i.Model.KApplyArg(v[16], 8)
																// KVariable _20 = v[42]
																v[43] = i.Model.KApplyArg(v[16], 9)
																// KVariable _21 = v[43]
																v[44] = i.Model.KApplyArg(v[16], 10)
																// KVariable _22 = v[44]
																v[45] = i.Model.KApplyArg(v[16], 11)
																// KVariable _23 = v[45]
																v[46] = i.Model.KApplyArg(v[16], 12)
																// KVariable _24 = v[46]
																v[47] = i.Model.KApplyArg(v[16], 13)
																// KVariable _25 = v[47]
																v[48] = i.Model.KApplyArg(v[16], 14)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(c, 8)
																// KVariable _32 = v[49]
																// rule #320
																// source: iele-gas.k @32
																// {| rule `<generatedTop>`(`<k>`(``G~>`#deductGas_IELE-GAS`(.KList)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_27,_28,_29,_30,_31,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL=>`_-Int__INT`(GAVAIL,G)),`<previousGas>`(_168=>GAVAIL),_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),_32) requires `_andBool_`(`_andBool_`(`_andBool_`(isInt(G),isInt(_168)),isInt(GAVAIL)),`_>=Int__INT`(GAVAIL,G)) ensures #token("true","Bool") [UNIQUE_ID(2dee5ca6ffa3ca9e4784ecfe15f0eb654c78cca89a1eb62e1c45f0c8d2b4daed) contentStartColumn(10) contentStartLine(32) org.kframework.attributes.Location(Location(32,10,32,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_>=Int__INT`(GAVAIL,G))
																	v[50], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(GAVAIL,G)
																		v[35] /*GAVAIL*/,
																		v[2] /*G*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	if /* rhs precomputed isInt(G) && isInt(_168) && isInt(GAVAIL) */ /* && */ m.IsTrue(v[50]) {
																		// RHS
																		return i.stepRHS320(v, bv, config)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 401
				if i.tempTypeVar = v[2] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
					// KVariable I = v[2]
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashtrimAccountsXuIELEXhyphenNODE0 { // `#trimAccounts_IELE-NODE`(.KList)
						// KVariable DotVar1 = v[5]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _0 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _1 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										// KVariable _2 = v[13]
										v[14] = i.Model.KApplyArg(c, 5)
										// KVariable _3 = v[14]
										v[15] = i.Model.KApplyArg(c, 6)
										// KVariable _4 = v[15]
										v[16] = i.Model.KApplyArg(c, 7)
										// KVariable _5 = v[16]
										v[17] = i.Model.KApplyArg(c, 8)
										// KVariable _6 = v[17]
										// rule #401
										// source: iele-node.k @116
										// {| rule `<generatedTop>`(`<k>`(``I~>`#trimAccounts_IELE-NODE`(.KList)=>`#trimAccounts_IELE-NODE`(.KList)~>I``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_0,_1,_2,_3,_4,_5,_6) requires isInt(I) ensures #token("true","Bool") [UNIQUE_ID(3b63264b14dd0b8d16fbeeb4415a2622e8613f88ae5d3745207149e52aa9add0) contentStartColumn(10) contentStartLine(116) org.kframework.attributes.Location(Location(116,10,116,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// REQUIRES precomputed isInt(I)
											// RHS
											return i.stepRHS401(v, bv, config)
										}
									}
								}
							}
						}
					}
				}
			}
			// rule: 221
			// KSequence, size 1:DotVar1
			// KVariable DotVar1 = v[1]
			v[2] = i.Model.KApplyArg(c, 1)
			if v[2]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#STUCK(.KList)~>DotVar2)
				v[3] = i.Model.KApplyArg(v[2], 0)
				if v[3]>>refTypeShift != refEmptyKseqTypeAsUint { // #STUCK(.KList)~>DotVar2
					_, v[4], v[5] = i.Model.KSequenceSplitHeadTail(v[3]) // #STUCK(.KList) ~> ...
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashSTUCK0 { // #STUCK(.KList)
						// KVariable DotVar2 = v[5]
						v[6] = i.Model.KApplyArg(c, 2)
						// KVariable _3 = v[6]
						v[7] = i.Model.KApplyArg(c, 3)
						// KVariable _4 = v[7]
						v[8] = i.Model.KApplyArg(c, 4)
						// KVariable _5 = v[8]
						v[9] = i.Model.KApplyArg(c, 5)
						// KVariable _6 = v[9]
						v[10] = i.Model.KApplyArg(c, 6)
						if v[10]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2)
							v[11] = i.Model.KApplyArg(v[10], 0)
							if v[11]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
								v[12] = i.Model.KApplyArg(v[11], 0)
								if i.Model.Equals(v[12], m.BoolTrue) { // #token("true","Bool")
									v[13] = i.Model.KApplyArg(v[10], 1)
									// KVariable _0 = v[13]
									v[14] = i.Model.KApplyArg(v[10], 2)
									// KVariable _1 = v[14]
									v[15] = i.Model.KApplyArg(v[10], 3)
									// KVariable _2 = v[15]
									v[16] = i.Model.KApplyArg(c, 7)
									// KVariable _7 = v[16]
									v[17] = i.Model.KApplyArg(c, 8)
									// KVariable _8 = v[17]
									// rule #221
									// source: iele.k @1385
									// {| rule `<generatedTop>`(`<k>`(``.K=>`#illFormed_IELE`(.KList)``~>DotVar1),`<s>`(``#STUCK(.KList)=>.K``~>DotVar2),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2),_7,_8) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7839e83b27967ee97d76a17c9d2dfd242ced355799e66af2a4a70e39c42c6468) contentStartColumn(10) contentStartLine(1385) org.kframework.attributes.Location(Location(1385,10,1387,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// RHS
										return i.stepRHS221(v, bv, config)
									}
								}
							}
						}
					}
				}
			}
			// rule: 403
			if v[1]>>refTypeShift == refNonEmptyKseqTypeAsUint && (v[1]>>refNonEmptyKseqIndexShift&refNonEmptyKseqLengthMask) >= 3 { // `#illFormed_IELE`(.KList)~>`#finishTypeChecking_IELE`(.KList)~>`#create_______IELE`(_374,_375,GAVAIL,_376,_377,_378)~>DotVar1
				_, v[2], v[3] = i.Model.KSequenceSplitHeadTail(v[1]) // `#illFormed_IELE`(.KList) ~> ...
				_, v[4], v[5] = i.Model.KSequenceSplitHeadTail(v[3]) // `#finishTypeChecking_IELE`(.KList) ~> ...
				_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // `#create_______IELE`(_374,_375,GAVAIL,_376,_377,_378) ~> ...
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashillFormedXuIELE0 { // `#illFormed_IELE`(.KList)
					if v[4]&kapplyMatchMask == kapplyMatchLblXhashfinishTypeCheckingXuIELE0 { // `#finishTypeChecking_IELE`(.KList)
						if v[6]&kapplyMatchMask == kapplyMatchLblXhashcreateXuXuXuXuXuXuXuIELE6 { // `#create_______IELE`(_374,_375,GAVAIL,_376,_377,_378)
							v[8] = i.Model.KApplyArg(v[6], 0)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _374 = v[8]
								v[9] = i.Model.KApplyArg(v[6], 1)
								if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable _375 = v[9]
									v[10] = i.Model.KApplyArg(v[6], 2)
									if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable GAVAIL = v[10]
										v[11] = i.Model.KApplyArg(v[6], 3)
										if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable _376 = v[11]
											v[12] = i.Model.KApplyArg(v[6], 4)
											// KVariable _377 = v[12]
											v[13] = i.Model.KApplyArg(v[6], 5)
											// KVariable _378 = v[13]
											// KVariable DotVar1 = v[7]
											v[14] = i.Model.KApplyArg(c, 1)
											if v[14]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[15] = i.Model.KApplyArg(v[14], 0)
												if v[15]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[16], v[17] = i.Model.KSequenceSplitHeadTail(v[15]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[16]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[18] = i.Model.KApplyArg(v[16], 0)
														if i.Model.Equals(v[18], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[17]
															v[19] = i.Model.KApplyArg(c, 2)
															// KVariable _3 = v[19]
															v[20] = i.Model.KApplyArg(c, 3)
															// KVariable _4 = v[20]
															v[21] = i.Model.KApplyArg(c, 4)
															// KVariable _5 = v[21]
															v[22] = i.Model.KApplyArg(c, 5)
															// KVariable _6 = v[22]
															v[23] = i.Model.KApplyArg(c, 6)
															if v[23]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(`<typeChecking>`(#token("true","Bool")),_0,_1,_2)
																v[24] = i.Model.KApplyArg(v[23], 0)
																if v[24]&kapplyMatchMask == kapplyMatchLblXlttypeCheckingXgt1 { // `<typeChecking>`(#token("true","Bool"))
																	v[25] = i.Model.KApplyArg(v[24], 0)
																	if i.Model.Equals(v[25], m.BoolTrue) { // #token("true","Bool")
																		v[26] = i.Model.KApplyArg(v[23], 1)
																		// KVariable _0 = v[26]
																		v[27] = i.Model.KApplyArg(v[23], 2)
																		// KVariable _1 = v[27]
																		v[28] = i.Model.KApplyArg(v[23], 3)
																		// KVariable _2 = v[28]
																		v[29] = i.Model.KApplyArg(c, 7)
																		// KVariable _7 = v[29]
																		v[30] = i.Model.KApplyArg(c, 8)
																		// KVariable _8 = v[30]
																		// rule #403
																		// source: iele.k @1392
																		// {| rule `<generatedTop>`(`<k>`(`` `#illFormed_IELE`(.KList)~>`#finishTypeChecking_IELE`(.KList)~>`#create_______IELE`(_374,_375,GAVAIL,_376,_377,_378)=>`#refund__IELE`(GAVAIL)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(#token("9","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,`<well-formedness>`(`<typeChecking>`(#token("true","Bool")=>#token("false","Bool")),_0,_1,_2),_7,_8) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_375),isInts(_378)),isInt(_374)),isContract(_377)),isInt(_376)),isInt(GAVAIL)) ensures #token("true","Bool") [UNIQUE_ID(a0c8c0f153de16e4a6c2b64707e380d1b5929ffb217b3b31a155d233ddfba782) contentStartColumn(10) contentStartLine(1392) org.kframework.attributes.Location(Location(1392,10,1393,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// REQUIRES `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_378)),#token("true","Bool")),isContract(_377)),#token("true","Bool")),#token("true","Bool"))
																			v[31], i.evalErr = i.evalIsInts( // isInts(_378)
																				v[13] /*_378*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_378)),#token("true","Bool")),isContract(_377))
																			bv[0] = /* rhs precomputed isInt(_375) */ /* && */ m.IsTrue(v[31]) /* && */ /* rhs precomputed isInt(_374) */ 
																			if bv[0] {
																				v[32], i.evalErr = i.evalIsContract( // isContract(_377)
																					v[12] /*_377*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[32])
																			}
																			if bv[0] /* && */ /* rhs precomputed isInt(_376) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																				// RHS
																				return i.stepRHS403(v, bv, config)
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return i.stepLookups(c, config, -1)
}

func (i *Interpreter) stepLookups(c m.KReference, config m.KReference, guard int) (m.KReference, error) {
	matched := false
	v := i.stepTempVars
	bv := i.stepTempBoolVars
	// all rules: 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649
	if c&kapplyMatchMask == kapplyMatchLblXltgeneratedTopXgt9 { // `<generatedTop>`(`<k>`(`check_IELE-WELL-FORMEDNESS`(.KList)~>`br_,__IELE-COMMON`(OP1,NAME)~>DotVar1),_9,_10,_11,_12,_13,`<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))),_14,_15)
		v[0] = i.Model.KApplyArg(c, 0)
		if v[0]&kapplyMatchMask == kapplyMatchLblXltkXgt1 { // `<k>`(`check_IELE-WELL-FORMEDNESS`(.KList)~>`br_,__IELE-COMMON`(OP1,NAME)~>DotVar1)
			v[1] = i.Model.KApplyArg(v[0], 0)
			// rules: 572, 575, 580, 589, 592, 604, 613, 618, 621, 623, 640
			if v[1]>>refTypeShift == refNonEmptyKseqTypeAsUint && (v[1]>>refNonEmptyKseqIndexShift&refNonEmptyKseqLengthMask) >= 2 { // `check_IELE-WELL-FORMEDNESS`(.KList)~>`br_,__IELE-COMMON`(OP1,NAME)~>DotVar1
				_, v[2], v[3] = i.Model.KSequenceSplitHeadTail(v[1]) // `check_IELE-WELL-FORMEDNESS`(.KList) ~> ...
				_, v[4], v[5] = i.Model.KSequenceSplitHeadTail(v[3]) // `br_,__IELE-COMMON`(OP1,NAME) ~> ...
				// rules: 572, 580, 589, 592, 618, 621, 640
				if v[2]&kapplyMatchMask == kapplyMatchLblCheckXuIELEXhyphenWELLXhyphenFORMEDNESS0 { // `check_IELE-WELL-FORMEDNESS`(.KList)
					// rule: 640
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(OP1,NAME)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OP1 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable NAME = v[7]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						// KVariable _9 = v[8]
						v[9] = i.Model.KApplyArg(c, 2)
						// KVariable _10 = v[9]
						v[10] = i.Model.KApplyArg(c, 3)
						// KVariable _11 = v[10]
						v[11] = i.Model.KApplyArg(c, 4)
						// KVariable _12 = v[11]
						v[12] = i.Model.KApplyArg(c, 5)
						// KVariable _13 = v[12]
						v[13] = i.Model.KApplyArg(c, 6)
						if v[13]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1)))
							v[14] = i.Model.KApplyArg(v[13], 0)
							// KVariable _6 = v[14]
							v[15] = i.Model.KApplyArg(v[13], 1)
							// KVariable _7 = v[15]
							v[16] = i.Model.KApplyArg(v[13], 2)
							// KVariable _8 = v[16]
							v[17] = i.Model.KApplyArg(v[13], 3)
							if v[17]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))
								v[18] = i.Model.KApplyArg(v[17], 0)
								// KVariable _2 = v[18]
								v[19] = i.Model.KApplyArg(v[17], 1)
								// KVariable _3 = v[19]
								v[20] = i.Model.KApplyArg(v[17], 2)
								// KVariable _4 = v[20]
								v[21] = i.Model.KApplyArg(v[17], 3)
								// KVariable _5 = v[21]
								v[22] = i.Model.KApplyArg(v[17], 4)
								if v[22]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(_0,`<labels>`(_16),_1)
									v[23] = i.Model.KApplyArg(v[22], 0)
									// KVariable _0 = v[23]
									v[24] = i.Model.KApplyArg(v[22], 1)
									if v[24]&kapplyMatchMask == kapplyMatchLblXltlabelsXgt1 { // `<labels>`(_16)
										v[25] = i.Model.KApplyArg(v[24], 0)
										// KVariable _16 = v[25]
										v[26] = i.Model.KApplyArg(v[22], 2)
										// KVariable _1 = v[26]
										v[27] = i.Model.KApplyArg(c, 7)
										// KVariable _14 = v[27]
										v[28] = i.Model.KApplyArg(c, 8)
										// KVariable _15 = v[28]
										// rule #640
										// source: well-formedness.k @254
										// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`br_,__IELE-COMMON`(OP1,NAME)=>checkOperand(OP1)``~>DotVar1),_9,_10,_11,_12,_13,`<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))),_14,_15) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_16),#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))),`_andBool_`(isIeleName(NAME),isOperand(OP1))) ensures #token("true","Bool") [UNIQUE_ID(02149ead6ed4c71274144038607dc7de6765536e6132f0e43d733ddd3e49248f) contentStartColumn(10) contentStartLine(254) org.kframework.attributes.Location(Location(254,10,255,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// LOOKUPS
											if guard < 0 {
												// lookup:#setChoice(NAME,_16)
												setChoice0Eval := v[25] /*_16*/
												setChoice0Obj, setChoice0TypeOk := i.Model.GetSetObject(setChoice0Eval)
												if !setChoice0TypeOk {
													return i.stepLookups(c, config, 0) // reapply
												}
												var setChoice0Result m.KReference = m.InternedBottom
												for setChoice0Key := range setChoice0Obj.Data {
													var setChoice0Err error
													setChoice0Elem, setChoice0Err := i.Model.ToKItem(setChoice0Key)
													if setChoice0Err != nil {
														return m.NoResult, setChoice0Err
													}
													if i.Model.Equals(setChoice0Elem, v[7] /*NAME*/) { // lhs KVariable, which reappears:NAME
														setChoice0Result, setChoice0Err = func() (m.KReference, error) {
															// lookup:#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))
															v[30], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
																v[7] /*NAME*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[29], i.evalErr = i.evalSetXcolondifference( // `Set:difference`(_16,`SetItem`(NAME))
																v[25] /*_16*/,
																v[30],
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[31] = v[29]
															if v[31] == m.InternedBottom {
																return i.stepLookups(c, config, 0) // reapply
															}
															if v[31]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																v[32 /*DotVar5*/] = v[31] // DotVar5
																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(isIeleName(NAME),isOperand(OP1)))
																v[33], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																	v[7] /*NAME*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isIeleName(NAME),isOperand(OP1))
																bv[0] = m.IsTrue(v[33])
																if bv[0] {
																	v[34], i.evalErr = i.evalIsOperand( // isOperand(OP1)
																		v[6] /*OP1*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[34])
																}
																if /* rhs precomputed lookup #setChoice && lookup #match */ /* && */ bv[0] {
																	// RHS
																	return i.stepRHS640(v, bv, config)
																}
															} else {
																return i.stepLookups(c, config, 0) // reapply
															}

															return m.InternedBottom, nil // #setChoice end
														}()
														if setChoice0Err != nil {
															return m.NoResult, setChoice0Err
														}

													}
												}
												if setChoice0Result == m.InternedBottom {
													return i.stepLookups(c, config, 0) // reapply
												}
												return setChoice0Result, nil

											}
										}
									}
								}
							}
						}
					}
					// rules: 572, 589
					if v[4]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(OPS)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable OPS = v[6]
						// KVariable DotVar1 = v[5]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _8 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _9 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _10 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _11 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _12 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						if v[12]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_5,_6,_7,`<currentContract>`(`<types>`(_15),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1)))
							v[13] = i.Model.KApplyArg(v[12], 0)
							// KVariable _5 = v[13]
							v[14] = i.Model.KApplyArg(v[12], 1)
							// KVariable _6 = v[14]
							v[15] = i.Model.KApplyArg(v[12], 2)
							// KVariable _7 = v[15]
							v[16] = i.Model.KApplyArg(v[12], 3)
							if v[16]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(_15),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1))
								v[17] = i.Model.KApplyArg(v[16], 0)
								if v[17]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(_15)
									v[18] = i.Model.KApplyArg(v[17], 0)
									// KVariable _15 = v[18]
									v[19] = i.Model.KApplyArg(v[16], 1)
									// KVariable _2 = v[19]
									v[20] = i.Model.KApplyArg(v[16], 2)
									// KVariable _3 = v[20]
									v[21] = i.Model.KApplyArg(v[16], 3)
									// KVariable _4 = v[21]
									v[22] = i.Model.KApplyArg(v[16], 4)
									if v[22]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(`<functionName>`(NAME),_0,_1)
										v[23] = i.Model.KApplyArg(v[22], 0)
										if v[23]&kapplyMatchMask == kapplyMatchLblXltfunctionNameXgt1 { // `<functionName>`(NAME)
											v[24] = i.Model.KApplyArg(v[23], 0)
											// KVariable NAME = v[24]
											v[25] = i.Model.KApplyArg(v[22], 1)
											// KVariable _0 = v[25]
											v[26] = i.Model.KApplyArg(v[22], 2)
											// KVariable _1 = v[26]
											v[27] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[27]
											v[28] = i.Model.KApplyArg(c, 8)
											// KVariable _14 = v[28]
											// rule: 572
											// rule #572
											// source: well-formedness.k @285
											// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`ret__IELE-COMMON`(OPS)=>checkOperands(OPS)``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(_5,_6,_7,`<currentContract>`(`<types>`(_15=>`_Map_`(`_|->_`(NAME,funType(_37,ints(#sizeRegs(OPS)))),DotVar4)),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1))),_13,_14) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_15,NAME)),#match(funType(_37,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_15,NAME))),`_andBool_`(`_andBool_`(isIeleName(NAME),isNonEmptyOperands(OPS)),isTypes(_37))) ensures #token("true","Bool") [UNIQUE_ID(97ec40d983a2099aa9ef981655814a4d8524ec1660cd493d17ce3dcef20f0827) contentStartColumn(10) contentStartLine(285) org.kframework.attributes.Location(Location(285,10,287,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
											if !matched {
												// LOOKUPS
												if guard < 1 {
													// lookup:#match(DotVar4,`_[_<-undef]`(_15,NAME))
													v[29], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_15,NAME)
														v[18] /*_15*/,
														v[24] /*NAME*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													v[30] = v[29]
													if v[30] == m.InternedBottom {
														return i.stepLookups(c, config, 1) // reapply
													}
													if v[30]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														v[31 /*DotVar4*/] = v[30] // DotVar4
														// lookup:#match(funType(_37,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_15,NAME))
														v[32], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_15,NAME)
															v[18] /*_15*/,
															v[24] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[33] = v[32]
														if v[33] == m.InternedBottom {
															return i.stepLookups(c, config, 1) // reapply
														}
														if v[33]&kapplyMatchMask == kapplyMatchLblFunType2 { // funType(_37,`unknown_IELE-WELL-FORMEDNESS`(.KList))
															v[34] = i.Model.KApplyArg(v[33], 0)
															v[35 /*_37*/] = v[34] // lhs KVariable _37
															v[36] = i.Model.KApplyArg(v[33], 1)
															if v[36]&kapplyMatchMask == kapplyMatchLblUnknownXuIELEXhyphenWELLXhyphenFORMEDNESS0 { // `unknown_IELE-WELL-FORMEDNESS`(.KList)
																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isIeleName(NAME),isNonEmptyOperands(OPS)),isTypes(_37)))
																v[37], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																	v[24] /*NAME*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isIeleName(NAME),isNonEmptyOperands(OPS))
																bv[1] = m.IsTrue(v[37])
																if bv[1] {
																	v[38], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OPS)
																		v[6] /*OPS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[38])
																}
																// `_andBool_`(`_andBool_`(isIeleName(NAME),isNonEmptyOperands(OPS)),isTypes(_37))
																bv[0] = bv[1]
																if bv[0] {
																	v[39], i.evalErr = i.evalIsTypes( // isTypes(_37)
																		v[35 /*_37*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = m.IsTrue(v[39])
																}
																if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																	// RHS
																	return i.stepRHS572(v, bv, config)
																}
															}
														} else {
															return i.stepLookups(c, config, 1) // reapply
														}
													} else {
														return i.stepLookups(c, config, 1) // reapply
													}
												}
											}
											// rule: 589
											// rule #589
											// source: well-formedness.k @280
											// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`ret__IELE-COMMON`(OPS)=>checkOperands(OPS)``~>DotVar1),_8,_9,_10,_11,_12,`<well-formedness>`(_5,_6,_7,`<currentContract>`(`<types>`(_15),_2,_3,_4,`<currentFunction>`(`<functionName>`(NAME),_0,_1))),_13,_14) requires `_andBool_`(`_andBool_`(#match(funType(_38,RETTYPES),`Map:lookup`(_15,NAME)),#match(DotVar4,`_[_<-undef]`(_15,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isTypes(RETTYPES)),isNonEmptyOperands(OPS)),isTypes(_38)),`_==K_`(ints(#sizeRegs(OPS)),RETTYPES))) ensures #token("true","Bool") [UNIQUE_ID(a67a9e03b16633b1b43c2019fe5a11584a58c579d4d0b3eac65099e578f12ea3) contentStartColumn(10) contentStartLine(280) org.kframework.attributes.Location(Location(280,10,283,49)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// LOOKUPS
												if guard < 2 {
													// lookup:#match(funType(_38,RETTYPES),`Map:lookup`(_15,NAME))
													v[29], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_15,NAME)
														v[18] /*_15*/,
														v[24] /*NAME*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													v[30] = v[29]
													if v[30] == m.InternedBottom {
														return i.stepLookups(c, config, 2) // reapply
													}
													if v[30]&kapplyMatchMask == kapplyMatchLblFunType2 { // funType(_38,RETTYPES)
														v[31] = i.Model.KApplyArg(v[30], 0)
														v[32 /*_38*/] = v[31] // lhs KVariable _38
														v[33] = i.Model.KApplyArg(v[30], 1)
														v[34 /*RETTYPES*/] = v[33] // lhs KVariable RETTYPES
														// lookup:#match(DotVar4,`_[_<-undef]`(_15,NAME))
														v[35], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_15,NAME)
															v[18] /*_15*/,
															v[24] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[36] = v[35]
														if v[36] == m.InternedBottom {
															return i.stepLookups(c, config, 2) // reapply
														}
														if v[36]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															v[37 /*DotVar4*/] = v[36] // DotVar4
															// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isTypes(RETTYPES)),isNonEmptyOperands(OPS)),isTypes(_38)),`_==K_`(ints(#sizeRegs(OPS)),RETTYPES)))
															v[38], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																v[24] /*NAME*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isIeleName(NAME),isTypes(RETTYPES))
															bv[3] = m.IsTrue(v[38])
															if bv[3] {
																v[39], i.evalErr = i.evalIsTypes( // isTypes(RETTYPES)
																	v[34 /*RETTYPES*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[3] = m.IsTrue(v[39])
															}
															// `_andBool_`(`_andBool_`(isIeleName(NAME),isTypes(RETTYPES)),isNonEmptyOperands(OPS))
															bv[2] = bv[3]
															if bv[2] {
																v[40], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(OPS)
																	v[6] /*OPS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[40])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isTypes(RETTYPES)),isNonEmptyOperands(OPS)),isTypes(_38))
															bv[1] = bv[2]
															if bv[1] {
																v[41], i.evalErr = i.evalIsTypes( // isTypes(_38)
																	v[32 /*_38*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[41])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isTypes(RETTYPES)),isNonEmptyOperands(OPS)),isTypes(_38)),`_==K_`(ints(#sizeRegs(OPS)),RETTYPES))
															bv[0] = bv[1]
															if bv[0] {
																v[44], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(OPS)
																	v[6] /*OPS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[43], i.evalErr = i.evalInts( // ints(#sizeRegs(OPS))
																	v[44],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[42], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(ints(#sizeRegs(OPS)),RETTYPES)
																	v[43],
																	v[34 /*RETTYPES*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[42])
															}
															if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																// RHS
																return i.stepRHS589(v, bv, config)
															}
														} else {
															return i.stepLookups(c, config, 2) // reapply
														}
													} else {
														return i.stepLookups(c, config, 2) // reapply
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 580, 621
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(RETS,`@__IELE-COMMON`(NAME),ARGS)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable RETS = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[8] = i.Model.KApplyArg(v[7], 0)
							// KVariable NAME = v[8]
							v[9] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[9]
							// KVariable DotVar1 = v[5]
							v[10] = i.Model.KApplyArg(c, 1)
							// KVariable _6 = v[10]
							v[11] = i.Model.KApplyArg(c, 2)
							// KVariable _7 = v[11]
							v[12] = i.Model.KApplyArg(c, 3)
							// KVariable _8 = v[12]
							v[13] = i.Model.KApplyArg(c, 4)
							// KVariable _9 = v[13]
							v[14] = i.Model.KApplyArg(c, 5)
							// KVariable _10 = v[14]
							v[15] = i.Model.KApplyArg(c, 6)
							if v[15]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_4,`<well-formedness-schedule>`(SCHED),_5,`<currentContract>`(`<types>`(_13),_0,_1,_2,_3))
								v[16] = i.Model.KApplyArg(v[15], 0)
								// KVariable _4 = v[16]
								v[17] = i.Model.KApplyArg(v[15], 1)
								if v[17]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXhyphenscheduleXgt1 { // `<well-formedness-schedule>`(SCHED)
									v[18] = i.Model.KApplyArg(v[17], 0)
									// KVariable SCHED = v[18]
									v[19] = i.Model.KApplyArg(v[15], 2)
									// KVariable _5 = v[19]
									v[20] = i.Model.KApplyArg(v[15], 3)
									if v[20]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(_13),_0,_1,_2,_3)
										v[21] = i.Model.KApplyArg(v[20], 0)
										if v[21]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(_13)
											v[22] = i.Model.KApplyArg(v[21], 0)
											// KVariable _13 = v[22]
											v[23] = i.Model.KApplyArg(v[20], 1)
											// KVariable _0 = v[23]
											v[24] = i.Model.KApplyArg(v[20], 2)
											// KVariable _1 = v[24]
											v[25] = i.Model.KApplyArg(v[20], 3)
											// KVariable _2 = v[25]
											v[26] = i.Model.KApplyArg(v[20], 4)
											// KVariable _3 = v[26]
											v[27] = i.Model.KApplyArg(c, 7)
											// KVariable _11 = v[27]
											v[28] = i.Model.KApplyArg(c, 8)
											// KVariable _12 = v[28]
											// rule: 580
											// rule #580
											// source: well-formedness.k @263
											// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`@__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,`<well-formedness-schedule>`(SCHED),_5,`<currentContract>`(`<types>`(_13),_0,_1,_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(#match(funType(ARGTYPES,RETTYPES),`Map:lookup`(_13,NAME)),#match(DotVar4,`_[_<-undef]`(_13,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES)),checkInit(NAME,SCHED)))) ensures #token("true","Bool") [UNIQUE_ID(bfa965546cb7679ba81aec9988629fcdc1cdef691965335ee2ceb6080b05078c) contentStartColumn(10) contentStartLine(263) org.kframework.attributes.Location(Location(263,10,266,125)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// LOOKUPS
												if guard < 3 {
													// lookup:#match(funType(ARGTYPES,RETTYPES),`Map:lookup`(_13,NAME))
													v[29], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_13,NAME)
														v[22] /*_13*/,
														v[8] /*NAME*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													v[30] = v[29]
													if v[30] == m.InternedBottom {
														return i.stepLookups(c, config, 3) // reapply
													}
													if v[30]&kapplyMatchMask == kapplyMatchLblFunType2 { // funType(ARGTYPES,RETTYPES)
														v[31] = i.Model.KApplyArg(v[30], 0)
														v[32 /*ARGTYPES*/] = v[31] // lhs KVariable ARGTYPES
														v[33] = i.Model.KApplyArg(v[30], 1)
														v[34 /*RETTYPES*/] = v[33] // lhs KVariable RETTYPES
														// lookup:#match(DotVar4,`_[_<-undef]`(_13,NAME))
														v[35], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_13,NAME)
															v[22] /*_13*/,
															v[8] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[36] = v[35]
														if v[36] == m.InternedBottom {
															return i.stepLookups(c, config, 3) // reapply
														}
														if v[36]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
															v[37 /*DotVar4*/] = v[36] // DotVar4
															// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES)),checkInit(NAME,SCHED))))
															v[38], i.evalErr = i.evalIsLValues( // isLValues(RETS)
																v[6] /*RETS*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isLValues(RETS),isIeleName(NAME))
															bv[5] = m.IsTrue(v[38])
															if bv[5] {
																v[39], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																	v[8] /*NAME*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[5] = m.IsTrue(v[39])
															}
															// `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS))
															bv[4] = bv[5]
															if bv[4] {
																v[40], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																	v[9] /*ARGS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[4] = m.IsTrue(v[40])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES))
															bv[3] = bv[4]
															if bv[3] {
																v[41], i.evalErr = i.evalIsTypes( // isTypes(RETTYPES)
																	v[34 /*RETTYPES*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[3] = m.IsTrue(v[41])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED))
															bv[2] = bv[3]
															if bv[2] {
																v[42], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[18] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[42])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED)),isTypes(ARGTYPES))
															bv[1] = bv[2]
															if bv[1] {
																v[43], i.evalErr = i.evalIsTypes( // isTypes(ARGTYPES)
																	v[32 /*ARGTYPES*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[43])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isTypes(RETTYPES)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES)),checkInit(NAME,SCHED)))
															bv[0] = bv[1]
															if bv[0] {
																v[46], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
																	v[9] /*ARGS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[45], i.evalErr = i.evalInts( // ints(#sizeRegs(ARGS))
																	v[46],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[44], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES)
																	v[45],
																	v[32 /*ARGTYPES*/],
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES))
																bv[7] = m.IsTrue(v[44])
																if bv[7] {
																	v[49], i.evalErr = i.evalXhashsizeLVals( // #sizeLVals(RETS)
																		v[6] /*RETS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[48], i.evalErr = i.evalInts( // ints(#sizeLVals(RETS))
																		v[49],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[47], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(ints(#sizeLVals(RETS)),RETTYPES)
																		v[48],
																		v[34 /*RETTYPES*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[7] = m.IsTrue(v[47])
																}
																// `_andBool_`(`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),`_==K_`(ints(#sizeLVals(RETS)),RETTYPES)),checkInit(NAME,SCHED))
																bv[6] = bv[7]
																if bv[6] {
																	v[50], i.evalErr = i.evalCheckInit( // checkInit(NAME,SCHED)
																		v[8] /*NAME*/,
																		v[18] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[6] = m.IsTrue(v[50])
																}
																bv[0] = bv[6]
															}
															if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																// RHS
																return i.stepRHS580(v, bv, config)
															}
														} else {
															return i.stepLookups(c, config, 3) // reapply
														}
													} else {
														return i.stepLookups(c, config, 3) // reapply
													}
												}
											}
											// rule: 621
											// rule #621
											// source: well-formedness.k @268
											// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_=call_(_)_IELE-COMMON`(RETS,`@__IELE-COMMON`(NAME),ARGS)=>checkLVals(RETS)~>checkOperands(ARGS)``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_4,`<well-formedness-schedule>`(SCHED),_5,`<currentContract>`(`<types>`(_13=>`_Map_`(`_|->_`(NAME,funType(ARGTYPES,ints(#sizeLVals(RETS)))),DotVar4)),_0,_1,_2,_3)),_11,_12) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_13,NAME)),#match(funType(ARGTYPES,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_13,NAME))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),checkInit(NAME,SCHED)))) ensures #token("true","Bool") [UNIQUE_ID(a9a65f4939f3e9eae8d29c4c5a4918666790e0bee8b474be00660dd349b228ec) contentStartColumn(10) contentStartLine(268) org.kframework.attributes.Location(Location(268,10,271,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
											if !matched {
												// LOOKUPS
												if guard < 4 {
													// lookup:#match(DotVar4,`_[_<-undef]`(_13,NAME))
													v[29], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_13,NAME)
														v[22] /*_13*/,
														v[8] /*NAME*/,
														config, -1)
													if i.evalErr != nil {
														return m.NoResult, i.evalErr
													}
													v[30] = v[29]
													if v[30] == m.InternedBottom {
														return i.stepLookups(c, config, 4) // reapply
													}
													if v[30]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
														v[31 /*DotVar4*/] = v[30] // DotVar4
														// lookup:#match(funType(ARGTYPES,`unknown_IELE-WELL-FORMEDNESS`(.KList)),`Map:lookup`(_13,NAME))
														v[32], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_13,NAME)
															v[22] /*_13*/,
															v[8] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[33] = v[32]
														if v[33] == m.InternedBottom {
															return i.stepLookups(c, config, 4) // reapply
														}
														if v[33]&kapplyMatchMask == kapplyMatchLblFunType2 { // funType(ARGTYPES,`unknown_IELE-WELL-FORMEDNESS`(.KList))
															v[34] = i.Model.KApplyArg(v[33], 0)
															v[35 /*ARGTYPES*/] = v[34] // lhs KVariable ARGTYPES
															v[36] = i.Model.KApplyArg(v[33], 1)
															if v[36]&kapplyMatchMask == kapplyMatchLblUnknownXuIELEXhyphenWELLXhyphenFORMEDNESS0 { // `unknown_IELE-WELL-FORMEDNESS`(.KList)
																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),checkInit(NAME,SCHED))))
																v[37], i.evalErr = i.evalIsLValues( // isLValues(RETS)
																	v[6] /*RETS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isLValues(RETS),isIeleName(NAME))
																bv[4] = m.IsTrue(v[37])
																if bv[4] {
																	v[38], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																		v[8] /*NAME*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[4] = m.IsTrue(v[38])
																}
																// `_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS))
																bv[3] = bv[4]
																if bv[3] {
																	v[39], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																		v[9] /*ARGS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[3] = m.IsTrue(v[39])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED))
																bv[2] = bv[3]
																if bv[2] {
																	v[40], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[18] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[40])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isTypes(ARGTYPES))
																bv[1] = bv[2]
																if bv[1] {
																	v[41], i.evalErr = i.evalIsTypes( // isTypes(ARGTYPES)
																		v[35 /*ARGTYPES*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[41])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(RETS),isIeleName(NAME)),isOperands(ARGS)),isSchedule(SCHED)),isTypes(ARGTYPES)),`_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),checkInit(NAME,SCHED)))
																bv[0] = bv[1]
																if bv[0] {
																	v[44], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
																		v[9] /*ARGS*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[43], i.evalErr = i.evalInts( // ints(#sizeRegs(ARGS))
																		v[44],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[42], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES)
																		v[43],
																		v[35 /*ARGTYPES*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_==K_`(ints(#sizeRegs(ARGS)),ARGTYPES),checkInit(NAME,SCHED))
																	bv[5] = m.IsTrue(v[42])
																	if bv[5] {
																		v[45], i.evalErr = i.evalCheckInit( // checkInit(NAME,SCHED)
																			v[8] /*NAME*/,
																			v[18] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[5] = m.IsTrue(v[45])
																	}
																	bv[0] = bv[5]
																}
																if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																	// RHS
																	return i.stepRHS621(v, bv, config)
																}
															}
														} else {
															return i.stepLookups(c, config, 4) // reapply
														}
													} else {
														return i.stepLookups(c, config, 4) // reapply
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 592
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(STATUS,RET,NAME,ARGS,OP1)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable STATUS = v[6]
						v[7] = i.Model.KApplyArg(v[4], 1)
						// KVariable RET = v[7]
						v[8] = i.Model.KApplyArg(v[4], 2)
						// KVariable NAME = v[8]
						v[9] = i.Model.KApplyArg(v[4], 3)
						// KVariable ARGS = v[9]
						v[10] = i.Model.KApplyArg(v[4], 4)
						// KVariable OP1 = v[10]
						// KVariable DotVar1 = v[5]
						v[11] = i.Model.KApplyArg(c, 1)
						// KVariable _7 = v[11]
						v[12] = i.Model.KApplyArg(c, 2)
						// KVariable _8 = v[12]
						v[13] = i.Model.KApplyArg(c, 3)
						// KVariable _9 = v[13]
						v[14] = i.Model.KApplyArg(c, 4)
						// KVariable _10 = v[14]
						v[15] = i.Model.KApplyArg(c, 5)
						// KVariable _11 = v[15]
						v[16] = i.Model.KApplyArg(c, 6)
						if v[16]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,`<declaredContracts>`(_14),_2,_3))
							v[17] = i.Model.KApplyArg(v[16], 0)
							// KVariable _4 = v[17]
							v[18] = i.Model.KApplyArg(v[16], 1)
							// KVariable _5 = v[18]
							v[19] = i.Model.KApplyArg(v[16], 2)
							// KVariable _6 = v[19]
							v[20] = i.Model.KApplyArg(v[16], 3)
							if v[20]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_0,_1,`<declaredContracts>`(_14),_2,_3)
								v[21] = i.Model.KApplyArg(v[20], 0)
								// KVariable _0 = v[21]
								v[22] = i.Model.KApplyArg(v[20], 1)
								// KVariable _1 = v[22]
								v[23] = i.Model.KApplyArg(v[20], 2)
								if v[23]&kapplyMatchMask == kapplyMatchLblXltdeclaredContractsXgt1 { // `<declaredContracts>`(_14)
									v[24] = i.Model.KApplyArg(v[23], 0)
									// KVariable _14 = v[24]
									v[25] = i.Model.KApplyArg(v[20], 3)
									// KVariable _2 = v[25]
									v[26] = i.Model.KApplyArg(v[20], 4)
									// KVariable _3 = v[26]
									v[27] = i.Model.KApplyArg(c, 7)
									// KVariable _12 = v[27]
									v[28] = i.Model.KApplyArg(c, 8)
									// KVariable _13 = v[28]
									// rule #592
									// source: well-formedness.k @295
									// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`_,_=create_(_)send__IELE-COMMON`(STATUS,RET,NAME,ARGS,OP1)=>checkLVals(lvalueList(STATUS,lvalueList(RET,`.List{"lvalueList"}`(.KList))))~>checkOperands(operandList(OP1,ARGS))``~>DotVar1),_7,_8,_9,_10,_11,`<well-formedness>`(_4,_5,_6,`<currentContract>`(_0,_1,`<declaredContracts>`(_14),_2,_3)),_12,_13) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_14),#match(DotVar4,`Set:difference`(_14,`SetItem`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))) ensures #token("true","Bool") [UNIQUE_ID(e958e3e77b6e82a4bb267296458f1c6d75fdaae280b8a012849fb0a60c533393) contentStartColumn(10) contentStartLine(295) org.kframework.attributes.Location(Location(295,10,296,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// LOOKUPS
										if guard < 5 {
											// lookup:#setChoice(NAME,_14)
											setChoice0Eval := v[24] /*_14*/
											setChoice0Obj, setChoice0TypeOk := i.Model.GetSetObject(setChoice0Eval)
											if !setChoice0TypeOk {
												return i.stepLookups(c, config, 5) // reapply
											}
											var setChoice0Result m.KReference = m.InternedBottom
											for setChoice0Key := range setChoice0Obj.Data {
												var setChoice0Err error
												setChoice0Elem, setChoice0Err := i.Model.ToKItem(setChoice0Key)
												if setChoice0Err != nil {
													return m.NoResult, setChoice0Err
												}
												if i.Model.Equals(setChoice0Elem, v[8] /*NAME*/) { // lhs KVariable, which reappears:NAME
													setChoice0Result, setChoice0Err = func() (m.KReference, error) {
														// lookup:#match(DotVar4,`Set:difference`(_14,`SetItem`(NAME)))
														v[30], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
															v[8] /*NAME*/,
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[29], i.evalErr = i.evalSetXcolondifference( // `Set:difference`(_14,`SetItem`(NAME))
															v[24] /*_14*/,
															v[30],
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[31] = v[29]
														if v[31] == m.InternedBottom {
															return i.stepLookups(c, config, 5) // reapply
														}
														if v[31]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
															v[32 /*DotVar4*/] = v[31] // DotVar4
															// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1)))
															v[33], i.evalErr = i.evalIsLValue( // isLValue(RET)
																v[7] /*RET*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															// `_andBool_`(isLValue(RET),isIeleName(NAME))
															bv[3] = m.IsTrue(v[33])
															if bv[3] {
																v[34], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																	v[8] /*NAME*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[3] = m.IsTrue(v[34])
															}
															// `_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS))
															bv[2] = bv[3]
															if bv[2] {
																v[35], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																	v[6] /*STATUS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[2] = m.IsTrue(v[35])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS)),isOperands(ARGS))
															bv[1] = bv[2]
															if bv[1] {
																v[36], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																	v[9] /*ARGS*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[1] = m.IsTrue(v[36])
															}
															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(RET),isIeleName(NAME)),isLValue(STATUS)),isOperands(ARGS)),isOperand(OP1))
															bv[0] = bv[1]
															if bv[0] {
																v[37], i.evalErr = i.evalIsOperand( // isOperand(OP1)
																	v[10] /*OP1*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																bv[0] = m.IsTrue(v[37])
															}
															if /* rhs precomputed lookup #setChoice && lookup #match */ /* && */ bv[0] {
																// RHS
																return i.stepRHS592(v, bv, config)
															}
														} else {
															return i.stepLookups(c, config, 5) // reapply
														}

														return m.InternedBottom, nil // #setChoice end
													}()
													if setChoice0Err != nil {
														return m.NoResult, setChoice0Err
													}

												}
											}
											if setChoice0Result == m.InternedBottom {
												return i.stepLookups(c, config, 5) // reapply
											}
											return setChoice0Result, nil

										}
									}
								}
							}
						}
					}
					// rule: 618
					if v[4]&kapplyMatchMask == kapplyMatchLblBrXuXuIELEXhyphenCOMMON1 { // `br__IELE-COMMON`(NAME)
						v[6] = i.Model.KApplyArg(v[4], 0)
						// KVariable NAME = v[6]
						// KVariable DotVar1 = v[5]
						v[7] = i.Model.KApplyArg(c, 1)
						// KVariable _9 = v[7]
						v[8] = i.Model.KApplyArg(c, 2)
						// KVariable _10 = v[8]
						v[9] = i.Model.KApplyArg(c, 3)
						// KVariable _11 = v[9]
						v[10] = i.Model.KApplyArg(c, 4)
						// KVariable _12 = v[10]
						v[11] = i.Model.KApplyArg(c, 5)
						// KVariable _13 = v[11]
						v[12] = i.Model.KApplyArg(c, 6)
						if v[12]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1)))
							v[13] = i.Model.KApplyArg(v[12], 0)
							// KVariable _6 = v[13]
							v[14] = i.Model.KApplyArg(v[12], 1)
							// KVariable _7 = v[14]
							v[15] = i.Model.KApplyArg(v[12], 2)
							// KVariable _8 = v[15]
							v[16] = i.Model.KApplyArg(v[12], 3)
							if v[16]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))
								v[17] = i.Model.KApplyArg(v[16], 0)
								// KVariable _2 = v[17]
								v[18] = i.Model.KApplyArg(v[16], 1)
								// KVariable _3 = v[18]
								v[19] = i.Model.KApplyArg(v[16], 2)
								// KVariable _4 = v[19]
								v[20] = i.Model.KApplyArg(v[16], 3)
								// KVariable _5 = v[20]
								v[21] = i.Model.KApplyArg(v[16], 4)
								if v[21]&kapplyMatchMask == kapplyMatchLblXltcurrentFunctionXgt3 { // `<currentFunction>`(_0,`<labels>`(_16),_1)
									v[22] = i.Model.KApplyArg(v[21], 0)
									// KVariable _0 = v[22]
									v[23] = i.Model.KApplyArg(v[21], 1)
									if v[23]&kapplyMatchMask == kapplyMatchLblXltlabelsXgt1 { // `<labels>`(_16)
										v[24] = i.Model.KApplyArg(v[23], 0)
										// KVariable _16 = v[24]
										v[25] = i.Model.KApplyArg(v[21], 2)
										// KVariable _1 = v[25]
										v[26] = i.Model.KApplyArg(c, 7)
										// KVariable _14 = v[26]
										v[27] = i.Model.KApplyArg(c, 8)
										// KVariable _15 = v[27]
										// rule #618
										// source: well-formedness.k @251
										// {| rule `<generatedTop>`(`<k>`(`` `check_IELE-WELL-FORMEDNESS`(.KList)~>`br__IELE-COMMON`(NAME)=>.K``~>DotVar1),_9,_10,_11,_12,_13,`<well-formedness>`(_6,_7,_8,`<currentContract>`(_2,_3,_4,_5,`<currentFunction>`(_0,`<labels>`(_16),_1))),_14,_15) requires `_andBool_`(`_andBool_`(#setChoice(NAME,_16),#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))),isIeleName(NAME)) ensures #token("true","Bool") [UNIQUE_ID(4567ee1de3a9f92d3216645c90e1fd4d672503267db9f77c7c5e71849676d973) contentStartColumn(10) contentStartLine(251) org.kframework.attributes.Location(Location(251,10,252,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
										if !matched {
											// LOOKUPS
											if guard < 6 {
												// lookup:#setChoice(NAME,_16)
												setChoice0Eval := v[24] /*_16*/
												setChoice0Obj, setChoice0TypeOk := i.Model.GetSetObject(setChoice0Eval)
												if !setChoice0TypeOk {
													return i.stepLookups(c, config, 6) // reapply
												}
												var setChoice0Result m.KReference = m.InternedBottom
												for setChoice0Key := range setChoice0Obj.Data {
													var setChoice0Err error
													setChoice0Elem, setChoice0Err := i.Model.ToKItem(setChoice0Key)
													if setChoice0Err != nil {
														return m.NoResult, setChoice0Err
													}
													if i.Model.Equals(setChoice0Elem, v[6] /*NAME*/) { // lhs KVariable, which reappears:NAME
														setChoice0Result, setChoice0Err = func() (m.KReference, error) {
															// lookup:#match(DotVar5,`Set:difference`(_16,`SetItem`(NAME)))
															v[29], i.evalErr = i.evalSetItem( // `SetItem`(NAME)
																v[6] /*NAME*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[28], i.evalErr = i.evalSetXcolondifference( // `Set:difference`(_16,`SetItem`(NAME))
																v[24] /*_16*/,
																v[29],
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[30] = v[28]
															if v[30] == m.InternedBottom {
																return i.stepLookups(c, config, 6) // reapply
															}
															if v[30]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																v[31 /*DotVar5*/] = v[30] // DotVar5
																// REQUIRES `_andBool_`(#token("true","Bool"),isIeleName(NAME))
																v[32], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																	v[6] /*NAME*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																if /* rhs precomputed lookup #setChoice && lookup #match */ /* && */ m.IsTrue(v[32]) {
																	// RHS
																	return i.stepRHS618(v, bv, config)
																}
															} else {
																return i.stepLookups(c, config, 6) // reapply
															}

															return m.InternedBottom, nil // #setChoice end
														}()
														if setChoice0Err != nil {
															return m.NoResult, setChoice0Err
														}

													}
												}
												if setChoice0Result == m.InternedBottom {
													return i.stepLookups(c, config, 6) // reapply
												}
												return setChoice0Result, nil

											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 575
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckCreateXuXuXuIELE2 { // `#checkCreate___IELE`(ACCT,VALUE)
					v[6] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[7]
							if v[4]&kapplyMatchMask == kapplyMatchLblXhashcreateXuXuXuXuXuXuXuIELE6 { // `#create_______IELE`(_400,_401,GAVAIL,_402,_403,_404)
								v[8] = i.Model.KApplyArg(v[4], 0)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable _400 = v[8]
									v[9] = i.Model.KApplyArg(v[4], 1)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _401 = v[9]
										v[10] = i.Model.KApplyArg(v[4], 2)
										if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable GAVAIL = v[10]
											v[11] = i.Model.KApplyArg(v[4], 3)
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable _402 = v[11]
												v[12] = i.Model.KApplyArg(v[4], 4)
												// KVariable _403 = v[12]
												v[13] = i.Model.KApplyArg(v[4], 5)
												// KVariable _404 = v[13]
												// KVariable DotVar1 = v[5]
												v[14] = i.Model.KApplyArg(c, 1)
												if v[14]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
													v[15] = i.Model.KApplyArg(v[14], 0)
													if v[15]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
														_, v[16], v[17] = i.Model.KSequenceSplitHeadTail(v[15]) // #applyRule(#token("regular","#RuleTag")) ~> ...
														if v[16]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
															v[18] = i.Model.KApplyArg(v[16], 0)
															if i.Model.Equals(v[18], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																// KVariable SREST = v[17]
																v[19] = i.Model.KApplyArg(c, 2)
																// KVariable _35 = v[19]
																v[20] = i.Model.KApplyArg(c, 3)
																// KVariable _36 = v[20]
																v[21] = i.Model.KApplyArg(c, 4)
																// KVariable _37 = v[21]
																v[22] = i.Model.KApplyArg(c, 5)
																// KVariable _38 = v[22]
																v[23] = i.Model.KApplyArg(c, 6)
																// KVariable _39 = v[23]
																v[24] = i.Model.KApplyArg(c, 7)
																if v[24]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_405),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
																	v[25] = i.Model.KApplyArg(v[24], 0)
																	if v[25]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_405)
																		v[26] = i.Model.KApplyArg(v[25], 0)
																		// KVariable _405 = v[26]
																		v[27] = i.Model.KApplyArg(v[24], 1)
																		// KVariable _14 = v[27]
																		v[28] = i.Model.KApplyArg(v[24], 2)
																		// KVariable _15 = v[28]
																		v[29] = i.Model.KApplyArg(v[24], 3)
																		// KVariable _16 = v[29]
																		v[30] = i.Model.KApplyArg(v[24], 4)
																		if v[30]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																			v[31] = i.Model.KApplyArg(v[30], 0)
																			// KVariable _0 = v[31]
																			v[32] = i.Model.KApplyArg(v[30], 1)
																			if v[32]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
																				v[33] = i.Model.KApplyArg(v[32], 0)
																				if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable CD = v[33]
																					v[34] = i.Model.KApplyArg(v[30], 2)
																					// KVariable _1 = v[34]
																					v[35] = i.Model.KApplyArg(v[30], 3)
																					// KVariable _2 = v[35]
																					v[36] = i.Model.KApplyArg(v[30], 4)
																					// KVariable _3 = v[36]
																					v[37] = i.Model.KApplyArg(v[30], 5)
																					// KVariable _4 = v[37]
																					v[38] = i.Model.KApplyArg(v[30], 6)
																					// KVariable _5 = v[38]
																					v[39] = i.Model.KApplyArg(v[30], 7)
																					// KVariable _6 = v[39]
																					v[40] = i.Model.KApplyArg(v[30], 8)
																					// KVariable _7 = v[40]
																					v[41] = i.Model.KApplyArg(v[30], 9)
																					// KVariable _8 = v[41]
																					v[42] = i.Model.KApplyArg(v[30], 10)
																					// KVariable _9 = v[42]
																					v[43] = i.Model.KApplyArg(v[30], 11)
																					// KVariable _10 = v[43]
																					v[44] = i.Model.KApplyArg(v[30], 12)
																					// KVariable _11 = v[44]
																					v[45] = i.Model.KApplyArg(v[30], 13)
																					// KVariable _12 = v[45]
																					v[46] = i.Model.KApplyArg(v[30], 14)
																					// KVariable _13 = v[46]
																					v[47] = i.Model.KApplyArg(v[24], 5)
																					// KVariable _17 = v[47]
																					v[48] = i.Model.KApplyArg(v[24], 6)
																					// KVariable _18 = v[48]
																					v[49] = i.Model.KApplyArg(v[24], 7)
																					// KVariable _19 = v[49]
																					v[50] = i.Model.KApplyArg(v[24], 8)
																					// KVariable _20 = v[50]
																					v[51] = i.Model.KApplyArg(v[24], 9)
																					// KVariable _21 = v[51]
																					v[52] = i.Model.KApplyArg(v[24], 10)
																					// KVariable _22 = v[52]
																					v[53] = i.Model.KApplyArg(v[24], 11)
																					// KVariable _23 = v[53]
																					v[54] = i.Model.KApplyArg(v[24], 12)
																					// KVariable _24 = v[54]
																					v[55] = i.Model.KApplyArg(v[24], 13)
																					// KVariable _25 = v[55]
																					v[56] = i.Model.KApplyArg(v[24], 14)
																					// KVariable _26 = v[56]
																					v[57] = i.Model.KApplyArg(c, 8)
																					if v[57]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_31,`<accounts>`(_40),_32,_33,_34)
																						v[58] = i.Model.KApplyArg(v[57], 0)
																						// KVariable _31 = v[58]
																						v[59] = i.Model.KApplyArg(v[57], 1)
																						if v[59]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_40)
																							v[60] = i.Model.KApplyArg(v[59], 0)
																							// KVariable _40 = v[60]
																							v[61] = i.Model.KApplyArg(v[57], 2)
																							// KVariable _32 = v[61]
																							v[62] = i.Model.KApplyArg(v[57], 3)
																							// KVariable _33 = v[62]
																							v[63] = i.Model.KApplyArg(v[57], 4)
																							// KVariable _34 = v[63]
																							// rule #575
																							// source: iele.k @1353
																							// {| rule `<generatedTop>`(`<k>`(`` `#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(_400,_401,GAVAIL,_402,_403,_404)=>`#refund__IELE`(GAVAIL)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token("7","Int"),#token("8","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(`<output>`(_405=>`.List{"operandList"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_40),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_400),isInt(_401)),isInt(BAL)),isInt(VALUE)),isInt(ACCT)),isContract(_403)),isInts(_404)),isInt(_402)),isInt(CD)),isInt(GAVAIL)),isInts(_405)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(f8ef358095a90a619a839fb7c482da85406255da8793902e151fbb8209f44adb) contentStartColumn(10) contentStartLine(1353) org.kframework.attributes.Location(Location(1353,10,1361,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																							if !matched {
																								// LOOKUPS
																								if guard < 7 {
																									// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT)))
																									v[64], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_40,`<acctID>`(ACCT))
																										v[60] /*_40*/,
																										i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																											v[6] /*ACCT*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[65] = v[64]
																									if v[65] == m.InternedBottom {
																										return i.stepLookups(c, config, 7) // reapply
																									}
																									if v[65]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30)
																										v[66] = i.Model.KApplyArg(v[65], 0)
																										if v[66]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																											v[67] = i.Model.KApplyArg(v[66], 0)
																											if i.Model.Equals(v[67], v[6] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																												v[68] = i.Model.KApplyArg(v[65], 1)
																												if v[68]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																													v[69] = i.Model.KApplyArg(v[68], 0)
																													if i.tempTypeVar = v[69] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																														v[70 /*BAL*/] = v[69] // BAL
																														v[71] = i.Model.KApplyArg(v[65], 2)
																														v[72 /*_27*/] = v[71] // lhs KVariable _27
																														v[73] = i.Model.KApplyArg(v[65], 3)
																														v[74 /*_28*/] = v[73] // lhs KVariable _28
																														v[75] = i.Model.KApplyArg(v[65], 4)
																														v[76 /*_29*/] = v[75] // lhs KVariable _29
																														v[77] = i.Model.KApplyArg(v[65], 5)
																														v[78 /*_30*/] = v[77] // lhs KVariable _30
																														// lookup:#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))
																														v[79], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_40,`<acctID>`(ACCT))
																															v[60] /*_40*/,
																															i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																v[6] /*ACCT*/,
																															),
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														v[80] = v[79]
																														if v[80] == m.InternedBottom {
																															return i.stepLookups(c, config, 7) // reapply
																														}
																														if v[80]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																															v[81 /*DotVar5*/] = v[80] // DotVar5
																															// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),#token("true","Bool")),isContract(_403)),isInts(_404)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isInts(_405)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))))
																															v[82], i.evalErr = i.evalIsInt( // isInt(BAL)
																																v[70 /*BAL*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),#token("true","Bool")),isContract(_403))
																															bv[3] = /* rhs precomputed isInt(_400) && isInt(_401) */ /* && */ m.IsTrue(v[82]) /* && */ /* rhs precomputed isInt(VALUE) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																															if bv[3] {
																																v[83], i.evalErr = i.evalIsContract( // isContract(_403)
																																	v[12] /*_403*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[3] = m.IsTrue(v[83])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),#token("true","Bool")),isContract(_403)),isInts(_404))
																															bv[2] = bv[3]
																															if bv[2] {
																																v[84], i.evalErr = i.evalIsInts( // isInts(_404)
																																	v[13] /*_404*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[2] = m.IsTrue(v[84])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),#token("true","Bool")),isContract(_403)),isInts(_404)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isInts(_405))
																															bv[1] = bv[2] /* && */ /* rhs precomputed isInt(_402) */  /* && */ /* rhs precomputed isInt(CD) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ 
																															if bv[1] {
																																v[85], i.evalErr = i.evalIsInts( // isInts(_405)
																																	v[26] /*_405*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																bv[1] = m.IsTrue(v[85])
																															}
																															// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),#token("true","Bool")),isContract(_403)),isInts(_404)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isInts(_405)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int"))))
																															bv[0] = bv[1]
																															if bv[0] {
																																v[86], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
																																	v[7] /*VALUE*/,
																																	v[70 /*BAL*/],
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																// `_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))
																																bv[4] = m.IsTrue(v[86])
																																if !bv[4] {
																																	v[87], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(CD,#token("1024","Int"))
																																		v[33] /*CD*/,
																																		/* rhs KToken */ constInt1024,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[4] = m.IsTrue(v[87])
																																}
																																bv[0] = bv[4]
																															}
																															if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																																// RHS
																																return i.stepRHS575(v, bv, config)
																															}
																														} else {
																															return i.stepLookups(c, config, 7) // reapply
																														}
																													}
																												}
																											}
																										}
																									} else {
																										return i.stepLookups(c, config, 7) // reapply
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 604, 623
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexecXuXuIELEXhyphenINFRASTRUCTURE1 { // `#exec__IELE-INFRASTRUCTURE`(`br_,__IELE-COMMON`(I,LABEL))
					v[6] = i.Model.KApplyArg(v[2], 0)
					// rule: 604
					if v[6]&kapplyMatchMask == kapplyMatchLblBrXuXcommaXuXuIELEXhyphenCOMMON2 { // `br_,__IELE-COMMON`(I,LABEL)
						v[7] = i.Model.KApplyArg(v[6], 0)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable I = v[7]
							v[8] = i.Model.KApplyArg(v[6], 1)
							// KVariable LABEL = v[8]
							// KVariable _307 = v[4]
							// KVariable DotVar1 = v[5]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _36 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _37 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _38 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _39 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _21 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _22 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _23 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _24 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20)
													v[25] = i.Model.KApplyArg(v[24], 0)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_42),_3,_4,_5,_6,_7)
														v[26] = i.Model.KApplyArg(v[25], 0)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_42)
															v[27] = i.Model.KApplyArg(v[26], 0)
															// KVariable _42 = v[27]
															v[28] = i.Model.KApplyArg(v[25], 1)
															// KVariable _3 = v[28]
															v[29] = i.Model.KApplyArg(v[25], 2)
															// KVariable _4 = v[29]
															v[30] = i.Model.KApplyArg(v[25], 3)
															// KVariable _5 = v[30]
															v[31] = i.Model.KApplyArg(v[25], 4)
															// KVariable _6 = v[31]
															v[32] = i.Model.KApplyArg(v[25], 5)
															// KVariable _7 = v[32]
															v[33] = i.Model.KApplyArg(v[24], 1)
															// KVariable _8 = v[33]
															v[34] = i.Model.KApplyArg(v[24], 2)
															// KVariable _9 = v[34]
															v[35] = i.Model.KApplyArg(v[24], 3)
															// KVariable _10 = v[35]
															v[36] = i.Model.KApplyArg(v[24], 4)
															// KVariable _11 = v[36]
															v[37] = i.Model.KApplyArg(v[24], 5)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[24], 6)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[24], 7)
															// KVariable _14 = v[39]
															v[40] = i.Model.KApplyArg(v[24], 8)
															// KVariable _15 = v[40]
															v[41] = i.Model.KApplyArg(v[24], 9)
															// KVariable _16 = v[41]
															v[42] = i.Model.KApplyArg(v[24], 10)
															// KVariable _17 = v[42]
															v[43] = i.Model.KApplyArg(v[24], 11)
															if v[43]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(FUNC)
																v[44] = i.Model.KApplyArg(v[43], 0)
																// KVariable FUNC = v[44]
																v[45] = i.Model.KApplyArg(v[24], 12)
																// KVariable _18 = v[45]
																v[46] = i.Model.KApplyArg(v[24], 13)
																// KVariable _19 = v[46]
																v[47] = i.Model.KApplyArg(v[24], 14)
																// KVariable _20 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 5)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 6)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 7)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(v[19], 8)
																// KVariable _28 = v[51]
																v[52] = i.Model.KApplyArg(v[19], 9)
																// KVariable _29 = v[52]
																v[53] = i.Model.KApplyArg(v[19], 10)
																// KVariable _30 = v[53]
																v[54] = i.Model.KApplyArg(v[19], 11)
																// KVariable _31 = v[54]
																v[55] = i.Model.KApplyArg(v[19], 12)
																// KVariable _32 = v[55]
																v[56] = i.Model.KApplyArg(v[19], 13)
																// KVariable _33 = v[56]
																v[57] = i.Model.KApplyArg(v[19], 14)
																// KVariable _34 = v[57]
																v[58] = i.Model.KApplyArg(c, 8)
																// KVariable _40 = v[58]
																// rule #604
																// source: iele.k @951
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br_,__IELE-COMMON`(I,LABEL))~>_307=>CODE``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))),#match(CODE,`Map:lookup`(_41,LABEL))),#match(DotVar7,`_[_<-undef]`(_41,LABEL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(I),isKItem(CODE)),isIeleName(LABEL)),isBlocks(_307)),isIeleName(FUNC)),`_=/=K_`(I,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(29e8d48ac8b7e10576a511699704d91a1b447037dfe3c999533e924fb531d82d) contentStartColumn(10) contentStartLine(951) org.kframework.attributes.Location(Location(951,10,951,195)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 8 {
																		// lookup:#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC)))
																		v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<funcId>`(FUNC))
																			v[27] /*_42*/,
																			i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																				v[44] /*FUNC*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[60] = v[59]
																		if v[60] == m.InternedBottom {
																			return i.stepLookups(c, config, 8) // reapply
																		}
																		if v[60]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2)
																			v[61] = i.Model.KApplyArg(v[60], 0)
																			if v[61]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(FUNC)
																				v[62] = i.Model.KApplyArg(v[61], 0)
																				if i.Model.Equals(v[62], v[44] /*FUNC*/) { // lhs KVariable, which reappears:FUNC
																					v[63] = i.Model.KApplyArg(v[60], 1)
																					v[64 /*_0*/] = v[63] // lhs KVariable _0
																					v[65] = i.Model.KApplyArg(v[60], 2)
																					v[66 /*_1*/] = v[65] // lhs KVariable _1
																					v[67] = i.Model.KApplyArg(v[60], 3)
																					if v[67]&kapplyMatchMask == kapplyMatchLblXltjumpTableXgt1 { // `<jumpTable>`(_41)
																						v[68] = i.Model.KApplyArg(v[67], 0)
																						v[69 /*_41*/] = v[68] // lhs KVariable _41
																						v[70] = i.Model.KApplyArg(v[60], 4)
																						v[71 /*_2*/] = v[70] // lhs KVariable _2
																						// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))
																						v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<funcId>`(FUNC))
																							v[27] /*_42*/,
																							i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																								v[44] /*FUNC*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[73] = v[72]
																						if v[73] == m.InternedBottom {
																							return i.stepLookups(c, config, 8) // reapply
																						}
																						if v[73]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																							v[74 /*DotVar5*/] = v[73] // DotVar5
																							// lookup:#match(CODE,`Map:lookup`(_41,LABEL))
																							v[75], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,LABEL)
																								v[69 /*_41*/],
																								v[8] /*LABEL*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[76] = v[75]
																							if v[76] == m.InternedBottom {
																								return i.stepLookups(c, config, 8) // reapply
																							}
																							v[77 /*CODE*/] = v[76] // lhs KVariable CODE
																							// lookup:#match(DotVar7,`_[_<-undef]`(_41,LABEL))
																							v[78], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,LABEL)
																								v[69 /*_41*/],
																								v[8] /*LABEL*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[79] = v[78]
																							if v[79] == m.InternedBottom {
																								return i.stepLookups(c, config, 8) // reapply
																							}
																							if v[79]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																								v[80 /*DotVar7*/] = v[79] // DotVar7
																								// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),isBlocks(_307)),isIeleName(FUNC)),`_=/=K_`(I,#token("0","Int"))))
																								v[81], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																									v[8] /*LABEL*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),isBlocks(_307))
																								bv[2] = /* rhs precomputed isInt(I) && isKItem */ /* && */ m.IsTrue(v[81])
																								if bv[2] {
																									v[82], i.evalErr = i.evalIsBlocks( // isBlocks(_307)
																										v[4] /*_307*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[2] = m.IsTrue(v[82])
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),isBlocks(_307)),isIeleName(FUNC))
																								bv[1] = bv[2]
																								if bv[1] {
																									v[83], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																										v[44] /*FUNC*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[1] = m.IsTrue(v[83])
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),isBlocks(_307)),isIeleName(FUNC)),`_=/=K_`(I,#token("0","Int")))
																								bv[0] = bv[1]
																								if bv[0] {
																									v[84], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(I,#token("0","Int"))
																										v[7] /*I*/,
																										/* rhs KToken */ m.IntZero,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[0] = m.IsTrue(v[84])
																								}
																								if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																									// RHS
																									return i.stepRHS604(v, bv, config)
																								}
																							} else {
																								return i.stepLookups(c, config, 8) // reapply
																							}
																						} else {
																							return i.stepLookups(c, config, 8) // reapply
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 8) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 623
					if v[6]&kapplyMatchMask == kapplyMatchLblBrXuXuIELEXhyphenCOMMON1 { // `br__IELE-COMMON`(LABEL)
						v[7] = i.Model.KApplyArg(v[6], 0)
						// KVariable LABEL = v[7]
						// KVariable _406 = v[4]
						// KVariable DotVar1 = v[5]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _35 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _36 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _37 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _38 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _39 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _21 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _22 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _23 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _24 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20)
												v[24] = i.Model.KApplyArg(v[23], 0)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_42),_3,_4,_5,_6,_7)
													v[25] = i.Model.KApplyArg(v[24], 0)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_42)
														v[26] = i.Model.KApplyArg(v[25], 0)
														// KVariable _42 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 1)
														// KVariable _3 = v[27]
														v[28] = i.Model.KApplyArg(v[24], 2)
														// KVariable _4 = v[28]
														v[29] = i.Model.KApplyArg(v[24], 3)
														// KVariable _5 = v[29]
														v[30] = i.Model.KApplyArg(v[24], 4)
														// KVariable _6 = v[30]
														v[31] = i.Model.KApplyArg(v[24], 5)
														// KVariable _7 = v[31]
														v[32] = i.Model.KApplyArg(v[23], 1)
														// KVariable _8 = v[32]
														v[33] = i.Model.KApplyArg(v[23], 2)
														// KVariable _9 = v[33]
														v[34] = i.Model.KApplyArg(v[23], 3)
														// KVariable _10 = v[34]
														v[35] = i.Model.KApplyArg(v[23], 4)
														// KVariable _11 = v[35]
														v[36] = i.Model.KApplyArg(v[23], 5)
														// KVariable _12 = v[36]
														v[37] = i.Model.KApplyArg(v[23], 6)
														// KVariable _13 = v[37]
														v[38] = i.Model.KApplyArg(v[23], 7)
														// KVariable _14 = v[38]
														v[39] = i.Model.KApplyArg(v[23], 8)
														// KVariable _15 = v[39]
														v[40] = i.Model.KApplyArg(v[23], 9)
														// KVariable _16 = v[40]
														v[41] = i.Model.KApplyArg(v[23], 10)
														// KVariable _17 = v[41]
														v[42] = i.Model.KApplyArg(v[23], 11)
														if v[42]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(FUNC)
															v[43] = i.Model.KApplyArg(v[42], 0)
															// KVariable FUNC = v[43]
															v[44] = i.Model.KApplyArg(v[23], 12)
															// KVariable _18 = v[44]
															v[45] = i.Model.KApplyArg(v[23], 13)
															// KVariable _19 = v[45]
															v[46] = i.Model.KApplyArg(v[23], 14)
															// KVariable _20 = v[46]
															v[47] = i.Model.KApplyArg(v[18], 5)
															// KVariable _25 = v[47]
															v[48] = i.Model.KApplyArg(v[18], 6)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[18], 7)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(v[18], 8)
															// KVariable _28 = v[50]
															v[51] = i.Model.KApplyArg(v[18], 9)
															// KVariable _29 = v[51]
															v[52] = i.Model.KApplyArg(v[18], 10)
															// KVariable _30 = v[52]
															v[53] = i.Model.KApplyArg(v[18], 11)
															// KVariable _31 = v[53]
															v[54] = i.Model.KApplyArg(v[18], 12)
															// KVariable _32 = v[54]
															v[55] = i.Model.KApplyArg(v[18], 13)
															// KVariable _33 = v[55]
															v[56] = i.Model.KApplyArg(v[18], 14)
															// KVariable _34 = v[56]
															v[57] = i.Model.KApplyArg(c, 8)
															// KVariable _40 = v[57]
															// rule #623
															// source: iele.k @949
															// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`br__IELE-COMMON`(LABEL))~>_406=>CODE``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))),#match(CODE,`Map:lookup`(_41,LABEL))),#match(DotVar7,`_[_<-undef]`(_41,LABEL))),`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_406),isKItem(CODE)),isIeleName(LABEL)),isIeleName(FUNC))) ensures #token("true","Bool") [UNIQUE_ID(73e99a939dc32e262b518e10f36bd8bc86c282ed35f00aaba68e19ef8e78da07) contentStartColumn(10) contentStartLine(949) org.kframework.attributes.Location(Location(949,10,949,169)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// LOOKUPS
																if guard < 9 {
																	// lookup:#match(`<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2),`Map:lookup`(_42,`<funcId>`(FUNC)))
																	v[58], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<funcId>`(FUNC))
																		v[26] /*_42*/,
																		i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																			v[43] /*FUNC*/,
																		),
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[59] = v[58]
																	if v[59] == m.InternedBottom {
																		return i.stepLookups(c, config, 9) // reapply
																	}
																	if v[59]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(FUNC),_0,_1,`<jumpTable>`(_41),_2)
																		v[60] = i.Model.KApplyArg(v[59], 0)
																		if v[60]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(FUNC)
																			v[61] = i.Model.KApplyArg(v[60], 0)
																			if i.Model.Equals(v[61], v[43] /*FUNC*/) { // lhs KVariable, which reappears:FUNC
																				v[62] = i.Model.KApplyArg(v[59], 1)
																				v[63 /*_0*/] = v[62] // lhs KVariable _0
																				v[64] = i.Model.KApplyArg(v[59], 2)
																				v[65 /*_1*/] = v[64] // lhs KVariable _1
																				v[66] = i.Model.KApplyArg(v[59], 3)
																				if v[66]&kapplyMatchMask == kapplyMatchLblXltjumpTableXgt1 { // `<jumpTable>`(_41)
																					v[67] = i.Model.KApplyArg(v[66], 0)
																					v[68 /*_41*/] = v[67] // lhs KVariable _41
																					v[69] = i.Model.KApplyArg(v[59], 4)
																					v[70 /*_2*/] = v[69] // lhs KVariable _2
																					// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(FUNC)))
																					v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<funcId>`(FUNC))
																						v[26] /*_42*/,
																						i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																							v[43] /*FUNC*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[72] = v[71]
																					if v[72] == m.InternedBottom {
																						return i.stepLookups(c, config, 9) // reapply
																					}
																					if v[72]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																						v[73 /*DotVar5*/] = v[72] // DotVar5
																						// lookup:#match(CODE,`Map:lookup`(_41,LABEL))
																						v[74], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,LABEL)
																							v[68 /*_41*/],
																							v[7] /*LABEL*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[75] = v[74]
																						if v[75] == m.InternedBottom {
																							return i.stepLookups(c, config, 9) // reapply
																						}
																						v[76 /*CODE*/] = v[75] // lhs KVariable CODE
																						// lookup:#match(DotVar7,`_[_<-undef]`(_41,LABEL))
																						v[77], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,LABEL)
																							v[68 /*_41*/],
																							v[7] /*LABEL*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[78] = v[77]
																						if v[78] == m.InternedBottom {
																							return i.stepLookups(c, config, 9) // reapply
																						}
																						if v[78]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																							v[79 /*DotVar7*/] = v[78] // DotVar7
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_406),#token("true","Bool")),isIeleName(LABEL)),isIeleName(FUNC)))
																							v[80], i.evalErr = i.evalIsBlocks( // isBlocks(_406)
																								v[4] /*_406*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_andBool_`(isBlocks(_406),#token("true","Bool")),isIeleName(LABEL))
																							bv[1] = m.IsTrue(v[80]) /* && */ /* rhs precomputed isKItem */ 
																							if bv[1] {
																								v[81], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																									v[7] /*LABEL*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[81])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(isBlocks(_406),#token("true","Bool")),isIeleName(LABEL)),isIeleName(FUNC))
																							bv[0] = bv[1]
																							if bv[0] {
																								v[82], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																									v[43] /*FUNC*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = m.IsTrue(v[82])
																							}
																							if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS623(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 9) // reapply
																						}
																					} else {
																						return i.stepLookups(c, config, 9) // reapply
																					}
																				}
																			}
																		}
																	} else {
																		return i.stepLookups(c, config, 9) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 613
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckCallXuXuXuXuIELE3 { // `#checkCall____IELE`(ACCT,VALUE,GCAP)
					v[6] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[7]
							v[8] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GCAP = v[8]
								if v[4]&kapplyMatchMask == kapplyMatchLblXhashcallXuXuXuXuXuXuXuXuIELE7 { // `#call________IELE`(_333,_334,_335,GLIMIT,_336,_337,_338)
									v[9] = i.Model.KApplyArg(v[4], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _333 = v[9]
										v[10] = i.Model.KApplyArg(v[4], 1)
										if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable _334 = v[10]
											v[11] = i.Model.KApplyArg(v[4], 2)
											// KVariable _335 = v[11]
											v[12] = i.Model.KApplyArg(v[4], 3)
											// KVariable GLIMIT = v[12]
											v[13] = i.Model.KApplyArg(v[4], 4)
											if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable _336 = v[13]
												v[14] = i.Model.KApplyArg(v[4], 5)
												// KVariable _337 = v[14]
												v[15] = i.Model.KApplyArg(v[4], 6)
												if v[15]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
													// KVariable _338 = v[15]
													// KVariable DotVar1 = v[5]
													v[16] = i.Model.KApplyArg(c, 1)
													if v[16]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[17] = i.Model.KApplyArg(v[16], 0)
														if v[17]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[18], v[19] = i.Model.KSequenceSplitHeadTail(v[17]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[18]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[20] = i.Model.KApplyArg(v[18], 0)
																if i.Model.Equals(v[20], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[19]
																	v[21] = i.Model.KApplyArg(c, 2)
																	// KVariable _35 = v[21]
																	v[22] = i.Model.KApplyArg(c, 3)
																	// KVariable _36 = v[22]
																	v[23] = i.Model.KApplyArg(c, 4)
																	// KVariable _37 = v[23]
																	v[24] = i.Model.KApplyArg(c, 5)
																	// KVariable _38 = v[24]
																	v[25] = i.Model.KApplyArg(c, 6)
																	// KVariable _39 = v[25]
																	v[26] = i.Model.KApplyArg(c, 7)
																	if v[26]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_339),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
																		v[27] = i.Model.KApplyArg(v[26], 0)
																		if v[27]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_339)
																			v[28] = i.Model.KApplyArg(v[27], 0)
																			// KVariable _339 = v[28]
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			// KVariable _14 = v[29]
																			v[30] = i.Model.KApplyArg(v[26], 2)
																			// KVariable _15 = v[30]
																			v[31] = i.Model.KApplyArg(v[26], 3)
																			// KVariable _16 = v[31]
																			v[32] = i.Model.KApplyArg(v[26], 4)
																			if v[32]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																				v[33] = i.Model.KApplyArg(v[32], 0)
																				// KVariable _0 = v[33]
																				v[34] = i.Model.KApplyArg(v[32], 1)
																				if v[34]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
																					v[35] = i.Model.KApplyArg(v[34], 0)
																					if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						// KVariable CD = v[35]
																						v[36] = i.Model.KApplyArg(v[32], 2)
																						// KVariable _1 = v[36]
																						v[37] = i.Model.KApplyArg(v[32], 3)
																						// KVariable _2 = v[37]
																						v[38] = i.Model.KApplyArg(v[32], 4)
																						// KVariable _3 = v[38]
																						v[39] = i.Model.KApplyArg(v[32], 5)
																						// KVariable _4 = v[39]
																						v[40] = i.Model.KApplyArg(v[32], 6)
																						// KVariable _5 = v[40]
																						v[41] = i.Model.KApplyArg(v[32], 7)
																						// KVariable _6 = v[41]
																						v[42] = i.Model.KApplyArg(v[32], 8)
																						// KVariable _7 = v[42]
																						v[43] = i.Model.KApplyArg(v[32], 9)
																						// KVariable _8 = v[43]
																						v[44] = i.Model.KApplyArg(v[32], 10)
																						// KVariable _9 = v[44]
																						v[45] = i.Model.KApplyArg(v[32], 11)
																						// KVariable _10 = v[45]
																						v[46] = i.Model.KApplyArg(v[32], 12)
																						// KVariable _11 = v[46]
																						v[47] = i.Model.KApplyArg(v[32], 13)
																						// KVariable _12 = v[47]
																						v[48] = i.Model.KApplyArg(v[32], 14)
																						// KVariable _13 = v[48]
																						v[49] = i.Model.KApplyArg(v[26], 5)
																						// KVariable _17 = v[49]
																						v[50] = i.Model.KApplyArg(v[26], 6)
																						// KVariable _18 = v[50]
																						v[51] = i.Model.KApplyArg(v[26], 7)
																						// KVariable _19 = v[51]
																						v[52] = i.Model.KApplyArg(v[26], 8)
																						// KVariable _20 = v[52]
																						v[53] = i.Model.KApplyArg(v[26], 9)
																						// KVariable _21 = v[53]
																						v[54] = i.Model.KApplyArg(v[26], 10)
																						// KVariable _22 = v[54]
																						v[55] = i.Model.KApplyArg(v[26], 11)
																						// KVariable _23 = v[55]
																						v[56] = i.Model.KApplyArg(v[26], 12)
																						// KVariable _24 = v[56]
																						v[57] = i.Model.KApplyArg(v[26], 13)
																						// KVariable _25 = v[57]
																						v[58] = i.Model.KApplyArg(v[26], 14)
																						// KVariable _26 = v[58]
																						v[59] = i.Model.KApplyArg(c, 8)
																						if v[59]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_31,`<accounts>`(_40),_32,_33,_34)
																							v[60] = i.Model.KApplyArg(v[59], 0)
																							// KVariable _31 = v[60]
																							v[61] = i.Model.KApplyArg(v[59], 1)
																							if v[61]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_40)
																								v[62] = i.Model.KApplyArg(v[61], 0)
																								// KVariable _40 = v[62]
																								v[63] = i.Model.KApplyArg(v[59], 2)
																								// KVariable _32 = v[63]
																								v[64] = i.Model.KApplyArg(v[59], 3)
																								// KVariable _33 = v[64]
																								v[65] = i.Model.KApplyArg(v[59], 4)
																								// KVariable _34 = v[65]
																								// rule #613
																								// source: iele.k @1163
																								// {| rule `<generatedTop>`(`<k>`(`` `#checkCall____IELE`(ACCT,VALUE,GCAP)~>`#call________IELE`(_333,_334,_335,GLIMIT,_336,_337,_338)=>`#refund__IELE`(GLIMIT)~>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#exception__IELE-INFRASTRUCTURE`(`#if_#then_#else_#fi_K-EQUAL`(`_>Int__INT`(VALUE,BAL),#token("7","Int"),#token("8","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(`<output>`(_339=>`.List{"operandList"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_40),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInts(_339)),isInt(_336)),isInt(_333)),isInt(CD)),isInt(GCAP)),isInt(_334)),isOperand(GLIMIT)),isInt(BAL)),isInt(ACCT)),isInts(_337)),isBool(_338)),isConstant(_335)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(5af5ce6982efb8891421b62a3be4e7644cca8a27a0a1f1d412ffa56e9489526a) contentStartColumn(10) contentStartLine(1163) org.kframework.attributes.Location(Location(1163,10,1171,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																								if !matched {
																									// LOOKUPS
																									if guard < 10 {
																										// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30),`Map:lookup`(_40,`<acctID>`(ACCT)))
																										v[66], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_40,`<acctID>`(ACCT))
																											v[62] /*_40*/,
																											i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																												v[6] /*ACCT*/,
																											),
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[67] = v[66]
																										if v[67] == m.InternedBottom {
																											return i.stepLookups(c, config, 10) // reapply
																										}
																										if v[67]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_27,_28,_29,_30)
																											v[68] = i.Model.KApplyArg(v[67], 0)
																											if v[68]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																												v[69] = i.Model.KApplyArg(v[68], 0)
																												if i.Model.Equals(v[69], v[6] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																													v[70] = i.Model.KApplyArg(v[67], 1)
																													if v[70]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																														v[71] = i.Model.KApplyArg(v[70], 0)
																														if i.tempTypeVar = v[71] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																															v[72 /*BAL*/] = v[71] // BAL
																															v[73] = i.Model.KApplyArg(v[67], 2)
																															v[74 /*_27*/] = v[73] // lhs KVariable _27
																															v[75] = i.Model.KApplyArg(v[67], 3)
																															v[76 /*_28*/] = v[75] // lhs KVariable _28
																															v[77] = i.Model.KApplyArg(v[67], 4)
																															v[78 /*_29*/] = v[77] // lhs KVariable _29
																															v[79] = i.Model.KApplyArg(v[67], 5)
																															v[80 /*_30*/] = v[79] // lhs KVariable _30
																															// lookup:#match(DotVar5,`_[_<-undef]`(_40,`<acctID>`(ACCT)))
																															v[81], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_40,`<acctID>`(ACCT))
																																v[62] /*_40*/,
																																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																	v[6] /*ACCT*/,
																																),
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															v[82] = v[81]
																															if v[82] == m.InternedBottom {
																																return i.stepLookups(c, config, 10) // reapply
																															}
																															if v[82]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																v[83 /*DotVar5*/] = v[82] // DotVar5
																																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT)),isInt(BAL)),#token("true","Bool")),isInts(_337)),#token("true","Bool")),isConstant(_335)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))))
																																v[84], i.evalErr = i.evalIsInts( // isInts(_339)
																																	v[28] /*_339*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT))
																																bv[4] = /* rhs precomputed isInt(VALUE) */ /* && */ m.IsTrue(v[84]) /* && */ /* rhs precomputed isInt(_336) */  /* && */ /* rhs precomputed isInt(_333) */  /* && */ /* rhs precomputed isInt(CD) */  /* && */ /* rhs precomputed isInt(GCAP) */  /* && */ /* rhs precomputed isInt(_334) */ 
																																if bv[4] {
																																	v[85], i.evalErr = i.evalIsOperand( // isOperand(GLIMIT)
																																		v[12] /*GLIMIT*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[4] = m.IsTrue(v[85])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT)),isInt(BAL))
																																bv[3] = bv[4]
																																if bv[3] {
																																	v[86], i.evalErr = i.evalIsInt( // isInt(BAL)
																																		v[72 /*BAL*/],
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[3] = m.IsTrue(v[86])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT)),isInt(BAL)),#token("true","Bool")),isInts(_337))
																																bv[2] = bv[3] /* && */ /* rhs precomputed isInt(ACCT) */ 
																																if bv[2] {
																																	v[87], i.evalErr = i.evalIsInts( // isInts(_337)
																																		v[14] /*_337*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[2] = m.IsTrue(v[87])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT)),isInt(BAL)),#token("true","Bool")),isInts(_337)),#token("true","Bool")),isConstant(_335))
																																bv[1] = bv[2] /* && */ /* rhs precomputed isBool(_338) */ 
																																if bv[1] {
																																	v[88], i.evalErr = i.evalIsConstant( // isConstant(_335)
																																		v[11] /*_335*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[1] = m.IsTrue(v[88])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_339)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(GLIMIT)),isInt(BAL)),#token("true","Bool")),isInts(_337)),#token("true","Bool")),isConstant(_335)),`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int"))))
																																bv[0] = bv[1]
																																if bv[0] {
																																	v[89], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
																																		v[7] /*VALUE*/,
																																		v[72 /*BAL*/],
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	// `_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))
																																	bv[5] = m.IsTrue(v[89])
																																	if !bv[5] {
																																		v[90], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(CD,#token("1024","Int"))
																																			v[35] /*CD*/,
																																			/* rhs KToken */ constInt1024,
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[5] = m.IsTrue(v[90])
																																	}
																																	bv[0] = bv[5]
																																}
																																if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																																	// RHS
																																	return i.stepRHS613(v, bv, config)
																																}
																															} else {
																																return i.stepLookups(c, config, 10) // reapply
																															}
																														}
																													}
																												}
																											}
																										} else {
																											return i.stepLookups(c, config, 10) // reapply
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			// rules: 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649
			if v[1]>>refTypeShift != refEmptyKseqTypeAsUint { // `#exec__IELE-INFRASTRUCTURE`(`sstore_,__IELE-COMMON`(VALUE,INDEX))~>DotVar1
				_, v[2], v[3] = i.Model.KSequenceSplitHeadTail(v[1]) // `#exec__IELE-INFRASTRUCTURE`(`sstore_,__IELE-COMMON`(VALUE,INDEX)) ~> ...
				// rules: 570, 574, 576, 584, 590, 599, 600, 602, 607, 608, 616, 622, 633, 634, 636, 637, 641, 644, 645, 646
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexecXuXuIELEXhyphenINFRASTRUCTURE1 { // `#exec__IELE-INFRASTRUCTURE`(`sstore_,__IELE-COMMON`(VALUE,INDEX))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 641
					if v[4]&kapplyMatchMask == kapplyMatchLblSstoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `sstore_,__IELE-COMMON`(VALUE,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							// KVariable INDEX = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _37 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _38 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											if v[14]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[15] = i.Model.KApplyArg(v[14], 0)
												// KVariable SCHED = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _39 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _40 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(R)),_20,_21,_22,_23,_24,_25,_26,_27,_28)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _16 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													// KVariable _17 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 2)
													// KVariable _18 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 3)
													// KVariable _19 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 4)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[23], 2)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[23], 3)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
															v[28] = i.Model.KApplyArg(v[27], 0)
															if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable ACCT = v[28]
																v[29] = i.Model.KApplyArg(v[23], 4)
																// KVariable _3 = v[29]
																v[30] = i.Model.KApplyArg(v[23], 5)
																// KVariable _4 = v[30]
																v[31] = i.Model.KApplyArg(v[23], 6)
																// KVariable _5 = v[31]
																v[32] = i.Model.KApplyArg(v[23], 7)
																// KVariable _6 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 8)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 9)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 10)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 11)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 12)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 13)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 14)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[18], 5)
																if v[40]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_14,_15,`<refund>`(R))
																	v[41] = i.Model.KApplyArg(v[40], 0)
																	// KVariable _14 = v[41]
																	v[42] = i.Model.KApplyArg(v[40], 1)
																	// KVariable _15 = v[42]
																	v[43] = i.Model.KApplyArg(v[40], 2)
																	if v[43]&kapplyMatchMask == kapplyMatchLblXltrefundXgt1 { // `<refund>`(R)
																		v[44] = i.Model.KApplyArg(v[43], 0)
																		if i.tempTypeVar = v[44] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable R = v[44]
																			v[45] = i.Model.KApplyArg(v[18], 6)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[18], 7)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[18], 8)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[18], 9)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[18], 10)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[18], 11)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[18], 12)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[18], 13)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(v[18], 14)
																			// KVariable _28 = v[53]
																			v[54] = i.Model.KApplyArg(c, 8)
																			if v[54]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_33,`<accounts>`(_42),_34,_35,_36)
																				v[55] = i.Model.KApplyArg(v[54], 0)
																				// KVariable _33 = v[55]
																				v[56] = i.Model.KApplyArg(v[54], 1)
																				if v[56]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_42)
																					v[57] = i.Model.KApplyArg(v[56], 0)
																					// KVariable _42 = v[57]
																					v[58] = i.Model.KApplyArg(v[54], 2)
																					// KVariable _34 = v[58]
																					v[59] = i.Model.KApplyArg(v[54], 3)
																					// KVariable _35 = v[59]
																					v[60] = i.Model.KApplyArg(v[54], 4)
																					// KVariable _36 = v[60]
																					// rule #641
																					// source: iele.k @1135
																					// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`sstore_,__IELE-COMMON`(VALUE,INDEX))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_37,_38,`<schedule>`(SCHED),_39,_40,`<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(R=>`_+Int_`(R,`_*Int__INT`(`_<_>_IELE-GAS`(`Rsstoreset_IELE-GAS`(.KList),SCHED),`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(intSize(OLD),intSize(VALUE))))))),_20,_21,_22,_23,_24,_25,_26,_27,_28),`<network>`(_33,`<accounts>`(_42=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(`_Map_`(`_|->_`(INDEX,VALUE),DotVar8)),_31,_32)),DotVar6)),_34,_35,_36)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(_41),_31,_32),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar8,`_[_<-undef]`(_41,INDEX))),#match(DotVar6,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(OLD,`Map:lookup`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isInt(R)),isSchedule(SCHED)),isOperand(INDEX)),isInt(OLD))) ensures #token("true","Bool") [UNIQUE_ID(de4e1369f30c0223853d2f3e82b922ecb050b42bbcd0bb4bece2faeb29af787f) contentStartColumn(10) contentStartLine(1135) org.kframework.attributes.Location(Location(1135,10,1143,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																					if !matched {
																						// LOOKUPS
																						if guard < 11 {
																							// lookup:#match(`<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(_41),_31,_32),`Map:lookup`(_42,`<acctID>`(ACCT)))
																							v[61], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<acctID>`(ACCT))
																								v[57] /*_42*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[28] /*ACCT*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[62] = v[61]
																							if v[62] == m.InternedBottom {
																								return i.stepLookups(c, config, 11) // reapply
																							}
																							if v[62]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_29,_30,`<storage>`(_41),_31,_32)
																								v[63] = i.Model.KApplyArg(v[62], 0)
																								if v[63]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																									v[64] = i.Model.KApplyArg(v[63], 0)
																									if i.Model.Equals(v[64], v[28] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																										v[65] = i.Model.KApplyArg(v[62], 1)
																										v[66 /*_29*/] = v[65] // lhs KVariable _29
																										v[67] = i.Model.KApplyArg(v[62], 2)
																										v[68 /*_30*/] = v[67] // lhs KVariable _30
																										v[69] = i.Model.KApplyArg(v[62], 3)
																										if v[69]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_41)
																											v[70] = i.Model.KApplyArg(v[69], 0)
																											v[71 /*_41*/] = v[70] // lhs KVariable _41
																											v[72] = i.Model.KApplyArg(v[62], 4)
																											v[73 /*_31*/] = v[72] // lhs KVariable _31
																											v[74] = i.Model.KApplyArg(v[62], 5)
																											v[75 /*_32*/] = v[74] // lhs KVariable _32
																											// lookup:#match(DotVar8,`_[_<-undef]`(_41,INDEX))
																											v[76], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,INDEX)
																												v[71 /*_41*/],
																												v[6] /*INDEX*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											v[77] = v[76]
																											if v[77] == m.InternedBottom {
																												return i.stepLookups(c, config, 11) // reapply
																											}
																											if v[77]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																												v[78 /*DotVar8*/] = v[77] // DotVar8
																												// lookup:#match(DotVar6,`_[_<-undef]`(_42,`<acctID>`(ACCT)))
																												v[79], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<acctID>`(ACCT))
																													v[57] /*_42*/,
																													i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																														v[28] /*ACCT*/,
																													),
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												v[80] = v[79]
																												if v[80] == m.InternedBottom {
																													return i.stepLookups(c, config, 11) // reapply
																												}
																												if v[80]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																													v[81 /*DotVar6*/] = v[80] // DotVar6
																													// lookup:#match(OLD,`Map:lookup`(_41,INDEX))
																													v[82], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,INDEX)
																														v[71 /*_41*/],
																														v[6] /*INDEX*/,
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													v[83] = v[82]
																													if v[83] == m.InternedBottom {
																														return i.stepLookups(c, config, 11) // reapply
																													}
																													if i.tempTypeVar = v[83] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																														v[84 /*OLD*/] = v[83] // OLD
																														// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isOperand(INDEX)),isInt(OLD)))
																														v[85], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																															v[15] /*SCHED*/,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														// `_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isOperand(INDEX))
																														bv[1] = /* rhs precomputed isInt(VALUE) && isInt(ACCT) && isInt(R) */ /* && */ m.IsTrue(v[85])
																														if bv[1] {
																															v[86], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																																v[6] /*INDEX*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[1] = m.IsTrue(v[86])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),isOperand(INDEX)),isInt(OLD))
																														bv[0] = bv[1]
																														if bv[0] {
																															v[87], i.evalErr = i.evalIsInt( // isInt(OLD)
																																v[84 /*OLD*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[0] = m.IsTrue(v[87])
																														}
																														if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																															// RHS
																															return i.stepRHS641(v, bv, config)
																														}
																													} else {
																														return i.stepLookups(c, config, 11) // reapply
																													}
																												} else {
																													return i.stepLookups(c, config, 11) // reapply
																												}
																											} else {
																												return i.stepLookups(c, config, 11) // reapply
																											}
																										}
																									}
																								}
																							} else {
																								return i.stepLookups(c, config, 11) // reapply
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 599, 600, 616, 634, 644
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList)))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rules: 634, 644
						if v[5]&kapplyMatchMask == kapplyMatchLblLvalueList2 { // lvalueList(REG,`.List{"lvalueList"}`(.KList))
							v[6] = i.Model.KApplyArg(v[5], 0)
							// KVariable REG = v[6]
							v[7] = i.Model.KApplyArg(v[5], 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelvalueListXquoteXrbracket0 { // `.List{"lvalueList"}`(.KList)
								v[8] = i.Model.KApplyArg(v[4], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.balance","IeleName"))
									v[9] = i.Model.KApplyArg(v[8], 0)
									// rule: 644
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotbalance) { // #token("iele.balance","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(ACCT,`.List{"operandList"}`(.KList))
											v[11] = i.Model.KApplyArg(v[10], 0)
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable ACCT = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
													// KVariable DotVar1 = v[3]
													v[13] = i.Model.KApplyArg(c, 1)
													if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[14] = i.Model.KApplyArg(v[13], 0)
														if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[17] = i.Model.KApplyArg(v[15], 0)
																if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[16]
																	v[18] = i.Model.KApplyArg(c, 2)
																	// KVariable _8 = v[18]
																	v[19] = i.Model.KApplyArg(c, 3)
																	// KVariable _9 = v[19]
																	v[20] = i.Model.KApplyArg(c, 4)
																	// KVariable _10 = v[20]
																	v[21] = i.Model.KApplyArg(c, 5)
																	// KVariable _11 = v[21]
																	v[22] = i.Model.KApplyArg(c, 6)
																	// KVariable _12 = v[22]
																	v[23] = i.Model.KApplyArg(c, 7)
																	// KVariable _13 = v[23]
																	v[24] = i.Model.KApplyArg(c, 8)
																	if v[24]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
																		v[25] = i.Model.KApplyArg(v[24], 0)
																		// KVariable _4 = v[25]
																		v[26] = i.Model.KApplyArg(v[24], 1)
																		if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
																			v[27] = i.Model.KApplyArg(v[26], 0)
																			// KVariable _14 = v[27]
																			v[28] = i.Model.KApplyArg(v[24], 2)
																			// KVariable _5 = v[28]
																			v[29] = i.Model.KApplyArg(v[24], 3)
																			// KVariable _6 = v[29]
																			v[30] = i.Model.KApplyArg(v[24], 4)
																			// KVariable _7 = v[30]
																			// rule #644
																			// source: iele.k @1069
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.balance","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList))))=>`#load___IELE`(REG,BAL)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCT)),isLValue(REG))) ensures #token("true","Bool") [UNIQUE_ID(4fc8af9ba6fb2f1c411692a463705e9c2d22e4697a2c3fab5c4be653a47eaabc) contentStartColumn(10) contentStartLine(1069) org.kframework.attributes.Location(Location(1069,10,1074,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// LOOKUPS
																				if guard < 12 {
																					// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																					v[31], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																						v[27] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[11] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[32] = v[31]
																					if v[32] == m.InternedBottom {
																						return i.stepLookups(c, config, 12) // reapply
																					}
																					if v[32]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_0,_1,_2,_3)
																						v[33] = i.Model.KApplyArg(v[32], 0)
																						if v[33]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																							v[34] = i.Model.KApplyArg(v[33], 0)
																							if i.Model.Equals(v[34], v[11] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																								v[35] = i.Model.KApplyArg(v[32], 1)
																								if v[35]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																									v[36] = i.Model.KApplyArg(v[35], 0)
																									if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																										v[37 /*BAL*/] = v[36] // BAL
																										v[38] = i.Model.KApplyArg(v[32], 2)
																										v[39 /*_0*/] = v[38] // lhs KVariable _0
																										v[40] = i.Model.KApplyArg(v[32], 3)
																										v[41 /*_1*/] = v[40] // lhs KVariable _1
																										v[42] = i.Model.KApplyArg(v[32], 4)
																										v[43 /*_2*/] = v[42] // lhs KVariable _2
																										v[44] = i.Model.KApplyArg(v[32], 5)
																										v[45 /*_3*/] = v[44] // lhs KVariable _3
																										// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																										v[46], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																											v[27] /*_14*/,
																											i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																												v[11] /*ACCT*/,
																											),
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[47] = v[46]
																										if v[47] == m.InternedBottom {
																											return i.stepLookups(c, config, 12) // reapply
																										}
																										if v[47]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																											v[48 /*DotVar3*/] = v[47] // DotVar3
																											// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isInt(BAL),#token("true","Bool")),isLValue(REG)))
																											v[49], i.evalErr = i.evalIsInt( // isInt(BAL)
																												v[37 /*BAL*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											// `_andBool_`(`_andBool_`(isInt(BAL),#token("true","Bool")),isLValue(REG))
																											bv[0] = m.IsTrue(v[49]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																											if bv[0] {
																												v[50], i.evalErr = i.evalIsLValue( // isLValue(REG)
																													v[6] /*REG*/,
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												bv[0] = m.IsTrue(v[50])
																											}
																											if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																												// RHS
																												return i.stepRHS644(v, bv, config)
																											}
																										} else {
																											return i.stepLookups(c, config, 12) // reapply
																										}
																									}
																								}
																							}
																						}
																					} else {
																						return i.stepLookups(c, config, 12) // reapply
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									// rule: 634
									if i.Model.Equals(v[9], constKTokenSortIeleNameieleXdotextcodesize) { // #token("iele.extcodesize","IeleName")
										v[10] = i.Model.KApplyArg(v[4], 2)
										if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(ACCT,`.List{"operandList"}`(.KList))
											v[11] = i.Model.KApplyArg(v[10], 0)
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable ACCT = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
													// KVariable DotVar1 = v[3]
													v[13] = i.Model.KApplyArg(c, 1)
													if v[13]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[14] = i.Model.KApplyArg(v[13], 0)
														if v[14]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[15], v[16] = i.Model.KSequenceSplitHeadTail(v[14]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[15]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[17] = i.Model.KApplyArg(v[15], 0)
																if i.Model.Equals(v[17], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[16]
																	v[18] = i.Model.KApplyArg(c, 2)
																	// KVariable _8 = v[18]
																	v[19] = i.Model.KApplyArg(c, 3)
																	// KVariable _9 = v[19]
																	v[20] = i.Model.KApplyArg(c, 4)
																	// KVariable _10 = v[20]
																	v[21] = i.Model.KApplyArg(c, 5)
																	// KVariable _11 = v[21]
																	v[22] = i.Model.KApplyArg(c, 6)
																	// KVariable _12 = v[22]
																	v[23] = i.Model.KApplyArg(c, 7)
																	// KVariable _13 = v[23]
																	v[24] = i.Model.KApplyArg(c, 8)
																	if v[24]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
																		v[25] = i.Model.KApplyArg(v[24], 0)
																		// KVariable _4 = v[25]
																		v[26] = i.Model.KApplyArg(v[24], 1)
																		if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
																			v[27] = i.Model.KApplyArg(v[26], 0)
																			// KVariable _14 = v[27]
																			v[28] = i.Model.KApplyArg(v[24], 2)
																			// KVariable _5 = v[28]
																			v[29] = i.Model.KApplyArg(v[24], 3)
																			// KVariable _6 = v[29]
																			v[30] = i.Model.KApplyArg(v[24], 4)
																			// KVariable _7 = v[30]
																			// rule #634
																			// source: iele.k @1080
																			// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(lvalueList(REG,`.List{"lvalueList"}`(.KList)),`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList))))=>`#load___IELE`(REG,#contractSize(CODE,#mainContract(CODE)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCT)),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))) ensures #token("true","Bool") [UNIQUE_ID(5eb93aaf12f28275320974743ed35bcb16454bf8d57da0a63094cc618addd0fa) contentStartColumn(10) contentStartLine(1080) org.kframework.attributes.Location(Location(1080,10,1086,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																			if !matched {
																				// LOOKUPS
																				if guard < 13 {
																					// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																					v[31], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																						v[27] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[11] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[32] = v[31]
																					if v[32] == m.InternedBottom {
																						return i.stepLookups(c, config, 13) // reapply
																					}
																					if v[32]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3)
																						v[33] = i.Model.KApplyArg(v[32], 0)
																						if v[33]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																							v[34] = i.Model.KApplyArg(v[33], 0)
																							if i.Model.Equals(v[34], v[11] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																								v[35] = i.Model.KApplyArg(v[32], 1)
																								v[36 /*_0*/] = v[35] // lhs KVariable _0
																								v[37] = i.Model.KApplyArg(v[32], 2)
																								if v[37]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																									v[38] = i.Model.KApplyArg(v[37], 0)
																									v[39 /*CODE*/] = v[38] // lhs KVariable CODE
																									v[40] = i.Model.KApplyArg(v[32], 3)
																									v[41 /*_1*/] = v[40] // lhs KVariable _1
																									v[42] = i.Model.KApplyArg(v[32], 4)
																									v[43 /*_2*/] = v[42] // lhs KVariable _2
																									v[44] = i.Model.KApplyArg(v[32], 5)
																									v[45 /*_3*/] = v[44] // lhs KVariable _3
																									// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																									v[46], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																										v[27] /*_14*/,
																										i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																											v[11] /*ACCT*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[47] = v[46]
																									if v[47] == m.InternedBottom {
																										return i.stepLookups(c, config, 13) // reapply
																									}
																									if v[47]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																										v[48 /*DotVar3*/] = v[47] // DotVar3
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))
																										v[49], i.evalErr = i.evalIsContract( // isContract(CODE)
																											v[39 /*CODE*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isLValue(REG))
																										bv[1] = m.IsTrue(v[49]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																										if bv[1] {
																											v[50], i.evalErr = i.evalIsLValue( // isLValue(REG)
																												v[6] /*REG*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[50])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))
																										bv[0] = bv[1]
																										if bv[0] {
																											v[51], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))
																												v[39 /*CODE*/],
																												i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
																												),
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[0] = m.IsTrue(v[51])
																										}
																										if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																											// RHS
																											return i.stepRHS634(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 13) // reapply
																									}
																								}
																							}
																						}
																					} else {
																						return i.stepLookups(c, config, 13) // reapply
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 599
						// KVariable _412 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _36 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											if v[15]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[16] = i.Model.KApplyArg(v[15], 0)
												// KVariable SCHED = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _37 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _38 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_40),_3,`<funcLabels>`(_41),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _21 = v[20]
													v[21] = i.Model.KApplyArg(v[19], 1)
													// KVariable _22 = v[21]
													v[22] = i.Model.KApplyArg(v[19], 2)
													// KVariable _23 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 3)
													// KVariable _24 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 4)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_40),_3,`<funcLabels>`(_41),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20)
														v[25] = i.Model.KApplyArg(v[24], 0)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_40),_3,`<funcLabels>`(_41),_4,_5,_6)
															v[26] = i.Model.KApplyArg(v[25], 0)
															if v[26]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_40)
																v[27] = i.Model.KApplyArg(v[26], 0)
																// KVariable _40 = v[27]
																v[28] = i.Model.KApplyArg(v[25], 1)
																// KVariable _3 = v[28]
																v[29] = i.Model.KApplyArg(v[25], 2)
																if v[29]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(_41)
																	v[30] = i.Model.KApplyArg(v[29], 0)
																	// KVariable _41 = v[30]
																	v[31] = i.Model.KApplyArg(v[25], 3)
																	// KVariable _4 = v[31]
																	v[32] = i.Model.KApplyArg(v[25], 4)
																	// KVariable _5 = v[32]
																	v[33] = i.Model.KApplyArg(v[25], 5)
																	// KVariable _6 = v[33]
																	v[34] = i.Model.KApplyArg(v[24], 1)
																	// KVariable _7 = v[34]
																	v[35] = i.Model.KApplyArg(v[24], 2)
																	// KVariable _8 = v[35]
																	v[36] = i.Model.KApplyArg(v[24], 3)
																	// KVariable _9 = v[36]
																	v[37] = i.Model.KApplyArg(v[24], 4)
																	// KVariable _10 = v[37]
																	v[38] = i.Model.KApplyArg(v[24], 5)
																	// KVariable _11 = v[38]
																	v[39] = i.Model.KApplyArg(v[24], 6)
																	// KVariable _12 = v[39]
																	v[40] = i.Model.KApplyArg(v[24], 7)
																	// KVariable _13 = v[40]
																	v[41] = i.Model.KApplyArg(v[24], 8)
																	// KVariable _14 = v[41]
																	v[42] = i.Model.KApplyArg(v[24], 9)
																	// KVariable _15 = v[42]
																	v[43] = i.Model.KApplyArg(v[24], 10)
																	// KVariable _16 = v[43]
																	v[44] = i.Model.KApplyArg(v[24], 11)
																	// KVariable _17 = v[44]
																	v[45] = i.Model.KApplyArg(v[24], 12)
																	// KVariable _18 = v[45]
																	v[46] = i.Model.KApplyArg(v[24], 13)
																	// KVariable _19 = v[46]
																	v[47] = i.Model.KApplyArg(v[24], 14)
																	// KVariable _20 = v[47]
																	v[48] = i.Model.KApplyArg(v[19], 5)
																	// KVariable _25 = v[48]
																	v[49] = i.Model.KApplyArg(v[19], 6)
																	// KVariable _26 = v[49]
																	v[50] = i.Model.KApplyArg(v[19], 7)
																	// KVariable _27 = v[50]
																	v[51] = i.Model.KApplyArg(v[19], 8)
																	// KVariable _28 = v[51]
																	v[52] = i.Model.KApplyArg(v[19], 9)
																	// KVariable _29 = v[52]
																	v[53] = i.Model.KApplyArg(v[19], 10)
																	// KVariable _30 = v[53]
																	v[54] = i.Model.KApplyArg(v[19], 11)
																	// KVariable _31 = v[54]
																	v[55] = i.Model.KApplyArg(v[19], 12)
																	// KVariable _32 = v[55]
																	v[56] = i.Model.KApplyArg(v[19], 13)
																	// KVariable _33 = v[56]
																	v[57] = i.Model.KApplyArg(v[19], 14)
																	// KVariable _34 = v[57]
																	v[58] = i.Model.KApplyArg(c, 8)
																	// KVariable _39 = v[58]
																	// rule #599
																	// source: iele.k @973
																	// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_412,IDX,ARGS))=>`#if_#then_#else_#fi_K-EQUAL`(`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))),#token("1","Int"),`#exception__IELE-INFRASTRUCTURE`(#token("2","Int")))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,`<schedule>`(SCHED),_37,_38,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_40),_3,`<funcLabels>`(_41),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_39) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_41,IDX)),#match(LABEL,`Map:lookup`(_41,IDX))),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_40,`<funcId>`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_40,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),isInt(IDX)),isOperands(ARGS)),isIeleName(LABEL)),isSchedule(SCHED)),`_orBool__BOOL`(`_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS),`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)))))) ensures #token("true","Bool") [UNIQUE_ID(c63612d18d7be9a62a5b23baaaab505f6a8c1e910e2c5f63719c7da9491099fb) contentStartColumn(10) contentStartLine(973) org.kframework.attributes.Location(Location(973,10,978,94)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 14 {
																			// lookup:#match(DotVar5,`_[_<-undef]`(_41,IDX))
																			v[59], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,IDX)
																				v[30] /*_41*/,
																				v[6] /*IDX*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[60] = v[59]
																			if v[60] == m.InternedBottom {
																				return i.stepLookups(c, config, 14) // reapply
																			}
																			if v[60]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[61 /*DotVar5*/] = v[60] // DotVar5
																				// lookup:#match(LABEL,`Map:lookup`(_41,IDX))
																				v[62], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,IDX)
																					v[30] /*_41*/,
																					v[6] /*IDX*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[63] = v[62]
																				if v[63] == m.InternedBottom {
																					return i.stepLookups(c, config, 14) // reapply
																				}
																				v[64 /*LABEL*/] = v[63] // lhs KVariable LABEL
																				// lookup:#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_40,`<funcId>`(LABEL)))
																				v[65], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_40,`<funcId>`(LABEL))
																					v[27] /*_40*/,
																					i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																						v[64 /*LABEL*/],
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[66] = v[65]
																				if v[66] == m.InternedBottom {
																					return i.stepLookups(c, config, 14) // reapply
																				}
																				if v[66]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2)
																					v[67] = i.Model.KApplyArg(v[66], 0)
																					if v[67]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(LABEL)
																						v[68] = i.Model.KApplyArg(v[67], 0)
																						if i.Model.Equals(v[68], v[64 /*LABEL*/]) { // lhs KVariable, which reappears:LABEL
																							v[69] = i.Model.KApplyArg(v[66], 1)
																							if v[69]&kapplyMatchMask == kapplyMatchLblXltnparamsXgt1 { // `<nparams>`(NPARAMS)
																								v[70] = i.Model.KApplyArg(v[69], 0)
																								if i.tempTypeVar = v[70] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[71 /*NPARAMS*/] = v[70] // NPARAMS
																									v[72] = i.Model.KApplyArg(v[66], 2)
																									v[73 /*_0*/] = v[72] // lhs KVariable _0
																									v[74] = i.Model.KApplyArg(v[66], 3)
																									v[75 /*_1*/] = v[74] // lhs KVariable _1
																									v[76] = i.Model.KApplyArg(v[66], 4)
																									v[77 /*_2*/] = v[76] // lhs KVariable _2
																									// lookup:#match(DotVar6,`_[_<-undef]`(_40,`<funcId>`(LABEL)))
																									v[78], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_40,`<funcId>`(LABEL))
																										v[27] /*_40*/,
																										i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																											v[64 /*LABEL*/],
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[79] = v[78]
																									if v[79] == m.InternedBottom {
																										return i.stepLookups(c, config, 14) // reapply
																									}
																									if v[79]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																										v[80 /*DotVar6*/] = v[79] // DotVar6
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isSchedule(SCHED)),`_orBool__BOOL`(`_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS),`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))))))
																										v[81], i.evalErr = i.evalIsLValues( // isLValues(_412)
																											v[5] /*_412*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(isLValues(_412),isInt(NPARAMS))
																										bv[4] = m.IsTrue(v[81])
																										if bv[4] {
																											v[82], i.evalErr = i.evalIsInt( // isInt(NPARAMS)
																												v[71 /*NPARAMS*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[4] = m.IsTrue(v[82])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),#token("true","Bool")),isOperands(ARGS))
																										bv[3] = bv[4] /* && */ /* rhs precomputed isInt(IDX) */ 
																										if bv[3] {
																											v[83], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																												v[7] /*ARGS*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[3] = m.IsTrue(v[83])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL))
																										bv[2] = bv[3]
																										if bv[2] {
																											v[84], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																												v[64 /*LABEL*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[2] = m.IsTrue(v[84])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isSchedule(SCHED))
																										bv[1] = bv[2]
																										if bv[1] {
																											v[85], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																												v[16] /*SCHED*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[85])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValues(_412),isInt(NPARAMS)),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isSchedule(SCHED)),`_orBool__BOOL`(`_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS),`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)))))
																										bv[0] = bv[1]
																										if bv[0] {
																											v[87], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
																												v[7] /*ARGS*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											v[86], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS)
																												v[87],
																												v[71 /*NPARAMS*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											// `_orBool__BOOL`(`_=/=Int__INT`(#sizeRegs(ARGS),NPARAMS),`_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))))
																											bv[5] = m.IsTrue(v[86])
																											if !bv[5] {
																												v[88], i.evalErr = i.evalXuXeqXeqKXu( // `_==K_`(LABEL,#token("init","IeleName"))
																													v[64 /*LABEL*/],
																													/* rhs KToken */ constKTokenSortIeleNameinit,
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												// `_andBool_`(`_==K_`(LABEL,#token("init","IeleName")),`_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList)))
																												bv[6] = m.IsTrue(v[88])
																												if bv[6] {
																													v[89], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(SCHED,`ALBE_IELE-CONSTANTS`(.KList))
																														v[16] /*SCHED*/,
																														i.Model.NewKApply(m.LblALBEXuIELEXhyphenCONSTANTS, // as-is ALBE_IELE-CONSTANTS
																														),
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													bv[6] = m.IsTrue(v[89])
																												}
																												bv[5] = bv[6]
																											}
																											bv[0] = bv[5]
																										}
																										if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																											// RHS
																											return i.stepRHS599(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 14) // reapply
																									}
																								}
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 14) // reapply
																				}
																			} else {
																				return i.stepLookups(c, config, 14) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 600
						// KVariable _451 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _36 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _37 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _38 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _39 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,`<funcLabels>`(_42),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _21 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _22 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _23 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _24 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_41),_3,`<funcLabels>`(_42),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20)
													v[24] = i.Model.KApplyArg(v[23], 0)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_41),_3,`<funcLabels>`(_42),_4,_5,_6)
														v[25] = i.Model.KApplyArg(v[24], 0)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_41)
															v[26] = i.Model.KApplyArg(v[25], 0)
															// KVariable _41 = v[26]
															v[27] = i.Model.KApplyArg(v[24], 1)
															// KVariable _3 = v[27]
															v[28] = i.Model.KApplyArg(v[24], 2)
															if v[28]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(_42)
																v[29] = i.Model.KApplyArg(v[28], 0)
																// KVariable _42 = v[29]
																v[30] = i.Model.KApplyArg(v[24], 3)
																// KVariable _4 = v[30]
																v[31] = i.Model.KApplyArg(v[24], 4)
																// KVariable _5 = v[31]
																v[32] = i.Model.KApplyArg(v[24], 5)
																// KVariable _6 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 1)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 2)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 3)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 4)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 5)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 6)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 7)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[23], 8)
																// KVariable _14 = v[40]
																v[41] = i.Model.KApplyArg(v[23], 9)
																// KVariable _15 = v[41]
																v[42] = i.Model.KApplyArg(v[23], 10)
																// KVariable _16 = v[42]
																v[43] = i.Model.KApplyArg(v[23], 11)
																// KVariable _17 = v[43]
																v[44] = i.Model.KApplyArg(v[23], 12)
																// KVariable _18 = v[44]
																v[45] = i.Model.KApplyArg(v[23], 13)
																// KVariable _19 = v[45]
																v[46] = i.Model.KApplyArg(v[23], 14)
																// KVariable _20 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 5)
																// KVariable _25 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 6)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 7)
																// KVariable _27 = v[49]
																v[50] = i.Model.KApplyArg(v[18], 8)
																// KVariable _28 = v[50]
																v[51] = i.Model.KApplyArg(v[18], 9)
																// KVariable _29 = v[51]
																v[52] = i.Model.KApplyArg(v[18], 10)
																// KVariable _30 = v[52]
																v[53] = i.Model.KApplyArg(v[18], 11)
																// KVariable _31 = v[53]
																v[54] = i.Model.KApplyArg(v[18], 12)
																// KVariable _32 = v[54]
																v[55] = i.Model.KApplyArg(v[18], 13)
																// KVariable _33 = v[55]
																v[56] = i.Model.KApplyArg(v[18], 14)
																// KVariable _34 = v[56]
																v[57] = i.Model.KApplyArg(c, 8)
																// KVariable _40 = v[57]
																// rule #600
																// source: iele.k @963
																// {| rule `<generatedTop>`(`<k>`(`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_451,IDX=>`@__IELE-COMMON`(LABEL),ARGS))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,`<funcLabels>`(_42),_4,_5,_6),_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_42,IDX)),#match(LABEL,`Map:lookup`(_42,IDX))),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_41,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),isInt(IDX)),isOperands(ARGS)),isIeleName(LABEL)),isLValues(_451)),`_==Int_`(#sizeRegs(ARGS),NPARAMS))) ensures #token("true","Bool") [UNIQUE_ID(ce749200959fa0bb67e40a453520bedc0da55ed23527ef76ee911b7f87b5e437) contentStartColumn(10) contentStartLine(963) org.kframework.attributes.Location(Location(963,10,967,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 15 {
																		// lookup:#match(DotVar5,`_[_<-undef]`(_42,IDX))
																		v[58], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,IDX)
																			v[29] /*_42*/,
																			v[6] /*IDX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[59] = v[58]
																		if v[59] == m.InternedBottom {
																			return i.stepLookups(c, config, 15) // reapply
																		}
																		if v[59]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																			v[60 /*DotVar5*/] = v[59] // DotVar5
																			// lookup:#match(LABEL,`Map:lookup`(_42,IDX))
																			v[61], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,IDX)
																				v[29] /*_42*/,
																				v[6] /*IDX*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[62] = v[61]
																			if v[62] == m.InternedBottom {
																				return i.stepLookups(c, config, 15) // reapply
																			}
																			v[63 /*LABEL*/] = v[62] // lhs KVariable LABEL
																			// lookup:#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL)))
																			v[64], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<funcId>`(LABEL))
																				v[26] /*_41*/,
																				i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																					v[63 /*LABEL*/],
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[65] = v[64]
																			if v[65] == m.InternedBottom {
																				return i.stepLookups(c, config, 15) // reapply
																			}
																			if v[65]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2)
																				v[66] = i.Model.KApplyArg(v[65], 0)
																				if v[66]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(LABEL)
																					v[67] = i.Model.KApplyArg(v[66], 0)
																					if i.Model.Equals(v[67], v[63 /*LABEL*/]) { // lhs KVariable, which reappears:LABEL
																						v[68] = i.Model.KApplyArg(v[65], 1)
																						if v[68]&kapplyMatchMask == kapplyMatchLblXltnparamsXgt1 { // `<nparams>`(NPARAMS)
																							v[69] = i.Model.KApplyArg(v[68], 0)
																							if i.tempTypeVar = v[69] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								v[70 /*NPARAMS*/] = v[69] // NPARAMS
																								v[71] = i.Model.KApplyArg(v[65], 2)
																								v[72 /*_0*/] = v[71] // lhs KVariable _0
																								v[73] = i.Model.KApplyArg(v[65], 3)
																								v[74 /*_1*/] = v[73] // lhs KVariable _1
																								v[75] = i.Model.KApplyArg(v[65], 4)
																								v[76 /*_2*/] = v[75] // lhs KVariable _2
																								// lookup:#match(DotVar6,`_[_<-undef]`(_41,`<funcId>`(LABEL)))
																								v[77], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<funcId>`(LABEL))
																									v[26] /*_41*/,
																									i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																										v[63 /*LABEL*/],
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[78] = v[77]
																								if v[78] == m.InternedBottom {
																									return i.stepLookups(c, config, 15) // reapply
																								}
																								if v[78]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																									v[79 /*DotVar6*/] = v[78] // DotVar6
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isLValues(_451)),`_==Int_`(#sizeRegs(ARGS),NPARAMS)))
																									v[80], i.evalErr = i.evalIsInt( // isInt(NPARAMS)
																										v[70 /*NPARAMS*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(isInt(NPARAMS),#token("true","Bool")),isOperands(ARGS))
																									bv[3] = m.IsTrue(v[80]) /* && */ /* rhs precomputed isInt(IDX) */ 
																									if bv[3] {
																										v[81], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																											v[7] /*ARGS*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[3] = m.IsTrue(v[81])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL))
																									bv[2] = bv[3]
																									if bv[2] {
																										v[82], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																											v[63 /*LABEL*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[2] = m.IsTrue(v[82])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isLValues(_451))
																									bv[1] = bv[2]
																									if bv[1] {
																										v[83], i.evalErr = i.evalIsLValues( // isLValues(_451)
																											v[5] /*_451*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[83])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(NPARAMS),#token("true","Bool")),isOperands(ARGS)),isIeleName(LABEL)),isLValues(_451)),`_==Int_`(#sizeRegs(ARGS),NPARAMS))
																									bv[0] = bv[1]
																									if bv[0] {
																										v[85], i.evalErr = i.evalXhashsizeRegs( // #sizeRegs(ARGS)
																											v[7] /*ARGS*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[84], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(#sizeRegs(ARGS),NPARAMS)
																											v[85],
																											v[70 /*NPARAMS*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = m.IsTrue(v[84])
																									}
																									if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS600(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 15) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 15) // reapply
																			}
																		} else {
																			return i.stepLookups(c, config, 15) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 616
						// KVariable _308 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("iele.extcodesize","IeleName"))
							v[7] = i.Model.KApplyArg(v[6], 0)
							if i.Model.Equals(v[7], constKTokenSortIeleNameieleXdotextcodesize) { // #token("iele.extcodesize","IeleName")
								v[8] = i.Model.KApplyArg(v[4], 2)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(ACCT,`.List{"operandList"}`(.KList))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable ACCT = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											// KVariable DotVar1 = v[3]
											v[11] = i.Model.KApplyArg(c, 1)
											if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[12] = i.Model.KApplyArg(v[11], 0)
												if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[15] = i.Model.KApplyArg(v[13], 0)
														if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[14]
															v[16] = i.Model.KApplyArg(c, 2)
															// KVariable _8 = v[16]
															v[17] = i.Model.KApplyArg(c, 3)
															// KVariable _9 = v[17]
															v[18] = i.Model.KApplyArg(c, 4)
															// KVariable _10 = v[18]
															v[19] = i.Model.KApplyArg(c, 5)
															// KVariable _11 = v[19]
															v[20] = i.Model.KApplyArg(c, 6)
															// KVariable _12 = v[20]
															v[21] = i.Model.KApplyArg(c, 7)
															// KVariable _13 = v[21]
															v[22] = i.Model.KApplyArg(c, 8)
															if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
																v[23] = i.Model.KApplyArg(v[22], 0)
																// KVariable _4 = v[23]
																v[24] = i.Model.KApplyArg(v[22], 1)
																if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
																	v[25] = i.Model.KApplyArg(v[24], 0)
																	// KVariable _14 = v[25]
																	v[26] = i.Model.KApplyArg(v[22], 2)
																	// KVariable _5 = v[26]
																	v[27] = i.Model.KApplyArg(v[22], 3)
																	// KVariable _6 = v[27]
																	v[28] = i.Model.KApplyArg(v[22], 4)
																	// KVariable _7 = v[28]
																	// rule #616
																	// source: iele.k @1088
																	// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=call_(_)_IELE-COMMON`(_308,`@__IELE-COMMON`(#token("iele.extcodesize","IeleName")),operandList(ACCT,`.List{"operandList"}`(.KList))))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isLValues(_308),isInt(ACCT))) ensures #token("true","Bool") [UNIQUE_ID(4e543553af0d39b1a2ee30a591dd97995cd74780d1b6c61eb078e5fd88ef275f) contentStartColumn(10) contentStartLine(1088) org.kframework.attributes.Location(Location(1088,10,1093,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 16 {
																			// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																			v[29], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																				v[25] /*_14*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[9] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[30] = v[29]
																			if v[30] == m.InternedBottom {
																				return i.stepLookups(c, config, 16) // reapply
																			}
																			if v[30]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3)
																				v[31] = i.Model.KApplyArg(v[30], 0)
																				if v[31]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																					v[32] = i.Model.KApplyArg(v[31], 0)
																					if i.Model.Equals(v[32], v[9] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																						v[33] = i.Model.KApplyArg(v[30], 1)
																						v[34 /*_0*/] = v[33] // lhs KVariable _0
																						v[35] = i.Model.KApplyArg(v[30], 2)
																						if v[35]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(`.List{"contractDefinitionList"}`(.KList))
																							v[36] = i.Model.KApplyArg(v[35], 0)
																							if v[36]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																								v[37] = i.Model.KApplyArg(v[30], 3)
																								v[38 /*_1*/] = v[37] // lhs KVariable _1
																								v[39] = i.Model.KApplyArg(v[30], 4)
																								v[40 /*_2*/] = v[39] // lhs KVariable _2
																								v[41] = i.Model.KApplyArg(v[30], 5)
																								v[42 /*_3*/] = v[41] // lhs KVariable _3
																								// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																								v[43], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																									v[25] /*_14*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[9] /*ACCT*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[44] = v[43]
																								if v[44] == m.InternedBottom {
																									return i.stepLookups(c, config, 16) // reapply
																								}
																								if v[44]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																									v[45 /*DotVar3*/] = v[44] // DotVar3
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(isLValues(_308),#token("true","Bool")))
																									v[46], i.evalErr = i.evalIsLValues( // isLValues(_308)
																										v[5] /*_308*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									if /* rhs precomputed lookup #match && lookup #match */ /* && */ m.IsTrue(v[46]) /* && */ /* rhs precomputed isInt(ACCT) */  {
																										// RHS
																										return i.stepRHS616(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 16) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 16) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 576, 645
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcalladdressXuatXuXuIELEXhyphenCOMMON3 { // `_=calladdress_at__IELE-COMMON`(REG,`@__IELE-COMMON`(NAME),ACCT)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 645
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable NAME = v[7]
							v[8] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCT = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[19]
												v[20] = i.Model.KApplyArg(c, 8)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
													v[21] = i.Model.KApplyArg(v[20], 0)
													// KVariable _4 = v[21]
													v[22] = i.Model.KApplyArg(v[20], 1)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _14 = v[23]
														v[24] = i.Model.KApplyArg(v[20], 2)
														// KVariable _5 = v[24]
														v[25] = i.Model.KApplyArg(v[20], 3)
														// KVariable _6 = v[25]
														v[26] = i.Model.KApplyArg(v[20], 4)
														// KVariable _7 = v[26]
														// rule #645
														// source: iele.k @1110
														// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(REG,`@__IELE-COMMON`(NAME),ACCT))=>`#load___IELE`(REG,#callAddress(CODE,#mainContract(CODE),NAME))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isIeleName(NAME)),isInt(ACCT)),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))) ensures #token("true","Bool") [UNIQUE_ID(2e35b4a18260ebd08b72387b6fb9b3f3c57a011eaf2f3672fdc9d9c7b8294e6a) contentStartColumn(10) contentStartLine(1110) org.kframework.attributes.Location(Location(1110,10,1116,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// LOOKUPS
															if guard < 17 {
																// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																v[27], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																	v[23] /*_14*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[8] /*ACCT*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[28] = v[27]
																if v[28] == m.InternedBottom {
																	return i.stepLookups(c, config, 17) // reapply
																}
																if v[28]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,_2,_3)
																	v[29] = i.Model.KApplyArg(v[28], 0)
																	if v[29]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																		v[30] = i.Model.KApplyArg(v[29], 0)
																		if i.Model.Equals(v[30], v[8] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																			v[31] = i.Model.KApplyArg(v[28], 1)
																			v[32 /*_0*/] = v[31] // lhs KVariable _0
																			v[33] = i.Model.KApplyArg(v[28], 2)
																			if v[33]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																				v[34] = i.Model.KApplyArg(v[33], 0)
																				v[35 /*CODE*/] = v[34] // lhs KVariable CODE
																				v[36] = i.Model.KApplyArg(v[28], 3)
																				v[37 /*_1*/] = v[36] // lhs KVariable _1
																				v[38] = i.Model.KApplyArg(v[28], 4)
																				v[39 /*_2*/] = v[38] // lhs KVariable _2
																				v[40] = i.Model.KApplyArg(v[28], 5)
																				v[41 /*_3*/] = v[40] // lhs KVariable _3
																				// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																				v[42], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																					v[23] /*_14*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[8] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[43] = v[42]
																				if v[43] == m.InternedBottom {
																					return i.stepLookups(c, config, 17) // reapply
																				}
																				if v[43]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																					v[44 /*DotVar3*/] = v[43] // DotVar3
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isIeleName(NAME)),#token("true","Bool")),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))
																					v[45], i.evalErr = i.evalIsContract( // isContract(CODE)
																						v[35 /*CODE*/],
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(isContract(CODE),isIeleName(NAME))
																					bv[2] = m.IsTrue(v[45])
																					if bv[2] {
																						v[46], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																							v[7] /*NAME*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[2] = m.IsTrue(v[46])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isIeleName(NAME)),#token("true","Bool")),isLValue(REG))
																					bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCT) */ 
																					if bv[1] {
																						v[47], i.evalErr = i.evalIsLValue( // isLValue(REG)
																							v[5] /*REG*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[47])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isIeleName(NAME)),#token("true","Bool")),isLValue(REG)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))
																					bv[0] = bv[1]
																					if bv[0] {
																						v[48], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))
																							v[35 /*CODE*/],
																							i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[48])
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																						// RHS
																						return i.stepRHS645(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 17) // reapply
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 17) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 576
						// KVariable _346 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _347 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _8 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _9 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _10 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _11 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _12 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[18]
											v[19] = i.Model.KApplyArg(c, 8)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _4 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _14 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 2)
													// KVariable _5 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 3)
													// KVariable _6 = v[24]
													v[25] = i.Model.KApplyArg(v[19], 4)
													// KVariable _7 = v[25]
													// rule #576
													// source: iele.k @1103
													// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#exec__IELE-INFRASTRUCTURE`(`_=calladdress_at__IELE-COMMON`(_346,_347,ACCT))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isLValue(_346),isInt(ACCT)),isGlobalName(_347))) ensures #token("true","Bool") [UNIQUE_ID(7e55859355165e1a9d0588e6ece7e2310ba26387bb167086b0f3f94f56cfb834) contentStartColumn(10) contentStartLine(1103) org.kframework.attributes.Location(Location(1103,10,1108,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 18 {
															// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
															v[26], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																v[22] /*_14*/,
																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																	v[7] /*ACCT*/,
																),
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[27] = v[26]
															if v[27] == m.InternedBottom {
																return i.stepLookups(c, config, 18) // reapply
															}
															if v[27]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3)
																v[28] = i.Model.KApplyArg(v[27], 0)
																if v[28]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																	v[29] = i.Model.KApplyArg(v[28], 0)
																	if i.Model.Equals(v[29], v[7] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																		v[30] = i.Model.KApplyArg(v[27], 1)
																		v[31 /*_0*/] = v[30] // lhs KVariable _0
																		v[32] = i.Model.KApplyArg(v[27], 2)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(`.List{"contractDefinitionList"}`(.KList))
																			v[33] = i.Model.KApplyArg(v[32], 0)
																			if v[33]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																				v[34] = i.Model.KApplyArg(v[27], 3)
																				v[35 /*_1*/] = v[34] // lhs KVariable _1
																				v[36] = i.Model.KApplyArg(v[27], 4)
																				v[37 /*_2*/] = v[36] // lhs KVariable _2
																				v[38] = i.Model.KApplyArg(v[27], 5)
																				v[39 /*_3*/] = v[38] // lhs KVariable _3
																				// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																				v[40], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																					v[22] /*_14*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[7] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[41] = v[40]
																				if v[41] == m.InternedBottom {
																					return i.stepLookups(c, config, 18) // reapply
																				}
																				if v[41]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																					v[42 /*DotVar3*/] = v[41] // DotVar3
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isLValue(_346),#token("true","Bool")),isGlobalName(_347)))
																					v[43], i.evalErr = i.evalIsLValue( // isLValue(_346)
																						v[5] /*_346*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_andBool_`(isLValue(_346),#token("true","Bool")),isGlobalName(_347))
																					bv[0] = m.IsTrue(v[43]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																					if bv[0] {
																						v[44], i.evalErr = i.evalIsGlobalName( // isGlobalName(_347)
																							v[6] /*_347*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[44])
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																						// RHS
																						return i.stepRHS576(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 18) // reapply
																				}
																			}
																		}
																	}
																}
															} else {
																return i.stepLookups(c, config, 18) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 646
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=create_(_)send__IELE-COMMON`(STATUS,ACCTOUT,NAME,ARGS,VALUE)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable STATUS = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable ACCTOUT = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable NAME = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						// KVariable ARGS = v[8]
						v[9] = i.Model.KApplyArg(v[4], 4)
						if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _39 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _40 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable SCHED = v[18]
												v[19] = i.Model.KApplyArg(c, 5)
												// KVariable _41 = v[19]
												v[20] = i.Model.KApplyArg(c, 6)
												// KVariable _42 = v[20]
												v[21] = i.Model.KApplyArg(c, 7)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_17,_18,_19,_20,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,`<contractCode>`(CODE)),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,_12,_13,_14,`<gas>`(GAVAIL),_15,_16),_21,_22,_23,_24,_25,_26,_27,_28,_29,_30)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _17 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _18 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _19 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _20 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,_2,_3,_4,`<contractCode>`(CODE)),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,_12,_13,_14,`<gas>`(GAVAIL),_15,_16)
														v[27] = i.Model.KApplyArg(v[26], 0)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,_2,_3,_4,`<contractCode>`(CODE))
															v[28] = i.Model.KApplyArg(v[27], 0)
															// KVariable _0 = v[28]
															v[29] = i.Model.KApplyArg(v[27], 1)
															// KVariable _1 = v[29]
															v[30] = i.Model.KApplyArg(v[27], 2)
															// KVariable _2 = v[30]
															v[31] = i.Model.KApplyArg(v[27], 3)
															// KVariable _3 = v[31]
															v[32] = i.Model.KApplyArg(v[27], 4)
															// KVariable _4 = v[32]
															v[33] = i.Model.KApplyArg(v[27], 5)
															if v[33]&kapplyMatchMask == kapplyMatchLblXltcontractCodeXgt1 { // `<contractCode>`(CODE)
																v[34] = i.Model.KApplyArg(v[33], 0)
																// KVariable CODE = v[34]
																v[35] = i.Model.KApplyArg(v[26], 1)
																// KVariable _5 = v[35]
																v[36] = i.Model.KApplyArg(v[26], 2)
																// KVariable _6 = v[36]
																v[37] = i.Model.KApplyArg(v[26], 3)
																if v[37]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																	v[38] = i.Model.KApplyArg(v[37], 0)
																	if i.tempTypeVar = v[38] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable ACCT = v[38]
																		v[39] = i.Model.KApplyArg(v[26], 4)
																		// KVariable _7 = v[39]
																		v[40] = i.Model.KApplyArg(v[26], 5)
																		// KVariable _8 = v[40]
																		v[41] = i.Model.KApplyArg(v[26], 6)
																		// KVariable _9 = v[41]
																		v[42] = i.Model.KApplyArg(v[26], 7)
																		// KVariable _10 = v[42]
																		v[43] = i.Model.KApplyArg(v[26], 8)
																		// KVariable _11 = v[43]
																		v[44] = i.Model.KApplyArg(v[26], 9)
																		// KVariable _12 = v[44]
																		v[45] = i.Model.KApplyArg(v[26], 10)
																		// KVariable _13 = v[45]
																		v[46] = i.Model.KApplyArg(v[26], 11)
																		// KVariable _14 = v[46]
																		v[47] = i.Model.KApplyArg(v[26], 12)
																		if v[47]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																			v[48] = i.Model.KApplyArg(v[47], 0)
																			if i.tempTypeVar = v[48] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable GAVAIL = v[48]
																				v[49] = i.Model.KApplyArg(v[26], 13)
																				// KVariable _15 = v[49]
																				v[50] = i.Model.KApplyArg(v[26], 14)
																				// KVariable _16 = v[50]
																				v[51] = i.Model.KApplyArg(v[21], 5)
																				// KVariable _21 = v[51]
																				v[52] = i.Model.KApplyArg(v[21], 6)
																				// KVariable _22 = v[52]
																				v[53] = i.Model.KApplyArg(v[21], 7)
																				// KVariable _23 = v[53]
																				v[54] = i.Model.KApplyArg(v[21], 8)
																				// KVariable _24 = v[54]
																				v[55] = i.Model.KApplyArg(v[21], 9)
																				// KVariable _25 = v[55]
																				v[56] = i.Model.KApplyArg(v[21], 10)
																				// KVariable _26 = v[56]
																				v[57] = i.Model.KApplyArg(v[21], 11)
																				// KVariable _27 = v[57]
																				v[58] = i.Model.KApplyArg(v[21], 12)
																				// KVariable _28 = v[58]
																				v[59] = i.Model.KApplyArg(v[21], 13)
																				// KVariable _29 = v[59]
																				v[60] = i.Model.KApplyArg(v[21], 14)
																				// KVariable _30 = v[60]
																				v[61] = i.Model.KApplyArg(c, 8)
																				if v[61]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_35,`<accounts>`(_43),_36,_37,_38)
																					v[62] = i.Model.KApplyArg(v[61], 0)
																					// KVariable _35 = v[62]
																					v[63] = i.Model.KApplyArg(v[61], 1)
																					if v[63]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_43)
																						v[64] = i.Model.KApplyArg(v[63], 0)
																						// KVariable _43 = v[64]
																						v[65] = i.Model.KApplyArg(v[61], 2)
																						// KVariable _36 = v[65]
																						v[66] = i.Model.KApplyArg(v[61], 3)
																						// KVariable _37 = v[66]
																						v[67] = i.Model.KApplyArg(v[61], 4)
																						// KVariable _38 = v[67]
																						// rule #646
																						// source: iele.k @1466
																						// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=create_(_)send__IELE-COMMON`(STATUS,ACCTOUT,NAME,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,#subcontract(CODE,NAME),ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,NAME),#subcontract(CODE,NAME),STATUS,ACCTOUT,#token("false","Bool"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_39,_40,`<schedule>`(SCHED),_41,_42,`<iele>`(_17,_18,_19,_20,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,`<contractCode>`(CODE)),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,_12,_13,_14,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))),_15,_16),_21,_22,_23,_24,_25,_26,_27,_28,_29,_30),`<network>`(_35,`<accounts>`(_43),_36,_37,_38)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_31,_32,_33,`<nonce>`(NONCE),_34),`Map:lookup`(_43,`<acctID>`(ACCT))),#match(DotVar6,`_[_<-undef]`(_43,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS)),isInt(VALUE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),isInt(GAVAIL))) ensures #token("true","Bool") [UNIQUE_ID(bbc2abd69062058575c5536b5070eba178dd21f04de8f273c92609210f3071c3) contentStartColumn(10) contentStartLine(1466) org.kframework.attributes.Location(Location(1466,10,1480,45)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																						if !matched {
																							// LOOKUPS
																							if guard < 19 {
																								// lookup:#match(`<account>`(`<acctID>`(ACCT),_31,_32,_33,`<nonce>`(NONCE),_34),`Map:lookup`(_43,`<acctID>`(ACCT)))
																								v[68], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_43,`<acctID>`(ACCT))
																									v[64] /*_43*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[38] /*ACCT*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[69] = v[68]
																								if v[69] == m.InternedBottom {
																									return i.stepLookups(c, config, 19) // reapply
																								}
																								if v[69]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_31,_32,_33,`<nonce>`(NONCE),_34)
																									v[70] = i.Model.KApplyArg(v[69], 0)
																									if v[70]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																										v[71] = i.Model.KApplyArg(v[70], 0)
																										if i.Model.Equals(v[71], v[38] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																											v[72] = i.Model.KApplyArg(v[69], 1)
																											v[73 /*_31*/] = v[72] // lhs KVariable _31
																											v[74] = i.Model.KApplyArg(v[69], 2)
																											v[75 /*_32*/] = v[74] // lhs KVariable _32
																											v[76] = i.Model.KApplyArg(v[69], 3)
																											v[77 /*_33*/] = v[76] // lhs KVariable _33
																											v[78] = i.Model.KApplyArg(v[69], 4)
																											if v[78]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																												v[79] = i.Model.KApplyArg(v[78], 0)
																												if i.tempTypeVar = v[79] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																													v[80 /*NONCE*/] = v[79] // NONCE
																													v[81] = i.Model.KApplyArg(v[69], 5)
																													v[82 /*_34*/] = v[81] // lhs KVariable _34
																													// lookup:#match(DotVar6,`_[_<-undef]`(_43,`<acctID>`(ACCT)))
																													v[83], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_43,`<acctID>`(ACCT))
																														v[64] /*_43*/,
																														i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																															v[38] /*ACCT*/,
																														),
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													v[84] = v[83]
																													if v[84] == m.InternedBottom {
																														return i.stepLookups(c, config, 19) // reapply
																													}
																													if v[84]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																														v[85 /*DotVar6*/] = v[84] // DotVar6
																														// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),#token("true","Bool")))
																														v[86], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																															v[6] /*ACCTOUT*/,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														// `_andBool_`(isLValue(ACCTOUT),isContract(CODE))
																														bv[5] = m.IsTrue(v[86])
																														if bv[5] {
																															v[87], i.evalErr = i.evalIsContract( // isContract(CODE)
																																v[34] /*CODE*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[5] = m.IsTrue(v[87])
																														}
																														// `_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME))
																														bv[4] = bv[5]
																														if bv[4] {
																															v[88], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																																v[7] /*NAME*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[4] = m.IsTrue(v[88])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS))
																														bv[3] = bv[4]
																														if bv[3] {
																															v[89], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																																v[5] /*STATUS*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[3] = m.IsTrue(v[89])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED))
																														bv[2] = bv[3] /* && */ /* rhs precomputed isInt(VALUE) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																														if bv[2] {
																															v[90], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																v[18] /*SCHED*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[2] = m.IsTrue(v[90])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE))
																														bv[1] = bv[2]
																														if bv[1] {
																															v[91], i.evalErr = i.evalIsInt( // isInt(NONCE)
																																v[80 /*NONCE*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[1] = m.IsTrue(v[91])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isIeleName(NAME)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS))
																														bv[0] = bv[1]
																														if bv[0] {
																															v[92], i.evalErr = i.evalIsInts( // isInts(ARGS)
																																v[8] /*ARGS*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[0] = m.IsTrue(v[92])
																														}
																														if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																															// RHS
																															return i.stepRHS646(v, bv, config)
																														}
																													} else {
																														return i.stepLookups(c, config, 19) // reapply
																													}
																												}
																											}
																										}
																									}
																								} else {
																									return i.stepLookups(c, config, 19) // reapply
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 570, 590, 633
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXcommaXuXeqcopycreateXuXlparenXuXrparensendXuXuIELEXhyphenCOMMON5 { // `_,_=copycreate_(_)send__IELE-COMMON`(STATUS,ACCTOUT,ACCT,ARGS,VALUE)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rules: 570, 633
						// KVariable STATUS = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable ACCTOUT = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// rule: 570
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							// KVariable ARGS = v[8]
							v[9] = i.Model.KApplyArg(v[4], 4)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _34 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _35 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable SCHED = v[18]
													v[19] = i.Model.KApplyArg(c, 5)
													// KVariable _36 = v[19]
													v[20] = i.Model.KApplyArg(c, 6)
													// KVariable _37 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
														v[22] = i.Model.KApplyArg(v[21], 0)
														// KVariable _13 = v[22]
														v[23] = i.Model.KApplyArg(v[21], 1)
														// KVariable _14 = v[23]
														v[24] = i.Model.KApplyArg(v[21], 2)
														// KVariable _15 = v[24]
														v[25] = i.Model.KApplyArg(v[21], 3)
														// KVariable _16 = v[25]
														v[26] = i.Model.KApplyArg(v[21], 4)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL),_11,_12)
															v[27] = i.Model.KApplyArg(v[26], 0)
															// KVariable _0 = v[27]
															v[28] = i.Model.KApplyArg(v[26], 1)
															// KVariable _1 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 2)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[26], 3)
															if v[30]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																v[31] = i.Model.KApplyArg(v[30], 0)
																if i.Model.Equals(v[31], v[7] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[32] = i.Model.KApplyArg(v[26], 4)
																	// KVariable _3 = v[32]
																	v[33] = i.Model.KApplyArg(v[26], 5)
																	// KVariable _4 = v[33]
																	v[34] = i.Model.KApplyArg(v[26], 6)
																	// KVariable _5 = v[34]
																	v[35] = i.Model.KApplyArg(v[26], 7)
																	// KVariable _6 = v[35]
																	v[36] = i.Model.KApplyArg(v[26], 8)
																	// KVariable _7 = v[36]
																	v[37] = i.Model.KApplyArg(v[26], 9)
																	// KVariable _8 = v[37]
																	v[38] = i.Model.KApplyArg(v[26], 10)
																	// KVariable _9 = v[38]
																	v[39] = i.Model.KApplyArg(v[26], 11)
																	// KVariable _10 = v[39]
																	v[40] = i.Model.KApplyArg(v[26], 12)
																	if v[40]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																		v[41] = i.Model.KApplyArg(v[40], 0)
																		if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable GAVAIL = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _11 = v[42]
																			v[43] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _12 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _17 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _18 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _19 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _20 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _21 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _22 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _23 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _24 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _25 = v[52]
																			v[53] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _26 = v[53]
																			v[54] = i.Model.KApplyArg(c, 8)
																			if v[54]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_30,`<accounts>`(_38),_31,_32,_33)
																				v[55] = i.Model.KApplyArg(v[54], 0)
																				// KVariable _30 = v[55]
																				v[56] = i.Model.KApplyArg(v[54], 1)
																				if v[56]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_38)
																					v[57] = i.Model.KApplyArg(v[56], 0)
																					// KVariable _38 = v[57]
																					v[58] = i.Model.KApplyArg(v[54], 2)
																					// KVariable _31 = v[58]
																					v[59] = i.Model.KApplyArg(v[54], 3)
																					// KVariable _32 = v[59]
																					v[60] = i.Model.KApplyArg(v[54], 4)
																					// KVariable _33 = v[60]
																					// rule #570
																					// source: iele.k @1510
																					// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,ACCTOUT,ACCT,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,CODE,ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,#mainContract(CODE)),CODE,STATUS,ACCTOUT,#token("false","Bool"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_30,`<accounts>`(_38),_31,_32,_33)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,`<nonce>`(NONCE),_29),`Map:lookup`(_38,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_38,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS)),isInt(VALUE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),isInt(GAVAIL))) ensures #token("true","Bool") [UNIQUE_ID(6fba2164eb5ce85acff34681759788ff9b7200c639e827b31ac1dfa83133c928) contentStartColumn(10) contentStartLine(1510) org.kframework.attributes.Location(Location(1510,10,1524,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																					if !matched {
																						// LOOKUPS
																						if guard < 20 {
																							// lookup:#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,`<nonce>`(NONCE),_29),`Map:lookup`(_38,`<acctID>`(ACCT)))
																							v[61], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_38,`<acctID>`(ACCT))
																								v[57] /*_38*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[7] /*ACCT*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[62] = v[61]
																							if v[62] == m.InternedBottom {
																								return i.stepLookups(c, config, 20) // reapply
																							}
																							if v[62]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,`<nonce>`(NONCE),_29)
																								v[63] = i.Model.KApplyArg(v[62], 0)
																								if v[63]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																									v[64] = i.Model.KApplyArg(v[63], 0)
																									if i.Model.Equals(v[64], v[7] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																										v[65] = i.Model.KApplyArg(v[62], 1)
																										v[66 /*_27*/] = v[65] // lhs KVariable _27
																										v[67] = i.Model.KApplyArg(v[62], 2)
																										if v[67]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																											v[68] = i.Model.KApplyArg(v[67], 0)
																											v[69 /*CODE*/] = v[68] // lhs KVariable CODE
																											v[70] = i.Model.KApplyArg(v[62], 3)
																											v[71 /*_28*/] = v[70] // lhs KVariable _28
																											v[72] = i.Model.KApplyArg(v[62], 4)
																											if v[72]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																												v[73] = i.Model.KApplyArg(v[72], 0)
																												if i.tempTypeVar = v[73] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																													v[74 /*NONCE*/] = v[73] // NONCE
																													v[75] = i.Model.KApplyArg(v[62], 5)
																													v[76 /*_29*/] = v[75] // lhs KVariable _29
																													// lookup:#match(DotVar5,`_[_<-undef]`(_38,`<acctID>`(ACCT)))
																													v[77], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_38,`<acctID>`(ACCT))
																														v[57] /*_38*/,
																														i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																															v[7] /*ACCT*/,
																														),
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													v[78] = v[77]
																													if v[78] == m.InternedBottom {
																														return i.stepLookups(c, config, 20) // reapply
																													}
																													if v[78]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																														v[79 /*DotVar5*/] = v[78] // DotVar5
																														// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS)),#token("true","Bool")))
																														v[80], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																															v[6] /*ACCTOUT*/,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														// `_andBool_`(isLValue(ACCTOUT),isContract(CODE))
																														bv[4] = m.IsTrue(v[80])
																														if bv[4] {
																															v[81], i.evalErr = i.evalIsContract( // isContract(CODE)
																																v[69 /*CODE*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[4] = m.IsTrue(v[81])
																														}
																														// `_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS))
																														bv[3] = bv[4]
																														if bv[3] {
																															v[82], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																																v[5] /*STATUS*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[3] = m.IsTrue(v[82])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED))
																														bv[2] = bv[3] /* && */ /* rhs precomputed isInt(VALUE) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																														if bv[2] {
																															v[83], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																v[18] /*SCHED*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[2] = m.IsTrue(v[83])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE))
																														bv[1] = bv[2]
																														if bv[1] {
																															v[84], i.evalErr = i.evalIsInt( // isInt(NONCE)
																																v[74 /*NONCE*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[1] = m.IsTrue(v[84])
																														}
																														// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(ACCTOUT),isContract(CODE)),isLValue(STATUS)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),isInts(ARGS))
																														bv[0] = bv[1]
																														if bv[0] {
																															v[85], i.evalErr = i.evalIsInts( // isInts(ARGS)
																																v[8] /*ARGS*/,
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[0] = m.IsTrue(v[85])
																														}
																														if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																															// RHS
																															return i.stepRHS570(v, bv, config)
																														}
																													} else {
																														return i.stepLookups(c, config, 20) // reapply
																													}
																												}
																											}
																										}
																									}
																								}
																							} else {
																								return i.stepLookups(c, config, 20) // reapply
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 633
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTCODE = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							// KVariable ARGS = v[8]
							v[9] = i.Model.KApplyArg(v[4], 4)
							if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[9]
								// KVariable DotVar1 = v[3]
								v[10] = i.Model.KApplyArg(c, 1)
								if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[11] = i.Model.KApplyArg(v[10], 0)
									if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[14] = i.Model.KApplyArg(v[12], 0)
											if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[13]
												v[15] = i.Model.KApplyArg(c, 2)
												// KVariable _39 = v[15]
												v[16] = i.Model.KApplyArg(c, 3)
												// KVariable _40 = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable SCHED = v[18]
													v[19] = i.Model.KApplyArg(c, 5)
													// KVariable _41 = v[19]
													v[20] = i.Model.KApplyArg(c, 6)
													// KVariable _42 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													if v[21]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
														v[22] = i.Model.KApplyArg(v[21], 0)
														// KVariable _13 = v[22]
														v[23] = i.Model.KApplyArg(v[21], 1)
														// KVariable _14 = v[23]
														v[24] = i.Model.KApplyArg(v[21], 2)
														// KVariable _15 = v[24]
														v[25] = i.Model.KApplyArg(v[21], 3)
														// KVariable _16 = v[25]
														v[26] = i.Model.KApplyArg(v[21], 4)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL),_11,_12)
															v[27] = i.Model.KApplyArg(v[26], 0)
															// KVariable _0 = v[27]
															v[28] = i.Model.KApplyArg(v[26], 1)
															// KVariable _1 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 2)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[26], 3)
															if v[30]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																v[31] = i.Model.KApplyArg(v[30], 0)
																if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable ACCT = v[31]
																	v[32] = i.Model.KApplyArg(v[26], 4)
																	// KVariable _3 = v[32]
																	v[33] = i.Model.KApplyArg(v[26], 5)
																	// KVariable _4 = v[33]
																	v[34] = i.Model.KApplyArg(v[26], 6)
																	// KVariable _5 = v[34]
																	v[35] = i.Model.KApplyArg(v[26], 7)
																	// KVariable _6 = v[35]
																	v[36] = i.Model.KApplyArg(v[26], 8)
																	// KVariable _7 = v[36]
																	v[37] = i.Model.KApplyArg(v[26], 9)
																	// KVariable _8 = v[37]
																	v[38] = i.Model.KApplyArg(v[26], 10)
																	// KVariable _9 = v[38]
																	v[39] = i.Model.KApplyArg(v[26], 11)
																	// KVariable _10 = v[39]
																	v[40] = i.Model.KApplyArg(v[26], 12)
																	if v[40]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																		v[41] = i.Model.KApplyArg(v[40], 0)
																		if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable GAVAIL = v[41]
																			v[42] = i.Model.KApplyArg(v[26], 13)
																			// KVariable _11 = v[42]
																			v[43] = i.Model.KApplyArg(v[26], 14)
																			// KVariable _12 = v[43]
																			v[44] = i.Model.KApplyArg(v[21], 5)
																			// KVariable _17 = v[44]
																			v[45] = i.Model.KApplyArg(v[21], 6)
																			// KVariable _18 = v[45]
																			v[46] = i.Model.KApplyArg(v[21], 7)
																			// KVariable _19 = v[46]
																			v[47] = i.Model.KApplyArg(v[21], 8)
																			// KVariable _20 = v[47]
																			v[48] = i.Model.KApplyArg(v[21], 9)
																			// KVariable _21 = v[48]
																			v[49] = i.Model.KApplyArg(v[21], 10)
																			// KVariable _22 = v[49]
																			v[50] = i.Model.KApplyArg(v[21], 11)
																			// KVariable _23 = v[50]
																			v[51] = i.Model.KApplyArg(v[21], 12)
																			// KVariable _24 = v[51]
																			v[52] = i.Model.KApplyArg(v[21], 13)
																			// KVariable _25 = v[52]
																			v[53] = i.Model.KApplyArg(v[21], 14)
																			// KVariable _26 = v[53]
																			v[54] = i.Model.KApplyArg(c, 8)
																			if v[54]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_35,`<accounts>`(_43),_36,_37,_38)
																				v[55] = i.Model.KApplyArg(v[54], 0)
																				// KVariable _35 = v[55]
																				v[56] = i.Model.KApplyArg(v[54], 1)
																				if v[56]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_43)
																					v[57] = i.Model.KApplyArg(v[56], 0)
																					// KVariable _43 = v[57]
																					v[58] = i.Model.KApplyArg(v[54], 2)
																					// KVariable _36 = v[58]
																					v[59] = i.Model.KApplyArg(v[54], 3)
																					// KVariable _37 = v[59]
																					v[60] = i.Model.KApplyArg(v[54], 4)
																					// KVariable _38 = v[60]
																					// rule #633
																					// source: iele.k @1482
																					// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(STATUS,ACCTOUT,ACCTCODE,ARGS,VALUE))=>`#checkCreate___IELE`(ACCT,VALUE)~>`#create_______IELE`(ACCT,#newAddr(ACCT,NONCE),`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),GAVAIL,#allBut64th(GAVAIL)),VALUE,CODE,ARGS)~>`#codeDeposit_______IELE`(#newAddr(ACCT,NONCE),#contractSize(CODE,#mainContract(CODE)),CODE,STATUS,ACCTOUT,#token("false","Bool"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_39,_40,`<schedule>`(SCHED),_41,_42,`<iele>`(_13,_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,`<gas>`(GAVAIL=>`#if_#then_#else_#fi_K-EQUAL`(`_<<_>>_IELE-GAS`(`Gstaticcalldepth_IELE-GAS`(.KList),SCHED),#token("0","Int"),`_/Int__INT`(GAVAIL,#token("64","Int")))),_11,_12),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_35,`<accounts>`(_43),_36,_37,_38)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_43,`<acctID>`(ACCT))),#match(`<account>`(`<acctID>`(ACCTCODE),_31,`<code>`(CODE),_32,_33,_34),`Map:lookup`(_43,`<acctID>`(ACCTCODE)))),#match(DotVar5,`_[_<-undef]`(`_[_<-undef]`(_43,`<acctID>`(ACCT)),`<acctID>`(ACCTCODE)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),isInt(VALUE)),isLValue(ACCTOUT)),isContract(CODE)),isInt(ACCT)),isSchedule(SCHED)),isInt(NONCE)),isInt(ACCTCODE)),isInts(ARGS)),isInt(GAVAIL)),`_andBool_`(`_=/=Int__INT`(ACCT,ACCTCODE),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))) ensures #token("true","Bool") [UNIQUE_ID(a6964b1a991ebba9b2a31b97459c310e0b891028806b9a069d1fcc07fda733f1) contentStartColumn(10) contentStartLine(1482) org.kframework.attributes.Location(Location(1482,10,1501,67)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																					if !matched {
																						// LOOKUPS
																						if guard < 21 {
																							// lookup:#match(`<account>`(`<acctID>`(ACCT),_27,_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_43,`<acctID>`(ACCT)))
																							v[61], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_43,`<acctID>`(ACCT))
																								v[57] /*_43*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[31] /*ACCT*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[62] = v[61]
																							if v[62] == m.InternedBottom {
																								return i.stepLookups(c, config, 21) // reapply
																							}
																							if v[62]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_27,_28,_29,`<nonce>`(NONCE),_30)
																								v[63] = i.Model.KApplyArg(v[62], 0)
																								if v[63]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																									v[64] = i.Model.KApplyArg(v[63], 0)
																									if i.Model.Equals(v[64], v[31] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																										v[65] = i.Model.KApplyArg(v[62], 1)
																										v[66 /*_27*/] = v[65] // lhs KVariable _27
																										v[67] = i.Model.KApplyArg(v[62], 2)
																										v[68 /*_28*/] = v[67] // lhs KVariable _28
																										v[69] = i.Model.KApplyArg(v[62], 3)
																										v[70 /*_29*/] = v[69] // lhs KVariable _29
																										v[71] = i.Model.KApplyArg(v[62], 4)
																										if v[71]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																											v[72] = i.Model.KApplyArg(v[71], 0)
																											if i.tempTypeVar = v[72] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												v[73 /*NONCE*/] = v[72] // NONCE
																												v[74] = i.Model.KApplyArg(v[62], 5)
																												v[75 /*_30*/] = v[74] // lhs KVariable _30
																												// lookup:#match(`<account>`(`<acctID>`(ACCTCODE),_31,`<code>`(CODE),_32,_33,_34),`Map:lookup`(_43,`<acctID>`(ACCTCODE)))
																												v[76], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_43,`<acctID>`(ACCTCODE))
																													v[57] /*_43*/,
																													i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																														v[7] /*ACCTCODE*/,
																													),
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												v[77] = v[76]
																												if v[77] == m.InternedBottom {
																													return i.stepLookups(c, config, 21) // reapply
																												}
																												if v[77]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTCODE),_31,`<code>`(CODE),_32,_33,_34)
																													v[78] = i.Model.KApplyArg(v[77], 0)
																													if v[78]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTCODE)
																														v[79] = i.Model.KApplyArg(v[78], 0)
																														if i.Model.Equals(v[79], v[7] /*ACCTCODE*/) { // lhs KVariable, which reappears:ACCTCODE
																															v[80] = i.Model.KApplyArg(v[77], 1)
																															v[81 /*_31*/] = v[80] // lhs KVariable _31
																															v[82] = i.Model.KApplyArg(v[77], 2)
																															if v[82]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																																v[83] = i.Model.KApplyArg(v[82], 0)
																																v[84 /*CODE*/] = v[83] // lhs KVariable CODE
																																v[85] = i.Model.KApplyArg(v[77], 3)
																																v[86 /*_32*/] = v[85] // lhs KVariable _32
																																v[87] = i.Model.KApplyArg(v[77], 4)
																																v[88 /*_33*/] = v[87] // lhs KVariable _33
																																v[89] = i.Model.KApplyArg(v[77], 5)
																																v[90 /*_34*/] = v[89] // lhs KVariable _34
																																// lookup:#match(DotVar5,`_[_<-undef]`(`_[_<-undef]`(_43,`<acctID>`(ACCT)),`<acctID>`(ACCTCODE)))
																																v[92], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_43,`<acctID>`(ACCT))
																																	v[57] /*_43*/,
																																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																		v[31] /*ACCT*/,
																																	),
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																v[91], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(`_[_<-undef]`(_43,`<acctID>`(ACCT)),`<acctID>`(ACCTCODE))
																																	v[92],
																																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																		v[7] /*ACCTCODE*/,
																																	),
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																v[93] = v[91]
																																if v[93] == m.InternedBottom {
																																	return i.stepLookups(c, config, 21) // reapply
																																}
																																if v[93]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																	v[94 /*DotVar5*/] = v[93] // DotVar5
																																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE)),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(ACCT,ACCTCODE),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))))
																																	v[95], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																																		v[5] /*STATUS*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	// `_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT))
																																	bv[5] = m.IsTrue(v[95]) /* && */ /* rhs precomputed isInt(VALUE) */ 
																																	if bv[5] {
																																		v[96], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																																			v[6] /*ACCTOUT*/,
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[5] = m.IsTrue(v[96])
																																	}
																																	// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE))
																																	bv[4] = bv[5]
																																	if bv[4] {
																																		v[97], i.evalErr = i.evalIsContract( // isContract(CODE)
																																			v[84 /*CODE*/],
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[4] = m.IsTrue(v[97])
																																	}
																																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE)),#token("true","Bool")),isSchedule(SCHED))
																																	bv[3] = bv[4] /* && */ /* rhs precomputed isInt(ACCT) */ 
																																	if bv[3] {
																																		v[98], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																			v[18] /*SCHED*/,
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[3] = m.IsTrue(v[98])
																																	}
																																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE)),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE))
																																	bv[2] = bv[3]
																																	if bv[2] {
																																		v[99], i.evalErr = i.evalIsInt( // isInt(NONCE)
																																			v[73 /*NONCE*/],
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[2] = m.IsTrue(v[99])
																																	}
																																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE)),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),#token("true","Bool")),isInts(ARGS))
																																	bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCTCODE) */ 
																																	if bv[1] {
																																		v[100], i.evalErr = i.evalIsInts( // isInts(ARGS)
																																			v[8] /*ARGS*/,
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		bv[1] = m.IsTrue(v[100])
																																	}
																																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(STATUS),#token("true","Bool")),isLValue(ACCTOUT)),isContract(CODE)),#token("true","Bool")),isSchedule(SCHED)),isInt(NONCE)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(ACCT,ACCTCODE),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))
																																	bv[0] = bv[1] /* && */ /* rhs precomputed isInt(GAVAIL) */ 
																																	if bv[0] {
																																		v[101], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(ACCT,ACCTCODE)
																																			v[31] /*ACCT*/,
																																			v[7] /*ACCTCODE*/,
																																			config, -1)
																																		if i.evalErr != nil {
																																			return m.NoResult, i.evalErr
																																		}
																																		// `_andBool_`(`_=/=Int__INT`(ACCT,ACCTCODE),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))
																																		bv[6] = m.IsTrue(v[101])
																																		if bv[6] {
																																			v[102], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))
																																				v[84 /*CODE*/],
																																				i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
																																				),
																																				config, -1)
																																			if i.evalErr != nil {
																																				return m.NoResult, i.evalErr
																																			}
																																			bv[6] = m.IsTrue(v[102])
																																		}
																																		bv[0] = bv[6]
																																	}
																																	if /* rhs precomputed lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																																		// RHS
																																		return i.stepRHS633(v, bv, config)
																																	}
																																} else {
																																	return i.stepLookups(c, config, 21) // reapply
																																}
																															}
																														}
																													}
																												} else {
																													return i.stepLookups(c, config, 21) // reapply
																												}
																											}
																										}
																									}
																								}
																							} else {
																								return i.stepLookups(c, config, 21) // reapply
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 590
						// KVariable _415 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable _416 = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTCODE = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							// KVariable _417 = v[8]
							v[9] = i.Model.KApplyArg(v[4], 4)
							// KVariable _418 = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _8 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _9 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _10 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _11 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _12 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[20]
											v[21] = i.Model.KApplyArg(c, 8)
											if v[21]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
												v[22] = i.Model.KApplyArg(v[21], 0)
												// KVariable _4 = v[22]
												v[23] = i.Model.KApplyArg(v[21], 1)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
													v[24] = i.Model.KApplyArg(v[23], 0)
													// KVariable _14 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 2)
													// KVariable _5 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 3)
													// KVariable _6 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 4)
													// KVariable _7 = v[27]
													// rule #590
													// source: iele.k @1503
													// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCTCODE)``~>`#exec__IELE-INFRASTRUCTURE`(`_,_=copycreate_(_)send__IELE-COMMON`(_415,_416,ACCTCODE,_417,_418))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTCODE),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTCODE))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTCODE)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_416),isOperand(_418)),isLValue(_415)),isOperands(_417)),isInt(ACCTCODE))) ensures #token("true","Bool") [UNIQUE_ID(5de398fdcaee9a6da6457af2fd7e2a797f1b954774f176971a317553d377778e) contentStartColumn(10) contentStartLine(1503) org.kframework.attributes.Location(Location(1503,10,1508,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 22 {
															// lookup:#match(`<account>`(`<acctID>`(ACCTCODE),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTCODE)))
															v[28], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCTCODE))
																v[24] /*_14*/,
																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																	v[7] /*ACCTCODE*/,
																),
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[29] = v[28]
															if v[29] == m.InternedBottom {
																return i.stepLookups(c, config, 22) // reapply
															}
															if v[29]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTCODE),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3)
																v[30] = i.Model.KApplyArg(v[29], 0)
																if v[30]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTCODE)
																	v[31] = i.Model.KApplyArg(v[30], 0)
																	if i.Model.Equals(v[31], v[7] /*ACCTCODE*/) { // lhs KVariable, which reappears:ACCTCODE
																		v[32] = i.Model.KApplyArg(v[29], 1)
																		v[33 /*_0*/] = v[32] // lhs KVariable _0
																		v[34] = i.Model.KApplyArg(v[29], 2)
																		if v[34]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(`.List{"contractDefinitionList"}`(.KList))
																			v[35] = i.Model.KApplyArg(v[34], 0)
																			if v[35]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																				v[36] = i.Model.KApplyArg(v[29], 3)
																				v[37 /*_1*/] = v[36] // lhs KVariable _1
																				v[38] = i.Model.KApplyArg(v[29], 4)
																				v[39 /*_2*/] = v[38] // lhs KVariable _2
																				v[40] = i.Model.KApplyArg(v[29], 5)
																				v[41 /*_3*/] = v[40] // lhs KVariable _3
																				// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTCODE)))
																				v[42], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCTCODE))
																					v[24] /*_14*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[7] /*ACCTCODE*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[43] = v[42]
																				if v[43] == m.InternedBottom {
																					return i.stepLookups(c, config, 22) // reapply
																				}
																				if v[43]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																					v[44 /*DotVar3*/] = v[43] // DotVar3
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isLValue(_416),isOperand(_418)),isLValue(_415)),isOperands(_417)),#token("true","Bool")))
																					v[45], i.evalErr = i.evalIsLValue( // isLValue(_416)
																						v[6] /*_416*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(isLValue(_416),isOperand(_418))
																					bv[2] = m.IsTrue(v[45])
																					if bv[2] {
																						v[46], i.evalErr = i.evalIsOperand( // isOperand(_418)
																							v[9] /*_418*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[2] = m.IsTrue(v[46])
																					}
																					// `_andBool_`(`_andBool_`(isLValue(_416),isOperand(_418)),isLValue(_415))
																					bv[1] = bv[2]
																					if bv[1] {
																						v[47], i.evalErr = i.evalIsLValue( // isLValue(_415)
																							v[5] /*_415*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[1] = m.IsTrue(v[47])
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(isLValue(_416),isOperand(_418)),isLValue(_415)),isOperands(_417))
																					bv[0] = bv[1]
																					if bv[0] {
																						v[48], i.evalErr = i.evalIsOperands( // isOperands(_417)
																							v[8] /*_417*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[48])
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(ACCTCODE) */  {
																						// RHS
																						return i.stepRHS590(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 22) // reapply
																				}
																			}
																		}
																	}
																}
															} else {
																return i.stepLookups(c, config, 22) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 574, 584
					if v[4]&kapplyMatchMask == kapplyMatchLblSelfdestructXuXuIELEXhyphenCOMMON1 { // `selfdestruct__IELE-COMMON`(ACCT)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 574
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _34 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _35 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											if v[13]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[14] = i.Model.KApplyArg(v[13], 0)
												// KVariable SCHED = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _36 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _37 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_448),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38),DotVar4,`<refund>`(RF)),_17,_18,_19,_20,_21,_22,_23,_24,_25)
													v[18] = i.Model.KApplyArg(v[17], 0)
													if v[18]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_448)
														v[19] = i.Model.KApplyArg(v[18], 0)
														// KVariable _448 = v[19]
														v[20] = i.Model.KApplyArg(v[17], 1)
														// KVariable _14 = v[20]
														v[21] = i.Model.KApplyArg(v[17], 2)
														// KVariable _15 = v[21]
														v[22] = i.Model.KApplyArg(v[17], 3)
														// KVariable _16 = v[22]
														v[23] = i.Model.KApplyArg(v[17], 4)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
															v[24] = i.Model.KApplyArg(v[23], 0)
															// KVariable _0 = v[24]
															v[25] = i.Model.KApplyArg(v[23], 1)
															// KVariable _1 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 2)
															// KVariable _2 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 3)
															if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																v[28] = i.Model.KApplyArg(v[27], 0)
																if i.Model.Equals(v[28], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[29] = i.Model.KApplyArg(v[23], 4)
																	// KVariable _3 = v[29]
																	v[30] = i.Model.KApplyArg(v[23], 5)
																	// KVariable _4 = v[30]
																	v[31] = i.Model.KApplyArg(v[23], 6)
																	// KVariable _5 = v[31]
																	v[32] = i.Model.KApplyArg(v[23], 7)
																	// KVariable _6 = v[32]
																	v[33] = i.Model.KApplyArg(v[23], 8)
																	// KVariable _7 = v[33]
																	v[34] = i.Model.KApplyArg(v[23], 9)
																	// KVariable _8 = v[34]
																	v[35] = i.Model.KApplyArg(v[23], 10)
																	// KVariable _9 = v[35]
																	v[36] = i.Model.KApplyArg(v[23], 11)
																	// KVariable _10 = v[36]
																	v[37] = i.Model.KApplyArg(v[23], 12)
																	// KVariable _11 = v[37]
																	v[38] = i.Model.KApplyArg(v[23], 13)
																	// KVariable _12 = v[38]
																	v[39] = i.Model.KApplyArg(v[23], 14)
																	// KVariable _13 = v[39]
																	v[40] = i.Model.KApplyArg(v[17], 5)
																	if v[40]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(`<selfDestruct>`(_38),DotVar4,`<refund>`(RF))
																		v[41] = i.Model.KApplyArg(v[40], 0)
																		if v[41]&kapplyMatchMask == kapplyMatchLblXltselfDestructXgt1 { // `<selfDestruct>`(_38)
																			v[42] = i.Model.KApplyArg(v[41], 0)
																			// KVariable _38 = v[42]
																			v[43] = i.Model.KApplyArg(v[40], 1)
																			// KVariable DotVar4 = v[43]
																			v[44] = i.Model.KApplyArg(v[40], 2)
																			if v[44]&kapplyMatchMask == kapplyMatchLblXltrefundXgt1 { // `<refund>`(RF)
																				v[45] = i.Model.KApplyArg(v[44], 0)
																				if i.tempTypeVar = v[45] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable RF = v[45]
																					v[46] = i.Model.KApplyArg(v[17], 6)
																					// KVariable _17 = v[46]
																					v[47] = i.Model.KApplyArg(v[17], 7)
																					// KVariable _18 = v[47]
																					v[48] = i.Model.KApplyArg(v[17], 8)
																					// KVariable _19 = v[48]
																					v[49] = i.Model.KApplyArg(v[17], 9)
																					// KVariable _20 = v[49]
																					v[50] = i.Model.KApplyArg(v[17], 10)
																					// KVariable _21 = v[50]
																					v[51] = i.Model.KApplyArg(v[17], 11)
																					// KVariable _22 = v[51]
																					v[52] = i.Model.KApplyArg(v[17], 12)
																					// KVariable _23 = v[52]
																					v[53] = i.Model.KApplyArg(v[17], 13)
																					// KVariable _24 = v[53]
																					v[54] = i.Model.KApplyArg(v[17], 14)
																					// KVariable _25 = v[54]
																					v[55] = i.Model.KApplyArg(c, 8)
																					if v[55]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_30,`<accounts>`(_39),_31,_32,_33)
																						v[56] = i.Model.KApplyArg(v[55], 0)
																						// KVariable _30 = v[56]
																						v[57] = i.Model.KApplyArg(v[55], 1)
																						if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_39)
																							v[58] = i.Model.KApplyArg(v[57], 0)
																							// KVariable _39 = v[58]
																							v[59] = i.Model.KApplyArg(v[55], 2)
																							// KVariable _31 = v[59]
																							v[60] = i.Model.KApplyArg(v[55], 3)
																							// KVariable _32 = v[60]
																							v[61] = i.Model.KApplyArg(v[55], 4)
																							// KVariable _33 = v[61]
																							// rule #574
																							// source: iele.k @1546
																							// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(ACCT))=>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(`<output>`(_448=>`.List{"operandList"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38=>`_Set_`(SDS,`SetItem`(ACCT))),DotVar4,`<refund>`(RF=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))))),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_30,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(#token("0","Int")),_26,_27,_28,_29)),DotVar6)),_31,_32,_33)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(SDS,_38),#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))),#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInts(_448),isSet(SDS)),isInt(BALFROM)),isInt(RF)),isInt(ACCT)),isSchedule(SCHED))) ensures #token("true","Bool") [UNIQUE_ID(2fd83d35c80a4bc6d60beff77167db51166bcab02629fe83fcb351a8c60ea15a) contentStartColumn(10) contentStartLine(1546) org.kframework.attributes.Location(Location(1546,10,1556,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																							if !matched {
																								// LOOKUPS
																								if guard < 23 {
																									// lookup:#match(SDS,_38)
																									v[62] = v[42] /*_38*/
																									if v[62] == m.InternedBottom {
																										return i.stepLookups(c, config, 23) // reapply
																									}
																									if v[62]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																										v[63 /*SDS*/] = v[62] // SDS
																										// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))
																										v[64], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<acctID>`(ACCT))
																											v[58] /*_39*/,
																											i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																												v[5] /*ACCT*/,
																											),
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[65] = v[64]
																										if v[65] == m.InternedBottom {
																											return i.stepLookups(c, config, 23) // reapply
																										}
																										if v[65]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29)
																											v[66] = i.Model.KApplyArg(v[65], 0)
																											if v[66]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																												v[67] = i.Model.KApplyArg(v[66], 0)
																												if i.Model.Equals(v[67], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																													v[68] = i.Model.KApplyArg(v[65], 1)
																													if v[68]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BALFROM)
																														v[69] = i.Model.KApplyArg(v[68], 0)
																														if i.tempTypeVar = v[69] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																															v[70 /*BALFROM*/] = v[69] // BALFROM
																															v[71] = i.Model.KApplyArg(v[65], 2)
																															v[72 /*_26*/] = v[71] // lhs KVariable _26
																															v[73] = i.Model.KApplyArg(v[65], 3)
																															v[74 /*_27*/] = v[73] // lhs KVariable _27
																															v[75] = i.Model.KApplyArg(v[65], 4)
																															v[76 /*_28*/] = v[75] // lhs KVariable _28
																															v[77] = i.Model.KApplyArg(v[65], 5)
																															v[78 /*_29*/] = v[77] // lhs KVariable _29
																															// lookup:#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))
																															v[79], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<acctID>`(ACCT))
																																v[58] /*_39*/,
																																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																	v[5] /*ACCT*/,
																																),
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															v[80] = v[79]
																															if v[80] == m.InternedBottom {
																																return i.stepLookups(c, config, 23) // reapply
																															}
																															if v[80]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																v[81 /*DotVar6*/] = v[80] // DotVar6
																																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInts(_448),isSet(SDS)),isInt(BALFROM)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)))
																																v[82], i.evalErr = i.evalIsInts( // isInts(_448)
																																	v[19] /*_448*/,
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																// `_andBool_`(isInts(_448),isSet(SDS))
																																bv[2] = m.IsTrue(v[82])
																																if bv[2] {
																																	v[83], i.evalErr = i.evalIsSet( // isSet(SDS)
																																		v[63 /*SDS*/],
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[2] = m.IsTrue(v[83])
																																}
																																// `_andBool_`(`_andBool_`(isInts(_448),isSet(SDS)),isInt(BALFROM))
																																bv[1] = bv[2]
																																if bv[1] {
																																	v[84], i.evalErr = i.evalIsInt( // isInt(BALFROM)
																																		v[70 /*BALFROM*/],
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[1] = m.IsTrue(v[84])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInts(_448),isSet(SDS)),isInt(BALFROM)),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED))
																																bv[0] = bv[1] /* && */ /* rhs precomputed isInt(RF) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																																if bv[0] {
																																	v[85], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																		v[14] /*SCHED*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[0] = m.IsTrue(v[85])
																																}
																																if /* rhs precomputed lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																																	// RHS
																																	return i.stepRHS574(v, bv, config)
																																}
																															} else {
																																return i.stepLookups(c, config, 23) // reapply
																															}
																														}
																													}
																												}
																											}
																										} else {
																											return i.stepLookups(c, config, 23) // reapply
																										}
																									} else {
																										return i.stepLookups(c, config, 23) // reapply
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 584
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _34 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _35 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											if v[13]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[14] = i.Model.KApplyArg(v[13], 0)
												// KVariable SCHED = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _36 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _37 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_449),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38),DotVar4,`<refund>`(RF)),_17,_18,_19,_20,_21,_22,_23,_24,_25)
													v[18] = i.Model.KApplyArg(v[17], 0)
													if v[18]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_449)
														v[19] = i.Model.KApplyArg(v[18], 0)
														// KVariable _449 = v[19]
														v[20] = i.Model.KApplyArg(v[17], 1)
														// KVariable _14 = v[20]
														v[21] = i.Model.KApplyArg(v[17], 2)
														// KVariable _15 = v[21]
														v[22] = i.Model.KApplyArg(v[17], 3)
														// KVariable _16 = v[22]
														v[23] = i.Model.KApplyArg(v[17], 4)
														if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
															v[24] = i.Model.KApplyArg(v[23], 0)
															// KVariable _0 = v[24]
															v[25] = i.Model.KApplyArg(v[23], 1)
															// KVariable _1 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 2)
															// KVariable _2 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 3)
															if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																v[28] = i.Model.KApplyArg(v[27], 0)
																if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable ACCT = v[28]
																	v[29] = i.Model.KApplyArg(v[23], 4)
																	// KVariable _3 = v[29]
																	v[30] = i.Model.KApplyArg(v[23], 5)
																	// KVariable _4 = v[30]
																	v[31] = i.Model.KApplyArg(v[23], 6)
																	// KVariable _5 = v[31]
																	v[32] = i.Model.KApplyArg(v[23], 7)
																	// KVariable _6 = v[32]
																	v[33] = i.Model.KApplyArg(v[23], 8)
																	// KVariable _7 = v[33]
																	v[34] = i.Model.KApplyArg(v[23], 9)
																	// KVariable _8 = v[34]
																	v[35] = i.Model.KApplyArg(v[23], 10)
																	// KVariable _9 = v[35]
																	v[36] = i.Model.KApplyArg(v[23], 11)
																	// KVariable _10 = v[36]
																	v[37] = i.Model.KApplyArg(v[23], 12)
																	// KVariable _11 = v[37]
																	v[38] = i.Model.KApplyArg(v[23], 13)
																	// KVariable _12 = v[38]
																	v[39] = i.Model.KApplyArg(v[23], 14)
																	// KVariable _13 = v[39]
																	v[40] = i.Model.KApplyArg(v[17], 5)
																	if v[40]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(`<selfDestruct>`(_38),DotVar4,`<refund>`(RF))
																		v[41] = i.Model.KApplyArg(v[40], 0)
																		if v[41]&kapplyMatchMask == kapplyMatchLblXltselfDestructXgt1 { // `<selfDestruct>`(_38)
																			v[42] = i.Model.KApplyArg(v[41], 0)
																			// KVariable _38 = v[42]
																			v[43] = i.Model.KApplyArg(v[40], 1)
																			// KVariable DotVar4 = v[43]
																			v[44] = i.Model.KApplyArg(v[40], 2)
																			if v[44]&kapplyMatchMask == kapplyMatchLblXltrefundXgt1 { // `<refund>`(RF)
																				v[45] = i.Model.KApplyArg(v[44], 0)
																				if i.tempTypeVar = v[45] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable RF = v[45]
																					v[46] = i.Model.KApplyArg(v[17], 6)
																					// KVariable _17 = v[46]
																					v[47] = i.Model.KApplyArg(v[17], 7)
																					// KVariable _18 = v[47]
																					v[48] = i.Model.KApplyArg(v[17], 8)
																					// KVariable _19 = v[48]
																					v[49] = i.Model.KApplyArg(v[17], 9)
																					// KVariable _20 = v[49]
																					v[50] = i.Model.KApplyArg(v[17], 10)
																					// KVariable _21 = v[50]
																					v[51] = i.Model.KApplyArg(v[17], 11)
																					// KVariable _22 = v[51]
																					v[52] = i.Model.KApplyArg(v[17], 12)
																					// KVariable _23 = v[52]
																					v[53] = i.Model.KApplyArg(v[17], 13)
																					// KVariable _24 = v[53]
																					v[54] = i.Model.KApplyArg(v[17], 14)
																					// KVariable _25 = v[54]
																					v[55] = i.Model.KApplyArg(c, 8)
																					if v[55]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_30,`<accounts>`(_39),_31,_32,_33)
																						v[56] = i.Model.KApplyArg(v[55], 0)
																						// KVariable _30 = v[56]
																						v[57] = i.Model.KApplyArg(v[55], 1)
																						if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_39)
																							v[58] = i.Model.KApplyArg(v[57], 0)
																							// KVariable _39 = v[58]
																							v[59] = i.Model.KApplyArg(v[55], 2)
																							// KVariable _31 = v[59]
																							v[60] = i.Model.KApplyArg(v[55], 3)
																							// KVariable _32 = v[60]
																							v[61] = i.Model.KApplyArg(v[55], 4)
																							// KVariable _33 = v[61]
																							// rule #584
																							// source: iele.k @1533
																							// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`selfdestruct__IELE-COMMON`(ACCTTO))=>`#transferFunds____IELE-INFRASTRUCTURE`(ACCT,ACCTTO,BALFROM)~>`#end_IELE-INFRASTRUCTURE`(.KList)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(`<output>`(_449=>`.List{"operandList"}`(.KList)),_14,_15,_16,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(`<selfDestruct>`(_38=>`_Set_`(SDS,`SetItem`(ACCT))),DotVar4,`<refund>`(RF=>`#if_#then_#else_#fi_K-EQUAL`(`Set:in`(ACCT,SDS),RF,`_+Int_`(RF,`_<_>_IELE-GAS`(`Rselfdestruct_IELE-GAS`(.KList),SCHED))))),_17,_18,_19,_20,_21,_22,_23,_24,_25),`<network>`(_30,`<accounts>`(_39),_31,_32,_33)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(SDS,_38),#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))),#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(BALFROM),isSet(SDS)),isInts(_449)),isInt(RF)),isInt(ACCTTO)),isInt(ACCT)),isSchedule(SCHED)),`_=/=Int__INT`(ACCT,ACCTTO))) ensures #token("true","Bool") [UNIQUE_ID(ba203c3b0592b5433f232f0c527f42779128c019343f2dcdfd1b9183d232c48c) contentStartColumn(10) contentStartLine(1533) org.kframework.attributes.Location(Location(1533,10,1544,34)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																							if !matched {
																								// LOOKUPS
																								if guard < 24 {
																									// lookup:#match(SDS,_38)
																									v[62] = v[42] /*_38*/
																									if v[62] == m.InternedBottom {
																										return i.stepLookups(c, config, 24) // reapply
																									}
																									if v[62]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																										v[63 /*SDS*/] = v[62] // SDS
																										// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29),`Map:lookup`(_39,`<acctID>`(ACCT)))
																										v[64], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<acctID>`(ACCT))
																											v[58] /*_39*/,
																											i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																												v[28] /*ACCT*/,
																											),
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[65] = v[64]
																										if v[65] == m.InternedBottom {
																											return i.stepLookups(c, config, 24) // reapply
																										}
																										if v[65]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BALFROM),_26,_27,_28,_29)
																											v[66] = i.Model.KApplyArg(v[65], 0)
																											if v[66]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																												v[67] = i.Model.KApplyArg(v[66], 0)
																												if i.Model.Equals(v[67], v[28] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																													v[68] = i.Model.KApplyArg(v[65], 1)
																													if v[68]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BALFROM)
																														v[69] = i.Model.KApplyArg(v[68], 0)
																														if i.tempTypeVar = v[69] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																															v[70 /*BALFROM*/] = v[69] // BALFROM
																															v[71] = i.Model.KApplyArg(v[65], 2)
																															v[72 /*_26*/] = v[71] // lhs KVariable _26
																															v[73] = i.Model.KApplyArg(v[65], 3)
																															v[74 /*_27*/] = v[73] // lhs KVariable _27
																															v[75] = i.Model.KApplyArg(v[65], 4)
																															v[76 /*_28*/] = v[75] // lhs KVariable _28
																															v[77] = i.Model.KApplyArg(v[65], 5)
																															v[78 /*_29*/] = v[77] // lhs KVariable _29
																															// lookup:#match(DotVar6,`_[_<-undef]`(_39,`<acctID>`(ACCT)))
																															v[79], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<acctID>`(ACCT))
																																v[58] /*_39*/,
																																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																	v[28] /*ACCT*/,
																																),
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															v[80] = v[79]
																															if v[80] == m.InternedBottom {
																																return i.stepLookups(c, config, 24) // reapply
																															}
																															if v[80]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																v[81 /*DotVar6*/] = v[80] // DotVar6
																																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(BALFROM),isSet(SDS)),isInts(_449)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),`_=/=Int__INT`(ACCT,ACCTTO)))
																																v[82], i.evalErr = i.evalIsInt( // isInt(BALFROM)
																																	v[70 /*BALFROM*/],
																																	config, -1)
																																if i.evalErr != nil {
																																	return m.NoResult, i.evalErr
																																}
																																// `_andBool_`(isInt(BALFROM),isSet(SDS))
																																bv[3] = m.IsTrue(v[82])
																																if bv[3] {
																																	v[83], i.evalErr = i.evalIsSet( // isSet(SDS)
																																		v[63 /*SDS*/],
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[3] = m.IsTrue(v[83])
																																}
																																// `_andBool_`(`_andBool_`(isInt(BALFROM),isSet(SDS)),isInts(_449))
																																bv[2] = bv[3]
																																if bv[2] {
																																	v[84], i.evalErr = i.evalIsInts( // isInts(_449)
																																		v[19] /*_449*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[2] = m.IsTrue(v[84])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(BALFROM),isSet(SDS)),isInts(_449)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED))
																																bv[1] = bv[2] /* && */ /* rhs precomputed isInt(RF) */  /* && */ /* rhs precomputed isInt(ACCTTO) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																																if bv[1] {
																																	v[85], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																		v[14] /*SCHED*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[1] = m.IsTrue(v[85])
																																}
																																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(BALFROM),isSet(SDS)),isInts(_449)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isSchedule(SCHED)),`_=/=Int__INT`(ACCT,ACCTTO))
																																bv[0] = bv[1]
																																if bv[0] {
																																	v[86], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(ACCT,ACCTTO)
																																		v[28] /*ACCT*/,
																																		v[5] /*ACCTTO*/,
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	bv[0] = m.IsTrue(v[86])
																																}
																																if /* rhs precomputed lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																																	// RHS
																																	return i.stepRHS584(v, bv, config)
																																}
																															} else {
																																return i.stepLookups(c, config, 24) // reapply
																															}
																														}
																													}
																												}
																											}
																										} else {
																											return i.stepLookups(c, config, 24) // reapply
																										}
																									} else {
																										return i.stepLookups(c, config, 24) // reapply
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 602
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable OFFSET = v[7]
							v[8] = i.Model.KApplyArg(v[4], 3)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable WIDTH = v[8]
								// KVariable DotVar1 = v[3]
								v[9] = i.Model.KApplyArg(c, 1)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[10] = i.Model.KApplyArg(v[9], 0)
									if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[13] = i.Model.KApplyArg(v[11], 0)
											if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[12]
												v[14] = i.Model.KApplyArg(c, 2)
												// KVariable _28 = v[14]
												v[15] = i.Model.KApplyArg(c, 3)
												// KVariable _29 = v[15]
												v[16] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[16]
												v[17] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[17]
												v[18] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[18]
												v[19] = i.Model.KApplyArg(c, 7)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[19], 1)
													// KVariable _15 = v[21]
													v[22] = i.Model.KApplyArg(v[19], 2)
													// KVariable _16 = v[22]
													v[23] = i.Model.KApplyArg(v[19], 3)
													// KVariable _17 = v[23]
													v[24] = i.Model.KApplyArg(v[19], 4)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														// KVariable _2 = v[27]
														v[28] = i.Model.KApplyArg(v[24], 3)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[24], 4)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[24], 5)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[24], 6)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[24], 7)
														// KVariable _7 = v[32]
														v[33] = i.Model.KApplyArg(v[24], 8)
														if v[33]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
															v[34] = i.Model.KApplyArg(v[33], 0)
															// KVariable _34 = v[34]
															v[35] = i.Model.KApplyArg(v[24], 9)
															// KVariable _8 = v[35]
															v[36] = i.Model.KApplyArg(v[24], 10)
															// KVariable _9 = v[36]
															v[37] = i.Model.KApplyArg(v[24], 11)
															// KVariable _10 = v[37]
															v[38] = i.Model.KApplyArg(v[24], 12)
															// KVariable _11 = v[38]
															v[39] = i.Model.KApplyArg(v[24], 13)
															// KVariable _12 = v[39]
															v[40] = i.Model.KApplyArg(v[24], 14)
															// KVariable _13 = v[40]
															v[41] = i.Model.KApplyArg(v[19], 5)
															// KVariable _18 = v[41]
															v[42] = i.Model.KApplyArg(v[19], 6)
															// KVariable _19 = v[42]
															v[43] = i.Model.KApplyArg(v[19], 7)
															// KVariable _20 = v[43]
															v[44] = i.Model.KApplyArg(v[19], 8)
															// KVariable _21 = v[44]
															v[45] = i.Model.KApplyArg(v[19], 9)
															// KVariable _22 = v[45]
															v[46] = i.Model.KApplyArg(v[19], 10)
															// KVariable _23 = v[46]
															v[47] = i.Model.KApplyArg(v[19], 11)
															// KVariable _24 = v[47]
															v[48] = i.Model.KApplyArg(v[19], 12)
															// KVariable _25 = v[48]
															v[49] = i.Model.KApplyArg(v[19], 13)
															// KVariable _26 = v[49]
															v[50] = i.Model.KApplyArg(v[19], 14)
															// KVariable _27 = v[50]
															v[51] = i.Model.KApplyArg(c, 8)
															// KVariable _33 = v[51]
															// rule #602
															// source: iele.k @758
															// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load_,_,__IELE-COMMON`(REG,CELL,OFFSET,WIDTH))=>`#load___IELE`(REG,`Bytes2Int`(bytesRange(LM,OFFSET,WIDTH),littleEndianBytes(.KList),unsignedBytes(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isInt(WIDTH)),isLValue(REG)),isInt(OFFSET)),isOperand(CELL))) ensures #token("true","Bool") [UNIQUE_ID(edbbc36687c6637f889769453669d51b8e44cc285f960c29a29663839b79ecc6) contentStartColumn(10) contentStartLine(758) org.kframework.attributes.Location(Location(758,10,759,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// LOOKUPS
																if guard < 25 {
																	// lookup:#match(LM,`Map:lookup`(_34,CELL))
																	v[52], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,CELL)
																		v[34] /*_34*/,
																		v[6] /*CELL*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[53] = v[52]
																	if v[53] == m.InternedBottom {
																		return i.stepLookups(c, config, 25) // reapply
																	}
																	if v[53]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																		v[54 /*LM*/] = v[53] // LM
																		// lookup:#match(DotVar4,`_[_<-undef]`(_34,CELL))
																		v[55], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,CELL)
																			v[34] /*_34*/,
																			v[6] /*CELL*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[56] = v[55]
																		if v[56] == m.InternedBottom {
																			return i.stepLookups(c, config, 25) // reapply
																		}
																		if v[56]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																			v[57 /*DotVar4*/] = v[56] // DotVar4
																			// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isLValue(REG)),#token("true","Bool")),isOperand(CELL)))
																			v[58], i.evalErr = i.evalIsBytes( // isBytes(LM)
																				v[54 /*LM*/],
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			// `_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isLValue(REG))
																			bv[1] = m.IsTrue(v[58]) /* && */ /* rhs precomputed isInt(WIDTH) */ 
																			if bv[1] {
																				v[59], i.evalErr = i.evalIsLValue( // isLValue(REG)
																					v[5] /*REG*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[1] = m.IsTrue(v[59])
																			}
																			// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isLValue(REG)),#token("true","Bool")),isOperand(CELL))
																			bv[0] = bv[1] /* && */ /* rhs precomputed isInt(OFFSET) */ 
																			if bv[0] {
																				v[60], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																					v[6] /*CELL*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				bv[0] = m.IsTrue(v[60])
																			}
																			if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																				// RHS
																				return i.stepRHS602(v, bv, config)
																			}
																		} else {
																			return i.stepLookups(c, config, 25) // reapply
																		}
																	} else {
																		return i.stepLookups(c, config, 25) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 607
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(REG,MEMINDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable MEMINDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[32] = i.Model.KApplyArg(v[31], 0)
													// KVariable _34 = v[32]
													v[33] = i.Model.KApplyArg(v[22], 9)
													// KVariable _8 = v[33]
													v[34] = i.Model.KApplyArg(v[22], 10)
													// KVariable _9 = v[34]
													v[35] = i.Model.KApplyArg(v[22], 11)
													// KVariable _10 = v[35]
													v[36] = i.Model.KApplyArg(v[22], 12)
													// KVariable _11 = v[36]
													v[37] = i.Model.KApplyArg(v[22], 13)
													// KVariable _12 = v[37]
													v[38] = i.Model.KApplyArg(v[22], 14)
													// KVariable _13 = v[38]
													v[39] = i.Model.KApplyArg(v[17], 5)
													// KVariable _18 = v[39]
													v[40] = i.Model.KApplyArg(v[17], 6)
													// KVariable _19 = v[40]
													v[41] = i.Model.KApplyArg(v[17], 7)
													// KVariable _20 = v[41]
													v[42] = i.Model.KApplyArg(v[17], 8)
													// KVariable _21 = v[42]
													v[43] = i.Model.KApplyArg(v[17], 9)
													// KVariable _22 = v[43]
													v[44] = i.Model.KApplyArg(v[17], 10)
													// KVariable _23 = v[44]
													v[45] = i.Model.KApplyArg(v[17], 11)
													// KVariable _24 = v[45]
													v[46] = i.Model.KApplyArg(v[17], 12)
													// KVariable _25 = v[46]
													v[47] = i.Model.KApplyArg(v[17], 13)
													// KVariable _26 = v[47]
													v[48] = i.Model.KApplyArg(v[17], 14)
													// KVariable _27 = v[48]
													v[49] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[49]
													// rule #607
													// source: iele.k @879
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sha3__IELE-COMMON`(REG,MEMINDEX))=>`#load___IELE`(REG,keccak(LM))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,MEMINDEX)),#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))),`_andBool_`(`_andBool_`(isLValue(REG),isOperand(MEMINDEX)),isBytes(LM))) ensures #token("true","Bool") [UNIQUE_ID(a415385544e527c5ccacb3e48e80f898335c6d86fef49279326702c56fc777d9) contentStartColumn(10) contentStartLine(879) org.kframework.attributes.Location(Location(879,10,880,54)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 26 {
															// lookup:#match(LM,`Map:lookup`(_34,MEMINDEX))
															v[50], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,MEMINDEX)
																v[32] /*_34*/,
																v[6] /*MEMINDEX*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[51] = v[50]
															if v[51] == m.InternedBottom {
																return i.stepLookups(c, config, 26) // reapply
															}
															if v[51]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[52 /*LM*/] = v[51] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))
																v[53], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,MEMINDEX)
																	v[32] /*_34*/,
																	v[6] /*MEMINDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[54] = v[53]
																if v[54] == m.InternedBottom {
																	return i.stepLookups(c, config, 26) // reapply
																}
																if v[54]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[55 /*DotVar4*/] = v[54] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isLValue(REG),isOperand(MEMINDEX)),isBytes(LM)))
																	v[56], i.evalErr = i.evalIsLValue( // isLValue(REG)
																		v[5] /*REG*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isLValue(REG),isOperand(MEMINDEX))
																	bv[1] = m.IsTrue(v[56])
																	if bv[1] {
																		v[57], i.evalErr = i.evalIsOperand( // isOperand(MEMINDEX)
																			v[6] /*MEMINDEX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[57])
																	}
																	// `_andBool_`(`_andBool_`(isLValue(REG),isOperand(MEMINDEX)),isBytes(LM))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[58], i.evalErr = i.evalIsBytes( // isBytes(LM)
																			v[52 /*LM*/],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[58])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS607(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 26) // reapply
																}
															} else {
																return i.stepLookups(c, config, 26) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 608, 637
					if v[4]&kapplyMatchMask == kapplyMatchLblStoreXuXcommaXuXcommaXuXcommaXuXuIELEXhyphenCOMMON4 { // `store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 608
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							// KVariable CELL = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable OFFSET = v[7]
								v[8] = i.Model.KApplyArg(v[4], 3)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable WIDTH = v[8]
									// KVariable DotVar1 = v[3]
									v[9] = i.Model.KApplyArg(c, 1)
									if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[10] = i.Model.KApplyArg(v[9], 0)
										if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[13] = i.Model.KApplyArg(v[11], 0)
												if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[12]
													v[14] = i.Model.KApplyArg(c, 2)
													// KVariable _28 = v[14]
													v[15] = i.Model.KApplyArg(c, 3)
													// KVariable _29 = v[15]
													v[16] = i.Model.KApplyArg(c, 4)
													// KVariable _30 = v[16]
													v[17] = i.Model.KApplyArg(c, 5)
													// KVariable _31 = v[17]
													v[18] = i.Model.KApplyArg(c, 6)
													// KVariable _32 = v[18]
													v[19] = i.Model.KApplyArg(c, 7)
													if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
														v[20] = i.Model.KApplyArg(v[19], 0)
														// KVariable _14 = v[20]
														v[21] = i.Model.KApplyArg(v[19], 1)
														// KVariable _15 = v[21]
														v[22] = i.Model.KApplyArg(v[19], 2)
														// KVariable _16 = v[22]
														v[23] = i.Model.KApplyArg(v[19], 3)
														// KVariable _17 = v[23]
														v[24] = i.Model.KApplyArg(v[19], 4)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
															v[25] = i.Model.KApplyArg(v[24], 0)
															// KVariable _0 = v[25]
															v[26] = i.Model.KApplyArg(v[24], 1)
															// KVariable _1 = v[26]
															v[27] = i.Model.KApplyArg(v[24], 2)
															// KVariable _2 = v[27]
															v[28] = i.Model.KApplyArg(v[24], 3)
															// KVariable _3 = v[28]
															v[29] = i.Model.KApplyArg(v[24], 4)
															// KVariable _4 = v[29]
															v[30] = i.Model.KApplyArg(v[24], 5)
															// KVariable _5 = v[30]
															v[31] = i.Model.KApplyArg(v[24], 6)
															// KVariable _6 = v[31]
															v[32] = i.Model.KApplyArg(v[24], 7)
															// KVariable _7 = v[32]
															v[33] = i.Model.KApplyArg(v[24], 8)
															if v[33]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																v[34] = i.Model.KApplyArg(v[33], 0)
																// KVariable _34 = v[34]
																v[35] = i.Model.KApplyArg(v[24], 9)
																// KVariable _8 = v[35]
																v[36] = i.Model.KApplyArg(v[24], 10)
																// KVariable _9 = v[36]
																v[37] = i.Model.KApplyArg(v[24], 11)
																// KVariable _10 = v[37]
																v[38] = i.Model.KApplyArg(v[24], 12)
																// KVariable _11 = v[38]
																v[39] = i.Model.KApplyArg(v[24], 13)
																// KVariable _12 = v[39]
																v[40] = i.Model.KApplyArg(v[24], 14)
																// KVariable _13 = v[40]
																v[41] = i.Model.KApplyArg(v[19], 5)
																// KVariable _18 = v[41]
																v[42] = i.Model.KApplyArg(v[19], 6)
																// KVariable _19 = v[42]
																v[43] = i.Model.KApplyArg(v[19], 7)
																// KVariable _20 = v[43]
																v[44] = i.Model.KApplyArg(v[19], 8)
																// KVariable _21 = v[44]
																v[45] = i.Model.KApplyArg(v[19], 9)
																// KVariable _22 = v[45]
																v[46] = i.Model.KApplyArg(v[19], 10)
																// KVariable _23 = v[46]
																v[47] = i.Model.KApplyArg(v[19], 11)
																// KVariable _24 = v[47]
																v[48] = i.Model.KApplyArg(v[19], 12)
																// KVariable _25 = v[48]
																v[49] = i.Model.KApplyArg(v[19], 13)
																// KVariable _26 = v[49]
																v[50] = i.Model.KApplyArg(v[19], 14)
																// KVariable _27 = v[50]
																v[51] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[51]
																// rule #608
																// source: iele.k @772
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(VALUE,CELL,OFFSET,WIDTH))=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(`_|->_`(CELL,assignBytesRange(LM,OFFSET,`Int2Bytes`(chop(WIDTH),twos(chop(WIDTH),VALUE),littleEndianBytes(.KList)))),DotVar4)),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isInt(WIDTH)),isInt(VALUE)),isInt(OFFSET)),isOperand(CELL))) ensures #token("true","Bool") [UNIQUE_ID(9ef5bcf50f74f6ce332b9c029412d6d9560ca1043c2078e8b1274e36436b0ab3) contentStartColumn(10) contentStartLine(772) org.kframework.attributes.Location(Location(772,10,773,122)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 27 {
																		// lookup:#match(LM,`Map:lookup`(_34,CELL))
																		v[52], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,CELL)
																			v[34] /*_34*/,
																			v[6] /*CELL*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[53] = v[52]
																		if v[53] == m.InternedBottom {
																			return i.stepLookups(c, config, 27) // reapply
																		}
																		if v[53]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																			v[54 /*LM*/] = v[53] // LM
																			// lookup:#match(DotVar4,`_[_<-undef]`(_34,CELL))
																			v[55], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,CELL)
																				v[34] /*_34*/,
																				v[6] /*CELL*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[56] = v[55]
																			if v[56] == m.InternedBottom {
																				return i.stepLookups(c, config, 27) // reapply
																			}
																			if v[56]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[57 /*DotVar4*/] = v[56] // DotVar4
																				// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(CELL)))
																				v[58], i.evalErr = i.evalIsBytes( // isBytes(LM)
																					v[54 /*LM*/],
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isOperand(CELL))
																				bv[0] = m.IsTrue(v[58]) /* && */ /* rhs precomputed isInt(WIDTH) */  /* && */ /* rhs precomputed isInt(VALUE) */  /* && */ /* rhs precomputed isInt(OFFSET) */ 
																				if bv[0] {
																					v[59], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																						v[6] /*CELL*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[0] = m.IsTrue(v[59])
																				}
																				if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																					// RHS
																					return i.stepRHS608(v, bv, config)
																				}
																			} else {
																				return i.stepLookups(c, config, 27) // reapply
																			}
																		} else {
																			return i.stepLookups(c, config, 27) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 637
						// KVariable _440 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						v[7] = i.Model.KApplyArg(v[4], 2)
						// KVariable _441 = v[7]
						v[8] = i.Model.KApplyArg(v[4], 3)
						if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable WIDTH = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _14 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _15 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _16 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _17 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
													v[25] = i.Model.KApplyArg(v[24], 0)
													// KVariable _0 = v[25]
													v[26] = i.Model.KApplyArg(v[24], 1)
													// KVariable _1 = v[26]
													v[27] = i.Model.KApplyArg(v[24], 2)
													// KVariable _2 = v[27]
													v[28] = i.Model.KApplyArg(v[24], 3)
													// KVariable _3 = v[28]
													v[29] = i.Model.KApplyArg(v[24], 4)
													// KVariable _4 = v[29]
													v[30] = i.Model.KApplyArg(v[24], 5)
													// KVariable _5 = v[30]
													v[31] = i.Model.KApplyArg(v[24], 6)
													// KVariable _6 = v[31]
													v[32] = i.Model.KApplyArg(v[24], 7)
													// KVariable _7 = v[32]
													v[33] = i.Model.KApplyArg(v[24], 8)
													if v[33]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
														v[34] = i.Model.KApplyArg(v[33], 0)
														// KVariable _34 = v[34]
														v[35] = i.Model.KApplyArg(v[24], 9)
														// KVariable _8 = v[35]
														v[36] = i.Model.KApplyArg(v[24], 10)
														// KVariable _9 = v[36]
														v[37] = i.Model.KApplyArg(v[24], 11)
														// KVariable _10 = v[37]
														v[38] = i.Model.KApplyArg(v[24], 12)
														// KVariable _11 = v[38]
														v[39] = i.Model.KApplyArg(v[24], 13)
														// KVariable _12 = v[39]
														v[40] = i.Model.KApplyArg(v[24], 14)
														// KVariable _13 = v[40]
														v[41] = i.Model.KApplyArg(v[19], 5)
														// KVariable _18 = v[41]
														v[42] = i.Model.KApplyArg(v[19], 6)
														// KVariable _19 = v[42]
														v[43] = i.Model.KApplyArg(v[19], 7)
														// KVariable _20 = v[43]
														v[44] = i.Model.KApplyArg(v[19], 8)
														// KVariable _21 = v[44]
														v[45] = i.Model.KApplyArg(v[19], 9)
														// KVariable _22 = v[45]
														v[46] = i.Model.KApplyArg(v[19], 10)
														// KVariable _23 = v[46]
														v[47] = i.Model.KApplyArg(v[19], 11)
														// KVariable _24 = v[47]
														v[48] = i.Model.KApplyArg(v[19], 12)
														// KVariable _25 = v[48]
														v[49] = i.Model.KApplyArg(v[19], 13)
														// KVariable _26 = v[49]
														v[50] = i.Model.KApplyArg(v[19], 14)
														// KVariable _27 = v[50]
														v[51] = i.Model.KApplyArg(c, 8)
														// KVariable _33 = v[51]
														// rule #637
														// source: iele.k @775
														// {| rule `<generatedTop>`(`<k>`(`#exec__IELE-INFRASTRUCTURE`(`store_,_,_,__IELE-COMMON`(_440,CELL,_441,WIDTH))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(CELL,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(WIDTH),isOperand(_441)),isMap(LM)),isOperand(_440)),isOperand(CELL)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(CELL,LM)),`_=/=Int__INT`(WIDTH,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(b048999b1db31a7e00832f491d4898abaf94b4726ddec25115b24de49742a8f6) contentStartColumn(10) contentStartLine(775) org.kframework.attributes.Location(Location(775,10,777,63)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// LOOKUPS
															if guard < 28 {
																// lookup:#match(LM,_34)
																v[52] = v[34] /*_34*/
																if v[52] == m.InternedBottom {
																	return i.stepLookups(c, config, 28) // reapply
																}
																if v[52]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[53 /*LM*/] = v[52] // LM
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_441)),isMap(LM)),isOperand(_440)),isOperand(CELL)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(CELL,LM)),`_=/=Int__INT`(WIDTH,#token("0","Int")))))
																	v[54], i.evalErr = i.evalIsOperand( // isOperand(_441)
																		v[7] /*_441*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_441)),isMap(LM))
																	bv[3] = /* rhs precomputed isInt(WIDTH) */ /* && */ m.IsTrue(v[54])
																	if bv[3] {
																		v[55], i.evalErr = i.evalIsMap( // isMap(LM)
																			v[53 /*LM*/],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[3] = m.IsTrue(v[55])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_441)),isMap(LM)),isOperand(_440))
																	bv[2] = bv[3]
																	if bv[2] {
																		v[56], i.evalErr = i.evalIsOperand( // isOperand(_440)
																			v[5] /*_440*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[56])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_441)),isMap(LM)),isOperand(_440)),isOperand(CELL))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[57], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																			v[6] /*CELL*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[57])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperand(_441)),isMap(LM)),isOperand(_440)),isOperand(CELL)),`_andBool_`(`notBool_`(`_in_keys(_)_MAP`(CELL,LM)),`_=/=Int__INT`(WIDTH,#token("0","Int"))))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[58], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(CELL,LM)
																			v[6] /*CELL*/,
																			v[53 /*LM*/],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`notBool_`(`_in_keys(_)_MAP`(CELL,LM)),`_=/=Int__INT`(WIDTH,#token("0","Int")))
																		bv[4] = !(m.IsTrue(v[58]))
																		if bv[4] {
																			v[59], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(WIDTH,#token("0","Int"))
																				v[8] /*WIDTH*/,
																				/* rhs KToken */ m.IntZero,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[4] = m.IsTrue(v[59])
																		}
																		bv[0] = bv[4]
																	}
																	if /* rhs precomputed lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS637(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 28) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 622
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsloadXuXuIELEXhyphenCOMMON2 { // `_=sload__IELE-COMMON`(REG,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _36 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _37 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _38 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _39 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _40 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
													v[27] = i.Model.KApplyArg(v[26], 0)
													if i.tempTypeVar = v[27] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable ACCT = v[27]
														v[28] = i.Model.KApplyArg(v[22], 4)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 5)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 6)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[22], 7)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[22], 8)
														// KVariable _7 = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_42),_33,_34,_35)
															v[50] = i.Model.KApplyArg(v[49], 0)
															// KVariable _32 = v[50]
															v[51] = i.Model.KApplyArg(v[49], 1)
															if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_42)
																v[52] = i.Model.KApplyArg(v[51], 0)
																// KVariable _42 = v[52]
																v[53] = i.Model.KApplyArg(v[49], 2)
																// KVariable _33 = v[53]
																v[54] = i.Model.KApplyArg(v[49], 3)
																// KVariable _34 = v[54]
																v[55] = i.Model.KApplyArg(v[49], 4)
																// KVariable _35 = v[55]
																// rule #622
																// source: iele.k @1127
																// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=sload__IELE-COMMON`(REG,INDEX))=>`#load___IELE`(REG,VALUE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isLValue(REG)),isOperand(INDEX))) ensures #token("true","Bool") [UNIQUE_ID(f175e12a63ded52a4a7a1ce4b333f77b5973a48579e27f233f8871af3e188922) contentStartColumn(10) contentStartLine(1127) org.kframework.attributes.Location(Location(1127,10,1133,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 29 {
																		// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT)))
																		v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<acctID>`(ACCT))
																			v[52] /*_42*/,
																			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																				v[27] /*ACCT*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[57] = v[56]
																		if v[57] == m.InternedBottom {
																			return i.stepLookups(c, config, 29) // reapply
																		}
																		if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31)
																			v[58] = i.Model.KApplyArg(v[57], 0)
																			if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																				v[59] = i.Model.KApplyArg(v[58], 0)
																				if i.Model.Equals(v[59], v[27] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																					v[60] = i.Model.KApplyArg(v[57], 1)
																					v[61 /*_28*/] = v[60] // lhs KVariable _28
																					v[62] = i.Model.KApplyArg(v[57], 2)
																					v[63 /*_29*/] = v[62] // lhs KVariable _29
																					v[64] = i.Model.KApplyArg(v[57], 3)
																					if v[64]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_41)
																						v[65] = i.Model.KApplyArg(v[64], 0)
																						v[66 /*_41*/] = v[65] // lhs KVariable _41
																						v[67] = i.Model.KApplyArg(v[57], 4)
																						v[68 /*_30*/] = v[67] // lhs KVariable _30
																						v[69] = i.Model.KApplyArg(v[57], 5)
																						v[70 /*_31*/] = v[69] // lhs KVariable _31
																						// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))
																						v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<acctID>`(ACCT))
																							v[52] /*_42*/,
																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																								v[27] /*ACCT*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[72] = v[71]
																						if v[72] == m.InternedBottom {
																							return i.stepLookups(c, config, 29) // reapply
																						}
																						if v[72]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																							v[73 /*DotVar5*/] = v[72] // DotVar5
																							// lookup:#match(VALUE,`Map:lookup`(_41,INDEX))
																							v[74], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,INDEX)
																								v[66 /*_41*/],
																								v[6] /*INDEX*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[75] = v[74]
																							if v[75] == m.InternedBottom {
																								return i.stepLookups(c, config, 29) // reapply
																							}
																							if i.tempTypeVar = v[75] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								v[76 /*VALUE*/] = v[75] // VALUE
																								// lookup:#match(DotVar7,`_[_<-undef]`(_41,INDEX))
																								v[77], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,INDEX)
																									v[66 /*_41*/],
																									v[6] /*INDEX*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[78] = v[77]
																								if v[78] == m.InternedBottom {
																									return i.stepLookups(c, config, 29) // reapply
																								}
																								if v[78]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																									v[79 /*DotVar7*/] = v[78] // DotVar7
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG)),isOperand(INDEX)))
																									v[80], i.evalErr = i.evalIsInt( // isInt(VALUE)
																										v[76 /*VALUE*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG))
																									bv[1] = m.IsTrue(v[80]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																									if bv[1] {
																										v[81], i.evalErr = i.evalIsLValue( // isLValue(REG)
																											v[5] /*REG*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[81])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG)),isOperand(INDEX))
																									bv[0] = bv[1]
																									if bv[0] {
																										v[82], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																											v[6] /*INDEX*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = m.IsTrue(v[82])
																									}
																									if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS622(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 29) // reapply
																								}
																							} else {
																								return i.stepLookups(c, config, 29) // reapply
																							}
																						} else {
																							return i.stepLookups(c, config, 29) // reapply
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 29) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 636
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(REG,CELL)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable CELL = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[32] = i.Model.KApplyArg(v[31], 0)
													// KVariable _34 = v[32]
													v[33] = i.Model.KApplyArg(v[22], 9)
													// KVariable _8 = v[33]
													v[34] = i.Model.KApplyArg(v[22], 10)
													// KVariable _9 = v[34]
													v[35] = i.Model.KApplyArg(v[22], 11)
													// KVariable _10 = v[35]
													v[36] = i.Model.KApplyArg(v[22], 12)
													// KVariable _11 = v[36]
													v[37] = i.Model.KApplyArg(v[22], 13)
													// KVariable _12 = v[37]
													v[38] = i.Model.KApplyArg(v[22], 14)
													// KVariable _13 = v[38]
													v[39] = i.Model.KApplyArg(v[17], 5)
													// KVariable _18 = v[39]
													v[40] = i.Model.KApplyArg(v[17], 6)
													// KVariable _19 = v[40]
													v[41] = i.Model.KApplyArg(v[17], 7)
													// KVariable _20 = v[41]
													v[42] = i.Model.KApplyArg(v[17], 8)
													// KVariable _21 = v[42]
													v[43] = i.Model.KApplyArg(v[17], 9)
													// KVariable _22 = v[43]
													v[44] = i.Model.KApplyArg(v[17], 10)
													// KVariable _23 = v[44]
													v[45] = i.Model.KApplyArg(v[17], 11)
													// KVariable _24 = v[45]
													v[46] = i.Model.KApplyArg(v[17], 12)
													// KVariable _25 = v[46]
													v[47] = i.Model.KApplyArg(v[17], 13)
													// KVariable _26 = v[47]
													v[48] = i.Model.KApplyArg(v[17], 14)
													// KVariable _27 = v[48]
													v[49] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[49]
													// rule #636
													// source: iele.k @765
													// {| rule `<generatedTop>`(`<k>`(`` `#exec__IELE-INFRASTRUCTURE`(`_=load__IELE-COMMON`(REG,CELL))=>`#load___IELE`(REG,`Bytes2Int`(LM,littleEndianBytes(.KList),signedBytes(.KList)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,CELL)),#match(DotVar4,`_[_<-undef]`(_34,CELL))),`_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(CELL))) ensures #token("true","Bool") [UNIQUE_ID(18e83a3e57c69941ba9156811fd1937796f0768df8d663aa9bb39f2afd56a7bd) contentStartColumn(10) contentStartLine(765) org.kframework.attributes.Location(Location(765,10,766,50)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 30 {
															// lookup:#match(LM,`Map:lookup`(_34,CELL))
															v[50], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,CELL)
																v[32] /*_34*/,
																v[6] /*CELL*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[51] = v[50]
															if v[51] == m.InternedBottom {
																return i.stepLookups(c, config, 30) // reapply
															}
															if v[51]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[52 /*LM*/] = v[51] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,CELL))
																v[53], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,CELL)
																	v[32] /*_34*/,
																	v[6] /*CELL*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[54] = v[53]
																if v[54] == m.InternedBottom {
																	return i.stepLookups(c, config, 30) // reapply
																}
																if v[54]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[55 /*DotVar4*/] = v[54] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(CELL)))
																	v[56], i.evalErr = i.evalIsBytes( // isBytes(LM)
																		v[52 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isBytes(LM),isLValue(REG))
																	bv[1] = m.IsTrue(v[56])
																	if bv[1] {
																		v[57], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[5] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[57])
																	}
																	// `_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(CELL))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[58], i.evalErr = i.evalIsOperand( // isOperand(CELL)
																			v[6] /*CELL*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[58])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS636(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 30) // reapply
																}
															} else {
																return i.stepLookups(c, config, 30) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 568, 573, 577, 588, 593, 595, 596, 614, 615, 617, 619, 624, 625, 635, 642, 647
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcomputeXlsqbXuXcommaXuXrsqbXuIELEXhyphenGAS2 { // `#compute[_,_]_IELE-GAS`(`sstore_,__IELE-COMMON`(VALUE,INDEX),_208)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rules: 588, 642
					if v[4]&kapplyMatchMask == kapplyMatchLblSstoreXuXcommaXuXuIELEXhyphenCOMMON2 { // `sstore_,__IELE-COMMON`(VALUE,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 642
						// KVariable VALUE = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable _208 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _16 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _17 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[24] = i.Model.KApplyArg(v[23], 0)
													// KVariable _0 = v[24]
													v[25] = i.Model.KApplyArg(v[23], 1)
													// KVariable _1 = v[25]
													v[26] = i.Model.KApplyArg(v[23], 2)
													// KVariable _2 = v[26]
													v[27] = i.Model.KApplyArg(v[23], 3)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable ACCT = v[28]
															v[29] = i.Model.KApplyArg(v[23], 4)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[23], 5)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[23], 6)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[23], 7)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[23], 8)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[23], 9)
															// KVariable _8 = v[34]
															v[35] = i.Model.KApplyArg(v[23], 10)
															// KVariable _9 = v[35]
															v[36] = i.Model.KApplyArg(v[23], 11)
															// KVariable _10 = v[36]
															v[37] = i.Model.KApplyArg(v[23], 12)
															// KVariable _11 = v[37]
															v[38] = i.Model.KApplyArg(v[23], 13)
															// KVariable _12 = v[38]
															v[39] = i.Model.KApplyArg(v[23], 14)
															// KVariable _13 = v[39]
															v[40] = i.Model.KApplyArg(v[18], 5)
															// KVariable _18 = v[40]
															v[41] = i.Model.KApplyArg(v[18], 6)
															// KVariable _19 = v[41]
															v[42] = i.Model.KApplyArg(v[18], 7)
															// KVariable _20 = v[42]
															v[43] = i.Model.KApplyArg(v[18], 8)
															// KVariable _21 = v[43]
															v[44] = i.Model.KApplyArg(v[18], 9)
															// KVariable _22 = v[44]
															v[45] = i.Model.KApplyArg(v[18], 10)
															// KVariable _23 = v[45]
															v[46] = i.Model.KApplyArg(v[18], 11)
															// KVariable _24 = v[46]
															v[47] = i.Model.KApplyArg(v[18], 12)
															// KVariable _25 = v[47]
															v[48] = i.Model.KApplyArg(v[18], 13)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[18], 14)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(c, 8)
															if v[50]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_41),_33,_34,_35)
																v[51] = i.Model.KApplyArg(v[50], 0)
																// KVariable _32 = v[51]
																v[52] = i.Model.KApplyArg(v[50], 1)
																if v[52]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_41)
																	v[53] = i.Model.KApplyArg(v[52], 0)
																	// KVariable _41 = v[53]
																	v[54] = i.Model.KApplyArg(v[50], 2)
																	// KVariable _33 = v[54]
																	v[55] = i.Model.KApplyArg(v[50], 3)
																	// KVariable _34 = v[55]
																	v[56] = i.Model.KApplyArg(v[50], 4)
																	// KVariable _35 = v[56]
																	// rule #642
																	// source: iele-gas.k @691
																	// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupStorage(ACCT,INDEX)``~>`#compute[_,_]_IELE-GAS`(`sstore_,__IELE-COMMON`(VALUE,INDEX),_208)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isOperand(VALUE)),isInt(INDEX)),isSchedule(_208)),isInt(ACCT)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token("true","Bool") [UNIQUE_ID(ad8725d1549a85ccf14cfca631aa75ab8f53237c1499d3d8b3c70df2a40bd0d1) contentStartColumn(10) contentStartLine(691) org.kframework.attributes.Location(Location(691,10,698,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 31 {
																			// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT)))
																			v[57], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<acctID>`(ACCT))
																				v[53] /*_41*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[28] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[58] = v[57]
																			if v[58] == m.InternedBottom {
																				return i.stepLookups(c, config, 31) // reapply
																			}
																			if v[58]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31)
																				v[59] = i.Model.KApplyArg(v[58], 0)
																				if v[59]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																					v[60] = i.Model.KApplyArg(v[59], 0)
																					if i.Model.Equals(v[60], v[28] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																						v[61] = i.Model.KApplyArg(v[58], 1)
																						v[62 /*_28*/] = v[61] // lhs KVariable _28
																						v[63] = i.Model.KApplyArg(v[58], 2)
																						v[64 /*_29*/] = v[63] // lhs KVariable _29
																						v[65] = i.Model.KApplyArg(v[58], 3)
																						if v[65]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(STORAGE)
																							v[66] = i.Model.KApplyArg(v[65], 0)
																							if v[66]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																								v[67 /*STORAGE*/] = v[66] // STORAGE
																								v[68] = i.Model.KApplyArg(v[58], 4)
																								v[69 /*_30*/] = v[68] // lhs KVariable _30
																								v[70] = i.Model.KApplyArg(v[58], 5)
																								v[71 /*_31*/] = v[70] // lhs KVariable _31
																								// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))
																								v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<acctID>`(ACCT))
																									v[53] /*_41*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[28] /*ACCT*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[73] = v[72]
																								if v[73] == m.InternedBottom {
																									return i.stepLookups(c, config, 31) // reapply
																								}
																								if v[73]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																									v[74 /*DotVar5*/] = v[73] // DotVar5
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isOperand(VALUE)),#token("true","Bool")),isSchedule(_208)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE))))
																									v[75], i.evalErr = i.evalIsMap( // isMap(STORAGE)
																										v[67 /*STORAGE*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(isMap(STORAGE),isOperand(VALUE))
																									bv[2] = m.IsTrue(v[75])
																									if bv[2] {
																										v[76], i.evalErr = i.evalIsOperand( // isOperand(VALUE)
																											v[5] /*VALUE*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[2] = m.IsTrue(v[76])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isOperand(VALUE)),#token("true","Bool")),isSchedule(_208))
																									bv[1] = bv[2] /* && */ /* rhs precomputed isInt(INDEX) */ 
																									if bv[1] {
																										v[77], i.evalErr = i.evalIsSchedule( // isSchedule(_208)
																											v[7] /*_208*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[77])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isOperand(VALUE)),#token("true","Bool")),isSchedule(_208)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))
																									bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCT) */ 
																									if bv[0] {
																										v[78], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,STORAGE)
																											v[6] /*INDEX*/,
																											v[67 /*STORAGE*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = !(m.IsTrue(v[78]))
																									}
																									if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS642(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 31) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 31) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 588
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[4], 1)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable INDEX = v[6]
								v[7] = i.Model.KApplyArg(v[2], 1)
								// KVariable SCHED = v[7]
								// KVariable DotVar1 = v[3]
								v[8] = i.Model.KApplyArg(c, 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[9] = i.Model.KApplyArg(v[8], 0)
									if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[12] = i.Model.KApplyArg(v[10], 0)
											if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[11]
												v[13] = i.Model.KApplyArg(c, 2)
												// KVariable _36 = v[13]
												v[14] = i.Model.KApplyArg(c, 3)
												// KVariable _37 = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _38 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _39 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _40 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _14 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													// KVariable _15 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 2)
													// KVariable _16 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 3)
													// KVariable _17 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 4)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
														v[24] = i.Model.KApplyArg(v[23], 0)
														// KVariable _0 = v[24]
														v[25] = i.Model.KApplyArg(v[23], 1)
														// KVariable _1 = v[25]
														v[26] = i.Model.KApplyArg(v[23], 2)
														// KVariable _2 = v[26]
														v[27] = i.Model.KApplyArg(v[23], 3)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
															v[28] = i.Model.KApplyArg(v[27], 0)
															if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable ACCT = v[28]
																v[29] = i.Model.KApplyArg(v[23], 4)
																// KVariable _3 = v[29]
																v[30] = i.Model.KApplyArg(v[23], 5)
																// KVariable _4 = v[30]
																v[31] = i.Model.KApplyArg(v[23], 6)
																// KVariable _5 = v[31]
																v[32] = i.Model.KApplyArg(v[23], 7)
																// KVariable _6 = v[32]
																v[33] = i.Model.KApplyArg(v[23], 8)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[23], 9)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[23], 10)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[23], 11)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[23], 12)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[23], 13)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[23], 14)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[18], 5)
																// KVariable _18 = v[40]
																v[41] = i.Model.KApplyArg(v[18], 6)
																// KVariable _19 = v[41]
																v[42] = i.Model.KApplyArg(v[18], 7)
																// KVariable _20 = v[42]
																v[43] = i.Model.KApplyArg(v[18], 8)
																// KVariable _21 = v[43]
																v[44] = i.Model.KApplyArg(v[18], 9)
																// KVariable _22 = v[44]
																v[45] = i.Model.KApplyArg(v[18], 10)
																// KVariable _23 = v[45]
																v[46] = i.Model.KApplyArg(v[18], 11)
																// KVariable _24 = v[46]
																v[47] = i.Model.KApplyArg(v[18], 12)
																// KVariable _25 = v[47]
																v[48] = i.Model.KApplyArg(v[18], 13)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(v[18], 14)
																// KVariable _27 = v[49]
																v[50] = i.Model.KApplyArg(c, 8)
																if v[50]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_42),_33,_34,_35)
																	v[51] = i.Model.KApplyArg(v[50], 0)
																	// KVariable _32 = v[51]
																	v[52] = i.Model.KApplyArg(v[50], 1)
																	if v[52]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_42)
																		v[53] = i.Model.KApplyArg(v[52], 0)
																		// KVariable _42 = v[53]
																		v[54] = i.Model.KApplyArg(v[50], 2)
																		// KVariable _33 = v[54]
																		v[55] = i.Model.KApplyArg(v[50], 3)
																		// KVariable _34 = v[55]
																		v[56] = i.Model.KApplyArg(v[50], 4)
																		// KVariable _35 = v[56]
																		// rule #588
																		// source: iele-gas.k @683
																		// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`sstore_,__IELE-COMMON`(VALUE,INDEX),SCHED)=>`Csstore`(SCHED,INDEX,VALUE,OLDVALUE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(OLDVALUE,`Map:lookup`(_41,INDEX))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(ACCT)),isInt(OLDVALUE))) ensures #token("true","Bool") [UNIQUE_ID(116dcb1251c0ec681581870490708790d3877d48f4c6fa1797e6f182f49fbc07) contentStartColumn(10) contentStartLine(683) org.kframework.attributes.Location(Location(683,10,689,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 32 {
																				// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT)))
																				v[57], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<acctID>`(ACCT))
																					v[53] /*_42*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[28] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[58] = v[57]
																				if v[58] == m.InternedBottom {
																					return i.stepLookups(c, config, 32) // reapply
																				}
																				if v[58]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31)
																					v[59] = i.Model.KApplyArg(v[58], 0)
																					if v[59]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																						v[60] = i.Model.KApplyArg(v[59], 0)
																						if i.Model.Equals(v[60], v[28] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																							v[61] = i.Model.KApplyArg(v[58], 1)
																							v[62 /*_28*/] = v[61] // lhs KVariable _28
																							v[63] = i.Model.KApplyArg(v[58], 2)
																							v[64 /*_29*/] = v[63] // lhs KVariable _29
																							v[65] = i.Model.KApplyArg(v[58], 3)
																							if v[65]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_41)
																								v[66] = i.Model.KApplyArg(v[65], 0)
																								v[67 /*_41*/] = v[66] // lhs KVariable _41
																								v[68] = i.Model.KApplyArg(v[58], 4)
																								v[69 /*_30*/] = v[68] // lhs KVariable _30
																								v[70] = i.Model.KApplyArg(v[58], 5)
																								v[71 /*_31*/] = v[70] // lhs KVariable _31
																								// lookup:#match(OLDVALUE,`Map:lookup`(_41,INDEX))
																								v[72], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,INDEX)
																									v[67 /*_41*/],
																									v[6] /*INDEX*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[73] = v[72]
																								if v[73] == m.InternedBottom {
																									return i.stepLookups(c, config, 32) // reapply
																								}
																								if i.tempTypeVar = v[73] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[74 /*OLDVALUE*/] = v[73] // OLDVALUE
																									// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))
																									v[75], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<acctID>`(ACCT))
																										v[53] /*_42*/,
																										i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																											v[28] /*ACCT*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[76] = v[75]
																									if v[76] == m.InternedBottom {
																										return i.stepLookups(c, config, 32) // reapply
																									}
																									if v[76]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																										v[77 /*DotVar5*/] = v[76] // DotVar5
																										// lookup:#match(DotVar7,`_[_<-undef]`(_41,INDEX))
																										v[78], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,INDEX)
																											v[67 /*_41*/],
																											v[6] /*INDEX*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										v[79] = v[78]
																										if v[79] == m.InternedBottom {
																											return i.stepLookups(c, config, 32) // reapply
																										}
																										if v[79]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																											v[80 /*DotVar7*/] = v[79] // DotVar7
																											// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),isInt(OLDVALUE)))
																											v[81], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																												v[7] /*SCHED*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),isInt(OLDVALUE))
																											bv[0] = /* rhs precomputed isInt(INDEX) && isInt(VALUE) */ /* && */ m.IsTrue(v[81]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																											if bv[0] {
																												v[82], i.evalErr = i.evalIsInt( // isInt(OLDVALUE)
																													v[74 /*OLDVALUE*/],
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												bv[0] = m.IsTrue(v[82])
																											}
																											if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																												// RHS
																												return i.stepRHS588(v, bv, config)
																											}
																										} else {
																											return i.stepLookups(c, config, 32) // reapply
																										}
																									} else {
																										return i.stepLookups(c, config, 32) // reapply
																									}
																								} else {
																									return i.stepLookups(c, config, 32) // reapply
																								}
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 32) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 593, 595, 596, 617, 647
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXcommaXuXuIELEXhyphenCOMMON2 { // `log_,__IELE-COMMON`(IDX,operandList(_158,operandList(_159,operandList(_160,`.List{"operandList"}`(.KList)))))
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable IDX = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// rules: 595, 596, 617, 647
						if v[6]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_158,operandList(_159,operandList(_160,`.List{"operandList"}`(.KList))))
							v[7] = i.Model.KApplyArg(v[6], 0)
							// rule: 647
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _158 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_159,operandList(_160,`.List{"operandList"}`(.KList)))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _159 = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_160,`.List{"operandList"}`(.KList))
											v[11] = i.Model.KApplyArg(v[10], 0)
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable _160 = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
													v[13] = i.Model.KApplyArg(v[2], 1)
													// KVariable SCHED = v[13]
													// KVariable DotVar1 = v[3]
													v[14] = i.Model.KApplyArg(c, 1)
													if v[14]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[15] = i.Model.KApplyArg(v[14], 0)
														if v[15]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[16], v[17] = i.Model.KSequenceSplitHeadTail(v[15]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[16]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[18] = i.Model.KApplyArg(v[16], 0)
																if i.Model.Equals(v[18], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[17]
																	v[19] = i.Model.KApplyArg(c, 2)
																	// KVariable _28 = v[19]
																	v[20] = i.Model.KApplyArg(c, 3)
																	// KVariable _29 = v[20]
																	v[21] = i.Model.KApplyArg(c, 4)
																	// KVariable _30 = v[21]
																	v[22] = i.Model.KApplyArg(c, 5)
																	// KVariable _31 = v[22]
																	v[23] = i.Model.KApplyArg(c, 6)
																	// KVariable _32 = v[23]
																	v[24] = i.Model.KApplyArg(c, 7)
																	if v[24]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																		v[25] = i.Model.KApplyArg(v[24], 0)
																		// KVariable _14 = v[25]
																		v[26] = i.Model.KApplyArg(v[24], 1)
																		// KVariable _15 = v[26]
																		v[27] = i.Model.KApplyArg(v[24], 2)
																		// KVariable _16 = v[27]
																		v[28] = i.Model.KApplyArg(v[24], 3)
																		// KVariable _17 = v[28]
																		v[29] = i.Model.KApplyArg(v[24], 4)
																		if v[29]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
																			v[30] = i.Model.KApplyArg(v[29], 0)
																			// KVariable _0 = v[30]
																			v[31] = i.Model.KApplyArg(v[29], 1)
																			// KVariable _1 = v[31]
																			v[32] = i.Model.KApplyArg(v[29], 2)
																			// KVariable _2 = v[32]
																			v[33] = i.Model.KApplyArg(v[29], 3)
																			// KVariable _3 = v[33]
																			v[34] = i.Model.KApplyArg(v[29], 4)
																			// KVariable _4 = v[34]
																			v[35] = i.Model.KApplyArg(v[29], 5)
																			// KVariable _5 = v[35]
																			v[36] = i.Model.KApplyArg(v[29], 6)
																			// KVariable _6 = v[36]
																			v[37] = i.Model.KApplyArg(v[29], 7)
																			// KVariable _7 = v[37]
																			v[38] = i.Model.KApplyArg(v[29], 8)
																			if v[38]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																				v[39] = i.Model.KApplyArg(v[38], 0)
																				// KVariable _34 = v[39]
																				v[40] = i.Model.KApplyArg(v[29], 9)
																				// KVariable _8 = v[40]
																				v[41] = i.Model.KApplyArg(v[29], 10)
																				// KVariable _9 = v[41]
																				v[42] = i.Model.KApplyArg(v[29], 11)
																				// KVariable _10 = v[42]
																				v[43] = i.Model.KApplyArg(v[29], 12)
																				// KVariable _11 = v[43]
																				v[44] = i.Model.KApplyArg(v[29], 13)
																				// KVariable _12 = v[44]
																				v[45] = i.Model.KApplyArg(v[29], 14)
																				// KVariable _13 = v[45]
																				v[46] = i.Model.KApplyArg(v[24], 5)
																				// KVariable _18 = v[46]
																				v[47] = i.Model.KApplyArg(v[24], 6)
																				// KVariable _19 = v[47]
																				v[48] = i.Model.KApplyArg(v[24], 7)
																				// KVariable _20 = v[48]
																				v[49] = i.Model.KApplyArg(v[24], 8)
																				// KVariable _21 = v[49]
																				v[50] = i.Model.KApplyArg(v[24], 9)
																				// KVariable _22 = v[50]
																				v[51] = i.Model.KApplyArg(v[24], 10)
																				// KVariable _23 = v[51]
																				v[52] = i.Model.KApplyArg(v[24], 11)
																				// KVariable _24 = v[52]
																				v[53] = i.Model.KApplyArg(v[24], 12)
																				// KVariable _25 = v[53]
																				v[54] = i.Model.KApplyArg(v[24], 13)
																				// KVariable _26 = v[54]
																				v[55] = i.Model.KApplyArg(v[24], 14)
																				// KVariable _27 = v[55]
																				v[56] = i.Model.KApplyArg(c, 8)
																				// KVariable _33 = v[56]
																				// rule #647
																				// source: iele-gas.k @637
																				// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_158,operandList(_159,operandList(_160,`.List{"operandList"}`(.KList))))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("3","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isInt(_158)),isSchedule(SCHED)),isOperand(IDX)),isInt(_160)),isInt(_159))) ensures #token("true","Bool") [UNIQUE_ID(0b906dd7a5557e94868f02e6ae4cb85d27c589b6db5f3d4041371826ef9b14ef) contentStartColumn(10) contentStartLine(637) org.kframework.attributes.Location(Location(637,10,637,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																				if !matched {
																					// LOOKUPS
																					if guard < 33 {
																						// lookup:#match(LM,`Map:lookup`(_34,IDX))
																						v[57], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,IDX)
																							v[39] /*_34*/,
																							v[5] /*IDX*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[58] = v[57]
																						if v[58] == m.InternedBottom {
																							return i.stepLookups(c, config, 33) // reapply
																						}
																						if v[58]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																							v[59 /*LM*/] = v[58] // LM
																							// lookup:#match(DotVar4,`_[_<-undef]`(_34,IDX))
																							v[60], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,IDX)
																								v[39] /*_34*/,
																								v[5] /*IDX*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[61] = v[60]
																							if v[61] == m.InternedBottom {
																								return i.stepLookups(c, config, 33) // reapply
																							}
																							if v[61]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																								v[62 /*DotVar4*/] = v[61] // DotVar4
																								// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX)),#token("true","Bool")),#token("true","Bool")))
																								v[63], i.evalErr = i.evalIsBytes( // isBytes(LM)
																									v[59 /*LM*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED))
																								bv[1] = m.IsTrue(v[63]) /* && */ /* rhs precomputed isInt(_158) */ 
																								if bv[1] {
																									v[64], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																										v[13] /*SCHED*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[1] = m.IsTrue(v[64])
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX))
																								bv[0] = bv[1]
																								if bv[0] {
																									v[65], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																										v[5] /*IDX*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[0] = m.IsTrue(v[65])
																								}
																								if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(_160) */  /* && */ /* rhs precomputed isInt(_159) */  {
																									// RHS
																									return i.stepRHS647(v, bv, config)
																								}
																							} else {
																								return i.stepLookups(c, config, 33) // reapply
																							}
																						} else {
																							return i.stepLookups(c, config, 33) // reapply
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 595
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _192 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_193,operandList(_194,operandList(_195,`.List{"operandList"}`(.KList))))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _193 = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_194,operandList(_195,`.List{"operandList"}`(.KList)))
											v[11] = i.Model.KApplyArg(v[10], 0)
											if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable _194 = v[11]
												v[12] = i.Model.KApplyArg(v[10], 1)
												if v[12]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_195,`.List{"operandList"}`(.KList))
													v[13] = i.Model.KApplyArg(v[12], 0)
													if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable _195 = v[13]
														v[14] = i.Model.KApplyArg(v[12], 1)
														if v[14]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
															v[15] = i.Model.KApplyArg(v[2], 1)
															// KVariable SCHED = v[15]
															// KVariable DotVar1 = v[3]
															v[16] = i.Model.KApplyArg(c, 1)
															if v[16]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
																v[17] = i.Model.KApplyArg(v[16], 0)
																if v[17]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																	_, v[18], v[19] = i.Model.KSequenceSplitHeadTail(v[17]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																	if v[18]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																		v[20] = i.Model.KApplyArg(v[18], 0)
																		if i.Model.Equals(v[20], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																			// KVariable SREST = v[19]
																			v[21] = i.Model.KApplyArg(c, 2)
																			// KVariable _28 = v[21]
																			v[22] = i.Model.KApplyArg(c, 3)
																			// KVariable _29 = v[22]
																			v[23] = i.Model.KApplyArg(c, 4)
																			// KVariable _30 = v[23]
																			v[24] = i.Model.KApplyArg(c, 5)
																			// KVariable _31 = v[24]
																			v[25] = i.Model.KApplyArg(c, 6)
																			// KVariable _32 = v[25]
																			v[26] = i.Model.KApplyArg(c, 7)
																			if v[26]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																				v[27] = i.Model.KApplyArg(v[26], 0)
																				// KVariable _14 = v[27]
																				v[28] = i.Model.KApplyArg(v[26], 1)
																				// KVariable _15 = v[28]
																				v[29] = i.Model.KApplyArg(v[26], 2)
																				// KVariable _16 = v[29]
																				v[30] = i.Model.KApplyArg(v[26], 3)
																				// KVariable _17 = v[30]
																				v[31] = i.Model.KApplyArg(v[26], 4)
																				if v[31]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
																					v[32] = i.Model.KApplyArg(v[31], 0)
																					// KVariable _0 = v[32]
																					v[33] = i.Model.KApplyArg(v[31], 1)
																					// KVariable _1 = v[33]
																					v[34] = i.Model.KApplyArg(v[31], 2)
																					// KVariable _2 = v[34]
																					v[35] = i.Model.KApplyArg(v[31], 3)
																					// KVariable _3 = v[35]
																					v[36] = i.Model.KApplyArg(v[31], 4)
																					// KVariable _4 = v[36]
																					v[37] = i.Model.KApplyArg(v[31], 5)
																					// KVariable _5 = v[37]
																					v[38] = i.Model.KApplyArg(v[31], 6)
																					// KVariable _6 = v[38]
																					v[39] = i.Model.KApplyArg(v[31], 7)
																					// KVariable _7 = v[39]
																					v[40] = i.Model.KApplyArg(v[31], 8)
																					if v[40]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																						v[41] = i.Model.KApplyArg(v[40], 0)
																						// KVariable _34 = v[41]
																						v[42] = i.Model.KApplyArg(v[31], 9)
																						// KVariable _8 = v[42]
																						v[43] = i.Model.KApplyArg(v[31], 10)
																						// KVariable _9 = v[43]
																						v[44] = i.Model.KApplyArg(v[31], 11)
																						// KVariable _10 = v[44]
																						v[45] = i.Model.KApplyArg(v[31], 12)
																						// KVariable _11 = v[45]
																						v[46] = i.Model.KApplyArg(v[31], 13)
																						// KVariable _12 = v[46]
																						v[47] = i.Model.KApplyArg(v[31], 14)
																						// KVariable _13 = v[47]
																						v[48] = i.Model.KApplyArg(v[26], 5)
																						// KVariable _18 = v[48]
																						v[49] = i.Model.KApplyArg(v[26], 6)
																						// KVariable _19 = v[49]
																						v[50] = i.Model.KApplyArg(v[26], 7)
																						// KVariable _20 = v[50]
																						v[51] = i.Model.KApplyArg(v[26], 8)
																						// KVariable _21 = v[51]
																						v[52] = i.Model.KApplyArg(v[26], 9)
																						// KVariable _22 = v[52]
																						v[53] = i.Model.KApplyArg(v[26], 10)
																						// KVariable _23 = v[53]
																						v[54] = i.Model.KApplyArg(v[26], 11)
																						// KVariable _24 = v[54]
																						v[55] = i.Model.KApplyArg(v[26], 12)
																						// KVariable _25 = v[55]
																						v[56] = i.Model.KApplyArg(v[26], 13)
																						// KVariable _26 = v[56]
																						v[57] = i.Model.KApplyArg(v[26], 14)
																						// KVariable _27 = v[57]
																						v[58] = i.Model.KApplyArg(c, 8)
																						// KVariable _33 = v[58]
																						// rule #595
																						// source: iele-gas.k @638
																						// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_192,operandList(_193,operandList(_194,operandList(_195,`.List{"operandList"}`(.KList)))))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("4","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_193),isInt(_194)),isBytes(LM)),isInt(_192)),isSchedule(SCHED)),isOperand(IDX)),isInt(_195))) ensures #token("true","Bool") [UNIQUE_ID(995cc5851d1531ff2a3399e4b3969ecf790d466b52a6709ec8384a9ee9402ed3) contentStartColumn(10) contentStartLine(638) org.kframework.attributes.Location(Location(638,10,638,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																						if !matched {
																							// LOOKUPS
																							if guard < 34 {
																								// lookup:#match(LM,`Map:lookup`(_34,IDX))
																								v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,IDX)
																									v[41] /*_34*/,
																									v[5] /*IDX*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[60] = v[59]
																								if v[60] == m.InternedBottom {
																									return i.stepLookups(c, config, 34) // reapply
																								}
																								if v[60]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																									v[61 /*LM*/] = v[60] // LM
																									// lookup:#match(DotVar4,`_[_<-undef]`(_34,IDX))
																									v[62], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,IDX)
																										v[41] /*_34*/,
																										v[5] /*IDX*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[63] = v[62]
																									if v[63] == m.InternedBottom {
																										return i.stepLookups(c, config, 34) // reapply
																									}
																									if v[63]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																										v[64 /*DotVar4*/] = v[63] // DotVar4
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX)),#token("true","Bool")))
																										v[65], i.evalErr = i.evalIsBytes( // isBytes(LM)
																											v[61 /*LM*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),isSchedule(SCHED))
																										bv[1] = /* rhs precomputed isInt(_193) && isInt(_194) */ /* && */ m.IsTrue(v[65]) /* && */ /* rhs precomputed isInt(_192) */ 
																										if bv[1] {
																											v[66], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																												v[15] /*SCHED*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[66])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX))
																										bv[0] = bv[1]
																										if bv[0] {
																											v[67], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																												v[5] /*IDX*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[0] = m.IsTrue(v[67])
																										}
																										if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(_195) */  {
																											// RHS
																											return i.stepRHS595(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 34) // reapply
																									}
																								} else {
																									return i.stepLookups(c, config, 34) // reapply
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 596
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _245 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
									v[9] = i.Model.KApplyArg(v[2], 1)
									// KVariable SCHED = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _28 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													// KVariable _29 = v[16]
													v[17] = i.Model.KApplyArg(c, 4)
													// KVariable _30 = v[17]
													v[18] = i.Model.KApplyArg(c, 5)
													// KVariable _31 = v[18]
													v[19] = i.Model.KApplyArg(c, 6)
													// KVariable _32 = v[19]
													v[20] = i.Model.KApplyArg(c, 7)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[20], 1)
														// KVariable _15 = v[22]
														v[23] = i.Model.KApplyArg(v[20], 2)
														// KVariable _16 = v[23]
														v[24] = i.Model.KApplyArg(v[20], 3)
														// KVariable _17 = v[24]
														v[25] = i.Model.KApplyArg(v[20], 4)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
															v[26] = i.Model.KApplyArg(v[25], 0)
															// KVariable _0 = v[26]
															v[27] = i.Model.KApplyArg(v[25], 1)
															// KVariable _1 = v[27]
															v[28] = i.Model.KApplyArg(v[25], 2)
															// KVariable _2 = v[28]
															v[29] = i.Model.KApplyArg(v[25], 3)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[25], 4)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[25], 5)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[25], 6)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[25], 7)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[25], 8)
															if v[34]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																v[35] = i.Model.KApplyArg(v[34], 0)
																// KVariable _34 = v[35]
																v[36] = i.Model.KApplyArg(v[25], 9)
																// KVariable _8 = v[36]
																v[37] = i.Model.KApplyArg(v[25], 10)
																// KVariable _9 = v[37]
																v[38] = i.Model.KApplyArg(v[25], 11)
																// KVariable _10 = v[38]
																v[39] = i.Model.KApplyArg(v[25], 12)
																// KVariable _11 = v[39]
																v[40] = i.Model.KApplyArg(v[25], 13)
																// KVariable _12 = v[40]
																v[41] = i.Model.KApplyArg(v[25], 14)
																// KVariable _13 = v[41]
																v[42] = i.Model.KApplyArg(v[20], 5)
																// KVariable _18 = v[42]
																v[43] = i.Model.KApplyArg(v[20], 6)
																// KVariable _19 = v[43]
																v[44] = i.Model.KApplyArg(v[20], 7)
																// KVariable _20 = v[44]
																v[45] = i.Model.KApplyArg(v[20], 8)
																// KVariable _21 = v[45]
																v[46] = i.Model.KApplyArg(v[20], 9)
																// KVariable _22 = v[46]
																v[47] = i.Model.KApplyArg(v[20], 10)
																// KVariable _23 = v[47]
																v[48] = i.Model.KApplyArg(v[20], 11)
																// KVariable _24 = v[48]
																v[49] = i.Model.KApplyArg(v[20], 12)
																// KVariable _25 = v[49]
																v[50] = i.Model.KApplyArg(v[20], 13)
																// KVariable _26 = v[50]
																v[51] = i.Model.KApplyArg(v[20], 14)
																// KVariable _27 = v[51]
																v[52] = i.Model.KApplyArg(c, 8)
																// KVariable _33 = v[52]
																// rule #596
																// source: iele-gas.k @635
																// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_245,`.List{"operandList"}`(.KList))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("1","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isInt(_245)),isSchedule(SCHED)),isOperand(IDX))) ensures #token("true","Bool") [UNIQUE_ID(84f9ecd3dec3d8c0d5dce378a1cd6e0298628f66baaa4854a8993c565db2efaf) contentStartColumn(10) contentStartLine(635) org.kframework.attributes.Location(Location(635,10,635,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 35 {
																		// lookup:#match(LM,`Map:lookup`(_34,IDX))
																		v[53], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,IDX)
																			v[35] /*_34*/,
																			v[5] /*IDX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[54] = v[53]
																		if v[54] == m.InternedBottom {
																			return i.stepLookups(c, config, 35) // reapply
																		}
																		if v[54]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																			v[55 /*LM*/] = v[54] // LM
																			// lookup:#match(DotVar4,`_[_<-undef]`(_34,IDX))
																			v[56], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,IDX)
																				v[35] /*_34*/,
																				v[5] /*IDX*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[57] = v[56]
																			if v[57] == m.InternedBottom {
																				return i.stepLookups(c, config, 35) // reapply
																			}
																			if v[57]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[58 /*DotVar4*/] = v[57] // DotVar4
																				// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX)))
																				v[59], i.evalErr = i.evalIsBytes( // isBytes(LM)
																					v[55 /*LM*/],
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED))
																				bv[1] = m.IsTrue(v[59]) /* && */ /* rhs precomputed isInt(_245) */ 
																				if bv[1] {
																					v[60], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																						v[9] /*SCHED*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[1] = m.IsTrue(v[60])
																				}
																				// `_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),#token("true","Bool")),isSchedule(SCHED)),isOperand(IDX))
																				bv[0] = bv[1]
																				if bv[0] {
																					v[61], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																						v[5] /*IDX*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[0] = m.IsTrue(v[61])
																				}
																				if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																					// RHS
																					return i.stepRHS596(v, bv, config)
																				}
																			} else {
																				return i.stepLookups(c, config, 35) // reapply
																			}
																		} else {
																			return i.stepLookups(c, config, 35) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							// rule: 617
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _289 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								if v[8]&kapplyMatchMask == kapplyMatchLblOperandList2 { // operandList(_290,`.List{"operandList"}`(.KList))
									v[9] = i.Model.KApplyArg(v[8], 0)
									if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable _290 = v[9]
										v[10] = i.Model.KApplyArg(v[8], 1)
										if v[10]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
											v[11] = i.Model.KApplyArg(v[2], 1)
											// KVariable SCHED = v[11]
											// KVariable DotVar1 = v[3]
											v[12] = i.Model.KApplyArg(c, 1)
											if v[12]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
												v[13] = i.Model.KApplyArg(v[12], 0)
												if v[13]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
													_, v[14], v[15] = i.Model.KSequenceSplitHeadTail(v[13]) // #applyRule(#token("regular","#RuleTag")) ~> ...
													if v[14]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
														v[16] = i.Model.KApplyArg(v[14], 0)
														if i.Model.Equals(v[16], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
															// KVariable SREST = v[15]
															v[17] = i.Model.KApplyArg(c, 2)
															// KVariable _28 = v[17]
															v[18] = i.Model.KApplyArg(c, 3)
															// KVariable _29 = v[18]
															v[19] = i.Model.KApplyArg(c, 4)
															// KVariable _30 = v[19]
															v[20] = i.Model.KApplyArg(c, 5)
															// KVariable _31 = v[20]
															v[21] = i.Model.KApplyArg(c, 6)
															// KVariable _32 = v[21]
															v[22] = i.Model.KApplyArg(c, 7)
															if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[23] = i.Model.KApplyArg(v[22], 0)
																// KVariable _14 = v[23]
																v[24] = i.Model.KApplyArg(v[22], 1)
																// KVariable _15 = v[24]
																v[25] = i.Model.KApplyArg(v[22], 2)
																// KVariable _16 = v[25]
																v[26] = i.Model.KApplyArg(v[22], 3)
																// KVariable _17 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 4)
																if v[27]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
																	v[28] = i.Model.KApplyArg(v[27], 0)
																	// KVariable _0 = v[28]
																	v[29] = i.Model.KApplyArg(v[27], 1)
																	// KVariable _1 = v[29]
																	v[30] = i.Model.KApplyArg(v[27], 2)
																	// KVariable _2 = v[30]
																	v[31] = i.Model.KApplyArg(v[27], 3)
																	// KVariable _3 = v[31]
																	v[32] = i.Model.KApplyArg(v[27], 4)
																	// KVariable _4 = v[32]
																	v[33] = i.Model.KApplyArg(v[27], 5)
																	// KVariable _5 = v[33]
																	v[34] = i.Model.KApplyArg(v[27], 6)
																	// KVariable _6 = v[34]
																	v[35] = i.Model.KApplyArg(v[27], 7)
																	// KVariable _7 = v[35]
																	v[36] = i.Model.KApplyArg(v[27], 8)
																	if v[36]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																		v[37] = i.Model.KApplyArg(v[36], 0)
																		// KVariable _34 = v[37]
																		v[38] = i.Model.KApplyArg(v[27], 9)
																		// KVariable _8 = v[38]
																		v[39] = i.Model.KApplyArg(v[27], 10)
																		// KVariable _9 = v[39]
																		v[40] = i.Model.KApplyArg(v[27], 11)
																		// KVariable _10 = v[40]
																		v[41] = i.Model.KApplyArg(v[27], 12)
																		// KVariable _11 = v[41]
																		v[42] = i.Model.KApplyArg(v[27], 13)
																		// KVariable _12 = v[42]
																		v[43] = i.Model.KApplyArg(v[27], 14)
																		// KVariable _13 = v[43]
																		v[44] = i.Model.KApplyArg(v[22], 5)
																		// KVariable _18 = v[44]
																		v[45] = i.Model.KApplyArg(v[22], 6)
																		// KVariable _19 = v[45]
																		v[46] = i.Model.KApplyArg(v[22], 7)
																		// KVariable _20 = v[46]
																		v[47] = i.Model.KApplyArg(v[22], 8)
																		// KVariable _21 = v[47]
																		v[48] = i.Model.KApplyArg(v[22], 9)
																		// KVariable _22 = v[48]
																		v[49] = i.Model.KApplyArg(v[22], 10)
																		// KVariable _23 = v[49]
																		v[50] = i.Model.KApplyArg(v[22], 11)
																		// KVariable _24 = v[50]
																		v[51] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _25 = v[51]
																		v[52] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _26 = v[52]
																		v[53] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _27 = v[53]
																		v[54] = i.Model.KApplyArg(c, 8)
																		// KVariable _33 = v[54]
																		// rule #617
																		// source: iele-gas.k @636
																		// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,operandList(_289,operandList(_290,`.List{"operandList"}`(.KList)))),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("2","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_289),isBytes(LM)),isSchedule(SCHED)),isInt(_290)),isOperand(IDX))) ensures #token("true","Bool") [UNIQUE_ID(8c7e01da0792226f0dd258ba5f26b8866dd491265d1d502b29c873fd7f68b88f) contentStartColumn(10) contentStartLine(636) org.kframework.attributes.Location(Location(636,10,636,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 36 {
																				// lookup:#match(LM,`Map:lookup`(_34,IDX))
																				v[55], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,IDX)
																					v[37] /*_34*/,
																					v[5] /*IDX*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[56] = v[55]
																				if v[56] == m.InternedBottom {
																					return i.stepLookups(c, config, 36) // reapply
																				}
																				if v[56]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																					v[57 /*LM*/] = v[56] // LM
																					// lookup:#match(DotVar4,`_[_<-undef]`(_34,IDX))
																					v[58], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,IDX)
																						v[37] /*_34*/,
																						v[5] /*IDX*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[59] = v[58]
																					if v[59] == m.InternedBottom {
																						return i.stepLookups(c, config, 36) // reapply
																					}
																					if v[59]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																						v[60 /*DotVar4*/] = v[59] // DotVar4
																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),isSchedule(SCHED)),#token("true","Bool")),isOperand(IDX)))
																						v[61], i.evalErr = i.evalIsBytes( // isBytes(LM)
																							v[57 /*LM*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						// `_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),isSchedule(SCHED))
																						bv[1] = /* rhs precomputed isInt(_289) */ /* && */ m.IsTrue(v[61])
																						if bv[1] {
																							v[62], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																								v[11] /*SCHED*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[1] = m.IsTrue(v[62])
																						}
																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),isSchedule(SCHED)),#token("true","Bool")),isOperand(IDX))
																						bv[0] = bv[1] /* && */ /* rhs precomputed isInt(_290) */ 
																						if bv[0] {
																							v[63], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																								v[5] /*IDX*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[0] = m.IsTrue(v[63])
																						}
																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																							// RHS
																							return i.stepRHS617(v, bv, config)
																						}
																					} else {
																						return i.stepLookups(c, config, 36) // reapply
																					}
																				} else {
																					return i.stepLookups(c, config, 36) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 593
						// KVariable _154 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _14 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _15 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _16 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _17 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												// KVariable _2 = v[26]
												v[27] = i.Model.KApplyArg(v[23], 3)
												// KVariable _3 = v[27]
												v[28] = i.Model.KApplyArg(v[23], 4)
												// KVariable _4 = v[28]
												v[29] = i.Model.KApplyArg(v[23], 5)
												// KVariable _5 = v[29]
												v[30] = i.Model.KApplyArg(v[23], 6)
												// KVariable _6 = v[30]
												v[31] = i.Model.KApplyArg(v[23], 7)
												// KVariable _7 = v[31]
												v[32] = i.Model.KApplyArg(v[23], 8)
												if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[33] = i.Model.KApplyArg(v[32], 0)
													// KVariable _34 = v[33]
													v[34] = i.Model.KApplyArg(v[23], 9)
													// KVariable _8 = v[34]
													v[35] = i.Model.KApplyArg(v[23], 10)
													// KVariable _9 = v[35]
													v[36] = i.Model.KApplyArg(v[23], 11)
													// KVariable _10 = v[36]
													v[37] = i.Model.KApplyArg(v[23], 12)
													// KVariable _11 = v[37]
													v[38] = i.Model.KApplyArg(v[23], 13)
													// KVariable _12 = v[38]
													v[39] = i.Model.KApplyArg(v[23], 14)
													// KVariable _13 = v[39]
													v[40] = i.Model.KApplyArg(v[18], 5)
													// KVariable _18 = v[40]
													v[41] = i.Model.KApplyArg(v[18], 6)
													// KVariable _19 = v[41]
													v[42] = i.Model.KApplyArg(v[18], 7)
													// KVariable _20 = v[42]
													v[43] = i.Model.KApplyArg(v[18], 8)
													// KVariable _21 = v[43]
													v[44] = i.Model.KApplyArg(v[18], 9)
													// KVariable _22 = v[44]
													v[45] = i.Model.KApplyArg(v[18], 10)
													// KVariable _23 = v[45]
													v[46] = i.Model.KApplyArg(v[18], 11)
													// KVariable _24 = v[46]
													v[47] = i.Model.KApplyArg(v[18], 12)
													// KVariable _25 = v[47]
													v[48] = i.Model.KApplyArg(v[18], 13)
													// KVariable _26 = v[48]
													v[49] = i.Model.KApplyArg(v[18], 14)
													// KVariable _27 = v[49]
													v[50] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[50]
													// rule #593
													// source: iele-gas.k @643
													// {| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`log_,__IELE-COMMON`(IDX,_154),SCHED)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED)),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))) ensures #token("true","Bool") [UNIQUE_ID(bf77889de644a7cfc15162b2b9ffe05f15f65eacce3420bc8e0e2841174ae93f) contentStartColumn(10) contentStartLine(643) org.kframework.attributes.Location(Location(643,10,645,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// LOOKUPS
														if guard < 37 {
															// lookup:#match(LM,_34)
															v[51] = v[33] /*_34*/
															if v[51] == m.InternedBottom {
																return i.stepLookups(c, config, 37) // reapply
															}
															if v[51]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																v[52 /*LM*/] = v[51] // LM
																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED)),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM))))
																v[53], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(_154)
																	v[6] /*_154*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED))
																bv[3] = m.IsTrue(v[53])
																if bv[3] {
																	v[54], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																		v[7] /*SCHED*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[3] = m.IsTrue(v[54])
																}
																// `_andBool_`(`_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED)),isMap(LM))
																bv[2] = bv[3]
																if bv[2] {
																	v[55], i.evalErr = i.evalIsMap( // isMap(LM)
																		v[52 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[55])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED)),isMap(LM)),isOperand(IDX))
																bv[1] = bv[2]
																if bv[1] {
																	v[56], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																		v[5] /*IDX*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[56])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isNonEmptyOperands(_154),isSchedule(SCHED)),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))
																bv[0] = bv[1]
																if bv[0] {
																	v[57], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LM)
																		v[5] /*IDX*/,
																		v[52 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = !(m.IsTrue(v[57]))
																}
																if /* rhs precomputed lookup #match */ /* && */ bv[0] {
																	// RHS
																	return i.stepRHS593(v, bv, config)
																}
															} else {
																return i.stepLookups(c, config, 37) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 568, 615
					if v[4]&kapplyMatchMask == kapplyMatchLblLogXuXuIELEXhyphenCOMMON1 { // `log__IELE-COMMON`(IDX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable IDX = v[5]
						v[6] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[32] = i.Model.KApplyArg(v[31], 0)
													// KVariable _34 = v[32]
													v[33] = i.Model.KApplyArg(v[22], 9)
													// KVariable _8 = v[33]
													v[34] = i.Model.KApplyArg(v[22], 10)
													// KVariable _9 = v[34]
													v[35] = i.Model.KApplyArg(v[22], 11)
													// KVariable _10 = v[35]
													v[36] = i.Model.KApplyArg(v[22], 12)
													// KVariable _11 = v[36]
													v[37] = i.Model.KApplyArg(v[22], 13)
													// KVariable _12 = v[37]
													v[38] = i.Model.KApplyArg(v[22], 14)
													// KVariable _13 = v[38]
													v[39] = i.Model.KApplyArg(v[17], 5)
													// KVariable _18 = v[39]
													v[40] = i.Model.KApplyArg(v[17], 6)
													// KVariable _19 = v[40]
													v[41] = i.Model.KApplyArg(v[17], 7)
													// KVariable _20 = v[41]
													v[42] = i.Model.KApplyArg(v[17], 8)
													// KVariable _21 = v[42]
													v[43] = i.Model.KApplyArg(v[17], 9)
													// KVariable _22 = v[43]
													v[44] = i.Model.KApplyArg(v[17], 10)
													// KVariable _23 = v[44]
													v[45] = i.Model.KApplyArg(v[17], 11)
													// KVariable _24 = v[45]
													v[46] = i.Model.KApplyArg(v[17], 12)
													// KVariable _25 = v[46]
													v[47] = i.Model.KApplyArg(v[17], 13)
													// KVariable _26 = v[47]
													v[48] = i.Model.KApplyArg(v[17], 14)
													// KVariable _27 = v[48]
													v[49] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[49]
													// rule: 568
													// rule #568
													// source: iele-gas.k @634
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`log__IELE-COMMON`(IDX),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Glog_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Glogdata_IELE-GAS`(.KList),SCHED),bytesInWords(lengthBytes(LM)))),`_*Int__INT`(#token("0","Int"),`_<_>_IELE-GAS`(`Glogtopic_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,IDX)),#match(DotVar4,`_[_<-undef]`(_34,IDX))),`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(IDX))) ensures #token("true","Bool") [UNIQUE_ID(d9706dfda8b47657b8d5aa0e0f2d62d5a961bc312e8a43444332c5aba3664e08) contentStartColumn(10) contentStartLine(634) org.kframework.attributes.Location(Location(634,10,634,237)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 38 {
															// lookup:#match(LM,`Map:lookup`(_34,IDX))
															v[50], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,IDX)
																v[32] /*_34*/,
																v[5] /*IDX*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[51] = v[50]
															if v[51] == m.InternedBottom {
																return i.stepLookups(c, config, 38) // reapply
															}
															if v[51]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[52 /*LM*/] = v[51] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,IDX))
																v[53], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,IDX)
																	v[32] /*_34*/,
																	v[5] /*IDX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[54] = v[53]
																if v[54] == m.InternedBottom {
																	return i.stepLookups(c, config, 38) // reapply
																}
																if v[54]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[55 /*DotVar4*/] = v[54] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(IDX)))
																	v[56], i.evalErr = i.evalIsBytes( // isBytes(LM)
																		v[52 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isBytes(LM),isSchedule(SCHED))
																	bv[1] = m.IsTrue(v[56])
																	if bv[1] {
																		v[57], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																			v[6] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[57])
																	}
																	// `_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(IDX))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[58], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																			v[5] /*IDX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[58])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS568(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 38) // reapply
																}
															} else {
																return i.stepLookups(c, config, 38) // reapply
															}
														}
													}
													// rule: 615
													// rule #615
													// source: iele-gas.k @640
													// {| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`log__IELE-COMMON`(IDX),SCHED)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34=>`_Map_`(LM,`_|->_`(IDX,`.Bytes_BYTES-HOOKED`(.KList)))),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(#match(LM,_34),`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))) ensures #token("true","Bool") [UNIQUE_ID(bb6127a4a05f3e96a3a6115b2a79ecd28b9cc3fcc9498ad553c0ef40aadd5b8d) contentStartColumn(10) contentStartLine(640) org.kframework.attributes.Location(Location(640,10,642,39)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// LOOKUPS
														if guard < 39 {
															// lookup:#match(LM,_34)
															v[50] = v[32] /*_34*/
															if v[50] == m.InternedBottom {
																return i.stepLookups(c, config, 39) // reapply
															}
															if v[50]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																v[51 /*LM*/] = v[50] // LM
																// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM))))
																v[52], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																	v[6] /*SCHED*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																// `_andBool_`(isSchedule(SCHED),isMap(LM))
																bv[2] = m.IsTrue(v[52])
																if bv[2] {
																	v[53], i.evalErr = i.evalIsMap( // isMap(LM)
																		v[51 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[2] = m.IsTrue(v[53])
																}
																// `_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isOperand(IDX))
																bv[1] = bv[2]
																if bv[1] {
																	v[54], i.evalErr = i.evalIsOperand( // isOperand(IDX)
																		v[5] /*IDX*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[1] = m.IsTrue(v[54])
																}
																// `_andBool_`(`_andBool_`(`_andBool_`(isSchedule(SCHED),isMap(LM)),isOperand(IDX)),`notBool_`(`_in_keys(_)_MAP`(IDX,LM)))
																bv[0] = bv[1]
																if bv[0] {
																	v[55], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(IDX,LM)
																		v[5] /*IDX*/,
																		v[51 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	bv[0] = !(m.IsTrue(v[55]))
																}
																if /* rhs precomputed lookup #match */ /* && */ bv[0] {
																	// RHS
																	return i.stepRHS615(v, bv, config)
																}
															} else {
																return i.stepLookups(c, config, 39) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 573
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(_213,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _213 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _14 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _15 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _16 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _17 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												// KVariable _2 = v[26]
												v[27] = i.Model.KApplyArg(v[23], 3)
												// KVariable _3 = v[27]
												v[28] = i.Model.KApplyArg(v[23], 4)
												// KVariable _4 = v[28]
												v[29] = i.Model.KApplyArg(v[23], 5)
												// KVariable _5 = v[29]
												v[30] = i.Model.KApplyArg(v[23], 6)
												// KVariable _6 = v[30]
												v[31] = i.Model.KApplyArg(v[23], 7)
												// KVariable _7 = v[31]
												v[32] = i.Model.KApplyArg(v[23], 8)
												if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[33] = i.Model.KApplyArg(v[32], 0)
													// KVariable _34 = v[33]
													v[34] = i.Model.KApplyArg(v[23], 9)
													// KVariable _8 = v[34]
													v[35] = i.Model.KApplyArg(v[23], 10)
													// KVariable _9 = v[35]
													v[36] = i.Model.KApplyArg(v[23], 11)
													// KVariable _10 = v[36]
													v[37] = i.Model.KApplyArg(v[23], 12)
													// KVariable _11 = v[37]
													v[38] = i.Model.KApplyArg(v[23], 13)
													// KVariable _12 = v[38]
													v[39] = i.Model.KApplyArg(v[23], 14)
													// KVariable _13 = v[39]
													v[40] = i.Model.KApplyArg(v[18], 5)
													// KVariable _18 = v[40]
													v[41] = i.Model.KApplyArg(v[18], 6)
													// KVariable _19 = v[41]
													v[42] = i.Model.KApplyArg(v[18], 7)
													// KVariable _20 = v[42]
													v[43] = i.Model.KApplyArg(v[18], 8)
													// KVariable _21 = v[43]
													v[44] = i.Model.KApplyArg(v[18], 9)
													// KVariable _22 = v[44]
													v[45] = i.Model.KApplyArg(v[18], 10)
													// KVariable _23 = v[45]
													v[46] = i.Model.KApplyArg(v[18], 11)
													// KVariable _24 = v[46]
													v[47] = i.Model.KApplyArg(v[18], 12)
													// KVariable _25 = v[47]
													v[48] = i.Model.KApplyArg(v[18], 13)
													// KVariable _26 = v[48]
													v[49] = i.Model.KApplyArg(v[18], 14)
													// KVariable _27 = v[49]
													v[50] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[50]
													// rule #573
													// source: iele-gas.k @654
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=load__IELE-COMMON`(_213,INDEX),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gloadcell_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gloadword_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,INDEX)),#match(DotVar4,`_[_<-undef]`(_34,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(INDEX)),isLValue(_213))) ensures #token("true","Bool") [UNIQUE_ID(1fbc5f1a7b1e9199a246cd4a74b05837dccf518416d3f7df08c3b7830fd10bf3) contentStartColumn(10) contentStartLine(654) org.kframework.attributes.Location(Location(654,10,655,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 40 {
															// lookup:#match(LM,`Map:lookup`(_34,INDEX))
															v[51], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,INDEX)
																v[33] /*_34*/,
																v[6] /*INDEX*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[52] = v[51]
															if v[52] == m.InternedBottom {
																return i.stepLookups(c, config, 40) // reapply
															}
															if v[52]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[53 /*LM*/] = v[52] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,INDEX))
																v[54], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,INDEX)
																	v[33] /*_34*/,
																	v[6] /*INDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[55] = v[54]
																if v[55] == m.InternedBottom {
																	return i.stepLookups(c, config, 40) // reapply
																}
																if v[55]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[56 /*DotVar4*/] = v[55] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(INDEX)),isLValue(_213)))
																	v[57], i.evalErr = i.evalIsBytes( // isBytes(LM)
																		v[53 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isBytes(LM),isSchedule(SCHED))
																	bv[2] = m.IsTrue(v[57])
																	if bv[2] {
																		v[58], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																			v[7] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[58])
																	}
																	// `_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(INDEX))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[59], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																			v[6] /*INDEX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[59])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(isBytes(LM),isSchedule(SCHED)),isOperand(INDEX)),isLValue(_213))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[60], i.evalErr = i.evalIsLValue( // isLValue(_213)
																			v[5] /*_213*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[60])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS573(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 40) // reapply
																}
															} else {
																return i.stepLookups(c, config, 40) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 577, 614, 635
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(_239,`@__IELE-COMMON`(NAME),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 577
						// KVariable _239 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable NAME = v[7]
							v[8] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[8]
							v[9] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _22 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _23 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _24 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _25 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21)
													v[26] = i.Model.KApplyArg(v[25], 0)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_42),_3,_4,_5,_6,_7)
														v[27] = i.Model.KApplyArg(v[26], 0)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_42)
															v[28] = i.Model.KApplyArg(v[27], 0)
															// KVariable _42 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 1)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[26], 2)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[26], 3)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[26], 4)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[26], 5)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[25], 1)
															// KVariable _8 = v[34]
															v[35] = i.Model.KApplyArg(v[25], 2)
															// KVariable _9 = v[35]
															v[36] = i.Model.KApplyArg(v[25], 3)
															// KVariable _10 = v[36]
															v[37] = i.Model.KApplyArg(v[25], 4)
															// KVariable _11 = v[37]
															v[38] = i.Model.KApplyArg(v[25], 5)
															// KVariable _12 = v[38]
															v[39] = i.Model.KApplyArg(v[25], 6)
															// KVariable _13 = v[39]
															v[40] = i.Model.KApplyArg(v[25], 7)
															// KVariable _14 = v[40]
															v[41] = i.Model.KApplyArg(v[25], 8)
															// KVariable _15 = v[41]
															v[42] = i.Model.KApplyArg(v[25], 9)
															// KVariable _16 = v[42]
															v[43] = i.Model.KApplyArg(v[25], 10)
															// KVariable _17 = v[43]
															v[44] = i.Model.KApplyArg(v[25], 11)
															// KVariable _18 = v[44]
															v[45] = i.Model.KApplyArg(v[25], 12)
															// KVariable _19 = v[45]
															v[46] = i.Model.KApplyArg(v[25], 13)
															// KVariable _20 = v[46]
															v[47] = i.Model.KApplyArg(v[25], 14)
															// KVariable _21 = v[47]
															v[48] = i.Model.KApplyArg(v[20], 5)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[20], 6)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(v[20], 7)
															// KVariable _28 = v[50]
															v[51] = i.Model.KApplyArg(v[20], 8)
															// KVariable _29 = v[51]
															v[52] = i.Model.KApplyArg(v[20], 9)
															// KVariable _30 = v[52]
															v[53] = i.Model.KApplyArg(v[20], 10)
															// KVariable _31 = v[53]
															v[54] = i.Model.KApplyArg(v[20], 11)
															// KVariable _32 = v[54]
															v[55] = i.Model.KApplyArg(v[20], 12)
															// KVariable _33 = v[55]
															v[56] = i.Model.KApplyArg(v[20], 13)
															// KVariable _34 = v[56]
															v[57] = i.Model.KApplyArg(v[20], 14)
															// KVariable _35 = v[57]
															v[58] = i.Model.KApplyArg(c, 8)
															// KVariable _41 = v[58]
															// rule #577
															// source: iele-gas.k @581
															// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_239,`@__IELE-COMMON`(NAME),ARGS),SCHED)=>`_+Int_`(`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_*Int__INT`(intSizes(ARGS),`_<_>_IELE-GAS`(`Gmove_IELE-GAS`(.KList),SCHED))),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_41) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239)),isInts(ARGS)),isInt(REGISTERS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))) ensures #token("true","Bool") [UNIQUE_ID(539d428be0fda46cf38e843403cb3ce936c7898bc802d0351a76b92844427194) contentStartColumn(10) contentStartLine(581) org.kframework.attributes.Location(Location(581,10,584,44)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// LOOKUPS
																if guard < 41 {
																	// lookup:#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME)))
																	v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<funcId>`(NAME))
																		v[28] /*_42*/,
																		i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																			v[7] /*NAME*/,
																		),
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[60] = v[59]
																	if v[60] == m.InternedBottom {
																		return i.stepLookups(c, config, 41) // reapply
																	}
																	if v[60]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS))
																		v[61] = i.Model.KApplyArg(v[60], 0)
																		if v[61]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(NAME)
																			v[62] = i.Model.KApplyArg(v[61], 0)
																			if i.Model.Equals(v[62], v[7] /*NAME*/) { // lhs KVariable, which reappears:NAME
																				v[63] = i.Model.KApplyArg(v[60], 1)
																				v[64 /*_0*/] = v[63] // lhs KVariable _0
																				v[65] = i.Model.KApplyArg(v[60], 2)
																				v[66 /*_1*/] = v[65] // lhs KVariable _1
																				v[67] = i.Model.KApplyArg(v[60], 3)
																				v[68 /*_2*/] = v[67] // lhs KVariable _2
																				v[69] = i.Model.KApplyArg(v[60], 4)
																				if v[69]&kapplyMatchMask == kapplyMatchLblXltnregsXgt1 { // `<nregs>`(REGISTERS)
																					v[70] = i.Model.KApplyArg(v[69], 0)
																					if i.tempTypeVar = v[70] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						v[71 /*REGISTERS*/] = v[70] // REGISTERS
																						// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))
																						v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<funcId>`(NAME))
																							v[28] /*_42*/,
																							i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																								v[7] /*NAME*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[73] = v[72]
																						if v[73] == m.InternedBottom {
																							return i.stepLookups(c, config, 41) // reapply
																						}
																						if v[73]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																							v[74 /*DotVar5*/] = v[73] // DotVar5
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239)),isInts(ARGS)),isInt(REGISTERS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))))
																							v[75], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																								v[7] /*NAME*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(isIeleName(NAME),isSchedule(SCHED))
																							bv[4] = m.IsTrue(v[75])
																							if bv[4] {
																								v[76], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																									v[9] /*SCHED*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[4] = m.IsTrue(v[76])
																							}
																							// `_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239))
																							bv[3] = bv[4]
																							if bv[3] {
																								v[77], i.evalErr = i.evalIsLValues( // isLValues(_239)
																									v[5] /*_239*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[3] = m.IsTrue(v[77])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239)),isInts(ARGS))
																							bv[2] = bv[3]
																							if bv[2] {
																								v[78], i.evalErr = i.evalIsInts( // isInts(ARGS)
																									v[8] /*ARGS*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[78])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239)),isInts(ARGS)),isInt(REGISTERS))
																							bv[1] = bv[2]
																							if bv[1] {
																								v[79], i.evalErr = i.evalIsInt( // isInt(REGISTERS)
																									v[71 /*REGISTERS*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[79])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isSchedule(SCHED)),isLValues(_239)),isInts(ARGS)),isInt(REGISTERS)),`notBool_`(`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																							bv[0] = bv[1]
																							if bv[0] {
																								v[80], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																									i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																									),
																									v[9] /*SCHED*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = !(m.IsTrue(v[80]))
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS577(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 41) // reapply
																						}
																					}
																				}
																			}
																		}
																	} else {
																		return i.stepLookups(c, config, 41) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 614
						// KVariable _248 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _249 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 1)
							// KVariable _250 = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _33 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _34 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											// KVariable _35 = v[16]
											v[17] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[17]
											v[18] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[18]
											v[19] = i.Model.KApplyArg(c, 7)
											if v[19]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
												v[20] = i.Model.KApplyArg(v[19], 0)
												// KVariable _19 = v[20]
												v[21] = i.Model.KApplyArg(v[19], 1)
												// KVariable _20 = v[21]
												v[22] = i.Model.KApplyArg(v[19], 2)
												// KVariable _21 = v[22]
												v[23] = i.Model.KApplyArg(v[19], 3)
												// KVariable _22 = v[23]
												v[24] = i.Model.KApplyArg(v[19], 4)
												if v[24]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
													v[25] = i.Model.KApplyArg(v[24], 0)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4)
														v[26] = i.Model.KApplyArg(v[25], 0)
														// KVariable _0 = v[26]
														v[27] = i.Model.KApplyArg(v[25], 1)
														// KVariable _1 = v[27]
														v[28] = i.Model.KApplyArg(v[25], 2)
														if v[28]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(_39)
															v[29] = i.Model.KApplyArg(v[28], 0)
															// KVariable _39 = v[29]
															v[30] = i.Model.KApplyArg(v[25], 3)
															// KVariable _2 = v[30]
															v[31] = i.Model.KApplyArg(v[25], 4)
															// KVariable _3 = v[31]
															v[32] = i.Model.KApplyArg(v[25], 5)
															// KVariable _4 = v[32]
															v[33] = i.Model.KApplyArg(v[24], 1)
															// KVariable _5 = v[33]
															v[34] = i.Model.KApplyArg(v[24], 2)
															// KVariable _6 = v[34]
															v[35] = i.Model.KApplyArg(v[24], 3)
															// KVariable _7 = v[35]
															v[36] = i.Model.KApplyArg(v[24], 4)
															// KVariable _8 = v[36]
															v[37] = i.Model.KApplyArg(v[24], 5)
															// KVariable _9 = v[37]
															v[38] = i.Model.KApplyArg(v[24], 6)
															// KVariable _10 = v[38]
															v[39] = i.Model.KApplyArg(v[24], 7)
															// KVariable _11 = v[39]
															v[40] = i.Model.KApplyArg(v[24], 8)
															// KVariable _12 = v[40]
															v[41] = i.Model.KApplyArg(v[24], 9)
															// KVariable _13 = v[41]
															v[42] = i.Model.KApplyArg(v[24], 10)
															// KVariable _14 = v[42]
															v[43] = i.Model.KApplyArg(v[24], 11)
															// KVariable _15 = v[43]
															v[44] = i.Model.KApplyArg(v[24], 12)
															// KVariable _16 = v[44]
															v[45] = i.Model.KApplyArg(v[24], 13)
															// KVariable _17 = v[45]
															v[46] = i.Model.KApplyArg(v[24], 14)
															// KVariable _18 = v[46]
															v[47] = i.Model.KApplyArg(v[19], 5)
															// KVariable _23 = v[47]
															v[48] = i.Model.KApplyArg(v[19], 6)
															// KVariable _24 = v[48]
															v[49] = i.Model.KApplyArg(v[19], 7)
															// KVariable _25 = v[49]
															v[50] = i.Model.KApplyArg(v[19], 8)
															// KVariable _26 = v[50]
															v[51] = i.Model.KApplyArg(v[19], 9)
															// KVariable _27 = v[51]
															v[52] = i.Model.KApplyArg(v[19], 10)
															// KVariable _28 = v[52]
															v[53] = i.Model.KApplyArg(v[19], 11)
															// KVariable _29 = v[53]
															v[54] = i.Model.KApplyArg(v[19], 12)
															// KVariable _30 = v[54]
															v[55] = i.Model.KApplyArg(v[19], 13)
															// KVariable _31 = v[55]
															v[56] = i.Model.KApplyArg(v[19], 14)
															// KVariable _32 = v[56]
															v[57] = i.Model.KApplyArg(c, 8)
															// KVariable _38 = v[57]
															// rule #614
															// source: iele-gas.k @590
															// {| rule `<generatedTop>`(`<k>`(`#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_248,IDX=>`@__IELE-COMMON`(FUNC),_249),_250)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_39,IDX)),#match(FUNC,`Map:lookup`(_39,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isLValues(_248)),isSchedule(_250)),isIeleName(FUNC)),isOperands(_249))) ensures #token("true","Bool") [UNIQUE_ID(d8e25e037ffeae066b6898eda915d8797ad4931f2ccabafb2de4e1395de93c93) contentStartColumn(10) contentStartLine(590) org.kframework.attributes.Location(Location(590,10,591,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// LOOKUPS
																if guard < 42 {
																	// lookup:#match(DotVar5,`_[_<-undef]`(_39,IDX))
																	v[58], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,IDX)
																		v[29] /*_39*/,
																		v[6] /*IDX*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[59] = v[58]
																	if v[59] == m.InternedBottom {
																		return i.stepLookups(c, config, 42) // reapply
																	}
																	if v[59]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																		v[60 /*DotVar5*/] = v[59] // DotVar5
																		// lookup:#match(FUNC,`Map:lookup`(_39,IDX))
																		v[61], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,IDX)
																			v[29] /*_39*/,
																			v[6] /*IDX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[62] = v[61]
																		if v[62] == m.InternedBottom {
																			return i.stepLookups(c, config, 42) // reapply
																		}
																		v[63 /*FUNC*/] = v[62] // lhs KVariable FUNC
																		// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_248)),isSchedule(_250)),isIeleName(FUNC)),isOperands(_249)))
																		v[64], i.evalErr = i.evalIsLValues( // isLValues(_248)
																			v[5] /*_248*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_248)),isSchedule(_250))
																		bv[2] = /* rhs precomputed isInt(IDX) */ /* && */ m.IsTrue(v[64])
																		if bv[2] {
																			v[65], i.evalErr = i.evalIsSchedule( // isSchedule(_250)
																				v[8] /*_250*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[2] = m.IsTrue(v[65])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_248)),isSchedule(_250)),isIeleName(FUNC))
																		bv[1] = bv[2]
																		if bv[1] {
																			v[66], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																				v[63 /*FUNC*/],
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[66])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isLValues(_248)),isSchedule(_250)),isIeleName(FUNC)),isOperands(_249))
																		bv[0] = bv[1]
																		if bv[0] {
																			v[67], i.evalErr = i.evalIsOperands( // isOperands(_249)
																				v[7] /*_249*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[0] = m.IsTrue(v[67])
																		}
																		if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																			// RHS
																			return i.stepRHS614(v, bv, config)
																		}
																	} else {
																		return i.stepLookups(c, config, 42) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 635
						// KVariable _223 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable NAME = v[7]
							v[8] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[8]
							v[9] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[9]
							// KVariable DotVar1 = v[3]
							v[10] = i.Model.KApplyArg(c, 1)
							if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[11] = i.Model.KApplyArg(v[10], 0)
								if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[14] = i.Model.KApplyArg(v[12], 0)
										if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[13]
											v[15] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[15]
											v[16] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[16]
											v[17] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[17]
											v[18] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[18]
											v[19] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[19]
											v[20] = i.Model.KApplyArg(c, 7)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35)
												v[21] = i.Model.KApplyArg(v[20], 0)
												// KVariable _22 = v[21]
												v[22] = i.Model.KApplyArg(v[20], 1)
												// KVariable _23 = v[22]
												v[23] = i.Model.KApplyArg(v[20], 2)
												// KVariable _24 = v[23]
												v[24] = i.Model.KApplyArg(v[20], 3)
												// KVariable _25 = v[24]
												v[25] = i.Model.KApplyArg(v[20], 4)
												if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21)
													v[26] = i.Model.KApplyArg(v[25], 0)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_42),_3,_4,_5,_6,_7)
														v[27] = i.Model.KApplyArg(v[26], 0)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_42)
															v[28] = i.Model.KApplyArg(v[27], 0)
															// KVariable _42 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 1)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[26], 2)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[26], 3)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[26], 4)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[26], 5)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[25], 1)
															// KVariable _8 = v[34]
															v[35] = i.Model.KApplyArg(v[25], 2)
															// KVariable _9 = v[35]
															v[36] = i.Model.KApplyArg(v[25], 3)
															// KVariable _10 = v[36]
															v[37] = i.Model.KApplyArg(v[25], 4)
															// KVariable _11 = v[37]
															v[38] = i.Model.KApplyArg(v[25], 5)
															// KVariable _12 = v[38]
															v[39] = i.Model.KApplyArg(v[25], 6)
															// KVariable _13 = v[39]
															v[40] = i.Model.KApplyArg(v[25], 7)
															// KVariable _14 = v[40]
															v[41] = i.Model.KApplyArg(v[25], 8)
															// KVariable _15 = v[41]
															v[42] = i.Model.KApplyArg(v[25], 9)
															// KVariable _16 = v[42]
															v[43] = i.Model.KApplyArg(v[25], 10)
															// KVariable _17 = v[43]
															v[44] = i.Model.KApplyArg(v[25], 11)
															// KVariable _18 = v[44]
															v[45] = i.Model.KApplyArg(v[25], 12)
															// KVariable _19 = v[45]
															v[46] = i.Model.KApplyArg(v[25], 13)
															// KVariable _20 = v[46]
															v[47] = i.Model.KApplyArg(v[25], 14)
															// KVariable _21 = v[47]
															v[48] = i.Model.KApplyArg(v[20], 5)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[20], 6)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(v[20], 7)
															// KVariable _28 = v[50]
															v[51] = i.Model.KApplyArg(v[20], 8)
															// KVariable _29 = v[51]
															v[52] = i.Model.KApplyArg(v[20], 9)
															// KVariable _30 = v[52]
															v[53] = i.Model.KApplyArg(v[20], 10)
															// KVariable _31 = v[53]
															v[54] = i.Model.KApplyArg(v[20], 11)
															// KVariable _32 = v[54]
															v[55] = i.Model.KApplyArg(v[20], 12)
															// KVariable _33 = v[55]
															v[56] = i.Model.KApplyArg(v[20], 13)
															// KVariable _34 = v[56]
															v[57] = i.Model.KApplyArg(v[20], 14)
															// KVariable _35 = v[57]
															v[58] = i.Model.KApplyArg(c, 8)
															// KVariable _41 = v[58]
															// rule #635
															// source: iele-gas.k @585
															// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_223,`@__IELE-COMMON`(NAME),ARGS),SCHED)=>`_+Int_`(`_*Int__INT`(`_<_>_IELE-GAS`(`Gcallreg_IELE-GAS`(.KList),SCHED),REGISTERS),`_<_>_IELE-GAS`(`Glocalcall_IELE-GAS`(.KList),SCHED))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_42),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_41) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS)),isLValues(_223)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))) ensures #token("true","Bool") [UNIQUE_ID(37de00831ad5f49f03e2b58a9d0e78bd5c10500b9fd97dfacd9f82f1e675b975) contentStartColumn(10) contentStartLine(585) org.kframework.attributes.Location(Location(585,10,588,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// LOOKUPS
																if guard < 43 {
																	// lookup:#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_42,`<funcId>`(NAME)))
																	v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<funcId>`(NAME))
																		v[28] /*_42*/,
																		i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																			v[7] /*NAME*/,
																		),
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[60] = v[59]
																	if v[60] == m.InternedBottom {
																		return i.stepLookups(c, config, 43) // reapply
																	}
																	if v[60]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS))
																		v[61] = i.Model.KApplyArg(v[60], 0)
																		if v[61]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(NAME)
																			v[62] = i.Model.KApplyArg(v[61], 0)
																			if i.Model.Equals(v[62], v[7] /*NAME*/) { // lhs KVariable, which reappears:NAME
																				v[63] = i.Model.KApplyArg(v[60], 1)
																				v[64 /*_0*/] = v[63] // lhs KVariable _0
																				v[65] = i.Model.KApplyArg(v[60], 2)
																				v[66 /*_1*/] = v[65] // lhs KVariable _1
																				v[67] = i.Model.KApplyArg(v[60], 3)
																				v[68 /*_2*/] = v[67] // lhs KVariable _2
																				v[69] = i.Model.KApplyArg(v[60], 4)
																				if v[69]&kapplyMatchMask == kapplyMatchLblXltnregsXgt1 { // `<nregs>`(REGISTERS)
																					v[70] = i.Model.KApplyArg(v[69], 0)
																					if i.tempTypeVar = v[70] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						v[71 /*REGISTERS*/] = v[70] // REGISTERS
																						// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<funcId>`(NAME)))
																						v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<funcId>`(NAME))
																							v[28] /*_42*/,
																							i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																								v[7] /*NAME*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[73] = v[72]
																						if v[73] == m.InternedBottom {
																							return i.stepLookups(c, config, 43) // reapply
																						}
																						if v[73]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																							v[74 /*DotVar5*/] = v[73] // DotVar5
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS)),isLValues(_223)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)))
																							v[75], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																								v[7] /*NAME*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(isIeleName(NAME),isOperands(ARGS))
																							bv[4] = m.IsTrue(v[75])
																							if bv[4] {
																								v[76], i.evalErr = i.evalIsOperands( // isOperands(ARGS)
																									v[8] /*ARGS*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[4] = m.IsTrue(v[76])
																							}
																							// `_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED))
																							bv[3] = bv[4]
																							if bv[3] {
																								v[77], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																									v[9] /*SCHED*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[3] = m.IsTrue(v[77])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS))
																							bv[2] = bv[3]
																							if bv[2] {
																								v[78], i.evalErr = i.evalIsInt( // isInt(REGISTERS)
																									v[71 /*REGISTERS*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[78])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS)),isLValues(_223))
																							bv[1] = bv[2]
																							if bv[1] {
																								v[79], i.evalErr = i.evalIsLValues( // isLValues(_223)
																									v[5] /*_223*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[79])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isOperands(ARGS)),isSchedule(SCHED)),isInt(REGISTERS)),isLValues(_223)),`_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED))
																							bv[0] = bv[1]
																							if bv[0] {
																								v[80], i.evalErr = i.evalXuXltXltXuXgtXgtXuIELEXhyphenGAS( // `_<<_>>_IELE-GAS`(`Gnewmove_IELE-GAS`(.KList),SCHED)
																									i.Model.NewKApply(m.LblGnewmoveXuIELEXhyphenGAS, // as-is Gnewmove_IELE-GAS
																									),
																									v[9] /*SCHED*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = m.IsTrue(v[80])
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS635(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 43) // reapply
																						}
																					}
																				}
																			}
																		}
																	} else {
																		return i.stepLookups(c, config, 43) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 619
					if v[4]&kapplyMatchMask == kapplyMatchLblSelfdestructXuXuIELEXhyphenCOMMON1 { // `selfdestruct__IELE-COMMON`(ACCTTO)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _17 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// KVariable _0 = v[23]
													v[24] = i.Model.KApplyArg(v[22], 1)
													// KVariable _1 = v[24]
													v[25] = i.Model.KApplyArg(v[22], 2)
													// KVariable _2 = v[25]
													v[26] = i.Model.KApplyArg(v[22], 3)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCTFROM)
														v[27] = i.Model.KApplyArg(v[26], 0)
														if i.tempTypeVar = v[27] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable ACCTFROM = v[27]
															v[28] = i.Model.KApplyArg(v[22], 4)
															// KVariable _3 = v[28]
															v[29] = i.Model.KApplyArg(v[22], 5)
															// KVariable _4 = v[29]
															v[30] = i.Model.KApplyArg(v[22], 6)
															// KVariable _5 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 7)
															// KVariable _6 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 8)
															// KVariable _7 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 9)
															// KVariable _8 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 10)
															// KVariable _9 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 11)
															// KVariable _10 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 12)
															// KVariable _11 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[17], 5)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[17], 6)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[17], 7)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[17], 8)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[17], 9)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[17], 10)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[17], 11)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[17], 12)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[17], 13)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(v[17], 14)
															// KVariable _27 = v[48]
															v[49] = i.Model.KApplyArg(c, 8)
															if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_41),_33,_34,_35)
																v[50] = i.Model.KApplyArg(v[49], 0)
																// KVariable _32 = v[50]
																v[51] = i.Model.KApplyArg(v[49], 1)
																if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_41)
																	v[52] = i.Model.KApplyArg(v[51], 0)
																	// KVariable _41 = v[52]
																	v[53] = i.Model.KApplyArg(v[49], 2)
																	// KVariable _33 = v[53]
																	v[54] = i.Model.KApplyArg(v[49], 3)
																	// KVariable _34 = v[54]
																	v[55] = i.Model.KApplyArg(v[49], 4)
																	// KVariable _35 = v[55]
																	// rule #619
																	// source: iele-gas.k @714
																	// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`selfdestruct__IELE-COMMON`(ACCTTO),SCHED)=>`Cselfdestruct`(SCHED,#accountEmpty(ACCTTO),BAL)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCTFROM),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCTFROM))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCTTO)),isSchedule(SCHED)),isInt(ACCTFROM))) ensures #token("true","Bool") [UNIQUE_ID(130890e8fce1da0e41ee48ed1d962fdd3c68941492e1508ed76db55aa59a3ab5) contentStartColumn(10) contentStartLine(714) org.kframework.attributes.Location(Location(714,10,720,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 44 {
																			// lookup:#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCTFROM)))
																			v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<acctID>`(ACCTFROM))
																				v[52] /*_41*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[27] /*ACCTFROM*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[57] = v[56]
																			if v[57] == m.InternedBottom {
																				return i.stepLookups(c, config, 44) // reapply
																			}
																			if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTFROM),`<balance>`(BAL),_28,_29,_30,_31)
																				v[58] = i.Model.KApplyArg(v[57], 0)
																				if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTFROM)
																					v[59] = i.Model.KApplyArg(v[58], 0)
																					if i.Model.Equals(v[59], v[27] /*ACCTFROM*/) { // lhs KVariable, which reappears:ACCTFROM
																						v[60] = i.Model.KApplyArg(v[57], 1)
																						if v[60]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																							v[61] = i.Model.KApplyArg(v[60], 0)
																							if i.tempTypeVar = v[61] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								v[62 /*BAL*/] = v[61] // BAL
																								v[63] = i.Model.KApplyArg(v[57], 2)
																								v[64 /*_28*/] = v[63] // lhs KVariable _28
																								v[65] = i.Model.KApplyArg(v[57], 3)
																								v[66 /*_29*/] = v[65] // lhs KVariable _29
																								v[67] = i.Model.KApplyArg(v[57], 4)
																								v[68 /*_30*/] = v[67] // lhs KVariable _30
																								v[69] = i.Model.KApplyArg(v[57], 5)
																								v[70 /*_31*/] = v[69] // lhs KVariable _31
																								// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCTFROM)))
																								v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<acctID>`(ACCTFROM))
																									v[52] /*_41*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[27] /*ACCTFROM*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[72] = v[71]
																								if v[72] == m.InternedBottom {
																									return i.stepLookups(c, config, 44) // reapply
																								}
																								if v[72]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																									v[73 /*DotVar5*/] = v[72] // DotVar5
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isInt(BAL),#token("true","Bool")),isSchedule(SCHED)),#token("true","Bool")))
																									v[74], i.evalErr = i.evalIsInt( // isInt(BAL)
																										v[62 /*BAL*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(isInt(BAL),#token("true","Bool")),isSchedule(SCHED))
																									bv[0] = m.IsTrue(v[74]) /* && */ /* rhs precomputed isInt(ACCTTO) */ 
																									if bv[0] {
																										v[75], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																											v[6] /*SCHED*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = m.IsTrue(v[75])
																									}
																									if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(ACCTFROM) */  {
																										// RHS
																										return i.stepRHS619(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 44) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 44) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 624
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsloadXuXuIELEXhyphenCOMMON2 { // `_=sload__IELE-COMMON`(_304,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _304 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[6]
							v[7] = i.Model.KApplyArg(v[2], 1)
							// KVariable SCHED = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _16 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _17 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[24] = i.Model.KApplyArg(v[23], 0)
													// KVariable _0 = v[24]
													v[25] = i.Model.KApplyArg(v[23], 1)
													// KVariable _1 = v[25]
													v[26] = i.Model.KApplyArg(v[23], 2)
													// KVariable _2 = v[26]
													v[27] = i.Model.KApplyArg(v[23], 3)
													if v[27]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
														v[28] = i.Model.KApplyArg(v[27], 0)
														if i.tempTypeVar = v[28] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable ACCT = v[28]
															v[29] = i.Model.KApplyArg(v[23], 4)
															// KVariable _3 = v[29]
															v[30] = i.Model.KApplyArg(v[23], 5)
															// KVariable _4 = v[30]
															v[31] = i.Model.KApplyArg(v[23], 6)
															// KVariable _5 = v[31]
															v[32] = i.Model.KApplyArg(v[23], 7)
															// KVariable _6 = v[32]
															v[33] = i.Model.KApplyArg(v[23], 8)
															// KVariable _7 = v[33]
															v[34] = i.Model.KApplyArg(v[23], 9)
															// KVariable _8 = v[34]
															v[35] = i.Model.KApplyArg(v[23], 10)
															// KVariable _9 = v[35]
															v[36] = i.Model.KApplyArg(v[23], 11)
															// KVariable _10 = v[36]
															v[37] = i.Model.KApplyArg(v[23], 12)
															// KVariable _11 = v[37]
															v[38] = i.Model.KApplyArg(v[23], 13)
															// KVariable _12 = v[38]
															v[39] = i.Model.KApplyArg(v[23], 14)
															// KVariable _13 = v[39]
															v[40] = i.Model.KApplyArg(v[18], 5)
															// KVariable _18 = v[40]
															v[41] = i.Model.KApplyArg(v[18], 6)
															// KVariable _19 = v[41]
															v[42] = i.Model.KApplyArg(v[18], 7)
															// KVariable _20 = v[42]
															v[43] = i.Model.KApplyArg(v[18], 8)
															// KVariable _21 = v[43]
															v[44] = i.Model.KApplyArg(v[18], 9)
															// KVariable _22 = v[44]
															v[45] = i.Model.KApplyArg(v[18], 10)
															// KVariable _23 = v[45]
															v[46] = i.Model.KApplyArg(v[18], 11)
															// KVariable _24 = v[46]
															v[47] = i.Model.KApplyArg(v[18], 12)
															// KVariable _25 = v[47]
															v[48] = i.Model.KApplyArg(v[18], 13)
															// KVariable _26 = v[48]
															v[49] = i.Model.KApplyArg(v[18], 14)
															// KVariable _27 = v[49]
															v[50] = i.Model.KApplyArg(c, 8)
															if v[50]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_42),_33,_34,_35)
																v[51] = i.Model.KApplyArg(v[50], 0)
																// KVariable _32 = v[51]
																v[52] = i.Model.KApplyArg(v[50], 1)
																if v[52]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_42)
																	v[53] = i.Model.KApplyArg(v[52], 0)
																	// KVariable _42 = v[53]
																	v[54] = i.Model.KApplyArg(v[50], 2)
																	// KVariable _33 = v[54]
																	v[55] = i.Model.KApplyArg(v[50], 3)
																	// KVariable _34 = v[55]
																	v[56] = i.Model.KApplyArg(v[50], 4)
																	// KVariable _35 = v[56]
																	// rule #624
																	// source: iele-gas.k @671
																	// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sload__IELE-COMMON`(_304,INDEX),SCHED)=>`_+Int_`(`_+Int_`(`_<_>_IELE-GAS`(`Gsload_IELE-GAS`(.KList),SCHED),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadkey_IELE-GAS`(.KList),SCHED),intSize(INDEX))),`_*Int__INT`(`_<_>_IELE-GAS`(`Gsloadword_IELE-GAS`(.KList),SCHED),intSize(VALUE)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(INDEX),isInt(VALUE)),isSchedule(SCHED)),isInt(ACCT)),isLValue(_304))) ensures #token("true","Bool") [UNIQUE_ID(ecd117117b92a269786e5018ce72025b4920d4d51691ee2497e544aa9b6dc9d4) contentStartColumn(14) contentStartLine(671) org.kframework.attributes.Location(Location(671,14,677,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 45 {
																			// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT)))
																			v[57], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<acctID>`(ACCT))
																				v[53] /*_42*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[28] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[58] = v[57]
																			if v[58] == m.InternedBottom {
																				return i.stepLookups(c, config, 45) // reapply
																			}
																			if v[58]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31)
																				v[59] = i.Model.KApplyArg(v[58], 0)
																				if v[59]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																					v[60] = i.Model.KApplyArg(v[59], 0)
																					if i.Model.Equals(v[60], v[28] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																						v[61] = i.Model.KApplyArg(v[58], 1)
																						v[62 /*_28*/] = v[61] // lhs KVariable _28
																						v[63] = i.Model.KApplyArg(v[58], 2)
																						v[64 /*_29*/] = v[63] // lhs KVariable _29
																						v[65] = i.Model.KApplyArg(v[58], 3)
																						if v[65]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_41)
																							v[66] = i.Model.KApplyArg(v[65], 0)
																							v[67 /*_41*/] = v[66] // lhs KVariable _41
																							v[68] = i.Model.KApplyArg(v[58], 4)
																							v[69 /*_30*/] = v[68] // lhs KVariable _30
																							v[70] = i.Model.KApplyArg(v[58], 5)
																							v[71 /*_31*/] = v[70] // lhs KVariable _31
																							// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))
																							v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<acctID>`(ACCT))
																								v[53] /*_42*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[28] /*ACCT*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[73] = v[72]
																							if v[73] == m.InternedBottom {
																								return i.stepLookups(c, config, 45) // reapply
																							}
																							if v[73]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																								v[74 /*DotVar5*/] = v[73] // DotVar5
																								// lookup:#match(VALUE,`Map:lookup`(_41,INDEX))
																								v[75], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,INDEX)
																									v[67 /*_41*/],
																									v[6] /*INDEX*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[76] = v[75]
																								if v[76] == m.InternedBottom {
																									return i.stepLookups(c, config, 45) // reapply
																								}
																								if i.tempTypeVar = v[76] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[77 /*VALUE*/] = v[76] // VALUE
																									// lookup:#match(DotVar7,`_[_<-undef]`(_41,INDEX))
																									v[78], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,INDEX)
																										v[67 /*_41*/],
																										v[6] /*INDEX*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[79] = v[78]
																									if v[79] == m.InternedBottom {
																										return i.stepLookups(c, config, 45) // reapply
																									}
																									if v[79]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																										v[80 /*DotVar7*/] = v[79] // DotVar7
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(VALUE)),isSchedule(SCHED)),#token("true","Bool")),isLValue(_304)))
																										v[81], i.evalErr = i.evalIsInt( // isInt(VALUE)
																											v[77 /*VALUE*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(`_andBool_`(#token("true","Bool"),isInt(VALUE)),isSchedule(SCHED))
																										bv[1] = /* rhs precomputed isInt(INDEX) */ /* && */ m.IsTrue(v[81])
																										if bv[1] {
																											v[82], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																												v[7] /*SCHED*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[82])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(VALUE)),isSchedule(SCHED)),#token("true","Bool")),isLValue(_304))
																										bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCT) */ 
																										if bv[0] {
																											v[83], i.evalErr = i.evalIsLValue( // isLValue(_304)
																												v[5] /*_304*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[0] = m.IsTrue(v[83])
																										}
																										if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																											// RHS
																											return i.stepRHS624(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 45) // reapply
																									}
																								} else {
																									return i.stepLookups(c, config, 45) // reapply
																								}
																							} else {
																								return i.stepLookups(c, config, 45) // reapply
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 45) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 625
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsha3XuXuIELEXhyphenCOMMON2 { // `_=sha3__IELE-COMMON`(_278,W0)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable _278 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable W0 = v[6]
						v[7] = i.Model.KApplyArg(v[2], 1)
						// KVariable SCHED = v[7]
						// KVariable DotVar1 = v[3]
						v[8] = i.Model.KApplyArg(c, 1)
						if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[9] = i.Model.KApplyArg(v[8], 0)
							if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[12] = i.Model.KApplyArg(v[10], 0)
									if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[11]
										v[13] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[13]
										v[14] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[14]
										v[15] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[15]
										v[16] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[16]
										v[17] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[17]
										v[18] = i.Model.KApplyArg(c, 7)
										if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[19] = i.Model.KApplyArg(v[18], 0)
											// KVariable _14 = v[19]
											v[20] = i.Model.KApplyArg(v[18], 1)
											// KVariable _15 = v[20]
											v[21] = i.Model.KApplyArg(v[18], 2)
											// KVariable _16 = v[21]
											v[22] = i.Model.KApplyArg(v[18], 3)
											// KVariable _17 = v[22]
											v[23] = i.Model.KApplyArg(v[18], 4)
											if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[24] = i.Model.KApplyArg(v[23], 0)
												// KVariable _0 = v[24]
												v[25] = i.Model.KApplyArg(v[23], 1)
												// KVariable _1 = v[25]
												v[26] = i.Model.KApplyArg(v[23], 2)
												// KVariable _2 = v[26]
												v[27] = i.Model.KApplyArg(v[23], 3)
												// KVariable _3 = v[27]
												v[28] = i.Model.KApplyArg(v[23], 4)
												// KVariable _4 = v[28]
												v[29] = i.Model.KApplyArg(v[23], 5)
												// KVariable _5 = v[29]
												v[30] = i.Model.KApplyArg(v[23], 6)
												// KVariable _6 = v[30]
												v[31] = i.Model.KApplyArg(v[23], 7)
												// KVariable _7 = v[31]
												v[32] = i.Model.KApplyArg(v[23], 8)
												if v[32]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[33] = i.Model.KApplyArg(v[32], 0)
													// KVariable _34 = v[33]
													v[34] = i.Model.KApplyArg(v[23], 9)
													// KVariable _8 = v[34]
													v[35] = i.Model.KApplyArg(v[23], 10)
													// KVariable _9 = v[35]
													v[36] = i.Model.KApplyArg(v[23], 11)
													// KVariable _10 = v[36]
													v[37] = i.Model.KApplyArg(v[23], 12)
													// KVariable _11 = v[37]
													v[38] = i.Model.KApplyArg(v[23], 13)
													// KVariable _12 = v[38]
													v[39] = i.Model.KApplyArg(v[23], 14)
													// KVariable _13 = v[39]
													v[40] = i.Model.KApplyArg(v[18], 5)
													// KVariable _18 = v[40]
													v[41] = i.Model.KApplyArg(v[18], 6)
													// KVariable _19 = v[41]
													v[42] = i.Model.KApplyArg(v[18], 7)
													// KVariable _20 = v[42]
													v[43] = i.Model.KApplyArg(v[18], 8)
													// KVariable _21 = v[43]
													v[44] = i.Model.KApplyArg(v[18], 9)
													// KVariable _22 = v[44]
													v[45] = i.Model.KApplyArg(v[18], 10)
													// KVariable _23 = v[45]
													v[46] = i.Model.KApplyArg(v[18], 11)
													// KVariable _24 = v[46]
													v[47] = i.Model.KApplyArg(v[18], 12)
													// KVariable _25 = v[47]
													v[48] = i.Model.KApplyArg(v[18], 13)
													// KVariable _26 = v[48]
													v[49] = i.Model.KApplyArg(v[18], 14)
													// KVariable _27 = v[49]
													v[50] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[50]
													// rule #625
													// source: iele-gas.k @489
													// {| rule `<generatedTop>`(`<k>`(`` `#compute[_,_]_IELE-GAS`(`_=sha3__IELE-COMMON`(_278,W0),SCHED)=>`_+Int_`(`_<_>_IELE-GAS`(`Gsha3_IELE-GAS`(.KList),SCHED),`_*Int__INT`(bytesInWords(lengthBytes(LM)),`_<_>_IELE-GAS`(`Gsha3word_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,W0)),#match(DotVar4,`_[_<-undef]`(_34,W0))),`_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isBytes(LM)),isSchedule(SCHED)),isLValue(_278))) ensures #token("true","Bool") [UNIQUE_ID(e7d3d82d61088aca1ba51c2e441016dd654d79937aa4a56bc00b7e3ba21f5aa3) contentStartColumn(10) contentStartLine(489) org.kframework.attributes.Location(Location(489,10,490,48)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 46 {
															// lookup:#match(LM,`Map:lookup`(_34,W0))
															v[51], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,W0)
																v[33] /*_34*/,
																v[6] /*W0*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[52] = v[51]
															if v[52] == m.InternedBottom {
																return i.stepLookups(c, config, 46) // reapply
															}
															if v[52]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[53 /*LM*/] = v[52] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,W0))
																v[54], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,W0)
																	v[33] /*_34*/,
																	v[6] /*W0*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[55] = v[54]
																if v[55] == m.InternedBottom {
																	return i.stepLookups(c, config, 46) // reapply
																}
																if v[55]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[56 /*DotVar4*/] = v[55] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isBytes(LM)),isSchedule(SCHED)),isLValue(_278)))
																	v[57], i.evalErr = i.evalIsOperand( // isOperand(W0)
																		v[6] /*W0*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isOperand(W0),isBytes(LM))
																	bv[2] = m.IsTrue(v[57])
																	if bv[2] {
																		v[58], i.evalErr = i.evalIsBytes( // isBytes(LM)
																			v[53 /*LM*/],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[2] = m.IsTrue(v[58])
																	}
																	// `_andBool_`(`_andBool_`(isOperand(W0),isBytes(LM)),isSchedule(SCHED))
																	bv[1] = bv[2]
																	if bv[1] {
																		v[59], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																			v[7] /*SCHED*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[59])
																	}
																	// `_andBool_`(`_andBool_`(`_andBool_`(isOperand(W0),isBytes(LM)),isSchedule(SCHED)),isLValue(_278))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[60], i.evalErr = i.evalIsLValue( // isLValue(_278)
																			v[5] /*_278*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[60])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS625(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 46) // reapply
																}
															} else {
																return i.stepLookups(c, config, 46) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 643
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashlogXuXuXuIELE2 { // `#log___IELE`(MEMINDEX,TOPICS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable MEMINDEX = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if v[5]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
							// KVariable TOPICS = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _28 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _29 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _30 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _31 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _32 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_15,_16,_17,_18,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,`<localMem>`(_34),_7,_8,_9,_10,_11,_12),`<substate>`(_13,`<logData>`(DotVar6),_14),_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _15 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _16 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _17 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _18 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,`<localMem>`(_34),_7,_8,_9,_10,_11,_12)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
														v[26] = i.Model.KApplyArg(v[25], 0)
														if i.tempTypeVar = v[26] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable ACCT = v[26]
															v[27] = i.Model.KApplyArg(v[21], 4)
															// KVariable _3 = v[27]
															v[28] = i.Model.KApplyArg(v[21], 5)
															// KVariable _4 = v[28]
															v[29] = i.Model.KApplyArg(v[21], 6)
															// KVariable _5 = v[29]
															v[30] = i.Model.KApplyArg(v[21], 7)
															// KVariable _6 = v[30]
															v[31] = i.Model.KApplyArg(v[21], 8)
															if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
																v[32] = i.Model.KApplyArg(v[31], 0)
																// KVariable _34 = v[32]
																v[33] = i.Model.KApplyArg(v[21], 9)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[21], 10)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[21], 11)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[21], 12)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[21], 13)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[21], 14)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[16], 5)
																if v[39]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_13,`<logData>`(DotVar6),_14)
																	v[40] = i.Model.KApplyArg(v[39], 0)
																	// KVariable _13 = v[40]
																	v[41] = i.Model.KApplyArg(v[39], 1)
																	if v[41]&kapplyMatchMask == kapplyMatchLblXltlogDataXgt1 { // `<logData>`(DotVar6)
																		v[42] = i.Model.KApplyArg(v[41], 0)
																		if v[42]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
																			// KVariable DotVar6 = v[42]
																			v[43] = i.Model.KApplyArg(v[39], 2)
																			// KVariable _14 = v[43]
																			v[44] = i.Model.KApplyArg(v[16], 6)
																			// KVariable _19 = v[44]
																			v[45] = i.Model.KApplyArg(v[16], 7)
																			// KVariable _20 = v[45]
																			v[46] = i.Model.KApplyArg(v[16], 8)
																			// KVariable _21 = v[46]
																			v[47] = i.Model.KApplyArg(v[16], 9)
																			// KVariable _22 = v[47]
																			v[48] = i.Model.KApplyArg(v[16], 10)
																			// KVariable _23 = v[48]
																			v[49] = i.Model.KApplyArg(v[16], 11)
																			// KVariable _24 = v[49]
																			v[50] = i.Model.KApplyArg(v[16], 12)
																			// KVariable _25 = v[50]
																			v[51] = i.Model.KApplyArg(v[16], 13)
																			// KVariable _26 = v[51]
																			v[52] = i.Model.KApplyArg(v[16], 14)
																			// KVariable _27 = v[52]
																			v[53] = i.Model.KApplyArg(c, 8)
																			// KVariable _33 = v[53]
																			// rule #643
																			// source: iele.k @1051
																			// {| rule `<generatedTop>`(`<k>`(`` `#log___IELE`(MEMINDEX,TOPICS)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_15,_16,_17,_18,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,`<localMem>`(_34),_7,_8,_9,_10,_11,_12),`<substate>`(_13,`<logData>`(DotVar6=>`_List_`(DotVar6,`ListItem`(logEntry(ACCT,TOPICS,LM)))),_14),_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,MEMINDEX)),#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isList(TOPICS),isBytes(LM)),isInt(MEMINDEX)),isInt(ACCT))) ensures #token("true","Bool") [UNIQUE_ID(58394788c15248e31b0000a5880fd3eb9677fac92a63a2feb869245e0a665aa7) contentStartColumn(10) contentStartLine(1051) org.kframework.attributes.Location(Location(1051,10,1054,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// LOOKUPS
																				if guard < 47 {
																					// lookup:#match(LM,`Map:lookup`(_34,MEMINDEX))
																					v[54], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,MEMINDEX)
																						v[32] /*_34*/,
																						v[4] /*MEMINDEX*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[55] = v[54]
																					if v[55] == m.InternedBottom {
																						return i.stepLookups(c, config, 47) // reapply
																					}
																					if v[55]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																						v[56 /*LM*/] = v[55] // LM
																						// lookup:#match(DotVar4,`_[_<-undef]`(_34,MEMINDEX))
																						v[57], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,MEMINDEX)
																							v[32] /*_34*/,
																							v[4] /*MEMINDEX*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[58] = v[57]
																						if v[58] == m.InternedBottom {
																							return i.stepLookups(c, config, 47) // reapply
																						}
																						if v[58]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																							v[59 /*DotVar4*/] = v[58] // DotVar4
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),#token("true","Bool")))
																							v[60], i.evalErr = i.evalIsBytes( // isBytes(LM)
																								v[56 /*LM*/],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isList(TOPICS) */ /* && */ m.IsTrue(v[60]) /* && */ /* rhs precomputed isInt(MEMINDEX) */  /* && */ /* rhs precomputed isInt(ACCT) */  {
																								// RHS
																								return i.stepRHS643(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 47) // reapply
																						}
																					} else {
																						return i.stepLookups(c, config, 47) // reapply
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 569, 648
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcallXuXuXuXuXuXuXuXuIELE7 { // `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 648
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable FUNC = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GLIMIT = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									// KVariable ARGS = v[9]
									v[10] = i.Model.KApplyArg(v[2], 6)
									if v[10]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
										// KVariable STATIC = v[10]
										// KVariable DotVar1 = v[3]
										v[11] = i.Model.KApplyArg(c, 1)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
												_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
												if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
													v[15] = i.Model.KApplyArg(v[13], 0)
													if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
														// KVariable SREST = v[14]
														v[16] = i.Model.KApplyArg(c, 2)
														// KVariable _8 = v[16]
														v[17] = i.Model.KApplyArg(c, 3)
														// KVariable _9 = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														// KVariable _10 = v[18]
														v[19] = i.Model.KApplyArg(c, 5)
														// KVariable _11 = v[19]
														v[20] = i.Model.KApplyArg(c, 6)
														// KVariable _12 = v[20]
														v[21] = i.Model.KApplyArg(c, 7)
														// KVariable _13 = v[21]
														v[22] = i.Model.KApplyArg(c, 8)
														if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
															v[23] = i.Model.KApplyArg(v[22], 0)
															// KVariable _4 = v[23]
															v[24] = i.Model.KApplyArg(v[22], 1)
															if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
																v[25] = i.Model.KApplyArg(v[24], 0)
																// KVariable _14 = v[25]
																v[26] = i.Model.KApplyArg(v[22], 2)
																// KVariable _5 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 3)
																// KVariable _6 = v[27]
																v[28] = i.Model.KApplyArg(v[22], 4)
																// KVariable _7 = v[28]
																// rule #648
																// source: iele.k @1188
																// {| rule `<generatedTop>`(`<k>`(`` `#call________IELE`(ACCTFROM,ACCTTO,FUNC,GLIMIT,VALUE,ARGS,STATIC)=>`#callWithCode_________IELE`(ACCTFROM,ACCTTO,#loadCode(CODE),FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTTO))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCTTO)),isInt(VALUE)),isConstant(FUNC)),isInt(ACCTFROM)),isInts(ARGS)),isBool(STATIC)),isInt(GLIMIT)),`_andBool_`(`_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))) ensures #token("true","Bool") [UNIQUE_ID(d0e7fb32c41fb0bd13a74150a4fcc6b02bce6268141b57ce14e7b90fde1deddf) contentStartColumn(10) contentStartLine(1188) org.kframework.attributes.Location(Location(1188,10,1194,77)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 48 {
																		// lookup:#match(`<account>`(`<acctID>`(ACCTTO),_0,`<code>`(CODE),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTTO)))
																		v[29], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCTTO))
																			v[25] /*_14*/,
																			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																				v[5] /*ACCTTO*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[30] = v[29]
																		if v[30] == m.InternedBottom {
																			return i.stepLookups(c, config, 48) // reapply
																		}
																		if v[30]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTTO),_0,`<code>`(CODE),_1,_2,_3)
																			v[31] = i.Model.KApplyArg(v[30], 0)
																			if v[31]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTTO)
																				v[32] = i.Model.KApplyArg(v[31], 0)
																				if i.Model.Equals(v[32], v[5] /*ACCTTO*/) { // lhs KVariable, which reappears:ACCTTO
																					v[33] = i.Model.KApplyArg(v[30], 1)
																					v[34 /*_0*/] = v[33] // lhs KVariable _0
																					v[35] = i.Model.KApplyArg(v[30], 2)
																					if v[35]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																						v[36] = i.Model.KApplyArg(v[35], 0)
																						v[37 /*CODE*/] = v[36] // lhs KVariable CODE
																						v[38] = i.Model.KApplyArg(v[30], 3)
																						v[39 /*_1*/] = v[38] // lhs KVariable _1
																						v[40] = i.Model.KApplyArg(v[30], 4)
																						v[41 /*_2*/] = v[40] // lhs KVariable _2
																						v[42] = i.Model.KApplyArg(v[30], 5)
																						v[43 /*_3*/] = v[42] // lhs KVariable _3
																						// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTTO)))
																						v[44], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCTTO))
																							v[25] /*_14*/,
																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																								v[5] /*ACCTTO*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[45] = v[44]
																						if v[45] == m.InternedBottom {
																							return i.stepLookups(c, config, 48) // reapply
																						}
																						if v[45]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																							v[46 /*DotVar3*/] = v[45] // DotVar3
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),#token("true","Bool")),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))))
																							v[47], i.evalErr = i.evalIsContract( // isContract(CODE)
																								v[37 /*CODE*/],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),#token("true","Bool")),isConstant(FUNC))
																							bv[2] = m.IsTrue(v[47]) /* && */ /* rhs precomputed isInt(ACCTTO) */  /* && */ /* rhs precomputed isInt(VALUE) */ 
																							if bv[2] {
																								v[48], i.evalErr = i.evalIsConstant( // isConstant(FUNC)
																									v[6] /*FUNC*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[48])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),#token("true","Bool")),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS))
																							bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																							if bv[1] {
																								v[49], i.evalErr = i.evalIsInts( // isInts(ARGS)
																									v[9] /*ARGS*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[49])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),#token("true","Bool")),isConstant(FUNC)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")),#token("true","Bool")),`_andBool_`(`_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))))
																							bv[0] = bv[1] /* && */ /* rhs precomputed isBool(STATIC) */  /* && */ /* rhs precomputed isInt(GLIMIT) */ 
																							if bv[0] {
																								v[51], i.evalErr = i.evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(config, -1) // `#precompiledAccount_IELE-PRECOMPILED`(.KList)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[50], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList))
																									v[5] /*ACCTTO*/,
																									v[51],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(`_=/=Int__INT`(ACCTTO,`#precompiledAccount_IELE-PRECOMPILED`(.KList)),`_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList)))
																								bv[3] = m.IsTrue(v[50])
																								if bv[3] {
																									v[52], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(CODE,`.List{"contractDefinitionList"}`(.KList))
																										v[37 /*CODE*/],
																										i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[3] = m.IsTrue(v[52])
																								}
																								bv[0] = bv[3]
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS648(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 48) // reapply
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 48) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 569
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable _442 = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable _443 = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							// KVariable _444 = v[7]
							v[8] = i.Model.KApplyArg(v[2], 4)
							if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable _445 = v[8]
								v[9] = i.Model.KApplyArg(v[2], 5)
								// KVariable _446 = v[9]
								v[10] = i.Model.KApplyArg(v[2], 6)
								if v[10]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
									// KVariable _447 = v[10]
									// KVariable DotVar1 = v[3]
									v[11] = i.Model.KApplyArg(c, 1)
									if v[11]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[12] = i.Model.KApplyArg(v[11], 0)
										if v[12]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[13], v[14] = i.Model.KSequenceSplitHeadTail(v[12]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[13]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[15] = i.Model.KApplyArg(v[13], 0)
												if i.Model.Equals(v[15], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[14]
													v[16] = i.Model.KApplyArg(c, 2)
													// KVariable _8 = v[16]
													v[17] = i.Model.KApplyArg(c, 3)
													// KVariable _9 = v[17]
													v[18] = i.Model.KApplyArg(c, 4)
													// KVariable _10 = v[18]
													v[19] = i.Model.KApplyArg(c, 5)
													// KVariable _11 = v[19]
													v[20] = i.Model.KApplyArg(c, 6)
													// KVariable _12 = v[20]
													v[21] = i.Model.KApplyArg(c, 7)
													// KVariable _13 = v[21]
													v[22] = i.Model.KApplyArg(c, 8)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _4 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
															v[25] = i.Model.KApplyArg(v[24], 0)
															// KVariable _14 = v[25]
															v[26] = i.Model.KApplyArg(v[22], 2)
															// KVariable _5 = v[26]
															v[27] = i.Model.KApplyArg(v[22], 3)
															// KVariable _6 = v[27]
															v[28] = i.Model.KApplyArg(v[22], 4)
															// KVariable _7 = v[28]
															// rule #569
															// source: iele.k @1196
															// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupCode(ACCT)``~>`#call________IELE`(_442,ACCT,_443,_444,_445,_446,_447)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_445),isInts(_446)),isConstant(_443)),isOperand(_444)),isInt(_442)),isInt(ACCT)),isBool(_447)),`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)))) ensures #token("true","Bool") [UNIQUE_ID(a85b801be0c2719b408c80edc73c5ab8556e4f346136deb8934162abbe6381bf) contentStartColumn(10) contentStartLine(1196) org.kframework.attributes.Location(Location(1196,10,1199,47)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
															if !matched {
																// LOOKUPS
																if guard < 49 {
																	// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																	v[29], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																		v[25] /*_14*/,
																		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																			v[5] /*ACCT*/,
																		),
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[30] = v[29]
																	if v[30] == m.InternedBottom {
																		return i.stepLookups(c, config, 49) // reapply
																	}
																	if v[30]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3)
																		v[31] = i.Model.KApplyArg(v[30], 0)
																		if v[31]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																			v[32] = i.Model.KApplyArg(v[31], 0)
																			if i.Model.Equals(v[32], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																				v[33] = i.Model.KApplyArg(v[30], 1)
																				v[34 /*_0*/] = v[33] // lhs KVariable _0
																				v[35] = i.Model.KApplyArg(v[30], 2)
																				if v[35]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(`.List{"contractDefinitionList"}`(.KList))
																					v[36] = i.Model.KApplyArg(v[35], 0)
																					if v[36]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																						v[37] = i.Model.KApplyArg(v[30], 3)
																						v[38 /*_1*/] = v[37] // lhs KVariable _1
																						v[39] = i.Model.KApplyArg(v[30], 4)
																						v[40 /*_2*/] = v[39] // lhs KVariable _2
																						v[41] = i.Model.KApplyArg(v[30], 5)
																						v[42 /*_3*/] = v[41] // lhs KVariable _3
																						// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																						v[43], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																							v[25] /*_14*/,
																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																								v[5] /*ACCT*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[44] = v[43]
																						if v[44] == m.InternedBottom {
																							return i.stepLookups(c, config, 49) // reapply
																						}
																						if v[44]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																							v[45 /*DotVar3*/] = v[44] // DotVar3
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_446)),isConstant(_443)),isOperand(_444)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList))))
																							v[46], i.evalErr = i.evalIsInts( // isInts(_446)
																								v[9] /*_446*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_446)),isConstant(_443))
																							bv[2] = /* rhs precomputed isInt(_445) */ /* && */ m.IsTrue(v[46])
																							if bv[2] {
																								v[47], i.evalErr = i.evalIsConstant( // isConstant(_443)
																									v[6] /*_443*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[47])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_446)),isConstant(_443)),isOperand(_444))
																							bv[1] = bv[2]
																							if bv[1] {
																								v[48], i.evalErr = i.evalIsOperand( // isOperand(_444)
																									v[7] /*_444*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[48])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInts(_446)),isConstant(_443)),isOperand(_444)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList)))
																							bv[0] = bv[1] /* && */ /* rhs precomputed isInt(_442) */  /* && */ /* rhs precomputed isInt(ACCT) */  /* && */ /* rhs precomputed isBool(_447) */ 
																							if bv[0] {
																								v[50], i.evalErr = i.evalXhashprecompiledAccountXuIELEXhyphenPRECOMPILED(config, -1) // `#precompiledAccount_IELE-PRECOMPILED`(.KList)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[49], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(ACCT,`#precompiledAccount_IELE-PRECOMPILED`(.KList))
																									v[5] /*ACCT*/,
																									v[50],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[0] = m.IsTrue(v[49])
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS569(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 49) // reapply
																						}
																					}
																				}
																			}
																		}
																	} else {
																		return i.stepLookups(c, config, 49) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 578, 583, 612, 629, 631, 649
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryXlsqbXuXrsqbXuIELEXhyphenGAS1 { // `#memory[_]_IELE-GAS`(`_=load__IELE-COMMON`(REG,INDEX))
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 649
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqloadXuXuIELEXhyphenCOMMON2 { // `_=load__IELE-COMMON`(REG,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _28 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _29 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _30 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _31 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _32 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												// KVariable _3 = v[26]
												v[27] = i.Model.KApplyArg(v[22], 4)
												// KVariable _4 = v[27]
												v[28] = i.Model.KApplyArg(v[22], 5)
												// KVariable _5 = v[28]
												v[29] = i.Model.KApplyArg(v[22], 6)
												// KVariable _6 = v[29]
												v[30] = i.Model.KApplyArg(v[22], 7)
												// KVariable _7 = v[30]
												v[31] = i.Model.KApplyArg(v[22], 8)
												if v[31]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_34)
													v[32] = i.Model.KApplyArg(v[31], 0)
													// KVariable _34 = v[32]
													v[33] = i.Model.KApplyArg(v[22], 9)
													// KVariable _8 = v[33]
													v[34] = i.Model.KApplyArg(v[22], 10)
													// KVariable _9 = v[34]
													v[35] = i.Model.KApplyArg(v[22], 11)
													// KVariable _10 = v[35]
													v[36] = i.Model.KApplyArg(v[22], 12)
													// KVariable _11 = v[36]
													v[37] = i.Model.KApplyArg(v[22], 13)
													// KVariable _12 = v[37]
													v[38] = i.Model.KApplyArg(v[22], 14)
													// KVariable _13 = v[38]
													v[39] = i.Model.KApplyArg(v[17], 5)
													// KVariable _18 = v[39]
													v[40] = i.Model.KApplyArg(v[17], 6)
													// KVariable _19 = v[40]
													v[41] = i.Model.KApplyArg(v[17], 7)
													// KVariable _20 = v[41]
													v[42] = i.Model.KApplyArg(v[17], 8)
													// KVariable _21 = v[42]
													v[43] = i.Model.KApplyArg(v[17], 9)
													// KVariable _22 = v[43]
													v[44] = i.Model.KApplyArg(v[17], 10)
													// KVariable _23 = v[44]
													v[45] = i.Model.KApplyArg(v[17], 11)
													// KVariable _24 = v[45]
													v[46] = i.Model.KApplyArg(v[17], 12)
													// KVariable _25 = v[46]
													v[47] = i.Model.KApplyArg(v[17], 13)
													// KVariable _26 = v[47]
													v[48] = i.Model.KApplyArg(v[17], 14)
													// KVariable _27 = v[48]
													v[49] = i.Model.KApplyArg(c, 8)
													// KVariable _33 = v[49]
													// rule #649
													// source: iele-gas.k @257
													// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=load__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,bytesInWords(lengthBytes(LM)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,_30,_31,_32,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_34),_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),_33) requires `_andBool_`(`_andBool_`(#match(LM,`Map:lookup`(_34,INDEX)),#match(DotVar4,`_[_<-undef]`(_34,INDEX))),`_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(INDEX))) ensures #token("true","Bool") [UNIQUE_ID(3f23ec2c3228141824012b2d67cf62d548e313f1412bf074dc94846769fc31ab) contentStartColumn(10) contentStartLine(257) org.kframework.attributes.Location(Location(257,10,258,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
													if !matched {
														// LOOKUPS
														if guard < 50 {
															// lookup:#match(LM,`Map:lookup`(_34,INDEX))
															v[50], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,INDEX)
																v[32] /*_34*/,
																v[6] /*INDEX*/,
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[51] = v[50]
															if v[51] == m.InternedBottom {
																return i.stepLookups(c, config, 50) // reapply
															}
															if v[51]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																v[52 /*LM*/] = v[51] // LM
																// lookup:#match(DotVar4,`_[_<-undef]`(_34,INDEX))
																v[53], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,INDEX)
																	v[32] /*_34*/,
																	v[6] /*INDEX*/,
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[54] = v[53]
																if v[54] == m.InternedBottom {
																	return i.stepLookups(c, config, 50) // reapply
																}
																if v[54]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																	v[55 /*DotVar4*/] = v[54] // DotVar4
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(INDEX)))
																	v[56], i.evalErr = i.evalIsBytes( // isBytes(LM)
																		v[52 /*LM*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(isBytes(LM),isLValue(REG))
																	bv[1] = m.IsTrue(v[56])
																	if bv[1] {
																		v[57], i.evalErr = i.evalIsLValue( // isLValue(REG)
																			v[5] /*REG*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[1] = m.IsTrue(v[57])
																	}
																	// `_andBool_`(`_andBool_`(isBytes(LM),isLValue(REG)),isOperand(INDEX))
																	bv[0] = bv[1]
																	if bv[0] {
																		v[58], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																			v[6] /*INDEX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = m.IsTrue(v[58])
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS649(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 50) // reapply
																}
															} else {
																return i.stepLookups(c, config, 50) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 578, 631
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqcallXuXlparenXuXrparenXuIELEXhyphenCOMMON3 { // `_=call_(_)_IELE-COMMON`(REGS,`@__IELE-COMMON`(NAME),ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 578
						// KVariable REGS = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(NAME)
							v[7] = i.Model.KApplyArg(v[6], 0)
							// KVariable NAME = v[7]
							v[8] = i.Model.KApplyArg(v[4], 2)
							// KVariable ARGS = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[15]
											v[16] = i.Model.KApplyArg(c, 4)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable SCHED = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _38 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _39 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35)
													v[21] = i.Model.KApplyArg(v[20], 0)
													// KVariable _22 = v[21]
													v[22] = i.Model.KApplyArg(v[20], 1)
													// KVariable _23 = v[22]
													v[23] = i.Model.KApplyArg(v[20], 2)
													// KVariable _24 = v[23]
													v[24] = i.Model.KApplyArg(v[20], 3)
													// KVariable _25 = v[24]
													v[25] = i.Model.KApplyArg(v[20], 4)
													if v[25]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21)
														v[26] = i.Model.KApplyArg(v[25], 0)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_41),_3,_4,_5,_6,_7)
															v[27] = i.Model.KApplyArg(v[26], 0)
															if v[27]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_41)
																v[28] = i.Model.KApplyArg(v[27], 0)
																// KVariable _41 = v[28]
																v[29] = i.Model.KApplyArg(v[26], 1)
																// KVariable _3 = v[29]
																v[30] = i.Model.KApplyArg(v[26], 2)
																// KVariable _4 = v[30]
																v[31] = i.Model.KApplyArg(v[26], 3)
																// KVariable _5 = v[31]
																v[32] = i.Model.KApplyArg(v[26], 4)
																// KVariable _6 = v[32]
																v[33] = i.Model.KApplyArg(v[26], 5)
																// KVariable _7 = v[33]
																v[34] = i.Model.KApplyArg(v[25], 1)
																// KVariable _8 = v[34]
																v[35] = i.Model.KApplyArg(v[25], 2)
																// KVariable _9 = v[35]
																v[36] = i.Model.KApplyArg(v[25], 3)
																// KVariable _10 = v[36]
																v[37] = i.Model.KApplyArg(v[25], 4)
																// KVariable _11 = v[37]
																v[38] = i.Model.KApplyArg(v[25], 5)
																// KVariable _12 = v[38]
																v[39] = i.Model.KApplyArg(v[25], 6)
																// KVariable _13 = v[39]
																v[40] = i.Model.KApplyArg(v[25], 7)
																// KVariable _14 = v[40]
																v[41] = i.Model.KApplyArg(v[25], 8)
																// KVariable _15 = v[41]
																v[42] = i.Model.KApplyArg(v[25], 9)
																// KVariable _16 = v[42]
																v[43] = i.Model.KApplyArg(v[25], 10)
																// KVariable _17 = v[43]
																v[44] = i.Model.KApplyArg(v[25], 11)
																// KVariable _18 = v[44]
																v[45] = i.Model.KApplyArg(v[25], 12)
																// KVariable _19 = v[45]
																v[46] = i.Model.KApplyArg(v[25], 13)
																// KVariable _20 = v[46]
																v[47] = i.Model.KApplyArg(v[25], 14)
																// KVariable _21 = v[47]
																v[48] = i.Model.KApplyArg(v[20], 5)
																// KVariable _26 = v[48]
																v[49] = i.Model.KApplyArg(v[20], 6)
																// KVariable _27 = v[49]
																v[50] = i.Model.KApplyArg(v[20], 7)
																// KVariable _28 = v[50]
																v[51] = i.Model.KApplyArg(v[20], 8)
																// KVariable _29 = v[51]
																v[52] = i.Model.KApplyArg(v[20], 9)
																// KVariable _30 = v[52]
																v[53] = i.Model.KApplyArg(v[20], 10)
																// KVariable _31 = v[53]
																v[54] = i.Model.KApplyArg(v[20], 11)
																// KVariable _32 = v[54]
																v[55] = i.Model.KApplyArg(v[20], 12)
																// KVariable _33 = v[55]
																v[56] = i.Model.KApplyArg(v[20], 13)
																// KVariable _34 = v[56]
																v[57] = i.Model.KApplyArg(v[20], 14)
																// KVariable _35 = v[57]
																v[58] = i.Model.KApplyArg(c, 8)
																// KVariable _40 = v[58]
																// rule #578
																// source: iele-gas.k @210
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(REGS,`@__IELE-COMMON`(NAME),ARGS))=>memoryDirectDelta(`_+Int_`(`_+Int_`(`_-Int__INT`(REGISTERS,#sizeRegs(ARGS)),intSizes(ARGS)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,`<schedule>`(SCHED),_38,_39,`<iele>`(_22,_23,_24,_25,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21),_26,_27,_28,_29,_30,_31,_32,_33,_34,_35),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_41,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED)),isInts(ARGS)),isInt(REGISTERS))) ensures #token("true","Bool") [UNIQUE_ID(0d6495f461054a2c874c7dede36a68000ba777126a2d0a758473e6eac5d8c4fe) contentStartColumn(10) contentStartLine(210) org.kframework.attributes.Location(Location(210,10,213,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 51 {
																		// lookup:#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS)),`Map:lookup`(_41,`<funcId>`(NAME)))
																		v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<funcId>`(NAME))
																			v[28] /*_41*/,
																			i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																				v[7] /*NAME*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[60] = v[59]
																		if v[60] == m.InternedBottom {
																			return i.stepLookups(c, config, 51) // reapply
																		}
																		if v[60]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(REGISTERS))
																			v[61] = i.Model.KApplyArg(v[60], 0)
																			if v[61]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(NAME)
																				v[62] = i.Model.KApplyArg(v[61], 0)
																				if i.Model.Equals(v[62], v[7] /*NAME*/) { // lhs KVariable, which reappears:NAME
																					v[63] = i.Model.KApplyArg(v[60], 1)
																					v[64 /*_0*/] = v[63] // lhs KVariable _0
																					v[65] = i.Model.KApplyArg(v[60], 2)
																					v[66 /*_1*/] = v[65] // lhs KVariable _1
																					v[67] = i.Model.KApplyArg(v[60], 3)
																					v[68 /*_2*/] = v[67] // lhs KVariable _2
																					v[69] = i.Model.KApplyArg(v[60], 4)
																					if v[69]&kapplyMatchMask == kapplyMatchLblXltnregsXgt1 { // `<nregs>`(REGISTERS)
																						v[70] = i.Model.KApplyArg(v[69], 0)
																						if i.tempTypeVar = v[70] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																							v[71 /*REGISTERS*/] = v[70] // REGISTERS
																							// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(NAME)))
																							v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<funcId>`(NAME))
																								v[28] /*_41*/,
																								i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																									v[7] /*NAME*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[73] = v[72]
																							if v[73] == m.InternedBottom {
																								return i.stepLookups(c, config, 51) // reapply
																							}
																							if v[73]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																								v[74 /*DotVar5*/] = v[73] // DotVar5
																								// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED)),isInts(ARGS)),isInt(REGISTERS)))
																								v[75], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																									v[7] /*NAME*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(isIeleName(NAME),isLValues(REGS))
																								bv[3] = m.IsTrue(v[75])
																								if bv[3] {
																									v[76], i.evalErr = i.evalIsLValues( // isLValues(REGS)
																										v[5] /*REGS*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[3] = m.IsTrue(v[76])
																								}
																								// `_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED))
																								bv[2] = bv[3]
																								if bv[2] {
																									v[77], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																										v[17] /*SCHED*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[2] = m.IsTrue(v[77])
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED)),isInts(ARGS))
																								bv[1] = bv[2]
																								if bv[1] {
																									v[78], i.evalErr = i.evalIsInts( // isInts(ARGS)
																										v[8] /*ARGS*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[1] = m.IsTrue(v[78])
																								}
																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(NAME),isLValues(REGS)),isSchedule(SCHED)),isInts(ARGS)),isInt(REGISTERS))
																								bv[0] = bv[1]
																								if bv[0] {
																									v[79], i.evalErr = i.evalIsInt( // isInt(REGISTERS)
																										v[71 /*REGISTERS*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[0] = m.IsTrue(v[79])
																								}
																								if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																									// RHS
																									return i.stepRHS578(v, bv, config)
																								}
																							} else {
																								return i.stepLookups(c, config, 51) // reapply
																							}
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 51) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 631
						// KVariable _281 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable IDX = v[6]
							v[7] = i.Model.KApplyArg(v[4], 2)
							// KVariable _282 = v[7]
							// KVariable DotVar1 = v[3]
							v[8] = i.Model.KApplyArg(c, 1)
							if v[8]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[9] = i.Model.KApplyArg(v[8], 0)
								if v[9]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[10], v[11] = i.Model.KSequenceSplitHeadTail(v[9]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[10]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[12] = i.Model.KApplyArg(v[10], 0)
										if i.Model.Equals(v[12], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[11]
											v[13] = i.Model.KApplyArg(c, 2)
											// KVariable _33 = v[13]
											v[14] = i.Model.KApplyArg(c, 3)
											// KVariable _34 = v[14]
											v[15] = i.Model.KApplyArg(c, 4)
											// KVariable _35 = v[15]
											v[16] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[16]
											v[17] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[17]
											v[18] = i.Model.KApplyArg(c, 7)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _19 = v[19]
												v[20] = i.Model.KApplyArg(v[18], 1)
												// KVariable _20 = v[20]
												v[21] = i.Model.KApplyArg(v[18], 2)
												// KVariable _21 = v[21]
												v[22] = i.Model.KApplyArg(v[18], 3)
												// KVariable _22 = v[22]
												v[23] = i.Model.KApplyArg(v[18], 4)
												if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18)
													v[24] = i.Model.KApplyArg(v[23], 0)
													if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4)
														v[25] = i.Model.KApplyArg(v[24], 0)
														// KVariable _0 = v[25]
														v[26] = i.Model.KApplyArg(v[24], 1)
														// KVariable _1 = v[26]
														v[27] = i.Model.KApplyArg(v[24], 2)
														if v[27]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(_39)
															v[28] = i.Model.KApplyArg(v[27], 0)
															// KVariable _39 = v[28]
															v[29] = i.Model.KApplyArg(v[24], 3)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[24], 4)
															// KVariable _3 = v[30]
															v[31] = i.Model.KApplyArg(v[24], 5)
															// KVariable _4 = v[31]
															v[32] = i.Model.KApplyArg(v[23], 1)
															// KVariable _5 = v[32]
															v[33] = i.Model.KApplyArg(v[23], 2)
															// KVariable _6 = v[33]
															v[34] = i.Model.KApplyArg(v[23], 3)
															// KVariable _7 = v[34]
															v[35] = i.Model.KApplyArg(v[23], 4)
															// KVariable _8 = v[35]
															v[36] = i.Model.KApplyArg(v[23], 5)
															// KVariable _9 = v[36]
															v[37] = i.Model.KApplyArg(v[23], 6)
															// KVariable _10 = v[37]
															v[38] = i.Model.KApplyArg(v[23], 7)
															// KVariable _11 = v[38]
															v[39] = i.Model.KApplyArg(v[23], 8)
															// KVariable _12 = v[39]
															v[40] = i.Model.KApplyArg(v[23], 9)
															// KVariable _13 = v[40]
															v[41] = i.Model.KApplyArg(v[23], 10)
															// KVariable _14 = v[41]
															v[42] = i.Model.KApplyArg(v[23], 11)
															// KVariable _15 = v[42]
															v[43] = i.Model.KApplyArg(v[23], 12)
															// KVariable _16 = v[43]
															v[44] = i.Model.KApplyArg(v[23], 13)
															// KVariable _17 = v[44]
															v[45] = i.Model.KApplyArg(v[23], 14)
															// KVariable _18 = v[45]
															v[46] = i.Model.KApplyArg(v[18], 5)
															// KVariable _23 = v[46]
															v[47] = i.Model.KApplyArg(v[18], 6)
															// KVariable _24 = v[47]
															v[48] = i.Model.KApplyArg(v[18], 7)
															// KVariable _25 = v[48]
															v[49] = i.Model.KApplyArg(v[18], 8)
															// KVariable _26 = v[49]
															v[50] = i.Model.KApplyArg(v[18], 9)
															// KVariable _27 = v[50]
															v[51] = i.Model.KApplyArg(v[18], 10)
															// KVariable _28 = v[51]
															v[52] = i.Model.KApplyArg(v[18], 11)
															// KVariable _29 = v[52]
															v[53] = i.Model.KApplyArg(v[18], 12)
															// KVariable _30 = v[53]
															v[54] = i.Model.KApplyArg(v[18], 13)
															// KVariable _31 = v[54]
															v[55] = i.Model.KApplyArg(v[18], 14)
															// KVariable _32 = v[55]
															v[56] = i.Model.KApplyArg(c, 8)
															// KVariable _38 = v[56]
															// rule #631
															// source: iele-gas.k @215
															// {| rule `<generatedTop>`(`<k>`(`#memory[_]_IELE-GAS`(`_=call_(_)_IELE-COMMON`(_281,IDX=>`@__IELE-COMMON`(FUNC),_282))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_33,_34,_35,_36,_37,`<iele>`(_19,_20,_21,_22,`<callFrame>`(`<program>`(_0,_1,`<funcLabels>`(_39),_2,_3,_4),_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18),_23,_24,_25,_26,_27,_28,_29,_30,_31,_32),_38) requires `_andBool_`(`_andBool_`(#match(DotVar5,`_[_<-undef]`(_39,IDX)),#match(FUNC,`Map:lookup`(_39,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(IDX),isOperands(_282)),isLValues(_281)),isIeleName(FUNC))) ensures #token("true","Bool") [UNIQUE_ID(cee05022dd6d8ee51619c8d7f63c1aa41035702b0f7cc748fa8ceb277a9e95ab) contentStartColumn(10) contentStartLine(215) org.kframework.attributes.Location(Location(215,10,216,57)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// LOOKUPS
																if guard < 52 {
																	// lookup:#match(DotVar5,`_[_<-undef]`(_39,IDX))
																	v[57], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,IDX)
																		v[28] /*_39*/,
																		v[6] /*IDX*/,
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	v[58] = v[57]
																	if v[58] == m.InternedBottom {
																		return i.stepLookups(c, config, 52) // reapply
																	}
																	if v[58]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																		v[59 /*DotVar5*/] = v[58] // DotVar5
																		// lookup:#match(FUNC,`Map:lookup`(_39,IDX))
																		v[60], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,IDX)
																			v[28] /*_39*/,
																			v[6] /*IDX*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[61] = v[60]
																		if v[61] == m.InternedBottom {
																			return i.stepLookups(c, config, 52) // reapply
																		}
																		v[62 /*FUNC*/] = v[61] // lhs KVariable FUNC
																		// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_282)),isLValues(_281)),isIeleName(FUNC)))
																		v[63], i.evalErr = i.evalIsOperands( // isOperands(_282)
																			v[7] /*_282*/,
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		// `_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_282)),isLValues(_281))
																		bv[1] = /* rhs precomputed isInt(IDX) */ /* && */ m.IsTrue(v[63])
																		if bv[1] {
																			v[64], i.evalErr = i.evalIsLValues( // isLValues(_281)
																				v[5] /*_281*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[1] = m.IsTrue(v[64])
																		}
																		// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isOperands(_282)),isLValues(_281)),isIeleName(FUNC))
																		bv[0] = bv[1]
																		if bv[0] {
																			v[65], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																				v[62 /*FUNC*/],
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			bv[0] = m.IsTrue(v[65])
																		}
																		if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																			// RHS
																			return i.stepRHS631(v, bv, config)
																		}
																	} else {
																		return i.stepLookups(c, config, 52) // reapply
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rules: 583, 629
					if v[4]&kapplyMatchMask == kapplyMatchLblXuXeqsloadXuXuIELEXhyphenCOMMON2 { // `_=sload__IELE-COMMON`(REG,INDEX)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// rule: 583
						// KVariable REG = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						// KVariable INDEX = v[6]
						// KVariable DotVar1 = v[3]
						v[7] = i.Model.KApplyArg(c, 1)
						if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[8] = i.Model.KApplyArg(v[7], 0)
							if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[11] = i.Model.KApplyArg(v[9], 0)
									if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[10]
										v[12] = i.Model.KApplyArg(c, 2)
										// KVariable _36 = v[12]
										v[13] = i.Model.KApplyArg(c, 3)
										// KVariable _37 = v[13]
										v[14] = i.Model.KApplyArg(c, 4)
										// KVariable _38 = v[14]
										v[15] = i.Model.KApplyArg(c, 5)
										// KVariable _39 = v[15]
										v[16] = i.Model.KApplyArg(c, 6)
										// KVariable _40 = v[16]
										v[17] = i.Model.KApplyArg(c, 7)
										if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
											v[18] = i.Model.KApplyArg(v[17], 0)
											// KVariable _14 = v[18]
											v[19] = i.Model.KApplyArg(v[17], 1)
											// KVariable _15 = v[19]
											v[20] = i.Model.KApplyArg(v[17], 2)
											// KVariable _16 = v[20]
											v[21] = i.Model.KApplyArg(v[17], 3)
											// KVariable _17 = v[21]
											v[22] = i.Model.KApplyArg(v[17], 4)
											if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
												v[23] = i.Model.KApplyArg(v[22], 0)
												// KVariable _0 = v[23]
												v[24] = i.Model.KApplyArg(v[22], 1)
												// KVariable _1 = v[24]
												v[25] = i.Model.KApplyArg(v[22], 2)
												// KVariable _2 = v[25]
												v[26] = i.Model.KApplyArg(v[22], 3)
												if v[26]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
													v[27] = i.Model.KApplyArg(v[26], 0)
													if i.tempTypeVar = v[27] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable ACCT = v[27]
														v[28] = i.Model.KApplyArg(v[22], 4)
														// KVariable _3 = v[28]
														v[29] = i.Model.KApplyArg(v[22], 5)
														// KVariable _4 = v[29]
														v[30] = i.Model.KApplyArg(v[22], 6)
														// KVariable _5 = v[30]
														v[31] = i.Model.KApplyArg(v[22], 7)
														// KVariable _6 = v[31]
														v[32] = i.Model.KApplyArg(v[22], 8)
														// KVariable _7 = v[32]
														v[33] = i.Model.KApplyArg(v[22], 9)
														// KVariable _8 = v[33]
														v[34] = i.Model.KApplyArg(v[22], 10)
														// KVariable _9 = v[34]
														v[35] = i.Model.KApplyArg(v[22], 11)
														// KVariable _10 = v[35]
														v[36] = i.Model.KApplyArg(v[22], 12)
														// KVariable _11 = v[36]
														v[37] = i.Model.KApplyArg(v[22], 13)
														// KVariable _12 = v[37]
														v[38] = i.Model.KApplyArg(v[22], 14)
														// KVariable _13 = v[38]
														v[39] = i.Model.KApplyArg(v[17], 5)
														// KVariable _18 = v[39]
														v[40] = i.Model.KApplyArg(v[17], 6)
														// KVariable _19 = v[40]
														v[41] = i.Model.KApplyArg(v[17], 7)
														// KVariable _20 = v[41]
														v[42] = i.Model.KApplyArg(v[17], 8)
														// KVariable _21 = v[42]
														v[43] = i.Model.KApplyArg(v[17], 9)
														// KVariable _22 = v[43]
														v[44] = i.Model.KApplyArg(v[17], 10)
														// KVariable _23 = v[44]
														v[45] = i.Model.KApplyArg(v[17], 11)
														// KVariable _24 = v[45]
														v[46] = i.Model.KApplyArg(v[17], 12)
														// KVariable _25 = v[46]
														v[47] = i.Model.KApplyArg(v[17], 13)
														// KVariable _26 = v[47]
														v[48] = i.Model.KApplyArg(v[17], 14)
														// KVariable _27 = v[48]
														v[49] = i.Model.KApplyArg(c, 8)
														if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_42),_33,_34,_35)
															v[50] = i.Model.KApplyArg(v[49], 0)
															// KVariable _32 = v[50]
															v[51] = i.Model.KApplyArg(v[49], 1)
															if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_42)
																v[52] = i.Model.KApplyArg(v[51], 0)
																// KVariable _42 = v[52]
																v[53] = i.Model.KApplyArg(v[49], 2)
																// KVariable _33 = v[53]
																v[54] = i.Model.KApplyArg(v[49], 3)
																// KVariable _34 = v[54]
																v[55] = i.Model.KApplyArg(v[49], 4)
																// KVariable _35 = v[55]
																// rule #583
																// source: iele-gas.k @271
																// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`_=sload__IELE-COMMON`(REG,INDEX))=>#registerDelta(REG,intSize(VALUE))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_42),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))),#match(VALUE,`Map:lookup`(_41,INDEX))),#match(DotVar7,`_[_<-undef]`(_41,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isLValue(REG)),isOperand(INDEX))) ensures #token("true","Bool") [UNIQUE_ID(91450da9cef587915f95a8da9bb32efc39033cc799911c4cde261d956f4d2098) contentStartColumn(10) contentStartLine(271) org.kframework.attributes.Location(Location(271,10,277,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 53 {
																		// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31),`Map:lookup`(_42,`<acctID>`(ACCT)))
																		v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_42,`<acctID>`(ACCT))
																			v[52] /*_42*/,
																			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																				v[27] /*ACCT*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[57] = v[56]
																		if v[57] == m.InternedBottom {
																			return i.stepLookups(c, config, 53) // reapply
																		}
																		if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(_41),_30,_31)
																			v[58] = i.Model.KApplyArg(v[57], 0)
																			if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																				v[59] = i.Model.KApplyArg(v[58], 0)
																				if i.Model.Equals(v[59], v[27] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																					v[60] = i.Model.KApplyArg(v[57], 1)
																					v[61 /*_28*/] = v[60] // lhs KVariable _28
																					v[62] = i.Model.KApplyArg(v[57], 2)
																					v[63 /*_29*/] = v[62] // lhs KVariable _29
																					v[64] = i.Model.KApplyArg(v[57], 3)
																					if v[64]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_41)
																						v[65] = i.Model.KApplyArg(v[64], 0)
																						v[66 /*_41*/] = v[65] // lhs KVariable _41
																						v[67] = i.Model.KApplyArg(v[57], 4)
																						v[68 /*_30*/] = v[67] // lhs KVariable _30
																						v[69] = i.Model.KApplyArg(v[57], 5)
																						v[70 /*_31*/] = v[69] // lhs KVariable _31
																						// lookup:#match(DotVar5,`_[_<-undef]`(_42,`<acctID>`(ACCT)))
																						v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_42,`<acctID>`(ACCT))
																							v[52] /*_42*/,
																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																								v[27] /*ACCT*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[72] = v[71]
																						if v[72] == m.InternedBottom {
																							return i.stepLookups(c, config, 53) // reapply
																						}
																						if v[72]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																							v[73 /*DotVar5*/] = v[72] // DotVar5
																							// lookup:#match(VALUE,`Map:lookup`(_41,INDEX))
																							v[74], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,INDEX)
																								v[66 /*_41*/],
																								v[6] /*INDEX*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[75] = v[74]
																							if v[75] == m.InternedBottom {
																								return i.stepLookups(c, config, 53) // reapply
																							}
																							if i.tempTypeVar = v[75] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								v[76 /*VALUE*/] = v[75] // VALUE
																								// lookup:#match(DotVar7,`_[_<-undef]`(_41,INDEX))
																								v[77], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,INDEX)
																									v[66 /*_41*/],
																									v[6] /*INDEX*/,
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[78] = v[77]
																								if v[78] == m.InternedBottom {
																									return i.stepLookups(c, config, 53) // reapply
																								}
																								if v[78]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																									v[79 /*DotVar7*/] = v[78] // DotVar7
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG)),isOperand(INDEX)))
																									v[80], i.evalErr = i.evalIsInt( // isInt(VALUE)
																										v[76 /*VALUE*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG))
																									bv[1] = m.IsTrue(v[80]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																									if bv[1] {
																										v[81], i.evalErr = i.evalIsLValue( // isLValue(REG)
																											v[5] /*REG*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[81])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),#token("true","Bool")),isLValue(REG)),isOperand(INDEX))
																									bv[0] = bv[1]
																									if bv[0] {
																										v[82], i.evalErr = i.evalIsOperand( // isOperand(INDEX)
																											v[6] /*INDEX*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = m.IsTrue(v[82])
																									}
																									if /* rhs precomputed lookup #match && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS583(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 53) // reapply
																								}
																							} else {
																								return i.stepLookups(c, config, 53) // reapply
																							}
																						} else {
																							return i.stepLookups(c, config, 53) // reapply
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 53) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 629
						// KVariable _298 = v[5]
						v[6] = i.Model.KApplyArg(v[4], 1)
						if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _36 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _37 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _38 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _39 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _40 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _14 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _15 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _16 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _17 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
													v[23] = i.Model.KApplyArg(v[22], 0)
													// KVariable _0 = v[23]
													v[24] = i.Model.KApplyArg(v[22], 1)
													// KVariable _1 = v[24]
													v[25] = i.Model.KApplyArg(v[22], 2)
													// KVariable _2 = v[25]
													v[26] = i.Model.KApplyArg(v[22], 3)
													if v[26]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
														v[27] = i.Model.KApplyArg(v[26], 0)
														if i.tempTypeVar = v[27] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable ACCT = v[27]
															v[28] = i.Model.KApplyArg(v[22], 4)
															// KVariable _3 = v[28]
															v[29] = i.Model.KApplyArg(v[22], 5)
															// KVariable _4 = v[29]
															v[30] = i.Model.KApplyArg(v[22], 6)
															// KVariable _5 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 7)
															// KVariable _6 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 8)
															// KVariable _7 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 9)
															// KVariable _8 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 10)
															// KVariable _9 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 11)
															// KVariable _10 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 12)
															// KVariable _11 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 13)
															// KVariable _12 = v[37]
															v[38] = i.Model.KApplyArg(v[22], 14)
															// KVariable _13 = v[38]
															v[39] = i.Model.KApplyArg(v[17], 5)
															// KVariable _18 = v[39]
															v[40] = i.Model.KApplyArg(v[17], 6)
															// KVariable _19 = v[40]
															v[41] = i.Model.KApplyArg(v[17], 7)
															// KVariable _20 = v[41]
															v[42] = i.Model.KApplyArg(v[17], 8)
															// KVariable _21 = v[42]
															v[43] = i.Model.KApplyArg(v[17], 9)
															// KVariable _22 = v[43]
															v[44] = i.Model.KApplyArg(v[17], 10)
															// KVariable _23 = v[44]
															v[45] = i.Model.KApplyArg(v[17], 11)
															// KVariable _24 = v[45]
															v[46] = i.Model.KApplyArg(v[17], 12)
															// KVariable _25 = v[46]
															v[47] = i.Model.KApplyArg(v[17], 13)
															// KVariable _26 = v[47]
															v[48] = i.Model.KApplyArg(v[17], 14)
															// KVariable _27 = v[48]
															v[49] = i.Model.KApplyArg(c, 8)
															if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_41),_33,_34,_35)
																v[50] = i.Model.KApplyArg(v[49], 0)
																// KVariable _32 = v[50]
																v[51] = i.Model.KApplyArg(v[49], 1)
																if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_41)
																	v[52] = i.Model.KApplyArg(v[51], 0)
																	// KVariable _41 = v[52]
																	v[53] = i.Model.KApplyArg(v[49], 2)
																	// KVariable _33 = v[53]
																	v[54] = i.Model.KApplyArg(v[49], 3)
																	// KVariable _34 = v[54]
																	v[55] = i.Model.KApplyArg(v[49], 4)
																	// KVariable _35 = v[55]
																	// rule #629
																	// source: iele-gas.k @279
																	// {| rule `<generatedTop>`(`<k>`(``.K=>#lookupStorage(ACCT,INDEX)``~>`#memory[_]_IELE-GAS`(`_=sload__IELE-COMMON`(_298,INDEX))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isLValue(_298)),isInt(ACCT)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token("true","Bool") [UNIQUE_ID(904deae227e2eec03e201f84b5a3c234564e71e50a582ba750cffea9cdabb677) contentStartColumn(10) contentStartLine(279) org.kframework.attributes.Location(Location(279,10,286,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 54 {
																			// lookup:#match(`<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT)))
																			v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<acctID>`(ACCT))
																				v[52] /*_41*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[27] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[57] = v[56]
																			if v[57] == m.InternedBottom {
																				return i.stepLookups(c, config, 54) // reapply
																			}
																			if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_28,_29,`<storage>`(STORAGE),_30,_31)
																				v[58] = i.Model.KApplyArg(v[57], 0)
																				if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																					v[59] = i.Model.KApplyArg(v[58], 0)
																					if i.Model.Equals(v[59], v[27] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																						v[60] = i.Model.KApplyArg(v[57], 1)
																						v[61 /*_28*/] = v[60] // lhs KVariable _28
																						v[62] = i.Model.KApplyArg(v[57], 2)
																						v[63 /*_29*/] = v[62] // lhs KVariable _29
																						v[64] = i.Model.KApplyArg(v[57], 3)
																						if v[64]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(STORAGE)
																							v[65] = i.Model.KApplyArg(v[64], 0)
																							if v[65]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																								v[66 /*STORAGE*/] = v[65] // STORAGE
																								v[67] = i.Model.KApplyArg(v[57], 4)
																								v[68 /*_30*/] = v[67] // lhs KVariable _30
																								v[69] = i.Model.KApplyArg(v[57], 5)
																								v[70 /*_31*/] = v[69] // lhs KVariable _31
																								// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))
																								v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<acctID>`(ACCT))
																									v[52] /*_41*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[27] /*ACCT*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[72] = v[71]
																								if v[72] == m.InternedBottom {
																									return i.stepLookups(c, config, 54) // reapply
																								}
																								if v[72]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																									v[73 /*DotVar5*/] = v[72] // DotVar5
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),isLValue(_298)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE))))
																									v[74], i.evalErr = i.evalIsMap( // isMap(STORAGE)
																										v[66 /*STORAGE*/],
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),isLValue(_298))
																									bv[1] = m.IsTrue(v[74]) /* && */ /* rhs precomputed isInt(INDEX) */ 
																									if bv[1] {
																										v[75], i.evalErr = i.evalIsLValue( // isLValue(_298)
																											v[5] /*_298*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[75])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),isLValue(_298)),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))
																									bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCT) */ 
																									if bv[0] {
																										v[76], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,STORAGE)
																											v[6] /*INDEX*/,
																											v[66 /*STORAGE*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = !(m.IsTrue(v[76]))
																									}
																									if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS629(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 54) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 54) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 612
					if v[4]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(ARGS)
						v[5] = i.Model.KApplyArg(v[4], 0)
						// KVariable ARGS = v[5]
						// KVariable DotVar1 = v[3]
						v[6] = i.Model.KApplyArg(c, 1)
						if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[7] = i.Model.KApplyArg(v[6], 0)
							if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[10] = i.Model.KApplyArg(v[8], 0)
									if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[9]
										v[11] = i.Model.KApplyArg(c, 2)
										// KVariable _34 = v[11]
										v[12] = i.Model.KApplyArg(c, 3)
										// KVariable _35 = v[12]
										v[13] = i.Model.KApplyArg(c, 4)
										if v[13]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
											v[14] = i.Model.KApplyArg(v[13], 0)
											// KVariable SCHED = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _36 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _37 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_20,_21,_22,_23,`<callFrame>`(`<program>`(`<functions>`(_39),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,`<regs>`(REGS),_14,_15,_16,`<fid>`(NAME),_17,_18,_19),_24,_25,_26,_27,_28,_29,_30,_31,_32,_33)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _20 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _21 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _22 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _23 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_39),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,`<regs>`(REGS),_14,_15,_16,`<fid>`(NAME),_17,_18,_19)
													v[23] = i.Model.KApplyArg(v[22], 0)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_39),_3,_4,_5,_6,_7)
														v[24] = i.Model.KApplyArg(v[23], 0)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_39)
															v[25] = i.Model.KApplyArg(v[24], 0)
															// KVariable _39 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 1)
															// KVariable _3 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 2)
															// KVariable _4 = v[27]
															v[28] = i.Model.KApplyArg(v[23], 3)
															// KVariable _5 = v[28]
															v[29] = i.Model.KApplyArg(v[23], 4)
															// KVariable _6 = v[29]
															v[30] = i.Model.KApplyArg(v[23], 5)
															// KVariable _7 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 1)
															// KVariable _8 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 2)
															// KVariable _9 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 3)
															// KVariable _10 = v[33]
															v[34] = i.Model.KApplyArg(v[22], 4)
															// KVariable _11 = v[34]
															v[35] = i.Model.KApplyArg(v[22], 5)
															// KVariable _12 = v[35]
															v[36] = i.Model.KApplyArg(v[22], 6)
															// KVariable _13 = v[36]
															v[37] = i.Model.KApplyArg(v[22], 7)
															if v[37]&kapplyMatchMask == kapplyMatchLblXltregsXgt1 { // `<regs>`(REGS)
																v[38] = i.Model.KApplyArg(v[37], 0)
																if v[38]&collectionMatchMask == arrayMatchSortArray { // lhs KVariable with hook:ARRAY.Array
																	// KVariable REGS = v[38]
																	v[39] = i.Model.KApplyArg(v[22], 8)
																	// KVariable _14 = v[39]
																	v[40] = i.Model.KApplyArg(v[22], 9)
																	// KVariable _15 = v[40]
																	v[41] = i.Model.KApplyArg(v[22], 10)
																	// KVariable _16 = v[41]
																	v[42] = i.Model.KApplyArg(v[22], 11)
																	if v[42]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(NAME)
																		v[43] = i.Model.KApplyArg(v[42], 0)
																		// KVariable NAME = v[43]
																		v[44] = i.Model.KApplyArg(v[22], 12)
																		// KVariable _17 = v[44]
																		v[45] = i.Model.KApplyArg(v[22], 13)
																		// KVariable _18 = v[45]
																		v[46] = i.Model.KApplyArg(v[22], 14)
																		// KVariable _19 = v[46]
																		v[47] = i.Model.KApplyArg(v[17], 5)
																		// KVariable _24 = v[47]
																		v[48] = i.Model.KApplyArg(v[17], 6)
																		// KVariable _25 = v[48]
																		v[49] = i.Model.KApplyArg(v[17], 7)
																		// KVariable _26 = v[49]
																		v[50] = i.Model.KApplyArg(v[17], 8)
																		// KVariable _27 = v[50]
																		v[51] = i.Model.KApplyArg(v[17], 9)
																		// KVariable _28 = v[51]
																		v[52] = i.Model.KApplyArg(v[17], 10)
																		// KVariable _29 = v[52]
																		v[53] = i.Model.KApplyArg(v[17], 11)
																		// KVariable _30 = v[53]
																		v[54] = i.Model.KApplyArg(v[17], 12)
																		// KVariable _31 = v[54]
																		v[55] = i.Model.KApplyArg(v[17], 13)
																		// KVariable _32 = v[55]
																		v[56] = i.Model.KApplyArg(v[17], 14)
																		// KVariable _33 = v[56]
																		v[57] = i.Model.KApplyArg(c, 8)
																		// KVariable _38 = v[57]
																		// rule #612
																		// source: iele-gas.k @231
																		// {| rule `<generatedTop>`(`<k>`(`` `#memory[_]_IELE-GAS`(`ret__IELE-COMMON`(ARGS))=>memoryDirectDelta(`_-Int__INT`(`_-Int__INT`(#token("0","Int"),intSizesArr(REGS,NREGS,SCHED)),`_<_>_IELE-GAS`(`Gcallmemory_IELE-GAS`(.KList),SCHED)))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_34,_35,`<schedule>`(SCHED),_36,_37,`<iele>`(_20,_21,_22,_23,`<callFrame>`(`<program>`(`<functions>`(_39),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,`<regs>`(REGS),_14,_15,_16,`<fid>`(NAME),_17,_18,_19),_24,_25,_26,_27,_28,_29,_30,_31,_32,_33),_38) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(NREGS)),`Map:lookup`(_39,`<funcId>`(NAME))),#match(DotVar5,`_[_<-undef]`(_39,`<funcId>`(NAME)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isArray(REGS),isIeleName(NAME)),isInt(NREGS)),isSchedule(SCHED)),isNonEmptyOperands(ARGS))) ensures #token("true","Bool") [UNIQUE_ID(4d8037f4a1e80b8f0e82f0103d9eb87b4dd7f1a2e9f37c6adc9c33fd76cd0ec1) contentStartColumn(10) contentStartLine(231) org.kframework.attributes.Location(Location(231,10,236,32)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 55 {
																				// lookup:#match(`<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(NREGS)),`Map:lookup`(_39,`<funcId>`(NAME)))
																				v[58], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<funcId>`(NAME))
																					v[25] /*_39*/,
																					i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																						v[43] /*NAME*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[59] = v[58]
																				if v[59] == m.InternedBottom {
																					return i.stepLookups(c, config, 55) // reapply
																				}
																				if v[59]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(NAME),_0,_1,_2,`<nregs>`(NREGS))
																					v[60] = i.Model.KApplyArg(v[59], 0)
																					if v[60]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(NAME)
																						v[61] = i.Model.KApplyArg(v[60], 0)
																						if i.Model.Equals(v[61], v[43] /*NAME*/) { // lhs KVariable, which reappears:NAME
																							v[62] = i.Model.KApplyArg(v[59], 1)
																							v[63 /*_0*/] = v[62] // lhs KVariable _0
																							v[64] = i.Model.KApplyArg(v[59], 2)
																							v[65 /*_1*/] = v[64] // lhs KVariable _1
																							v[66] = i.Model.KApplyArg(v[59], 3)
																							v[67 /*_2*/] = v[66] // lhs KVariable _2
																							v[68] = i.Model.KApplyArg(v[59], 4)
																							if v[68]&kapplyMatchMask == kapplyMatchLblXltnregsXgt1 { // `<nregs>`(NREGS)
																								v[69] = i.Model.KApplyArg(v[68], 0)
																								if i.tempTypeVar = v[69] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[70 /*NREGS*/] = v[69] // NREGS
																									// lookup:#match(DotVar5,`_[_<-undef]`(_39,`<funcId>`(NAME)))
																									v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<funcId>`(NAME))
																										v[25] /*_39*/,
																										i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																											v[43] /*NAME*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[72] = v[71]
																									if v[72] == m.InternedBottom {
																										return i.stepLookups(c, config, 55) // reapply
																									}
																									if v[72]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																										v[73 /*DotVar5*/] = v[72] // DotVar5
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(NAME)),isInt(NREGS)),isSchedule(SCHED)),isNonEmptyOperands(ARGS)))
																										v[74], i.evalErr = i.evalIsIeleName( // isIeleName(NAME)
																											v[43] /*NAME*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(NAME)),isInt(NREGS))
																										bv[2] = /* rhs precomputed isArray(REGS) */ /* && */ m.IsTrue(v[74])
																										if bv[2] {
																											v[75], i.evalErr = i.evalIsInt( // isInt(NREGS)
																												v[70 /*NREGS*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[2] = m.IsTrue(v[75])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(NAME)),isInt(NREGS)),isSchedule(SCHED))
																										bv[1] = bv[2]
																										if bv[1] {
																											v[76], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																												v[14] /*SCHED*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[76])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(NAME)),isInt(NREGS)),isSchedule(SCHED)),isNonEmptyOperands(ARGS))
																										bv[0] = bv[1]
																										if bv[0] {
																											v[77], i.evalErr = i.evalIsNonEmptyOperands( // isNonEmptyOperands(ARGS)
																												v[5] /*ARGS*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[0] = m.IsTrue(v[77])
																										}
																										if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																											// RHS
																											return i.stepRHS612(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 55) // reapply
																									}
																								}
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 55) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 567
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckCallXuXuXuXuIELE3 { // `#checkCall____IELE`(ACCT,VALUE,GCAP)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GCAP = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _36 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _37 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _38 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _39 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _40 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _14 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _15 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _16 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													// KVariable _17 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 4)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _0 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
															v[25] = i.Model.KApplyArg(v[24], 0)
															if i.tempTypeVar = v[25] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable CD = v[25]
																v[26] = i.Model.KApplyArg(v[22], 2)
																// KVariable _1 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 3)
																// KVariable _2 = v[27]
																v[28] = i.Model.KApplyArg(v[22], 4)
																// KVariable _3 = v[28]
																v[29] = i.Model.KApplyArg(v[22], 5)
																// KVariable _4 = v[29]
																v[30] = i.Model.KApplyArg(v[22], 6)
																// KVariable _5 = v[30]
																v[31] = i.Model.KApplyArg(v[22], 7)
																// KVariable _6 = v[31]
																v[32] = i.Model.KApplyArg(v[22], 8)
																// KVariable _7 = v[32]
																v[33] = i.Model.KApplyArg(v[22], 9)
																// KVariable _8 = v[33]
																v[34] = i.Model.KApplyArg(v[22], 10)
																// KVariable _9 = v[34]
																v[35] = i.Model.KApplyArg(v[22], 11)
																// KVariable _10 = v[35]
																v[36] = i.Model.KApplyArg(v[22], 12)
																// KVariable _11 = v[36]
																v[37] = i.Model.KApplyArg(v[22], 13)
																// KVariable _12 = v[37]
																v[38] = i.Model.KApplyArg(v[22], 14)
																// KVariable _13 = v[38]
																v[39] = i.Model.KApplyArg(v[17], 5)
																// KVariable _18 = v[39]
																v[40] = i.Model.KApplyArg(v[17], 6)
																// KVariable _19 = v[40]
																v[41] = i.Model.KApplyArg(v[17], 7)
																// KVariable _20 = v[41]
																v[42] = i.Model.KApplyArg(v[17], 8)
																// KVariable _21 = v[42]
																v[43] = i.Model.KApplyArg(v[17], 9)
																// KVariable _22 = v[43]
																v[44] = i.Model.KApplyArg(v[17], 10)
																// KVariable _23 = v[44]
																v[45] = i.Model.KApplyArg(v[17], 11)
																// KVariable _24 = v[45]
																v[46] = i.Model.KApplyArg(v[17], 12)
																// KVariable _25 = v[46]
																v[47] = i.Model.KApplyArg(v[17], 13)
																// KVariable _26 = v[47]
																v[48] = i.Model.KApplyArg(v[17], 14)
																// KVariable _27 = v[48]
																v[49] = i.Model.KApplyArg(c, 8)
																if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_41),_33,_34,_35)
																	v[50] = i.Model.KApplyArg(v[49], 0)
																	// KVariable _32 = v[50]
																	v[51] = i.Model.KApplyArg(v[49], 1)
																	if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_41)
																		v[52] = i.Model.KApplyArg(v[51], 0)
																		// KVariable _41 = v[52]
																		v[53] = i.Model.KApplyArg(v[49], 2)
																		// KVariable _33 = v[53]
																		v[54] = i.Model.KApplyArg(v[49], 3)
																		// KVariable _34 = v[54]
																		v[55] = i.Model.KApplyArg(v[49], 4)
																		// KVariable _35 = v[55]
																		// rule #567
																		// source: iele.k @1173
																		// {| rule `<generatedTop>`(`<k>`(`` `#checkCall____IELE`(ACCT,VALUE,GCAP)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,_37,_38,_39,_40,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_41),_33,_34,_35)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(CD)),isInt(GCAP)),isInt(BAL)),isInt(ACCT)),`notBool_`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))))) ensures #token("true","Bool") [UNIQUE_ID(74f715fdd8925e17495c49343c4085d626b0e05ac83d1aada55bac7856e287cc) contentStartColumn(11) contentStartLine(1173) org.kframework.attributes.Location(Location(1173,11,1180,61)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 56 {
																				// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,_30,_31),`Map:lookup`(_41,`<acctID>`(ACCT)))
																				v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<acctID>`(ACCT))
																					v[52] /*_41*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[4] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[57] = v[56]
																				if v[57] == m.InternedBottom {
																					return i.stepLookups(c, config, 56) // reapply
																				}
																				if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,_30,_31)
																					v[58] = i.Model.KApplyArg(v[57], 0)
																					if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																						v[59] = i.Model.KApplyArg(v[58], 0)
																						if i.Model.Equals(v[59], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																							v[60] = i.Model.KApplyArg(v[57], 1)
																							if v[60]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																								v[61] = i.Model.KApplyArg(v[60], 0)
																								if i.tempTypeVar = v[61] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[62 /*BAL*/] = v[61] // BAL
																									v[63] = i.Model.KApplyArg(v[57], 2)
																									v[64 /*_28*/] = v[63] // lhs KVariable _28
																									v[65] = i.Model.KApplyArg(v[57], 3)
																									v[66 /*_29*/] = v[65] // lhs KVariable _29
																									v[67] = i.Model.KApplyArg(v[57], 4)
																									v[68 /*_30*/] = v[67] // lhs KVariable _30
																									v[69] = i.Model.KApplyArg(v[57], 5)
																									v[70 /*_31*/] = v[69] // lhs KVariable _31
																									// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<acctID>`(ACCT)))
																									v[71], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<acctID>`(ACCT))
																										v[52] /*_41*/,
																										i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																											v[4] /*ACCT*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[72] = v[71]
																									if v[72] == m.InternedBottom {
																										return i.stepLookups(c, config, 56) // reapply
																									}
																									if v[72]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																										v[73 /*DotVar5*/] = v[72] // DotVar5
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),`notBool_`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int"))))))
																										v[74], i.evalErr = i.evalIsInt( // isInt(BAL)
																											v[62 /*BAL*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(BAL)),#token("true","Bool")),`notBool_`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))))
																										bv[0] = /* rhs precomputed isInt(VALUE) && isInt(CD) && isInt(GCAP) */ /* && */ m.IsTrue(v[74]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																										if bv[0] {
																											v[75], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
																												v[5] /*VALUE*/,
																												v[62 /*BAL*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											// `_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_>=Int__INT`(CD,#token("1024","Int")))
																											bv[1] = m.IsTrue(v[75])
																											if !bv[1] {
																												v[76], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(CD,#token("1024","Int"))
																													v[25] /*CD*/,
																													/* rhs KToken */ constInt1024,
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												bv[1] = m.IsTrue(v[76])
																											}
																											bv[0] = !(bv[1])
																										}
																										if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																											// RHS
																											return i.stepRHS567(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 56) // reapply
																									}
																								}
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 56) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 571
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcallWithCodeXuXuXuXuXuXuXuXuXuIELE8 { // `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(_12),_2,_3,_4) #as CODE,IDX,GLIMIT,VALUE,ARGS,STATIC)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,`<funcLabels>`(_12),_2,_3,_4) as CODE
								// KVariable CODE = v[6]
								v[7] = i.Model.KApplyArg(v[6], 0)
								// KVariable _0 = v[7]
								v[8] = i.Model.KApplyArg(v[6], 1)
								// KVariable _1 = v[8]
								v[9] = i.Model.KApplyArg(v[6], 2)
								if v[9]&kapplyMatchMask == kapplyMatchLblXltfuncLabelsXgt1 { // `<funcLabels>`(_12)
									v[10] = i.Model.KApplyArg(v[9], 0)
									// KVariable _12 = v[10]
									v[11] = i.Model.KApplyArg(v[6], 3)
									// KVariable _2 = v[11]
									v[12] = i.Model.KApplyArg(v[6], 4)
									// KVariable _3 = v[12]
									v[13] = i.Model.KApplyArg(v[6], 5)
									// KVariable _4 = v[13]
									v[14] = i.Model.KApplyArg(v[2], 3)
									if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
										// KVariable IDX = v[14]
										v[15] = i.Model.KApplyArg(v[2], 4)
										if i.tempTypeVar = v[15] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable GLIMIT = v[15]
											v[16] = i.Model.KApplyArg(v[2], 5)
											if i.tempTypeVar = v[16] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable VALUE = v[16]
												v[17] = i.Model.KApplyArg(v[2], 6)
												// KVariable ARGS = v[17]
												v[18] = i.Model.KApplyArg(v[2], 7)
												if v[18]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
													// KVariable STATIC = v[18]
													// KVariable DotVar1 = v[3]
													v[19] = i.Model.KApplyArg(c, 1)
													if v[19]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
														v[20] = i.Model.KApplyArg(v[19], 0)
														if v[20]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
															_, v[21], v[22] = i.Model.KSequenceSplitHeadTail(v[20]) // #applyRule(#token("regular","#RuleTag")) ~> ...
															if v[21]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																v[23] = i.Model.KApplyArg(v[21], 0)
																if i.Model.Equals(v[23], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																	// KVariable SREST = v[22]
																	v[24] = i.Model.KApplyArg(c, 2)
																	// KVariable _5 = v[24]
																	v[25] = i.Model.KApplyArg(c, 3)
																	// KVariable _6 = v[25]
																	v[26] = i.Model.KApplyArg(c, 4)
																	// KVariable _7 = v[26]
																	v[27] = i.Model.KApplyArg(c, 5)
																	// KVariable _8 = v[27]
																	v[28] = i.Model.KApplyArg(c, 6)
																	// KVariable _9 = v[28]
																	v[29] = i.Model.KApplyArg(c, 7)
																	// KVariable _10 = v[29]
																	v[30] = i.Model.KApplyArg(c, 8)
																	// KVariable _11 = v[30]
																	// rule #571
																	// source: iele.k @1214
																	// {| rule `<generatedTop>`(`<k>`(`` `#callWithCode_________IELE`(ACCTFROM,ACCTTO,`<program>`(_0,_1,`<funcLabels>`(_12),_2,_3,_4) #as CODE,IDX,GLIMIT,VALUE,ARGS,STATIC)=>`#pushCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#pushWorldState_IELE-INFRASTRUCTURE`(.KList)~>`#pushSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>`#mkCall_________IELE`(ACCTFROM,ACCTTO,CODE,FUNC,GLIMIT,VALUE,ARGS,STATIC)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_5,_6,_7,_8,_9,_10,_11) requires `_andBool_`(`_andBool_`(#match(FUNC,`Map:lookup`(_12,IDX)),#match(DotVar3,`_[_<-undef]`(_12,IDX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isBool(STATIC)),isIeleName(FUNC)),isInt(IDX)),isProgramCell(CODE)),isInt(ACCTFROM)),isInts(ARGS)),isInt(GLIMIT))) ensures #token("true","Bool") [UNIQUE_ID(46a3064fbeae49771738a516cc4c4510f049ba12e2885c68e23619b5285ef169) contentStartColumn(10) contentStartLine(1214) org.kframework.attributes.Location(Location(1214,10,1217,68)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 57 {
																			// lookup:#match(FUNC,`Map:lookup`(_12,IDX))
																			v[31], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_12,IDX)
																				v[10] /*_12*/,
																				v[14] /*IDX*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[32] = v[31]
																			if v[32] == m.InternedBottom {
																				return i.stepLookups(c, config, 57) // reapply
																			}
																			v[33 /*FUNC*/] = v[32] // lhs KVariable FUNC
																			// lookup:#match(DotVar3,`_[_<-undef]`(_12,IDX))
																			v[34], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_12,IDX)
																				v[10] /*_12*/,
																				v[14] /*IDX*/,
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[35] = v[34]
																			if v[35] == m.InternedBottom {
																				return i.stepLookups(c, config, 57) // reapply
																			}
																			if v[35]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[36 /*DotVar3*/] = v[35] // DotVar3
																				// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),#token("true","Bool")),isProgramCell(CODE)),#token("true","Bool")),isInts(ARGS)),#token("true","Bool")))
																				v[37], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																					v[33 /*FUNC*/],
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),#token("true","Bool")),isProgramCell(CODE))
																				bv[1] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) && isBool(STATIC) */ /* && */ m.IsTrue(v[37]) /* && */ /* rhs precomputed isInt(IDX) */ 
																				if bv[1] {
																					v[38], i.evalErr = i.evalIsProgramCell( // isProgramCell(CODE)
																						v[6],
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[1] = m.IsTrue(v[38])
																				}
																				// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(FUNC)),#token("true","Bool")),isProgramCell(CODE)),#token("true","Bool")),isInts(ARGS))
																				bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																				if bv[0] {
																					v[39], i.evalErr = i.evalIsInts( // isInts(ARGS)
																						v[17] /*ARGS*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					bv[0] = m.IsTrue(v[39])
																				}
																				if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isInt(GLIMIT) */  {
																					// RHS
																					return i.stepRHS571(v, bv, config)
																				}
																			} else {
																				return i.stepLookups(c, config, 57) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 579
				if v[2]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket0 { // `.List{"topLevelDefinitionList"}`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					// KVariable _6 = v[4]
					v[5] = i.Model.KApplyArg(c, 2)
					// KVariable _7 = v[5]
					v[6] = i.Model.KApplyArg(c, 3)
					// KVariable _8 = v[6]
					v[7] = i.Model.KApplyArg(c, 4)
					// KVariable _9 = v[7]
					v[8] = i.Model.KApplyArg(c, 5)
					// KVariable _10 = v[8]
					v[9] = i.Model.KApplyArg(c, 6)
					if v[9]&kapplyMatchMask == kapplyMatchLblXltwellXhyphenformednessXgt4 { // `<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(_13),_0,_1,`<functionBodies>`(BODIES),_2))
						v[10] = i.Model.KApplyArg(v[9], 0)
						// KVariable _3 = v[10]
						v[11] = i.Model.KApplyArg(v[9], 1)
						// KVariable _4 = v[11]
						v[12] = i.Model.KApplyArg(v[9], 2)
						// KVariable _5 = v[12]
						v[13] = i.Model.KApplyArg(v[9], 3)
						if v[13]&kapplyMatchMask == kapplyMatchLblXltcurrentContractXgt5 { // `<currentContract>`(`<types>`(_13),_0,_1,`<functionBodies>`(BODIES),_2)
							v[14] = i.Model.KApplyArg(v[13], 0)
							if v[14]&kapplyMatchMask == kapplyMatchLblXlttypesXgt1 { // `<types>`(_13)
								v[15] = i.Model.KApplyArg(v[14], 0)
								// KVariable _13 = v[15]
								v[16] = i.Model.KApplyArg(v[13], 1)
								// KVariable _0 = v[16]
								v[17] = i.Model.KApplyArg(v[13], 2)
								// KVariable _1 = v[17]
								v[18] = i.Model.KApplyArg(v[13], 3)
								if v[18]&kapplyMatchMask == kapplyMatchLblXltfunctionBodiesXgt1 { // `<functionBodies>`(BODIES)
									v[19] = i.Model.KApplyArg(v[18], 0)
									// KVariable BODIES = v[19]
									v[20] = i.Model.KApplyArg(v[13], 4)
									// KVariable _2 = v[20]
									v[21] = i.Model.KApplyArg(c, 7)
									// KVariable _11 = v[21]
									v[22] = i.Model.KApplyArg(c, 8)
									// KVariable _12 = v[22]
									// rule #579
									// source: well-formedness.k @96
									// {| rule `<generatedTop>`(`<k>`(`` `.List{"topLevelDefinitionList"}`(.KList)=>BODIES``~>DotVar1),_6,_7,_8,_9,_10,`<well-formedness>`(_3,_4,_5,`<currentContract>`(`<types>`(_13),_0,_1,`<functionBodies>`(BODIES),_2)),_11,_12) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_13,#token("init","IeleName"))),#match(funType(_29,`.List{"typeList"}`(.KList)),`Map:lookup`(_13,#token("init","IeleName")))),isTypes(_29)) ensures #token("true","Bool") [UNIQUE_ID(424398d327c4b97b9e7fe17e3d7dac4ae1aa455363a73e7c4f3e68cd46139a15) contentStartColumn(10) contentStartLine(96) org.kframework.attributes.Location(Location(96,10,98,51)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/well-formedness.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
									if !matched {
										// LOOKUPS
										if guard < 58 {
											// lookup:#match(DotVar4,`_[_<-undef]`(_13,#token("init","IeleName")))
											v[23], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_13,#token("init","IeleName"))
												v[15] /*_13*/,
												/* rhs KToken */ constKTokenSortIeleNameinit,
												config, -1)
											if i.evalErr != nil {
												return m.NoResult, i.evalErr
											}
											v[24] = v[23]
											if v[24] == m.InternedBottom {
												return i.stepLookups(c, config, 58) // reapply
											}
											if v[24]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
												v[25 /*DotVar4*/] = v[24] // DotVar4
												// lookup:#match(funType(_29,`.List{"typeList"}`(.KList)),`Map:lookup`(_13,#token("init","IeleName")))
												v[26], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_13,#token("init","IeleName"))
													v[15] /*_13*/,
													/* rhs KToken */ constKTokenSortIeleNameinit,
													config, -1)
												if i.evalErr != nil {
													return m.NoResult, i.evalErr
												}
												v[27] = v[26]
												if v[27] == m.InternedBottom {
													return i.stepLookups(c, config, 58) // reapply
												}
												if v[27]&kapplyMatchMask == kapplyMatchLblFunType2 { // funType(_29,`.List{"typeList"}`(.KList))
													v[28] = i.Model.KApplyArg(v[27], 0)
													v[29 /*_29*/] = v[28] // lhs KVariable _29
													v[30] = i.Model.KApplyArg(v[27], 1)
													if v[30]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotetypeListXquoteXrbracket0 { // `.List{"typeList"}`(.KList)
														// REQUIRES `_andBool_`(#token("true","Bool"),isTypes(_29))
														v[31], i.evalErr = i.evalIsTypes( // isTypes(_29)
															v[29 /*_29*/],
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														if /* rhs precomputed lookup #match && lookup #match */ /* && */ m.IsTrue(v[31]) {
															// RHS
															return i.stepRHS579(v, bv, config)
														}
													}
												} else {
													return i.stepLookups(c, config, 58) // reapply
												}
											} else {
												return i.stepLookups(c, config, 58) // reapply
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 581
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashlookupCode1 { // #lookupCode(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _8 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _9 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _10 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _11 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _12 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _13 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _6 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												// KVariable _7 = v[22]
												// rule #581
												// source: iele-node.k @42
												// {| rule `<generatedTop>`(`<k>`(``#lookupCode(ACCT)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,`<code>`(#dasmContract(#parseByteStackRaw(#getCode(ACCT)),#token("Main","IeleName"))),_1,_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),isInt(ACCT)) ensures #token("true","Bool") [UNIQUE_ID(90f73f0d5a659578df7e1ac202d54a1dbb9aa6edf3ac285442040e0c5c413f05) contentStartColumn(10) contentStartLine(42) org.kframework.attributes.Location(Location(42,10,47,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// LOOKUPS
													if guard < 59 {
														// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
														v[23], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
															v[19] /*_14*/,
															i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																v[4] /*ACCT*/,
															),
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[24] = v[23]
														if v[24] == m.InternedBottom {
															return i.stepLookups(c, config, 59) // reapply
														}
														if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(`.List{"contractDefinitionList"}`(.KList)),_1,_2,_3)
															v[25] = i.Model.KApplyArg(v[24], 0)
															if v[25]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if i.Model.Equals(v[26], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[27] = i.Model.KApplyArg(v[24], 1)
																	v[28 /*_0*/] = v[27] // lhs KVariable _0
																	v[29] = i.Model.KApplyArg(v[24], 2)
																	if v[29]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(`.List{"contractDefinitionList"}`(.KList))
																		v[30] = i.Model.KApplyArg(v[29], 0)
																		if v[30]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																			v[31] = i.Model.KApplyArg(v[24], 3)
																			v[32 /*_1*/] = v[31] // lhs KVariable _1
																			v[33] = i.Model.KApplyArg(v[24], 4)
																			v[34 /*_2*/] = v[33] // lhs KVariable _2
																			v[35] = i.Model.KApplyArg(v[24], 5)
																			v[36 /*_3*/] = v[35] // lhs KVariable _3
																			// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																			v[37], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																				v[19] /*_14*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[4] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[38] = v[37]
																			if v[38] == m.InternedBottom {
																				return i.stepLookups(c, config, 59) // reapply
																			}
																			if v[38]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																				v[39 /*DotVar3*/] = v[38] // DotVar3
																				// REQUIRES precomputed lookup #match && lookup #match && isInt(ACCT)
																				// RHS
																				return i.stepRHS581(v, bv, config)
																			} else {
																				return i.stepLookups(c, config, 59) // reapply
																			}
																		}
																	}
																}
															}
														} else {
															return i.stepLookups(c, config, 59) // reapply
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 582
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashcheckCreateXuXuXuIELE2 { // `#checkCreate___IELE`(ACCT,VALUE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable VALUE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											if v[12]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
												v[13] = i.Model.KApplyArg(v[12], 0)
												// KVariable EXECMODE = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _36 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _37 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _38 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
													v[18] = i.Model.KApplyArg(v[17], 0)
													// KVariable _14 = v[18]
													v[19] = i.Model.KApplyArg(v[17], 1)
													// KVariable _15 = v[19]
													v[20] = i.Model.KApplyArg(v[17], 2)
													// KVariable _16 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 3)
													// KVariable _17 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 4)
													if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
														v[23] = i.Model.KApplyArg(v[22], 0)
														// KVariable _0 = v[23]
														v[24] = i.Model.KApplyArg(v[22], 1)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
															v[25] = i.Model.KApplyArg(v[24], 0)
															if i.tempTypeVar = v[25] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable CD = v[25]
																v[26] = i.Model.KApplyArg(v[22], 2)
																// KVariable _1 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 3)
																// KVariable _2 = v[27]
																v[28] = i.Model.KApplyArg(v[22], 4)
																// KVariable _3 = v[28]
																v[29] = i.Model.KApplyArg(v[22], 5)
																// KVariable _4 = v[29]
																v[30] = i.Model.KApplyArg(v[22], 6)
																// KVariable _5 = v[30]
																v[31] = i.Model.KApplyArg(v[22], 7)
																// KVariable _6 = v[31]
																v[32] = i.Model.KApplyArg(v[22], 8)
																// KVariable _7 = v[32]
																v[33] = i.Model.KApplyArg(v[22], 9)
																// KVariable _8 = v[33]
																v[34] = i.Model.KApplyArg(v[22], 10)
																// KVariable _9 = v[34]
																v[35] = i.Model.KApplyArg(v[22], 11)
																// KVariable _10 = v[35]
																v[36] = i.Model.KApplyArg(v[22], 12)
																// KVariable _11 = v[36]
																v[37] = i.Model.KApplyArg(v[22], 13)
																// KVariable _12 = v[37]
																v[38] = i.Model.KApplyArg(v[22], 14)
																// KVariable _13 = v[38]
																v[39] = i.Model.KApplyArg(v[17], 5)
																// KVariable _18 = v[39]
																v[40] = i.Model.KApplyArg(v[17], 6)
																// KVariable _19 = v[40]
																v[41] = i.Model.KApplyArg(v[17], 7)
																// KVariable _20 = v[41]
																v[42] = i.Model.KApplyArg(v[17], 8)
																// KVariable _21 = v[42]
																v[43] = i.Model.KApplyArg(v[17], 9)
																// KVariable _22 = v[43]
																v[44] = i.Model.KApplyArg(v[17], 10)
																// KVariable _23 = v[44]
																v[45] = i.Model.KApplyArg(v[17], 11)
																// KVariable _24 = v[45]
																v[46] = i.Model.KApplyArg(v[17], 12)
																// KVariable _25 = v[46]
																v[47] = i.Model.KApplyArg(v[17], 13)
																// KVariable _26 = v[47]
																v[48] = i.Model.KApplyArg(v[17], 14)
																// KVariable _27 = v[48]
																v[49] = i.Model.KApplyArg(c, 8)
																if v[49]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_31,`<accounts>`(_39),_32,_33,_34)
																	v[50] = i.Model.KApplyArg(v[49], 0)
																	// KVariable _31 = v[50]
																	v[51] = i.Model.KApplyArg(v[49], 1)
																	if v[51]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_39)
																		v[52] = i.Model.KApplyArg(v[51], 0)
																		// KVariable _39 = v[52]
																		v[53] = i.Model.KApplyArg(v[49], 2)
																		// KVariable _32 = v[53]
																		v[54] = i.Model.KApplyArg(v[49], 3)
																		// KVariable _33 = v[54]
																		v[55] = i.Model.KApplyArg(v[49], 4)
																		// KVariable _34 = v[55]
																		// rule #582
																		// source: iele.k @1363
																		// {| rule `<generatedTop>`(`<k>`(`` `#checkCreate___IELE`(ACCT,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,`<mode>`(EXECMODE),_36,_37,_38,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(CD),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_31,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),NONCE,`_+Int_`(NONCE,#token("1","Int")))),_30)),DotVar5)),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_39,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(CD)),isMode(EXECMODE)),isInt(BAL)),isInt(ACCT)),isInt(NONCE)),`notBool_`(`_orBool__BOOL`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token("0","Int"))),`_>=Int__INT`(CD,#token("1024","Int")))))) ensures #token("true","Bool") [UNIQUE_ID(f98cc24455fc657c47a6ebfd351333f42a5a9f6ed08b8afea50634def3c84f80) contentStartColumn(10) contentStartLine(1363) org.kframework.attributes.Location(Location(1363,10,1372,81)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 60 {
																				// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(NONCE),_30),`Map:lookup`(_39,`<acctID>`(ACCT)))
																				v[56], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<acctID>`(ACCT))
																					v[52] /*_39*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[4] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[57] = v[56]
																				if v[57] == m.InternedBottom {
																					return i.stepLookups(c, config, 60) // reapply
																				}
																				if v[57]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(BAL),_28,_29,`<nonce>`(NONCE),_30)
																					v[58] = i.Model.KApplyArg(v[57], 0)
																					if v[58]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																						v[59] = i.Model.KApplyArg(v[58], 0)
																						if i.Model.Equals(v[59], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																							v[60] = i.Model.KApplyArg(v[57], 1)
																							if v[60]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(BAL)
																								v[61] = i.Model.KApplyArg(v[60], 0)
																								if i.tempTypeVar = v[61] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									v[62 /*BAL*/] = v[61] // BAL
																									v[63] = i.Model.KApplyArg(v[57], 2)
																									v[64 /*_28*/] = v[63] // lhs KVariable _28
																									v[65] = i.Model.KApplyArg(v[57], 3)
																									v[66 /*_29*/] = v[65] // lhs KVariable _29
																									v[67] = i.Model.KApplyArg(v[57], 4)
																									if v[67]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																										v[68] = i.Model.KApplyArg(v[67], 0)
																										if i.tempTypeVar = v[68] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																											v[69 /*NONCE*/] = v[68] // NONCE
																											v[70] = i.Model.KApplyArg(v[57], 5)
																											v[71 /*_30*/] = v[70] // lhs KVariable _30
																											// lookup:#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))
																											v[72], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<acctID>`(ACCT))
																												v[52] /*_39*/,
																												i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																													v[4] /*ACCT*/,
																												),
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											v[73] = v[72]
																											if v[73] == m.InternedBottom {
																												return i.stepLookups(c, config, 60) // reapply
																											}
																											if v[73]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																												v[74 /*DotVar5*/] = v[73] // DotVar5
																												// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isInt(BAL)),#token("true","Bool")),isInt(NONCE)),`notBool_`(`_orBool__BOOL`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token("0","Int"))),`_>=Int__INT`(CD,#token("1024","Int"))))))
																												v[75], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																													v[13] /*EXECMODE*/,
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												// `_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isInt(BAL))
																												bv[2] = /* rhs precomputed isInt(VALUE) && isInt(CD) */ /* && */ m.IsTrue(v[75])
																												if bv[2] {
																													v[76], i.evalErr = i.evalIsInt( // isInt(BAL)
																														v[62 /*BAL*/],
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													bv[2] = m.IsTrue(v[76])
																												}
																												// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isInt(BAL)),#token("true","Bool")),isInt(NONCE))
																												bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCT) */ 
																												if bv[1] {
																													v[77], i.evalErr = i.evalIsInt( // isInt(NONCE)
																														v[69 /*NONCE*/],
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													bv[1] = m.IsTrue(v[77])
																												}
																												// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isInt(BAL)),#token("true","Bool")),isInt(NONCE)),`notBool_`(`_orBool__BOOL`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token("0","Int"))),`_>=Int__INT`(CD,#token("1024","Int")))))
																												bv[0] = bv[1]
																												if bv[0] {
																													v[78], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,BAL)
																														v[5] /*VALUE*/,
																														v[62 /*BAL*/],
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													// `_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token("0","Int")))
																													bv[4] = m.IsTrue(v[78])
																													if !bv[4] {
																														v[79], i.evalErr = i.evalXuXltIntXuXuINT( // `_<Int__INT`(VALUE,#token("0","Int"))
																															v[5] /*VALUE*/,
																															/* rhs KToken */ m.IntZero,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														bv[4] = m.IsTrue(v[79])
																													}
																													// `_orBool__BOOL`(`_orBool__BOOL`(`_>Int__INT`(VALUE,BAL),`_<Int__INT`(VALUE,#token("0","Int"))),`_>=Int__INT`(CD,#token("1024","Int")))
																													bv[3] = bv[4]
																													if !bv[3] {
																														v[80], i.evalErr = i.evalXuXgtXeqIntXuXuINT( // `_>=Int__INT`(CD,#token("1024","Int"))
																															v[25] /*CD*/,
																															/* rhs KToken */ constInt1024,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														bv[3] = m.IsTrue(v[80])
																													}
																													bv[0] = !(bv[3])
																												}
																												if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																													// RHS
																													return i.stepRHS582(v, bv, config)
																												}
																											} else {
																												return i.stepLookups(c, config, 60) // reapply
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 60) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 585, 601
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashtrimAccounts1 { // #trimAccounts(`_List_`(`ListItem`(ACCT),ACCTS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempBoolVar, v[5], v[6] = i.Model.ListSplitHeadTail(v[4], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(ACCT),ACCTS)
						// rule: 585
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							if v[6]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
								// KVariable ACCTS = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[18], 2)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(v[18], 3)
														// KVariable _6 = v[23]
														v[24] = i.Model.KApplyArg(v[18], 4)
														// KVariable _7 = v[24]
														// rule #585
														// source: iele-node.k @121
														// {| rule `<generatedTop>`(`<k>`(#trimAccounts(`_List_`(`ListItem`(ACCT),ACCTS)=>`_List_`(`.List`(.KList),ACCTS))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`.AccountCellMap`(.KList),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("false","Bool"))),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isList(ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(18cc3ea8d787420cc1fea89a271a1d9e770660861c5a09386897a00082f190e9) contentStartColumn(10) contentStartLine(121) org.kframework.attributes.Location(Location(121,10,126,29)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// LOOKUPS
															if guard < 61 {
																// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("false","Bool"))),`Map:lookup`(_14,`<acctID>`(ACCT)))
																v[25], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																	v[21] /*_14*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[5] /*ACCT*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[26] = v[25]
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 61) // reapply
																}
																if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("false","Bool")))
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		if i.Model.Equals(v[28], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			v[30 /*_0*/] = v[29] // lhs KVariable _0
																			v[31] = i.Model.KApplyArg(v[26], 2)
																			v[32 /*_1*/] = v[31] // lhs KVariable _1
																			v[33] = i.Model.KApplyArg(v[26], 3)
																			v[34 /*_2*/] = v[33] // lhs KVariable _2
																			v[35] = i.Model.KApplyArg(v[26], 4)
																			v[36 /*_3*/] = v[35] // lhs KVariable _3
																			v[37] = i.Model.KApplyArg(v[26], 5)
																			if v[37]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(#token("false","Bool"))
																				v[38] = i.Model.KApplyArg(v[37], 0)
																				if i.Model.Equals(v[38], m.BoolFalse) { // #token("false","Bool")
																					// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																					v[39], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																						v[21] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[5] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[40] = v[39]
																					if v[40] == m.InternedBottom {
																						return i.stepLookups(c, config, 61) // reapply
																					}
																					if v[40]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																						v[41 /*DotVar3*/] = v[40] // DotVar3
																						// REQUIRES precomputed lookup #match && lookup #match && isInt(ACCT) && isList(ACCTS)
																						// RHS
																						return i.stepRHS585(v, bv, config)
																					} else {
																						return i.stepLookups(c, config, 61) // reapply
																					}
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 61) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						// rule: 601
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							if v[6]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
								// KVariable ACCTS = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[18], 2)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(v[18], 3)
														// KVariable _6 = v[23]
														v[24] = i.Model.KApplyArg(v[18], 4)
														// KVariable _7 = v[24]
														// rule #601
														// source: iele-node.k @127
														// {| rule `<generatedTop>`(`<k>`(#trimAccounts(`_List_`(`ListItem`(ACCT),ACCTS)=>`_List_`(`.List`(.KList),ACCTS))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("true","Bool"))),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isList(ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(982506768cdacb03fcd6932e75f5a2c63b51b9ee731ebeec2cd6082c8e8ba616) contentStartColumn(10) contentStartLine(127) org.kframework.attributes.Location(Location(127,10,132,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// LOOKUPS
															if guard < 62 {
																// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("true","Bool"))),`Map:lookup`(_14,`<acctID>`(ACCT)))
																v[25], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																	v[21] /*_14*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[5] /*ACCT*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[26] = v[25]
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 62) // reapply
																}
																if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(#token("true","Bool")))
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		if i.Model.Equals(v[28], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			v[30 /*_0*/] = v[29] // lhs KVariable _0
																			v[31] = i.Model.KApplyArg(v[26], 2)
																			v[32 /*_1*/] = v[31] // lhs KVariable _1
																			v[33] = i.Model.KApplyArg(v[26], 3)
																			v[34 /*_2*/] = v[33] // lhs KVariable _2
																			v[35] = i.Model.KApplyArg(v[26], 4)
																			v[36 /*_3*/] = v[35] // lhs KVariable _3
																			v[37] = i.Model.KApplyArg(v[26], 5)
																			if v[37]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(#token("true","Bool"))
																				v[38] = i.Model.KApplyArg(v[37], 0)
																				if i.Model.Equals(v[38], m.BoolTrue) { // #token("true","Bool")
																					// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																					v[39], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																						v[21] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[5] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[40] = v[39]
																					if v[40] == m.InternedBottom {
																						return i.stepLookups(c, config, 62) // reapply
																					}
																					if v[40]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																						v[41 /*DotVar3*/] = v[40] // DotVar3
																						// REQUIRES precomputed lookup #match && lookup #match && isInt(ACCT) && isList(ACCTS)
																						// RHS
																						return i.stepRHS601(v, bv, config)
																					} else {
																						return i.stepLookups(c, config, 62) // reapply
																					}
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 62) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 586, 591, 605, 611
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashtransferFundsXuXuXuXuIELEXhyphenINFRASTRUCTURE3 { // `#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 586
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _11 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _12 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _13 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _14 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _15 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _16 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_7,`<accounts>`(_17),_8,_9,_10)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _7 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_17)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _17 = v[21]
														v[22] = i.Model.KApplyArg(v[18], 2)
														// KVariable _8 = v[22]
														v[23] = i.Model.KApplyArg(v[18], 3)
														// KVariable _9 = v[23]
														v[24] = i.Model.KApplyArg(v[18], 4)
														// KVariable _10 = v[24]
														// rule #586
														// source: iele.k @509
														// {| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_11,_12,_13,_14,_15,_16,`<network>`(_7,`<accounts>`(_17=>`_AccountCellMap_`(`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCTFROM),`<account>`(`<acctID>`(ACCTFROM),`<balance>`(`_-Int__INT`(ORIGFROM,VALUE)),_0,_1,_2,_3)),`AccountCellMapItem`(`<acctID>`(ACCTTO),`<account>`(`<acctID>`(ACCTTO),`<balance>`(`_+Int_`(ORIGTO,VALUE)),_4,_5,_6,`<exists>`(#token("true","Bool"))))),DotVar3)),_8,_9,_10)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),`<balance>`(ORIGTO),_4,_5,_6,`<exists>`(_105)),`Map:lookup`(_17,`<acctID>`(ACCTTO))),#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_17,`<acctID>`(ACCTFROM)))),#match(DotVar3,`_[_<-undef]`(`_[_<-undef]`(_17,`<acctID>`(ACCTFROM)),`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isBool(_105)),isInt(ACCTFROM)),isInt(ORIGFROM)),isInt(ORIGTO)),`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`_<=Int__INT`(VALUE,ORIGFROM)))) ensures #token("true","Bool") [UNIQUE_ID(c4d0d15652b37e89fa51c209f42320418d849166d0d58434eb90935c064ab814) contentStartColumn(10) contentStartLine(509) org.kframework.attributes.Location(Location(509,10,521,65)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// LOOKUPS
															if guard < 63 {
																// lookup:#match(`<account>`(`<acctID>`(ACCTTO),`<balance>`(ORIGTO),_4,_5,_6,`<exists>`(_105)),`Map:lookup`(_17,`<acctID>`(ACCTTO)))
																v[25], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_17,`<acctID>`(ACCTTO))
																	v[21] /*_17*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[5] /*ACCTTO*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[26] = v[25]
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 63) // reapply
																}
																if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTTO),`<balance>`(ORIGTO),_4,_5,_6,`<exists>`(_105))
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTTO)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		if i.Model.Equals(v[28], v[5] /*ACCTTO*/) { // lhs KVariable, which reappears:ACCTTO
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			if v[29]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(ORIGTO)
																				v[30] = i.Model.KApplyArg(v[29], 0)
																				if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					v[31 /*ORIGTO*/] = v[30] // ORIGTO
																					v[32] = i.Model.KApplyArg(v[26], 2)
																					v[33 /*_4*/] = v[32] // lhs KVariable _4
																					v[34] = i.Model.KApplyArg(v[26], 3)
																					v[35 /*_5*/] = v[34] // lhs KVariable _5
																					v[36] = i.Model.KApplyArg(v[26], 4)
																					v[37 /*_6*/] = v[36] // lhs KVariable _6
																					v[38] = i.Model.KApplyArg(v[26], 5)
																					if v[38]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(_105)
																						v[39] = i.Model.KApplyArg(v[38], 0)
																						if v[39]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
																							v[40 /*_105*/] = v[39] // _105
																							// lookup:#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_17,`<acctID>`(ACCTFROM)))
																							v[41], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_17,`<acctID>`(ACCTFROM))
																								v[21] /*_17*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[4] /*ACCTFROM*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[42] = v[41]
																							if v[42] == m.InternedBottom {
																								return i.stepLookups(c, config, 63) // reapply
																							}
																							if v[42]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3)
																								v[43] = i.Model.KApplyArg(v[42], 0)
																								if v[43]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTFROM)
																									v[44] = i.Model.KApplyArg(v[43], 0)
																									if i.Model.Equals(v[44], v[4] /*ACCTFROM*/) { // lhs KVariable, which reappears:ACCTFROM
																										v[45] = i.Model.KApplyArg(v[42], 1)
																										if v[45]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(ORIGFROM)
																											v[46] = i.Model.KApplyArg(v[45], 0)
																											if i.tempTypeVar = v[46] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												v[47 /*ORIGFROM*/] = v[46] // ORIGFROM
																												v[48] = i.Model.KApplyArg(v[42], 2)
																												v[49 /*_0*/] = v[48] // lhs KVariable _0
																												v[50] = i.Model.KApplyArg(v[42], 3)
																												v[51 /*_1*/] = v[50] // lhs KVariable _1
																												v[52] = i.Model.KApplyArg(v[42], 4)
																												v[53 /*_2*/] = v[52] // lhs KVariable _2
																												v[54] = i.Model.KApplyArg(v[42], 5)
																												v[55 /*_3*/] = v[54] // lhs KVariable _3
																												// lookup:#match(DotVar3,`_[_<-undef]`(`_[_<-undef]`(_17,`<acctID>`(ACCTFROM)),`<acctID>`(ACCTTO)))
																												v[57], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_17,`<acctID>`(ACCTFROM))
																													v[21] /*_17*/,
																													i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																														v[4] /*ACCTFROM*/,
																													),
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												v[56], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(`_[_<-undef]`(_17,`<acctID>`(ACCTFROM)),`<acctID>`(ACCTTO))
																													v[57],
																													i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																														v[5] /*ACCTTO*/,
																													),
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												v[58] = v[56]
																												if v[58] == m.InternedBottom {
																													return i.stepLookups(c, config, 63) // reapply
																												}
																												if v[58]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																													v[59 /*DotVar3*/] = v[58] // DotVar3
																													// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBool(_105)),#token("true","Bool")),isInt(ORIGFROM)),isInt(ORIGTO)),`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`_<=Int__INT`(VALUE,ORIGFROM))))
																													v[60], i.evalErr = i.evalIsBool( // isBool(_105)
																														v[40 /*_105*/],
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBool(_105)),#token("true","Bool")),isInt(ORIGFROM))
																													bv[2] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) */ /* && */ m.IsTrue(v[60]) /* && */ /* rhs precomputed isInt(ACCTFROM) */ 
																													if bv[2] {
																														v[61], i.evalErr = i.evalIsInt( // isInt(ORIGFROM)
																															v[47 /*ORIGFROM*/],
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														bv[2] = m.IsTrue(v[61])
																													}
																													// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBool(_105)),#token("true","Bool")),isInt(ORIGFROM)),isInt(ORIGTO))
																													bv[1] = bv[2]
																													if bv[1] {
																														v[62], i.evalErr = i.evalIsInt( // isInt(ORIGTO)
																															v[31 /*ORIGTO*/],
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														bv[1] = m.IsTrue(v[62])
																													}
																													// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBool(_105)),#token("true","Bool")),isInt(ORIGFROM)),isInt(ORIGTO)),`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`_<=Int__INT`(VALUE,ORIGFROM)))
																													bv[0] = bv[1]
																													if bv[0] {
																														v[63], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(ACCTFROM,ACCTTO)
																															v[4] /*ACCTFROM*/,
																															v[5] /*ACCTTO*/,
																															config, -1)
																														if i.evalErr != nil {
																															return m.NoResult, i.evalErr
																														}
																														// `_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`_<=Int__INT`(VALUE,ORIGFROM))
																														bv[3] = m.IsTrue(v[63])
																														if bv[3] {
																															v[64], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(VALUE,ORIGFROM)
																																v[6] /*VALUE*/,
																																v[47 /*ORIGFROM*/],
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															bv[3] = m.IsTrue(v[64])
																														}
																														bv[0] = bv[3]
																													}
																													if /* rhs precomputed lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																														// RHS
																														return i.stepRHS586(v, bv, config)
																													}
																												} else {
																													return i.stepLookups(c, config, 63) // reapply
																												}
																											}
																										}
																									}
																								}
																							} else {
																								return i.stepLookups(c, config, 63) // reapply
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 63) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 591
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _7 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _8 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _9 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _10 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _11 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _12 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(_13),_4,_5,_6)
													v[19] = i.Model.KApplyArg(v[18], 0)
													if v[19]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
														v[20] = i.Model.KApplyArg(v[19], 0)
														if v[20]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
															// KVariable ACCTS = v[20]
															v[21] = i.Model.KApplyArg(v[18], 1)
															if v[21]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_13)
																v[22] = i.Model.KApplyArg(v[21], 0)
																// KVariable _13 = v[22]
																v[23] = i.Model.KApplyArg(v[18], 2)
																// KVariable _4 = v[23]
																v[24] = i.Model.KApplyArg(v[18], 3)
																// KVariable _5 = v[24]
																v[25] = i.Model.KApplyArg(v[18], 4)
																// KVariable _6 = v[25]
																// rule #591
																// source: iele.k @531
																// {| rule `<generatedTop>`(`<k>`(``.K=>`#loadAccount__IELE-INFRASTRUCTURE`(ACCTTO)``~>`#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_7,_8,_9,_10,_11,_12,`<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(_13),_4,_5,_6)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_13,`<acctID>`(ACCTFROM))),#match(DotVar3,`_[_<-undef]`(_13,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isInt(ACCTFROM)),isSet(ACCTS)),isInt(ORIGFROM)),`_andBool_`(`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS))),`_<=Int__INT`(VALUE,ORIGFROM)))) ensures #token("true","Bool") [UNIQUE_ID(c33779f3383edf26d8c4af59f237e521534e609f758861f144adab74efc0f6f0) contentStartColumn(10) contentStartLine(531) org.kframework.attributes.Location(Location(531,10,538,97)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																if !matched {
																	// LOOKUPS
																	if guard < 64 {
																		// lookup:#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_13,`<acctID>`(ACCTFROM)))
																		v[26], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_13,`<acctID>`(ACCTFROM))
																			v[22] /*_13*/,
																			i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																				v[4] /*ACCTFROM*/,
																			),
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		v[27] = v[26]
																		if v[27] == m.InternedBottom {
																			return i.stepLookups(c, config, 64) // reapply
																		}
																		if v[27]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3)
																			v[28] = i.Model.KApplyArg(v[27], 0)
																			if v[28]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTFROM)
																				v[29] = i.Model.KApplyArg(v[28], 0)
																				if i.Model.Equals(v[29], v[4] /*ACCTFROM*/) { // lhs KVariable, which reappears:ACCTFROM
																					v[30] = i.Model.KApplyArg(v[27], 1)
																					if v[30]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(ORIGFROM)
																						v[31] = i.Model.KApplyArg(v[30], 0)
																						if i.tempTypeVar = v[31] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																							v[32 /*ORIGFROM*/] = v[31] // ORIGFROM
																							v[33] = i.Model.KApplyArg(v[27], 2)
																							v[34 /*_0*/] = v[33] // lhs KVariable _0
																							v[35] = i.Model.KApplyArg(v[27], 3)
																							v[36 /*_1*/] = v[35] // lhs KVariable _1
																							v[37] = i.Model.KApplyArg(v[27], 4)
																							v[38 /*_2*/] = v[37] // lhs KVariable _2
																							v[39] = i.Model.KApplyArg(v[27], 5)
																							v[40 /*_3*/] = v[39] // lhs KVariable _3
																							// lookup:#match(DotVar3,`_[_<-undef]`(_13,`<acctID>`(ACCTFROM)))
																							v[41], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_13,`<acctID>`(ACCTFROM))
																								v[22] /*_13*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[4] /*ACCTFROM*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[42] = v[41]
																							if v[42] == m.InternedBottom {
																								return i.stepLookups(c, config, 64) // reapply
																							}
																							if v[42]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																								v[43 /*DotVar3*/] = v[42] // DotVar3
																								// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_andBool_`(`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS))),`_<=Int__INT`(VALUE,ORIGFROM))))
																								v[44], i.evalErr = i.evalIsInt( // isInt(ORIGFROM)
																									v[32 /*ORIGFROM*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								// `_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_andBool_`(`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS))),`_<=Int__INT`(VALUE,ORIGFROM)))
																								bv[0] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) && isInt(ACCTFROM) && isSet(ACCTS) */ /* && */ m.IsTrue(v[44])
																								if bv[0] {
																									v[45], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(ACCTFROM,ACCTTO)
																										v[4] /*ACCTFROM*/,
																										v[5] /*ACCTTO*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS)))
																									bv[2] = m.IsTrue(v[45])
																									if bv[2] {
																										v[46], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCTTO,ACCTS)
																											v[5] /*ACCTTO*/,
																											v[20] /*ACCTS*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[2] = !(m.IsTrue(v[46]))
																									}
																									// `_andBool_`(`_andBool_`(`_=/=K_`(ACCTFROM,ACCTTO),`notBool_`(`Set:in`(ACCTTO,ACCTS))),`_<=Int__INT`(VALUE,ORIGFROM))
																									bv[1] = bv[2]
																									if bv[1] {
																										v[47], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(VALUE,ORIGFROM)
																											v[6] /*VALUE*/,
																											v[32 /*ORIGFROM*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[47])
																									}
																									bv[0] = bv[1]
																								}
																								if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																									// RHS
																									return i.stepRHS591(v, bv, config)
																								}
																							} else {
																								return i.stepLookups(c, config, 64) // reapply
																							}
																						}
																					}
																				}
																			}
																		} else {
																			return i.stepLookups(c, config, 64) // reapply
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 605
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[18], 2)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(v[18], 3)
														// KVariable _6 = v[23]
														v[24] = i.Model.KApplyArg(v[18], 4)
														// KVariable _7 = v[24]
														// rule #605
														// source: iele.k @523
														// {| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCTFROM,ACCTTO,VALUE)=>`#exception__IELE-INFRASTRUCTURE`(#token("7","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTFROM))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(ACCTTO),isInt(VALUE)),isInt(ACCTFROM)),isInt(ORIGFROM)),`_>Int__INT`(VALUE,ORIGFROM))) ensures #token("true","Bool") [UNIQUE_ID(d5607b5b79c7175d85968e3c6acc4f87e64369a4cea37988cb317c924aaa59e5) contentStartColumn(10) contentStartLine(523) org.kframework.attributes.Location(Location(523,10,529,35)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// LOOKUPS
															if guard < 65 {
																// lookup:#match(`<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCTFROM)))
																v[25], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCTFROM))
																	v[21] /*_14*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[4] /*ACCTFROM*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[26] = v[25]
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 65) // reapply
																}
																if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTFROM),`<balance>`(ORIGFROM),_0,_1,_2,_3)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTFROM)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		if i.Model.Equals(v[28], v[4] /*ACCTFROM*/) { // lhs KVariable, which reappears:ACCTFROM
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			if v[29]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(ORIGFROM)
																				v[30] = i.Model.KApplyArg(v[29], 0)
																				if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					v[31 /*ORIGFROM*/] = v[30] // ORIGFROM
																					v[32] = i.Model.KApplyArg(v[26], 2)
																					v[33 /*_0*/] = v[32] // lhs KVariable _0
																					v[34] = i.Model.KApplyArg(v[26], 3)
																					v[35 /*_1*/] = v[34] // lhs KVariable _1
																					v[36] = i.Model.KApplyArg(v[26], 4)
																					v[37 /*_2*/] = v[36] // lhs KVariable _2
																					v[38] = i.Model.KApplyArg(v[26], 5)
																					v[39 /*_3*/] = v[38] // lhs KVariable _3
																					// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCTFROM)))
																					v[40], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCTFROM))
																						v[21] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[4] /*ACCTFROM*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[41] = v[40]
																					if v[41] == m.InternedBottom {
																						return i.stepLookups(c, config, 65) // reapply
																					}
																					if v[41]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																						v[42 /*DotVar3*/] = v[41] // DotVar3
																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_>Int__INT`(VALUE,ORIGFROM)))
																						v[43], i.evalErr = i.evalIsInt( // isInt(ORIGFROM)
																							v[31 /*ORIGFROM*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						// `_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_>Int__INT`(VALUE,ORIGFROM))
																						bv[0] = /* rhs precomputed isInt(ACCTTO) && isInt(VALUE) && isInt(ACCTFROM) */ /* && */ m.IsTrue(v[43])
																						if bv[0] {
																							v[44], i.evalErr = i.evalXuXgtIntXuXuINT( // `_>Int__INT`(VALUE,ORIGFROM)
																								v[6] /*VALUE*/,
																								v[31 /*ORIGFROM*/],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[0] = m.IsTrue(v[44])
																						}
																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																							// RHS
																							return i.stepRHS605(v, bv, config)
																						}
																					} else {
																						return i.stepLookups(c, config, 65) // reapply
																					}
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 65) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 611
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.Model.Equals(v[5], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable VALUE = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _4 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													if v[20]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
														v[21] = i.Model.KApplyArg(v[20], 0)
														// KVariable _14 = v[21]
														v[22] = i.Model.KApplyArg(v[18], 2)
														// KVariable _5 = v[22]
														v[23] = i.Model.KApplyArg(v[18], 3)
														// KVariable _6 = v[23]
														v[24] = i.Model.KApplyArg(v[18], 4)
														// KVariable _7 = v[24]
														// rule #611
														// source: iele.k @540
														// {| rule `<generatedTop>`(`<k>`(`` `#transferFunds____IELE-INFRASTRUCTURE`(ACCT,ACCT,VALUE)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isInt(VALUE),isInt(ACCT)),isInt(ORIGFROM)),`_<=Int__INT`(VALUE,ORIGFROM))) ensures #token("true","Bool") [UNIQUE_ID(e32d3ca8e622e46ed12d122b8c96a250847e21975db202dd5c94746ab40d5514) contentStartColumn(10) contentStartLine(540) org.kframework.attributes.Location(Location(540,10,546,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
														if !matched {
															// LOOKUPS
															if guard < 66 {
																// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(ORIGFROM),_0,_1,_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
																v[25], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																	v[21] /*_14*/,
																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																		v[4] /*ACCT*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[26] = v[25]
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 66) // reapply
																}
																if v[26]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(ORIGFROM),_0,_1,_2,_3)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if v[27]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																		v[28] = i.Model.KApplyArg(v[27], 0)
																		if i.Model.Equals(v[28], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																			v[29] = i.Model.KApplyArg(v[26], 1)
																			if v[29]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(ORIGFROM)
																				v[30] = i.Model.KApplyArg(v[29], 0)
																				if i.tempTypeVar = v[30] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					v[31 /*ORIGFROM*/] = v[30] // ORIGFROM
																					v[32] = i.Model.KApplyArg(v[26], 2)
																					v[33 /*_0*/] = v[32] // lhs KVariable _0
																					v[34] = i.Model.KApplyArg(v[26], 3)
																					v[35 /*_1*/] = v[34] // lhs KVariable _1
																					v[36] = i.Model.KApplyArg(v[26], 4)
																					v[37 /*_2*/] = v[36] // lhs KVariable _2
																					v[38] = i.Model.KApplyArg(v[26], 5)
																					v[39 /*_3*/] = v[38] // lhs KVariable _3
																					// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																					v[40], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																						v[21] /*_14*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[4] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[41] = v[40]
																					if v[41] == m.InternedBottom {
																						return i.stepLookups(c, config, 66) // reapply
																					}
																					if v[41]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																						v[42 /*DotVar3*/] = v[41] // DotVar3
																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_<=Int__INT`(VALUE,ORIGFROM)))
																						v[43], i.evalErr = i.evalIsInt( // isInt(ORIGFROM)
																							v[31 /*ORIGFROM*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						// `_andBool_`(`_andBool_`(#token("true","Bool"),isInt(ORIGFROM)),`_<=Int__INT`(VALUE,ORIGFROM))
																						bv[0] = /* rhs precomputed isInt(VALUE) && isInt(ACCT) */ /* && */ m.IsTrue(v[43])
																						if bv[0] {
																							v[44], i.evalErr = i.evalXuXltXeqIntXuXuINT( // `_<=Int__INT`(VALUE,ORIGFROM)
																								v[6] /*VALUE*/,
																								v[31 /*ORIGFROM*/],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							bv[0] = m.IsTrue(v[44])
																						}
																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																							// RHS
																							return i.stepRHS611(v, bv, config)
																						}
																					} else {
																						return i.stepLookups(c, config, 66) // reapply
																					}
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 66) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 587, 626
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashinitAccountXuXuIELEXhyphenINFRASTRUCTURE1 { // `#initAccount__IELE-INFRASTRUCTURE`(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 587
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _6 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _7 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _8 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _9 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _10 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _11 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_2,`<accounts>`(_12),_3,_4,_5)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _2 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_12)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _12 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _3 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _4 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												// KVariable _5 = v[22]
												// rule #587
												// source: iele.k @433
												// {| rule `<generatedTop>`(`<k>`(`` `#initAccount__IELE-INFRASTRUCTURE`(ACCT)=>`#exception__IELE-INFRASTRUCTURE`(#token("6","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_6,_7,_8,_9,_10,_11,`<network>`(_2,`<accounts>`(_12),_3,_4,_5)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,`<nonce>`(NONCE),`<exists>`(EXISTS)),`Map:lookup`(_12,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_12,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isInt(ACCT)),isInt(NONCE)),isBool(EXISTS)),`_orBool__BOOL`(`_orBool__BOOL`(EXISTS,`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))),`_=/=K_`(NONCE,#token("0","Int"))))) ensures #token("true","Bool") [UNIQUE_ID(96b002b7b3a2deaa81c4b3bb12c7ded7701b5d6818afbc4305358c8ce45d0074) contentStartColumn(10) contentStartLine(433) org.kframework.attributes.Location(Location(433,10,441,70)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
												if !matched {
													// LOOKUPS
													if guard < 67 {
														// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,`<nonce>`(NONCE),`<exists>`(EXISTS)),`Map:lookup`(_12,`<acctID>`(ACCT)))
														v[23], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_12,`<acctID>`(ACCT))
															v[19] /*_12*/,
															i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																v[4] /*ACCT*/,
															),
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[24] = v[23]
														if v[24] == m.InternedBottom {
															return i.stepLookups(c, config, 67) // reapply
														}
														if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,`<code>`(CODE),_1,`<nonce>`(NONCE),`<exists>`(EXISTS))
															v[25] = i.Model.KApplyArg(v[24], 0)
															if v[25]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if i.Model.Equals(v[26], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[27] = i.Model.KApplyArg(v[24], 1)
																	v[28 /*_0*/] = v[27] // lhs KVariable _0
																	v[29] = i.Model.KApplyArg(v[24], 2)
																	if v[29]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(CODE)
																		v[30] = i.Model.KApplyArg(v[29], 0)
																		v[31 /*CODE*/] = v[30] // lhs KVariable CODE
																		v[32] = i.Model.KApplyArg(v[24], 3)
																		v[33 /*_1*/] = v[32] // lhs KVariable _1
																		v[34] = i.Model.KApplyArg(v[24], 4)
																		if v[34]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																			v[35] = i.Model.KApplyArg(v[34], 0)
																			if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				v[36 /*NONCE*/] = v[35] // NONCE
																				v[37] = i.Model.KApplyArg(v[24], 5)
																				if v[37]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(EXISTS)
																					v[38] = i.Model.KApplyArg(v[37], 0)
																					if v[38]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
																						v[39 /*EXISTS*/] = v[38] // EXISTS
																						// lookup:#match(DotVar3,`_[_<-undef]`(_12,`<acctID>`(ACCT)))
																						v[40], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_12,`<acctID>`(ACCT))
																							v[19] /*_12*/,
																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																								v[4] /*ACCT*/,
																							),
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						v[41] = v[40]
																						if v[41] == m.InternedBottom {
																							return i.stepLookups(c, config, 67) // reapply
																						}
																						if v[41]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																							v[42 /*DotVar3*/] = v[41] // DotVar3
																							// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isInt(NONCE)),isBool(EXISTS)),`_orBool__BOOL`(`_orBool__BOOL`(EXISTS,`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))),`_=/=K_`(NONCE,#token("0","Int")))))
																							v[43], i.evalErr = i.evalIsContract( // isContract(CODE)
																								v[31 /*CODE*/],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							// `_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isInt(NONCE))
																							bv[2] = m.IsTrue(v[43]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																							if bv[2] {
																								v[44], i.evalErr = i.evalIsInt( // isInt(NONCE)
																									v[36 /*NONCE*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[2] = m.IsTrue(v[44])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isInt(NONCE)),isBool(EXISTS))
																							bv[1] = bv[2]
																							if bv[1] {
																								v[45], i.evalErr = i.evalIsBool( // isBool(EXISTS)
																									v[39 /*EXISTS*/],
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								bv[1] = m.IsTrue(v[45])
																							}
																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),#token("true","Bool")),isInt(NONCE)),isBool(EXISTS)),`_orBool__BOOL`(`_orBool__BOOL`(EXISTS,`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))),`_=/=K_`(NONCE,#token("0","Int"))))
																							bv[0] = bv[1]
																							if bv[0] {
																								// `_orBool__BOOL`(EXISTS,`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))))
																								bv[4] = m.IsTrue(v[39 /*EXISTS*/])
																								if !bv[4] {
																									v[46], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))
																										v[31 /*CODE*/],
																										i.Model.NewKApply(m.LblContractDefinitionList, // as-is contractDefinitionList
																											i.Model.NewKApply(m.LblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION, // as-is contract_!__{_}_IELE-CONFIGURATION
																												/* rhs KToken */ constKTokenSortIeleNameieleXdotWallet,
																												/* rhs KToken */ m.IntZero,
																												/* rhs KToken */ constStringXquoteXquote,
																												i.Model.NewKApply(m.LblTopLevelDefinitionList, // as-is topLevelDefinitionList
																													i.Model.NewKApply(m.LblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON, // as-is definepublic_{_}_IELE-COMMON
																														i.Model.NewKApply(m.LblXuXlparenXuXrparenXuIELEXhyphenCOMMON, // as-is _(_)_IELE-COMMON
																															i.Model.NewKApply(m.LblXatXuXuIELEXhyphenCOMMON, // as-is @__IELE-COMMON
																																/* rhs KToken */ constKTokenSortIeleNamedeposit,
																															),
																															/* rhs KToken */ m.IntZero,
																														),
																														i.Model.NewKApply(m.LblXuXuXuIELEXhyphenCOMMON, // as-is ___IELE-COMMON
																															i.Model.NewKApply(m.LblInstructionList, // as-is instructionList
																																i.Model.NewKApply(m.LblRetXuXuIELEXhyphenCOMMON, // as-is ret__IELE-COMMON
																																	i.Model.NewKApply(m.LblXdotListXlbracketXquoteoperandListXquoteXrbracket, // as-is .List{"operandList"}
																																	),
																																),
																																i.Model.NewKApply(m.LblXdotListXlbracketXquoteinstructionListXquoteXrbracket, // as-is .List{"instructionList"}
																																),
																															),
																															i.Model.NewKApply(m.LblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket, // as-is .List{"labeledBlockList"}
																															),
																														),
																													),
																													i.Model.NewKApply(m.LblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket, // as-is .List{"topLevelDefinitionList"}
																													),
																												),
																											),
																											i.Model.NewKApply(m.LblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket, // as-is .List{"contractDefinitionList"}
																											),
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[4] = m.IsTrue(v[46])
																								}
																								// `_orBool__BOOL`(`_orBool__BOOL`(EXISTS,`_=/=K_`(CODE,contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))),`_=/=K_`(NONCE,#token("0","Int")))
																								bv[3] = bv[4]
																								if !bv[3] {
																									v[47], i.evalErr = i.evalXuXeqXslashXeqKXu( // `_=/=K_`(NONCE,#token("0","Int"))
																										v[36 /*NONCE*/],
																										/* rhs KToken */ m.IntZero,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									bv[3] = m.IsTrue(v[47])
																								}
																								bv[0] = bv[3]
																							}
																							if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																								// RHS
																								return i.stepRHS587(v, bv, config)
																							}
																						} else {
																							return i.stepLookups(c, config, 67) // reapply
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														} else {
															return i.stepLookups(c, config, 67) // reapply
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 626
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _4 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _5 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _6 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _7 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _8 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _9 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_0,`<accounts>`(_10),_1,_2,_3)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _0 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_10)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _10 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _1 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _2 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												// KVariable _3 = v[22]
												// rule #626
												// source: iele.k @443
												// {| rule `<generatedTop>`(`<k>`(`` `#initAccount__IELE-INFRASTRUCTURE`(ACCT)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_4,_5,_6,_7,_8,_9,`<network>`(_0,`<accounts>`(_10=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),DotVar4,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(`.Map`(.KList)),`<nonce>`(#token("0","Int")),`<exists>`(#token("true","Bool")))),DotVar3)),_1,_2,_3)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),DotVar4,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(_117),`<nonce>`(_16),`<exists>`(#token("false","Bool"))),`Map:lookup`(_10,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_10,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isMap(_117))),`_andBool_`(`_andBool_`(`_==Int_`(_16,#token("0","Int")),`_==Int_`(_14,#token("0","Int"))),`_==Int_`(_15,#token("0","Int")))) ensures #token("true","Bool") [UNIQUE_ID(342a7a7dde1f01a906c261ad356ae36cb3840cd2d892940bb66080a54815ba71) contentStartColumn(10) contentStartLine(443) org.kframework.attributes.Location(Location(443,10,451,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// LOOKUPS
													if guard < 68 {
														// lookup:#match(`<account>`(`<acctID>`(ACCT),DotVar4,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(_117),`<nonce>`(_16),`<exists>`(#token("false","Bool"))),`Map:lookup`(_10,`<acctID>`(ACCT)))
														v[23], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_10,`<acctID>`(ACCT))
															v[19] /*_10*/,
															i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																v[4] /*ACCT*/,
															),
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[24] = v[23]
														if v[24] == m.InternedBottom {
															return i.stepLookups(c, config, 68) // reapply
														}
														if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),DotVar4,`<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(_117),`<nonce>`(_16),`<exists>`(#token("false","Bool")))
															v[25] = i.Model.KApplyArg(v[24], 0)
															if v[25]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if i.Model.Equals(v[26], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[27] = i.Model.KApplyArg(v[24], 1)
																	v[28 /*DotVar4*/] = v[27] // lhs KVariable DotVar4
																	v[29] = i.Model.KApplyArg(v[24], 2)
																	if v[29]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)))
																		v[30] = i.Model.KApplyArg(v[29], 0)
																		if v[30]&kapplyMatchMask == kapplyMatchLblContractDefinitionList2 { // contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList))
																			v[31] = i.Model.KApplyArg(v[30], 0)
																			if v[31]&kapplyMatchMask == kapplyMatchLblContractXuXbangXuXuXlbracketXuXrbracketXuIELEXhyphenCONFIGURATION4 { // `contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),_14,#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList)))
																				v[32] = i.Model.KApplyArg(v[31], 0)
																				if i.Model.Equals(v[32], constKTokenSortIeleNameieleXdotWallet) { // #token("iele.Wallet","IeleName")
																					v[33] = i.Model.KApplyArg(v[31], 1)
																					if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						v[34 /*_14*/] = v[33] // _14
																						v[35] = i.Model.KApplyArg(v[31], 2)
																						if i.Model.Equals(v[35], constStringXquoteXquote) { // #token("\"\"","String")
																							v[36] = i.Model.KApplyArg(v[31], 3)
																							if v[36]&kapplyMatchMask == kapplyMatchLblTopLevelDefinitionList2 { // topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))
																								v[37] = i.Model.KApplyArg(v[36], 0)
																								if v[37]&kapplyMatchMask == kapplyMatchLblDefinepublicXuXlbracketXuXrbracketXuIELEXhyphenCOMMON2 { // `definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList)))
																									v[38] = i.Model.KApplyArg(v[37], 0)
																									if v[38]&kapplyMatchMask == kapplyMatchLblXuXlparenXuXrparenXuIELEXhyphenCOMMON2 { // `_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),_15)
																										v[39] = i.Model.KApplyArg(v[38], 0)
																										if v[39]&kapplyMatchMask == kapplyMatchLblXatXuXuIELEXhyphenCOMMON1 { // `@__IELE-COMMON`(#token("deposit","IeleName"))
																											v[40] = i.Model.KApplyArg(v[39], 0)
																											if i.Model.Equals(v[40], constKTokenSortIeleNamedeposit) { // #token("deposit","IeleName")
																												v[41] = i.Model.KApplyArg(v[38], 1)
																												if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																													v[42 /*_15*/] = v[41] // _15
																													v[43] = i.Model.KApplyArg(v[37], 1)
																													if v[43]&kapplyMatchMask == kapplyMatchLblXuXuXuIELEXhyphenCOMMON2 { // `___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))
																														v[44] = i.Model.KApplyArg(v[43], 0)
																														if v[44]&kapplyMatchMask == kapplyMatchLblInstructionList2 { // instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList))
																															v[45] = i.Model.KApplyArg(v[44], 0)
																															if v[45]&kapplyMatchMask == kapplyMatchLblRetXuXuIELEXhyphenCOMMON1 { // `ret__IELE-COMMON`(`.List{"operandList"}`(.KList))
																																v[46] = i.Model.KApplyArg(v[45], 0)
																																if v[46]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteoperandListXquoteXrbracket0 { // `.List{"operandList"}`(.KList)
																																	v[47] = i.Model.KApplyArg(v[44], 1)
																																	if v[47]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquoteinstructionListXquoteXrbracket0 { // `.List{"instructionList"}`(.KList)
																																		v[48] = i.Model.KApplyArg(v[43], 1)
																																		if v[48]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotelabeledBlockListXquoteXrbracket0 { // `.List{"labeledBlockList"}`(.KList)
																																			v[49] = i.Model.KApplyArg(v[36], 1)
																																			if v[49]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotetopLevelDefinitionListXquoteXrbracket0 { // `.List{"topLevelDefinitionList"}`(.KList)
																																				v[50] = i.Model.KApplyArg(v[30], 1)
																																				if v[50]&kapplyMatchMask == kapplyMatchLblXdotListXlbracketXquotecontractDefinitionListXquoteXrbracket0 { // `.List{"contractDefinitionList"}`(.KList)
																																					v[51] = i.Model.KApplyArg(v[24], 3)
																																					if v[51]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(_117)
																																						v[52] = i.Model.KApplyArg(v[51], 0)
																																						if v[52]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																																							v[53 /*_117*/] = v[52] // _117
																																							v[54] = i.Model.KApplyArg(v[24], 4)
																																							if v[54]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(_16)
																																								v[55] = i.Model.KApplyArg(v[54], 0)
																																								if i.tempTypeVar = v[55] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																									v[56 /*_16*/] = v[55] // _16
																																									v[57] = i.Model.KApplyArg(v[24], 5)
																																									if v[57]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(#token("false","Bool"))
																																										v[58] = i.Model.KApplyArg(v[57], 0)
																																										if i.Model.Equals(v[58], m.BoolFalse) { // #token("false","Bool")
																																											// lookup:#match(DotVar3,`_[_<-undef]`(_10,`<acctID>`(ACCT)))
																																											v[59], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_10,`<acctID>`(ACCT))
																																												v[19] /*_10*/,
																																												i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																													v[4] /*ACCT*/,
																																												),
																																												config, -1)
																																											if i.evalErr != nil {
																																												return m.NoResult, i.evalErr
																																											}
																																											v[60] = v[59]
																																											if v[60] == m.InternedBottom {
																																												return i.stepLookups(c, config, 68) // reapply
																																											}
																																											if v[60]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																												v[61 /*DotVar3*/] = v[60] // DotVar3
																																												// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),`_andBool_`(#token("true","Bool"),isMap(_117))),`_andBool_`(`_andBool_`(`_==Int_`(_16,#token("0","Int")),`_==Int_`(_14,#token("0","Int"))),`_==Int_`(_15,#token("0","Int"))))
																																												v[62], i.evalErr = i.evalIsMap( // isMap(_117)
																																													v[53 /*_117*/],
																																													config, -1)
																																												if i.evalErr != nil {
																																													return m.NoResult, i.evalErr
																																												}
																																												// `_andBool_`(`_andBool_`(#token("true","Bool"),`_andBool_`(#token("true","Bool"),isMap(_117))),`_andBool_`(`_andBool_`(`_==Int_`(_16,#token("0","Int")),`_==Int_`(_14,#token("0","Int"))),`_==Int_`(_15,#token("0","Int"))))
																																												bv[0] = /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[62])
																																												if bv[0] {
																																													v[63], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_16,#token("0","Int"))
																																														v[56 /*_16*/],
																																														/* rhs KToken */ m.IntZero,
																																														config, -1)
																																													if i.evalErr != nil {
																																														return m.NoResult, i.evalErr
																																													}
																																													// `_andBool_`(`_==Int_`(_16,#token("0","Int")),`_==Int_`(_14,#token("0","Int")))
																																													bv[2] = m.IsTrue(v[63])
																																													if bv[2] {
																																														v[64], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_14,#token("0","Int"))
																																															v[34 /*_14*/],
																																															/* rhs KToken */ m.IntZero,
																																															config, -1)
																																														if i.evalErr != nil {
																																															return m.NoResult, i.evalErr
																																														}
																																														bv[2] = m.IsTrue(v[64])
																																													}
																																													// `_andBool_`(`_andBool_`(`_==Int_`(_16,#token("0","Int")),`_==Int_`(_14,#token("0","Int"))),`_==Int_`(_15,#token("0","Int")))
																																													bv[1] = bv[2]
																																													if bv[1] {
																																														v[65], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_15,#token("0","Int"))
																																															v[42 /*_15*/],
																																															/* rhs KToken */ m.IntZero,
																																															config, -1)
																																														if i.evalErr != nil {
																																															return m.NoResult, i.evalErr
																																														}
																																														bv[1] = m.IsTrue(v[65])
																																													}
																																													bv[0] = bv[1]
																																												}
																																												if bv[0] {
																																													// RHS
																																													return i.stepRHS626(v, bv, config)
																																												}
																																											} else {
																																												return i.stepLookups(c, config, 68) // reapply
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														} else {
															return i.stepLookups(c, config, 68) // reapply
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 594
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashaccountEmpty1 { // #accountEmpty(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _8 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _9 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _10 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _11 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _12 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _13 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
											v[17] = i.Model.KApplyArg(v[16], 0)
											// KVariable _4 = v[17]
											v[18] = i.Model.KApplyArg(v[16], 1)
											if v[18]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
												v[19] = i.Model.KApplyArg(v[18], 0)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 2)
												// KVariable _5 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 3)
												// KVariable _6 = v[21]
												v[22] = i.Model.KApplyArg(v[16], 4)
												// KVariable _7 = v[22]
												// rule #594
												// source: iele-gas.k @791
												// {| rule `<generatedTop>`(`<k>`(``#accountEmpty(ACCT)=>`notBool_`(EXISTS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(EXISTS)),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isBool(EXISTS))) ensures #token("true","Bool") [UNIQUE_ID(1b409742250989f80b07ac43713e37f48f9282277c7e019a31415cbabe34d8ad) contentStartColumn(10) contentStartLine(791) org.kframework.attributes.Location(Location(791,10,796,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
												if !matched {
													// LOOKUPS
													if guard < 69 {
														// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(EXISTS)),`Map:lookup`(_14,`<acctID>`(ACCT)))
														v[23], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
															v[19] /*_14*/,
															i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																v[4] /*ACCT*/,
															),
															config, -1)
														if i.evalErr != nil {
															return m.NoResult, i.evalErr
														}
														v[24] = v[23]
														if v[24] == m.InternedBottom {
															return i.stepLookups(c, config, 69) // reapply
														}
														if v[24]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,`<exists>`(EXISTS))
															v[25] = i.Model.KApplyArg(v[24], 0)
															if v[25]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if i.Model.Equals(v[26], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																	v[27] = i.Model.KApplyArg(v[24], 1)
																	v[28 /*_0*/] = v[27] // lhs KVariable _0
																	v[29] = i.Model.KApplyArg(v[24], 2)
																	v[30 /*_1*/] = v[29] // lhs KVariable _1
																	v[31] = i.Model.KApplyArg(v[24], 3)
																	v[32 /*_2*/] = v[31] // lhs KVariable _2
																	v[33] = i.Model.KApplyArg(v[24], 4)
																	v[34 /*_3*/] = v[33] // lhs KVariable _3
																	v[35] = i.Model.KApplyArg(v[24], 5)
																	if v[35]&kapplyMatchMask == kapplyMatchLblXltexistsXgt1 { // `<exists>`(EXISTS)
																		v[36] = i.Model.KApplyArg(v[35], 0)
																		if v[36]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
																			v[37 /*EXISTS*/] = v[36] // EXISTS
																			// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																			v[38], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																				v[19] /*_14*/,
																				i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																					v[4] /*ACCT*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[39] = v[38]
																			if v[39] == m.InternedBottom {
																				return i.stepLookups(c, config, 69) // reapply
																			}
																			if v[39]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																				v[40 /*DotVar3*/] = v[39] // DotVar3
																				// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(#token("true","Bool"),isBool(EXISTS)))
																				v[41], i.evalErr = i.evalIsBool( // isBool(EXISTS)
																					v[37 /*EXISTS*/],
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				if /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isInt(ACCT) */ /* && */ m.IsTrue(v[41]) {
																					// RHS
																					return i.stepRHS594(v, bv, config)
																				}
																			} else {
																				return i.stepLookups(c, config, 69) // reapply
																			}
																		}
																	}
																}
															}
														} else {
															return i.stepLookups(c, config, 69) // reapply
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 597
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryExpand2 { // #memoryExpand(INDEX,NEWSIZE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable INDEX = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable NEWSIZE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _26 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _27 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _12 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _13 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[21], 6)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[21], 7)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[21], 8)
													if v[30]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_32)
														v[31] = i.Model.KApplyArg(v[30], 0)
														// KVariable _32 = v[31]
														v[32] = i.Model.KApplyArg(v[21], 9)
														if v[32]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
															v[33] = i.Model.KApplyArg(v[32], 0)
															if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable PEAK = v[33]
																v[34] = i.Model.KApplyArg(v[21], 10)
																if v[34]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																	v[35] = i.Model.KApplyArg(v[34], 0)
																	if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable CURR = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[16], 5)
																		// KVariable _16 = v[40]
																		v[41] = i.Model.KApplyArg(v[16], 6)
																		// KVariable _17 = v[41]
																		v[42] = i.Model.KApplyArg(v[16], 7)
																		// KVariable _18 = v[42]
																		v[43] = i.Model.KApplyArg(v[16], 8)
																		// KVariable _19 = v[43]
																		v[44] = i.Model.KApplyArg(v[16], 9)
																		// KVariable _20 = v[44]
																		v[45] = i.Model.KApplyArg(v[16], 10)
																		// KVariable _21 = v[45]
																		v[46] = i.Model.KApplyArg(v[16], 11)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[16], 12)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[16], 13)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[16], 14)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(c, 8)
																		// KVariable _31 = v[50]
																		// rule #597
																		// source: iele-gas.k @372
																		// {| rule `<generatedTop>`(`<k>`(``#memoryExpand(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_+Int_`(CURR,`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM))))))),`<currentMemory>`(CURR=>`_+Int_`(CURR,`maxInt(_,_)_INT`(#token("0","Int"),`_-Int__INT`(NEWSIZE,bytesInWords(lengthBytes(LM)))))),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_32,INDEX)),#match(LM,`Map:lookup`(_32,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isBytes(LM)),isInt(NEWSIZE)),isInt(CURR))) ensures #token("true","Bool") [UNIQUE_ID(8209c358db4dd653145cba3facdbd71bd7c30939d471a570923d8649fefc124a) contentStartColumn(10) contentStartLine(372) org.kframework.attributes.Location(Location(372,10,375,124)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 70 {
																				// lookup:#match(DotVar4,`_[_<-undef]`(_32,INDEX))
																				v[51], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_32,INDEX)
																					v[31] /*_32*/,
																					v[4] /*INDEX*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[52] = v[51]
																				if v[52] == m.InternedBottom {
																					return i.stepLookups(c, config, 70) // reapply
																				}
																				if v[52]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																					v[53 /*DotVar4*/] = v[52] // DotVar4
																					// lookup:#match(LM,`Map:lookup`(_32,INDEX))
																					v[54], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_32,INDEX)
																						v[31] /*_32*/,
																						v[4] /*INDEX*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[55] = v[54]
																					if v[55] == m.InternedBottom {
																						return i.stepLookups(c, config, 70) // reapply
																					}
																					if v[55]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																						v[56 /*LM*/] = v[55] // LM
																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),#token("true","Bool")))
																						v[57], i.evalErr = i.evalIsBytes( // isBytes(LM)
																							v[56 /*LM*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isInt(PEAK) && isInt(INDEX) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isInt(NEWSIZE) */  /* && */ /* rhs precomputed isInt(CURR) */  {
																							// RHS
																							return i.stepRHS597(v, bv, config)
																						}
																					} else {
																						return i.stepLookups(c, config, 70) // reapply
																					}
																				} else {
																					return i.stepLookups(c, config, 70) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 598, 606
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashinitFun3 { // #initFun(LABEL,NARGS,ISCREATE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// KVariable LABEL = v[4]
					v[5] = i.Model.KApplyArg(v[2], 1)
					// rule: 598
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable NARGS = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if v[6]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
							// KVariable ISCREATE = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _29 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											if v[13]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
												v[14] = i.Model.KApplyArg(v[13], 0)
												// KVariable EXECMODE = v[14]
												v[15] = i.Model.KApplyArg(c, 4)
												// KVariable _30 = v[15]
												v[16] = i.Model.KApplyArg(c, 5)
												// KVariable _31 = v[16]
												v[17] = i.Model.KApplyArg(c, 6)
												// KVariable _32 = v[17]
												v[18] = i.Model.KApplyArg(c, 7)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_15,_16,_17,_18,`<callFrame>`(`<program>`(`<functions>`(_34),`<funcIds>`(_35),_2,`<exported>`(FUNCS),_3,_4),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,`<peakMemory>`(_409),`<currentMemory>`(_408),`<fid>`(_407),_12,_13,_14),_19,_20,_21,_22,_23,_24,_25,_26,_27,_28)
													v[19] = i.Model.KApplyArg(v[18], 0)
													// KVariable _15 = v[19]
													v[20] = i.Model.KApplyArg(v[18], 1)
													// KVariable _16 = v[20]
													v[21] = i.Model.KApplyArg(v[18], 2)
													// KVariable _17 = v[21]
													v[22] = i.Model.KApplyArg(v[18], 3)
													// KVariable _18 = v[22]
													v[23] = i.Model.KApplyArg(v[18], 4)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_34),`<funcIds>`(_35),_2,`<exported>`(FUNCS),_3,_4),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,`<peakMemory>`(_409),`<currentMemory>`(_408),`<fid>`(_407),_12,_13,_14)
														v[24] = i.Model.KApplyArg(v[23], 0)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_34),`<funcIds>`(_35),_2,`<exported>`(FUNCS),_3,_4)
															v[25] = i.Model.KApplyArg(v[24], 0)
															if v[25]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_34)
																v[26] = i.Model.KApplyArg(v[25], 0)
																// KVariable _34 = v[26]
																v[27] = i.Model.KApplyArg(v[24], 1)
																if v[27]&kapplyMatchMask == kapplyMatchLblXltfuncIDsXgt1 { // `<funcIds>`(_35)
																	v[28] = i.Model.KApplyArg(v[27], 0)
																	// KVariable _35 = v[28]
																	v[29] = i.Model.KApplyArg(v[24], 2)
																	// KVariable _2 = v[29]
																	v[30] = i.Model.KApplyArg(v[24], 3)
																	if v[30]&kapplyMatchMask == kapplyMatchLblXltexportedXgt1 { // `<exported>`(FUNCS)
																		v[31] = i.Model.KApplyArg(v[30], 0)
																		if v[31]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																			// KVariable FUNCS = v[31]
																			v[32] = i.Model.KApplyArg(v[24], 4)
																			// KVariable _3 = v[32]
																			v[33] = i.Model.KApplyArg(v[24], 5)
																			// KVariable _4 = v[33]
																			v[34] = i.Model.KApplyArg(v[23], 1)
																			// KVariable _5 = v[34]
																			v[35] = i.Model.KApplyArg(v[23], 2)
																			// KVariable _6 = v[35]
																			v[36] = i.Model.KApplyArg(v[23], 3)
																			if v[36]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																				v[37] = i.Model.KApplyArg(v[36], 0)
																				if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																					// KVariable ACCT = v[37]
																					v[38] = i.Model.KApplyArg(v[23], 4)
																					// KVariable _7 = v[38]
																					v[39] = i.Model.KApplyArg(v[23], 5)
																					// KVariable _8 = v[39]
																					v[40] = i.Model.KApplyArg(v[23], 6)
																					// KVariable _9 = v[40]
																					v[41] = i.Model.KApplyArg(v[23], 7)
																					// KVariable _10 = v[41]
																					v[42] = i.Model.KApplyArg(v[23], 8)
																					// KVariable _11 = v[42]
																					v[43] = i.Model.KApplyArg(v[23], 9)
																					if v[43]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(_409)
																						v[44] = i.Model.KApplyArg(v[43], 0)
																						if i.tempTypeVar = v[44] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																							// KVariable _409 = v[44]
																							v[45] = i.Model.KApplyArg(v[23], 10)
																							if v[45]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(_408)
																								v[46] = i.Model.KApplyArg(v[45], 0)
																								if i.tempTypeVar = v[46] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																									// KVariable _408 = v[46]
																									v[47] = i.Model.KApplyArg(v[23], 11)
																									if v[47]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(_407)
																										v[48] = i.Model.KApplyArg(v[47], 0)
																										// KVariable _407 = v[48]
																										v[49] = i.Model.KApplyArg(v[23], 12)
																										// KVariable _12 = v[49]
																										v[50] = i.Model.KApplyArg(v[23], 13)
																										// KVariable _13 = v[50]
																										v[51] = i.Model.KApplyArg(v[23], 14)
																										// KVariable _14 = v[51]
																										v[52] = i.Model.KApplyArg(v[18], 5)
																										// KVariable _19 = v[52]
																										v[53] = i.Model.KApplyArg(v[18], 6)
																										// KVariable _20 = v[53]
																										v[54] = i.Model.KApplyArg(v[18], 7)
																										// KVariable _21 = v[54]
																										v[55] = i.Model.KApplyArg(v[18], 8)
																										// KVariable _22 = v[55]
																										v[56] = i.Model.KApplyArg(v[18], 9)
																										// KVariable _23 = v[56]
																										v[57] = i.Model.KApplyArg(v[18], 10)
																										// KVariable _24 = v[57]
																										v[58] = i.Model.KApplyArg(v[18], 11)
																										// KVariable _25 = v[58]
																										v[59] = i.Model.KApplyArg(v[18], 12)
																										// KVariable _26 = v[59]
																										v[60] = i.Model.KApplyArg(v[18], 13)
																										// KVariable _27 = v[60]
																										v[61] = i.Model.KApplyArg(v[18], 14)
																										// KVariable _28 = v[61]
																										v[62] = i.Model.KApplyArg(c, 8)
																										// KVariable _33 = v[62]
																										// rule #598
																										// source: iele.k @1266
																										// {| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,NARGS,ISCREATE)=>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#end_IELE-INFRASTRUCTURE`(.KList),`#execute_IELE`(.KList))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_29,`<mode>`(EXECMODE),_30,_31,_32,`<iele>`(_15,_16,_17,_18,`<callFrame>`(`<program>`(`<functions>`(_34),`<funcIds>`(_35),_2,`<exported>`(FUNCS),_3,_4),_5,_6,`<id>`(ACCT),_7,_8,_9,_10,_11,`<peakMemory>`(_409=>REGISTERS),`<currentMemory>`(_408=>REGISTERS),`<fid>`(_407=>LABEL),_12,_13,_14),_19,_20,_21,_22,_23,_24,_25,_26,_27,_28),_33) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#setChoice(LABEL,_35),#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,`<nregs>`(REGISTERS)),`Map:lookup`(_34,`<funcId>`(LABEL)))),#match(DotVar5,`Set:difference`(_35,`SetItem`(LABEL)))),#match(DotVar6,`_[_<-undef]`(_34,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),isInt(_408)),isIeleName(LABEL)),isSet(FUNCS)),isInt(_409)),isInt(ACCT)),isMode(EXECMODE)),isBool(ISCREATE)),isInt(REGISTERS)),isInt(NARGS)),isInt(NPARAMS)),`_andBool_`(`_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE),`_==Int_`(NPARAMS,NARGS)))) ensures #token("true","Bool") [UNIQUE_ID(47f06131b02146e8ef479d8aea55e7e4cf767c6158dbbdddf8237bb1e22e4be5) contentStartColumn(10) contentStartLine(1266) org.kframework.attributes.Location(Location(1266,10,1277,78)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																										if !matched {
																											// LOOKUPS
																											if guard < 71 {
																												// lookup:#setChoice(LABEL,_35)
																												setChoice0Eval := v[28] /*_35*/
																												setChoice0Obj, setChoice0TypeOk := i.Model.GetSetObject(setChoice0Eval)
																												if !setChoice0TypeOk {
																													return i.stepLookups(c, config, 71) // reapply
																												}
																												var setChoice0Result m.KReference = m.InternedBottom
																												for setChoice0Key := range setChoice0Obj.Data {
																													var setChoice0Err error
																													setChoice0Elem, setChoice0Err := i.Model.ToKItem(setChoice0Key)
																													if setChoice0Err != nil {
																														return m.NoResult, setChoice0Err
																													}
																													if i.Model.Equals(setChoice0Elem, v[4] /*LABEL*/) { // lhs KVariable, which reappears:LABEL
																														setChoice0Result, setChoice0Err = func() (m.KReference, error) {
																															// lookup:#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,`<nregs>`(REGISTERS)),`Map:lookup`(_34,`<funcId>`(LABEL)))
																															v[63], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_34,`<funcId>`(LABEL))
																																v[26] /*_34*/,
																																i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																																	v[4] /*LABEL*/,
																																),
																																config, -1)
																															if i.evalErr != nil {
																																return m.NoResult, i.evalErr
																															}
																															v[64] = v[63]
																															if v[64] == m.InternedBottom {
																																return i.stepLookups(c, config, 71) // reapply
																															}
																															if v[64]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,`<nregs>`(REGISTERS))
																																v[65] = i.Model.KApplyArg(v[64], 0)
																																if v[65]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(LABEL)
																																	v[66] = i.Model.KApplyArg(v[65], 0)
																																	if i.Model.Equals(v[66], v[4] /*LABEL*/) { // lhs KVariable, which reappears:LABEL
																																		v[67] = i.Model.KApplyArg(v[64], 1)
																																		if v[67]&kapplyMatchMask == kapplyMatchLblXltnparamsXgt1 { // `<nparams>`(NPARAMS)
																																			v[68] = i.Model.KApplyArg(v[67], 0)
																																			if i.tempTypeVar = v[68] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																				v[69 /*NPARAMS*/] = v[68] // NPARAMS
																																				v[70] = i.Model.KApplyArg(v[64], 2)
																																				v[71 /*_0*/] = v[70] // lhs KVariable _0
																																				v[72] = i.Model.KApplyArg(v[64], 3)
																																				v[73 /*_1*/] = v[72] // lhs KVariable _1
																																				v[74] = i.Model.KApplyArg(v[64], 4)
																																				if v[74]&kapplyMatchMask == kapplyMatchLblXltnregsXgt1 { // `<nregs>`(REGISTERS)
																																					v[75] = i.Model.KApplyArg(v[74], 0)
																																					if i.tempTypeVar = v[75] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																						v[76 /*REGISTERS*/] = v[75] // REGISTERS
																																						// lookup:#match(DotVar5,`Set:difference`(_35,`SetItem`(LABEL)))
																																						v[78], i.evalErr = i.evalSetItem( // `SetItem`(LABEL)
																																							v[4] /*LABEL*/,
																																							config, -1)
																																						if i.evalErr != nil {
																																							return m.NoResult, i.evalErr
																																						}
																																						v[77], i.evalErr = i.evalSetXcolondifference( // `Set:difference`(_35,`SetItem`(LABEL))
																																							v[28] /*_35*/,
																																							v[78],
																																							config, -1)
																																						if i.evalErr != nil {
																																							return m.NoResult, i.evalErr
																																						}
																																						v[79] = v[77]
																																						if v[79] == m.InternedBottom {
																																							return i.stepLookups(c, config, 71) // reapply
																																						}
																																						if v[79]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																																							v[80 /*DotVar5*/] = v[79] // DotVar5
																																							// lookup:#match(DotVar6,`_[_<-undef]`(_34,`<funcId>`(LABEL)))
																																							v[81], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_34,`<funcId>`(LABEL))
																																								v[26] /*_34*/,
																																								i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																																									v[4] /*LABEL*/,
																																								),
																																								config, -1)
																																							if i.evalErr != nil {
																																								return m.NoResult, i.evalErr
																																							}
																																							v[82] = v[81]
																																							if v[82] == m.InternedBottom {
																																								return i.stepLookups(c, config, 71) // reapply
																																							}
																																							if v[82]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																																								v[83 /*DotVar6*/] = v[82] // DotVar6
																																								// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isMode(EXECMODE)),#token("true","Bool")),isInt(REGISTERS)),#token("true","Bool")),isInt(NPARAMS)),`_andBool_`(`_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE),`_==Int_`(NPARAMS,NARGS))))
																																								v[84], i.evalErr = i.evalIsIeleName( // isIeleName(_407)
																																									v[48] /*_407*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								// `_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL))
																																								bv[4] = m.IsTrue(v[84]) /* && */ /* rhs precomputed isInt(_408) */ 
																																								if bv[4] {
																																									v[85], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																																										v[4] /*LABEL*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[4] = m.IsTrue(v[85])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isMode(EXECMODE))
																																								bv[3] = bv[4] /* && */ /* rhs precomputed isSet(FUNCS) */  /* && */ /* rhs precomputed isInt(_409) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																																								if bv[3] {
																																									v[86], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																																										v[14] /*EXECMODE*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[3] = m.IsTrue(v[86])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isMode(EXECMODE)),#token("true","Bool")),isInt(REGISTERS))
																																								bv[2] = bv[3] /* && */ /* rhs precomputed isBool(ISCREATE) */ 
																																								if bv[2] {
																																									v[87], i.evalErr = i.evalIsInt( // isInt(REGISTERS)
																																										v[76 /*REGISTERS*/],
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[2] = m.IsTrue(v[87])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isMode(EXECMODE)),#token("true","Bool")),isInt(REGISTERS)),#token("true","Bool")),isInt(NPARAMS))
																																								bv[1] = bv[2] /* && */ /* rhs precomputed isInt(NARGS) */ 
																																								if bv[1] {
																																									v[88], i.evalErr = i.evalIsInt( // isInt(NPARAMS)
																																										v[69 /*NPARAMS*/],
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[1] = m.IsTrue(v[88])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isIeleName(_407),#token("true","Bool")),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),isMode(EXECMODE)),#token("true","Bool")),isInt(REGISTERS)),#token("true","Bool")),isInt(NPARAMS)),`_andBool_`(`_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE),`_==Int_`(NPARAMS,NARGS)))
																																								bv[0] = bv[1]
																																								if bv[0] {
																																									v[89], i.evalErr = i.evalSetXcolonin( // `Set:in`(LABEL,FUNCS)
																																										v[4] /*LABEL*/,
																																										v[31] /*FUNCS*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									// `_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE)
																																									bv[6] = m.IsTrue(v[89])
																																									if !bv[6] {
																																										bv[6] = m.IsTrue(v[6] /*ISCREATE*/)
																																									}
																																									// `_andBool_`(`_orBool__BOOL`(`Set:in`(LABEL,FUNCS),ISCREATE),`_==Int_`(NPARAMS,NARGS))
																																									bv[5] = bv[6]
																																									if bv[5] {
																																										v[90], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(NPARAMS,NARGS)
																																											v[69 /*NPARAMS*/],
																																											v[5] /*NARGS*/,
																																											config, -1)
																																										if i.evalErr != nil {
																																											return m.NoResult, i.evalErr
																																										}
																																										bv[5] = m.IsTrue(v[90])
																																									}
																																									bv[0] = bv[5]
																																								}
																																								if /* rhs precomputed lookup #setChoice && lookup #match && lookup #match && lookup #match */ /* && */ bv[0] {
																																									// RHS
																																									return i.stepRHS598(v, bv, config)
																																								}
																																							} else {
																																								return i.stepLookups(c, config, 71) // reapply
																																							}
																																						} else {
																																							return i.stepLookups(c, config, 71) // reapply
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															} else {
																																return i.stepLookups(c, config, 71) // reapply
																															}

																															return m.InternedBottom, nil // #setChoice end
																														}()
																														if setChoice0Err != nil {
																															return m.NoResult, setChoice0Err
																														}

																													}
																												}
																												if setChoice0Result == m.InternedBottom {
																													return i.stepLookups(c, config, 71) // reapply
																												}
																												return setChoice0Result, nil

																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 606
					if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable NARGS = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						if v[6]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
							// KVariable _379 = v[6]
							// KVariable DotVar1 = v[3]
							v[7] = i.Model.KApplyArg(c, 1)
							if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[8] = i.Model.KApplyArg(v[7], 0)
								if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[11] = i.Model.KApplyArg(v[9], 0)
										if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[10]
											v[12] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[12]
											v[13] = i.Model.KApplyArg(c, 3)
											// KVariable _36 = v[13]
											v[14] = i.Model.KApplyArg(c, 4)
											// KVariable _37 = v[14]
											v[15] = i.Model.KApplyArg(c, 5)
											// KVariable _38 = v[15]
											v[16] = i.Model.KApplyArg(c, 6)
											// KVariable _39 = v[16]
											v[17] = i.Model.KApplyArg(c, 7)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,`<id>`(ACCT),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _21 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												// KVariable _22 = v[19]
												v[20] = i.Model.KApplyArg(v[17], 2)
												// KVariable _23 = v[20]
												v[21] = i.Model.KApplyArg(v[17], 3)
												// KVariable _24 = v[21]
												v[22] = i.Model.KApplyArg(v[17], 4)
												if v[22]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,`<id>`(ACCT),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20)
													v[23] = i.Model.KApplyArg(v[22], 0)
													if v[23]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_41),_3,_4,_5,_6,_7)
														v[24] = i.Model.KApplyArg(v[23], 0)
														if v[24]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_41)
															v[25] = i.Model.KApplyArg(v[24], 0)
															// KVariable _41 = v[25]
															v[26] = i.Model.KApplyArg(v[23], 1)
															// KVariable _3 = v[26]
															v[27] = i.Model.KApplyArg(v[23], 2)
															// KVariable _4 = v[27]
															v[28] = i.Model.KApplyArg(v[23], 3)
															// KVariable _5 = v[28]
															v[29] = i.Model.KApplyArg(v[23], 4)
															// KVariable _6 = v[29]
															v[30] = i.Model.KApplyArg(v[23], 5)
															// KVariable _7 = v[30]
															v[31] = i.Model.KApplyArg(v[22], 1)
															// KVariable _8 = v[31]
															v[32] = i.Model.KApplyArg(v[22], 2)
															// KVariable _9 = v[32]
															v[33] = i.Model.KApplyArg(v[22], 3)
															if v[33]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																v[34] = i.Model.KApplyArg(v[33], 0)
																if i.tempTypeVar = v[34] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable ACCT = v[34]
																	v[35] = i.Model.KApplyArg(v[22], 4)
																	// KVariable _10 = v[35]
																	v[36] = i.Model.KApplyArg(v[22], 5)
																	// KVariable _11 = v[36]
																	v[37] = i.Model.KApplyArg(v[22], 6)
																	// KVariable _12 = v[37]
																	v[38] = i.Model.KApplyArg(v[22], 7)
																	// KVariable _13 = v[38]
																	v[39] = i.Model.KApplyArg(v[22], 8)
																	// KVariable _14 = v[39]
																	v[40] = i.Model.KApplyArg(v[22], 9)
																	// KVariable _15 = v[40]
																	v[41] = i.Model.KApplyArg(v[22], 10)
																	// KVariable _16 = v[41]
																	v[42] = i.Model.KApplyArg(v[22], 11)
																	// KVariable _17 = v[42]
																	v[43] = i.Model.KApplyArg(v[22], 12)
																	// KVariable _18 = v[43]
																	v[44] = i.Model.KApplyArg(v[22], 13)
																	// KVariable _19 = v[44]
																	v[45] = i.Model.KApplyArg(v[22], 14)
																	// KVariable _20 = v[45]
																	v[46] = i.Model.KApplyArg(v[17], 5)
																	// KVariable _25 = v[46]
																	v[47] = i.Model.KApplyArg(v[17], 6)
																	// KVariable _26 = v[47]
																	v[48] = i.Model.KApplyArg(v[17], 7)
																	// KVariable _27 = v[48]
																	v[49] = i.Model.KApplyArg(v[17], 8)
																	// KVariable _28 = v[49]
																	v[50] = i.Model.KApplyArg(v[17], 9)
																	// KVariable _29 = v[50]
																	v[51] = i.Model.KApplyArg(v[17], 10)
																	// KVariable _30 = v[51]
																	v[52] = i.Model.KApplyArg(v[17], 11)
																	// KVariable _31 = v[52]
																	v[53] = i.Model.KApplyArg(v[17], 12)
																	// KVariable _32 = v[53]
																	v[54] = i.Model.KApplyArg(v[17], 13)
																	// KVariable _33 = v[54]
																	v[55] = i.Model.KApplyArg(v[17], 14)
																	// KVariable _34 = v[55]
																	v[56] = i.Model.KApplyArg(c, 8)
																	// KVariable _40 = v[56]
																	// rule #606
																	// source: iele.k @1260
																	// {| rule `<generatedTop>`(`<k>`(``#initFun(LABEL,NARGS,_379)=>`#exception__IELE-INFRASTRUCTURE`(#token("2","Int"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,`<id>`(ACCT),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(LABEL)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isBool(_379),isIeleName(LABEL)),isInt(ACCT)),isInt(NARGS)),isInt(NPARAMS)),`_=/=Int__INT`(NARGS,NPARAMS))) ensures #token("true","Bool") [UNIQUE_ID(84fd1058a4f5f683027b8a2baae1b7c981a0201a52c0ef931e97c8bf0e014491) contentStartColumn(10) contentStartLine(1260) org.kframework.attributes.Location(Location(1260,10,1264,36)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																	if !matched {
																		// LOOKUPS
																		if guard < 72 {
																			// lookup:#match(`<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2),`Map:lookup`(_41,`<funcId>`(LABEL)))
																			v[57], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<funcId>`(LABEL))
																				v[25] /*_41*/,
																				i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																					v[4] /*LABEL*/,
																				),
																				config, -1)
																			if i.evalErr != nil {
																				return m.NoResult, i.evalErr
																			}
																			v[58] = v[57]
																			if v[58] == m.InternedBottom {
																				return i.stepLookups(c, config, 72) // reapply
																			}
																			if v[58]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(LABEL),`<nparams>`(NPARAMS),_0,_1,_2)
																				v[59] = i.Model.KApplyArg(v[58], 0)
																				if v[59]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(LABEL)
																					v[60] = i.Model.KApplyArg(v[59], 0)
																					if i.Model.Equals(v[60], v[4] /*LABEL*/) { // lhs KVariable, which reappears:LABEL
																						v[61] = i.Model.KApplyArg(v[58], 1)
																						if v[61]&kapplyMatchMask == kapplyMatchLblXltnparamsXgt1 { // `<nparams>`(NPARAMS)
																							v[62] = i.Model.KApplyArg(v[61], 0)
																							if i.tempTypeVar = v[62] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								v[63 /*NPARAMS*/] = v[62] // NPARAMS
																								v[64] = i.Model.KApplyArg(v[58], 2)
																								v[65 /*_0*/] = v[64] // lhs KVariable _0
																								v[66] = i.Model.KApplyArg(v[58], 3)
																								v[67 /*_1*/] = v[66] // lhs KVariable _1
																								v[68] = i.Model.KApplyArg(v[58], 4)
																								v[69 /*_2*/] = v[68] // lhs KVariable _2
																								// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(LABEL)))
																								v[70], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<funcId>`(LABEL))
																									v[25] /*_41*/,
																									i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																										v[4] /*LABEL*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[71] = v[70]
																								if v[71] == m.InternedBottom {
																									return i.stepLookups(c, config, 72) // reapply
																								}
																								if v[71]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																									v[72 /*DotVar5*/] = v[71] // DotVar5
																									// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),isInt(NPARAMS)),`_=/=Int__INT`(NARGS,NPARAMS)))
																									v[73], i.evalErr = i.evalIsIeleName( // isIeleName(LABEL)
																										v[4] /*LABEL*/,
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),isInt(NPARAMS))
																									bv[1] = /* rhs precomputed isBool(_379) */ /* && */ m.IsTrue(v[73]) /* && */ /* rhs precomputed isInt(ACCT) */  /* && */ /* rhs precomputed isInt(NARGS) */ 
																									if bv[1] {
																										v[74], i.evalErr = i.evalIsInt( // isInt(NPARAMS)
																											v[63 /*NPARAMS*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[1] = m.IsTrue(v[74])
																									}
																									// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isIeleName(LABEL)),#token("true","Bool")),#token("true","Bool")),isInt(NPARAMS)),`_=/=Int__INT`(NARGS,NPARAMS))
																									bv[0] = bv[1]
																									if bv[0] {
																										v[75], i.evalErr = i.evalXuXeqXslashXeqIntXuXuINT( // `_=/=Int__INT`(NARGS,NPARAMS)
																											v[5] /*NARGS*/,
																											v[63 /*NPARAMS*/],
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										bv[0] = m.IsTrue(v[75])
																									}
																									if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																										// RHS
																										return i.stepRHS606(v, bv, config)
																									}
																								} else {
																									return i.stepLookups(c, config, 72) // reapply
																								}
																							}
																						}
																					}
																				}
																			} else {
																				return i.stepLookups(c, config, 72) // reapply
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 603
				if v[2]&kapplyMatchMask == kapplyMatchLblRunVM14 { // runVM(#token("true","Bool"),_726,ACCTFROM,CODESTR,ARGS,VALUE,GPRICE,GAVAIL,CB,DIFF,NUMB,GLIMIT,TS,_727)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.Model.Equals(v[4], m.BoolTrue) { // #token("true","Bool")
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable _726 = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							if i.tempTypeVar = v[6] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable ACCTFROM = v[6]
								v[7] = i.Model.KApplyArg(v[2], 3)
								if v[7]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
									// KVariable CODESTR = v[7]
									v[8] = i.Model.KApplyArg(v[2], 4)
									if v[8]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
										// KVariable ARGS = v[8]
										v[9] = i.Model.KApplyArg(v[2], 5)
										if i.tempTypeVar = v[9] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
											// KVariable VALUE = v[9]
											v[10] = i.Model.KApplyArg(v[2], 6)
											if i.tempTypeVar = v[10] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
												// KVariable GPRICE = v[10]
												v[11] = i.Model.KApplyArg(v[2], 7)
												if i.tempTypeVar = v[11] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
													// KVariable GAVAIL = v[11]
													v[12] = i.Model.KApplyArg(v[2], 8)
													if i.tempTypeVar = v[12] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
														// KVariable CB = v[12]
														v[13] = i.Model.KApplyArg(v[2], 9)
														if i.tempTypeVar = v[13] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
															// KVariable DIFF = v[13]
															v[14] = i.Model.KApplyArg(v[2], 10)
															if i.tempTypeVar = v[14] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable NUMB = v[14]
																v[15] = i.Model.KApplyArg(v[2], 11)
																if i.tempTypeVar = v[15] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable GLIMIT = v[15]
																	v[16] = i.Model.KApplyArg(v[2], 12)
																	if i.tempTypeVar = v[16] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable TS = v[16]
																		v[17] = i.Model.KApplyArg(v[2], 13)
																		if v[17]>>refTypeShift == uint64(stringRef) { // lhs KVariable with hook:STRING.String
																			// KVariable _727 = v[17]
																			// KVariable DotVar1 = v[3]
																			v[18] = i.Model.KApplyArg(c, 1)
																			if v[18]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
																				v[19] = i.Model.KApplyArg(v[18], 0)
																				if v[19]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
																					_, v[20], v[21] = i.Model.KSequenceSplitHeadTail(v[19]) // #applyRule(#token("regular","#RuleTag")) ~> ...
																					if v[20]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
																						v[22] = i.Model.KApplyArg(v[20], 0)
																						if i.Model.Equals(v[22], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
																							// KVariable SREST = v[21]
																							v[23] = i.Model.KApplyArg(c, 2)
																							// KVariable _28 = v[23]
																							v[24] = i.Model.KApplyArg(c, 3)
																							// KVariable _29 = v[24]
																							v[25] = i.Model.KApplyArg(c, 4)
																							if v[25]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
																								v[26] = i.Model.KApplyArg(v[25], 0)
																								// KVariable SCHED = v[26]
																								v[27] = i.Model.KApplyArg(c, 5)
																								// KVariable _30 = v[27]
																								v[28] = i.Model.KApplyArg(c, 6)
																								// KVariable _31 = v[28]
																								v[29] = i.Model.KApplyArg(c, 7)
																								if v[29]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(_730),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,`<gasPrice>`(_728),`<origin>`(_729),`<beneficiary>`(_731),`<difficulty>`(_732),`<number>`(_733),`<gasLimit>`(_734),_19,`<timestamp>`(_735),_20)
																									v[30] = i.Model.KApplyArg(v[29], 0)
																									// KVariable _14 = v[30]
																									v[31] = i.Model.KApplyArg(v[29], 1)
																									// KVariable _15 = v[31]
																									v[32] = i.Model.KApplyArg(v[29], 2)
																									// KVariable _16 = v[32]
																									v[33] = i.Model.KApplyArg(v[29], 3)
																									// KVariable _17 = v[33]
																									v[34] = i.Model.KApplyArg(v[29], 4)
																									if v[34]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,`<callDepth>`(_730),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
																										v[35] = i.Model.KApplyArg(v[34], 0)
																										// KVariable _0 = v[35]
																										v[36] = i.Model.KApplyArg(v[34], 1)
																										if v[36]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(_730)
																											v[37] = i.Model.KApplyArg(v[36], 0)
																											if i.tempTypeVar = v[37] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												// KVariable _730 = v[37]
																												v[38] = i.Model.KApplyArg(v[34], 2)
																												// KVariable _1 = v[38]
																												v[39] = i.Model.KApplyArg(v[34], 3)
																												// KVariable _2 = v[39]
																												v[40] = i.Model.KApplyArg(v[34], 4)
																												// KVariable _3 = v[40]
																												v[41] = i.Model.KApplyArg(v[34], 5)
																												// KVariable _4 = v[41]
																												v[42] = i.Model.KApplyArg(v[34], 6)
																												// KVariable _5 = v[42]
																												v[43] = i.Model.KApplyArg(v[34], 7)
																												// KVariable _6 = v[43]
																												v[44] = i.Model.KApplyArg(v[34], 8)
																												// KVariable _7 = v[44]
																												v[45] = i.Model.KApplyArg(v[34], 9)
																												// KVariable _8 = v[45]
																												v[46] = i.Model.KApplyArg(v[34], 10)
																												// KVariable _9 = v[46]
																												v[47] = i.Model.KApplyArg(v[34], 11)
																												// KVariable _10 = v[47]
																												v[48] = i.Model.KApplyArg(v[34], 12)
																												// KVariable _11 = v[48]
																												v[49] = i.Model.KApplyArg(v[34], 13)
																												// KVariable _12 = v[49]
																												v[50] = i.Model.KApplyArg(v[34], 14)
																												// KVariable _13 = v[50]
																												v[51] = i.Model.KApplyArg(v[29], 5)
																												// KVariable _18 = v[51]
																												v[52] = i.Model.KApplyArg(v[29], 6)
																												if v[52]&kapplyMatchMask == kapplyMatchLblXltgasPriceXgt1 { // `<gasPrice>`(_728)
																													v[53] = i.Model.KApplyArg(v[52], 0)
																													if i.tempTypeVar = v[53] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																														// KVariable _728 = v[53]
																														v[54] = i.Model.KApplyArg(v[29], 7)
																														if v[54]&kapplyMatchMask == kapplyMatchLblXltoriginXgt1 { // `<origin>`(_729)
																															v[55] = i.Model.KApplyArg(v[54], 0)
																															if i.tempTypeVar = v[55] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																// KVariable _729 = v[55]
																																v[56] = i.Model.KApplyArg(v[29], 8)
																																if v[56]&kapplyMatchMask == kapplyMatchLblXltbeneficiaryXgt1 { // `<beneficiary>`(_731)
																																	v[57] = i.Model.KApplyArg(v[56], 0)
																																	if i.tempTypeVar = v[57] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																		// KVariable _731 = v[57]
																																		v[58] = i.Model.KApplyArg(v[29], 9)
																																		if v[58]&kapplyMatchMask == kapplyMatchLblXltdifficultyXgt1 { // `<difficulty>`(_732)
																																			v[59] = i.Model.KApplyArg(v[58], 0)
																																			if i.tempTypeVar = v[59] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																				// KVariable _732 = v[59]
																																				v[60] = i.Model.KApplyArg(v[29], 10)
																																				if v[60]&kapplyMatchMask == kapplyMatchLblXltnumberXgt1 { // `<number>`(_733)
																																					v[61] = i.Model.KApplyArg(v[60], 0)
																																					if i.tempTypeVar = v[61] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																						// KVariable _733 = v[61]
																																						v[62] = i.Model.KApplyArg(v[29], 11)
																																						if v[62]&kapplyMatchMask == kapplyMatchLblXltgasLimitXgt1 { // `<gasLimit>`(_734)
																																							v[63] = i.Model.KApplyArg(v[62], 0)
																																							if i.tempTypeVar = v[63] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																								// KVariable _734 = v[63]
																																								v[64] = i.Model.KApplyArg(v[29], 12)
																																								// KVariable _19 = v[64]
																																								v[65] = i.Model.KApplyArg(v[29], 13)
																																								if v[65]&kapplyMatchMask == kapplyMatchLblXlttimestampXgt1 { // `<timestamp>`(_735)
																																									v[66] = i.Model.KApplyArg(v[65], 0)
																																									if i.tempTypeVar = v[66] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																										// KVariable _735 = v[66]
																																										v[67] = i.Model.KApplyArg(v[29], 14)
																																										// KVariable _20 = v[67]
																																										v[68] = i.Model.KApplyArg(c, 8)
																																										if v[68]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(_32),_25,_26,_27)
																																											v[69] = i.Model.KApplyArg(v[68], 0)
																																											if v[69]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(ACCTS)
																																												v[70] = i.Model.KApplyArg(v[69], 0)
																																												if v[70]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																																													// KVariable ACCTS = v[70]
																																													v[71] = i.Model.KApplyArg(v[68], 1)
																																													if v[71]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_32)
																																														v[72] = i.Model.KApplyArg(v[71], 0)
																																														// KVariable _32 = v[72]
																																														v[73] = i.Model.KApplyArg(v[68], 2)
																																														// KVariable _25 = v[73]
																																														v[74] = i.Model.KApplyArg(v[68], 3)
																																														// KVariable _26 = v[74]
																																														v[75] = i.Model.KApplyArg(v[68], 4)
																																														// KVariable _27 = v[75]
																																														// rule #603
																																														// source: iele-node.k @61
																																														// {| rule `<generatedTop>`(`<k>`(``runVM(#token("true","Bool"),_726,ACCTFROM,CODESTR,ARGS,VALUE,GPRICE,GAVAIL,CB,DIFF,NUMB,GLIMIT,TS,_727)=>`#lambda__3`(#parseByteStackRaw(CODESTR),ACCTFROM,ACCTFROM,NONCE,GAVAIL,SCHED,VALUE,ARGS,ACCTFROM,NONCE)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_28,_29,`<schedule>`(SCHED),_30,_31,`<iele>`(_14,_15,_16,_17,`<callFrame>`(_0,`<callDepth>`(_730=>#token("-1","Int")),_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),_18,`<gasPrice>`(_728=>GPRICE),`<origin>`(_729=>ACCTFROM),`<beneficiary>`(_731=>CB),`<difficulty>`(_732=>DIFF),`<number>`(_733=>NUMB),`<gasLimit>`(_734=>GLIMIT),_19,`<timestamp>`(_735=>TS),_20),`<network>`(`<activeAccounts>`(ACCTS),`<accounts>`(_32),_25,_26,_27)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTFROM),_21,_22,_23,`<nonce>`(NONCE),_24),`Map:lookup`(_32,`<acctID>`(ACCTFROM))),#match(DotVar5,`_[_<-undef]`(_32,`<acctID>`(ACCTFROM)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_728),isInt(DIFF)),isInt(GPRICE)),isInt(_731)),isInt(_732)),isInt(_729)),isInt(_735)),isInt(VALUE)),isString(CODESTR)),isSet(ACCTS)),isInt(_726)),isList(ARGS)),isString(_727)),isInt(CB)),isInt(_730)),isInt(_733)),isSchedule(SCHED)),isInt(NUMB)),isInt(NONCE)),isInt(ACCTFROM)),isInt(_734)),isInt(GAVAIL)),isInt(TS)),isInt(GLIMIT)),`Set:in`(ACCTFROM,ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(29646e050dbc7f89c7c6facb37b4458a7923d73db148340052b19cba41d7df78) contentStartColumn(10) contentStartLine(61) org.kframework.attributes.Location(Location(61,10,84,33)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
																																														if !matched {
																																															// LOOKUPS
																																															if guard < 73 {
																																																// lookup:#match(`<account>`(`<acctID>`(ACCTFROM),_21,_22,_23,`<nonce>`(NONCE),_24),`Map:lookup`(_32,`<acctID>`(ACCTFROM)))
																																																v[76], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_32,`<acctID>`(ACCTFROM))
																																																	v[72] /*_32*/,
																																																	i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																																		v[6] /*ACCTFROM*/,
																																																	),
																																																	config, -1)
																																																if i.evalErr != nil {
																																																	return m.NoResult, i.evalErr
																																																}
																																																v[77] = v[76]
																																																if v[77] == m.InternedBottom {
																																																	return i.stepLookups(c, config, 73) // reapply
																																																}
																																																if v[77]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTFROM),_21,_22,_23,`<nonce>`(NONCE),_24)
																																																	v[78] = i.Model.KApplyArg(v[77], 0)
																																																	if v[78]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTFROM)
																																																		v[79] = i.Model.KApplyArg(v[78], 0)
																																																		if i.Model.Equals(v[79], v[6] /*ACCTFROM*/) { // lhs KVariable, which reappears:ACCTFROM
																																																			v[80] = i.Model.KApplyArg(v[77], 1)
																																																			v[81 /*_21*/] = v[80] // lhs KVariable _21
																																																			v[82] = i.Model.KApplyArg(v[77], 2)
																																																			v[83 /*_22*/] = v[82] // lhs KVariable _22
																																																			v[84] = i.Model.KApplyArg(v[77], 3)
																																																			v[85 /*_23*/] = v[84] // lhs KVariable _23
																																																			v[86] = i.Model.KApplyArg(v[77], 4)
																																																			if v[86]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(NONCE)
																																																				v[87] = i.Model.KApplyArg(v[86], 0)
																																																				if i.tempTypeVar = v[87] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																																					v[88 /*NONCE*/] = v[87] // NONCE
																																																					v[89] = i.Model.KApplyArg(v[77], 5)
																																																					v[90 /*_24*/] = v[89] // lhs KVariable _24
																																																					// lookup:#match(DotVar5,`_[_<-undef]`(_32,`<acctID>`(ACCTFROM)))
																																																					v[91], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_32,`<acctID>`(ACCTFROM))
																																																						v[72] /*_32*/,
																																																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																																							v[6] /*ACCTFROM*/,
																																																						),
																																																						config, -1)
																																																					if i.evalErr != nil {
																																																						return m.NoResult, i.evalErr
																																																					}
																																																					v[92] = v[91]
																																																					if v[92] == m.InternedBottom {
																																																						return i.stepLookups(c, config, 73) // reapply
																																																					}
																																																					if v[92]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																																						v[93 /*DotVar5*/] = v[92] // DotVar5
																																																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),isInt(NONCE)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`Set:in`(ACCTFROM,ACCTS)))
																																																						v[94], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																																							v[26] /*SCHED*/,
																																																							config, -1)
																																																						if i.evalErr != nil {
																																																							return m.NoResult, i.evalErr
																																																						}
																																																						// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),isInt(NONCE))
																																																						bv[1] = /* rhs precomputed isInt(_728) && isInt(DIFF) && isInt(GPRICE) && isInt(_731) && isInt(_732) && isInt(_729) && isInt(_735) && isInt(VALUE) && isString(CODESTR) && isSet(ACCTS) && isInt(_726) && isList(ARGS) && isString(_727) && isInt(CB) && isInt(_730) && isInt(_733) */ /* && */ m.IsTrue(v[94]) /* && */ /* rhs precomputed isInt(NUMB) */ 
																																																						if bv[1] {
																																																							v[95], i.evalErr = i.evalIsInt( // isInt(NONCE)
																																																								v[88 /*NONCE*/],
																																																								config, -1)
																																																							if i.evalErr != nil {
																																																								return m.NoResult, i.evalErr
																																																							}
																																																							bv[1] = m.IsTrue(v[95])
																																																						}
																																																						// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isSchedule(SCHED)),#token("true","Bool")),isInt(NONCE)),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),#token("true","Bool")),`Set:in`(ACCTFROM,ACCTS))
																																																						bv[0] = bv[1] /* && */ /* rhs precomputed isInt(ACCTFROM) */  /* && */ /* rhs precomputed isInt(_734) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  /* && */ /* rhs precomputed isInt(TS) */  /* && */ /* rhs precomputed isInt(GLIMIT) */ 
																																																						if bv[0] {
																																																							v[96], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCTFROM,ACCTS)
																																																								v[6] /*ACCTFROM*/,
																																																								v[70] /*ACCTS*/,
																																																								config, -1)
																																																							if i.evalErr != nil {
																																																								return m.NoResult, i.evalErr
																																																							}
																																																							bv[0] = m.IsTrue(v[96])
																																																						}
																																																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																																																							// RHS
																																																							return i.stepRHS603(v, bv, config)
																																																						}
																																																					} else {
																																																						return i.stepLookups(c, config, 73) // reapply
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																} else {
																																																	return i.stepLookups(c, config, 73) // reapply
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rules: 609, 632
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashlookupStorage2 { // #lookupStorage(ACCT,INDEX)
					v[4] = i.Model.KApplyArg(v[2], 0)
					// rule: 609
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _8 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _9 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _10 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _11 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _12 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[16]
											v[17] = i.Model.KApplyArg(c, 8)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 2)
													// KVariable _5 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 3)
													// KVariable _6 = v[22]
													v[23] = i.Model.KApplyArg(v[17], 4)
													// KVariable _7 = v[23]
													// rule #609
													// source: iele-node.k @32
													// {| rule `<generatedTop>`(`<k>`(``#lookupStorage(ACCT,INDEX)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(`_[_<-_]_MAP`(STORAGE,INDEX,#getStorageData(ACCT,INDEX))),_2,_3)),DotVar3)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isInt(ACCT)),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))) ensures #token("true","Bool") [UNIQUE_ID(800c868701c38d13bd9b7294fcbd1ac5131109fda538c0709cafa3eb927401c7) contentStartColumn(10) contentStartLine(32) org.kframework.attributes.Location(Location(32,10,38,46)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// LOOKUPS
														if guard < 74 {
															// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
															v[24], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																v[20] /*_14*/,
																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																	v[4] /*ACCT*/,
																),
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[25] = v[24]
															if v[25] == m.InternedBottom {
																return i.stepLookups(c, config, 74) // reapply
															}
															if v[25]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if i.Model.Equals(v[27], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																		v[28] = i.Model.KApplyArg(v[25], 1)
																		v[29 /*_0*/] = v[28] // lhs KVariable _0
																		v[30] = i.Model.KApplyArg(v[25], 2)
																		v[31 /*_1*/] = v[30] // lhs KVariable _1
																		v[32] = i.Model.KApplyArg(v[25], 3)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(STORAGE)
																			v[33] = i.Model.KApplyArg(v[32], 0)
																			if v[33]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[34 /*STORAGE*/] = v[33] // STORAGE
																				v[35] = i.Model.KApplyArg(v[25], 4)
																				v[36 /*_2*/] = v[35] // lhs KVariable _2
																				v[37] = i.Model.KApplyArg(v[25], 5)
																				v[38 /*_3*/] = v[37] // lhs KVariable _3
																				// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																				v[39], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																					v[20] /*_14*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[4] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[40] = v[39]
																				if v[40] == m.InternedBottom {
																					return i.stepLookups(c, config, 74) // reapply
																				}
																				if v[40]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																					v[41 /*DotVar3*/] = v[40] // DotVar3
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE))))
																					v[42], i.evalErr = i.evalIsMap( // isMap(STORAGE)
																						v[34 /*STORAGE*/],
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),#token("true","Bool")),`notBool_`(`_in_keys(_)_MAP`(INDEX,STORAGE)))
																					bv[0] = m.IsTrue(v[42]) /* && */ /* rhs precomputed isInt(INDEX) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																					if bv[0] {
																						v[43], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,STORAGE)
																							v[5] /*INDEX*/,
																							v[34 /*STORAGE*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = !(m.IsTrue(v[43]))
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																						// RHS
																						return i.stepRHS609(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 74) // reapply
																				}
																			}
																		}
																	}
																}
															} else {
																return i.stepLookups(c, config, 74) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					// rule: 632
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable INDEX = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _8 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _9 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _10 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _11 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _12 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											// KVariable _13 = v[16]
											v[17] = i.Model.KApplyArg(c, 8)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_4,`<accounts>`(_14),_5,_6,_7)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _4 = v[18]
												v[19] = i.Model.KApplyArg(v[17], 1)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_14)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _14 = v[20]
													v[21] = i.Model.KApplyArg(v[17], 2)
													// KVariable _5 = v[21]
													v[22] = i.Model.KApplyArg(v[17], 3)
													// KVariable _6 = v[22]
													v[23] = i.Model.KApplyArg(v[17], 4)
													// KVariable _7 = v[23]
													// rule #632
													// source: iele.k @478
													// {| rule `<generatedTop>`(`<k>`(``#lookupStorage(ACCT,INDEX)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(_4,`<accounts>`(_14),_5,_6,_7)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT))),#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),isInt(INDEX)),isInt(ACCT)),`_in_keys(_)_MAP`(INDEX,STORAGE))) ensures #token("true","Bool") [UNIQUE_ID(005ad422c35036fb2698655f509aa4037de8992d3b6ab689b1d0dcabafb6018f) contentStartColumn(10) contentStartLine(478) org.kframework.attributes.Location(Location(478,10,484,38)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// LOOKUPS
														if guard < 75 {
															// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3),`Map:lookup`(_14,`<acctID>`(ACCT)))
															v[24], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_14,`<acctID>`(ACCT))
																v[20] /*_14*/,
																i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																	v[4] /*ACCT*/,
																),
																config, -1)
															if i.evalErr != nil {
																return m.NoResult, i.evalErr
															}
															v[25] = v[24]
															if v[25] == m.InternedBottom {
																return i.stepLookups(c, config, 75) // reapply
															}
															if v[25]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,`<storage>`(STORAGE),_2,_3)
																v[26] = i.Model.KApplyArg(v[25], 0)
																if v[26]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																	v[27] = i.Model.KApplyArg(v[26], 0)
																	if i.Model.Equals(v[27], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																		v[28] = i.Model.KApplyArg(v[25], 1)
																		v[29 /*_0*/] = v[28] // lhs KVariable _0
																		v[30] = i.Model.KApplyArg(v[25], 2)
																		v[31 /*_1*/] = v[30] // lhs KVariable _1
																		v[32] = i.Model.KApplyArg(v[25], 3)
																		if v[32]&kapplyMatchMask == kapplyMatchLblXltstorageXgt1 { // `<storage>`(STORAGE)
																			v[33] = i.Model.KApplyArg(v[32], 0)
																			if v[33]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																				v[34 /*STORAGE*/] = v[33] // STORAGE
																				v[35] = i.Model.KApplyArg(v[25], 4)
																				v[36 /*_2*/] = v[35] // lhs KVariable _2
																				v[37] = i.Model.KApplyArg(v[25], 5)
																				v[38 /*_3*/] = v[37] // lhs KVariable _3
																				// lookup:#match(DotVar3,`_[_<-undef]`(_14,`<acctID>`(ACCT)))
																				v[39], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_14,`<acctID>`(ACCT))
																					v[20] /*_14*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[4] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[40] = v[39]
																				if v[40] == m.InternedBottom {
																					return i.stepLookups(c, config, 75) // reapply
																				}
																				if v[40]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																					v[41 /*DotVar3*/] = v[40] // DotVar3
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),#token("true","Bool")),`_in_keys(_)_MAP`(INDEX,STORAGE)))
																					v[42], i.evalErr = i.evalIsMap( // isMap(STORAGE)
																						v[34 /*STORAGE*/],
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(`_andBool_`(`_andBool_`(isMap(STORAGE),#token("true","Bool")),#token("true","Bool")),`_in_keys(_)_MAP`(INDEX,STORAGE))
																					bv[0] = m.IsTrue(v[42]) /* && */ /* rhs precomputed isInt(INDEX) */  /* && */ /* rhs precomputed isInt(ACCT) */ 
																					if bv[0] {
																						v[43], i.evalErr = i.evalXuinXukeysXlparenXuXrparenXuMAP( // `_in_keys(_)_MAP`(INDEX,STORAGE)
																							v[5] /*INDEX*/,
																							v[34 /*STORAGE*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[43])
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																						// RHS
																						return i.stepRHS632(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 75) // reapply
																				}
																			}
																		}
																	}
																}
															} else {
																return i.stepLookups(c, config, 75) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 610
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashexecuteXuIELE0 { // `#execute_IELE`(.KList)
					// KVariable DotVar1 = v[3]
					v[4] = i.Model.KApplyArg(c, 1)
					if v[4]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
						v[5] = i.Model.KApplyArg(v[4], 0)
						if v[5]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
							_, v[6], v[7] = i.Model.KSequenceSplitHeadTail(v[5]) // #applyRule(#token("regular","#RuleTag")) ~> ...
							if v[6]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
								v[8] = i.Model.KApplyArg(v[6], 0)
								if i.Model.Equals(v[8], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
									// KVariable SREST = v[7]
									v[9] = i.Model.KApplyArg(c, 2)
									// KVariable _35 = v[9]
									v[10] = i.Model.KApplyArg(c, 3)
									// KVariable _36 = v[10]
									v[11] = i.Model.KApplyArg(c, 4)
									// KVariable _37 = v[11]
									v[12] = i.Model.KApplyArg(c, 5)
									// KVariable _38 = v[12]
									v[13] = i.Model.KApplyArg(c, 6)
									// KVariable _39 = v[13]
									v[14] = i.Model.KApplyArg(c, 7)
									if v[14]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34)
										v[15] = i.Model.KApplyArg(v[14], 0)
										// KVariable _21 = v[15]
										v[16] = i.Model.KApplyArg(v[14], 1)
										// KVariable _22 = v[16]
										v[17] = i.Model.KApplyArg(v[14], 2)
										// KVariable _23 = v[17]
										v[18] = i.Model.KApplyArg(v[14], 3)
										// KVariable _24 = v[18]
										v[19] = i.Model.KApplyArg(v[14], 4)
										if v[19]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20)
											v[20] = i.Model.KApplyArg(v[19], 0)
											if v[20]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(`<functions>`(_41),_3,_4,_5,_6,_7)
												v[21] = i.Model.KApplyArg(v[20], 0)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltfunctionsXgt1 { // `<functions>`(_41)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _41 = v[22]
													v[23] = i.Model.KApplyArg(v[20], 1)
													// KVariable _3 = v[23]
													v[24] = i.Model.KApplyArg(v[20], 2)
													// KVariable _4 = v[24]
													v[25] = i.Model.KApplyArg(v[20], 3)
													// KVariable _5 = v[25]
													v[26] = i.Model.KApplyArg(v[20], 4)
													// KVariable _6 = v[26]
													v[27] = i.Model.KApplyArg(v[20], 5)
													// KVariable _7 = v[27]
													v[28] = i.Model.KApplyArg(v[19], 1)
													// KVariable _8 = v[28]
													v[29] = i.Model.KApplyArg(v[19], 2)
													// KVariable _9 = v[29]
													v[30] = i.Model.KApplyArg(v[19], 3)
													// KVariable _10 = v[30]
													v[31] = i.Model.KApplyArg(v[19], 4)
													// KVariable _11 = v[31]
													v[32] = i.Model.KApplyArg(v[19], 5)
													// KVariable _12 = v[32]
													v[33] = i.Model.KApplyArg(v[19], 6)
													// KVariable _13 = v[33]
													v[34] = i.Model.KApplyArg(v[19], 7)
													// KVariable _14 = v[34]
													v[35] = i.Model.KApplyArg(v[19], 8)
													// KVariable _15 = v[35]
													v[36] = i.Model.KApplyArg(v[19], 9)
													// KVariable _16 = v[36]
													v[37] = i.Model.KApplyArg(v[19], 10)
													// KVariable _17 = v[37]
													v[38] = i.Model.KApplyArg(v[19], 11)
													if v[38]&kapplyMatchMask == kapplyMatchLblXltfidXgt1 { // `<fid>`(FUNC)
														v[39] = i.Model.KApplyArg(v[38], 0)
														// KVariable FUNC = v[39]
														v[40] = i.Model.KApplyArg(v[19], 12)
														// KVariable _18 = v[40]
														v[41] = i.Model.KApplyArg(v[19], 13)
														// KVariable _19 = v[41]
														v[42] = i.Model.KApplyArg(v[19], 14)
														// KVariable _20 = v[42]
														v[43] = i.Model.KApplyArg(v[14], 5)
														// KVariable _25 = v[43]
														v[44] = i.Model.KApplyArg(v[14], 6)
														// KVariable _26 = v[44]
														v[45] = i.Model.KApplyArg(v[14], 7)
														// KVariable _27 = v[45]
														v[46] = i.Model.KApplyArg(v[14], 8)
														// KVariable _28 = v[46]
														v[47] = i.Model.KApplyArg(v[14], 9)
														// KVariable _29 = v[47]
														v[48] = i.Model.KApplyArg(v[14], 10)
														// KVariable _30 = v[48]
														v[49] = i.Model.KApplyArg(v[14], 11)
														// KVariable _31 = v[49]
														v[50] = i.Model.KApplyArg(v[14], 12)
														// KVariable _32 = v[50]
														v[51] = i.Model.KApplyArg(v[14], 13)
														// KVariable _33 = v[51]
														v[52] = i.Model.KApplyArg(v[14], 14)
														// KVariable _34 = v[52]
														v[53] = i.Model.KApplyArg(c, 8)
														// KVariable _40 = v[53]
														// rule #610
														// source: iele.k @565
														// {| rule `<generatedTop>`(`<k>`(`` `#execute_IELE`(.KList)=>CODE``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,_36,_37,_38,_39,`<iele>`(_21,_22,_23,_24,`<callFrame>`(`<program>`(`<functions>`(_41),_3,_4,_5,_6,_7),_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,`<fid>`(FUNC),_18,_19,_20),_25,_26,_27,_28,_29,_30,_31,_32,_33,_34),_40) requires `_andBool_`(`_andBool_`(#match(`<function>`(`<funcId>`(FUNC),_0,`<instructions>`(CODE),_1,_2),`Map:lookup`(_41,`<funcId>`(FUNC))),#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(FUNC)))),`_andBool_`(isBlocks(CODE),isIeleName(FUNC))) ensures #token("true","Bool") [UNIQUE_ID(f44fa0d6d463806cccf8807adcab0f5e398137552e715f54d4f38349a31591fe) contentStartColumn(10) contentStartLine(565) org.kframework.attributes.Location(Location(565,10,565,138)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
														if !matched {
															// LOOKUPS
															if guard < 76 {
																// lookup:#match(`<function>`(`<funcId>`(FUNC),_0,`<instructions>`(CODE),_1,_2),`Map:lookup`(_41,`<funcId>`(FUNC)))
																v[54], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<funcId>`(FUNC))
																	v[22] /*_41*/,
																	i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																		v[39] /*FUNC*/,
																	),
																	config, -1)
																if i.evalErr != nil {
																	return m.NoResult, i.evalErr
																}
																v[55] = v[54]
																if v[55] == m.InternedBottom {
																	return i.stepLookups(c, config, 76) // reapply
																}
																if v[55]&kapplyMatchMask == kapplyMatchLblXltfunctionXgt5 { // `<function>`(`<funcId>`(FUNC),_0,`<instructions>`(CODE),_1,_2)
																	v[56] = i.Model.KApplyArg(v[55], 0)
																	if v[56]&kapplyMatchMask == kapplyMatchLblXltfuncIDXgt1 { // `<funcId>`(FUNC)
																		v[57] = i.Model.KApplyArg(v[56], 0)
																		if i.Model.Equals(v[57], v[39] /*FUNC*/) { // lhs KVariable, which reappears:FUNC
																			v[58] = i.Model.KApplyArg(v[55], 1)
																			v[59 /*_0*/] = v[58] // lhs KVariable _0
																			v[60] = i.Model.KApplyArg(v[55], 2)
																			if v[60]&kapplyMatchMask == kapplyMatchLblXltinstructionsXgt1 { // `<instructions>`(CODE)
																				v[61] = i.Model.KApplyArg(v[60], 0)
																				v[62 /*CODE*/] = v[61] // lhs KVariable CODE
																				v[63] = i.Model.KApplyArg(v[55], 3)
																				v[64 /*_1*/] = v[63] // lhs KVariable _1
																				v[65] = i.Model.KApplyArg(v[55], 4)
																				v[66 /*_2*/] = v[65] // lhs KVariable _2
																				// lookup:#match(DotVar5,`_[_<-undef]`(_41,`<funcId>`(FUNC)))
																				v[67], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<funcId>`(FUNC))
																					v[22] /*_41*/,
																					i.Model.NewKApply(m.LblXltfuncIDXgt, // as-is <funcId>
																						v[39] /*FUNC*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[68] = v[67]
																				if v[68] == m.InternedBottom {
																					return i.stepLookups(c, config, 76) // reapply
																				}
																				if v[68]&collectionMatchMask == mapMatchSortFunctionCellMap { // lhs KVariable with hook:MAP.Map
																					v[69 /*DotVar5*/] = v[68] // DotVar5
																					// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(isBlocks(CODE),isIeleName(FUNC)))
																					v[70], i.evalErr = i.evalIsBlocks( // isBlocks(CODE)
																						v[62 /*CODE*/],
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					// `_andBool_`(isBlocks(CODE),isIeleName(FUNC))
																					bv[0] = m.IsTrue(v[70])
																					if bv[0] {
																						v[71], i.evalErr = i.evalIsIeleName( // isIeleName(FUNC)
																							v[39] /*FUNC*/,
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						bv[0] = m.IsTrue(v[71])
																					}
																					if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																						// RHS
																						return i.stepRHS610(v, bv, config)
																					}
																				} else {
																					return i.stepLookups(c, config, 76) // reapply
																				}
																			}
																		}
																	}
																} else {
																	return i.stepLookups(c, config, 76) // reapply
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 620
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashloadAccountXuXuIELEXhyphenINFRASTRUCTURE1 { // `#loadAccount__IELE-INFRASTRUCTURE`(ACCT)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _3 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										// KVariable _4 = v[11]
										v[12] = i.Model.KApplyArg(c, 4)
										// KVariable _5 = v[12]
										v[13] = i.Model.KApplyArg(c, 5)
										// KVariable _6 = v[13]
										v[14] = i.Model.KApplyArg(c, 6)
										// KVariable _7 = v[14]
										v[15] = i.Model.KApplyArg(c, 7)
										// KVariable _8 = v[15]
										v[16] = i.Model.KApplyArg(c, 8)
										if v[16]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(_9),`<accounts>`(_10),_0,_1,_2)
											v[17] = i.Model.KApplyArg(v[16], 0)
											if v[17]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(_9)
												v[18] = i.Model.KApplyArg(v[17], 0)
												// KVariable _9 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 1)
												if v[19]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_10)
													v[20] = i.Model.KApplyArg(v[19], 0)
													// KVariable _10 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 2)
													// KVariable _0 = v[21]
													v[22] = i.Model.KApplyArg(v[16], 3)
													// KVariable _1 = v[22]
													v[23] = i.Model.KApplyArg(v[16], 4)
													// KVariable _2 = v[23]
													// rule #620
													// source: iele-node.k @13
													// {| rule `<generatedTop>`(`<k>`(`` `#loadAccount__IELE-INFRASTRUCTURE`(ACCT)=>.K``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_3,_4,_5,_6,_7,_8,`<network>`(`<activeAccounts>`(_9=>`_Set_`(ACCTS,`SetItem`(ACCT))),`<accounts>`(_10=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(#getBalance(ACCT)),`<code>`(`#if_#then_#else_#fi_K-EQUAL`(#isCodeEmpty(ACCT),contractDefinitionList(`contract_!__{_}_IELE-CONFIGURATION`(#token("iele.Wallet","IeleName"),#token("0","Int"),#token("\"\"","String"),topLevelDefinitionList(`definepublic_{_}_IELE-COMMON`(`_(_)_IELE-COMMON`(`@__IELE-COMMON`(#token("deposit","IeleName")),#token("0","Int")),`___IELE-COMMON`(instructionList(`ret__IELE-COMMON`(`.List{"operandList"}`(.KList)),`.List{"instructionList"}`(.KList)),`.List{"labeledBlockList"}`(.KList))),`.List{"topLevelDefinitionList"}`(.KList))),`.List{"contractDefinitionList"}`(.KList)),`.List{"contractDefinitionList"}`(.KList))),`<storage>`(`.Map`(.KList)),`<nonce>`(#getNonce(ACCT)),`<exists>`(#accountExists(ACCT)))),DotVar3)),_0,_1,_2)) requires `_andBool_`(`_andBool_`(#match(ACCTS,_9),#match(DotVar3,_10)),`_andBool_`(`_andBool_`(isSet(ACCTS),isInt(ACCT)),`notBool_`(`Set:in`(ACCT,ACCTS)))) ensures #token("true","Bool") [UNIQUE_ID(f5166b2712ae1e67a1e5e3cbee97f793cfdce15aea22040159427c99eb7470e6) contentStartColumn(10) contentStartLine(13) org.kframework.attributes.Location(Location(13,10,28,37)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-node.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)] |}
													if !matched {
														// LOOKUPS
														if guard < 77 {
															// lookup:#match(ACCTS,_9)
															v[24] = v[18] /*_9*/
															if v[24] == m.InternedBottom {
																return i.stepLookups(c, config, 77) // reapply
															}
															if v[24]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																v[25 /*ACCTS*/] = v[24] // ACCTS
																// lookup:#match(DotVar3,_10)
																v[26] = v[20] /*_10*/
																if v[26] == m.InternedBottom {
																	return i.stepLookups(c, config, 77) // reapply
																}
																if v[26]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																	v[27 /*DotVar3*/] = v[26] // DotVar3
																	// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(isSet(ACCTS),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS))))
																	v[28], i.evalErr = i.evalIsSet( // isSet(ACCTS)
																		v[25 /*ACCTS*/],
																		config, -1)
																	if i.evalErr != nil {
																		return m.NoResult, i.evalErr
																	}
																	// `_andBool_`(`_andBool_`(isSet(ACCTS),#token("true","Bool")),`notBool_`(`Set:in`(ACCT,ACCTS)))
																	bv[0] = m.IsTrue(v[28]) /* && */ /* rhs precomputed isInt(ACCT) */ 
																	if bv[0] {
																		v[29], i.evalErr = i.evalSetXcolonin( // `Set:in`(ACCT,ACCTS)
																			v[4] /*ACCT*/,
																			v[25 /*ACCTS*/],
																			config, -1)
																		if i.evalErr != nil {
																			return m.NoResult, i.evalErr
																		}
																		bv[0] = !(m.IsTrue(v[29]))
																	}
																	if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] {
																		// RHS
																		return i.stepRHS620(v, bv, config)
																	}
																} else {
																	return i.stepLookups(c, config, 77) // reapply
																}
															} else {
																return i.stepLookups(c, config, 77) // reapply
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 627
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashdeleteAccounts1 { // #deleteAccounts(`_List_`(`ListItem`(ACCT),ACCTS))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempBoolVar, v[5], v[6] = i.Model.ListSplitHeadTail(v[4], m.SortList, m.LblXuListXu); i.tempBoolVar { // list `_List_`(`ListItem`(ACCT),ACCTS)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCT = v[5]
							if v[6]&collectionMatchMask == listMatchSortList { // lhs KVariable with hook:LIST.List
								// KVariable ACCTS = v[6]
								// KVariable DotVar1 = v[3]
								v[7] = i.Model.KApplyArg(c, 1)
								if v[7]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
									v[8] = i.Model.KApplyArg(v[7], 0)
									if v[8]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
										_, v[9], v[10] = i.Model.KSequenceSplitHeadTail(v[8]) // #applyRule(#token("regular","#RuleTag")) ~> ...
										if v[9]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
											v[11] = i.Model.KApplyArg(v[9], 0)
											if i.Model.Equals(v[11], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
												// KVariable SREST = v[10]
												v[12] = i.Model.KApplyArg(c, 2)
												// KVariable _8 = v[12]
												v[13] = i.Model.KApplyArg(c, 3)
												// KVariable _9 = v[13]
												v[14] = i.Model.KApplyArg(c, 4)
												// KVariable _10 = v[14]
												v[15] = i.Model.KApplyArg(c, 5)
												// KVariable _11 = v[15]
												v[16] = i.Model.KApplyArg(c, 6)
												// KVariable _12 = v[16]
												v[17] = i.Model.KApplyArg(c, 7)
												// KVariable _13 = v[17]
												v[18] = i.Model.KApplyArg(c, 8)
												if v[18]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(`<activeAccounts>`(_14),`<accounts>`(_15),_5,_6,_7)
													v[19] = i.Model.KApplyArg(v[18], 0)
													if v[19]&kapplyMatchMask == kapplyMatchLblXltactiveAccountsXgt1 { // `<activeAccounts>`(_14)
														v[20] = i.Model.KApplyArg(v[19], 0)
														// KVariable _14 = v[20]
														v[21] = i.Model.KApplyArg(v[18], 1)
														if v[21]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_15)
															v[22] = i.Model.KApplyArg(v[21], 0)
															// KVariable _15 = v[22]
															v[23] = i.Model.KApplyArg(v[18], 2)
															// KVariable _5 = v[23]
															v[24] = i.Model.KApplyArg(v[18], 3)
															// KVariable _6 = v[24]
															v[25] = i.Model.KApplyArg(v[18], 4)
															// KVariable _7 = v[25]
															// rule #627
															// source: iele.k @689
															// {| rule `<generatedTop>`(`<k>`(``#deleteAccounts(`_List_`(`ListItem`(ACCT),ACCTS))=>#deleteAccounts(ACCTS)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_8,_9,_10,_11,_12,_13,`<network>`(`<activeAccounts>`(_14=>`_Set_`(`.Set`(.KList),DotVar3)),`<accounts>`(_15=>`_AccountCellMap_`(`.AccountCellMap`(.KList),DotVar4)),_5,_6,_7)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#setChoice(ACCT,_14),#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,_4),`Map:lookup`(_15,`<acctID>`(ACCT)))),#match(DotVar3,`Set:difference`(_14,`SetItem`(ACCT)))),#match(DotVar4,`_[_<-undef]`(_15,`<acctID>`(ACCT)))),`_andBool_`(isInt(ACCT),isList(ACCTS))) ensures #token("true","Bool") [UNIQUE_ID(427acb6922392dbbb12ecd973b382a1d66e7a25a6127c772dcdc9159aa9b837e) contentStartColumn(10) contentStartLine(689) org.kframework.attributes.Location(Location(689,10,699,21)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
															if !matched {
																// LOOKUPS
																if guard < 78 {
																	// lookup:#setChoice(ACCT,_14)
																	setChoice0Eval := v[20] /*_14*/
																	setChoice0Obj, setChoice0TypeOk := i.Model.GetSetObject(setChoice0Eval)
																	if !setChoice0TypeOk {
																		return i.stepLookups(c, config, 78) // reapply
																	}
																	var setChoice0Result m.KReference = m.InternedBottom
																	for setChoice0Key := range setChoice0Obj.Data {
																		var setChoice0Err error
																		setChoice0Elem, setChoice0Err := i.Model.ToKItem(setChoice0Key)
																		if setChoice0Err != nil {
																			return m.NoResult, setChoice0Err
																		}
																		if i.Model.Equals(setChoice0Elem, v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																			setChoice0Result, setChoice0Err = func() (m.KReference, error) {
																				// lookup:#match(`<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,_4),`Map:lookup`(_15,`<acctID>`(ACCT)))
																				v[26], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_15,`<acctID>`(ACCT))
																					v[22] /*_15*/,
																					i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																						v[5] /*ACCT*/,
																					),
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[27] = v[26]
																				if v[27] == m.InternedBottom {
																					return i.stepLookups(c, config, 78) // reapply
																				}
																				if v[27]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_0,_1,_2,_3,_4)
																					v[28] = i.Model.KApplyArg(v[27], 0)
																					if v[28]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																						v[29] = i.Model.KApplyArg(v[28], 0)
																						if i.Model.Equals(v[29], v[5] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																							v[30] = i.Model.KApplyArg(v[27], 1)
																							v[31 /*_0*/] = v[30] // lhs KVariable _0
																							v[32] = i.Model.KApplyArg(v[27], 2)
																							v[33 /*_1*/] = v[32] // lhs KVariable _1
																							v[34] = i.Model.KApplyArg(v[27], 3)
																							v[35 /*_2*/] = v[34] // lhs KVariable _2
																							v[36] = i.Model.KApplyArg(v[27], 4)
																							v[37 /*_3*/] = v[36] // lhs KVariable _3
																							v[38] = i.Model.KApplyArg(v[27], 5)
																							v[39 /*_4*/] = v[38] // lhs KVariable _4
																							// lookup:#match(DotVar3,`Set:difference`(_14,`SetItem`(ACCT)))
																							v[41], i.evalErr = i.evalSetItem( // `SetItem`(ACCT)
																								v[5] /*ACCT*/,
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[40], i.evalErr = i.evalSetXcolondifference( // `Set:difference`(_14,`SetItem`(ACCT))
																								v[20] /*_14*/,
																								v[41],
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[42] = v[40]
																							if v[42] == m.InternedBottom {
																								return i.stepLookups(c, config, 78) // reapply
																							}
																							if v[42]&collectionMatchMask == setMatchSortSet { // lhs KVariable with hook:SET.Set
																								v[43 /*DotVar3*/] = v[42] // DotVar3
																								// lookup:#match(DotVar4,`_[_<-undef]`(_15,`<acctID>`(ACCT)))
																								v[44], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_15,`<acctID>`(ACCT))
																									v[22] /*_15*/,
																									i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																										v[5] /*ACCT*/,
																									),
																									config, -1)
																								if i.evalErr != nil {
																									return m.NoResult, i.evalErr
																								}
																								v[45] = v[44]
																								if v[45] == m.InternedBottom {
																									return i.stepLookups(c, config, 78) // reapply
																								}
																								if v[45]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																									v[46 /*DotVar4*/] = v[45] // DotVar4
																									// REQUIRES precomputed lookup #setChoice && lookup #match && lookup #match && lookup #match && isInt(ACCT) && isList(ACCTS)
																									// RHS
																									return i.stepRHS627(v, bv, config)
																								} else {
																									return i.stepLookups(c, config, 78) // reapply
																								}
																							} else {
																								return i.stepLookups(c, config, 78) // reapply
																							}
																						}
																					}
																				} else {
																					return i.stepLookups(c, config, 78) // reapply
																				}

																				return m.InternedBottom, nil // #setChoice end
																			}()
																			if setChoice0Err != nil {
																				return m.NoResult, setChoice0Err
																			}

																		}
																	}
																	if setChoice0Result == m.InternedBottom {
																		return i.stepLookups(c, config, 78) // reapply
																	}
																	return setChoice0Result, nil

																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 628
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmkCreateXuXuXuXuXuXuXuIELE6 { // `#mkCreate_______IELE`(ACCTFROM,ACCTTO,CODE,GAVAIL,VALUE,ARGS)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCTFROM = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable ACCTTO = v[5]
							v[6] = i.Model.KApplyArg(v[2], 2)
							// KVariable CODE = v[6]
							v[7] = i.Model.KApplyArg(v[2], 3)
							if i.tempTypeVar = v[7] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
								// KVariable GAVAIL = v[7]
								v[8] = i.Model.KApplyArg(v[2], 4)
								if i.tempTypeVar = v[8] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
									// KVariable VALUE = v[8]
									v[9] = i.Model.KApplyArg(v[2], 5)
									// KVariable ARGS = v[9]
									// KVariable DotVar1 = v[3]
									v[10] = i.Model.KApplyArg(c, 1)
									if v[10]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
										v[11] = i.Model.KApplyArg(v[10], 0)
										if v[11]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
											_, v[12], v[13] = i.Model.KSequenceSplitHeadTail(v[11]) // #applyRule(#token("regular","#RuleTag")) ~> ...
											if v[12]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
												v[14] = i.Model.KApplyArg(v[12], 0)
												if i.Model.Equals(v[14], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
													// KVariable SREST = v[13]
													v[15] = i.Model.KApplyArg(c, 2)
													// KVariable _36 = v[15]
													v[16] = i.Model.KApplyArg(c, 3)
													if v[16]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
														v[17] = i.Model.KApplyArg(v[16], 0)
														// KVariable EXECMODE = v[17]
														v[18] = i.Model.KApplyArg(c, 4)
														if v[18]&kapplyMatchMask == kapplyMatchLblXltscheduleXgt1 { // `<schedule>`(SCHED)
															v[19] = i.Model.KApplyArg(v[18], 0)
															// KVariable SCHED = v[19]
															v[20] = i.Model.KApplyArg(c, 5)
															// KVariable _37 = v[20]
															v[21] = i.Model.KApplyArg(c, 6)
															// KVariable _38 = v[21]
															v[22] = i.Model.KApplyArg(c, 7)
															if v[22]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_14,_15,_16,_17,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5),`<callDepth>`(CD),_6,`<id>`(ACCT),`<caller>`(_318),`<callData>`(_319),`<callValue>`(_320),_7,_8,_9,_10,_11,`<gas>`(OLDGAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27)
																v[23] = i.Model.KApplyArg(v[22], 0)
																// KVariable _14 = v[23]
																v[24] = i.Model.KApplyArg(v[22], 1)
																// KVariable _15 = v[24]
																v[25] = i.Model.KApplyArg(v[22], 2)
																// KVariable _16 = v[25]
																v[26] = i.Model.KApplyArg(v[22], 3)
																// KVariable _17 = v[26]
																v[27] = i.Model.KApplyArg(v[22], 4)
																if v[27]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5),`<callDepth>`(CD),_6,`<id>`(ACCT),`<caller>`(_318),`<callData>`(_319),`<callValue>`(_320),_7,_8,_9,_10,_11,`<gas>`(OLDGAVAIL),_12,_13)
																	v[28] = i.Model.KApplyArg(v[27], 0)
																	if v[28]&kapplyMatchMask == kapplyMatchLblXltprogramXgt6 { // `<program>`(_0,_1,_2,_3,_4,_5)
																		v[29] = i.Model.KApplyArg(v[28], 0)
																		// KVariable _0 = v[29]
																		v[30] = i.Model.KApplyArg(v[28], 1)
																		// KVariable _1 = v[30]
																		v[31] = i.Model.KApplyArg(v[28], 2)
																		// KVariable _2 = v[31]
																		v[32] = i.Model.KApplyArg(v[28], 3)
																		// KVariable _3 = v[32]
																		v[33] = i.Model.KApplyArg(v[28], 4)
																		// KVariable _4 = v[33]
																		v[34] = i.Model.KApplyArg(v[28], 5)
																		// KVariable _5 = v[34]
																		v[35] = i.Model.KApplyArg(v[27], 1)
																		if v[35]&kapplyMatchMask == kapplyMatchLblXltcallDepthXgt1 { // `<callDepth>`(CD)
																			v[36] = i.Model.KApplyArg(v[35], 0)
																			if i.tempTypeVar = v[36] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																				// KVariable CD = v[36]
																				v[37] = i.Model.KApplyArg(v[27], 2)
																				// KVariable _6 = v[37]
																				v[38] = i.Model.KApplyArg(v[27], 3)
																				if v[38]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
																					v[39] = i.Model.KApplyArg(v[38], 0)
																					if i.tempTypeVar = v[39] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																						// KVariable ACCT = v[39]
																						v[40] = i.Model.KApplyArg(v[27], 4)
																						if v[40]&kapplyMatchMask == kapplyMatchLblXltcallerXgt1 { // `<caller>`(_318)
																							v[41] = i.Model.KApplyArg(v[40], 0)
																							if i.tempTypeVar = v[41] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																								// KVariable _318 = v[41]
																								v[42] = i.Model.KApplyArg(v[27], 5)
																								if v[42]&kapplyMatchMask == kapplyMatchLblXltcallDataXgt1 { // `<callData>`(_319)
																									v[43] = i.Model.KApplyArg(v[42], 0)
																									// KVariable _319 = v[43]
																									v[44] = i.Model.KApplyArg(v[27], 6)
																									if v[44]&kapplyMatchMask == kapplyMatchLblXltcallValueXgt1 { // `<callValue>`(_320)
																										v[45] = i.Model.KApplyArg(v[44], 0)
																										if i.tempTypeVar = v[45] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																											// KVariable _320 = v[45]
																											v[46] = i.Model.KApplyArg(v[27], 7)
																											// KVariable _7 = v[46]
																											v[47] = i.Model.KApplyArg(v[27], 8)
																											// KVariable _8 = v[47]
																											v[48] = i.Model.KApplyArg(v[27], 9)
																											// KVariable _9 = v[48]
																											v[49] = i.Model.KApplyArg(v[27], 10)
																											// KVariable _10 = v[49]
																											v[50] = i.Model.KApplyArg(v[27], 11)
																											// KVariable _11 = v[50]
																											v[51] = i.Model.KApplyArg(v[27], 12)
																											if v[51]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(OLDGAVAIL)
																												v[52] = i.Model.KApplyArg(v[51], 0)
																												if i.tempTypeVar = v[52] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																													// KVariable OLDGAVAIL = v[52]
																													v[53] = i.Model.KApplyArg(v[27], 13)
																													// KVariable _12 = v[53]
																													v[54] = i.Model.KApplyArg(v[27], 14)
																													// KVariable _13 = v[54]
																													v[55] = i.Model.KApplyArg(v[22], 5)
																													// KVariable _18 = v[55]
																													v[56] = i.Model.KApplyArg(v[22], 6)
																													// KVariable _19 = v[56]
																													v[57] = i.Model.KApplyArg(v[22], 7)
																													// KVariable _20 = v[57]
																													v[58] = i.Model.KApplyArg(v[22], 8)
																													// KVariable _21 = v[58]
																													v[59] = i.Model.KApplyArg(v[22], 9)
																													// KVariable _22 = v[59]
																													v[60] = i.Model.KApplyArg(v[22], 10)
																													// KVariable _23 = v[60]
																													v[61] = i.Model.KApplyArg(v[22], 11)
																													// KVariable _24 = v[61]
																													v[62] = i.Model.KApplyArg(v[22], 12)
																													// KVariable _25 = v[62]
																													v[63] = i.Model.KApplyArg(v[22], 13)
																													// KVariable _26 = v[63]
																													v[64] = i.Model.KApplyArg(v[22], 14)
																													// KVariable _27 = v[64]
																													v[65] = i.Model.KApplyArg(c, 8)
																													if v[65]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_32,`<accounts>`(_39),_33,_34,_35)
																														v[66] = i.Model.KApplyArg(v[65], 0)
																														// KVariable _32 = v[66]
																														v[67] = i.Model.KApplyArg(v[65], 1)
																														if v[67]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_39)
																															v[68] = i.Model.KApplyArg(v[67], 0)
																															// KVariable _39 = v[68]
																															v[69] = i.Model.KApplyArg(v[65], 2)
																															// KVariable _33 = v[69]
																															v[70] = i.Model.KApplyArg(v[65], 3)
																															// KVariable _34 = v[70]
																															v[71] = i.Model.KApplyArg(v[65], 4)
																															// KVariable _35 = v[71]
																															// rule #628
																															// source: iele.k @1401
																															// {| rule `<generatedTop>`(`<k>`(`` `#mkCreate_______IELE`(ACCTFROM,ACCTTO,CODE,GAVAIL,VALUE,ARGS)=>#initVM(ARGS)~>#initFun(#token("init","IeleName"),#sizeRegs(ARGS),#token("true","Bool"))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_36,`<mode>`(EXECMODE),`<schedule>`(SCHED),_37,_38,`<iele>`(_14,_15,_16,_17,`<callFrame>`(`<program>`(_0,_1,_2,_3,_4,_5)=>#loadCode(CODE),`<callDepth>`(CD=>`_+Int_`(CD,#token("1","Int"))),_6,`<id>`(ACCT=>ACCTTO),`<caller>`(_318=>ACCTFROM),`<callData>`(_319=>`.List{"operandList"}`(.KList)),`<callValue>`(_320=>VALUE),_7,_8,_9,_10,_11,`<gas>`(OLDGAVAIL=>GAVAIL),_12,_13),_18,_19,_20,_21,_22,_23,_24,_25,_26,_27),`<network>`(_32,`<accounts>`(_39),_33,_34,_35)) requires `_andBool_`(`_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCTTO),_28,_29,_30,`<nonce>`(_40),_31),`Map:lookup`(_39,`<acctID>`(ACCTTO))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCTTO)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(_318),isInt(_320)),isInt(OLDGAVAIL)),isInt(ACCTTO)),isInt(VALUE)),isInt(CD)),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),isInt(ACCT)),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),isInt(ACCTFROM)),isInt(GAVAIL)),isInts(ARGS)),isInts(_319))),`_==Int_`(_40,#token("0","Int"))) ensures #token("true","Bool") [UNIQUE_ID(04a5c2e8409a43d5748a02af7e709d9fd4b84c96f550c66ef15fe4a134f0e3b0) contentStartColumn(10) contentStartLine(1401) org.kframework.attributes.Location(Location(1401,10,1418,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																															if !matched {
																																// LOOKUPS
																																if guard < 79 {
																																	// lookup:#match(`<account>`(`<acctID>`(ACCTTO),_28,_29,_30,`<nonce>`(_40),_31),`Map:lookup`(_39,`<acctID>`(ACCTTO)))
																																	v[72], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<acctID>`(ACCTTO))
																																		v[68] /*_39*/,
																																		i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																			v[5] /*ACCTTO*/,
																																		),
																																		config, -1)
																																	if i.evalErr != nil {
																																		return m.NoResult, i.evalErr
																																	}
																																	v[73] = v[72]
																																	if v[73] == m.InternedBottom {
																																		return i.stepLookups(c, config, 79) // reapply
																																	}
																																	if v[73]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCTTO),_28,_29,_30,`<nonce>`(_40),_31)
																																		v[74] = i.Model.KApplyArg(v[73], 0)
																																		if v[74]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCTTO)
																																			v[75] = i.Model.KApplyArg(v[74], 0)
																																			if i.Model.Equals(v[75], v[5] /*ACCTTO*/) { // lhs KVariable, which reappears:ACCTTO
																																				v[76] = i.Model.KApplyArg(v[73], 1)
																																				v[77 /*_28*/] = v[76] // lhs KVariable _28
																																				v[78] = i.Model.KApplyArg(v[73], 2)
																																				v[79 /*_29*/] = v[78] // lhs KVariable _29
																																				v[80] = i.Model.KApplyArg(v[73], 3)
																																				v[81 /*_30*/] = v[80] // lhs KVariable _30
																																				v[82] = i.Model.KApplyArg(v[73], 4)
																																				if v[82]&kapplyMatchMask == kapplyMatchLblXltnonceXgt1 { // `<nonce>`(_40)
																																					v[83] = i.Model.KApplyArg(v[82], 0)
																																					if i.tempTypeVar = v[83] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																																						v[84 /*_40*/] = v[83] // _40
																																						v[85] = i.Model.KApplyArg(v[73], 5)
																																						v[86 /*_31*/] = v[85] // lhs KVariable _31
																																						// lookup:#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCTTO)))
																																						v[87], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<acctID>`(ACCTTO))
																																							v[68] /*_39*/,
																																							i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																																								v[5] /*ACCTTO*/,
																																							),
																																							config, -1)
																																						if i.evalErr != nil {
																																							return m.NoResult, i.evalErr
																																						}
																																						v[88] = v[87]
																																						if v[88] == m.InternedBottom {
																																							return i.stepLookups(c, config, 79) // reapply
																																						}
																																						if v[88]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																																							v[89 /*DotVar5*/] = v[88] // DotVar5
																																							// REQUIRES `_andBool_`(`_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_319))),`_==Int_`(_40,#token("0","Int")))
																																							v[90], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																																								v[17] /*EXECMODE*/,
																																								config, -1)
																																							if i.evalErr != nil {
																																								return m.NoResult, i.evalErr
																																							}
																																							// `_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE))
																																							bv[5] = /* rhs precomputed isInt(_318) && isInt(_320) && isInt(OLDGAVAIL) && isInt(ACCTTO) && isInt(VALUE) && isInt(CD) */ /* && */ m.IsTrue(v[90])
																																							if bv[5] {
																																								v[91], i.evalErr = i.evalIsContract( // isContract(CODE)
																																									v[6] /*CODE*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								bv[5] = m.IsTrue(v[91])
																																							}
																																							// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED))
																																							bv[4] = bv[5]
																																							if bv[4] {
																																								v[92], i.evalErr = i.evalIsSchedule( // isSchedule(SCHED)
																																									v[19] /*SCHED*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								bv[4] = m.IsTrue(v[92])
																																							}
																																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5)))
																																							bv[3] = bv[4] /* && */ /* rhs precomputed isInt(ACCT) */ 
																																							if bv[3] {
																																								v[93], i.evalErr = i.evalIsFuncIDsCell( // isFuncIdsCell(_1)
																																									v[30] /*_1*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								// `_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4))
																																								bv[10] = /* rhs KToken */ /* && */ m.IsTrue(v[93])
																																								if bv[10] {
																																									v[94], i.evalErr = i.evalIsProgramSizeCell( // isProgramSizeCell(_4)
																																										v[33] /*_4*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[10] = m.IsTrue(v[94])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3))
																																								bv[9] = bv[10]
																																								if bv[9] {
																																									v[95], i.evalErr = i.evalIsExportedCell( // isExportedCell(_3)
																																										v[32] /*_3*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[9] = m.IsTrue(v[95])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0))
																																								bv[8] = bv[9]
																																								if bv[8] {
																																									v[96], i.evalErr = i.evalIsFunctionsCell( // isFunctionsCell(_0)
																																										v[29] /*_0*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[8] = m.IsTrue(v[96])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2))
																																								bv[7] = bv[8]
																																								if bv[7] {
																																									v[97], i.evalErr = i.evalIsFuncLabelsCell( // isFuncLabelsCell(_2)
																																										v[31] /*_2*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[7] = m.IsTrue(v[97])
																																								}
																																								// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))
																																								bv[6] = bv[7]
																																								if bv[6] {
																																									v[98], i.evalErr = i.evalIsContractCodeCell( // isContractCodeCell(_5)
																																										v[34] /*_5*/,
																																										config, -1)
																																									if i.evalErr != nil {
																																										return m.NoResult, i.evalErr
																																									}
																																									bv[6] = m.IsTrue(v[98])
																																								}
																																								bv[3] = bv[6]
																																							}
																																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),#token("true","Bool")),#token("true","Bool")),isInts(ARGS))
																																							bv[2] = bv[3] /* && */ /* rhs precomputed isInt(ACCTFROM) */  /* && */ /* rhs precomputed isInt(GAVAIL) */ 
																																							if bv[2] {
																																								v[99], i.evalErr = i.evalIsInts( // isInts(ARGS)
																																									v[9] /*ARGS*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								bv[2] = m.IsTrue(v[99])
																																							}
																																							// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_319))
																																							bv[1] = bv[2]
																																							if bv[1] {
																																								v[100], i.evalErr = i.evalIsInts( // isInts(_319)
																																									v[43] /*_319*/,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								bv[1] = m.IsTrue(v[100])
																																							}
																																							// `_andBool_`(`_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isMode(EXECMODE)),isContract(CODE)),isSchedule(SCHED)),#token("true","Bool")),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isFuncIdsCell(_1)),isProgramSizeCell(_4)),isExportedCell(_3)),isFunctionsCell(_0)),isFuncLabelsCell(_2)),isContractCodeCell(_5))),#token("true","Bool")),#token("true","Bool")),isInts(ARGS)),isInts(_319))),`_==Int_`(_40,#token("0","Int")))
																																							bv[0] = /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[1]
																																							if bv[0] {
																																								v[101], i.evalErr = i.evalXuXeqXeqIntXu( // `_==Int_`(_40,#token("0","Int"))
																																									v[84 /*_40*/],
																																									/* rhs KToken */ m.IntZero,
																																									config, -1)
																																								if i.evalErr != nil {
																																									return m.NoResult, i.evalErr
																																								}
																																								bv[0] = m.IsTrue(v[101])
																																							}
																																							if bv[0] {
																																								// RHS
																																								return i.stepRHS628(v, bv, config)
																																							}
																																						} else {
																																							return i.stepLookups(c, config, 79) // reapply
																																						}
																																					}
																																				}
																																			}
																																		}
																																	} else {
																																		return i.stepLookups(c, config, 79) // reapply
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 630
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashfinishCodeDepositXuXuXuXuXuXuIELE5 { // `#finishCodeDeposit______IELE`(ACCT,CODE,STATUS,ACCTOUT,NEW)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable ACCT = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						// KVariable CODE = v[5]
						v[6] = i.Model.KApplyArg(v[2], 2)
						// KVariable STATUS = v[6]
						v[7] = i.Model.KApplyArg(v[2], 3)
						// KVariable ACCTOUT = v[7]
						v[8] = i.Model.KApplyArg(v[2], 4)
						if v[8]>>refTypeShift == uint64(boolRef) { // lhs KVariable with hook:BOOL.Bool
							// KVariable NEW = v[8]
							// KVariable DotVar1 = v[3]
							v[9] = i.Model.KApplyArg(c, 1)
							if v[9]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[10] = i.Model.KApplyArg(v[9], 0)
								if v[10]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[11], v[12] = i.Model.KSequenceSplitHeadTail(v[10]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[11]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[13] = i.Model.KApplyArg(v[11], 0)
										if i.Model.Equals(v[13], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[12]
											v[14] = i.Model.KApplyArg(c, 2)
											// KVariable _35 = v[14]
											v[15] = i.Model.KApplyArg(c, 3)
											if v[15]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(EXECMODE)
												v[16] = i.Model.KApplyArg(v[15], 0)
												// KVariable EXECMODE = v[16]
												v[17] = i.Model.KApplyArg(c, 4)
												// KVariable _36 = v[17]
												v[18] = i.Model.KApplyArg(c, 5)
												// KVariable _37 = v[18]
												v[19] = i.Model.KApplyArg(c, 6)
												// KVariable _38 = v[19]
												v[20] = i.Model.KApplyArg(c, 7)
												if v[20]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(`<output>`(_322),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26)
													v[21] = i.Model.KApplyArg(v[20], 0)
													if v[21]&kapplyMatchMask == kapplyMatchLblXltoutputXgt1 { // `<output>`(_322)
														v[22] = i.Model.KApplyArg(v[21], 0)
														// KVariable _322 = v[22]
														v[23] = i.Model.KApplyArg(v[20], 1)
														// KVariable _14 = v[23]
														v[24] = i.Model.KApplyArg(v[20], 2)
														// KVariable _15 = v[24]
														v[25] = i.Model.KApplyArg(v[20], 3)
														// KVariable _16 = v[25]
														v[26] = i.Model.KApplyArg(v[20], 4)
														if v[26]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13)
															v[27] = i.Model.KApplyArg(v[26], 0)
															// KVariable _0 = v[27]
															v[28] = i.Model.KApplyArg(v[26], 1)
															// KVariable _1 = v[28]
															v[29] = i.Model.KApplyArg(v[26], 2)
															// KVariable _2 = v[29]
															v[30] = i.Model.KApplyArg(v[26], 3)
															// KVariable _3 = v[30]
															v[31] = i.Model.KApplyArg(v[26], 4)
															// KVariable _4 = v[31]
															v[32] = i.Model.KApplyArg(v[26], 5)
															// KVariable _5 = v[32]
															v[33] = i.Model.KApplyArg(v[26], 6)
															// KVariable _6 = v[33]
															v[34] = i.Model.KApplyArg(v[26], 7)
															// KVariable _7 = v[34]
															v[35] = i.Model.KApplyArg(v[26], 8)
															// KVariable _8 = v[35]
															v[36] = i.Model.KApplyArg(v[26], 9)
															// KVariable _9 = v[36]
															v[37] = i.Model.KApplyArg(v[26], 10)
															// KVariable _10 = v[37]
															v[38] = i.Model.KApplyArg(v[26], 11)
															// KVariable _11 = v[38]
															v[39] = i.Model.KApplyArg(v[26], 12)
															if v[39]&kapplyMatchMask == kapplyMatchLblXltgasXgt1 { // `<gas>`(GAVAIL)
																v[40] = i.Model.KApplyArg(v[39], 0)
																if i.tempTypeVar = v[40] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																	// KVariable GAVAIL = v[40]
																	v[41] = i.Model.KApplyArg(v[26], 13)
																	// KVariable _12 = v[41]
																	v[42] = i.Model.KApplyArg(v[26], 14)
																	// KVariable _13 = v[42]
																	v[43] = i.Model.KApplyArg(v[20], 5)
																	// KVariable _17 = v[43]
																	v[44] = i.Model.KApplyArg(v[20], 6)
																	// KVariable _18 = v[44]
																	v[45] = i.Model.KApplyArg(v[20], 7)
																	// KVariable _19 = v[45]
																	v[46] = i.Model.KApplyArg(v[20], 8)
																	// KVariable _20 = v[46]
																	v[47] = i.Model.KApplyArg(v[20], 9)
																	// KVariable _21 = v[47]
																	v[48] = i.Model.KApplyArg(v[20], 10)
																	// KVariable _22 = v[48]
																	v[49] = i.Model.KApplyArg(v[20], 11)
																	// KVariable _23 = v[49]
																	v[50] = i.Model.KApplyArg(v[20], 12)
																	// KVariable _24 = v[50]
																	v[51] = i.Model.KApplyArg(v[20], 13)
																	// KVariable _25 = v[51]
																	v[52] = i.Model.KApplyArg(v[20], 14)
																	// KVariable _26 = v[52]
																	v[53] = i.Model.KApplyArg(c, 8)
																	if v[53]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_31,`<accounts>`(_39),_32,_33,_34)
																		v[54] = i.Model.KApplyArg(v[53], 0)
																		// KVariable _31 = v[54]
																		v[55] = i.Model.KApplyArg(v[53], 1)
																		if v[55]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_39)
																			v[56] = i.Model.KApplyArg(v[55], 0)
																			// KVariable _39 = v[56]
																			v[57] = i.Model.KApplyArg(v[53], 2)
																			// KVariable _32 = v[57]
																			v[58] = i.Model.KApplyArg(v[53], 3)
																			// KVariable _33 = v[58]
																			v[59] = i.Model.KApplyArg(v[53], 4)
																			// KVariable _34 = v[59]
																			// rule #630
																			// source: iele.k @1445
																			// {| rule `<generatedTop>`(`<k>`(`` `#finishCodeDeposit______IELE`(ACCT,CODE,STATUS,ACCTOUT,NEW)=>`#popCallStack_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(`_==K_`(EXECMODE,`VMTESTS_IELE-CONSTANTS`(.KList)),`#popWorldState_IELE-INFRASTRUCTURE`(.KList),`#dropWorldState_IELE-INFRASTRUCTURE`(.KList))~>`#dropSubstate_IELE-INFRASTRUCTURE`(.KList)~>`#if_#then_#else_#fi_K-EQUAL`(NEW,`#refund__IELE`(GAVAIL)~>#token("0","Int"),#registerDelta(STATUS,#token("1","Int"))~>#registerDelta(ACCTOUT,#token("3","Int"))~>`#refund__IELE`(GAVAIL)~>`#load___IELE`(STATUS,#token("0","Int"))~>`#load___IELE`(ACCTOUT,ACCT))``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_35,`<mode>`(EXECMODE),_36,_37,_38,`<iele>`(`<output>`(_322=>operandList(ACCT,`.List{"operandList"}`(.KList))),_14,_15,_16,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,`<gas>`(GAVAIL),_12,_13),_17,_18,_19,_20,_21,_22,_23,_24,_25,_26),`<network>`(_31,`<accounts>`(_39=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),_27,`<code>`(CODE),_28,_29,_30)),DotVar5)),_32,_33,_34)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(_323),_28,_29,_30),`Map:lookup`(_39,`<acctID>`(ACCT))),#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS)),isContract(_323)),isInt(ACCT)),isInts(_322)),isMode(EXECMODE)),isBool(NEW)),isInt(GAVAIL))) ensures #token("true","Bool") [UNIQUE_ID(06b100c5152e9ae1dcc919961147f6b13b6b4ef5804987df9b133d81528c6f3d) contentStartColumn(10) contentStartLine(1445) org.kframework.attributes.Location(Location(1445,10,1457,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																			if !matched {
																				// LOOKUPS
																				if guard < 80 {
																					// lookup:#match(`<account>`(`<acctID>`(ACCT),_27,`<code>`(_323),_28,_29,_30),`Map:lookup`(_39,`<acctID>`(ACCT)))
																					v[60], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_39,`<acctID>`(ACCT))
																						v[56] /*_39*/,
																						i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																							v[4] /*ACCT*/,
																						),
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[61] = v[60]
																					if v[61] == m.InternedBottom {
																						return i.stepLookups(c, config, 80) // reapply
																					}
																					if v[61]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),_27,`<code>`(_323),_28,_29,_30)
																						v[62] = i.Model.KApplyArg(v[61], 0)
																						if v[62]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																							v[63] = i.Model.KApplyArg(v[62], 0)
																							if i.Model.Equals(v[63], v[4] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																								v[64] = i.Model.KApplyArg(v[61], 1)
																								v[65 /*_27*/] = v[64] // lhs KVariable _27
																								v[66] = i.Model.KApplyArg(v[61], 2)
																								if v[66]&kapplyMatchMask == kapplyMatchLblXltcodeXgt1 { // `<code>`(_323)
																									v[67] = i.Model.KApplyArg(v[66], 0)
																									v[68 /*_323*/] = v[67] // lhs KVariable _323
																									v[69] = i.Model.KApplyArg(v[61], 3)
																									v[70 /*_28*/] = v[69] // lhs KVariable _28
																									v[71] = i.Model.KApplyArg(v[61], 4)
																									v[72 /*_29*/] = v[71] // lhs KVariable _29
																									v[73] = i.Model.KApplyArg(v[61], 5)
																									v[74 /*_30*/] = v[73] // lhs KVariable _30
																									// lookup:#match(DotVar5,`_[_<-undef]`(_39,`<acctID>`(ACCT)))
																									v[75], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_39,`<acctID>`(ACCT))
																										v[56] /*_39*/,
																										i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																											v[4] /*ACCT*/,
																										),
																										config, -1)
																									if i.evalErr != nil {
																										return m.NoResult, i.evalErr
																									}
																									v[76] = v[75]
																									if v[76] == m.InternedBottom {
																										return i.stepLookups(c, config, 80) // reapply
																									}
																									if v[76]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																										v[77 /*DotVar5*/] = v[76] // DotVar5
																										// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS)),isContract(_323)),#token("true","Bool")),isInts(_322)),isMode(EXECMODE)),#token("true","Bool")),#token("true","Bool")))
																										v[78], i.evalErr = i.evalIsContract( // isContract(CODE)
																											v[5] /*CODE*/,
																											config, -1)
																										if i.evalErr != nil {
																											return m.NoResult, i.evalErr
																										}
																										// `_andBool_`(isContract(CODE),isLValue(ACCTOUT))
																										bv[4] = m.IsTrue(v[78])
																										if bv[4] {
																											v[79], i.evalErr = i.evalIsLValue( // isLValue(ACCTOUT)
																												v[7] /*ACCTOUT*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[4] = m.IsTrue(v[79])
																										}
																										// `_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS))
																										bv[3] = bv[4]
																										if bv[3] {
																											v[80], i.evalErr = i.evalIsLValue( // isLValue(STATUS)
																												v[6] /*STATUS*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[3] = m.IsTrue(v[80])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS)),isContract(_323))
																										bv[2] = bv[3]
																										if bv[2] {
																											v[81], i.evalErr = i.evalIsContract( // isContract(_323)
																												v[68 /*_323*/],
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[2] = m.IsTrue(v[81])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS)),isContract(_323)),#token("true","Bool")),isInts(_322))
																										bv[1] = bv[2] /* && */ /* rhs precomputed isInt(ACCT) */ 
																										if bv[1] {
																											v[82], i.evalErr = i.evalIsInts( // isInts(_322)
																												v[22] /*_322*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[1] = m.IsTrue(v[82])
																										}
																										// `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isContract(CODE),isLValue(ACCTOUT)),isLValue(STATUS)),isContract(_323)),#token("true","Bool")),isInts(_322)),isMode(EXECMODE))
																										bv[0] = bv[1]
																										if bv[0] {
																											v[83], i.evalErr = i.evalIsMode( // isMode(EXECMODE)
																												v[16] /*EXECMODE*/,
																												config, -1)
																											if i.evalErr != nil {
																												return m.NoResult, i.evalErr
																											}
																											bv[0] = m.IsTrue(v[83])
																										}
																										if /* rhs precomputed lookup #match && lookup #match */ /* && */ bv[0] /* && */ /* rhs precomputed isBool(NEW) */  /* && */ /* rhs precomputed isInt(GAVAIL) */  {
																											// RHS
																											return i.stepRHS630(v, bv, config)
																										}
																									} else {
																										return i.stepLookups(c, config, 80) // reapply
																									}
																								}
																							}
																						}
																					} else {
																						return i.stepLookups(c, config, 80) // reapply
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 638
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashfinalizeTx1 { // #finalizeTx(#token("false","Bool"))
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.Model.Equals(v[4], m.BoolFalse) { // #token("false","Bool")
						// KVariable DotVar1 = v[3]
						v[5] = i.Model.KApplyArg(c, 1)
						if v[5]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
							v[6] = i.Model.KApplyArg(v[5], 0)
							if v[6]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
								_, v[7], v[8] = i.Model.KSequenceSplitHeadTail(v[6]) // #applyRule(#token("regular","#RuleTag")) ~> ...
								if v[7]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
									v[9] = i.Model.KApplyArg(v[7], 0)
									if i.Model.Equals(v[9], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
										// KVariable SREST = v[8]
										v[10] = i.Model.KApplyArg(c, 2)
										// KVariable _37 = v[10]
										v[11] = i.Model.KApplyArg(c, 3)
										if v[11]&kapplyMatchMask == kapplyMatchLblXltmodeXgt1 { // `<mode>`(`VMTESTS_IELE-CONSTANTS`(.KList))
											v[12] = i.Model.KApplyArg(v[11], 0)
											if v[12]&kapplyMatchMask == kapplyMatchLblVMTESTSXuIELEXhyphenCONSTANTS0 { // `VMTESTS_IELE-CONSTANTS`(.KList)
												v[13] = i.Model.KApplyArg(c, 4)
												// KVariable _38 = v[13]
												v[14] = i.Model.KApplyArg(c, 5)
												// KVariable _39 = v[14]
												v[15] = i.Model.KApplyArg(c, 6)
												// KVariable _40 = v[15]
												v[16] = i.Model.KApplyArg(c, 7)
												if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(BAL)),_20,_21,_22,_23,_24,_25,_26,_27,_28)
													v[17] = i.Model.KApplyArg(v[16], 0)
													// KVariable _16 = v[17]
													v[18] = i.Model.KApplyArg(v[16], 1)
													// KVariable _17 = v[18]
													v[19] = i.Model.KApplyArg(v[16], 2)
													// KVariable _18 = v[19]
													v[20] = i.Model.KApplyArg(v[16], 3)
													// KVariable _19 = v[20]
													v[21] = i.Model.KApplyArg(v[16], 4)
													if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13)
														v[22] = i.Model.KApplyArg(v[21], 0)
														// KVariable _0 = v[22]
														v[23] = i.Model.KApplyArg(v[21], 1)
														// KVariable _1 = v[23]
														v[24] = i.Model.KApplyArg(v[21], 2)
														// KVariable _2 = v[24]
														v[25] = i.Model.KApplyArg(v[21], 3)
														if v[25]&kapplyMatchMask == kapplyMatchLblXltidXgt1 { // `<id>`(ACCT)
															v[26] = i.Model.KApplyArg(v[25], 0)
															if i.tempTypeVar = v[26] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable ACCT = v[26]
																v[27] = i.Model.KApplyArg(v[21], 4)
																// KVariable _3 = v[27]
																v[28] = i.Model.KApplyArg(v[21], 5)
																// KVariable _4 = v[28]
																v[29] = i.Model.KApplyArg(v[21], 6)
																// KVariable _5 = v[29]
																v[30] = i.Model.KApplyArg(v[21], 7)
																// KVariable _6 = v[30]
																v[31] = i.Model.KApplyArg(v[21], 8)
																// KVariable _7 = v[31]
																v[32] = i.Model.KApplyArg(v[21], 9)
																// KVariable _8 = v[32]
																v[33] = i.Model.KApplyArg(v[21], 10)
																// KVariable _9 = v[33]
																v[34] = i.Model.KApplyArg(v[21], 11)
																// KVariable _10 = v[34]
																v[35] = i.Model.KApplyArg(v[21], 12)
																// KVariable _11 = v[35]
																v[36] = i.Model.KApplyArg(v[21], 13)
																// KVariable _12 = v[36]
																v[37] = i.Model.KApplyArg(v[21], 14)
																// KVariable _13 = v[37]
																v[38] = i.Model.KApplyArg(v[16], 5)
																if v[38]&kapplyMatchMask == kapplyMatchLblXltsubstateXgt3 { // `<substate>`(_14,_15,`<refund>`(BAL))
																	v[39] = i.Model.KApplyArg(v[38], 0)
																	// KVariable _14 = v[39]
																	v[40] = i.Model.KApplyArg(v[38], 1)
																	// KVariable _15 = v[40]
																	v[41] = i.Model.KApplyArg(v[38], 2)
																	if v[41]&kapplyMatchMask == kapplyMatchLblXltrefundXgt1 { // `<refund>`(BAL)
																		v[42] = i.Model.KApplyArg(v[41], 0)
																		if i.tempTypeVar = v[42] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																			// KVariable BAL = v[42]
																			v[43] = i.Model.KApplyArg(v[16], 6)
																			// KVariable _20 = v[43]
																			v[44] = i.Model.KApplyArg(v[16], 7)
																			// KVariable _21 = v[44]
																			v[45] = i.Model.KApplyArg(v[16], 8)
																			// KVariable _22 = v[45]
																			v[46] = i.Model.KApplyArg(v[16], 9)
																			// KVariable _23 = v[46]
																			v[47] = i.Model.KApplyArg(v[16], 10)
																			// KVariable _24 = v[47]
																			v[48] = i.Model.KApplyArg(v[16], 11)
																			// KVariable _25 = v[48]
																			v[49] = i.Model.KApplyArg(v[16], 12)
																			// KVariable _26 = v[49]
																			v[50] = i.Model.KApplyArg(v[16], 13)
																			// KVariable _27 = v[50]
																			v[51] = i.Model.KApplyArg(v[16], 14)
																			// KVariable _28 = v[51]
																			v[52] = i.Model.KApplyArg(c, 8)
																			if v[52]&kapplyMatchMask == kapplyMatchLblXltnetworkXgt5 { // `<network>`(_33,`<accounts>`(_41),_34,_35,_36)
																				v[53] = i.Model.KApplyArg(v[52], 0)
																				// KVariable _33 = v[53]
																				v[54] = i.Model.KApplyArg(v[52], 1)
																				if v[54]&kapplyMatchMask == kapplyMatchLblXltaccountsXgt1 { // `<accounts>`(_41)
																					v[55] = i.Model.KApplyArg(v[54], 0)
																					// KVariable _41 = v[55]
																					v[56] = i.Model.KApplyArg(v[52], 2)
																					// KVariable _34 = v[56]
																					v[57] = i.Model.KApplyArg(v[52], 3)
																					// KVariable _35 = v[57]
																					v[58] = i.Model.KApplyArg(v[52], 4)
																					// KVariable _36 = v[58]
																					// rule #638
																					// source: iele.k @665
																					// {| rule `<generatedTop>`(`<k>`(#finalizeTx(#token("false","Bool")=>#token("true","Bool"))~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_37,`<mode>`(`VMTESTS_IELE-CONSTANTS`(.KList)),_38,_39,_40,`<iele>`(_16,_17,_18,_19,`<callFrame>`(_0,_1,_2,`<id>`(ACCT),_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13),`<substate>`(_14,_15,`<refund>`(BAL=>#token("0","Int"))),_20,_21,_22,_23,_24,_25,_26,_27,_28),`<network>`(_33,`<accounts>`(_41=>`_AccountCellMap_`(`AccountCellMapItem`(`<acctID>`(ACCT),`<account>`(`<acctID>`(ACCT),`<balance>`(`_+Int_`(CURRBAL,BAL)),_29,_30,_31,_32)),DotVar6)),_34,_35,_36)) requires `_andBool_`(`_andBool_`(#match(`<account>`(`<acctID>`(ACCT),`<balance>`(CURRBAL),_29,_30,_31,_32),`Map:lookup`(_41,`<acctID>`(ACCT))),#match(DotVar6,`_[_<-undef]`(_41,`<acctID>`(ACCT)))),`_andBool_`(`_andBool_`(isInt(BAL),isInt(ACCT)),isInt(CURRBAL))) ensures #token("true","Bool") [UNIQUE_ID(adc6c32db869e1c7e76b320eb3b446ca6c6c69bce1b211a1d1935cc3ddcaa3a0) contentStartColumn(10) contentStartLine(665) org.kframework.attributes.Location(Location(665,10,673,20)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																					if !matched {
																						// LOOKUPS
																						if guard < 81 {
																							// lookup:#match(`<account>`(`<acctID>`(ACCT),`<balance>`(CURRBAL),_29,_30,_31,_32),`Map:lookup`(_41,`<acctID>`(ACCT)))
																							v[59], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_41,`<acctID>`(ACCT))
																								v[55] /*_41*/,
																								i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																									v[26] /*ACCT*/,
																								),
																								config, -1)
																							if i.evalErr != nil {
																								return m.NoResult, i.evalErr
																							}
																							v[60] = v[59]
																							if v[60] == m.InternedBottom {
																								return i.stepLookups(c, config, 81) // reapply
																							}
																							if v[60]&kapplyMatchMask == kapplyMatchLblXltaccountXgt6 { // `<account>`(`<acctID>`(ACCT),`<balance>`(CURRBAL),_29,_30,_31,_32)
																								v[61] = i.Model.KApplyArg(v[60], 0)
																								if v[61]&kapplyMatchMask == kapplyMatchLblXltacctIDXgt1 { // `<acctID>`(ACCT)
																									v[62] = i.Model.KApplyArg(v[61], 0)
																									if i.Model.Equals(v[62], v[26] /*ACCT*/) { // lhs KVariable, which reappears:ACCT
																										v[63] = i.Model.KApplyArg(v[60], 1)
																										if v[63]&kapplyMatchMask == kapplyMatchLblXltbalanceXgt1 { // `<balance>`(CURRBAL)
																											v[64] = i.Model.KApplyArg(v[63], 0)
																											if i.tempTypeVar = v[64] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																												v[65 /*CURRBAL*/] = v[64] // CURRBAL
																												v[66] = i.Model.KApplyArg(v[60], 2)
																												v[67 /*_29*/] = v[66] // lhs KVariable _29
																												v[68] = i.Model.KApplyArg(v[60], 3)
																												v[69 /*_30*/] = v[68] // lhs KVariable _30
																												v[70] = i.Model.KApplyArg(v[60], 4)
																												v[71 /*_31*/] = v[70] // lhs KVariable _31
																												v[72] = i.Model.KApplyArg(v[60], 5)
																												v[73 /*_32*/] = v[72] // lhs KVariable _32
																												// lookup:#match(DotVar6,`_[_<-undef]`(_41,`<acctID>`(ACCT)))
																												v[74], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_41,`<acctID>`(ACCT))
																													v[55] /*_41*/,
																													i.Model.NewKApply(m.LblXltacctIDXgt, // as-is <acctID>
																														v[26] /*ACCT*/,
																													),
																													config, -1)
																												if i.evalErr != nil {
																													return m.NoResult, i.evalErr
																												}
																												v[75] = v[74]
																												if v[75] == m.InternedBottom {
																													return i.stepLookups(c, config, 81) // reapply
																												}
																												if v[75]&collectionMatchMask == mapMatchSortAccountCellMap { // lhs KVariable with hook:MAP.Map
																													v[76 /*DotVar6*/] = v[75] // DotVar6
																													// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(#token("true","Bool"),isInt(CURRBAL)))
																													v[77], i.evalErr = i.evalIsInt( // isInt(CURRBAL)
																														v[65 /*CURRBAL*/],
																														config, -1)
																													if i.evalErr != nil {
																														return m.NoResult, i.evalErr
																													}
																													if /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isInt(BAL) && isInt(ACCT) */ /* && */ m.IsTrue(v[77]) {
																														// RHS
																														return i.stepRHS638(v, bv, config)
																													}
																												} else {
																													return i.stepLookups(c, config, 81) // reapply
																												}
																											}
																										}
																									}
																								}
																							} else {
																								return i.stepLookups(c, config, 81) // reapply
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				// rule: 639
				if v[2]&kapplyMatchMask == kapplyMatchLblXhashmemoryDelta2 { // #memoryDelta(INDEX,NEWSIZE)
					v[4] = i.Model.KApplyArg(v[2], 0)
					if i.tempTypeVar = v[4] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
						// KVariable INDEX = v[4]
						v[5] = i.Model.KApplyArg(v[2], 1)
						if i.tempTypeVar = v[5] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
							// KVariable NEWSIZE = v[5]
							// KVariable DotVar1 = v[3]
							v[6] = i.Model.KApplyArg(c, 1)
							if v[6]&kapplyMatchMask == kapplyMatchLblXltsXgt1 { // `<s>`(#applyRule(#token("regular","#RuleTag"))~>SREST)
								v[7] = i.Model.KApplyArg(v[6], 0)
								if v[7]>>refTypeShift != refEmptyKseqTypeAsUint { // #applyRule(#token("regular","#RuleTag"))~>SREST
									_, v[8], v[9] = i.Model.KSequenceSplitHeadTail(v[7]) // #applyRule(#token("regular","#RuleTag")) ~> ...
									if v[8]&kapplyMatchMask == kapplyMatchLblXhashapplyRule1 { // #applyRule(#token("regular","#RuleTag"))
										v[10] = i.Model.KApplyArg(v[8], 0)
										if i.Model.Equals(v[10], constKTokenSortXhashRuleTagregular) { // #token("regular","#RuleTag")
											// KVariable SREST = v[9]
											v[11] = i.Model.KApplyArg(c, 2)
											// KVariable _26 = v[11]
											v[12] = i.Model.KApplyArg(c, 3)
											// KVariable _27 = v[12]
											v[13] = i.Model.KApplyArg(c, 4)
											// KVariable _28 = v[13]
											v[14] = i.Model.KApplyArg(c, 5)
											// KVariable _29 = v[14]
											v[15] = i.Model.KApplyArg(c, 6)
											// KVariable _30 = v[15]
											v[16] = i.Model.KApplyArg(c, 7)
											if v[16]&kapplyMatchMask == kapplyMatchLblXltieleXgt15 { // `<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25)
												v[17] = i.Model.KApplyArg(v[16], 0)
												// KVariable _12 = v[17]
												v[18] = i.Model.KApplyArg(v[16], 1)
												// KVariable _13 = v[18]
												v[19] = i.Model.KApplyArg(v[16], 2)
												// KVariable _14 = v[19]
												v[20] = i.Model.KApplyArg(v[16], 3)
												// KVariable _15 = v[20]
												v[21] = i.Model.KApplyArg(v[16], 4)
												if v[21]&kapplyMatchMask == kapplyMatchLblXltcallFrameXgt15 { // `<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK),`<currentMemory>`(CURR),_8,_9,_10,_11)
													v[22] = i.Model.KApplyArg(v[21], 0)
													// KVariable _0 = v[22]
													v[23] = i.Model.KApplyArg(v[21], 1)
													// KVariable _1 = v[23]
													v[24] = i.Model.KApplyArg(v[21], 2)
													// KVariable _2 = v[24]
													v[25] = i.Model.KApplyArg(v[21], 3)
													// KVariable _3 = v[25]
													v[26] = i.Model.KApplyArg(v[21], 4)
													// KVariable _4 = v[26]
													v[27] = i.Model.KApplyArg(v[21], 5)
													// KVariable _5 = v[27]
													v[28] = i.Model.KApplyArg(v[21], 6)
													// KVariable _6 = v[28]
													v[29] = i.Model.KApplyArg(v[21], 7)
													// KVariable _7 = v[29]
													v[30] = i.Model.KApplyArg(v[21], 8)
													if v[30]&kapplyMatchMask == kapplyMatchLblXltlocalMemXgt1 { // `<localMem>`(_32)
														v[31] = i.Model.KApplyArg(v[30], 0)
														// KVariable _32 = v[31]
														v[32] = i.Model.KApplyArg(v[21], 9)
														if v[32]&kapplyMatchMask == kapplyMatchLblXltpeakMemoryXgt1 { // `<peakMemory>`(PEAK)
															v[33] = i.Model.KApplyArg(v[32], 0)
															if i.tempTypeVar = v[33] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																// KVariable PEAK = v[33]
																v[34] = i.Model.KApplyArg(v[21], 10)
																if v[34]&kapplyMatchMask == kapplyMatchLblXltcurrentMemoryXgt1 { // `<currentMemory>`(CURR)
																	v[35] = i.Model.KApplyArg(v[34], 0)
																	if i.tempTypeVar = v[35] >> refTypeShift; i.tempTypeVar == uint64(smallPositiveIntRef) || i.tempTypeVar == uint64(smallNegativeIntRef) || i.tempTypeVar == uint64(bigIntRef) { // lhs KVariable with hook:INT.Int
																		// KVariable CURR = v[35]
																		v[36] = i.Model.KApplyArg(v[21], 11)
																		// KVariable _8 = v[36]
																		v[37] = i.Model.KApplyArg(v[21], 12)
																		// KVariable _9 = v[37]
																		v[38] = i.Model.KApplyArg(v[21], 13)
																		// KVariable _10 = v[38]
																		v[39] = i.Model.KApplyArg(v[21], 14)
																		// KVariable _11 = v[39]
																		v[40] = i.Model.KApplyArg(v[16], 5)
																		// KVariable _16 = v[40]
																		v[41] = i.Model.KApplyArg(v[16], 6)
																		// KVariable _17 = v[41]
																		v[42] = i.Model.KApplyArg(v[16], 7)
																		// KVariable _18 = v[42]
																		v[43] = i.Model.KApplyArg(v[16], 8)
																		// KVariable _19 = v[43]
																		v[44] = i.Model.KApplyArg(v[16], 9)
																		// KVariable _20 = v[44]
																		v[45] = i.Model.KApplyArg(v[16], 10)
																		// KVariable _21 = v[45]
																		v[46] = i.Model.KApplyArg(v[16], 11)
																		// KVariable _22 = v[46]
																		v[47] = i.Model.KApplyArg(v[16], 12)
																		// KVariable _23 = v[47]
																		v[48] = i.Model.KApplyArg(v[16], 13)
																		// KVariable _24 = v[48]
																		v[49] = i.Model.KApplyArg(v[16], 14)
																		// KVariable _25 = v[49]
																		v[50] = i.Model.KApplyArg(c, 8)
																		// KVariable _31 = v[50]
																		// rule #639
																		// source: iele-gas.k @383
																		// {| rule `<generatedTop>`(`<k>`(``#memoryDelta(INDEX,NEWSIZE)=>#deductMemory(PEAK)``~>DotVar1),`<s>`(``#applyRule(#token("regular","#RuleTag"))=>#appliedRule(#token("regular","#RuleTag"))``~>SREST),_26,_27,_28,_29,_30,`<iele>`(_12,_13,_14,_15,`<callFrame>`(_0,_1,_2,_3,_4,_5,_6,_7,`<localMem>`(_32),`<peakMemory>`(PEAK=>`maxInt(_,_)_INT`(PEAK,`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM))))),`<currentMemory>`(CURR=>`_-Int__INT`(`_+Int_`(CURR,NEWSIZE),bytesInWords(lengthBytes(LM)))),_8,_9,_10,_11),_16,_17,_18,_19,_20,_21,_22,_23,_24,_25),_31) requires `_andBool_`(`_andBool_`(#match(DotVar4,`_[_<-undef]`(_32,INDEX)),#match(LM,`Map:lookup`(_32,INDEX))),`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(isInt(PEAK),isInt(INDEX)),isBytes(LM)),isInt(NEWSIZE)),isInt(CURR))) ensures #token("true","Bool") [UNIQUE_ID(995a6eb06f406e9d613544e3d7d4a1b9240f0b913bf5213a02d2f9bf2ceebe31) contentStartColumn(10) contentStartLine(383) org.kframework.attributes.Location(Location(383,10,386,113)) org.kframework.attributes.Source(Source(/home/andreim/go/src/github.com/ElrondNetwork/elrond-vm/iele/elrond/node/iele-gas.k)) org.kframework.definition.Production(syntax RuleContent ::= K)] |}
																		if !matched {
																			// LOOKUPS
																			if guard < 82 {
																				// lookup:#match(DotVar4,`_[_<-undef]`(_32,INDEX))
																				v[51], i.evalErr = i.evalXuXlsqbXuXltXhyphenundefXrsqb( // `_[_<-undef]`(_32,INDEX)
																					v[31] /*_32*/,
																					v[4] /*INDEX*/,
																					config, -1)
																				if i.evalErr != nil {
																					return m.NoResult, i.evalErr
																				}
																				v[52] = v[51]
																				if v[52] == m.InternedBottom {
																					return i.stepLookups(c, config, 82) // reapply
																				}
																				if v[52]&collectionMatchMask == mapMatchSortMap { // lhs KVariable with hook:MAP.Map
																					v[53 /*DotVar4*/] = v[52] // DotVar4
																					// lookup:#match(LM,`Map:lookup`(_32,INDEX))
																					v[54], i.evalErr = i.evalMapXcolonlookup( // `Map:lookup`(_32,INDEX)
																						v[31] /*_32*/,
																						v[4] /*INDEX*/,
																						config, -1)
																					if i.evalErr != nil {
																						return m.NoResult, i.evalErr
																					}
																					v[55] = v[54]
																					if v[55] == m.InternedBottom {
																						return i.stepLookups(c, config, 82) // reapply
																					}
																					if v[55]>>refTypeShift == uint64(bytesRef) { // lhs KVariable with hook:BYTES.Bytes
																						v[56 /*LM*/] = v[55] // LM
																						// REQUIRES `_andBool_`(#token("true","Bool"),`_andBool_`(`_andBool_`(`_andBool_`(#token("true","Bool"),isBytes(LM)),#token("true","Bool")),#token("true","Bool")))
																						v[57], i.evalErr = i.evalIsBytes( // isBytes(LM)
																							v[56 /*LM*/],
																							config, -1)
																						if i.evalErr != nil {
																							return m.NoResult, i.evalErr
																						}
																						if /* rhs precomputed lookup #match && lookup #match */ /* && */ /* rhs precomputed isInt(PEAK) && isInt(INDEX) */ /* && */ m.IsTrue(v[57]) /* && */ /* rhs precomputed isInt(NEWSIZE) */  /* && */ /* rhs precomputed isInt(CURR) */  {
																							// RHS
																							return i.stepRHS639(v, bv, config)
																						}
																					} else {
																						return i.stepLookups(c, config, 82) // reapply
																					}
																				} else {
																					return i.stepLookups(c, config, 82) // reapply
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return c, noStep
}

// stepMaxVarCount indicates the maximum number of variables required by a rule
// needed to initialize the step variables (i.stepTempVars) slice
const stepMaxVarCount = 114

// stepMaxBoolVarCount indicates the maximum number of boolean variables required by a rule
// needed to initialize the boolean variables (i.stepTempBoolVars) slice
const stepMaxBoolVarCount = 29

